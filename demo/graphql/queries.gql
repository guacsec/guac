fragment allPkgTree on Package {
  id
  type
  namespaces {
    id
    namespace
    names {
      id
      name
      versions {
        id
        version
        qualifiers {
          key
          value
        }
        subpath
      }
    }
  }
}

query PkgQ1 {
  packages(pkgSpec: {}) {
    type
  }
}

query PkgQ2 {
  packages(pkgSpec: { type: "deb" }) {
    type
    namespaces {
      namespace
    }
  }
}

query PkgQ3 {
  packages(pkgSpec: { name: "libp11-kit0" }) {
    ...allPkgTree
  }
}

query PkgQ4 {
  packages(pkgSpec: { type: "guac", namespace: "cdx/docker.io/library", name: "consul" }) {
    ...allPkgTree
  }
}

fragment allIsDependencyTree on IsDependency {
  id
  justification
  versionRange
  package {
    ...allPkgTree
  }
  dependencyPackage {
    ...allPkgTree
  }
  origin
  collector
}

query IsDependencyQ1 {
  IsDependency(isDependencySpec: { package: { type: "guac", namespace: "cdx/docker.io/library", name: "consul" }}) {
    dependencyPackage {
      type
      namespaces {
        namespace
        names {
          name
        }
      }
    }
  }
}

query IsDependencyQ2 {
  IsDependency(isDependencySpec: {
    package: { type: "guac", namespace: "cdx/docker.io/library", name: "consul" }
    dependencyPackage: { type: "golang", namespace: "github.com/sirupsen", name: "logrus" }
  }) {
    ...allIsDependencyTree
  }
}

query PkgQ5 {
  packages(pkgSpec: { type: "golang", namespace: "github.com/hashicorp/consul", name: "sdk" }) {
    type
    namespaces {
      namespace
      names {
        id
        name
      }
    }
  }
}

query PkgQ6 {
  packages(pkgSpec: { type: "golang", namespace: "github.com/hashicorp/consul", name: "api" }) {
    type
    namespaces {
      namespace
      names {
        id
        name
      }
    }
  }
}

query PathQ1 ($subject: ID!, $target: ID!) {
  path(subject: $subject, target: $target, maxPathLength: 10, usingOnly: []) {
    __typename
    ... on Package{
        ...allPkgTree
    }
    ... on IsDependency {
        ...allIsDependencyTree
    }
  }
}

query GetNeighbors ($nodeId: ID!) {
  neighbors(node: $nodeId, usingOnly: []) {
    __typename
    ... on Package{
      ...allPkgTree
    }
    ... on IsDependency {
      ...allIsDependencyTree
    }
  }
}

query Node ($nodeId: ID!) {
  node(node: $nodeId) {
    __typename
    ... on Package{
      ...allPkgTree
    }
    ... on IsDependency {
      ...allIsDependencyTree
    }
  }
}

fragment allVulnerabilityTree on Vulnerability {
  id
  type
  vulnerabilityIDs {
    id
    vulnerabilityID
  }
}

fragment allCertifyVulnTree on CertifyVuln {
  id
  package {
    id
    type
    namespaces {
      id
      namespace
      names {
        id
        name
        versions {
          id
          version
          qualifiers {
            key
            value
          }
          subpath
        }
      }
    }
  }
  vulnerability {
    id
    type
    vulnerabilityIDs {
      id
      vulnerabilityID
    }
  }
  metadata {
    dbUri
    dbVersion
    scannerUri
    scannerVersion
    timeScanned
    origin
    collector
  }
}

query OSVQ1 {
  vulnerabilities(vulnSpec: {type: "osv", vulnerabilityID: "ghsa-jfh8-c2jp-5v3q"}) {
    ...allVulnerabilityTree
  }
}

query CertifyVulnQ1 {
  CertifyVuln(certifyVulnSpec: {vulnerability: {type: "osv", vulnerabilityID: "ghsa-jfh8-c2jp-5v3q"}}) {
    ...allCertifyVulnTree
  }
}

query PkgQ7 {
  packages(pkgSpec: { type: "guac", name: "python" }) {
    type
    namespaces {
      namespace
      names {
        id
        name
      }
    }
  }
}

query PkgQ8 {
  packages(pkgSpec: { type: "deb", name: "libsqlite3-dev" }) {
    type
    namespaces {
      namespace
      names {
        id
        name
        versions {
            id
            version
        }
      }
    }
  }
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
)

// BillOfMaterialsCreate is the builder for creating a BillOfMaterials entity.
type BillOfMaterialsCreate struct {
	config
	mutation *BillOfMaterialsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPackageID sets the "package_id" field.
func (bomc *BillOfMaterialsCreate) SetPackageID(i int) *BillOfMaterialsCreate {
	bomc.mutation.SetPackageID(i)
	return bomc
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (bomc *BillOfMaterialsCreate) SetNillablePackageID(i *int) *BillOfMaterialsCreate {
	if i != nil {
		bomc.SetPackageID(*i)
	}
	return bomc
}

// SetArtifactID sets the "artifact_id" field.
func (bomc *BillOfMaterialsCreate) SetArtifactID(i int) *BillOfMaterialsCreate {
	bomc.mutation.SetArtifactID(i)
	return bomc
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (bomc *BillOfMaterialsCreate) SetNillableArtifactID(i *int) *BillOfMaterialsCreate {
	if i != nil {
		bomc.SetArtifactID(*i)
	}
	return bomc
}

// SetURI sets the "uri" field.
func (bomc *BillOfMaterialsCreate) SetURI(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetURI(s)
	return bomc
}

// SetAlgorithm sets the "algorithm" field.
func (bomc *BillOfMaterialsCreate) SetAlgorithm(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetAlgorithm(s)
	return bomc
}

// SetDigest sets the "digest" field.
func (bomc *BillOfMaterialsCreate) SetDigest(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetDigest(s)
	return bomc
}

// SetDownloadLocation sets the "download_location" field.
func (bomc *BillOfMaterialsCreate) SetDownloadLocation(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetDownloadLocation(s)
	return bomc
}

// SetOrigin sets the "origin" field.
func (bomc *BillOfMaterialsCreate) SetOrigin(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetOrigin(s)
	return bomc
}

// SetCollector sets the "collector" field.
func (bomc *BillOfMaterialsCreate) SetCollector(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetCollector(s)
	return bomc
}

// SetKnownSince sets the "known_since" field.
func (bomc *BillOfMaterialsCreate) SetKnownSince(t time.Time) *BillOfMaterialsCreate {
	bomc.mutation.SetKnownSince(t)
	return bomc
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (bomc *BillOfMaterialsCreate) SetPackage(p *PackageVersion) *BillOfMaterialsCreate {
	return bomc.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (bomc *BillOfMaterialsCreate) SetArtifact(a *Artifact) *BillOfMaterialsCreate {
	return bomc.SetArtifactID(a.ID)
}

// Mutation returns the BillOfMaterialsMutation object of the builder.
func (bomc *BillOfMaterialsCreate) Mutation() *BillOfMaterialsMutation {
	return bomc.mutation
}

// Save creates the BillOfMaterials in the database.
func (bomc *BillOfMaterialsCreate) Save(ctx context.Context) (*BillOfMaterials, error) {
	return withHooks(ctx, bomc.sqlSave, bomc.mutation, bomc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bomc *BillOfMaterialsCreate) SaveX(ctx context.Context) *BillOfMaterials {
	v, err := bomc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bomc *BillOfMaterialsCreate) Exec(ctx context.Context) error {
	_, err := bomc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bomc *BillOfMaterialsCreate) ExecX(ctx context.Context) {
	if err := bomc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bomc *BillOfMaterialsCreate) check() error {
	if _, ok := bomc.mutation.URI(); !ok {
		return &ValidationError{Name: "uri", err: errors.New(`ent: missing required field "BillOfMaterials.uri"`)}
	}
	if _, ok := bomc.mutation.Algorithm(); !ok {
		return &ValidationError{Name: "algorithm", err: errors.New(`ent: missing required field "BillOfMaterials.algorithm"`)}
	}
	if _, ok := bomc.mutation.Digest(); !ok {
		return &ValidationError{Name: "digest", err: errors.New(`ent: missing required field "BillOfMaterials.digest"`)}
	}
	if _, ok := bomc.mutation.DownloadLocation(); !ok {
		return &ValidationError{Name: "download_location", err: errors.New(`ent: missing required field "BillOfMaterials.download_location"`)}
	}
	if _, ok := bomc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "BillOfMaterials.origin"`)}
	}
	if _, ok := bomc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "BillOfMaterials.collector"`)}
	}
	if _, ok := bomc.mutation.KnownSince(); !ok {
		return &ValidationError{Name: "known_since", err: errors.New(`ent: missing required field "BillOfMaterials.known_since"`)}
	}
	return nil
}

func (bomc *BillOfMaterialsCreate) sqlSave(ctx context.Context) (*BillOfMaterials, error) {
	if err := bomc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bomc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bomc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bomc.mutation.id = &_node.ID
	bomc.mutation.done = true
	return _node, nil
}

func (bomc *BillOfMaterialsCreate) createSpec() (*BillOfMaterials, *sqlgraph.CreateSpec) {
	var (
		_node = &BillOfMaterials{config: bomc.config}
		_spec = sqlgraph.NewCreateSpec(billofmaterials.Table, sqlgraph.NewFieldSpec(billofmaterials.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bomc.conflict
	if value, ok := bomc.mutation.URI(); ok {
		_spec.SetField(billofmaterials.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if value, ok := bomc.mutation.Algorithm(); ok {
		_spec.SetField(billofmaterials.FieldAlgorithm, field.TypeString, value)
		_node.Algorithm = value
	}
	if value, ok := bomc.mutation.Digest(); ok {
		_spec.SetField(billofmaterials.FieldDigest, field.TypeString, value)
		_node.Digest = value
	}
	if value, ok := bomc.mutation.DownloadLocation(); ok {
		_spec.SetField(billofmaterials.FieldDownloadLocation, field.TypeString, value)
		_node.DownloadLocation = value
	}
	if value, ok := bomc.mutation.Origin(); ok {
		_spec.SetField(billofmaterials.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := bomc.mutation.Collector(); ok {
		_spec.SetField(billofmaterials.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if value, ok := bomc.mutation.KnownSince(); ok {
		_spec.SetField(billofmaterials.FieldKnownSince, field.TypeTime, value)
		_node.KnownSince = value
	}
	if nodes := bomc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billofmaterials.PackageTable,
			Columns: []string{billofmaterials.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bomc.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billofmaterials.ArtifactTable,
			Columns: []string{billofmaterials.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArtifactID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillOfMaterials.Create().
//		SetPackageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillOfMaterialsUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (bomc *BillOfMaterialsCreate) OnConflict(opts ...sql.ConflictOption) *BillOfMaterialsUpsertOne {
	bomc.conflict = opts
	return &BillOfMaterialsUpsertOne{
		create: bomc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillOfMaterials.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bomc *BillOfMaterialsCreate) OnConflictColumns(columns ...string) *BillOfMaterialsUpsertOne {
	bomc.conflict = append(bomc.conflict, sql.ConflictColumns(columns...))
	return &BillOfMaterialsUpsertOne{
		create: bomc,
	}
}

type (
	// BillOfMaterialsUpsertOne is the builder for "upsert"-ing
	//  one BillOfMaterials node.
	BillOfMaterialsUpsertOne struct {
		create *BillOfMaterialsCreate
	}

	// BillOfMaterialsUpsert is the "OnConflict" setter.
	BillOfMaterialsUpsert struct {
		*sql.UpdateSet
	}
)

// SetPackageID sets the "package_id" field.
func (u *BillOfMaterialsUpsert) SetPackageID(v int) *BillOfMaterialsUpsert {
	u.Set(billofmaterials.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *BillOfMaterialsUpsert) UpdatePackageID() *BillOfMaterialsUpsert {
	u.SetExcluded(billofmaterials.FieldPackageID)
	return u
}

// ClearPackageID clears the value of the "package_id" field.
func (u *BillOfMaterialsUpsert) ClearPackageID() *BillOfMaterialsUpsert {
	u.SetNull(billofmaterials.FieldPackageID)
	return u
}

// SetArtifactID sets the "artifact_id" field.
func (u *BillOfMaterialsUpsert) SetArtifactID(v int) *BillOfMaterialsUpsert {
	u.Set(billofmaterials.FieldArtifactID, v)
	return u
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *BillOfMaterialsUpsert) UpdateArtifactID() *BillOfMaterialsUpsert {
	u.SetExcluded(billofmaterials.FieldArtifactID)
	return u
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *BillOfMaterialsUpsert) ClearArtifactID() *BillOfMaterialsUpsert {
	u.SetNull(billofmaterials.FieldArtifactID)
	return u
}

// SetURI sets the "uri" field.
func (u *BillOfMaterialsUpsert) SetURI(v string) *BillOfMaterialsUpsert {
	u.Set(billofmaterials.FieldURI, v)
	return u
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *BillOfMaterialsUpsert) UpdateURI() *BillOfMaterialsUpsert {
	u.SetExcluded(billofmaterials.FieldURI)
	return u
}

// SetAlgorithm sets the "algorithm" field.
func (u *BillOfMaterialsUpsert) SetAlgorithm(v string) *BillOfMaterialsUpsert {
	u.Set(billofmaterials.FieldAlgorithm, v)
	return u
}

// UpdateAlgorithm sets the "algorithm" field to the value that was provided on create.
func (u *BillOfMaterialsUpsert) UpdateAlgorithm() *BillOfMaterialsUpsert {
	u.SetExcluded(billofmaterials.FieldAlgorithm)
	return u
}

// SetDigest sets the "digest" field.
func (u *BillOfMaterialsUpsert) SetDigest(v string) *BillOfMaterialsUpsert {
	u.Set(billofmaterials.FieldDigest, v)
	return u
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *BillOfMaterialsUpsert) UpdateDigest() *BillOfMaterialsUpsert {
	u.SetExcluded(billofmaterials.FieldDigest)
	return u
}

// SetDownloadLocation sets the "download_location" field.
func (u *BillOfMaterialsUpsert) SetDownloadLocation(v string) *BillOfMaterialsUpsert {
	u.Set(billofmaterials.FieldDownloadLocation, v)
	return u
}

// UpdateDownloadLocation sets the "download_location" field to the value that was provided on create.
func (u *BillOfMaterialsUpsert) UpdateDownloadLocation() *BillOfMaterialsUpsert {
	u.SetExcluded(billofmaterials.FieldDownloadLocation)
	return u
}

// SetOrigin sets the "origin" field.
func (u *BillOfMaterialsUpsert) SetOrigin(v string) *BillOfMaterialsUpsert {
	u.Set(billofmaterials.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *BillOfMaterialsUpsert) UpdateOrigin() *BillOfMaterialsUpsert {
	u.SetExcluded(billofmaterials.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *BillOfMaterialsUpsert) SetCollector(v string) *BillOfMaterialsUpsert {
	u.Set(billofmaterials.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *BillOfMaterialsUpsert) UpdateCollector() *BillOfMaterialsUpsert {
	u.SetExcluded(billofmaterials.FieldCollector)
	return u
}

// SetKnownSince sets the "known_since" field.
func (u *BillOfMaterialsUpsert) SetKnownSince(v time.Time) *BillOfMaterialsUpsert {
	u.Set(billofmaterials.FieldKnownSince, v)
	return u
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *BillOfMaterialsUpsert) UpdateKnownSince() *BillOfMaterialsUpsert {
	u.SetExcluded(billofmaterials.FieldKnownSince)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BillOfMaterials.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BillOfMaterialsUpsertOne) UpdateNewValues() *BillOfMaterialsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillOfMaterials.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillOfMaterialsUpsertOne) Ignore() *BillOfMaterialsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillOfMaterialsUpsertOne) DoNothing() *BillOfMaterialsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillOfMaterialsCreate.OnConflict
// documentation for more info.
func (u *BillOfMaterialsUpsertOne) Update(set func(*BillOfMaterialsUpsert)) *BillOfMaterialsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillOfMaterialsUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *BillOfMaterialsUpsertOne) SetPackageID(v int) *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertOne) UpdatePackageID() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *BillOfMaterialsUpsertOne) ClearPackageID() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.ClearPackageID()
	})
}

// SetArtifactID sets the "artifact_id" field.
func (u *BillOfMaterialsUpsertOne) SetArtifactID(v int) *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetArtifactID(v)
	})
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertOne) UpdateArtifactID() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateArtifactID()
	})
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *BillOfMaterialsUpsertOne) ClearArtifactID() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.ClearArtifactID()
	})
}

// SetURI sets the "uri" field.
func (u *BillOfMaterialsUpsertOne) SetURI(v string) *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetURI(v)
	})
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertOne) UpdateURI() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateURI()
	})
}

// SetAlgorithm sets the "algorithm" field.
func (u *BillOfMaterialsUpsertOne) SetAlgorithm(v string) *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetAlgorithm(v)
	})
}

// UpdateAlgorithm sets the "algorithm" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertOne) UpdateAlgorithm() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateAlgorithm()
	})
}

// SetDigest sets the "digest" field.
func (u *BillOfMaterialsUpsertOne) SetDigest(v string) *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetDigest(v)
	})
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertOne) UpdateDigest() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateDigest()
	})
}

// SetDownloadLocation sets the "download_location" field.
func (u *BillOfMaterialsUpsertOne) SetDownloadLocation(v string) *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetDownloadLocation(v)
	})
}

// UpdateDownloadLocation sets the "download_location" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertOne) UpdateDownloadLocation() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateDownloadLocation()
	})
}

// SetOrigin sets the "origin" field.
func (u *BillOfMaterialsUpsertOne) SetOrigin(v string) *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertOne) UpdateOrigin() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *BillOfMaterialsUpsertOne) SetCollector(v string) *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertOne) UpdateCollector() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateCollector()
	})
}

// SetKnownSince sets the "known_since" field.
func (u *BillOfMaterialsUpsertOne) SetKnownSince(v time.Time) *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetKnownSince(v)
	})
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertOne) UpdateKnownSince() *BillOfMaterialsUpsertOne {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateKnownSince()
	})
}

// Exec executes the query.
func (u *BillOfMaterialsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BillOfMaterialsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillOfMaterialsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillOfMaterialsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillOfMaterialsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillOfMaterialsCreateBulk is the builder for creating many BillOfMaterials entities in bulk.
type BillOfMaterialsCreateBulk struct {
	config
	err      error
	builders []*BillOfMaterialsCreate
	conflict []sql.ConflictOption
}

// Save creates the BillOfMaterials entities in the database.
func (bomcb *BillOfMaterialsCreateBulk) Save(ctx context.Context) ([]*BillOfMaterials, error) {
	if bomcb.err != nil {
		return nil, bomcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bomcb.builders))
	nodes := make([]*BillOfMaterials, len(bomcb.builders))
	mutators := make([]Mutator, len(bomcb.builders))
	for i := range bomcb.builders {
		func(i int, root context.Context) {
			builder := bomcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillOfMaterialsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bomcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bomcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bomcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bomcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bomcb *BillOfMaterialsCreateBulk) SaveX(ctx context.Context) []*BillOfMaterials {
	v, err := bomcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bomcb *BillOfMaterialsCreateBulk) Exec(ctx context.Context) error {
	_, err := bomcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bomcb *BillOfMaterialsCreateBulk) ExecX(ctx context.Context) {
	if err := bomcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillOfMaterials.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillOfMaterialsUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (bomcb *BillOfMaterialsCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillOfMaterialsUpsertBulk {
	bomcb.conflict = opts
	return &BillOfMaterialsUpsertBulk{
		create: bomcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillOfMaterials.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bomcb *BillOfMaterialsCreateBulk) OnConflictColumns(columns ...string) *BillOfMaterialsUpsertBulk {
	bomcb.conflict = append(bomcb.conflict, sql.ConflictColumns(columns...))
	return &BillOfMaterialsUpsertBulk{
		create: bomcb,
	}
}

// BillOfMaterialsUpsertBulk is the builder for "upsert"-ing
// a bulk of BillOfMaterials nodes.
type BillOfMaterialsUpsertBulk struct {
	create *BillOfMaterialsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillOfMaterials.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BillOfMaterialsUpsertBulk) UpdateNewValues() *BillOfMaterialsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillOfMaterials.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillOfMaterialsUpsertBulk) Ignore() *BillOfMaterialsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillOfMaterialsUpsertBulk) DoNothing() *BillOfMaterialsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillOfMaterialsCreateBulk.OnConflict
// documentation for more info.
func (u *BillOfMaterialsUpsertBulk) Update(set func(*BillOfMaterialsUpsert)) *BillOfMaterialsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillOfMaterialsUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *BillOfMaterialsUpsertBulk) SetPackageID(v int) *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertBulk) UpdatePackageID() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *BillOfMaterialsUpsertBulk) ClearPackageID() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.ClearPackageID()
	})
}

// SetArtifactID sets the "artifact_id" field.
func (u *BillOfMaterialsUpsertBulk) SetArtifactID(v int) *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetArtifactID(v)
	})
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertBulk) UpdateArtifactID() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateArtifactID()
	})
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *BillOfMaterialsUpsertBulk) ClearArtifactID() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.ClearArtifactID()
	})
}

// SetURI sets the "uri" field.
func (u *BillOfMaterialsUpsertBulk) SetURI(v string) *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetURI(v)
	})
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertBulk) UpdateURI() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateURI()
	})
}

// SetAlgorithm sets the "algorithm" field.
func (u *BillOfMaterialsUpsertBulk) SetAlgorithm(v string) *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetAlgorithm(v)
	})
}

// UpdateAlgorithm sets the "algorithm" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertBulk) UpdateAlgorithm() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateAlgorithm()
	})
}

// SetDigest sets the "digest" field.
func (u *BillOfMaterialsUpsertBulk) SetDigest(v string) *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetDigest(v)
	})
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertBulk) UpdateDigest() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateDigest()
	})
}

// SetDownloadLocation sets the "download_location" field.
func (u *BillOfMaterialsUpsertBulk) SetDownloadLocation(v string) *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetDownloadLocation(v)
	})
}

// UpdateDownloadLocation sets the "download_location" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertBulk) UpdateDownloadLocation() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateDownloadLocation()
	})
}

// SetOrigin sets the "origin" field.
func (u *BillOfMaterialsUpsertBulk) SetOrigin(v string) *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertBulk) UpdateOrigin() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *BillOfMaterialsUpsertBulk) SetCollector(v string) *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertBulk) UpdateCollector() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateCollector()
	})
}

// SetKnownSince sets the "known_since" field.
func (u *BillOfMaterialsUpsertBulk) SetKnownSince(v time.Time) *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.SetKnownSince(v)
	})
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *BillOfMaterialsUpsertBulk) UpdateKnownSince() *BillOfMaterialsUpsertBulk {
	return u.Update(func(s *BillOfMaterialsUpsert) {
		s.UpdateKnownSince()
	})
}

// Exec executes the query.
func (u *BillOfMaterialsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BillOfMaterialsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BillOfMaterialsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillOfMaterialsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

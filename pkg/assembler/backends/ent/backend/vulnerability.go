//
// Copyright 2023 The GUAC Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package backend

import (
	"context"
	stdsql "database/sql"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/pkg/errors"
)

const NoVuln = "novuln"

func (b *EntBackend) IngestVulnerability(ctx context.Context, vuln model.VulnerabilityInputSpec) (*model.VulnerabilityIDs, error) {
	id, err := WithinTX(ctx, b.client, func(ctx context.Context) (*model.VulnerabilityIDs, error) {
		return upsertVulnerability(ctx, ent.TxFromContext(ctx), vuln)
	})
	if err != nil {
		return nil, err
	}

	return id, nil
}

func (b *EntBackend) IngestVulnerabilities(ctx context.Context, vulns []*model.VulnerabilityInputSpec) ([]*model.VulnerabilityIDs, error) {
	ids := make([]*model.VulnerabilityIDs, len(vulns))
	for i, vul := range vulns {
		id, err := b.IngestVulnerability(ctx, *vul)
		if err != nil {
			return nil, err
		}
		ids[i] = id
	}
	return ids, nil
}

func (b *EntBackend) Vulnerabilities(ctx context.Context, filter *model.VulnerabilitySpec) ([]*model.Vulnerability, error) {
	records, err := getVulnerabilities(ctx, b.client, *filter)
	if err != nil {
		return nil, err
	}
	return collect(records, toModelVulnerability), nil
}

func getVulnerabilities(ctx context.Context, client *ent.Client, filter model.VulnerabilitySpec) (ent.VulnerabilityTypes, error) {
	var where = []predicate.VulnerabilityType{
		optionalPredicate(filter.ID, IDEQ),
		optionalPredicate(filter.Type, vulnerabilitytype.TypeEqualFold),
	}
	if filter.Type != nil && strings.ToLower(*filter.Type) != NoVuln {
		where = append(where, vulnerabilitytype.HasVulnerabilityIdsWith(
			optionalPredicate(filter.VulnerabilityID, vulnerabilityid.VulnerabilityIDEqualFold),
		))
	}

	results, err := client.VulnerabilityType.Query().
		Where(where...).
		WithVulnerabilityIds(func(query *ent.VulnerabilityIDQuery) {
			query.Where(optionalPredicate(filter.VulnerabilityID, vulnerabilityid.VulnerabilityIDEqualFold))
		}).
		Limit(MaxPageSize).
		All(ctx)
	if err != nil {
		return nil, err
	}
	return results, nil
}

func upsertVulnerability(ctx context.Context, client *ent.Tx, spec model.VulnerabilityInputSpec) (*model.VulnerabilityIDs, error) {

	typeId, err := client.VulnerabilityType.Create().
		SetType(strings.ToLower(spec.Type)).
		OnConflict(sql.ConflictColumns(vulnerabilitytype.FieldType)).
		DoNothing().
		ID(ctx)

	if err != nil {
		if err != stdsql.ErrNoRows {
			return nil, errors.Wrap(err, "upsert vulnerability")
		}
		typeId, err = client.VulnerabilityType.Query().
			Where(vulnerabilitytype.TypeEQ(strings.ToLower(spec.Type))).
			OnlyID(ctx)
		if err != nil {
			return nil, errors.Wrap(err, "get vulnerability type")
		}
	}

	vulnID, err := client.VulnerabilityID.Create().
		SetTypeID(typeId).
		SetVulnerabilityID(strings.ToLower(spec.VulnerabilityID)).
		OnConflict(sql.ConflictColumns(vulnerabilityid.FieldTypeID, vulnerabilityid.FieldVulnerabilityID)).
		DoNothing().
		ID(ctx)

	if err != nil {
		if err != stdsql.ErrNoRows {
			return nil, errors.Wrap(err, "upsert vulnerability ID and TypeID")
		}
		vulnID, err = client.VulnerabilityID.Query().
			Where(
				vulnerabilityid.VulnerabilityID(strings.ToLower(spec.VulnerabilityID)), vulnerabilityid.TypeIDEQ(typeId),
			).
			OnlyID(ctx)

		if err != nil {
			return nil, errors.Wrap(err, "get vulnerability ID")
		}
	}

	return &model.VulnerabilityIDs{VulnerabilityTypeID: strconv.Itoa(typeId), VulnerabilityNodeID: strconv.Itoa(vulnID)}, nil
}

func toModelVulnerability(vuln *ent.VulnerabilityType) *model.Vulnerability {
	return &model.Vulnerability{
		ID:               nodeID(vuln.ID),
		Type:             vuln.Type,
		VulnerabilityIDs: collect(vuln.Edges.VulnerabilityIds, toModelVulnerabilityID),
	}
}

func toModelVulnerabilityID(vulnID *ent.VulnerabilityID) *model.VulnerabilityID {
	return &model.VulnerabilityID{
		ID:              nodeID(vulnID.ID),
		VulnerabilityID: vulnID.VulnerabilityID,
	}
}

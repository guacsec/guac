// Code generated by ent, DO NOT EDIT.

package pointofcontact

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLTE(FieldID, id))
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldSourceID, v))
}

// PackageVersionID applies equality check predicate on the "package_version_id" field. It's identical to PackageVersionIDEQ.
func PackageVersionID(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldPackageVersionID, v))
}

// PackageNameID applies equality check predicate on the "package_name_id" field. It's identical to PackageNameIDEQ.
func PackageNameID(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldPackageNameID, v))
}

// ArtifactID applies equality check predicate on the "artifact_id" field. It's identical to ArtifactIDEQ.
func ArtifactID(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldArtifactID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldEmail, v))
}

// Info applies equality check predicate on the "info" field. It's identical to InfoEQ.
func Info(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldInfo, v))
}

// Since applies equality check predicate on the "since" field. It's identical to SinceEQ.
func Since(v time.Time) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldSince, v))
}

// Justification applies equality check predicate on the "justification" field. It's identical to JustificationEQ.
func Justification(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldJustification, v))
}

// Origin applies equality check predicate on the "origin" field. It's identical to OriginEQ.
func Origin(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldOrigin, v))
}

// Collector applies equality check predicate on the "collector" field. It's identical to CollectorEQ.
func Collector(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldCollector, v))
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldSourceID, v))
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldSourceID, v))
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldSourceID, vs...))
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldSourceID, vs...))
}

// SourceIDIsNil applies the IsNil predicate on the "source_id" field.
func SourceIDIsNil() predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIsNull(FieldSourceID))
}

// SourceIDNotNil applies the NotNil predicate on the "source_id" field.
func SourceIDNotNil() predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotNull(FieldSourceID))
}

// PackageVersionIDEQ applies the EQ predicate on the "package_version_id" field.
func PackageVersionIDEQ(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldPackageVersionID, v))
}

// PackageVersionIDNEQ applies the NEQ predicate on the "package_version_id" field.
func PackageVersionIDNEQ(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldPackageVersionID, v))
}

// PackageVersionIDIn applies the In predicate on the "package_version_id" field.
func PackageVersionIDIn(vs ...int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldPackageVersionID, vs...))
}

// PackageVersionIDNotIn applies the NotIn predicate on the "package_version_id" field.
func PackageVersionIDNotIn(vs ...int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldPackageVersionID, vs...))
}

// PackageVersionIDIsNil applies the IsNil predicate on the "package_version_id" field.
func PackageVersionIDIsNil() predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIsNull(FieldPackageVersionID))
}

// PackageVersionIDNotNil applies the NotNil predicate on the "package_version_id" field.
func PackageVersionIDNotNil() predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotNull(FieldPackageVersionID))
}

// PackageNameIDEQ applies the EQ predicate on the "package_name_id" field.
func PackageNameIDEQ(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldPackageNameID, v))
}

// PackageNameIDNEQ applies the NEQ predicate on the "package_name_id" field.
func PackageNameIDNEQ(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldPackageNameID, v))
}

// PackageNameIDIn applies the In predicate on the "package_name_id" field.
func PackageNameIDIn(vs ...int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldPackageNameID, vs...))
}

// PackageNameIDNotIn applies the NotIn predicate on the "package_name_id" field.
func PackageNameIDNotIn(vs ...int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldPackageNameID, vs...))
}

// PackageNameIDIsNil applies the IsNil predicate on the "package_name_id" field.
func PackageNameIDIsNil() predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIsNull(FieldPackageNameID))
}

// PackageNameIDNotNil applies the NotNil predicate on the "package_name_id" field.
func PackageNameIDNotNil() predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotNull(FieldPackageNameID))
}

// ArtifactIDEQ applies the EQ predicate on the "artifact_id" field.
func ArtifactIDEQ(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldArtifactID, v))
}

// ArtifactIDNEQ applies the NEQ predicate on the "artifact_id" field.
func ArtifactIDNEQ(v int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldArtifactID, v))
}

// ArtifactIDIn applies the In predicate on the "artifact_id" field.
func ArtifactIDIn(vs ...int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldArtifactID, vs...))
}

// ArtifactIDNotIn applies the NotIn predicate on the "artifact_id" field.
func ArtifactIDNotIn(vs ...int) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldArtifactID, vs...))
}

// ArtifactIDIsNil applies the IsNil predicate on the "artifact_id" field.
func ArtifactIDIsNil() predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIsNull(FieldArtifactID))
}

// ArtifactIDNotNil applies the NotNil predicate on the "artifact_id" field.
func ArtifactIDNotNil() predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotNull(FieldArtifactID))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldContainsFold(FieldEmail, v))
}

// InfoEQ applies the EQ predicate on the "info" field.
func InfoEQ(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldInfo, v))
}

// InfoNEQ applies the NEQ predicate on the "info" field.
func InfoNEQ(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldInfo, v))
}

// InfoIn applies the In predicate on the "info" field.
func InfoIn(vs ...string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldInfo, vs...))
}

// InfoNotIn applies the NotIn predicate on the "info" field.
func InfoNotIn(vs ...string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldInfo, vs...))
}

// InfoGT applies the GT predicate on the "info" field.
func InfoGT(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGT(FieldInfo, v))
}

// InfoGTE applies the GTE predicate on the "info" field.
func InfoGTE(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGTE(FieldInfo, v))
}

// InfoLT applies the LT predicate on the "info" field.
func InfoLT(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLT(FieldInfo, v))
}

// InfoLTE applies the LTE predicate on the "info" field.
func InfoLTE(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLTE(FieldInfo, v))
}

// InfoContains applies the Contains predicate on the "info" field.
func InfoContains(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldContains(FieldInfo, v))
}

// InfoHasPrefix applies the HasPrefix predicate on the "info" field.
func InfoHasPrefix(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldHasPrefix(FieldInfo, v))
}

// InfoHasSuffix applies the HasSuffix predicate on the "info" field.
func InfoHasSuffix(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldHasSuffix(FieldInfo, v))
}

// InfoEqualFold applies the EqualFold predicate on the "info" field.
func InfoEqualFold(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEqualFold(FieldInfo, v))
}

// InfoContainsFold applies the ContainsFold predicate on the "info" field.
func InfoContainsFold(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldContainsFold(FieldInfo, v))
}

// SinceEQ applies the EQ predicate on the "since" field.
func SinceEQ(v time.Time) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldSince, v))
}

// SinceNEQ applies the NEQ predicate on the "since" field.
func SinceNEQ(v time.Time) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldSince, v))
}

// SinceIn applies the In predicate on the "since" field.
func SinceIn(vs ...time.Time) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldSince, vs...))
}

// SinceNotIn applies the NotIn predicate on the "since" field.
func SinceNotIn(vs ...time.Time) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldSince, vs...))
}

// SinceGT applies the GT predicate on the "since" field.
func SinceGT(v time.Time) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGT(FieldSince, v))
}

// SinceGTE applies the GTE predicate on the "since" field.
func SinceGTE(v time.Time) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGTE(FieldSince, v))
}

// SinceLT applies the LT predicate on the "since" field.
func SinceLT(v time.Time) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLT(FieldSince, v))
}

// SinceLTE applies the LTE predicate on the "since" field.
func SinceLTE(v time.Time) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLTE(FieldSince, v))
}

// JustificationEQ applies the EQ predicate on the "justification" field.
func JustificationEQ(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldJustification, v))
}

// JustificationNEQ applies the NEQ predicate on the "justification" field.
func JustificationNEQ(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldJustification, v))
}

// JustificationIn applies the In predicate on the "justification" field.
func JustificationIn(vs ...string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldJustification, vs...))
}

// JustificationNotIn applies the NotIn predicate on the "justification" field.
func JustificationNotIn(vs ...string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldJustification, vs...))
}

// JustificationGT applies the GT predicate on the "justification" field.
func JustificationGT(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGT(FieldJustification, v))
}

// JustificationGTE applies the GTE predicate on the "justification" field.
func JustificationGTE(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGTE(FieldJustification, v))
}

// JustificationLT applies the LT predicate on the "justification" field.
func JustificationLT(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLT(FieldJustification, v))
}

// JustificationLTE applies the LTE predicate on the "justification" field.
func JustificationLTE(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLTE(FieldJustification, v))
}

// JustificationContains applies the Contains predicate on the "justification" field.
func JustificationContains(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldContains(FieldJustification, v))
}

// JustificationHasPrefix applies the HasPrefix predicate on the "justification" field.
func JustificationHasPrefix(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldHasPrefix(FieldJustification, v))
}

// JustificationHasSuffix applies the HasSuffix predicate on the "justification" field.
func JustificationHasSuffix(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldHasSuffix(FieldJustification, v))
}

// JustificationEqualFold applies the EqualFold predicate on the "justification" field.
func JustificationEqualFold(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEqualFold(FieldJustification, v))
}

// JustificationContainsFold applies the ContainsFold predicate on the "justification" field.
func JustificationContainsFold(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldContainsFold(FieldJustification, v))
}

// OriginEQ applies the EQ predicate on the "origin" field.
func OriginEQ(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldOrigin, v))
}

// OriginNEQ applies the NEQ predicate on the "origin" field.
func OriginNEQ(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldOrigin, v))
}

// OriginIn applies the In predicate on the "origin" field.
func OriginIn(vs ...string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldOrigin, vs...))
}

// OriginNotIn applies the NotIn predicate on the "origin" field.
func OriginNotIn(vs ...string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldOrigin, vs...))
}

// OriginGT applies the GT predicate on the "origin" field.
func OriginGT(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGT(FieldOrigin, v))
}

// OriginGTE applies the GTE predicate on the "origin" field.
func OriginGTE(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGTE(FieldOrigin, v))
}

// OriginLT applies the LT predicate on the "origin" field.
func OriginLT(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLT(FieldOrigin, v))
}

// OriginLTE applies the LTE predicate on the "origin" field.
func OriginLTE(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLTE(FieldOrigin, v))
}

// OriginContains applies the Contains predicate on the "origin" field.
func OriginContains(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldContains(FieldOrigin, v))
}

// OriginHasPrefix applies the HasPrefix predicate on the "origin" field.
func OriginHasPrefix(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldHasPrefix(FieldOrigin, v))
}

// OriginHasSuffix applies the HasSuffix predicate on the "origin" field.
func OriginHasSuffix(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldHasSuffix(FieldOrigin, v))
}

// OriginEqualFold applies the EqualFold predicate on the "origin" field.
func OriginEqualFold(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEqualFold(FieldOrigin, v))
}

// OriginContainsFold applies the ContainsFold predicate on the "origin" field.
func OriginContainsFold(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldContainsFold(FieldOrigin, v))
}

// CollectorEQ applies the EQ predicate on the "collector" field.
func CollectorEQ(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEQ(FieldCollector, v))
}

// CollectorNEQ applies the NEQ predicate on the "collector" field.
func CollectorNEQ(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNEQ(FieldCollector, v))
}

// CollectorIn applies the In predicate on the "collector" field.
func CollectorIn(vs ...string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldIn(FieldCollector, vs...))
}

// CollectorNotIn applies the NotIn predicate on the "collector" field.
func CollectorNotIn(vs ...string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldNotIn(FieldCollector, vs...))
}

// CollectorGT applies the GT predicate on the "collector" field.
func CollectorGT(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGT(FieldCollector, v))
}

// CollectorGTE applies the GTE predicate on the "collector" field.
func CollectorGTE(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldGTE(FieldCollector, v))
}

// CollectorLT applies the LT predicate on the "collector" field.
func CollectorLT(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLT(FieldCollector, v))
}

// CollectorLTE applies the LTE predicate on the "collector" field.
func CollectorLTE(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldLTE(FieldCollector, v))
}

// CollectorContains applies the Contains predicate on the "collector" field.
func CollectorContains(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldContains(FieldCollector, v))
}

// CollectorHasPrefix applies the HasPrefix predicate on the "collector" field.
func CollectorHasPrefix(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldHasPrefix(FieldCollector, v))
}

// CollectorHasSuffix applies the HasSuffix predicate on the "collector" field.
func CollectorHasSuffix(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldHasSuffix(FieldCollector, v))
}

// CollectorEqualFold applies the EqualFold predicate on the "collector" field.
func CollectorEqualFold(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldEqualFold(FieldCollector, v))
}

// CollectorContainsFold applies the ContainsFold predicate on the "collector" field.
func CollectorContainsFold(v string) predicate.PointOfContact {
	return predicate.PointOfContact(sql.FieldContainsFold(FieldCollector, v))
}

// HasSource applies the HasEdge predicate on the "source" edge.
func HasSource() predicate.PointOfContact {
	return predicate.PointOfContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceWith applies the HasEdge predicate on the "source" edge with a given conditions (other predicates).
func HasSourceWith(preds ...predicate.SourceName) predicate.PointOfContact {
	return predicate.PointOfContact(func(s *sql.Selector) {
		step := newSourceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPackageVersion applies the HasEdge predicate on the "package_version" edge.
func HasPackageVersion() predicate.PointOfContact {
	return predicate.PointOfContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PackageVersionTable, PackageVersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageVersionWith applies the HasEdge predicate on the "package_version" edge with a given conditions (other predicates).
func HasPackageVersionWith(preds ...predicate.PackageVersion) predicate.PointOfContact {
	return predicate.PointOfContact(func(s *sql.Selector) {
		step := newPackageVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAllVersions applies the HasEdge predicate on the "all_versions" edge.
func HasAllVersions() predicate.PointOfContact {
	return predicate.PointOfContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AllVersionsTable, AllVersionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAllVersionsWith applies the HasEdge predicate on the "all_versions" edge with a given conditions (other predicates).
func HasAllVersionsWith(preds ...predicate.PackageName) predicate.PointOfContact {
	return predicate.PointOfContact(func(s *sql.Selector) {
		step := newAllVersionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArtifact applies the HasEdge predicate on the "artifact" edge.
func HasArtifact() predicate.PointOfContact {
	return predicate.PointOfContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ArtifactTable, ArtifactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtifactWith applies the HasEdge predicate on the "artifact" edge with a given conditions (other predicates).
func HasArtifactWith(preds ...predicate.Artifact) predicate.PointOfContact {
	return predicate.PointOfContact(func(s *sql.Selector) {
		step := newArtifactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PointOfContact) predicate.PointOfContact {
	return predicate.PointOfContact(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PointOfContact) predicate.PointOfContact {
	return predicate.PointOfContact(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PointOfContact) predicate.PointOfContact {
	return predicate.PointOfContact(sql.NotPredicates(p))
}

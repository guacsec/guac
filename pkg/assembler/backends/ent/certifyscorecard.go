// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/scorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// CertifyScorecard is the model entity for the CertifyScorecard schema.
type CertifyScorecard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID int `json:"source_id,omitempty"`
	// ScorecardID holds the value of the "scorecard_id" field.
	ScorecardID int `json:"scorecard_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertifyScorecardQuery when eager-loading is set.
	Edges        CertifyScorecardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CertifyScorecardEdges holds the relations/edges for other nodes in the graph.
type CertifyScorecardEdges struct {
	// Scorecard holds the value of the scorecard edge.
	Scorecard *Scorecard `json:"scorecard,omitempty"`
	// Source holds the value of the source edge.
	Source *SourceName `json:"source,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ScorecardOrErr returns the Scorecard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertifyScorecardEdges) ScorecardOrErr() (*Scorecard, error) {
	if e.loadedTypes[0] {
		if e.Scorecard == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: scorecard.Label}
		}
		return e.Scorecard, nil
	}
	return nil, &NotLoadedError{edge: "scorecard"}
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertifyScorecardEdges) SourceOrErr() (*SourceName, error) {
	if e.loadedTypes[1] {
		if e.Source == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sourcename.Label}
		}
		return e.Source, nil
	}
	return nil, &NotLoadedError{edge: "source"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CertifyScorecard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case certifyscorecard.FieldID, certifyscorecard.FieldSourceID, certifyscorecard.FieldScorecardID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CertifyScorecard fields.
func (cs *CertifyScorecard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case certifyscorecard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case certifyscorecard.FieldSourceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_id", values[i])
			} else if value.Valid {
				cs.SourceID = int(value.Int64)
			}
		case certifyscorecard.FieldScorecardID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scorecard_id", values[i])
			} else if value.Valid {
				cs.ScorecardID = int(value.Int64)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CertifyScorecard.
// This includes values selected through modifiers, order, etc.
func (cs *CertifyScorecard) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryScorecard queries the "scorecard" edge of the CertifyScorecard entity.
func (cs *CertifyScorecard) QueryScorecard() *ScorecardQuery {
	return NewCertifyScorecardClient(cs.config).QueryScorecard(cs)
}

// QuerySource queries the "source" edge of the CertifyScorecard entity.
func (cs *CertifyScorecard) QuerySource() *SourceNameQuery {
	return NewCertifyScorecardClient(cs.config).QuerySource(cs)
}

// Update returns a builder for updating this CertifyScorecard.
// Note that you need to call CertifyScorecard.Unwrap() before calling this method if this CertifyScorecard
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CertifyScorecard) Update() *CertifyScorecardUpdateOne {
	return NewCertifyScorecardClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CertifyScorecard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CertifyScorecard) Unwrap() *CertifyScorecard {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CertifyScorecard is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CertifyScorecard) String() string {
	var builder strings.Builder
	builder.WriteString("CertifyScorecard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("source_id=")
	builder.WriteString(fmt.Sprintf("%v", cs.SourceID))
	builder.WriteString(", ")
	builder.WriteString("scorecard_id=")
	builder.WriteString(fmt.Sprintf("%v", cs.ScorecardID))
	builder.WriteByte(')')
	return builder.String()
}

// CertifyScorecards is a parsable slice of CertifyScorecard.
type CertifyScorecards []*CertifyScorecard

// Code generated by ent, DO NOT EDIT.

package occurrencesubject

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldLTE(FieldID, id))
}

// OccurrenceID applies equality check predicate on the "occurrence_id" field. It's identical to OccurrenceIDEQ.
func OccurrenceID(v int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldEQ(FieldOccurrenceID, v))
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldEQ(FieldSourceID, v))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldEQ(FieldPackageID, v))
}

// OccurrenceIDEQ applies the EQ predicate on the "occurrence_id" field.
func OccurrenceIDEQ(v int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldEQ(FieldOccurrenceID, v))
}

// OccurrenceIDNEQ applies the NEQ predicate on the "occurrence_id" field.
func OccurrenceIDNEQ(v int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldNEQ(FieldOccurrenceID, v))
}

// OccurrenceIDIn applies the In predicate on the "occurrence_id" field.
func OccurrenceIDIn(vs ...int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldIn(FieldOccurrenceID, vs...))
}

// OccurrenceIDNotIn applies the NotIn predicate on the "occurrence_id" field.
func OccurrenceIDNotIn(vs ...int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldNotIn(FieldOccurrenceID, vs...))
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldEQ(FieldSourceID, v))
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldNEQ(FieldSourceID, v))
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldIn(FieldSourceID, vs...))
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldNotIn(FieldSourceID, vs...))
}

// SourceIDIsNil applies the IsNil predicate on the "source_id" field.
func SourceIDIsNil() predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldIsNull(FieldSourceID))
}

// SourceIDNotNil applies the NotNil predicate on the "source_id" field.
func SourceIDNotNil() predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldNotNull(FieldSourceID))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...int) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldNotIn(FieldPackageID, vs...))
}

// PackageIDIsNil applies the IsNil predicate on the "package_id" field.
func PackageIDIsNil() predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldIsNull(FieldPackageID))
}

// PackageIDNotNil applies the NotNil predicate on the "package_id" field.
func PackageIDNotNil() predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(sql.FieldNotNull(FieldPackageID))
}

// HasOccurrence applies the HasEdge predicate on the "occurrence" edge.
func HasOccurrence() predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OccurrenceTable, OccurrenceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOccurrenceWith applies the HasEdge predicate on the "occurrence" edge with a given conditions (other predicates).
func HasOccurrenceWith(preds ...predicate.Occurrence) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(func(s *sql.Selector) {
		step := newOccurrenceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPackage applies the HasEdge predicate on the "package" edge.
func HasPackage() predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PackageTable, PackageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageWith applies the HasEdge predicate on the "package" edge with a given conditions (other predicates).
func HasPackageWith(preds ...predicate.PackageVersion) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(func(s *sql.Selector) {
		step := newPackageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSource applies the HasEdge predicate on the "source" edge.
func HasSource() predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceWith applies the HasEdge predicate on the "source" edge with a given conditions (other predicates).
func HasSourceWith(preds ...predicate.SourceName) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(func(s *sql.Selector) {
		step := newSourceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OccurrenceSubject) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OccurrenceSubject) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OccurrenceSubject) predicate.OccurrenceSubject {
	return predicate.OccurrenceSubject(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package occurrencesubject

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the occurrencesubject type in the database.
	Label = "occurrence_subject"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOccurrenceID holds the string denoting the occurrence_id field in the database.
	FieldOccurrenceID = "occurrence_id"
	// FieldSourceID holds the string denoting the source_id field in the database.
	FieldSourceID = "source_id"
	// FieldPackageID holds the string denoting the package_id field in the database.
	FieldPackageID = "package_id"
	// EdgeOccurrence holds the string denoting the occurrence edge name in mutations.
	EdgeOccurrence = "occurrence"
	// EdgePackage holds the string denoting the package edge name in mutations.
	EdgePackage = "package"
	// EdgeSource holds the string denoting the source edge name in mutations.
	EdgeSource = "source"
	// Table holds the table name of the occurrencesubject in the database.
	Table = "occurrence_subjects"
	// OccurrenceTable is the table that holds the occurrence relation/edge.
	OccurrenceTable = "occurrence_subjects"
	// OccurrenceInverseTable is the table name for the Occurrence entity.
	// It exists in this package in order to avoid circular dependency with the "occurrence" package.
	OccurrenceInverseTable = "occurrences"
	// OccurrenceColumn is the table column denoting the occurrence relation/edge.
	OccurrenceColumn = "occurrence_id"
	// PackageTable is the table that holds the package relation/edge.
	PackageTable = "occurrence_subjects"
	// PackageInverseTable is the table name for the PackageVersion entity.
	// It exists in this package in order to avoid circular dependency with the "packageversion" package.
	PackageInverseTable = "package_versions"
	// PackageColumn is the table column denoting the package relation/edge.
	PackageColumn = "package_id"
	// SourceTable is the table that holds the source relation/edge.
	SourceTable = "occurrence_subjects"
	// SourceInverseTable is the table name for the SourceName entity.
	// It exists in this package in order to avoid circular dependency with the "sourcename" package.
	SourceInverseTable = "source_names"
	// SourceColumn is the table column denoting the source relation/edge.
	SourceColumn = "source_id"
)

// Columns holds all SQL columns for occurrencesubject fields.
var Columns = []string{
	FieldID,
	FieldOccurrenceID,
	FieldSourceID,
	FieldPackageID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the OccurrenceSubject queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOccurrenceID orders the results by the occurrence_id field.
func ByOccurrenceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOccurrenceID, opts...).ToFunc()
}

// BySourceID orders the results by the source_id field.
func BySourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceID, opts...).ToFunc()
}

// ByPackageID orders the results by the package_id field.
func ByPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageID, opts...).ToFunc()
}

// ByOccurrenceField orders the results by occurrence field.
func ByOccurrenceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOccurrenceStep(), sql.OrderByField(field, opts...))
	}
}

// ByPackageField orders the results by package field.
func ByPackageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackageStep(), sql.OrderByField(field, opts...))
	}
}

// BySourceField orders the results by source field.
func BySourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceStep(), sql.OrderByField(field, opts...))
	}
}
func newOccurrenceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OccurrenceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OccurrenceTable, OccurrenceColumn),
	)
}
func newPackageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackageTable, PackageColumn),
	)
}
func newSourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
	)
}

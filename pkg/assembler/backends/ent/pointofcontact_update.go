// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pointofcontact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// PointOfContactUpdate is the builder for updating PointOfContact entities.
type PointOfContactUpdate struct {
	config
	hooks    []Hook
	mutation *PointOfContactMutation
}

// Where appends a list predicates to the PointOfContactUpdate builder.
func (pocu *PointOfContactUpdate) Where(ps ...predicate.PointOfContact) *PointOfContactUpdate {
	pocu.mutation.Where(ps...)
	return pocu
}

// SetSourceID sets the "source_id" field.
func (pocu *PointOfContactUpdate) SetSourceID(i int) *PointOfContactUpdate {
	pocu.mutation.SetSourceID(i)
	return pocu
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (pocu *PointOfContactUpdate) SetNillableSourceID(i *int) *PointOfContactUpdate {
	if i != nil {
		pocu.SetSourceID(*i)
	}
	return pocu
}

// ClearSourceID clears the value of the "source_id" field.
func (pocu *PointOfContactUpdate) ClearSourceID() *PointOfContactUpdate {
	pocu.mutation.ClearSourceID()
	return pocu
}

// SetPackageVersionID sets the "package_version_id" field.
func (pocu *PointOfContactUpdate) SetPackageVersionID(i int) *PointOfContactUpdate {
	pocu.mutation.SetPackageVersionID(i)
	return pocu
}

// SetNillablePackageVersionID sets the "package_version_id" field if the given value is not nil.
func (pocu *PointOfContactUpdate) SetNillablePackageVersionID(i *int) *PointOfContactUpdate {
	if i != nil {
		pocu.SetPackageVersionID(*i)
	}
	return pocu
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (pocu *PointOfContactUpdate) ClearPackageVersionID() *PointOfContactUpdate {
	pocu.mutation.ClearPackageVersionID()
	return pocu
}

// SetPackageNameID sets the "package_name_id" field.
func (pocu *PointOfContactUpdate) SetPackageNameID(i int) *PointOfContactUpdate {
	pocu.mutation.SetPackageNameID(i)
	return pocu
}

// SetNillablePackageNameID sets the "package_name_id" field if the given value is not nil.
func (pocu *PointOfContactUpdate) SetNillablePackageNameID(i *int) *PointOfContactUpdate {
	if i != nil {
		pocu.SetPackageNameID(*i)
	}
	return pocu
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (pocu *PointOfContactUpdate) ClearPackageNameID() *PointOfContactUpdate {
	pocu.mutation.ClearPackageNameID()
	return pocu
}

// SetArtifactID sets the "artifact_id" field.
func (pocu *PointOfContactUpdate) SetArtifactID(i int) *PointOfContactUpdate {
	pocu.mutation.SetArtifactID(i)
	return pocu
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (pocu *PointOfContactUpdate) SetNillableArtifactID(i *int) *PointOfContactUpdate {
	if i != nil {
		pocu.SetArtifactID(*i)
	}
	return pocu
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (pocu *PointOfContactUpdate) ClearArtifactID() *PointOfContactUpdate {
	pocu.mutation.ClearArtifactID()
	return pocu
}

// SetEmail sets the "email" field.
func (pocu *PointOfContactUpdate) SetEmail(s string) *PointOfContactUpdate {
	pocu.mutation.SetEmail(s)
	return pocu
}

// SetInfo sets the "info" field.
func (pocu *PointOfContactUpdate) SetInfo(s string) *PointOfContactUpdate {
	pocu.mutation.SetInfo(s)
	return pocu
}

// SetSince sets the "since" field.
func (pocu *PointOfContactUpdate) SetSince(t time.Time) *PointOfContactUpdate {
	pocu.mutation.SetSince(t)
	return pocu
}

// SetJustification sets the "justification" field.
func (pocu *PointOfContactUpdate) SetJustification(s string) *PointOfContactUpdate {
	pocu.mutation.SetJustification(s)
	return pocu
}

// SetOrigin sets the "origin" field.
func (pocu *PointOfContactUpdate) SetOrigin(s string) *PointOfContactUpdate {
	pocu.mutation.SetOrigin(s)
	return pocu
}

// SetCollector sets the "collector" field.
func (pocu *PointOfContactUpdate) SetCollector(s string) *PointOfContactUpdate {
	pocu.mutation.SetCollector(s)
	return pocu
}

// SetSource sets the "source" edge to the SourceName entity.
func (pocu *PointOfContactUpdate) SetSource(s *SourceName) *PointOfContactUpdate {
	return pocu.SetSourceID(s.ID)
}

// SetPackageVersion sets the "package_version" edge to the PackageVersion entity.
func (pocu *PointOfContactUpdate) SetPackageVersion(p *PackageVersion) *PointOfContactUpdate {
	return pocu.SetPackageVersionID(p.ID)
}

// SetAllVersionsID sets the "all_versions" edge to the PackageName entity by ID.
func (pocu *PointOfContactUpdate) SetAllVersionsID(id int) *PointOfContactUpdate {
	pocu.mutation.SetAllVersionsID(id)
	return pocu
}

// SetNillableAllVersionsID sets the "all_versions" edge to the PackageName entity by ID if the given value is not nil.
func (pocu *PointOfContactUpdate) SetNillableAllVersionsID(id *int) *PointOfContactUpdate {
	if id != nil {
		pocu = pocu.SetAllVersionsID(*id)
	}
	return pocu
}

// SetAllVersions sets the "all_versions" edge to the PackageName entity.
func (pocu *PointOfContactUpdate) SetAllVersions(p *PackageName) *PointOfContactUpdate {
	return pocu.SetAllVersionsID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (pocu *PointOfContactUpdate) SetArtifact(a *Artifact) *PointOfContactUpdate {
	return pocu.SetArtifactID(a.ID)
}

// Mutation returns the PointOfContactMutation object of the builder.
func (pocu *PointOfContactUpdate) Mutation() *PointOfContactMutation {
	return pocu.mutation
}

// ClearSource clears the "source" edge to the SourceName entity.
func (pocu *PointOfContactUpdate) ClearSource() *PointOfContactUpdate {
	pocu.mutation.ClearSource()
	return pocu
}

// ClearPackageVersion clears the "package_version" edge to the PackageVersion entity.
func (pocu *PointOfContactUpdate) ClearPackageVersion() *PointOfContactUpdate {
	pocu.mutation.ClearPackageVersion()
	return pocu
}

// ClearAllVersions clears the "all_versions" edge to the PackageName entity.
func (pocu *PointOfContactUpdate) ClearAllVersions() *PointOfContactUpdate {
	pocu.mutation.ClearAllVersions()
	return pocu
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (pocu *PointOfContactUpdate) ClearArtifact() *PointOfContactUpdate {
	pocu.mutation.ClearArtifact()
	return pocu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pocu *PointOfContactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pocu.sqlSave, pocu.mutation, pocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pocu *PointOfContactUpdate) SaveX(ctx context.Context) int {
	affected, err := pocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pocu *PointOfContactUpdate) Exec(ctx context.Context) error {
	_, err := pocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocu *PointOfContactUpdate) ExecX(ctx context.Context) {
	if err := pocu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pocu *PointOfContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pointofcontact.Table, pointofcontact.Columns, sqlgraph.NewFieldSpec(pointofcontact.FieldID, field.TypeInt))
	if ps := pocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pocu.mutation.Email(); ok {
		_spec.SetField(pointofcontact.FieldEmail, field.TypeString, value)
	}
	if value, ok := pocu.mutation.Info(); ok {
		_spec.SetField(pointofcontact.FieldInfo, field.TypeString, value)
	}
	if value, ok := pocu.mutation.Since(); ok {
		_spec.SetField(pointofcontact.FieldSince, field.TypeTime, value)
	}
	if value, ok := pocu.mutation.Justification(); ok {
		_spec.SetField(pointofcontact.FieldJustification, field.TypeString, value)
	}
	if value, ok := pocu.mutation.Origin(); ok {
		_spec.SetField(pointofcontact.FieldOrigin, field.TypeString, value)
	}
	if value, ok := pocu.mutation.Collector(); ok {
		_spec.SetField(pointofcontact.FieldCollector, field.TypeString, value)
	}
	if pocu.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.SourceTable,
			Columns: []string{pointofcontact.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pocu.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.SourceTable,
			Columns: []string{pointofcontact.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pocu.mutation.PackageVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.PackageVersionTable,
			Columns: []string{pointofcontact.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pocu.mutation.PackageVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.PackageVersionTable,
			Columns: []string{pointofcontact.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pocu.mutation.AllVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.AllVersionsTable,
			Columns: []string{pointofcontact.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pocu.mutation.AllVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.AllVersionsTable,
			Columns: []string{pointofcontact.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pocu.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.ArtifactTable,
			Columns: []string{pointofcontact.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pocu.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.ArtifactTable,
			Columns: []string{pointofcontact.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointofcontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pocu.mutation.done = true
	return n, nil
}

// PointOfContactUpdateOne is the builder for updating a single PointOfContact entity.
type PointOfContactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PointOfContactMutation
}

// SetSourceID sets the "source_id" field.
func (pocuo *PointOfContactUpdateOne) SetSourceID(i int) *PointOfContactUpdateOne {
	pocuo.mutation.SetSourceID(i)
	return pocuo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (pocuo *PointOfContactUpdateOne) SetNillableSourceID(i *int) *PointOfContactUpdateOne {
	if i != nil {
		pocuo.SetSourceID(*i)
	}
	return pocuo
}

// ClearSourceID clears the value of the "source_id" field.
func (pocuo *PointOfContactUpdateOne) ClearSourceID() *PointOfContactUpdateOne {
	pocuo.mutation.ClearSourceID()
	return pocuo
}

// SetPackageVersionID sets the "package_version_id" field.
func (pocuo *PointOfContactUpdateOne) SetPackageVersionID(i int) *PointOfContactUpdateOne {
	pocuo.mutation.SetPackageVersionID(i)
	return pocuo
}

// SetNillablePackageVersionID sets the "package_version_id" field if the given value is not nil.
func (pocuo *PointOfContactUpdateOne) SetNillablePackageVersionID(i *int) *PointOfContactUpdateOne {
	if i != nil {
		pocuo.SetPackageVersionID(*i)
	}
	return pocuo
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (pocuo *PointOfContactUpdateOne) ClearPackageVersionID() *PointOfContactUpdateOne {
	pocuo.mutation.ClearPackageVersionID()
	return pocuo
}

// SetPackageNameID sets the "package_name_id" field.
func (pocuo *PointOfContactUpdateOne) SetPackageNameID(i int) *PointOfContactUpdateOne {
	pocuo.mutation.SetPackageNameID(i)
	return pocuo
}

// SetNillablePackageNameID sets the "package_name_id" field if the given value is not nil.
func (pocuo *PointOfContactUpdateOne) SetNillablePackageNameID(i *int) *PointOfContactUpdateOne {
	if i != nil {
		pocuo.SetPackageNameID(*i)
	}
	return pocuo
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (pocuo *PointOfContactUpdateOne) ClearPackageNameID() *PointOfContactUpdateOne {
	pocuo.mutation.ClearPackageNameID()
	return pocuo
}

// SetArtifactID sets the "artifact_id" field.
func (pocuo *PointOfContactUpdateOne) SetArtifactID(i int) *PointOfContactUpdateOne {
	pocuo.mutation.SetArtifactID(i)
	return pocuo
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (pocuo *PointOfContactUpdateOne) SetNillableArtifactID(i *int) *PointOfContactUpdateOne {
	if i != nil {
		pocuo.SetArtifactID(*i)
	}
	return pocuo
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (pocuo *PointOfContactUpdateOne) ClearArtifactID() *PointOfContactUpdateOne {
	pocuo.mutation.ClearArtifactID()
	return pocuo
}

// SetEmail sets the "email" field.
func (pocuo *PointOfContactUpdateOne) SetEmail(s string) *PointOfContactUpdateOne {
	pocuo.mutation.SetEmail(s)
	return pocuo
}

// SetInfo sets the "info" field.
func (pocuo *PointOfContactUpdateOne) SetInfo(s string) *PointOfContactUpdateOne {
	pocuo.mutation.SetInfo(s)
	return pocuo
}

// SetSince sets the "since" field.
func (pocuo *PointOfContactUpdateOne) SetSince(t time.Time) *PointOfContactUpdateOne {
	pocuo.mutation.SetSince(t)
	return pocuo
}

// SetJustification sets the "justification" field.
func (pocuo *PointOfContactUpdateOne) SetJustification(s string) *PointOfContactUpdateOne {
	pocuo.mutation.SetJustification(s)
	return pocuo
}

// SetOrigin sets the "origin" field.
func (pocuo *PointOfContactUpdateOne) SetOrigin(s string) *PointOfContactUpdateOne {
	pocuo.mutation.SetOrigin(s)
	return pocuo
}

// SetCollector sets the "collector" field.
func (pocuo *PointOfContactUpdateOne) SetCollector(s string) *PointOfContactUpdateOne {
	pocuo.mutation.SetCollector(s)
	return pocuo
}

// SetSource sets the "source" edge to the SourceName entity.
func (pocuo *PointOfContactUpdateOne) SetSource(s *SourceName) *PointOfContactUpdateOne {
	return pocuo.SetSourceID(s.ID)
}

// SetPackageVersion sets the "package_version" edge to the PackageVersion entity.
func (pocuo *PointOfContactUpdateOne) SetPackageVersion(p *PackageVersion) *PointOfContactUpdateOne {
	return pocuo.SetPackageVersionID(p.ID)
}

// SetAllVersionsID sets the "all_versions" edge to the PackageName entity by ID.
func (pocuo *PointOfContactUpdateOne) SetAllVersionsID(id int) *PointOfContactUpdateOne {
	pocuo.mutation.SetAllVersionsID(id)
	return pocuo
}

// SetNillableAllVersionsID sets the "all_versions" edge to the PackageName entity by ID if the given value is not nil.
func (pocuo *PointOfContactUpdateOne) SetNillableAllVersionsID(id *int) *PointOfContactUpdateOne {
	if id != nil {
		pocuo = pocuo.SetAllVersionsID(*id)
	}
	return pocuo
}

// SetAllVersions sets the "all_versions" edge to the PackageName entity.
func (pocuo *PointOfContactUpdateOne) SetAllVersions(p *PackageName) *PointOfContactUpdateOne {
	return pocuo.SetAllVersionsID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (pocuo *PointOfContactUpdateOne) SetArtifact(a *Artifact) *PointOfContactUpdateOne {
	return pocuo.SetArtifactID(a.ID)
}

// Mutation returns the PointOfContactMutation object of the builder.
func (pocuo *PointOfContactUpdateOne) Mutation() *PointOfContactMutation {
	return pocuo.mutation
}

// ClearSource clears the "source" edge to the SourceName entity.
func (pocuo *PointOfContactUpdateOne) ClearSource() *PointOfContactUpdateOne {
	pocuo.mutation.ClearSource()
	return pocuo
}

// ClearPackageVersion clears the "package_version" edge to the PackageVersion entity.
func (pocuo *PointOfContactUpdateOne) ClearPackageVersion() *PointOfContactUpdateOne {
	pocuo.mutation.ClearPackageVersion()
	return pocuo
}

// ClearAllVersions clears the "all_versions" edge to the PackageName entity.
func (pocuo *PointOfContactUpdateOne) ClearAllVersions() *PointOfContactUpdateOne {
	pocuo.mutation.ClearAllVersions()
	return pocuo
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (pocuo *PointOfContactUpdateOne) ClearArtifact() *PointOfContactUpdateOne {
	pocuo.mutation.ClearArtifact()
	return pocuo
}

// Where appends a list predicates to the PointOfContactUpdate builder.
func (pocuo *PointOfContactUpdateOne) Where(ps ...predicate.PointOfContact) *PointOfContactUpdateOne {
	pocuo.mutation.Where(ps...)
	return pocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pocuo *PointOfContactUpdateOne) Select(field string, fields ...string) *PointOfContactUpdateOne {
	pocuo.fields = append([]string{field}, fields...)
	return pocuo
}

// Save executes the query and returns the updated PointOfContact entity.
func (pocuo *PointOfContactUpdateOne) Save(ctx context.Context) (*PointOfContact, error) {
	return withHooks(ctx, pocuo.sqlSave, pocuo.mutation, pocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pocuo *PointOfContactUpdateOne) SaveX(ctx context.Context) *PointOfContact {
	node, err := pocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pocuo *PointOfContactUpdateOne) Exec(ctx context.Context) error {
	_, err := pocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocuo *PointOfContactUpdateOne) ExecX(ctx context.Context) {
	if err := pocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pocuo *PointOfContactUpdateOne) sqlSave(ctx context.Context) (_node *PointOfContact, err error) {
	_spec := sqlgraph.NewUpdateSpec(pointofcontact.Table, pointofcontact.Columns, sqlgraph.NewFieldSpec(pointofcontact.FieldID, field.TypeInt))
	id, ok := pocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PointOfContact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pointofcontact.FieldID)
		for _, f := range fields {
			if !pointofcontact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pointofcontact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pocuo.mutation.Email(); ok {
		_spec.SetField(pointofcontact.FieldEmail, field.TypeString, value)
	}
	if value, ok := pocuo.mutation.Info(); ok {
		_spec.SetField(pointofcontact.FieldInfo, field.TypeString, value)
	}
	if value, ok := pocuo.mutation.Since(); ok {
		_spec.SetField(pointofcontact.FieldSince, field.TypeTime, value)
	}
	if value, ok := pocuo.mutation.Justification(); ok {
		_spec.SetField(pointofcontact.FieldJustification, field.TypeString, value)
	}
	if value, ok := pocuo.mutation.Origin(); ok {
		_spec.SetField(pointofcontact.FieldOrigin, field.TypeString, value)
	}
	if value, ok := pocuo.mutation.Collector(); ok {
		_spec.SetField(pointofcontact.FieldCollector, field.TypeString, value)
	}
	if pocuo.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.SourceTable,
			Columns: []string{pointofcontact.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pocuo.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.SourceTable,
			Columns: []string{pointofcontact.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pocuo.mutation.PackageVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.PackageVersionTable,
			Columns: []string{pointofcontact.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pocuo.mutation.PackageVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.PackageVersionTable,
			Columns: []string{pointofcontact.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pocuo.mutation.AllVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.AllVersionsTable,
			Columns: []string{pointofcontact.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pocuo.mutation.AllVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.AllVersionsTable,
			Columns: []string{pointofcontact.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pocuo.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.ArtifactTable,
			Columns: []string{pointofcontact.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pocuo.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.ArtifactTable,
			Columns: []string{pointofcontact.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PointOfContact{config: pocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointofcontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pocuo.mutation.done = true
	return _node, nil
}

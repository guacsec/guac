// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvuln"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// CertifyVulnDelete is the builder for deleting a CertifyVuln entity.
type CertifyVulnDelete struct {
	config
	hooks    []Hook
	mutation *CertifyVulnMutation
}

// Where appends a list predicates to the CertifyVulnDelete builder.
func (cvd *CertifyVulnDelete) Where(ps ...predicate.CertifyVuln) *CertifyVulnDelete {
	cvd.mutation.Where(ps...)
	return cvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cvd *CertifyVulnDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cvd.sqlExec, cvd.mutation, cvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cvd *CertifyVulnDelete) ExecX(ctx context.Context) int {
	n, err := cvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cvd *CertifyVulnDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(certifyvuln.Table, sqlgraph.NewFieldSpec(certifyvuln.FieldID, field.TypeInt))
	if ps := cvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cvd.mutation.done = true
	return affected, err
}

// CertifyVulnDeleteOne is the builder for deleting a single CertifyVuln entity.
type CertifyVulnDeleteOne struct {
	cvd *CertifyVulnDelete
}

// Where appends a list predicates to the CertifyVulnDelete builder.
func (cvdo *CertifyVulnDeleteOne) Where(ps ...predicate.CertifyVuln) *CertifyVulnDeleteOne {
	cvdo.cvd.mutation.Where(ps...)
	return cvdo
}

// Exec executes the deletion query.
func (cvdo *CertifyVulnDeleteOne) Exec(ctx context.Context) error {
	n, err := cvdo.cvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{certifyvuln.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cvdo *CertifyVulnDeleteOne) ExecX(ctx context.Context) {
	if err := cvdo.Exec(ctx); err != nil {
		panic(err)
	}
}

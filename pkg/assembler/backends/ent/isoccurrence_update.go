// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isoccurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// IsOccurrenceUpdate is the builder for updating IsOccurrence entities.
type IsOccurrenceUpdate struct {
	config
	hooks    []Hook
	mutation *IsOccurrenceMutation
}

// Where appends a list predicates to the IsOccurrenceUpdate builder.
func (iou *IsOccurrenceUpdate) Where(ps ...predicate.IsOccurrence) *IsOccurrenceUpdate {
	iou.mutation.Where(ps...)
	return iou
}

// SetPackageID sets the "package_id" field.
func (iou *IsOccurrenceUpdate) SetPackageID(i int) *IsOccurrenceUpdate {
	iou.mutation.SetPackageID(i)
	return iou
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (iou *IsOccurrenceUpdate) SetNillablePackageID(i *int) *IsOccurrenceUpdate {
	if i != nil {
		iou.SetPackageID(*i)
	}
	return iou
}

// ClearPackageID clears the value of the "package_id" field.
func (iou *IsOccurrenceUpdate) ClearPackageID() *IsOccurrenceUpdate {
	iou.mutation.ClearPackageID()
	return iou
}

// SetSourceID sets the "source_id" field.
func (iou *IsOccurrenceUpdate) SetSourceID(i int) *IsOccurrenceUpdate {
	iou.mutation.ResetSourceID()
	iou.mutation.SetSourceID(i)
	return iou
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (iou *IsOccurrenceUpdate) SetNillableSourceID(i *int) *IsOccurrenceUpdate {
	if i != nil {
		iou.SetSourceID(*i)
	}
	return iou
}

// AddSourceID adds i to the "source_id" field.
func (iou *IsOccurrenceUpdate) AddSourceID(i int) *IsOccurrenceUpdate {
	iou.mutation.AddSourceID(i)
	return iou
}

// ClearSourceID clears the value of the "source_id" field.
func (iou *IsOccurrenceUpdate) ClearSourceID() *IsOccurrenceUpdate {
	iou.mutation.ClearSourceID()
	return iou
}

// SetArtifactID sets the "artifact_id" field.
func (iou *IsOccurrenceUpdate) SetArtifactID(i int) *IsOccurrenceUpdate {
	iou.mutation.SetArtifactID(i)
	return iou
}

// SetJustification sets the "justification" field.
func (iou *IsOccurrenceUpdate) SetJustification(s string) *IsOccurrenceUpdate {
	iou.mutation.SetJustification(s)
	return iou
}

// SetOrigin sets the "origin" field.
func (iou *IsOccurrenceUpdate) SetOrigin(s string) *IsOccurrenceUpdate {
	iou.mutation.SetOrigin(s)
	return iou
}

// SetCollector sets the "collector" field.
func (iou *IsOccurrenceUpdate) SetCollector(s string) *IsOccurrenceUpdate {
	iou.mutation.SetCollector(s)
	return iou
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (iou *IsOccurrenceUpdate) SetPackage(p *PackageVersion) *IsOccurrenceUpdate {
	return iou.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (iou *IsOccurrenceUpdate) SetArtifact(a *Artifact) *IsOccurrenceUpdate {
	return iou.SetArtifactID(a.ID)
}

// Mutation returns the IsOccurrenceMutation object of the builder.
func (iou *IsOccurrenceUpdate) Mutation() *IsOccurrenceMutation {
	return iou.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (iou *IsOccurrenceUpdate) ClearPackage() *IsOccurrenceUpdate {
	iou.mutation.ClearPackage()
	return iou
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (iou *IsOccurrenceUpdate) ClearArtifact() *IsOccurrenceUpdate {
	iou.mutation.ClearArtifact()
	return iou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iou *IsOccurrenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iou.sqlSave, iou.mutation, iou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iou *IsOccurrenceUpdate) SaveX(ctx context.Context) int {
	affected, err := iou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iou *IsOccurrenceUpdate) Exec(ctx context.Context) error {
	_, err := iou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iou *IsOccurrenceUpdate) ExecX(ctx context.Context) {
	if err := iou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iou *IsOccurrenceUpdate) check() error {
	if _, ok := iou.mutation.ArtifactID(); iou.mutation.ArtifactCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsOccurrence.artifact"`)
	}
	return nil
}

func (iou *IsOccurrenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(isoccurrence.Table, isoccurrence.Columns, sqlgraph.NewFieldSpec(isoccurrence.FieldID, field.TypeInt))
	if ps := iou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iou.mutation.SourceID(); ok {
		_spec.SetField(isoccurrence.FieldSourceID, field.TypeInt, value)
	}
	if value, ok := iou.mutation.AddedSourceID(); ok {
		_spec.AddField(isoccurrence.FieldSourceID, field.TypeInt, value)
	}
	if iou.mutation.SourceIDCleared() {
		_spec.ClearField(isoccurrence.FieldSourceID, field.TypeInt)
	}
	if value, ok := iou.mutation.Justification(); ok {
		_spec.SetField(isoccurrence.FieldJustification, field.TypeString, value)
	}
	if value, ok := iou.mutation.Origin(); ok {
		_spec.SetField(isoccurrence.FieldOrigin, field.TypeString, value)
	}
	if value, ok := iou.mutation.Collector(); ok {
		_spec.SetField(isoccurrence.FieldCollector, field.TypeString, value)
	}
	if iou.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isoccurrence.PackageTable,
			Columns: []string{isoccurrence.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iou.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isoccurrence.PackageTable,
			Columns: []string{isoccurrence.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iou.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isoccurrence.ArtifactTable,
			Columns: []string{isoccurrence.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iou.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isoccurrence.ArtifactTable,
			Columns: []string{isoccurrence.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{isoccurrence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iou.mutation.done = true
	return n, nil
}

// IsOccurrenceUpdateOne is the builder for updating a single IsOccurrence entity.
type IsOccurrenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IsOccurrenceMutation
}

// SetPackageID sets the "package_id" field.
func (iouo *IsOccurrenceUpdateOne) SetPackageID(i int) *IsOccurrenceUpdateOne {
	iouo.mutation.SetPackageID(i)
	return iouo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (iouo *IsOccurrenceUpdateOne) SetNillablePackageID(i *int) *IsOccurrenceUpdateOne {
	if i != nil {
		iouo.SetPackageID(*i)
	}
	return iouo
}

// ClearPackageID clears the value of the "package_id" field.
func (iouo *IsOccurrenceUpdateOne) ClearPackageID() *IsOccurrenceUpdateOne {
	iouo.mutation.ClearPackageID()
	return iouo
}

// SetSourceID sets the "source_id" field.
func (iouo *IsOccurrenceUpdateOne) SetSourceID(i int) *IsOccurrenceUpdateOne {
	iouo.mutation.ResetSourceID()
	iouo.mutation.SetSourceID(i)
	return iouo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (iouo *IsOccurrenceUpdateOne) SetNillableSourceID(i *int) *IsOccurrenceUpdateOne {
	if i != nil {
		iouo.SetSourceID(*i)
	}
	return iouo
}

// AddSourceID adds i to the "source_id" field.
func (iouo *IsOccurrenceUpdateOne) AddSourceID(i int) *IsOccurrenceUpdateOne {
	iouo.mutation.AddSourceID(i)
	return iouo
}

// ClearSourceID clears the value of the "source_id" field.
func (iouo *IsOccurrenceUpdateOne) ClearSourceID() *IsOccurrenceUpdateOne {
	iouo.mutation.ClearSourceID()
	return iouo
}

// SetArtifactID sets the "artifact_id" field.
func (iouo *IsOccurrenceUpdateOne) SetArtifactID(i int) *IsOccurrenceUpdateOne {
	iouo.mutation.SetArtifactID(i)
	return iouo
}

// SetJustification sets the "justification" field.
func (iouo *IsOccurrenceUpdateOne) SetJustification(s string) *IsOccurrenceUpdateOne {
	iouo.mutation.SetJustification(s)
	return iouo
}

// SetOrigin sets the "origin" field.
func (iouo *IsOccurrenceUpdateOne) SetOrigin(s string) *IsOccurrenceUpdateOne {
	iouo.mutation.SetOrigin(s)
	return iouo
}

// SetCollector sets the "collector" field.
func (iouo *IsOccurrenceUpdateOne) SetCollector(s string) *IsOccurrenceUpdateOne {
	iouo.mutation.SetCollector(s)
	return iouo
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (iouo *IsOccurrenceUpdateOne) SetPackage(p *PackageVersion) *IsOccurrenceUpdateOne {
	return iouo.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (iouo *IsOccurrenceUpdateOne) SetArtifact(a *Artifact) *IsOccurrenceUpdateOne {
	return iouo.SetArtifactID(a.ID)
}

// Mutation returns the IsOccurrenceMutation object of the builder.
func (iouo *IsOccurrenceUpdateOne) Mutation() *IsOccurrenceMutation {
	return iouo.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (iouo *IsOccurrenceUpdateOne) ClearPackage() *IsOccurrenceUpdateOne {
	iouo.mutation.ClearPackage()
	return iouo
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (iouo *IsOccurrenceUpdateOne) ClearArtifact() *IsOccurrenceUpdateOne {
	iouo.mutation.ClearArtifact()
	return iouo
}

// Where appends a list predicates to the IsOccurrenceUpdate builder.
func (iouo *IsOccurrenceUpdateOne) Where(ps ...predicate.IsOccurrence) *IsOccurrenceUpdateOne {
	iouo.mutation.Where(ps...)
	return iouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iouo *IsOccurrenceUpdateOne) Select(field string, fields ...string) *IsOccurrenceUpdateOne {
	iouo.fields = append([]string{field}, fields...)
	return iouo
}

// Save executes the query and returns the updated IsOccurrence entity.
func (iouo *IsOccurrenceUpdateOne) Save(ctx context.Context) (*IsOccurrence, error) {
	return withHooks(ctx, iouo.sqlSave, iouo.mutation, iouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iouo *IsOccurrenceUpdateOne) SaveX(ctx context.Context) *IsOccurrence {
	node, err := iouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iouo *IsOccurrenceUpdateOne) Exec(ctx context.Context) error {
	_, err := iouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iouo *IsOccurrenceUpdateOne) ExecX(ctx context.Context) {
	if err := iouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iouo *IsOccurrenceUpdateOne) check() error {
	if _, ok := iouo.mutation.ArtifactID(); iouo.mutation.ArtifactCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsOccurrence.artifact"`)
	}
	return nil
}

func (iouo *IsOccurrenceUpdateOne) sqlSave(ctx context.Context) (_node *IsOccurrence, err error) {
	if err := iouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(isoccurrence.Table, isoccurrence.Columns, sqlgraph.NewFieldSpec(isoccurrence.FieldID, field.TypeInt))
	id, ok := iouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IsOccurrence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, isoccurrence.FieldID)
		for _, f := range fields {
			if !isoccurrence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != isoccurrence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iouo.mutation.SourceID(); ok {
		_spec.SetField(isoccurrence.FieldSourceID, field.TypeInt, value)
	}
	if value, ok := iouo.mutation.AddedSourceID(); ok {
		_spec.AddField(isoccurrence.FieldSourceID, field.TypeInt, value)
	}
	if iouo.mutation.SourceIDCleared() {
		_spec.ClearField(isoccurrence.FieldSourceID, field.TypeInt)
	}
	if value, ok := iouo.mutation.Justification(); ok {
		_spec.SetField(isoccurrence.FieldJustification, field.TypeString, value)
	}
	if value, ok := iouo.mutation.Origin(); ok {
		_spec.SetField(isoccurrence.FieldOrigin, field.TypeString, value)
	}
	if value, ok := iouo.mutation.Collector(); ok {
		_spec.SetField(isoccurrence.FieldCollector, field.TypeString, value)
	}
	if iouo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isoccurrence.PackageTable,
			Columns: []string{isoccurrence.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isoccurrence.PackageTable,
			Columns: []string{isoccurrence.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iouo.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isoccurrence.ArtifactTable,
			Columns: []string{isoccurrence.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouo.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isoccurrence.ArtifactTable,
			Columns: []string{isoccurrence.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IsOccurrence{config: iouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{isoccurrence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iouo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// CertificationCreate is the builder for creating a Certification entity.
type CertificationCreate struct {
	config
	mutation *CertificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSourceID sets the "source_id" field.
func (cc *CertificationCreate) SetSourceID(i int) *CertificationCreate {
	cc.mutation.SetSourceID(i)
	return cc
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableSourceID(i *int) *CertificationCreate {
	if i != nil {
		cc.SetSourceID(*i)
	}
	return cc
}

// SetPackageVersionID sets the "package_version_id" field.
func (cc *CertificationCreate) SetPackageVersionID(i int) *CertificationCreate {
	cc.mutation.SetPackageVersionID(i)
	return cc
}

// SetNillablePackageVersionID sets the "package_version_id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillablePackageVersionID(i *int) *CertificationCreate {
	if i != nil {
		cc.SetPackageVersionID(*i)
	}
	return cc
}

// SetPackageNameID sets the "package_name_id" field.
func (cc *CertificationCreate) SetPackageNameID(i int) *CertificationCreate {
	cc.mutation.SetPackageNameID(i)
	return cc
}

// SetNillablePackageNameID sets the "package_name_id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillablePackageNameID(i *int) *CertificationCreate {
	if i != nil {
		cc.SetPackageNameID(*i)
	}
	return cc
}

// SetArtifactID sets the "artifact_id" field.
func (cc *CertificationCreate) SetArtifactID(i int) *CertificationCreate {
	cc.mutation.SetArtifactID(i)
	return cc
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableArtifactID(i *int) *CertificationCreate {
	if i != nil {
		cc.SetArtifactID(*i)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *CertificationCreate) SetType(c certification.Type) *CertificationCreate {
	cc.mutation.SetType(c)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableType(c *certification.Type) *CertificationCreate {
	if c != nil {
		cc.SetType(*c)
	}
	return cc
}

// SetJustification sets the "justification" field.
func (cc *CertificationCreate) SetJustification(s string) *CertificationCreate {
	cc.mutation.SetJustification(s)
	return cc
}

// SetOrigin sets the "origin" field.
func (cc *CertificationCreate) SetOrigin(s string) *CertificationCreate {
	cc.mutation.SetOrigin(s)
	return cc
}

// SetCollector sets the "collector" field.
func (cc *CertificationCreate) SetCollector(s string) *CertificationCreate {
	cc.mutation.SetCollector(s)
	return cc
}

// SetKnownSince sets the "known_since" field.
func (cc *CertificationCreate) SetKnownSince(t time.Time) *CertificationCreate {
	cc.mutation.SetKnownSince(t)
	return cc
}

// SetSource sets the "source" edge to the SourceName entity.
func (cc *CertificationCreate) SetSource(s *SourceName) *CertificationCreate {
	return cc.SetSourceID(s.ID)
}

// SetPackageVersion sets the "package_version" edge to the PackageVersion entity.
func (cc *CertificationCreate) SetPackageVersion(p *PackageVersion) *CertificationCreate {
	return cc.SetPackageVersionID(p.ID)
}

// SetAllVersionsID sets the "all_versions" edge to the PackageName entity by ID.
func (cc *CertificationCreate) SetAllVersionsID(id int) *CertificationCreate {
	cc.mutation.SetAllVersionsID(id)
	return cc
}

// SetNillableAllVersionsID sets the "all_versions" edge to the PackageName entity by ID if the given value is not nil.
func (cc *CertificationCreate) SetNillableAllVersionsID(id *int) *CertificationCreate {
	if id != nil {
		cc = cc.SetAllVersionsID(*id)
	}
	return cc
}

// SetAllVersions sets the "all_versions" edge to the PackageName entity.
func (cc *CertificationCreate) SetAllVersions(p *PackageName) *CertificationCreate {
	return cc.SetAllVersionsID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (cc *CertificationCreate) SetArtifact(a *Artifact) *CertificationCreate {
	return cc.SetArtifactID(a.ID)
}

// Mutation returns the CertificationMutation object of the builder.
func (cc *CertificationCreate) Mutation() *CertificationMutation {
	return cc.mutation
}

// Save creates the Certification in the database.
func (cc *CertificationCreate) Save(ctx context.Context) (*Certification, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CertificationCreate) SaveX(ctx context.Context) *Certification {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CertificationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CertificationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CertificationCreate) defaults() {
	if _, ok := cc.mutation.GetType(); !ok {
		v := certification.DefaultType
		cc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CertificationCreate) check() error {
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Certification.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := certification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Certification.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "Certification.justification"`)}
	}
	if _, ok := cc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "Certification.origin"`)}
	}
	if _, ok := cc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "Certification.collector"`)}
	}
	if _, ok := cc.mutation.KnownSince(); !ok {
		return &ValidationError{Name: "known_since", err: errors.New(`ent: missing required field "Certification.known_since"`)}
	}
	return nil
}

func (cc *CertificationCreate) sqlSave(ctx context.Context) (*Certification, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CertificationCreate) createSpec() (*Certification, *sqlgraph.CreateSpec) {
	var (
		_node = &Certification{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(certification.Table, sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(certification.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Justification(); ok {
		_spec.SetField(certification.FieldJustification, field.TypeString, value)
		_node.Justification = value
	}
	if value, ok := cc.mutation.Origin(); ok {
		_spec.SetField(certification.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := cc.mutation.Collector(); ok {
		_spec.SetField(certification.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if value, ok := cc.mutation.KnownSince(); ok {
		_spec.SetField(certification.FieldKnownSince, field.TypeTime, value)
		_node.KnownSince = value
	}
	if nodes := cc.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.SourceTable,
			Columns: []string{certification.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PackageVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.PackageVersionTable,
			Columns: []string{certification.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageVersionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.AllVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.AllVersionsTable,
			Columns: []string{certification.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageNameID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.ArtifactTable,
			Columns: []string{certification.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArtifactID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Certification.Create().
//		SetSourceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertificationUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (cc *CertificationCreate) OnConflict(opts ...sql.ConflictOption) *CertificationUpsertOne {
	cc.conflict = opts
	return &CertificationUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Certification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CertificationCreate) OnConflictColumns(columns ...string) *CertificationUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CertificationUpsertOne{
		create: cc,
	}
}

type (
	// CertificationUpsertOne is the builder for "upsert"-ing
	//  one Certification node.
	CertificationUpsertOne struct {
		create *CertificationCreate
	}

	// CertificationUpsert is the "OnConflict" setter.
	CertificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetSourceID sets the "source_id" field.
func (u *CertificationUpsert) SetSourceID(v int) *CertificationUpsert {
	u.Set(certification.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *CertificationUpsert) UpdateSourceID() *CertificationUpsert {
	u.SetExcluded(certification.FieldSourceID)
	return u
}

// ClearSourceID clears the value of the "source_id" field.
func (u *CertificationUpsert) ClearSourceID() *CertificationUpsert {
	u.SetNull(certification.FieldSourceID)
	return u
}

// SetPackageVersionID sets the "package_version_id" field.
func (u *CertificationUpsert) SetPackageVersionID(v int) *CertificationUpsert {
	u.Set(certification.FieldPackageVersionID, v)
	return u
}

// UpdatePackageVersionID sets the "package_version_id" field to the value that was provided on create.
func (u *CertificationUpsert) UpdatePackageVersionID() *CertificationUpsert {
	u.SetExcluded(certification.FieldPackageVersionID)
	return u
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (u *CertificationUpsert) ClearPackageVersionID() *CertificationUpsert {
	u.SetNull(certification.FieldPackageVersionID)
	return u
}

// SetPackageNameID sets the "package_name_id" field.
func (u *CertificationUpsert) SetPackageNameID(v int) *CertificationUpsert {
	u.Set(certification.FieldPackageNameID, v)
	return u
}

// UpdatePackageNameID sets the "package_name_id" field to the value that was provided on create.
func (u *CertificationUpsert) UpdatePackageNameID() *CertificationUpsert {
	u.SetExcluded(certification.FieldPackageNameID)
	return u
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (u *CertificationUpsert) ClearPackageNameID() *CertificationUpsert {
	u.SetNull(certification.FieldPackageNameID)
	return u
}

// SetArtifactID sets the "artifact_id" field.
func (u *CertificationUpsert) SetArtifactID(v int) *CertificationUpsert {
	u.Set(certification.FieldArtifactID, v)
	return u
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *CertificationUpsert) UpdateArtifactID() *CertificationUpsert {
	u.SetExcluded(certification.FieldArtifactID)
	return u
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *CertificationUpsert) ClearArtifactID() *CertificationUpsert {
	u.SetNull(certification.FieldArtifactID)
	return u
}

// SetType sets the "type" field.
func (u *CertificationUpsert) SetType(v certification.Type) *CertificationUpsert {
	u.Set(certification.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CertificationUpsert) UpdateType() *CertificationUpsert {
	u.SetExcluded(certification.FieldType)
	return u
}

// SetJustification sets the "justification" field.
func (u *CertificationUpsert) SetJustification(v string) *CertificationUpsert {
	u.Set(certification.FieldJustification, v)
	return u
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *CertificationUpsert) UpdateJustification() *CertificationUpsert {
	u.SetExcluded(certification.FieldJustification)
	return u
}

// SetOrigin sets the "origin" field.
func (u *CertificationUpsert) SetOrigin(v string) *CertificationUpsert {
	u.Set(certification.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *CertificationUpsert) UpdateOrigin() *CertificationUpsert {
	u.SetExcluded(certification.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *CertificationUpsert) SetCollector(v string) *CertificationUpsert {
	u.Set(certification.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *CertificationUpsert) UpdateCollector() *CertificationUpsert {
	u.SetExcluded(certification.FieldCollector)
	return u
}

// SetKnownSince sets the "known_since" field.
func (u *CertificationUpsert) SetKnownSince(v time.Time) *CertificationUpsert {
	u.Set(certification.FieldKnownSince, v)
	return u
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *CertificationUpsert) UpdateKnownSince() *CertificationUpsert {
	u.SetExcluded(certification.FieldKnownSince)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Certification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CertificationUpsertOne) UpdateNewValues() *CertificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Certification.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CertificationUpsertOne) Ignore() *CertificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertificationUpsertOne) DoNothing() *CertificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertificationCreate.OnConflict
// documentation for more info.
func (u *CertificationUpsertOne) Update(set func(*CertificationUpsert)) *CertificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *CertificationUpsertOne) SetSourceID(v int) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdateSourceID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateSourceID()
	})
}

// ClearSourceID clears the value of the "source_id" field.
func (u *CertificationUpsertOne) ClearSourceID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.ClearSourceID()
	})
}

// SetPackageVersionID sets the "package_version_id" field.
func (u *CertificationUpsertOne) SetPackageVersionID(v int) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetPackageVersionID(v)
	})
}

// UpdatePackageVersionID sets the "package_version_id" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdatePackageVersionID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdatePackageVersionID()
	})
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (u *CertificationUpsertOne) ClearPackageVersionID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.ClearPackageVersionID()
	})
}

// SetPackageNameID sets the "package_name_id" field.
func (u *CertificationUpsertOne) SetPackageNameID(v int) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetPackageNameID(v)
	})
}

// UpdatePackageNameID sets the "package_name_id" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdatePackageNameID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdatePackageNameID()
	})
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (u *CertificationUpsertOne) ClearPackageNameID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.ClearPackageNameID()
	})
}

// SetArtifactID sets the "artifact_id" field.
func (u *CertificationUpsertOne) SetArtifactID(v int) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetArtifactID(v)
	})
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdateArtifactID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateArtifactID()
	})
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *CertificationUpsertOne) ClearArtifactID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.ClearArtifactID()
	})
}

// SetType sets the "type" field.
func (u *CertificationUpsertOne) SetType(v certification.Type) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdateType() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateType()
	})
}

// SetJustification sets the "justification" field.
func (u *CertificationUpsertOne) SetJustification(v string) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdateJustification() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *CertificationUpsertOne) SetOrigin(v string) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdateOrigin() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *CertificationUpsertOne) SetCollector(v string) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdateCollector() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateCollector()
	})
}

// SetKnownSince sets the "known_since" field.
func (u *CertificationUpsertOne) SetKnownSince(v time.Time) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetKnownSince(v)
	})
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdateKnownSince() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateKnownSince()
	})
}

// Exec executes the query.
func (u *CertificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CertificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CertificationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CertificationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CertificationCreateBulk is the builder for creating many Certification entities in bulk.
type CertificationCreateBulk struct {
	config
	err      error
	builders []*CertificationCreate
	conflict []sql.ConflictOption
}

// Save creates the Certification entities in the database.
func (ccb *CertificationCreateBulk) Save(ctx context.Context) ([]*Certification, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Certification, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CertificationCreateBulk) SaveX(ctx context.Context) []*Certification {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CertificationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CertificationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Certification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertificationUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (ccb *CertificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *CertificationUpsertBulk {
	ccb.conflict = opts
	return &CertificationUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Certification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CertificationCreateBulk) OnConflictColumns(columns ...string) *CertificationUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CertificationUpsertBulk{
		create: ccb,
	}
}

// CertificationUpsertBulk is the builder for "upsert"-ing
// a bulk of Certification nodes.
type CertificationUpsertBulk struct {
	create *CertificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Certification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CertificationUpsertBulk) UpdateNewValues() *CertificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Certification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CertificationUpsertBulk) Ignore() *CertificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertificationUpsertBulk) DoNothing() *CertificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertificationCreateBulk.OnConflict
// documentation for more info.
func (u *CertificationUpsertBulk) Update(set func(*CertificationUpsert)) *CertificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *CertificationUpsertBulk) SetSourceID(v int) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdateSourceID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateSourceID()
	})
}

// ClearSourceID clears the value of the "source_id" field.
func (u *CertificationUpsertBulk) ClearSourceID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.ClearSourceID()
	})
}

// SetPackageVersionID sets the "package_version_id" field.
func (u *CertificationUpsertBulk) SetPackageVersionID(v int) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetPackageVersionID(v)
	})
}

// UpdatePackageVersionID sets the "package_version_id" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdatePackageVersionID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdatePackageVersionID()
	})
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (u *CertificationUpsertBulk) ClearPackageVersionID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.ClearPackageVersionID()
	})
}

// SetPackageNameID sets the "package_name_id" field.
func (u *CertificationUpsertBulk) SetPackageNameID(v int) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetPackageNameID(v)
	})
}

// UpdatePackageNameID sets the "package_name_id" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdatePackageNameID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdatePackageNameID()
	})
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (u *CertificationUpsertBulk) ClearPackageNameID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.ClearPackageNameID()
	})
}

// SetArtifactID sets the "artifact_id" field.
func (u *CertificationUpsertBulk) SetArtifactID(v int) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetArtifactID(v)
	})
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdateArtifactID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateArtifactID()
	})
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *CertificationUpsertBulk) ClearArtifactID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.ClearArtifactID()
	})
}

// SetType sets the "type" field.
func (u *CertificationUpsertBulk) SetType(v certification.Type) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdateType() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateType()
	})
}

// SetJustification sets the "justification" field.
func (u *CertificationUpsertBulk) SetJustification(v string) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdateJustification() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *CertificationUpsertBulk) SetOrigin(v string) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdateOrigin() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *CertificationUpsertBulk) SetCollector(v string) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdateCollector() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateCollector()
	})
}

// SetKnownSince sets the "known_since" field.
func (u *CertificationUpsertBulk) SetKnownSince(v time.Time) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetKnownSince(v)
	})
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdateKnownSince() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateKnownSince()
	})
}

// Exec executes the query.
func (u *CertificationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CertificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CertificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

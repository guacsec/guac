// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isvulnerability"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
)

// IsVulnerabilityQuery is the builder for querying IsVulnerability entities.
type IsVulnerabilityQuery struct {
	config
	ctx               *QueryContext
	order             []isvulnerability.OrderOption
	inters            []Interceptor
	predicates        []predicate.IsVulnerability
	withOsv           *VulnerabilityTypeQuery
	withVulnerability *VulnerabilityTypeQuery
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*IsVulnerability) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IsVulnerabilityQuery builder.
func (ivq *IsVulnerabilityQuery) Where(ps ...predicate.IsVulnerability) *IsVulnerabilityQuery {
	ivq.predicates = append(ivq.predicates, ps...)
	return ivq
}

// Limit the number of records to be returned by this query.
func (ivq *IsVulnerabilityQuery) Limit(limit int) *IsVulnerabilityQuery {
	ivq.ctx.Limit = &limit
	return ivq
}

// Offset to start from.
func (ivq *IsVulnerabilityQuery) Offset(offset int) *IsVulnerabilityQuery {
	ivq.ctx.Offset = &offset
	return ivq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ivq *IsVulnerabilityQuery) Unique(unique bool) *IsVulnerabilityQuery {
	ivq.ctx.Unique = &unique
	return ivq
}

// Order specifies how the records should be ordered.
func (ivq *IsVulnerabilityQuery) Order(o ...isvulnerability.OrderOption) *IsVulnerabilityQuery {
	ivq.order = append(ivq.order, o...)
	return ivq
}

// QueryOsv chains the current query on the "osv" edge.
func (ivq *IsVulnerabilityQuery) QueryOsv() *VulnerabilityTypeQuery {
	query := (&VulnerabilityTypeClient{config: ivq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ivq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ivq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(isvulnerability.Table, isvulnerability.FieldID, selector),
			sqlgraph.To(vulnerabilitytype.Table, vulnerabilitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, isvulnerability.OsvTable, isvulnerability.OsvColumn),
		)
		fromU = sqlgraph.SetNeighbors(ivq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVulnerability chains the current query on the "vulnerability" edge.
func (ivq *IsVulnerabilityQuery) QueryVulnerability() *VulnerabilityTypeQuery {
	query := (&VulnerabilityTypeClient{config: ivq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ivq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ivq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(isvulnerability.Table, isvulnerability.FieldID, selector),
			sqlgraph.To(vulnerabilitytype.Table, vulnerabilitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, isvulnerability.VulnerabilityTable, isvulnerability.VulnerabilityColumn),
		)
		fromU = sqlgraph.SetNeighbors(ivq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IsVulnerability entity from the query.
// Returns a *NotFoundError when no IsVulnerability was found.
func (ivq *IsVulnerabilityQuery) First(ctx context.Context) (*IsVulnerability, error) {
	nodes, err := ivq.Limit(1).All(setContextOp(ctx, ivq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{isvulnerability.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ivq *IsVulnerabilityQuery) FirstX(ctx context.Context) *IsVulnerability {
	node, err := ivq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IsVulnerability ID from the query.
// Returns a *NotFoundError when no IsVulnerability ID was found.
func (ivq *IsVulnerabilityQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ivq.Limit(1).IDs(setContextOp(ctx, ivq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{isvulnerability.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ivq *IsVulnerabilityQuery) FirstIDX(ctx context.Context) int {
	id, err := ivq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IsVulnerability entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IsVulnerability entity is found.
// Returns a *NotFoundError when no IsVulnerability entities are found.
func (ivq *IsVulnerabilityQuery) Only(ctx context.Context) (*IsVulnerability, error) {
	nodes, err := ivq.Limit(2).All(setContextOp(ctx, ivq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{isvulnerability.Label}
	default:
		return nil, &NotSingularError{isvulnerability.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ivq *IsVulnerabilityQuery) OnlyX(ctx context.Context) *IsVulnerability {
	node, err := ivq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IsVulnerability ID in the query.
// Returns a *NotSingularError when more than one IsVulnerability ID is found.
// Returns a *NotFoundError when no entities are found.
func (ivq *IsVulnerabilityQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ivq.Limit(2).IDs(setContextOp(ctx, ivq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{isvulnerability.Label}
	default:
		err = &NotSingularError{isvulnerability.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ivq *IsVulnerabilityQuery) OnlyIDX(ctx context.Context) int {
	id, err := ivq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IsVulnerabilities.
func (ivq *IsVulnerabilityQuery) All(ctx context.Context) ([]*IsVulnerability, error) {
	ctx = setContextOp(ctx, ivq.ctx, "All")
	if err := ivq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IsVulnerability, *IsVulnerabilityQuery]()
	return withInterceptors[[]*IsVulnerability](ctx, ivq, qr, ivq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ivq *IsVulnerabilityQuery) AllX(ctx context.Context) []*IsVulnerability {
	nodes, err := ivq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IsVulnerability IDs.
func (ivq *IsVulnerabilityQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ivq.ctx.Unique == nil && ivq.path != nil {
		ivq.Unique(true)
	}
	ctx = setContextOp(ctx, ivq.ctx, "IDs")
	if err = ivq.Select(isvulnerability.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ivq *IsVulnerabilityQuery) IDsX(ctx context.Context) []int {
	ids, err := ivq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ivq *IsVulnerabilityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ivq.ctx, "Count")
	if err := ivq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ivq, querierCount[*IsVulnerabilityQuery](), ivq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ivq *IsVulnerabilityQuery) CountX(ctx context.Context) int {
	count, err := ivq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ivq *IsVulnerabilityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ivq.ctx, "Exist")
	switch _, err := ivq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ivq *IsVulnerabilityQuery) ExistX(ctx context.Context) bool {
	exist, err := ivq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IsVulnerabilityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ivq *IsVulnerabilityQuery) Clone() *IsVulnerabilityQuery {
	if ivq == nil {
		return nil
	}
	return &IsVulnerabilityQuery{
		config:            ivq.config,
		ctx:               ivq.ctx.Clone(),
		order:             append([]isvulnerability.OrderOption{}, ivq.order...),
		inters:            append([]Interceptor{}, ivq.inters...),
		predicates:        append([]predicate.IsVulnerability{}, ivq.predicates...),
		withOsv:           ivq.withOsv.Clone(),
		withVulnerability: ivq.withVulnerability.Clone(),
		// clone intermediate query.
		sql:  ivq.sql.Clone(),
		path: ivq.path,
	}
}

// WithOsv tells the query-builder to eager-load the nodes that are connected to
// the "osv" edge. The optional arguments are used to configure the query builder of the edge.
func (ivq *IsVulnerabilityQuery) WithOsv(opts ...func(*VulnerabilityTypeQuery)) *IsVulnerabilityQuery {
	query := (&VulnerabilityTypeClient{config: ivq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ivq.withOsv = query
	return ivq
}

// WithVulnerability tells the query-builder to eager-load the nodes that are connected to
// the "vulnerability" edge. The optional arguments are used to configure the query builder of the edge.
func (ivq *IsVulnerabilityQuery) WithVulnerability(opts ...func(*VulnerabilityTypeQuery)) *IsVulnerabilityQuery {
	query := (&VulnerabilityTypeClient{config: ivq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ivq.withVulnerability = query
	return ivq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OsvID int `json:"osv_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IsVulnerability.Query().
//		GroupBy(isvulnerability.FieldOsvID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ivq *IsVulnerabilityQuery) GroupBy(field string, fields ...string) *IsVulnerabilityGroupBy {
	ivq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IsVulnerabilityGroupBy{build: ivq}
	grbuild.flds = &ivq.ctx.Fields
	grbuild.label = isvulnerability.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OsvID int `json:"osv_id,omitempty"`
//	}
//
//	client.IsVulnerability.Query().
//		Select(isvulnerability.FieldOsvID).
//		Scan(ctx, &v)
func (ivq *IsVulnerabilityQuery) Select(fields ...string) *IsVulnerabilitySelect {
	ivq.ctx.Fields = append(ivq.ctx.Fields, fields...)
	sbuild := &IsVulnerabilitySelect{IsVulnerabilityQuery: ivq}
	sbuild.label = isvulnerability.Label
	sbuild.flds, sbuild.scan = &ivq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IsVulnerabilitySelect configured with the given aggregations.
func (ivq *IsVulnerabilityQuery) Aggregate(fns ...AggregateFunc) *IsVulnerabilitySelect {
	return ivq.Select().Aggregate(fns...)
}

func (ivq *IsVulnerabilityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ivq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ivq); err != nil {
				return err
			}
		}
	}
	for _, f := range ivq.ctx.Fields {
		if !isvulnerability.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ivq.path != nil {
		prev, err := ivq.path(ctx)
		if err != nil {
			return err
		}
		ivq.sql = prev
	}
	return nil
}

func (ivq *IsVulnerabilityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IsVulnerability, error) {
	var (
		nodes       = []*IsVulnerability{}
		_spec       = ivq.querySpec()
		loadedTypes = [2]bool{
			ivq.withOsv != nil,
			ivq.withVulnerability != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IsVulnerability).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IsVulnerability{config: ivq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ivq.modifiers) > 0 {
		_spec.Modifiers = ivq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ivq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ivq.withOsv; query != nil {
		if err := ivq.loadOsv(ctx, query, nodes, nil,
			func(n *IsVulnerability, e *VulnerabilityType) { n.Edges.Osv = e }); err != nil {
			return nil, err
		}
	}
	if query := ivq.withVulnerability; query != nil {
		if err := ivq.loadVulnerability(ctx, query, nodes, nil,
			func(n *IsVulnerability, e *VulnerabilityType) { n.Edges.Vulnerability = e }); err != nil {
			return nil, err
		}
	}
	for i := range ivq.loadTotal {
		if err := ivq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ivq *IsVulnerabilityQuery) loadOsv(ctx context.Context, query *VulnerabilityTypeQuery, nodes []*IsVulnerability, init func(*IsVulnerability), assign func(*IsVulnerability, *VulnerabilityType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IsVulnerability)
	for i := range nodes {
		fk := nodes[i].OsvID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(vulnerabilitytype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "osv_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ivq *IsVulnerabilityQuery) loadVulnerability(ctx context.Context, query *VulnerabilityTypeQuery, nodes []*IsVulnerability, init func(*IsVulnerability), assign func(*IsVulnerability, *VulnerabilityType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IsVulnerability)
	for i := range nodes {
		fk := nodes[i].VulnerabilityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(vulnerabilitytype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "vulnerability_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ivq *IsVulnerabilityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ivq.querySpec()
	if len(ivq.modifiers) > 0 {
		_spec.Modifiers = ivq.modifiers
	}
	_spec.Node.Columns = ivq.ctx.Fields
	if len(ivq.ctx.Fields) > 0 {
		_spec.Unique = ivq.ctx.Unique != nil && *ivq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ivq.driver, _spec)
}

func (ivq *IsVulnerabilityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(isvulnerability.Table, isvulnerability.Columns, sqlgraph.NewFieldSpec(isvulnerability.FieldID, field.TypeInt))
	_spec.From = ivq.sql
	if unique := ivq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ivq.path != nil {
		_spec.Unique = true
	}
	if fields := ivq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, isvulnerability.FieldID)
		for i := range fields {
			if fields[i] != isvulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ivq.withOsv != nil {
			_spec.Node.AddColumnOnce(isvulnerability.FieldOsvID)
		}
		if ivq.withVulnerability != nil {
			_spec.Node.AddColumnOnce(isvulnerability.FieldVulnerabilityID)
		}
	}
	if ps := ivq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ivq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ivq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ivq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ivq *IsVulnerabilityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ivq.driver.Dialect())
	t1 := builder.Table(isvulnerability.Table)
	columns := ivq.ctx.Fields
	if len(columns) == 0 {
		columns = isvulnerability.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ivq.sql != nil {
		selector = ivq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ivq.ctx.Unique != nil && *ivq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ivq.predicates {
		p(selector)
	}
	for _, p := range ivq.order {
		p(selector)
	}
	if offset := ivq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ivq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IsVulnerabilityGroupBy is the group-by builder for IsVulnerability entities.
type IsVulnerabilityGroupBy struct {
	selector
	build *IsVulnerabilityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ivgb *IsVulnerabilityGroupBy) Aggregate(fns ...AggregateFunc) *IsVulnerabilityGroupBy {
	ivgb.fns = append(ivgb.fns, fns...)
	return ivgb
}

// Scan applies the selector query and scans the result into the given value.
func (ivgb *IsVulnerabilityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ivgb.build.ctx, "GroupBy")
	if err := ivgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IsVulnerabilityQuery, *IsVulnerabilityGroupBy](ctx, ivgb.build, ivgb, ivgb.build.inters, v)
}

func (ivgb *IsVulnerabilityGroupBy) sqlScan(ctx context.Context, root *IsVulnerabilityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ivgb.fns))
	for _, fn := range ivgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ivgb.flds)+len(ivgb.fns))
		for _, f := range *ivgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ivgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ivgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IsVulnerabilitySelect is the builder for selecting fields of IsVulnerability entities.
type IsVulnerabilitySelect struct {
	*IsVulnerabilityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ivs *IsVulnerabilitySelect) Aggregate(fns ...AggregateFunc) *IsVulnerabilitySelect {
	ivs.fns = append(ivs.fns, fns...)
	return ivs
}

// Scan applies the selector query and scans the result into the given value.
func (ivs *IsVulnerabilitySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ivs.ctx, "Select")
	if err := ivs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IsVulnerabilityQuery, *IsVulnerabilitySelect](ctx, ivs.IsVulnerabilityQuery, ivs, ivs.inters, v)
}

func (ivs *IsVulnerabilitySelect) sqlScan(ctx context.Context, root *IsVulnerabilityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ivs.fns))
	for _, fn := range ivs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ivs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ivs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

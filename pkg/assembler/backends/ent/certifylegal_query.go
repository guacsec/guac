// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifylegal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/license"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// CertifyLegalQuery is the builder for querying CertifyLegal entities.
type CertifyLegalQuery struct {
	config
	ctx                         *QueryContext
	order                       []certifylegal.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.CertifyLegal
	withPackage                 *PackageVersionQuery
	withSource                  *SourceNameQuery
	withDeclaredLicenses        *LicenseQuery
	withDiscoveredLicenses      *LicenseQuery
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*CertifyLegal) error
	withNamedDeclaredLicenses   map[string]*LicenseQuery
	withNamedDiscoveredLicenses map[string]*LicenseQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CertifyLegalQuery builder.
func (clq *CertifyLegalQuery) Where(ps ...predicate.CertifyLegal) *CertifyLegalQuery {
	clq.predicates = append(clq.predicates, ps...)
	return clq
}

// Limit the number of records to be returned by this query.
func (clq *CertifyLegalQuery) Limit(limit int) *CertifyLegalQuery {
	clq.ctx.Limit = &limit
	return clq
}

// Offset to start from.
func (clq *CertifyLegalQuery) Offset(offset int) *CertifyLegalQuery {
	clq.ctx.Offset = &offset
	return clq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (clq *CertifyLegalQuery) Unique(unique bool) *CertifyLegalQuery {
	clq.ctx.Unique = &unique
	return clq
}

// Order specifies how the records should be ordered.
func (clq *CertifyLegalQuery) Order(o ...certifylegal.OrderOption) *CertifyLegalQuery {
	clq.order = append(clq.order, o...)
	return clq
}

// QueryPackage chains the current query on the "package" edge.
func (clq *CertifyLegalQuery) QueryPackage() *PackageVersionQuery {
	query := (&PackageVersionClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifylegal.Table, certifylegal.FieldID, selector),
			sqlgraph.To(packageversion.Table, packageversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, certifylegal.PackageTable, certifylegal.PackageColumn),
		)
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySource chains the current query on the "source" edge.
func (clq *CertifyLegalQuery) QuerySource() *SourceNameQuery {
	query := (&SourceNameClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifylegal.Table, certifylegal.FieldID, selector),
			sqlgraph.To(sourcename.Table, sourcename.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, certifylegal.SourceTable, certifylegal.SourceColumn),
		)
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeclaredLicenses chains the current query on the "declared_licenses" edge.
func (clq *CertifyLegalQuery) QueryDeclaredLicenses() *LicenseQuery {
	query := (&LicenseClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifylegal.Table, certifylegal.FieldID, selector),
			sqlgraph.To(license.Table, license.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, certifylegal.DeclaredLicensesTable, certifylegal.DeclaredLicensesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDiscoveredLicenses chains the current query on the "discovered_licenses" edge.
func (clq *CertifyLegalQuery) QueryDiscoveredLicenses() *LicenseQuery {
	query := (&LicenseClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifylegal.Table, certifylegal.FieldID, selector),
			sqlgraph.To(license.Table, license.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, certifylegal.DiscoveredLicensesTable, certifylegal.DiscoveredLicensesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CertifyLegal entity from the query.
// Returns a *NotFoundError when no CertifyLegal was found.
func (clq *CertifyLegalQuery) First(ctx context.Context) (*CertifyLegal, error) {
	nodes, err := clq.Limit(1).All(setContextOp(ctx, clq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{certifylegal.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (clq *CertifyLegalQuery) FirstX(ctx context.Context) *CertifyLegal {
	node, err := clq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CertifyLegal ID from the query.
// Returns a *NotFoundError when no CertifyLegal ID was found.
func (clq *CertifyLegalQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clq.Limit(1).IDs(setContextOp(ctx, clq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{certifylegal.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (clq *CertifyLegalQuery) FirstIDX(ctx context.Context) int {
	id, err := clq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CertifyLegal entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CertifyLegal entity is found.
// Returns a *NotFoundError when no CertifyLegal entities are found.
func (clq *CertifyLegalQuery) Only(ctx context.Context) (*CertifyLegal, error) {
	nodes, err := clq.Limit(2).All(setContextOp(ctx, clq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{certifylegal.Label}
	default:
		return nil, &NotSingularError{certifylegal.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (clq *CertifyLegalQuery) OnlyX(ctx context.Context) *CertifyLegal {
	node, err := clq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CertifyLegal ID in the query.
// Returns a *NotSingularError when more than one CertifyLegal ID is found.
// Returns a *NotFoundError when no entities are found.
func (clq *CertifyLegalQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clq.Limit(2).IDs(setContextOp(ctx, clq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{certifylegal.Label}
	default:
		err = &NotSingularError{certifylegal.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (clq *CertifyLegalQuery) OnlyIDX(ctx context.Context) int {
	id, err := clq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CertifyLegals.
func (clq *CertifyLegalQuery) All(ctx context.Context) ([]*CertifyLegal, error) {
	ctx = setContextOp(ctx, clq.ctx, "All")
	if err := clq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CertifyLegal, *CertifyLegalQuery]()
	return withInterceptors[[]*CertifyLegal](ctx, clq, qr, clq.inters)
}

// AllX is like All, but panics if an error occurs.
func (clq *CertifyLegalQuery) AllX(ctx context.Context) []*CertifyLegal {
	nodes, err := clq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CertifyLegal IDs.
func (clq *CertifyLegalQuery) IDs(ctx context.Context) (ids []int, err error) {
	if clq.ctx.Unique == nil && clq.path != nil {
		clq.Unique(true)
	}
	ctx = setContextOp(ctx, clq.ctx, "IDs")
	if err = clq.Select(certifylegal.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (clq *CertifyLegalQuery) IDsX(ctx context.Context) []int {
	ids, err := clq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (clq *CertifyLegalQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, clq.ctx, "Count")
	if err := clq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, clq, querierCount[*CertifyLegalQuery](), clq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (clq *CertifyLegalQuery) CountX(ctx context.Context) int {
	count, err := clq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (clq *CertifyLegalQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, clq.ctx, "Exist")
	switch _, err := clq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (clq *CertifyLegalQuery) ExistX(ctx context.Context) bool {
	exist, err := clq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CertifyLegalQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (clq *CertifyLegalQuery) Clone() *CertifyLegalQuery {
	if clq == nil {
		return nil
	}
	return &CertifyLegalQuery{
		config:                 clq.config,
		ctx:                    clq.ctx.Clone(),
		order:                  append([]certifylegal.OrderOption{}, clq.order...),
		inters:                 append([]Interceptor{}, clq.inters...),
		predicates:             append([]predicate.CertifyLegal{}, clq.predicates...),
		withPackage:            clq.withPackage.Clone(),
		withSource:             clq.withSource.Clone(),
		withDeclaredLicenses:   clq.withDeclaredLicenses.Clone(),
		withDiscoveredLicenses: clq.withDiscoveredLicenses.Clone(),
		// clone intermediate query.
		sql:  clq.sql.Clone(),
		path: clq.path,
	}
}

// WithPackage tells the query-builder to eager-load the nodes that are connected to
// the "package" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *CertifyLegalQuery) WithPackage(opts ...func(*PackageVersionQuery)) *CertifyLegalQuery {
	query := (&PackageVersionClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withPackage = query
	return clq
}

// WithSource tells the query-builder to eager-load the nodes that are connected to
// the "source" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *CertifyLegalQuery) WithSource(opts ...func(*SourceNameQuery)) *CertifyLegalQuery {
	query := (&SourceNameClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withSource = query
	return clq
}

// WithDeclaredLicenses tells the query-builder to eager-load the nodes that are connected to
// the "declared_licenses" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *CertifyLegalQuery) WithDeclaredLicenses(opts ...func(*LicenseQuery)) *CertifyLegalQuery {
	query := (&LicenseClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withDeclaredLicenses = query
	return clq
}

// WithDiscoveredLicenses tells the query-builder to eager-load the nodes that are connected to
// the "discovered_licenses" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *CertifyLegalQuery) WithDiscoveredLicenses(opts ...func(*LicenseQuery)) *CertifyLegalQuery {
	query := (&LicenseClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withDiscoveredLicenses = query
	return clq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PackageID int `json:"package_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CertifyLegal.Query().
//		GroupBy(certifylegal.FieldPackageID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (clq *CertifyLegalQuery) GroupBy(field string, fields ...string) *CertifyLegalGroupBy {
	clq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CertifyLegalGroupBy{build: clq}
	grbuild.flds = &clq.ctx.Fields
	grbuild.label = certifylegal.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PackageID int `json:"package_id,omitempty"`
//	}
//
//	client.CertifyLegal.Query().
//		Select(certifylegal.FieldPackageID).
//		Scan(ctx, &v)
func (clq *CertifyLegalQuery) Select(fields ...string) *CertifyLegalSelect {
	clq.ctx.Fields = append(clq.ctx.Fields, fields...)
	sbuild := &CertifyLegalSelect{CertifyLegalQuery: clq}
	sbuild.label = certifylegal.Label
	sbuild.flds, sbuild.scan = &clq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CertifyLegalSelect configured with the given aggregations.
func (clq *CertifyLegalQuery) Aggregate(fns ...AggregateFunc) *CertifyLegalSelect {
	return clq.Select().Aggregate(fns...)
}

func (clq *CertifyLegalQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range clq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, clq); err != nil {
				return err
			}
		}
	}
	for _, f := range clq.ctx.Fields {
		if !certifylegal.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if clq.path != nil {
		prev, err := clq.path(ctx)
		if err != nil {
			return err
		}
		clq.sql = prev
	}
	return nil
}

func (clq *CertifyLegalQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CertifyLegal, error) {
	var (
		nodes       = []*CertifyLegal{}
		_spec       = clq.querySpec()
		loadedTypes = [4]bool{
			clq.withPackage != nil,
			clq.withSource != nil,
			clq.withDeclaredLicenses != nil,
			clq.withDiscoveredLicenses != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CertifyLegal).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CertifyLegal{config: clq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(clq.modifiers) > 0 {
		_spec.Modifiers = clq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, clq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := clq.withPackage; query != nil {
		if err := clq.loadPackage(ctx, query, nodes, nil,
			func(n *CertifyLegal, e *PackageVersion) { n.Edges.Package = e }); err != nil {
			return nil, err
		}
	}
	if query := clq.withSource; query != nil {
		if err := clq.loadSource(ctx, query, nodes, nil,
			func(n *CertifyLegal, e *SourceName) { n.Edges.Source = e }); err != nil {
			return nil, err
		}
	}
	if query := clq.withDeclaredLicenses; query != nil {
		if err := clq.loadDeclaredLicenses(ctx, query, nodes,
			func(n *CertifyLegal) { n.Edges.DeclaredLicenses = []*License{} },
			func(n *CertifyLegal, e *License) { n.Edges.DeclaredLicenses = append(n.Edges.DeclaredLicenses, e) }); err != nil {
			return nil, err
		}
	}
	if query := clq.withDiscoveredLicenses; query != nil {
		if err := clq.loadDiscoveredLicenses(ctx, query, nodes,
			func(n *CertifyLegal) { n.Edges.DiscoveredLicenses = []*License{} },
			func(n *CertifyLegal, e *License) { n.Edges.DiscoveredLicenses = append(n.Edges.DiscoveredLicenses, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range clq.withNamedDeclaredLicenses {
		if err := clq.loadDeclaredLicenses(ctx, query, nodes,
			func(n *CertifyLegal) { n.appendNamedDeclaredLicenses(name) },
			func(n *CertifyLegal, e *License) { n.appendNamedDeclaredLicenses(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range clq.withNamedDiscoveredLicenses {
		if err := clq.loadDiscoveredLicenses(ctx, query, nodes,
			func(n *CertifyLegal) { n.appendNamedDiscoveredLicenses(name) },
			func(n *CertifyLegal, e *License) { n.appendNamedDiscoveredLicenses(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range clq.loadTotal {
		if err := clq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (clq *CertifyLegalQuery) loadPackage(ctx context.Context, query *PackageVersionQuery, nodes []*CertifyLegal, init func(*CertifyLegal), assign func(*CertifyLegal, *PackageVersion)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CertifyLegal)
	for i := range nodes {
		if nodes[i].PackageID == nil {
			continue
		}
		fk := *nodes[i].PackageID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packageversion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "package_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (clq *CertifyLegalQuery) loadSource(ctx context.Context, query *SourceNameQuery, nodes []*CertifyLegal, init func(*CertifyLegal), assign func(*CertifyLegal, *SourceName)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CertifyLegal)
	for i := range nodes {
		if nodes[i].SourceID == nil {
			continue
		}
		fk := *nodes[i].SourceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sourcename.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "source_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (clq *CertifyLegalQuery) loadDeclaredLicenses(ctx context.Context, query *LicenseQuery, nodes []*CertifyLegal, init func(*CertifyLegal), assign func(*CertifyLegal, *License)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*CertifyLegal)
	nids := make(map[int]map[*CertifyLegal]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(certifylegal.DeclaredLicensesTable)
		s.Join(joinT).On(s.C(license.FieldID), joinT.C(certifylegal.DeclaredLicensesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(certifylegal.DeclaredLicensesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(certifylegal.DeclaredLicensesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*CertifyLegal]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*License](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "declared_licenses" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (clq *CertifyLegalQuery) loadDiscoveredLicenses(ctx context.Context, query *LicenseQuery, nodes []*CertifyLegal, init func(*CertifyLegal), assign func(*CertifyLegal, *License)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*CertifyLegal)
	nids := make(map[int]map[*CertifyLegal]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(certifylegal.DiscoveredLicensesTable)
		s.Join(joinT).On(s.C(license.FieldID), joinT.C(certifylegal.DiscoveredLicensesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(certifylegal.DiscoveredLicensesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(certifylegal.DiscoveredLicensesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*CertifyLegal]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*License](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "discovered_licenses" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (clq *CertifyLegalQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := clq.querySpec()
	if len(clq.modifiers) > 0 {
		_spec.Modifiers = clq.modifiers
	}
	_spec.Node.Columns = clq.ctx.Fields
	if len(clq.ctx.Fields) > 0 {
		_spec.Unique = clq.ctx.Unique != nil && *clq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, clq.driver, _spec)
}

func (clq *CertifyLegalQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(certifylegal.Table, certifylegal.Columns, sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeInt))
	_spec.From = clq.sql
	if unique := clq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if clq.path != nil {
		_spec.Unique = true
	}
	if fields := clq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certifylegal.FieldID)
		for i := range fields {
			if fields[i] != certifylegal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if clq.withPackage != nil {
			_spec.Node.AddColumnOnce(certifylegal.FieldPackageID)
		}
		if clq.withSource != nil {
			_spec.Node.AddColumnOnce(certifylegal.FieldSourceID)
		}
	}
	if ps := clq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := clq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := clq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := clq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (clq *CertifyLegalQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(clq.driver.Dialect())
	t1 := builder.Table(certifylegal.Table)
	columns := clq.ctx.Fields
	if len(columns) == 0 {
		columns = certifylegal.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if clq.sql != nil {
		selector = clq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if clq.ctx.Unique != nil && *clq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range clq.predicates {
		p(selector)
	}
	for _, p := range clq.order {
		p(selector)
	}
	if offset := clq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := clq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDeclaredLicenses tells the query-builder to eager-load the nodes that are connected to the "declared_licenses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (clq *CertifyLegalQuery) WithNamedDeclaredLicenses(name string, opts ...func(*LicenseQuery)) *CertifyLegalQuery {
	query := (&LicenseClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if clq.withNamedDeclaredLicenses == nil {
		clq.withNamedDeclaredLicenses = make(map[string]*LicenseQuery)
	}
	clq.withNamedDeclaredLicenses[name] = query
	return clq
}

// WithNamedDiscoveredLicenses tells the query-builder to eager-load the nodes that are connected to the "discovered_licenses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (clq *CertifyLegalQuery) WithNamedDiscoveredLicenses(name string, opts ...func(*LicenseQuery)) *CertifyLegalQuery {
	query := (&LicenseClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if clq.withNamedDiscoveredLicenses == nil {
		clq.withNamedDiscoveredLicenses = make(map[string]*LicenseQuery)
	}
	clq.withNamedDiscoveredLicenses[name] = query
	return clq
}

// CertifyLegalGroupBy is the group-by builder for CertifyLegal entities.
type CertifyLegalGroupBy struct {
	selector
	build *CertifyLegalQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (clgb *CertifyLegalGroupBy) Aggregate(fns ...AggregateFunc) *CertifyLegalGroupBy {
	clgb.fns = append(clgb.fns, fns...)
	return clgb
}

// Scan applies the selector query and scans the result into the given value.
func (clgb *CertifyLegalGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clgb.build.ctx, "GroupBy")
	if err := clgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CertifyLegalQuery, *CertifyLegalGroupBy](ctx, clgb.build, clgb, clgb.build.inters, v)
}

func (clgb *CertifyLegalGroupBy) sqlScan(ctx context.Context, root *CertifyLegalQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(clgb.fns))
	for _, fn := range clgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*clgb.flds)+len(clgb.fns))
		for _, f := range *clgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*clgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CertifyLegalSelect is the builder for selecting fields of CertifyLegal entities.
type CertifyLegalSelect struct {
	*CertifyLegalQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cls *CertifyLegalSelect) Aggregate(fns ...AggregateFunc) *CertifyLegalSelect {
	cls.fns = append(cls.fns, fns...)
	return cls
}

// Scan applies the selector query and scans the result into the given value.
func (cls *CertifyLegalSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cls.ctx, "Select")
	if err := cls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CertifyLegalQuery, *CertifyLegalSelect](ctx, cls.CertifyLegalQuery, cls, cls.inters, v)
}

func (cls *CertifyLegalSelect) sqlScan(ctx context.Context, root *CertifyLegalQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cls.fns))
	for _, fn := range cls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

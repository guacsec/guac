// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/buildernode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// BuilderNodeUpdate is the builder for updating BuilderNode entities.
type BuilderNodeUpdate struct {
	config
	hooks    []Hook
	mutation *BuilderNodeMutation
}

// Where appends a list predicates to the BuilderNodeUpdate builder.
func (bnu *BuilderNodeUpdate) Where(ps ...predicate.BuilderNode) *BuilderNodeUpdate {
	bnu.mutation.Where(ps...)
	return bnu
}

// Mutation returns the BuilderNodeMutation object of the builder.
func (bnu *BuilderNodeUpdate) Mutation() *BuilderNodeMutation {
	return bnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bnu *BuilderNodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bnu.sqlSave, bnu.mutation, bnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bnu *BuilderNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := bnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bnu *BuilderNodeUpdate) Exec(ctx context.Context) error {
	_, err := bnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bnu *BuilderNodeUpdate) ExecX(ctx context.Context) {
	if err := bnu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bnu *BuilderNodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(buildernode.Table, buildernode.Columns, sqlgraph.NewFieldSpec(buildernode.FieldID, field.TypeInt))
	if ps := bnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{buildernode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bnu.mutation.done = true
	return n, nil
}

// BuilderNodeUpdateOne is the builder for updating a single BuilderNode entity.
type BuilderNodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BuilderNodeMutation
}

// Mutation returns the BuilderNodeMutation object of the builder.
func (bnuo *BuilderNodeUpdateOne) Mutation() *BuilderNodeMutation {
	return bnuo.mutation
}

// Where appends a list predicates to the BuilderNodeUpdate builder.
func (bnuo *BuilderNodeUpdateOne) Where(ps ...predicate.BuilderNode) *BuilderNodeUpdateOne {
	bnuo.mutation.Where(ps...)
	return bnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bnuo *BuilderNodeUpdateOne) Select(field string, fields ...string) *BuilderNodeUpdateOne {
	bnuo.fields = append([]string{field}, fields...)
	return bnuo
}

// Save executes the query and returns the updated BuilderNode entity.
func (bnuo *BuilderNodeUpdateOne) Save(ctx context.Context) (*BuilderNode, error) {
	return withHooks(ctx, bnuo.sqlSave, bnuo.mutation, bnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bnuo *BuilderNodeUpdateOne) SaveX(ctx context.Context) *BuilderNode {
	node, err := bnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bnuo *BuilderNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := bnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bnuo *BuilderNodeUpdateOne) ExecX(ctx context.Context) {
	if err := bnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bnuo *BuilderNodeUpdateOne) sqlSave(ctx context.Context) (_node *BuilderNode, err error) {
	_spec := sqlgraph.NewUpdateSpec(buildernode.Table, buildernode.Columns, sqlgraph.NewFieldSpec(buildernode.FieldID, field.TypeInt))
	id, ok := bnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BuilderNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, buildernode.FieldID)
		for _, f := range fields {
			if !buildernode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != buildernode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &BuilderNode{config: bnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{buildernode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bnuo.mutation.done = true
	return _node, nil
}

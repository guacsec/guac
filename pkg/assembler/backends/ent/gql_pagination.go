// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/builder"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifylegal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvuln"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/dependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hassourceat"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isvulnerability"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/license"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagetype"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pkgequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/scorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcetype"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ArtifactEdge is the edge representation of Artifact.
type ArtifactEdge struct {
	Node   *Artifact `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ArtifactConnection is the connection containing edges to Artifact.
type ArtifactConnection struct {
	Edges      []*ArtifactEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ArtifactConnection) build(nodes []*Artifact, pager *artifactPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Artifact
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Artifact {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Artifact {
			return nodes[i]
		}
	}
	c.Edges = make([]*ArtifactEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ArtifactEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ArtifactPaginateOption enables pagination customization.
type ArtifactPaginateOption func(*artifactPager) error

// WithArtifactOrder configures pagination ordering.
func WithArtifactOrder(order *ArtifactOrder) ArtifactPaginateOption {
	if order == nil {
		order = DefaultArtifactOrder
	}
	o := *order
	return func(pager *artifactPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultArtifactOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithArtifactFilter configures pagination filter.
func WithArtifactFilter(filter func(*ArtifactQuery) (*ArtifactQuery, error)) ArtifactPaginateOption {
	return func(pager *artifactPager) error {
		if filter == nil {
			return errors.New("ArtifactQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type artifactPager struct {
	reverse bool
	order   *ArtifactOrder
	filter  func(*ArtifactQuery) (*ArtifactQuery, error)
}

func newArtifactPager(opts []ArtifactPaginateOption, reverse bool) (*artifactPager, error) {
	pager := &artifactPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultArtifactOrder
	}
	return pager, nil
}

func (p *artifactPager) applyFilter(query *ArtifactQuery) (*ArtifactQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *artifactPager) toCursor(a *Artifact) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *artifactPager) applyCursors(query *ArtifactQuery, after, before *Cursor) (*ArtifactQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultArtifactOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *artifactPager) applyOrder(query *ArtifactQuery) *ArtifactQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultArtifactOrder.Field {
		query = query.Order(DefaultArtifactOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *artifactPager) orderExpr(query *ArtifactQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultArtifactOrder.Field {
			b.Comma().Ident(DefaultArtifactOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Artifact.
func (a *ArtifactQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ArtifactPaginateOption,
) (*ArtifactConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newArtifactPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &ArtifactConnection{Edges: []*ArtifactEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ArtifactOrderField defines the ordering field of Artifact.
type ArtifactOrderField struct {
	// Value extracts the ordering value from the given Artifact.
	Value    func(*Artifact) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) artifact.OrderOption
	toCursor func(*Artifact) Cursor
}

// ArtifactOrder defines the ordering of Artifact.
type ArtifactOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ArtifactOrderField `json:"field"`
}

// DefaultArtifactOrder is the default ordering of Artifact.
var DefaultArtifactOrder = &ArtifactOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ArtifactOrderField{
		Value: func(a *Artifact) (ent.Value, error) {
			return a.ID, nil
		},
		column: artifact.FieldID,
		toTerm: artifact.ByID,
		toCursor: func(a *Artifact) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Artifact into ArtifactEdge.
func (a *Artifact) ToEdge(order *ArtifactOrder) *ArtifactEdge {
	if order == nil {
		order = DefaultArtifactOrder
	}
	return &ArtifactEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// BillOfMaterialsEdge is the edge representation of BillOfMaterials.
type BillOfMaterialsEdge struct {
	Node   *BillOfMaterials `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// BillOfMaterialsConnection is the connection containing edges to BillOfMaterials.
type BillOfMaterialsConnection struct {
	Edges      []*BillOfMaterialsEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *BillOfMaterialsConnection) build(nodes []*BillOfMaterials, pager *billofmaterialsPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *BillOfMaterials
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *BillOfMaterials {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *BillOfMaterials {
			return nodes[i]
		}
	}
	c.Edges = make([]*BillOfMaterialsEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BillOfMaterialsEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BillOfMaterialsPaginateOption enables pagination customization.
type BillOfMaterialsPaginateOption func(*billofmaterialsPager) error

// WithBillOfMaterialsOrder configures pagination ordering.
func WithBillOfMaterialsOrder(order *BillOfMaterialsOrder) BillOfMaterialsPaginateOption {
	if order == nil {
		order = DefaultBillOfMaterialsOrder
	}
	o := *order
	return func(pager *billofmaterialsPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBillOfMaterialsOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBillOfMaterialsFilter configures pagination filter.
func WithBillOfMaterialsFilter(filter func(*BillOfMaterialsQuery) (*BillOfMaterialsQuery, error)) BillOfMaterialsPaginateOption {
	return func(pager *billofmaterialsPager) error {
		if filter == nil {
			return errors.New("BillOfMaterialsQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type billofmaterialsPager struct {
	reverse bool
	order   *BillOfMaterialsOrder
	filter  func(*BillOfMaterialsQuery) (*BillOfMaterialsQuery, error)
}

func newBillOfMaterialsPager(opts []BillOfMaterialsPaginateOption, reverse bool) (*billofmaterialsPager, error) {
	pager := &billofmaterialsPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBillOfMaterialsOrder
	}
	return pager, nil
}

func (p *billofmaterialsPager) applyFilter(query *BillOfMaterialsQuery) (*BillOfMaterialsQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *billofmaterialsPager) toCursor(bom *BillOfMaterials) Cursor {
	return p.order.Field.toCursor(bom)
}

func (p *billofmaterialsPager) applyCursors(query *BillOfMaterialsQuery, after, before *Cursor) (*BillOfMaterialsQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBillOfMaterialsOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *billofmaterialsPager) applyOrder(query *BillOfMaterialsQuery) *BillOfMaterialsQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBillOfMaterialsOrder.Field {
		query = query.Order(DefaultBillOfMaterialsOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *billofmaterialsPager) orderExpr(query *BillOfMaterialsQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBillOfMaterialsOrder.Field {
			b.Comma().Ident(DefaultBillOfMaterialsOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to BillOfMaterials.
func (bom *BillOfMaterialsQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BillOfMaterialsPaginateOption,
) (*BillOfMaterialsConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBillOfMaterialsPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if bom, err = pager.applyFilter(bom); err != nil {
		return nil, err
	}
	conn := &BillOfMaterialsConnection{Edges: []*BillOfMaterialsEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = bom.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if bom, err = pager.applyCursors(bom, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		bom.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := bom.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	bom = pager.applyOrder(bom)
	nodes, err := bom.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BillOfMaterialsOrderField defines the ordering field of BillOfMaterials.
type BillOfMaterialsOrderField struct {
	// Value extracts the ordering value from the given BillOfMaterials.
	Value    func(*BillOfMaterials) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) billofmaterials.OrderOption
	toCursor func(*BillOfMaterials) Cursor
}

// BillOfMaterialsOrder defines the ordering of BillOfMaterials.
type BillOfMaterialsOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *BillOfMaterialsOrderField `json:"field"`
}

// DefaultBillOfMaterialsOrder is the default ordering of BillOfMaterials.
var DefaultBillOfMaterialsOrder = &BillOfMaterialsOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BillOfMaterialsOrderField{
		Value: func(bom *BillOfMaterials) (ent.Value, error) {
			return bom.ID, nil
		},
		column: billofmaterials.FieldID,
		toTerm: billofmaterials.ByID,
		toCursor: func(bom *BillOfMaterials) Cursor {
			return Cursor{ID: bom.ID}
		},
	},
}

// ToEdge converts BillOfMaterials into BillOfMaterialsEdge.
func (bom *BillOfMaterials) ToEdge(order *BillOfMaterialsOrder) *BillOfMaterialsEdge {
	if order == nil {
		order = DefaultBillOfMaterialsOrder
	}
	return &BillOfMaterialsEdge{
		Node:   bom,
		Cursor: order.Field.toCursor(bom),
	}
}

// BuilderEdge is the edge representation of Builder.
type BuilderEdge struct {
	Node   *Builder `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// BuilderConnection is the connection containing edges to Builder.
type BuilderConnection struct {
	Edges      []*BuilderEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *BuilderConnection) build(nodes []*Builder, pager *builderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Builder
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Builder {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Builder {
			return nodes[i]
		}
	}
	c.Edges = make([]*BuilderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BuilderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BuilderPaginateOption enables pagination customization.
type BuilderPaginateOption func(*builderPager) error

// WithBuilderOrder configures pagination ordering.
func WithBuilderOrder(order *BuilderOrder) BuilderPaginateOption {
	if order == nil {
		order = DefaultBuilderOrder
	}
	o := *order
	return func(pager *builderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBuilderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBuilderFilter configures pagination filter.
func WithBuilderFilter(filter func(*BuilderQuery) (*BuilderQuery, error)) BuilderPaginateOption {
	return func(pager *builderPager) error {
		if filter == nil {
			return errors.New("BuilderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type builderPager struct {
	reverse bool
	order   *BuilderOrder
	filter  func(*BuilderQuery) (*BuilderQuery, error)
}

func newBuilderPager(opts []BuilderPaginateOption, reverse bool) (*builderPager, error) {
	pager := &builderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBuilderOrder
	}
	return pager, nil
}

func (p *builderPager) applyFilter(query *BuilderQuery) (*BuilderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *builderPager) toCursor(b *Builder) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *builderPager) applyCursors(query *BuilderQuery, after, before *Cursor) (*BuilderQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBuilderOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *builderPager) applyOrder(query *BuilderQuery) *BuilderQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBuilderOrder.Field {
		query = query.Order(DefaultBuilderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *builderPager) orderExpr(query *BuilderQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBuilderOrder.Field {
			b.Comma().Ident(DefaultBuilderOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Builder.
func (b *BuilderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BuilderPaginateOption,
) (*BuilderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBuilderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BuilderConnection{Edges: []*BuilderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = b.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if b, err = pager.applyCursors(b, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	b = pager.applyOrder(b)
	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BuilderOrderField defines the ordering field of Builder.
type BuilderOrderField struct {
	// Value extracts the ordering value from the given Builder.
	Value    func(*Builder) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) builder.OrderOption
	toCursor func(*Builder) Cursor
}

// BuilderOrder defines the ordering of Builder.
type BuilderOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *BuilderOrderField `json:"field"`
}

// DefaultBuilderOrder is the default ordering of Builder.
var DefaultBuilderOrder = &BuilderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BuilderOrderField{
		Value: func(b *Builder) (ent.Value, error) {
			return b.ID, nil
		},
		column: builder.FieldID,
		toTerm: builder.ByID,
		toCursor: func(b *Builder) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Builder into BuilderEdge.
func (b *Builder) ToEdge(order *BuilderOrder) *BuilderEdge {
	if order == nil {
		order = DefaultBuilderOrder
	}
	return &BuilderEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// CertificationEdge is the edge representation of Certification.
type CertificationEdge struct {
	Node   *Certification `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// CertificationConnection is the connection containing edges to Certification.
type CertificationConnection struct {
	Edges      []*CertificationEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *CertificationConnection) build(nodes []*Certification, pager *certificationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Certification
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Certification {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Certification {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertificationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertificationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertificationPaginateOption enables pagination customization.
type CertificationPaginateOption func(*certificationPager) error

// WithCertificationOrder configures pagination ordering.
func WithCertificationOrder(order *CertificationOrder) CertificationPaginateOption {
	if order == nil {
		order = DefaultCertificationOrder
	}
	o := *order
	return func(pager *certificationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertificationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertificationFilter configures pagination filter.
func WithCertificationFilter(filter func(*CertificationQuery) (*CertificationQuery, error)) CertificationPaginateOption {
	return func(pager *certificationPager) error {
		if filter == nil {
			return errors.New("CertificationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certificationPager struct {
	reverse bool
	order   *CertificationOrder
	filter  func(*CertificationQuery) (*CertificationQuery, error)
}

func newCertificationPager(opts []CertificationPaginateOption, reverse bool) (*certificationPager, error) {
	pager := &certificationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertificationOrder
	}
	return pager, nil
}

func (p *certificationPager) applyFilter(query *CertificationQuery) (*CertificationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certificationPager) toCursor(c *Certification) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *certificationPager) applyCursors(query *CertificationQuery, after, before *Cursor) (*CertificationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertificationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certificationPager) applyOrder(query *CertificationQuery) *CertificationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertificationOrder.Field {
		query = query.Order(DefaultCertificationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certificationPager) orderExpr(query *CertificationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertificationOrder.Field {
			b.Comma().Ident(DefaultCertificationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Certification.
func (c *CertificationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertificationPaginateOption,
) (*CertificationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertificationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CertificationConnection{Edges: []*CertificationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertificationOrderField defines the ordering field of Certification.
type CertificationOrderField struct {
	// Value extracts the ordering value from the given Certification.
	Value    func(*Certification) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certification.OrderOption
	toCursor func(*Certification) Cursor
}

// CertificationOrder defines the ordering of Certification.
type CertificationOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *CertificationOrderField `json:"field"`
}

// DefaultCertificationOrder is the default ordering of Certification.
var DefaultCertificationOrder = &CertificationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertificationOrderField{
		Value: func(c *Certification) (ent.Value, error) {
			return c.ID, nil
		},
		column: certification.FieldID,
		toTerm: certification.ByID,
		toCursor: func(c *Certification) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Certification into CertificationEdge.
func (c *Certification) ToEdge(order *CertificationOrder) *CertificationEdge {
	if order == nil {
		order = DefaultCertificationOrder
	}
	return &CertificationEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CertifyLegalEdge is the edge representation of CertifyLegal.
type CertifyLegalEdge struct {
	Node   *CertifyLegal `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// CertifyLegalConnection is the connection containing edges to CertifyLegal.
type CertifyLegalConnection struct {
	Edges      []*CertifyLegalEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *CertifyLegalConnection) build(nodes []*CertifyLegal, pager *certifylegalPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CertifyLegal
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CertifyLegal {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CertifyLegal {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertifyLegalEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertifyLegalEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertifyLegalPaginateOption enables pagination customization.
type CertifyLegalPaginateOption func(*certifylegalPager) error

// WithCertifyLegalOrder configures pagination ordering.
func WithCertifyLegalOrder(order *CertifyLegalOrder) CertifyLegalPaginateOption {
	if order == nil {
		order = DefaultCertifyLegalOrder
	}
	o := *order
	return func(pager *certifylegalPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertifyLegalOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertifyLegalFilter configures pagination filter.
func WithCertifyLegalFilter(filter func(*CertifyLegalQuery) (*CertifyLegalQuery, error)) CertifyLegalPaginateOption {
	return func(pager *certifylegalPager) error {
		if filter == nil {
			return errors.New("CertifyLegalQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certifylegalPager struct {
	reverse bool
	order   *CertifyLegalOrder
	filter  func(*CertifyLegalQuery) (*CertifyLegalQuery, error)
}

func newCertifyLegalPager(opts []CertifyLegalPaginateOption, reverse bool) (*certifylegalPager, error) {
	pager := &certifylegalPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertifyLegalOrder
	}
	return pager, nil
}

func (p *certifylegalPager) applyFilter(query *CertifyLegalQuery) (*CertifyLegalQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certifylegalPager) toCursor(cl *CertifyLegal) Cursor {
	return p.order.Field.toCursor(cl)
}

func (p *certifylegalPager) applyCursors(query *CertifyLegalQuery, after, before *Cursor) (*CertifyLegalQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertifyLegalOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certifylegalPager) applyOrder(query *CertifyLegalQuery) *CertifyLegalQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertifyLegalOrder.Field {
		query = query.Order(DefaultCertifyLegalOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certifylegalPager) orderExpr(query *CertifyLegalQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertifyLegalOrder.Field {
			b.Comma().Ident(DefaultCertifyLegalOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CertifyLegal.
func (cl *CertifyLegalQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertifyLegalPaginateOption,
) (*CertifyLegalConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertifyLegalPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cl, err = pager.applyFilter(cl); err != nil {
		return nil, err
	}
	conn := &CertifyLegalConnection{Edges: []*CertifyLegalEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = cl.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cl, err = pager.applyCursors(cl, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		cl.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cl.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cl = pager.applyOrder(cl)
	nodes, err := cl.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertifyLegalOrderField defines the ordering field of CertifyLegal.
type CertifyLegalOrderField struct {
	// Value extracts the ordering value from the given CertifyLegal.
	Value    func(*CertifyLegal) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certifylegal.OrderOption
	toCursor func(*CertifyLegal) Cursor
}

// CertifyLegalOrder defines the ordering of CertifyLegal.
type CertifyLegalOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *CertifyLegalOrderField `json:"field"`
}

// DefaultCertifyLegalOrder is the default ordering of CertifyLegal.
var DefaultCertifyLegalOrder = &CertifyLegalOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertifyLegalOrderField{
		Value: func(cl *CertifyLegal) (ent.Value, error) {
			return cl.ID, nil
		},
		column: certifylegal.FieldID,
		toTerm: certifylegal.ByID,
		toCursor: func(cl *CertifyLegal) Cursor {
			return Cursor{ID: cl.ID}
		},
	},
}

// ToEdge converts CertifyLegal into CertifyLegalEdge.
func (cl *CertifyLegal) ToEdge(order *CertifyLegalOrder) *CertifyLegalEdge {
	if order == nil {
		order = DefaultCertifyLegalOrder
	}
	return &CertifyLegalEdge{
		Node:   cl,
		Cursor: order.Field.toCursor(cl),
	}
}

// CertifyScorecardEdge is the edge representation of CertifyScorecard.
type CertifyScorecardEdge struct {
	Node   *CertifyScorecard `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// CertifyScorecardConnection is the connection containing edges to CertifyScorecard.
type CertifyScorecardConnection struct {
	Edges      []*CertifyScorecardEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *CertifyScorecardConnection) build(nodes []*CertifyScorecard, pager *certifyscorecardPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CertifyScorecard
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CertifyScorecard {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CertifyScorecard {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertifyScorecardEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertifyScorecardEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertifyScorecardPaginateOption enables pagination customization.
type CertifyScorecardPaginateOption func(*certifyscorecardPager) error

// WithCertifyScorecardOrder configures pagination ordering.
func WithCertifyScorecardOrder(order *CertifyScorecardOrder) CertifyScorecardPaginateOption {
	if order == nil {
		order = DefaultCertifyScorecardOrder
	}
	o := *order
	return func(pager *certifyscorecardPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertifyScorecardOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertifyScorecardFilter configures pagination filter.
func WithCertifyScorecardFilter(filter func(*CertifyScorecardQuery) (*CertifyScorecardQuery, error)) CertifyScorecardPaginateOption {
	return func(pager *certifyscorecardPager) error {
		if filter == nil {
			return errors.New("CertifyScorecardQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certifyscorecardPager struct {
	reverse bool
	order   *CertifyScorecardOrder
	filter  func(*CertifyScorecardQuery) (*CertifyScorecardQuery, error)
}

func newCertifyScorecardPager(opts []CertifyScorecardPaginateOption, reverse bool) (*certifyscorecardPager, error) {
	pager := &certifyscorecardPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertifyScorecardOrder
	}
	return pager, nil
}

func (p *certifyscorecardPager) applyFilter(query *CertifyScorecardQuery) (*CertifyScorecardQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certifyscorecardPager) toCursor(cs *CertifyScorecard) Cursor {
	return p.order.Field.toCursor(cs)
}

func (p *certifyscorecardPager) applyCursors(query *CertifyScorecardQuery, after, before *Cursor) (*CertifyScorecardQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertifyScorecardOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certifyscorecardPager) applyOrder(query *CertifyScorecardQuery) *CertifyScorecardQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertifyScorecardOrder.Field {
		query = query.Order(DefaultCertifyScorecardOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certifyscorecardPager) orderExpr(query *CertifyScorecardQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertifyScorecardOrder.Field {
			b.Comma().Ident(DefaultCertifyScorecardOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CertifyScorecard.
func (cs *CertifyScorecardQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertifyScorecardPaginateOption,
) (*CertifyScorecardConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertifyScorecardPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cs, err = pager.applyFilter(cs); err != nil {
		return nil, err
	}
	conn := &CertifyScorecardConnection{Edges: []*CertifyScorecardEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = cs.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cs, err = pager.applyCursors(cs, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		cs.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cs.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cs = pager.applyOrder(cs)
	nodes, err := cs.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertifyScorecardOrderField defines the ordering field of CertifyScorecard.
type CertifyScorecardOrderField struct {
	// Value extracts the ordering value from the given CertifyScorecard.
	Value    func(*CertifyScorecard) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certifyscorecard.OrderOption
	toCursor func(*CertifyScorecard) Cursor
}

// CertifyScorecardOrder defines the ordering of CertifyScorecard.
type CertifyScorecardOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *CertifyScorecardOrderField `json:"field"`
}

// DefaultCertifyScorecardOrder is the default ordering of CertifyScorecard.
var DefaultCertifyScorecardOrder = &CertifyScorecardOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertifyScorecardOrderField{
		Value: func(cs *CertifyScorecard) (ent.Value, error) {
			return cs.ID, nil
		},
		column: certifyscorecard.FieldID,
		toTerm: certifyscorecard.ByID,
		toCursor: func(cs *CertifyScorecard) Cursor {
			return Cursor{ID: cs.ID}
		},
	},
}

// ToEdge converts CertifyScorecard into CertifyScorecardEdge.
func (cs *CertifyScorecard) ToEdge(order *CertifyScorecardOrder) *CertifyScorecardEdge {
	if order == nil {
		order = DefaultCertifyScorecardOrder
	}
	return &CertifyScorecardEdge{
		Node:   cs,
		Cursor: order.Field.toCursor(cs),
	}
}

// CertifyVexEdge is the edge representation of CertifyVex.
type CertifyVexEdge struct {
	Node   *CertifyVex `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// CertifyVexConnection is the connection containing edges to CertifyVex.
type CertifyVexConnection struct {
	Edges      []*CertifyVexEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *CertifyVexConnection) build(nodes []*CertifyVex, pager *certifyvexPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CertifyVex
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CertifyVex {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CertifyVex {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertifyVexEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertifyVexEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertifyVexPaginateOption enables pagination customization.
type CertifyVexPaginateOption func(*certifyvexPager) error

// WithCertifyVexOrder configures pagination ordering.
func WithCertifyVexOrder(order *CertifyVexOrder) CertifyVexPaginateOption {
	if order == nil {
		order = DefaultCertifyVexOrder
	}
	o := *order
	return func(pager *certifyvexPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertifyVexOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertifyVexFilter configures pagination filter.
func WithCertifyVexFilter(filter func(*CertifyVexQuery) (*CertifyVexQuery, error)) CertifyVexPaginateOption {
	return func(pager *certifyvexPager) error {
		if filter == nil {
			return errors.New("CertifyVexQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certifyvexPager struct {
	reverse bool
	order   *CertifyVexOrder
	filter  func(*CertifyVexQuery) (*CertifyVexQuery, error)
}

func newCertifyVexPager(opts []CertifyVexPaginateOption, reverse bool) (*certifyvexPager, error) {
	pager := &certifyvexPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertifyVexOrder
	}
	return pager, nil
}

func (p *certifyvexPager) applyFilter(query *CertifyVexQuery) (*CertifyVexQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certifyvexPager) toCursor(cv *CertifyVex) Cursor {
	return p.order.Field.toCursor(cv)
}

func (p *certifyvexPager) applyCursors(query *CertifyVexQuery, after, before *Cursor) (*CertifyVexQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertifyVexOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certifyvexPager) applyOrder(query *CertifyVexQuery) *CertifyVexQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertifyVexOrder.Field {
		query = query.Order(DefaultCertifyVexOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certifyvexPager) orderExpr(query *CertifyVexQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertifyVexOrder.Field {
			b.Comma().Ident(DefaultCertifyVexOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CertifyVex.
func (cv *CertifyVexQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertifyVexPaginateOption,
) (*CertifyVexConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertifyVexPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cv, err = pager.applyFilter(cv); err != nil {
		return nil, err
	}
	conn := &CertifyVexConnection{Edges: []*CertifyVexEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = cv.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cv, err = pager.applyCursors(cv, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		cv.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cv.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cv = pager.applyOrder(cv)
	nodes, err := cv.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertifyVexOrderField defines the ordering field of CertifyVex.
type CertifyVexOrderField struct {
	// Value extracts the ordering value from the given CertifyVex.
	Value    func(*CertifyVex) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certifyvex.OrderOption
	toCursor func(*CertifyVex) Cursor
}

// CertifyVexOrder defines the ordering of CertifyVex.
type CertifyVexOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *CertifyVexOrderField `json:"field"`
}

// DefaultCertifyVexOrder is the default ordering of CertifyVex.
var DefaultCertifyVexOrder = &CertifyVexOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertifyVexOrderField{
		Value: func(cv *CertifyVex) (ent.Value, error) {
			return cv.ID, nil
		},
		column: certifyvex.FieldID,
		toTerm: certifyvex.ByID,
		toCursor: func(cv *CertifyVex) Cursor {
			return Cursor{ID: cv.ID}
		},
	},
}

// ToEdge converts CertifyVex into CertifyVexEdge.
func (cv *CertifyVex) ToEdge(order *CertifyVexOrder) *CertifyVexEdge {
	if order == nil {
		order = DefaultCertifyVexOrder
	}
	return &CertifyVexEdge{
		Node:   cv,
		Cursor: order.Field.toCursor(cv),
	}
}

// CertifyVulnEdge is the edge representation of CertifyVuln.
type CertifyVulnEdge struct {
	Node   *CertifyVuln `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// CertifyVulnConnection is the connection containing edges to CertifyVuln.
type CertifyVulnConnection struct {
	Edges      []*CertifyVulnEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *CertifyVulnConnection) build(nodes []*CertifyVuln, pager *certifyvulnPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CertifyVuln
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CertifyVuln {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CertifyVuln {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertifyVulnEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertifyVulnEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertifyVulnPaginateOption enables pagination customization.
type CertifyVulnPaginateOption func(*certifyvulnPager) error

// WithCertifyVulnOrder configures pagination ordering.
func WithCertifyVulnOrder(order *CertifyVulnOrder) CertifyVulnPaginateOption {
	if order == nil {
		order = DefaultCertifyVulnOrder
	}
	o := *order
	return func(pager *certifyvulnPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertifyVulnOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertifyVulnFilter configures pagination filter.
func WithCertifyVulnFilter(filter func(*CertifyVulnQuery) (*CertifyVulnQuery, error)) CertifyVulnPaginateOption {
	return func(pager *certifyvulnPager) error {
		if filter == nil {
			return errors.New("CertifyVulnQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certifyvulnPager struct {
	reverse bool
	order   *CertifyVulnOrder
	filter  func(*CertifyVulnQuery) (*CertifyVulnQuery, error)
}

func newCertifyVulnPager(opts []CertifyVulnPaginateOption, reverse bool) (*certifyvulnPager, error) {
	pager := &certifyvulnPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertifyVulnOrder
	}
	return pager, nil
}

func (p *certifyvulnPager) applyFilter(query *CertifyVulnQuery) (*CertifyVulnQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certifyvulnPager) toCursor(cv *CertifyVuln) Cursor {
	return p.order.Field.toCursor(cv)
}

func (p *certifyvulnPager) applyCursors(query *CertifyVulnQuery, after, before *Cursor) (*CertifyVulnQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertifyVulnOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certifyvulnPager) applyOrder(query *CertifyVulnQuery) *CertifyVulnQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertifyVulnOrder.Field {
		query = query.Order(DefaultCertifyVulnOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certifyvulnPager) orderExpr(query *CertifyVulnQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertifyVulnOrder.Field {
			b.Comma().Ident(DefaultCertifyVulnOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CertifyVuln.
func (cv *CertifyVulnQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertifyVulnPaginateOption,
) (*CertifyVulnConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertifyVulnPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cv, err = pager.applyFilter(cv); err != nil {
		return nil, err
	}
	conn := &CertifyVulnConnection{Edges: []*CertifyVulnEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = cv.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cv, err = pager.applyCursors(cv, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		cv.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cv.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cv = pager.applyOrder(cv)
	nodes, err := cv.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertifyVulnOrderField defines the ordering field of CertifyVuln.
type CertifyVulnOrderField struct {
	// Value extracts the ordering value from the given CertifyVuln.
	Value    func(*CertifyVuln) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certifyvuln.OrderOption
	toCursor func(*CertifyVuln) Cursor
}

// CertifyVulnOrder defines the ordering of CertifyVuln.
type CertifyVulnOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *CertifyVulnOrderField `json:"field"`
}

// DefaultCertifyVulnOrder is the default ordering of CertifyVuln.
var DefaultCertifyVulnOrder = &CertifyVulnOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertifyVulnOrderField{
		Value: func(cv *CertifyVuln) (ent.Value, error) {
			return cv.ID, nil
		},
		column: certifyvuln.FieldID,
		toTerm: certifyvuln.ByID,
		toCursor: func(cv *CertifyVuln) Cursor {
			return Cursor{ID: cv.ID}
		},
	},
}

// ToEdge converts CertifyVuln into CertifyVulnEdge.
func (cv *CertifyVuln) ToEdge(order *CertifyVulnOrder) *CertifyVulnEdge {
	if order == nil {
		order = DefaultCertifyVulnOrder
	}
	return &CertifyVulnEdge{
		Node:   cv,
		Cursor: order.Field.toCursor(cv),
	}
}

// DependencyEdge is the edge representation of Dependency.
type DependencyEdge struct {
	Node   *Dependency `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// DependencyConnection is the connection containing edges to Dependency.
type DependencyConnection struct {
	Edges      []*DependencyEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *DependencyConnection) build(nodes []*Dependency, pager *dependencyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Dependency
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Dependency {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Dependency {
			return nodes[i]
		}
	}
	c.Edges = make([]*DependencyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DependencyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DependencyPaginateOption enables pagination customization.
type DependencyPaginateOption func(*dependencyPager) error

// WithDependencyOrder configures pagination ordering.
func WithDependencyOrder(order *DependencyOrder) DependencyPaginateOption {
	if order == nil {
		order = DefaultDependencyOrder
	}
	o := *order
	return func(pager *dependencyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDependencyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDependencyFilter configures pagination filter.
func WithDependencyFilter(filter func(*DependencyQuery) (*DependencyQuery, error)) DependencyPaginateOption {
	return func(pager *dependencyPager) error {
		if filter == nil {
			return errors.New("DependencyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dependencyPager struct {
	reverse bool
	order   *DependencyOrder
	filter  func(*DependencyQuery) (*DependencyQuery, error)
}

func newDependencyPager(opts []DependencyPaginateOption, reverse bool) (*dependencyPager, error) {
	pager := &dependencyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDependencyOrder
	}
	return pager, nil
}

func (p *dependencyPager) applyFilter(query *DependencyQuery) (*DependencyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dependencyPager) toCursor(d *Dependency) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *dependencyPager) applyCursors(query *DependencyQuery, after, before *Cursor) (*DependencyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDependencyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *dependencyPager) applyOrder(query *DependencyQuery) *DependencyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDependencyOrder.Field {
		query = query.Order(DefaultDependencyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *dependencyPager) orderExpr(query *DependencyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDependencyOrder.Field {
			b.Comma().Ident(DefaultDependencyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Dependency.
func (d *DependencyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DependencyPaginateOption,
) (*DependencyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDependencyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}
	conn := &DependencyConnection{Edges: []*DependencyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = d.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if d, err = pager.applyCursors(d, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		d.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := d.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	d = pager.applyOrder(d)
	nodes, err := d.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// DependencyOrderField defines the ordering field of Dependency.
type DependencyOrderField struct {
	// Value extracts the ordering value from the given Dependency.
	Value    func(*Dependency) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) dependency.OrderOption
	toCursor func(*Dependency) Cursor
}

// DependencyOrder defines the ordering of Dependency.
type DependencyOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *DependencyOrderField `json:"field"`
}

// DefaultDependencyOrder is the default ordering of Dependency.
var DefaultDependencyOrder = &DependencyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DependencyOrderField{
		Value: func(d *Dependency) (ent.Value, error) {
			return d.ID, nil
		},
		column: dependency.FieldID,
		toTerm: dependency.ByID,
		toCursor: func(d *Dependency) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Dependency into DependencyEdge.
func (d *Dependency) ToEdge(order *DependencyOrder) *DependencyEdge {
	if order == nil {
		order = DefaultDependencyOrder
	}
	return &DependencyEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// HasSourceAtEdge is the edge representation of HasSourceAt.
type HasSourceAtEdge struct {
	Node   *HasSourceAt `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// HasSourceAtConnection is the connection containing edges to HasSourceAt.
type HasSourceAtConnection struct {
	Edges      []*HasSourceAtEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *HasSourceAtConnection) build(nodes []*HasSourceAt, pager *hassourceatPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *HasSourceAt
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *HasSourceAt {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *HasSourceAt {
			return nodes[i]
		}
	}
	c.Edges = make([]*HasSourceAtEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &HasSourceAtEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// HasSourceAtPaginateOption enables pagination customization.
type HasSourceAtPaginateOption func(*hassourceatPager) error

// WithHasSourceAtOrder configures pagination ordering.
func WithHasSourceAtOrder(order *HasSourceAtOrder) HasSourceAtPaginateOption {
	if order == nil {
		order = DefaultHasSourceAtOrder
	}
	o := *order
	return func(pager *hassourceatPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHasSourceAtOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHasSourceAtFilter configures pagination filter.
func WithHasSourceAtFilter(filter func(*HasSourceAtQuery) (*HasSourceAtQuery, error)) HasSourceAtPaginateOption {
	return func(pager *hassourceatPager) error {
		if filter == nil {
			return errors.New("HasSourceAtQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type hassourceatPager struct {
	reverse bool
	order   *HasSourceAtOrder
	filter  func(*HasSourceAtQuery) (*HasSourceAtQuery, error)
}

func newHasSourceAtPager(opts []HasSourceAtPaginateOption, reverse bool) (*hassourceatPager, error) {
	pager := &hassourceatPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHasSourceAtOrder
	}
	return pager, nil
}

func (p *hassourceatPager) applyFilter(query *HasSourceAtQuery) (*HasSourceAtQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *hassourceatPager) toCursor(hsa *HasSourceAt) Cursor {
	return p.order.Field.toCursor(hsa)
}

func (p *hassourceatPager) applyCursors(query *HasSourceAtQuery, after, before *Cursor) (*HasSourceAtQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultHasSourceAtOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *hassourceatPager) applyOrder(query *HasSourceAtQuery) *HasSourceAtQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultHasSourceAtOrder.Field {
		query = query.Order(DefaultHasSourceAtOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *hassourceatPager) orderExpr(query *HasSourceAtQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultHasSourceAtOrder.Field {
			b.Comma().Ident(DefaultHasSourceAtOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to HasSourceAt.
func (hsa *HasSourceAtQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HasSourceAtPaginateOption,
) (*HasSourceAtConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHasSourceAtPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if hsa, err = pager.applyFilter(hsa); err != nil {
		return nil, err
	}
	conn := &HasSourceAtConnection{Edges: []*HasSourceAtEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = hsa.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if hsa, err = pager.applyCursors(hsa, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		hsa.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := hsa.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	hsa = pager.applyOrder(hsa)
	nodes, err := hsa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// HasSourceAtOrderField defines the ordering field of HasSourceAt.
type HasSourceAtOrderField struct {
	// Value extracts the ordering value from the given HasSourceAt.
	Value    func(*HasSourceAt) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) hassourceat.OrderOption
	toCursor func(*HasSourceAt) Cursor
}

// HasSourceAtOrder defines the ordering of HasSourceAt.
type HasSourceAtOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *HasSourceAtOrderField `json:"field"`
}

// DefaultHasSourceAtOrder is the default ordering of HasSourceAt.
var DefaultHasSourceAtOrder = &HasSourceAtOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &HasSourceAtOrderField{
		Value: func(hsa *HasSourceAt) (ent.Value, error) {
			return hsa.ID, nil
		},
		column: hassourceat.FieldID,
		toTerm: hassourceat.ByID,
		toCursor: func(hsa *HasSourceAt) Cursor {
			return Cursor{ID: hsa.ID}
		},
	},
}

// ToEdge converts HasSourceAt into HasSourceAtEdge.
func (hsa *HasSourceAt) ToEdge(order *HasSourceAtOrder) *HasSourceAtEdge {
	if order == nil {
		order = DefaultHasSourceAtOrder
	}
	return &HasSourceAtEdge{
		Node:   hsa,
		Cursor: order.Field.toCursor(hsa),
	}
}

// HashEqualEdge is the edge representation of HashEqual.
type HashEqualEdge struct {
	Node   *HashEqual `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// HashEqualConnection is the connection containing edges to HashEqual.
type HashEqualConnection struct {
	Edges      []*HashEqualEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *HashEqualConnection) build(nodes []*HashEqual, pager *hashequalPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *HashEqual
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *HashEqual {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *HashEqual {
			return nodes[i]
		}
	}
	c.Edges = make([]*HashEqualEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &HashEqualEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// HashEqualPaginateOption enables pagination customization.
type HashEqualPaginateOption func(*hashequalPager) error

// WithHashEqualOrder configures pagination ordering.
func WithHashEqualOrder(order *HashEqualOrder) HashEqualPaginateOption {
	if order == nil {
		order = DefaultHashEqualOrder
	}
	o := *order
	return func(pager *hashequalPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHashEqualOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHashEqualFilter configures pagination filter.
func WithHashEqualFilter(filter func(*HashEqualQuery) (*HashEqualQuery, error)) HashEqualPaginateOption {
	return func(pager *hashequalPager) error {
		if filter == nil {
			return errors.New("HashEqualQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type hashequalPager struct {
	reverse bool
	order   *HashEqualOrder
	filter  func(*HashEqualQuery) (*HashEqualQuery, error)
}

func newHashEqualPager(opts []HashEqualPaginateOption, reverse bool) (*hashequalPager, error) {
	pager := &hashequalPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHashEqualOrder
	}
	return pager, nil
}

func (p *hashequalPager) applyFilter(query *HashEqualQuery) (*HashEqualQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *hashequalPager) toCursor(he *HashEqual) Cursor {
	return p.order.Field.toCursor(he)
}

func (p *hashequalPager) applyCursors(query *HashEqualQuery, after, before *Cursor) (*HashEqualQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultHashEqualOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *hashequalPager) applyOrder(query *HashEqualQuery) *HashEqualQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultHashEqualOrder.Field {
		query = query.Order(DefaultHashEqualOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *hashequalPager) orderExpr(query *HashEqualQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultHashEqualOrder.Field {
			b.Comma().Ident(DefaultHashEqualOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to HashEqual.
func (he *HashEqualQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HashEqualPaginateOption,
) (*HashEqualConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHashEqualPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if he, err = pager.applyFilter(he); err != nil {
		return nil, err
	}
	conn := &HashEqualConnection{Edges: []*HashEqualEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = he.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if he, err = pager.applyCursors(he, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		he.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := he.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	he = pager.applyOrder(he)
	nodes, err := he.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// HashEqualOrderField defines the ordering field of HashEqual.
type HashEqualOrderField struct {
	// Value extracts the ordering value from the given HashEqual.
	Value    func(*HashEqual) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) hashequal.OrderOption
	toCursor func(*HashEqual) Cursor
}

// HashEqualOrder defines the ordering of HashEqual.
type HashEqualOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *HashEqualOrderField `json:"field"`
}

// DefaultHashEqualOrder is the default ordering of HashEqual.
var DefaultHashEqualOrder = &HashEqualOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &HashEqualOrderField{
		Value: func(he *HashEqual) (ent.Value, error) {
			return he.ID, nil
		},
		column: hashequal.FieldID,
		toTerm: hashequal.ByID,
		toCursor: func(he *HashEqual) Cursor {
			return Cursor{ID: he.ID}
		},
	},
}

// ToEdge converts HashEqual into HashEqualEdge.
func (he *HashEqual) ToEdge(order *HashEqualOrder) *HashEqualEdge {
	if order == nil {
		order = DefaultHashEqualOrder
	}
	return &HashEqualEdge{
		Node:   he,
		Cursor: order.Field.toCursor(he),
	}
}

// IsVulnerabilityEdge is the edge representation of IsVulnerability.
type IsVulnerabilityEdge struct {
	Node   *IsVulnerability `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// IsVulnerabilityConnection is the connection containing edges to IsVulnerability.
type IsVulnerabilityConnection struct {
	Edges      []*IsVulnerabilityEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *IsVulnerabilityConnection) build(nodes []*IsVulnerability, pager *isvulnerabilityPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *IsVulnerability
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *IsVulnerability {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *IsVulnerability {
			return nodes[i]
		}
	}
	c.Edges = make([]*IsVulnerabilityEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &IsVulnerabilityEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// IsVulnerabilityPaginateOption enables pagination customization.
type IsVulnerabilityPaginateOption func(*isvulnerabilityPager) error

// WithIsVulnerabilityOrder configures pagination ordering.
func WithIsVulnerabilityOrder(order *IsVulnerabilityOrder) IsVulnerabilityPaginateOption {
	if order == nil {
		order = DefaultIsVulnerabilityOrder
	}
	o := *order
	return func(pager *isvulnerabilityPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultIsVulnerabilityOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithIsVulnerabilityFilter configures pagination filter.
func WithIsVulnerabilityFilter(filter func(*IsVulnerabilityQuery) (*IsVulnerabilityQuery, error)) IsVulnerabilityPaginateOption {
	return func(pager *isvulnerabilityPager) error {
		if filter == nil {
			return errors.New("IsVulnerabilityQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type isvulnerabilityPager struct {
	reverse bool
	order   *IsVulnerabilityOrder
	filter  func(*IsVulnerabilityQuery) (*IsVulnerabilityQuery, error)
}

func newIsVulnerabilityPager(opts []IsVulnerabilityPaginateOption, reverse bool) (*isvulnerabilityPager, error) {
	pager := &isvulnerabilityPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultIsVulnerabilityOrder
	}
	return pager, nil
}

func (p *isvulnerabilityPager) applyFilter(query *IsVulnerabilityQuery) (*IsVulnerabilityQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *isvulnerabilityPager) toCursor(iv *IsVulnerability) Cursor {
	return p.order.Field.toCursor(iv)
}

func (p *isvulnerabilityPager) applyCursors(query *IsVulnerabilityQuery, after, before *Cursor) (*IsVulnerabilityQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultIsVulnerabilityOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *isvulnerabilityPager) applyOrder(query *IsVulnerabilityQuery) *IsVulnerabilityQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultIsVulnerabilityOrder.Field {
		query = query.Order(DefaultIsVulnerabilityOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *isvulnerabilityPager) orderExpr(query *IsVulnerabilityQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultIsVulnerabilityOrder.Field {
			b.Comma().Ident(DefaultIsVulnerabilityOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to IsVulnerability.
func (iv *IsVulnerabilityQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...IsVulnerabilityPaginateOption,
) (*IsVulnerabilityConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newIsVulnerabilityPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if iv, err = pager.applyFilter(iv); err != nil {
		return nil, err
	}
	conn := &IsVulnerabilityConnection{Edges: []*IsVulnerabilityEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = iv.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if iv, err = pager.applyCursors(iv, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		iv.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := iv.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	iv = pager.applyOrder(iv)
	nodes, err := iv.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// IsVulnerabilityOrderField defines the ordering field of IsVulnerability.
type IsVulnerabilityOrderField struct {
	// Value extracts the ordering value from the given IsVulnerability.
	Value    func(*IsVulnerability) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) isvulnerability.OrderOption
	toCursor func(*IsVulnerability) Cursor
}

// IsVulnerabilityOrder defines the ordering of IsVulnerability.
type IsVulnerabilityOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *IsVulnerabilityOrderField `json:"field"`
}

// DefaultIsVulnerabilityOrder is the default ordering of IsVulnerability.
var DefaultIsVulnerabilityOrder = &IsVulnerabilityOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &IsVulnerabilityOrderField{
		Value: func(iv *IsVulnerability) (ent.Value, error) {
			return iv.ID, nil
		},
		column: isvulnerability.FieldID,
		toTerm: isvulnerability.ByID,
		toCursor: func(iv *IsVulnerability) Cursor {
			return Cursor{ID: iv.ID}
		},
	},
}

// ToEdge converts IsVulnerability into IsVulnerabilityEdge.
func (iv *IsVulnerability) ToEdge(order *IsVulnerabilityOrder) *IsVulnerabilityEdge {
	if order == nil {
		order = DefaultIsVulnerabilityOrder
	}
	return &IsVulnerabilityEdge{
		Node:   iv,
		Cursor: order.Field.toCursor(iv),
	}
}

// LicenseEdge is the edge representation of License.
type LicenseEdge struct {
	Node   *License `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// LicenseConnection is the connection containing edges to License.
type LicenseConnection struct {
	Edges      []*LicenseEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *LicenseConnection) build(nodes []*License, pager *licensePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *License
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *License {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *License {
			return nodes[i]
		}
	}
	c.Edges = make([]*LicenseEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LicenseEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LicensePaginateOption enables pagination customization.
type LicensePaginateOption func(*licensePager) error

// WithLicenseOrder configures pagination ordering.
func WithLicenseOrder(order *LicenseOrder) LicensePaginateOption {
	if order == nil {
		order = DefaultLicenseOrder
	}
	o := *order
	return func(pager *licensePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLicenseOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLicenseFilter configures pagination filter.
func WithLicenseFilter(filter func(*LicenseQuery) (*LicenseQuery, error)) LicensePaginateOption {
	return func(pager *licensePager) error {
		if filter == nil {
			return errors.New("LicenseQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type licensePager struct {
	reverse bool
	order   *LicenseOrder
	filter  func(*LicenseQuery) (*LicenseQuery, error)
}

func newLicensePager(opts []LicensePaginateOption, reverse bool) (*licensePager, error) {
	pager := &licensePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLicenseOrder
	}
	return pager, nil
}

func (p *licensePager) applyFilter(query *LicenseQuery) (*LicenseQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *licensePager) toCursor(l *License) Cursor {
	return p.order.Field.toCursor(l)
}

func (p *licensePager) applyCursors(query *LicenseQuery, after, before *Cursor) (*LicenseQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLicenseOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *licensePager) applyOrder(query *LicenseQuery) *LicenseQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLicenseOrder.Field {
		query = query.Order(DefaultLicenseOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *licensePager) orderExpr(query *LicenseQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLicenseOrder.Field {
			b.Comma().Ident(DefaultLicenseOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to License.
func (l *LicenseQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LicensePaginateOption,
) (*LicenseConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLicensePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if l, err = pager.applyFilter(l); err != nil {
		return nil, err
	}
	conn := &LicenseConnection{Edges: []*LicenseEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = l.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if l, err = pager.applyCursors(l, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		l.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := l.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	l = pager.applyOrder(l)
	nodes, err := l.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// LicenseOrderField defines the ordering field of License.
type LicenseOrderField struct {
	// Value extracts the ordering value from the given License.
	Value    func(*License) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) license.OrderOption
	toCursor func(*License) Cursor
}

// LicenseOrder defines the ordering of License.
type LicenseOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *LicenseOrderField `json:"field"`
}

// DefaultLicenseOrder is the default ordering of License.
var DefaultLicenseOrder = &LicenseOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LicenseOrderField{
		Value: func(l *License) (ent.Value, error) {
			return l.ID, nil
		},
		column: license.FieldID,
		toTerm: license.ByID,
		toCursor: func(l *License) Cursor {
			return Cursor{ID: l.ID}
		},
	},
}

// ToEdge converts License into LicenseEdge.
func (l *License) ToEdge(order *LicenseOrder) *LicenseEdge {
	if order == nil {
		order = DefaultLicenseOrder
	}
	return &LicenseEdge{
		Node:   l,
		Cursor: order.Field.toCursor(l),
	}
}

// OccurrenceEdge is the edge representation of Occurrence.
type OccurrenceEdge struct {
	Node   *Occurrence `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// OccurrenceConnection is the connection containing edges to Occurrence.
type OccurrenceConnection struct {
	Edges      []*OccurrenceEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *OccurrenceConnection) build(nodes []*Occurrence, pager *occurrencePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Occurrence
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Occurrence {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Occurrence {
			return nodes[i]
		}
	}
	c.Edges = make([]*OccurrenceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OccurrenceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OccurrencePaginateOption enables pagination customization.
type OccurrencePaginateOption func(*occurrencePager) error

// WithOccurrenceOrder configures pagination ordering.
func WithOccurrenceOrder(order *OccurrenceOrder) OccurrencePaginateOption {
	if order == nil {
		order = DefaultOccurrenceOrder
	}
	o := *order
	return func(pager *occurrencePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOccurrenceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOccurrenceFilter configures pagination filter.
func WithOccurrenceFilter(filter func(*OccurrenceQuery) (*OccurrenceQuery, error)) OccurrencePaginateOption {
	return func(pager *occurrencePager) error {
		if filter == nil {
			return errors.New("OccurrenceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type occurrencePager struct {
	reverse bool
	order   *OccurrenceOrder
	filter  func(*OccurrenceQuery) (*OccurrenceQuery, error)
}

func newOccurrencePager(opts []OccurrencePaginateOption, reverse bool) (*occurrencePager, error) {
	pager := &occurrencePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOccurrenceOrder
	}
	return pager, nil
}

func (p *occurrencePager) applyFilter(query *OccurrenceQuery) (*OccurrenceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *occurrencePager) toCursor(o *Occurrence) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *occurrencePager) applyCursors(query *OccurrenceQuery, after, before *Cursor) (*OccurrenceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOccurrenceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *occurrencePager) applyOrder(query *OccurrenceQuery) *OccurrenceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOccurrenceOrder.Field {
		query = query.Order(DefaultOccurrenceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *occurrencePager) orderExpr(query *OccurrenceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOccurrenceOrder.Field {
			b.Comma().Ident(DefaultOccurrenceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Occurrence.
func (o *OccurrenceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OccurrencePaginateOption,
) (*OccurrenceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOccurrencePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OccurrenceConnection{Edges: []*OccurrenceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = o.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if o, err = pager.applyCursors(o, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		o.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	o = pager.applyOrder(o)
	nodes, err := o.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OccurrenceOrderField defines the ordering field of Occurrence.
type OccurrenceOrderField struct {
	// Value extracts the ordering value from the given Occurrence.
	Value    func(*Occurrence) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) occurrence.OrderOption
	toCursor func(*Occurrence) Cursor
}

// OccurrenceOrder defines the ordering of Occurrence.
type OccurrenceOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *OccurrenceOrderField `json:"field"`
}

// DefaultOccurrenceOrder is the default ordering of Occurrence.
var DefaultOccurrenceOrder = &OccurrenceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OccurrenceOrderField{
		Value: func(o *Occurrence) (ent.Value, error) {
			return o.ID, nil
		},
		column: occurrence.FieldID,
		toTerm: occurrence.ByID,
		toCursor: func(o *Occurrence) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts Occurrence into OccurrenceEdge.
func (o *Occurrence) ToEdge(order *OccurrenceOrder) *OccurrenceEdge {
	if order == nil {
		order = DefaultOccurrenceOrder
	}
	return &OccurrenceEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}

// PackageNameEdge is the edge representation of PackageName.
type PackageNameEdge struct {
	Node   *PackageName `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// PackageNameConnection is the connection containing edges to PackageName.
type PackageNameConnection struct {
	Edges      []*PackageNameEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *PackageNameConnection) build(nodes []*PackageName, pager *packagenamePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PackageName
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PackageName {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PackageName {
			return nodes[i]
		}
	}
	c.Edges = make([]*PackageNameEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PackageNameEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PackageNamePaginateOption enables pagination customization.
type PackageNamePaginateOption func(*packagenamePager) error

// WithPackageNameOrder configures pagination ordering.
func WithPackageNameOrder(order *PackageNameOrder) PackageNamePaginateOption {
	if order == nil {
		order = DefaultPackageNameOrder
	}
	o := *order
	return func(pager *packagenamePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPackageNameOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPackageNameFilter configures pagination filter.
func WithPackageNameFilter(filter func(*PackageNameQuery) (*PackageNameQuery, error)) PackageNamePaginateOption {
	return func(pager *packagenamePager) error {
		if filter == nil {
			return errors.New("PackageNameQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type packagenamePager struct {
	reverse bool
	order   *PackageNameOrder
	filter  func(*PackageNameQuery) (*PackageNameQuery, error)
}

func newPackageNamePager(opts []PackageNamePaginateOption, reverse bool) (*packagenamePager, error) {
	pager := &packagenamePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPackageNameOrder
	}
	return pager, nil
}

func (p *packagenamePager) applyFilter(query *PackageNameQuery) (*PackageNameQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *packagenamePager) toCursor(pn *PackageName) Cursor {
	return p.order.Field.toCursor(pn)
}

func (p *packagenamePager) applyCursors(query *PackageNameQuery, after, before *Cursor) (*PackageNameQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPackageNameOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *packagenamePager) applyOrder(query *PackageNameQuery) *PackageNameQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPackageNameOrder.Field {
		query = query.Order(DefaultPackageNameOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *packagenamePager) orderExpr(query *PackageNameQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPackageNameOrder.Field {
			b.Comma().Ident(DefaultPackageNameOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PackageName.
func (pn *PackageNameQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PackageNamePaginateOption,
) (*PackageNameConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPackageNamePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pn, err = pager.applyFilter(pn); err != nil {
		return nil, err
	}
	conn := &PackageNameConnection{Edges: []*PackageNameEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pn.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pn, err = pager.applyCursors(pn, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pn.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pn.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pn = pager.applyOrder(pn)
	nodes, err := pn.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PackageNameOrderField defines the ordering field of PackageName.
type PackageNameOrderField struct {
	// Value extracts the ordering value from the given PackageName.
	Value    func(*PackageName) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) packagename.OrderOption
	toCursor func(*PackageName) Cursor
}

// PackageNameOrder defines the ordering of PackageName.
type PackageNameOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *PackageNameOrderField `json:"field"`
}

// DefaultPackageNameOrder is the default ordering of PackageName.
var DefaultPackageNameOrder = &PackageNameOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PackageNameOrderField{
		Value: func(pn *PackageName) (ent.Value, error) {
			return pn.ID, nil
		},
		column: packagename.FieldID,
		toTerm: packagename.ByID,
		toCursor: func(pn *PackageName) Cursor {
			return Cursor{ID: pn.ID}
		},
	},
}

// ToEdge converts PackageName into PackageNameEdge.
func (pn *PackageName) ToEdge(order *PackageNameOrder) *PackageNameEdge {
	if order == nil {
		order = DefaultPackageNameOrder
	}
	return &PackageNameEdge{
		Node:   pn,
		Cursor: order.Field.toCursor(pn),
	}
}

// PackageNamespaceEdge is the edge representation of PackageNamespace.
type PackageNamespaceEdge struct {
	Node   *PackageNamespace `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// PackageNamespaceConnection is the connection containing edges to PackageNamespace.
type PackageNamespaceConnection struct {
	Edges      []*PackageNamespaceEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *PackageNamespaceConnection) build(nodes []*PackageNamespace, pager *packagenamespacePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PackageNamespace
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PackageNamespace {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PackageNamespace {
			return nodes[i]
		}
	}
	c.Edges = make([]*PackageNamespaceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PackageNamespaceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PackageNamespacePaginateOption enables pagination customization.
type PackageNamespacePaginateOption func(*packagenamespacePager) error

// WithPackageNamespaceOrder configures pagination ordering.
func WithPackageNamespaceOrder(order *PackageNamespaceOrder) PackageNamespacePaginateOption {
	if order == nil {
		order = DefaultPackageNamespaceOrder
	}
	o := *order
	return func(pager *packagenamespacePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPackageNamespaceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPackageNamespaceFilter configures pagination filter.
func WithPackageNamespaceFilter(filter func(*PackageNamespaceQuery) (*PackageNamespaceQuery, error)) PackageNamespacePaginateOption {
	return func(pager *packagenamespacePager) error {
		if filter == nil {
			return errors.New("PackageNamespaceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type packagenamespacePager struct {
	reverse bool
	order   *PackageNamespaceOrder
	filter  func(*PackageNamespaceQuery) (*PackageNamespaceQuery, error)
}

func newPackageNamespacePager(opts []PackageNamespacePaginateOption, reverse bool) (*packagenamespacePager, error) {
	pager := &packagenamespacePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPackageNamespaceOrder
	}
	return pager, nil
}

func (p *packagenamespacePager) applyFilter(query *PackageNamespaceQuery) (*PackageNamespaceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *packagenamespacePager) toCursor(pn *PackageNamespace) Cursor {
	return p.order.Field.toCursor(pn)
}

func (p *packagenamespacePager) applyCursors(query *PackageNamespaceQuery, after, before *Cursor) (*PackageNamespaceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPackageNamespaceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *packagenamespacePager) applyOrder(query *PackageNamespaceQuery) *PackageNamespaceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPackageNamespaceOrder.Field {
		query = query.Order(DefaultPackageNamespaceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *packagenamespacePager) orderExpr(query *PackageNamespaceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPackageNamespaceOrder.Field {
			b.Comma().Ident(DefaultPackageNamespaceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PackageNamespace.
func (pn *PackageNamespaceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PackageNamespacePaginateOption,
) (*PackageNamespaceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPackageNamespacePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pn, err = pager.applyFilter(pn); err != nil {
		return nil, err
	}
	conn := &PackageNamespaceConnection{Edges: []*PackageNamespaceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pn.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pn, err = pager.applyCursors(pn, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pn.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pn.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pn = pager.applyOrder(pn)
	nodes, err := pn.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PackageNamespaceOrderField defines the ordering field of PackageNamespace.
type PackageNamespaceOrderField struct {
	// Value extracts the ordering value from the given PackageNamespace.
	Value    func(*PackageNamespace) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) packagenamespace.OrderOption
	toCursor func(*PackageNamespace) Cursor
}

// PackageNamespaceOrder defines the ordering of PackageNamespace.
type PackageNamespaceOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *PackageNamespaceOrderField `json:"field"`
}

// DefaultPackageNamespaceOrder is the default ordering of PackageNamespace.
var DefaultPackageNamespaceOrder = &PackageNamespaceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PackageNamespaceOrderField{
		Value: func(pn *PackageNamespace) (ent.Value, error) {
			return pn.ID, nil
		},
		column: packagenamespace.FieldID,
		toTerm: packagenamespace.ByID,
		toCursor: func(pn *PackageNamespace) Cursor {
			return Cursor{ID: pn.ID}
		},
	},
}

// ToEdge converts PackageNamespace into PackageNamespaceEdge.
func (pn *PackageNamespace) ToEdge(order *PackageNamespaceOrder) *PackageNamespaceEdge {
	if order == nil {
		order = DefaultPackageNamespaceOrder
	}
	return &PackageNamespaceEdge{
		Node:   pn,
		Cursor: order.Field.toCursor(pn),
	}
}

// PackageTypeEdge is the edge representation of PackageType.
type PackageTypeEdge struct {
	Node   *PackageType `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// PackageTypeConnection is the connection containing edges to PackageType.
type PackageTypeConnection struct {
	Edges      []*PackageTypeEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *PackageTypeConnection) build(nodes []*PackageType, pager *packagetypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PackageType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PackageType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PackageType {
			return nodes[i]
		}
	}
	c.Edges = make([]*PackageTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PackageTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PackageTypePaginateOption enables pagination customization.
type PackageTypePaginateOption func(*packagetypePager) error

// WithPackageTypeOrder configures pagination ordering.
func WithPackageTypeOrder(order *PackageTypeOrder) PackageTypePaginateOption {
	if order == nil {
		order = DefaultPackageTypeOrder
	}
	o := *order
	return func(pager *packagetypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPackageTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPackageTypeFilter configures pagination filter.
func WithPackageTypeFilter(filter func(*PackageTypeQuery) (*PackageTypeQuery, error)) PackageTypePaginateOption {
	return func(pager *packagetypePager) error {
		if filter == nil {
			return errors.New("PackageTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type packagetypePager struct {
	reverse bool
	order   *PackageTypeOrder
	filter  func(*PackageTypeQuery) (*PackageTypeQuery, error)
}

func newPackageTypePager(opts []PackageTypePaginateOption, reverse bool) (*packagetypePager, error) {
	pager := &packagetypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPackageTypeOrder
	}
	return pager, nil
}

func (p *packagetypePager) applyFilter(query *PackageTypeQuery) (*PackageTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *packagetypePager) toCursor(pt *PackageType) Cursor {
	return p.order.Field.toCursor(pt)
}

func (p *packagetypePager) applyCursors(query *PackageTypeQuery, after, before *Cursor) (*PackageTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPackageTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *packagetypePager) applyOrder(query *PackageTypeQuery) *PackageTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPackageTypeOrder.Field {
		query = query.Order(DefaultPackageTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *packagetypePager) orderExpr(query *PackageTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPackageTypeOrder.Field {
			b.Comma().Ident(DefaultPackageTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PackageType.
func (pt *PackageTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PackageTypePaginateOption,
) (*PackageTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPackageTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pt, err = pager.applyFilter(pt); err != nil {
		return nil, err
	}
	conn := &PackageTypeConnection{Edges: []*PackageTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pt.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pt, err = pager.applyCursors(pt, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pt = pager.applyOrder(pt)
	nodes, err := pt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PackageTypeOrderField defines the ordering field of PackageType.
type PackageTypeOrderField struct {
	// Value extracts the ordering value from the given PackageType.
	Value    func(*PackageType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) packagetype.OrderOption
	toCursor func(*PackageType) Cursor
}

// PackageTypeOrder defines the ordering of PackageType.
type PackageTypeOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *PackageTypeOrderField `json:"field"`
}

// DefaultPackageTypeOrder is the default ordering of PackageType.
var DefaultPackageTypeOrder = &PackageTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PackageTypeOrderField{
		Value: func(pt *PackageType) (ent.Value, error) {
			return pt.ID, nil
		},
		column: packagetype.FieldID,
		toTerm: packagetype.ByID,
		toCursor: func(pt *PackageType) Cursor {
			return Cursor{ID: pt.ID}
		},
	},
}

// ToEdge converts PackageType into PackageTypeEdge.
func (pt *PackageType) ToEdge(order *PackageTypeOrder) *PackageTypeEdge {
	if order == nil {
		order = DefaultPackageTypeOrder
	}
	return &PackageTypeEdge{
		Node:   pt,
		Cursor: order.Field.toCursor(pt),
	}
}

// PackageVersionEdge is the edge representation of PackageVersion.
type PackageVersionEdge struct {
	Node   *PackageVersion `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// PackageVersionConnection is the connection containing edges to PackageVersion.
type PackageVersionConnection struct {
	Edges      []*PackageVersionEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *PackageVersionConnection) build(nodes []*PackageVersion, pager *packageversionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PackageVersion
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PackageVersion {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PackageVersion {
			return nodes[i]
		}
	}
	c.Edges = make([]*PackageVersionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PackageVersionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PackageVersionPaginateOption enables pagination customization.
type PackageVersionPaginateOption func(*packageversionPager) error

// WithPackageVersionOrder configures pagination ordering.
func WithPackageVersionOrder(order *PackageVersionOrder) PackageVersionPaginateOption {
	if order == nil {
		order = DefaultPackageVersionOrder
	}
	o := *order
	return func(pager *packageversionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPackageVersionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPackageVersionFilter configures pagination filter.
func WithPackageVersionFilter(filter func(*PackageVersionQuery) (*PackageVersionQuery, error)) PackageVersionPaginateOption {
	return func(pager *packageversionPager) error {
		if filter == nil {
			return errors.New("PackageVersionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type packageversionPager struct {
	reverse bool
	order   *PackageVersionOrder
	filter  func(*PackageVersionQuery) (*PackageVersionQuery, error)
}

func newPackageVersionPager(opts []PackageVersionPaginateOption, reverse bool) (*packageversionPager, error) {
	pager := &packageversionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPackageVersionOrder
	}
	return pager, nil
}

func (p *packageversionPager) applyFilter(query *PackageVersionQuery) (*PackageVersionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *packageversionPager) toCursor(pv *PackageVersion) Cursor {
	return p.order.Field.toCursor(pv)
}

func (p *packageversionPager) applyCursors(query *PackageVersionQuery, after, before *Cursor) (*PackageVersionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPackageVersionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *packageversionPager) applyOrder(query *PackageVersionQuery) *PackageVersionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPackageVersionOrder.Field {
		query = query.Order(DefaultPackageVersionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *packageversionPager) orderExpr(query *PackageVersionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPackageVersionOrder.Field {
			b.Comma().Ident(DefaultPackageVersionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PackageVersion.
func (pv *PackageVersionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PackageVersionPaginateOption,
) (*PackageVersionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPackageVersionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pv, err = pager.applyFilter(pv); err != nil {
		return nil, err
	}
	conn := &PackageVersionConnection{Edges: []*PackageVersionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pv.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pv, err = pager.applyCursors(pv, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pv.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pv.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pv = pager.applyOrder(pv)
	nodes, err := pv.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PackageVersionOrderField defines the ordering field of PackageVersion.
type PackageVersionOrderField struct {
	// Value extracts the ordering value from the given PackageVersion.
	Value    func(*PackageVersion) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) packageversion.OrderOption
	toCursor func(*PackageVersion) Cursor
}

// PackageVersionOrder defines the ordering of PackageVersion.
type PackageVersionOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *PackageVersionOrderField `json:"field"`
}

// DefaultPackageVersionOrder is the default ordering of PackageVersion.
var DefaultPackageVersionOrder = &PackageVersionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PackageVersionOrderField{
		Value: func(pv *PackageVersion) (ent.Value, error) {
			return pv.ID, nil
		},
		column: packageversion.FieldID,
		toTerm: packageversion.ByID,
		toCursor: func(pv *PackageVersion) Cursor {
			return Cursor{ID: pv.ID}
		},
	},
}

// ToEdge converts PackageVersion into PackageVersionEdge.
func (pv *PackageVersion) ToEdge(order *PackageVersionOrder) *PackageVersionEdge {
	if order == nil {
		order = DefaultPackageVersionOrder
	}
	return &PackageVersionEdge{
		Node:   pv,
		Cursor: order.Field.toCursor(pv),
	}
}

// PkgEqualEdge is the edge representation of PkgEqual.
type PkgEqualEdge struct {
	Node   *PkgEqual `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// PkgEqualConnection is the connection containing edges to PkgEqual.
type PkgEqualConnection struct {
	Edges      []*PkgEqualEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *PkgEqualConnection) build(nodes []*PkgEqual, pager *pkgequalPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PkgEqual
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PkgEqual {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PkgEqual {
			return nodes[i]
		}
	}
	c.Edges = make([]*PkgEqualEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PkgEqualEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PkgEqualPaginateOption enables pagination customization.
type PkgEqualPaginateOption func(*pkgequalPager) error

// WithPkgEqualOrder configures pagination ordering.
func WithPkgEqualOrder(order *PkgEqualOrder) PkgEqualPaginateOption {
	if order == nil {
		order = DefaultPkgEqualOrder
	}
	o := *order
	return func(pager *pkgequalPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPkgEqualOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPkgEqualFilter configures pagination filter.
func WithPkgEqualFilter(filter func(*PkgEqualQuery) (*PkgEqualQuery, error)) PkgEqualPaginateOption {
	return func(pager *pkgequalPager) error {
		if filter == nil {
			return errors.New("PkgEqualQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type pkgequalPager struct {
	reverse bool
	order   *PkgEqualOrder
	filter  func(*PkgEqualQuery) (*PkgEqualQuery, error)
}

func newPkgEqualPager(opts []PkgEqualPaginateOption, reverse bool) (*pkgequalPager, error) {
	pager := &pkgequalPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPkgEqualOrder
	}
	return pager, nil
}

func (p *pkgequalPager) applyFilter(query *PkgEqualQuery) (*PkgEqualQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *pkgequalPager) toCursor(pe *PkgEqual) Cursor {
	return p.order.Field.toCursor(pe)
}

func (p *pkgequalPager) applyCursors(query *PkgEqualQuery, after, before *Cursor) (*PkgEqualQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPkgEqualOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *pkgequalPager) applyOrder(query *PkgEqualQuery) *PkgEqualQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPkgEqualOrder.Field {
		query = query.Order(DefaultPkgEqualOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *pkgequalPager) orderExpr(query *PkgEqualQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPkgEqualOrder.Field {
			b.Comma().Ident(DefaultPkgEqualOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PkgEqual.
func (pe *PkgEqualQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PkgEqualPaginateOption,
) (*PkgEqualConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPkgEqualPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pe, err = pager.applyFilter(pe); err != nil {
		return nil, err
	}
	conn := &PkgEqualConnection{Edges: []*PkgEqualEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pe.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pe, err = pager.applyCursors(pe, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pe.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pe.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pe = pager.applyOrder(pe)
	nodes, err := pe.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PkgEqualOrderField defines the ordering field of PkgEqual.
type PkgEqualOrderField struct {
	// Value extracts the ordering value from the given PkgEqual.
	Value    func(*PkgEqual) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) pkgequal.OrderOption
	toCursor func(*PkgEqual) Cursor
}

// PkgEqualOrder defines the ordering of PkgEqual.
type PkgEqualOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *PkgEqualOrderField `json:"field"`
}

// DefaultPkgEqualOrder is the default ordering of PkgEqual.
var DefaultPkgEqualOrder = &PkgEqualOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PkgEqualOrderField{
		Value: func(pe *PkgEqual) (ent.Value, error) {
			return pe.ID, nil
		},
		column: pkgequal.FieldID,
		toTerm: pkgequal.ByID,
		toCursor: func(pe *PkgEqual) Cursor {
			return Cursor{ID: pe.ID}
		},
	},
}

// ToEdge converts PkgEqual into PkgEqualEdge.
func (pe *PkgEqual) ToEdge(order *PkgEqualOrder) *PkgEqualEdge {
	if order == nil {
		order = DefaultPkgEqualOrder
	}
	return &PkgEqualEdge{
		Node:   pe,
		Cursor: order.Field.toCursor(pe),
	}
}

// SLSAAttestationEdge is the edge representation of SLSAAttestation.
type SLSAAttestationEdge struct {
	Node   *SLSAAttestation `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// SLSAAttestationConnection is the connection containing edges to SLSAAttestation.
type SLSAAttestationConnection struct {
	Edges      []*SLSAAttestationEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *SLSAAttestationConnection) build(nodes []*SLSAAttestation, pager *slsaattestationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SLSAAttestation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SLSAAttestation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SLSAAttestation {
			return nodes[i]
		}
	}
	c.Edges = make([]*SLSAAttestationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SLSAAttestationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SLSAAttestationPaginateOption enables pagination customization.
type SLSAAttestationPaginateOption func(*slsaattestationPager) error

// WithSLSAAttestationOrder configures pagination ordering.
func WithSLSAAttestationOrder(order *SLSAAttestationOrder) SLSAAttestationPaginateOption {
	if order == nil {
		order = DefaultSLSAAttestationOrder
	}
	o := *order
	return func(pager *slsaattestationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSLSAAttestationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSLSAAttestationFilter configures pagination filter.
func WithSLSAAttestationFilter(filter func(*SLSAAttestationQuery) (*SLSAAttestationQuery, error)) SLSAAttestationPaginateOption {
	return func(pager *slsaattestationPager) error {
		if filter == nil {
			return errors.New("SLSAAttestationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type slsaattestationPager struct {
	reverse bool
	order   *SLSAAttestationOrder
	filter  func(*SLSAAttestationQuery) (*SLSAAttestationQuery, error)
}

func newSLSAAttestationPager(opts []SLSAAttestationPaginateOption, reverse bool) (*slsaattestationPager, error) {
	pager := &slsaattestationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSLSAAttestationOrder
	}
	return pager, nil
}

func (p *slsaattestationPager) applyFilter(query *SLSAAttestationQuery) (*SLSAAttestationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *slsaattestationPager) toCursor(sa *SLSAAttestation) Cursor {
	return p.order.Field.toCursor(sa)
}

func (p *slsaattestationPager) applyCursors(query *SLSAAttestationQuery, after, before *Cursor) (*SLSAAttestationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSLSAAttestationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *slsaattestationPager) applyOrder(query *SLSAAttestationQuery) *SLSAAttestationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSLSAAttestationOrder.Field {
		query = query.Order(DefaultSLSAAttestationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *slsaattestationPager) orderExpr(query *SLSAAttestationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSLSAAttestationOrder.Field {
			b.Comma().Ident(DefaultSLSAAttestationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SLSAAttestation.
func (sa *SLSAAttestationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SLSAAttestationPaginateOption,
) (*SLSAAttestationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSLSAAttestationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sa, err = pager.applyFilter(sa); err != nil {
		return nil, err
	}
	conn := &SLSAAttestationConnection{Edges: []*SLSAAttestationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sa.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sa, err = pager.applyCursors(sa, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sa.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sa.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sa = pager.applyOrder(sa)
	nodes, err := sa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SLSAAttestationOrderField defines the ordering field of SLSAAttestation.
type SLSAAttestationOrderField struct {
	// Value extracts the ordering value from the given SLSAAttestation.
	Value    func(*SLSAAttestation) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) slsaattestation.OrderOption
	toCursor func(*SLSAAttestation) Cursor
}

// SLSAAttestationOrder defines the ordering of SLSAAttestation.
type SLSAAttestationOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *SLSAAttestationOrderField `json:"field"`
}

// DefaultSLSAAttestationOrder is the default ordering of SLSAAttestation.
var DefaultSLSAAttestationOrder = &SLSAAttestationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SLSAAttestationOrderField{
		Value: func(sa *SLSAAttestation) (ent.Value, error) {
			return sa.ID, nil
		},
		column: slsaattestation.FieldID,
		toTerm: slsaattestation.ByID,
		toCursor: func(sa *SLSAAttestation) Cursor {
			return Cursor{ID: sa.ID}
		},
	},
}

// ToEdge converts SLSAAttestation into SLSAAttestationEdge.
func (sa *SLSAAttestation) ToEdge(order *SLSAAttestationOrder) *SLSAAttestationEdge {
	if order == nil {
		order = DefaultSLSAAttestationOrder
	}
	return &SLSAAttestationEdge{
		Node:   sa,
		Cursor: order.Field.toCursor(sa),
	}
}

// ScorecardEdge is the edge representation of Scorecard.
type ScorecardEdge struct {
	Node   *Scorecard `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// ScorecardConnection is the connection containing edges to Scorecard.
type ScorecardConnection struct {
	Edges      []*ScorecardEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *ScorecardConnection) build(nodes []*Scorecard, pager *scorecardPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Scorecard
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Scorecard {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Scorecard {
			return nodes[i]
		}
	}
	c.Edges = make([]*ScorecardEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ScorecardEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ScorecardPaginateOption enables pagination customization.
type ScorecardPaginateOption func(*scorecardPager) error

// WithScorecardOrder configures pagination ordering.
func WithScorecardOrder(order *ScorecardOrder) ScorecardPaginateOption {
	if order == nil {
		order = DefaultScorecardOrder
	}
	o := *order
	return func(pager *scorecardPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultScorecardOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithScorecardFilter configures pagination filter.
func WithScorecardFilter(filter func(*ScorecardQuery) (*ScorecardQuery, error)) ScorecardPaginateOption {
	return func(pager *scorecardPager) error {
		if filter == nil {
			return errors.New("ScorecardQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type scorecardPager struct {
	reverse bool
	order   *ScorecardOrder
	filter  func(*ScorecardQuery) (*ScorecardQuery, error)
}

func newScorecardPager(opts []ScorecardPaginateOption, reverse bool) (*scorecardPager, error) {
	pager := &scorecardPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultScorecardOrder
	}
	return pager, nil
}

func (p *scorecardPager) applyFilter(query *ScorecardQuery) (*ScorecardQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *scorecardPager) toCursor(s *Scorecard) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *scorecardPager) applyCursors(query *ScorecardQuery, after, before *Cursor) (*ScorecardQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultScorecardOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *scorecardPager) applyOrder(query *ScorecardQuery) *ScorecardQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultScorecardOrder.Field {
		query = query.Order(DefaultScorecardOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *scorecardPager) orderExpr(query *ScorecardQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultScorecardOrder.Field {
			b.Comma().Ident(DefaultScorecardOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Scorecard.
func (s *ScorecardQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ScorecardPaginateOption,
) (*ScorecardConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newScorecardPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &ScorecardConnection{Edges: []*ScorecardEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = s.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ScorecardOrderField defines the ordering field of Scorecard.
type ScorecardOrderField struct {
	// Value extracts the ordering value from the given Scorecard.
	Value    func(*Scorecard) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) scorecard.OrderOption
	toCursor func(*Scorecard) Cursor
}

// ScorecardOrder defines the ordering of Scorecard.
type ScorecardOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *ScorecardOrderField `json:"field"`
}

// DefaultScorecardOrder is the default ordering of Scorecard.
var DefaultScorecardOrder = &ScorecardOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ScorecardOrderField{
		Value: func(s *Scorecard) (ent.Value, error) {
			return s.ID, nil
		},
		column: scorecard.FieldID,
		toTerm: scorecard.ByID,
		toCursor: func(s *Scorecard) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Scorecard into ScorecardEdge.
func (s *Scorecard) ToEdge(order *ScorecardOrder) *ScorecardEdge {
	if order == nil {
		order = DefaultScorecardOrder
	}
	return &ScorecardEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// SourceNameEdge is the edge representation of SourceName.
type SourceNameEdge struct {
	Node   *SourceName `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// SourceNameConnection is the connection containing edges to SourceName.
type SourceNameConnection struct {
	Edges      []*SourceNameEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *SourceNameConnection) build(nodes []*SourceName, pager *sourcenamePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SourceName
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SourceName {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SourceName {
			return nodes[i]
		}
	}
	c.Edges = make([]*SourceNameEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SourceNameEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SourceNamePaginateOption enables pagination customization.
type SourceNamePaginateOption func(*sourcenamePager) error

// WithSourceNameOrder configures pagination ordering.
func WithSourceNameOrder(order *SourceNameOrder) SourceNamePaginateOption {
	if order == nil {
		order = DefaultSourceNameOrder
	}
	o := *order
	return func(pager *sourcenamePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSourceNameOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSourceNameFilter configures pagination filter.
func WithSourceNameFilter(filter func(*SourceNameQuery) (*SourceNameQuery, error)) SourceNamePaginateOption {
	return func(pager *sourcenamePager) error {
		if filter == nil {
			return errors.New("SourceNameQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type sourcenamePager struct {
	reverse bool
	order   *SourceNameOrder
	filter  func(*SourceNameQuery) (*SourceNameQuery, error)
}

func newSourceNamePager(opts []SourceNamePaginateOption, reverse bool) (*sourcenamePager, error) {
	pager := &sourcenamePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSourceNameOrder
	}
	return pager, nil
}

func (p *sourcenamePager) applyFilter(query *SourceNameQuery) (*SourceNameQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *sourcenamePager) toCursor(sn *SourceName) Cursor {
	return p.order.Field.toCursor(sn)
}

func (p *sourcenamePager) applyCursors(query *SourceNameQuery, after, before *Cursor) (*SourceNameQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSourceNameOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *sourcenamePager) applyOrder(query *SourceNameQuery) *SourceNameQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSourceNameOrder.Field {
		query = query.Order(DefaultSourceNameOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *sourcenamePager) orderExpr(query *SourceNameQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSourceNameOrder.Field {
			b.Comma().Ident(DefaultSourceNameOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SourceName.
func (sn *SourceNameQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SourceNamePaginateOption,
) (*SourceNameConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSourceNamePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sn, err = pager.applyFilter(sn); err != nil {
		return nil, err
	}
	conn := &SourceNameConnection{Edges: []*SourceNameEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sn.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sn, err = pager.applyCursors(sn, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sn.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sn.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sn = pager.applyOrder(sn)
	nodes, err := sn.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SourceNameOrderField defines the ordering field of SourceName.
type SourceNameOrderField struct {
	// Value extracts the ordering value from the given SourceName.
	Value    func(*SourceName) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) sourcename.OrderOption
	toCursor func(*SourceName) Cursor
}

// SourceNameOrder defines the ordering of SourceName.
type SourceNameOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *SourceNameOrderField `json:"field"`
}

// DefaultSourceNameOrder is the default ordering of SourceName.
var DefaultSourceNameOrder = &SourceNameOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SourceNameOrderField{
		Value: func(sn *SourceName) (ent.Value, error) {
			return sn.ID, nil
		},
		column: sourcename.FieldID,
		toTerm: sourcename.ByID,
		toCursor: func(sn *SourceName) Cursor {
			return Cursor{ID: sn.ID}
		},
	},
}

// ToEdge converts SourceName into SourceNameEdge.
func (sn *SourceName) ToEdge(order *SourceNameOrder) *SourceNameEdge {
	if order == nil {
		order = DefaultSourceNameOrder
	}
	return &SourceNameEdge{
		Node:   sn,
		Cursor: order.Field.toCursor(sn),
	}
}

// SourceNamespaceEdge is the edge representation of SourceNamespace.
type SourceNamespaceEdge struct {
	Node   *SourceNamespace `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// SourceNamespaceConnection is the connection containing edges to SourceNamespace.
type SourceNamespaceConnection struct {
	Edges      []*SourceNamespaceEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *SourceNamespaceConnection) build(nodes []*SourceNamespace, pager *sourcenamespacePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SourceNamespace
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SourceNamespace {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SourceNamespace {
			return nodes[i]
		}
	}
	c.Edges = make([]*SourceNamespaceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SourceNamespaceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SourceNamespacePaginateOption enables pagination customization.
type SourceNamespacePaginateOption func(*sourcenamespacePager) error

// WithSourceNamespaceOrder configures pagination ordering.
func WithSourceNamespaceOrder(order *SourceNamespaceOrder) SourceNamespacePaginateOption {
	if order == nil {
		order = DefaultSourceNamespaceOrder
	}
	o := *order
	return func(pager *sourcenamespacePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSourceNamespaceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSourceNamespaceFilter configures pagination filter.
func WithSourceNamespaceFilter(filter func(*SourceNamespaceQuery) (*SourceNamespaceQuery, error)) SourceNamespacePaginateOption {
	return func(pager *sourcenamespacePager) error {
		if filter == nil {
			return errors.New("SourceNamespaceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type sourcenamespacePager struct {
	reverse bool
	order   *SourceNamespaceOrder
	filter  func(*SourceNamespaceQuery) (*SourceNamespaceQuery, error)
}

func newSourceNamespacePager(opts []SourceNamespacePaginateOption, reverse bool) (*sourcenamespacePager, error) {
	pager := &sourcenamespacePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSourceNamespaceOrder
	}
	return pager, nil
}

func (p *sourcenamespacePager) applyFilter(query *SourceNamespaceQuery) (*SourceNamespaceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *sourcenamespacePager) toCursor(sn *SourceNamespace) Cursor {
	return p.order.Field.toCursor(sn)
}

func (p *sourcenamespacePager) applyCursors(query *SourceNamespaceQuery, after, before *Cursor) (*SourceNamespaceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSourceNamespaceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *sourcenamespacePager) applyOrder(query *SourceNamespaceQuery) *SourceNamespaceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSourceNamespaceOrder.Field {
		query = query.Order(DefaultSourceNamespaceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *sourcenamespacePager) orderExpr(query *SourceNamespaceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSourceNamespaceOrder.Field {
			b.Comma().Ident(DefaultSourceNamespaceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SourceNamespace.
func (sn *SourceNamespaceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SourceNamespacePaginateOption,
) (*SourceNamespaceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSourceNamespacePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sn, err = pager.applyFilter(sn); err != nil {
		return nil, err
	}
	conn := &SourceNamespaceConnection{Edges: []*SourceNamespaceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sn.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sn, err = pager.applyCursors(sn, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sn.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sn.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sn = pager.applyOrder(sn)
	nodes, err := sn.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SourceNamespaceOrderField defines the ordering field of SourceNamespace.
type SourceNamespaceOrderField struct {
	// Value extracts the ordering value from the given SourceNamespace.
	Value    func(*SourceNamespace) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) sourcenamespace.OrderOption
	toCursor func(*SourceNamespace) Cursor
}

// SourceNamespaceOrder defines the ordering of SourceNamespace.
type SourceNamespaceOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *SourceNamespaceOrderField `json:"field"`
}

// DefaultSourceNamespaceOrder is the default ordering of SourceNamespace.
var DefaultSourceNamespaceOrder = &SourceNamespaceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SourceNamespaceOrderField{
		Value: func(sn *SourceNamespace) (ent.Value, error) {
			return sn.ID, nil
		},
		column: sourcenamespace.FieldID,
		toTerm: sourcenamespace.ByID,
		toCursor: func(sn *SourceNamespace) Cursor {
			return Cursor{ID: sn.ID}
		},
	},
}

// ToEdge converts SourceNamespace into SourceNamespaceEdge.
func (sn *SourceNamespace) ToEdge(order *SourceNamespaceOrder) *SourceNamespaceEdge {
	if order == nil {
		order = DefaultSourceNamespaceOrder
	}
	return &SourceNamespaceEdge{
		Node:   sn,
		Cursor: order.Field.toCursor(sn),
	}
}

// SourceTypeEdge is the edge representation of SourceType.
type SourceTypeEdge struct {
	Node   *SourceType `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// SourceTypeConnection is the connection containing edges to SourceType.
type SourceTypeConnection struct {
	Edges      []*SourceTypeEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *SourceTypeConnection) build(nodes []*SourceType, pager *sourcetypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SourceType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SourceType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SourceType {
			return nodes[i]
		}
	}
	c.Edges = make([]*SourceTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SourceTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SourceTypePaginateOption enables pagination customization.
type SourceTypePaginateOption func(*sourcetypePager) error

// WithSourceTypeOrder configures pagination ordering.
func WithSourceTypeOrder(order *SourceTypeOrder) SourceTypePaginateOption {
	if order == nil {
		order = DefaultSourceTypeOrder
	}
	o := *order
	return func(pager *sourcetypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSourceTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSourceTypeFilter configures pagination filter.
func WithSourceTypeFilter(filter func(*SourceTypeQuery) (*SourceTypeQuery, error)) SourceTypePaginateOption {
	return func(pager *sourcetypePager) error {
		if filter == nil {
			return errors.New("SourceTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type sourcetypePager struct {
	reverse bool
	order   *SourceTypeOrder
	filter  func(*SourceTypeQuery) (*SourceTypeQuery, error)
}

func newSourceTypePager(opts []SourceTypePaginateOption, reverse bool) (*sourcetypePager, error) {
	pager := &sourcetypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSourceTypeOrder
	}
	return pager, nil
}

func (p *sourcetypePager) applyFilter(query *SourceTypeQuery) (*SourceTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *sourcetypePager) toCursor(st *SourceType) Cursor {
	return p.order.Field.toCursor(st)
}

func (p *sourcetypePager) applyCursors(query *SourceTypeQuery, after, before *Cursor) (*SourceTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSourceTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *sourcetypePager) applyOrder(query *SourceTypeQuery) *SourceTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSourceTypeOrder.Field {
		query = query.Order(DefaultSourceTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *sourcetypePager) orderExpr(query *SourceTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSourceTypeOrder.Field {
			b.Comma().Ident(DefaultSourceTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SourceType.
func (st *SourceTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SourceTypePaginateOption,
) (*SourceTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSourceTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if st, err = pager.applyFilter(st); err != nil {
		return nil, err
	}
	conn := &SourceTypeConnection{Edges: []*SourceTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = st.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if st, err = pager.applyCursors(st, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		st.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := st.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	st = pager.applyOrder(st)
	nodes, err := st.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SourceTypeOrderField defines the ordering field of SourceType.
type SourceTypeOrderField struct {
	// Value extracts the ordering value from the given SourceType.
	Value    func(*SourceType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) sourcetype.OrderOption
	toCursor func(*SourceType) Cursor
}

// SourceTypeOrder defines the ordering of SourceType.
type SourceTypeOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *SourceTypeOrderField `json:"field"`
}

// DefaultSourceTypeOrder is the default ordering of SourceType.
var DefaultSourceTypeOrder = &SourceTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SourceTypeOrderField{
		Value: func(st *SourceType) (ent.Value, error) {
			return st.ID, nil
		},
		column: sourcetype.FieldID,
		toTerm: sourcetype.ByID,
		toCursor: func(st *SourceType) Cursor {
			return Cursor{ID: st.ID}
		},
	},
}

// ToEdge converts SourceType into SourceTypeEdge.
func (st *SourceType) ToEdge(order *SourceTypeOrder) *SourceTypeEdge {
	if order == nil {
		order = DefaultSourceTypeOrder
	}
	return &SourceTypeEdge{
		Node:   st,
		Cursor: order.Field.toCursor(st),
	}
}

// VulnEqualEdge is the edge representation of VulnEqual.
type VulnEqualEdge struct {
	Node   *VulnEqual `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// VulnEqualConnection is the connection containing edges to VulnEqual.
type VulnEqualConnection struct {
	Edges      []*VulnEqualEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *VulnEqualConnection) build(nodes []*VulnEqual, pager *vulnequalPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VulnEqual
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VulnEqual {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VulnEqual {
			return nodes[i]
		}
	}
	c.Edges = make([]*VulnEqualEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VulnEqualEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VulnEqualPaginateOption enables pagination customization.
type VulnEqualPaginateOption func(*vulnequalPager) error

// WithVulnEqualOrder configures pagination ordering.
func WithVulnEqualOrder(order *VulnEqualOrder) VulnEqualPaginateOption {
	if order == nil {
		order = DefaultVulnEqualOrder
	}
	o := *order
	return func(pager *vulnequalPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVulnEqualOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVulnEqualFilter configures pagination filter.
func WithVulnEqualFilter(filter func(*VulnEqualQuery) (*VulnEqualQuery, error)) VulnEqualPaginateOption {
	return func(pager *vulnequalPager) error {
		if filter == nil {
			return errors.New("VulnEqualQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type vulnequalPager struct {
	reverse bool
	order   *VulnEqualOrder
	filter  func(*VulnEqualQuery) (*VulnEqualQuery, error)
}

func newVulnEqualPager(opts []VulnEqualPaginateOption, reverse bool) (*vulnequalPager, error) {
	pager := &vulnequalPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVulnEqualOrder
	}
	return pager, nil
}

func (p *vulnequalPager) applyFilter(query *VulnEqualQuery) (*VulnEqualQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *vulnequalPager) toCursor(ve *VulnEqual) Cursor {
	return p.order.Field.toCursor(ve)
}

func (p *vulnequalPager) applyCursors(query *VulnEqualQuery, after, before *Cursor) (*VulnEqualQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVulnEqualOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *vulnequalPager) applyOrder(query *VulnEqualQuery) *VulnEqualQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVulnEqualOrder.Field {
		query = query.Order(DefaultVulnEqualOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *vulnequalPager) orderExpr(query *VulnEqualQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVulnEqualOrder.Field {
			b.Comma().Ident(DefaultVulnEqualOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to VulnEqual.
func (ve *VulnEqualQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VulnEqualPaginateOption,
) (*VulnEqualConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVulnEqualPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ve, err = pager.applyFilter(ve); err != nil {
		return nil, err
	}
	conn := &VulnEqualConnection{Edges: []*VulnEqualEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ve.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ve, err = pager.applyCursors(ve, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ve.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ve.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ve = pager.applyOrder(ve)
	nodes, err := ve.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// VulnEqualOrderField defines the ordering field of VulnEqual.
type VulnEqualOrderField struct {
	// Value extracts the ordering value from the given VulnEqual.
	Value    func(*VulnEqual) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) vulnequal.OrderOption
	toCursor func(*VulnEqual) Cursor
}

// VulnEqualOrder defines the ordering of VulnEqual.
type VulnEqualOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *VulnEqualOrderField `json:"field"`
}

// DefaultVulnEqualOrder is the default ordering of VulnEqual.
var DefaultVulnEqualOrder = &VulnEqualOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VulnEqualOrderField{
		Value: func(ve *VulnEqual) (ent.Value, error) {
			return ve.ID, nil
		},
		column: vulnequal.FieldID,
		toTerm: vulnequal.ByID,
		toCursor: func(ve *VulnEqual) Cursor {
			return Cursor{ID: ve.ID}
		},
	},
}

// ToEdge converts VulnEqual into VulnEqualEdge.
func (ve *VulnEqual) ToEdge(order *VulnEqualOrder) *VulnEqualEdge {
	if order == nil {
		order = DefaultVulnEqualOrder
	}
	return &VulnEqualEdge{
		Node:   ve,
		Cursor: order.Field.toCursor(ve),
	}
}

// VulnerabilityIDEdge is the edge representation of VulnerabilityID.
type VulnerabilityIDEdge struct {
	Node   *VulnerabilityID `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// VulnerabilityIDConnection is the connection containing edges to VulnerabilityID.
type VulnerabilityIDConnection struct {
	Edges      []*VulnerabilityIDEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *VulnerabilityIDConnection) build(nodes []*VulnerabilityID, pager *vulnerabilityidPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VulnerabilityID
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VulnerabilityID {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VulnerabilityID {
			return nodes[i]
		}
	}
	c.Edges = make([]*VulnerabilityIDEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VulnerabilityIDEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VulnerabilityIDPaginateOption enables pagination customization.
type VulnerabilityIDPaginateOption func(*vulnerabilityidPager) error

// WithVulnerabilityIDOrder configures pagination ordering.
func WithVulnerabilityIDOrder(order *VulnerabilityIDOrder) VulnerabilityIDPaginateOption {
	if order == nil {
		order = DefaultVulnerabilityIDOrder
	}
	o := *order
	return func(pager *vulnerabilityidPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVulnerabilityIDOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVulnerabilityIDFilter configures pagination filter.
func WithVulnerabilityIDFilter(filter func(*VulnerabilityIDQuery) (*VulnerabilityIDQuery, error)) VulnerabilityIDPaginateOption {
	return func(pager *vulnerabilityidPager) error {
		if filter == nil {
			return errors.New("VulnerabilityIDQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type vulnerabilityidPager struct {
	reverse bool
	order   *VulnerabilityIDOrder
	filter  func(*VulnerabilityIDQuery) (*VulnerabilityIDQuery, error)
}

func newVulnerabilityIDPager(opts []VulnerabilityIDPaginateOption, reverse bool) (*vulnerabilityidPager, error) {
	pager := &vulnerabilityidPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVulnerabilityIDOrder
	}
	return pager, nil
}

func (p *vulnerabilityidPager) applyFilter(query *VulnerabilityIDQuery) (*VulnerabilityIDQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *vulnerabilityidPager) toCursor(vi *VulnerabilityID) Cursor {
	return p.order.Field.toCursor(vi)
}

func (p *vulnerabilityidPager) applyCursors(query *VulnerabilityIDQuery, after, before *Cursor) (*VulnerabilityIDQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVulnerabilityIDOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *vulnerabilityidPager) applyOrder(query *VulnerabilityIDQuery) *VulnerabilityIDQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVulnerabilityIDOrder.Field {
		query = query.Order(DefaultVulnerabilityIDOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *vulnerabilityidPager) orderExpr(query *VulnerabilityIDQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVulnerabilityIDOrder.Field {
			b.Comma().Ident(DefaultVulnerabilityIDOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to VulnerabilityID.
func (vi *VulnerabilityIDQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VulnerabilityIDPaginateOption,
) (*VulnerabilityIDConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVulnerabilityIDPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if vi, err = pager.applyFilter(vi); err != nil {
		return nil, err
	}
	conn := &VulnerabilityIDConnection{Edges: []*VulnerabilityIDEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = vi.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if vi, err = pager.applyCursors(vi, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		vi.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := vi.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	vi = pager.applyOrder(vi)
	nodes, err := vi.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// VulnerabilityIDOrderField defines the ordering field of VulnerabilityID.
type VulnerabilityIDOrderField struct {
	// Value extracts the ordering value from the given VulnerabilityID.
	Value    func(*VulnerabilityID) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) vulnerabilityid.OrderOption
	toCursor func(*VulnerabilityID) Cursor
}

// VulnerabilityIDOrder defines the ordering of VulnerabilityID.
type VulnerabilityIDOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *VulnerabilityIDOrderField `json:"field"`
}

// DefaultVulnerabilityIDOrder is the default ordering of VulnerabilityID.
var DefaultVulnerabilityIDOrder = &VulnerabilityIDOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VulnerabilityIDOrderField{
		Value: func(vi *VulnerabilityID) (ent.Value, error) {
			return vi.ID, nil
		},
		column: vulnerabilityid.FieldID,
		toTerm: vulnerabilityid.ByID,
		toCursor: func(vi *VulnerabilityID) Cursor {
			return Cursor{ID: vi.ID}
		},
	},
}

// ToEdge converts VulnerabilityID into VulnerabilityIDEdge.
func (vi *VulnerabilityID) ToEdge(order *VulnerabilityIDOrder) *VulnerabilityIDEdge {
	if order == nil {
		order = DefaultVulnerabilityIDOrder
	}
	return &VulnerabilityIDEdge{
		Node:   vi,
		Cursor: order.Field.toCursor(vi),
	}
}

// VulnerabilityTypeEdge is the edge representation of VulnerabilityType.
type VulnerabilityTypeEdge struct {
	Node   *VulnerabilityType `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// VulnerabilityTypeConnection is the connection containing edges to VulnerabilityType.
type VulnerabilityTypeConnection struct {
	Edges      []*VulnerabilityTypeEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *VulnerabilityTypeConnection) build(nodes []*VulnerabilityType, pager *vulnerabilitytypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VulnerabilityType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VulnerabilityType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VulnerabilityType {
			return nodes[i]
		}
	}
	c.Edges = make([]*VulnerabilityTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VulnerabilityTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VulnerabilityTypePaginateOption enables pagination customization.
type VulnerabilityTypePaginateOption func(*vulnerabilitytypePager) error

// WithVulnerabilityTypeOrder configures pagination ordering.
func WithVulnerabilityTypeOrder(order *VulnerabilityTypeOrder) VulnerabilityTypePaginateOption {
	if order == nil {
		order = DefaultVulnerabilityTypeOrder
	}
	o := *order
	return func(pager *vulnerabilitytypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVulnerabilityTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVulnerabilityTypeFilter configures pagination filter.
func WithVulnerabilityTypeFilter(filter func(*VulnerabilityTypeQuery) (*VulnerabilityTypeQuery, error)) VulnerabilityTypePaginateOption {
	return func(pager *vulnerabilitytypePager) error {
		if filter == nil {
			return errors.New("VulnerabilityTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type vulnerabilitytypePager struct {
	reverse bool
	order   *VulnerabilityTypeOrder
	filter  func(*VulnerabilityTypeQuery) (*VulnerabilityTypeQuery, error)
}

func newVulnerabilityTypePager(opts []VulnerabilityTypePaginateOption, reverse bool) (*vulnerabilitytypePager, error) {
	pager := &vulnerabilitytypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVulnerabilityTypeOrder
	}
	return pager, nil
}

func (p *vulnerabilitytypePager) applyFilter(query *VulnerabilityTypeQuery) (*VulnerabilityTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *vulnerabilitytypePager) toCursor(vt *VulnerabilityType) Cursor {
	return p.order.Field.toCursor(vt)
}

func (p *vulnerabilitytypePager) applyCursors(query *VulnerabilityTypeQuery, after, before *Cursor) (*VulnerabilityTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVulnerabilityTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *vulnerabilitytypePager) applyOrder(query *VulnerabilityTypeQuery) *VulnerabilityTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVulnerabilityTypeOrder.Field {
		query = query.Order(DefaultVulnerabilityTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *vulnerabilitytypePager) orderExpr(query *VulnerabilityTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVulnerabilityTypeOrder.Field {
			b.Comma().Ident(DefaultVulnerabilityTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to VulnerabilityType.
func (vt *VulnerabilityTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VulnerabilityTypePaginateOption,
) (*VulnerabilityTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVulnerabilityTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if vt, err = pager.applyFilter(vt); err != nil {
		return nil, err
	}
	conn := &VulnerabilityTypeConnection{Edges: []*VulnerabilityTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = vt.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if vt, err = pager.applyCursors(vt, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		vt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := vt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	vt = pager.applyOrder(vt)
	nodes, err := vt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// VulnerabilityTypeOrderField defines the ordering field of VulnerabilityType.
type VulnerabilityTypeOrderField struct {
	// Value extracts the ordering value from the given VulnerabilityType.
	Value    func(*VulnerabilityType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) vulnerabilitytype.OrderOption
	toCursor func(*VulnerabilityType) Cursor
}

// VulnerabilityTypeOrder defines the ordering of VulnerabilityType.
type VulnerabilityTypeOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *VulnerabilityTypeOrderField `json:"field"`
}

// DefaultVulnerabilityTypeOrder is the default ordering of VulnerabilityType.
var DefaultVulnerabilityTypeOrder = &VulnerabilityTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VulnerabilityTypeOrderField{
		Value: func(vt *VulnerabilityType) (ent.Value, error) {
			return vt.ID, nil
		},
		column: vulnerabilitytype.FieldID,
		toTerm: vulnerabilitytype.ByID,
		toCursor: func(vt *VulnerabilityType) Cursor {
			return Cursor{ID: vt.ID}
		},
	},
}

// ToEdge converts VulnerabilityType into VulnerabilityTypeEdge.
func (vt *VulnerabilityType) ToEdge(order *VulnerabilityTypeOrder) *VulnerabilityTypeEdge {
	if order == nil {
		order = DefaultVulnerabilityTypeOrder
	}
	return &VulnerabilityTypeEdge{
		Node:   vt,
		Cursor: order.Field.toCursor(vt),
	}
}

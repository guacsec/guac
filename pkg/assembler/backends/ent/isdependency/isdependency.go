// Code generated by ent, DO NOT EDIT.

package isdependency

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the isdependency type in the database.
	Label = "is_dependency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPackageID holds the string denoting the package_id field in the database.
	FieldPackageID = "package_id"
	// FieldDependentPackageID holds the string denoting the dependent_package_id field in the database.
	FieldDependentPackageID = "dependent_package_id"
	// FieldVersionRange holds the string denoting the version_range field in the database.
	FieldVersionRange = "version_range"
	// FieldDependencyType holds the string denoting the dependency_type field in the database.
	FieldDependencyType = "dependency_type"
	// FieldJustification holds the string denoting the justification field in the database.
	FieldJustification = "justification"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// EdgePackage holds the string denoting the package edge name in mutations.
	EdgePackage = "package"
	// EdgeDependentPackage holds the string denoting the dependent_package edge name in mutations.
	EdgeDependentPackage = "dependent_package"
	// Table holds the table name of the isdependency in the database.
	Table = "is_dependencies"
	// PackageTable is the table that holds the package relation/edge.
	PackageTable = "is_dependencies"
	// PackageInverseTable is the table name for the PackageVersion entity.
	// It exists in this package in order to avoid circular dependency with the "packageversion" package.
	PackageInverseTable = "package_versions"
	// PackageColumn is the table column denoting the package relation/edge.
	PackageColumn = "package_id"
	// DependentPackageTable is the table that holds the dependent_package relation/edge.
	DependentPackageTable = "is_dependencies"
	// DependentPackageInverseTable is the table name for the PackageName entity.
	// It exists in this package in order to avoid circular dependency with the "packagename" package.
	DependentPackageInverseTable = "package_names"
	// DependentPackageColumn is the table column denoting the dependent_package relation/edge.
	DependentPackageColumn = "dependent_package_id"
)

// Columns holds all SQL columns for isdependency fields.
var Columns = []string{
	FieldID,
	FieldPackageID,
	FieldDependentPackageID,
	FieldVersionRange,
	FieldDependencyType,
	FieldJustification,
	FieldOrigin,
	FieldCollector,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the IsDependency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPackageID orders the results by the package_id field.
func ByPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageID, opts...).ToFunc()
}

// ByDependentPackageID orders the results by the dependent_package_id field.
func ByDependentPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependentPackageID, opts...).ToFunc()
}

// ByVersionRange orders the results by the version_range field.
func ByVersionRange(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersionRange, opts...).ToFunc()
}

// ByDependencyType orders the results by the dependency_type field.
func ByDependencyType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependencyType, opts...).ToFunc()
}

// ByJustification orders the results by the justification field.
func ByJustification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJustification, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByPackageField orders the results by package field.
func ByPackageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackageStep(), sql.OrderByField(field, opts...))
	}
}

// ByDependentPackageField orders the results by dependent_package field.
func ByDependentPackageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependentPackageStep(), sql.OrderByField(field, opts...))
	}
}
func newPackageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackageTable, PackageColumn),
	)
}
func newDependentPackageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependentPackageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DependentPackageTable, DependentPackageColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitymetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
)

// VulnerabilityIDQuery is the builder for querying VulnerabilityID entities.
type VulnerabilityIDQuery struct {
	config
	ctx                            *QueryContext
	order                          []vulnerabilityid.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.VulnerabilityID
	withType                       *VulnerabilityTypeQuery
	withVulnEquals                 *VulnEqualQuery
	withVulnerabilityMetadata      *VulnerabilityMetadataQuery
	modifiers                      []func(*sql.Selector)
	loadTotal                      []func(context.Context, []*VulnerabilityID) error
	withNamedVulnEquals            map[string]*VulnEqualQuery
	withNamedVulnerabilityMetadata map[string]*VulnerabilityMetadataQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VulnerabilityIDQuery builder.
func (viq *VulnerabilityIDQuery) Where(ps ...predicate.VulnerabilityID) *VulnerabilityIDQuery {
	viq.predicates = append(viq.predicates, ps...)
	return viq
}

// Limit the number of records to be returned by this query.
func (viq *VulnerabilityIDQuery) Limit(limit int) *VulnerabilityIDQuery {
	viq.ctx.Limit = &limit
	return viq
}

// Offset to start from.
func (viq *VulnerabilityIDQuery) Offset(offset int) *VulnerabilityIDQuery {
	viq.ctx.Offset = &offset
	return viq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (viq *VulnerabilityIDQuery) Unique(unique bool) *VulnerabilityIDQuery {
	viq.ctx.Unique = &unique
	return viq
}

// Order specifies how the records should be ordered.
func (viq *VulnerabilityIDQuery) Order(o ...vulnerabilityid.OrderOption) *VulnerabilityIDQuery {
	viq.order = append(viq.order, o...)
	return viq
}

// QueryType chains the current query on the "type" edge.
func (viq *VulnerabilityIDQuery) QueryType() *VulnerabilityTypeQuery {
	query := (&VulnerabilityTypeClient{config: viq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := viq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := viq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnerabilityid.Table, vulnerabilityid.FieldID, selector),
			sqlgraph.To(vulnerabilitytype.Table, vulnerabilitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vulnerabilityid.TypeTable, vulnerabilityid.TypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(viq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVulnEquals chains the current query on the "vuln_equals" edge.
func (viq *VulnerabilityIDQuery) QueryVulnEquals() *VulnEqualQuery {
	query := (&VulnEqualClient{config: viq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := viq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := viq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnerabilityid.Table, vulnerabilityid.FieldID, selector),
			sqlgraph.To(vulnequal.Table, vulnequal.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, vulnerabilityid.VulnEqualsTable, vulnerabilityid.VulnEqualsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(viq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVulnerabilityMetadata chains the current query on the "vulnerability_metadata" edge.
func (viq *VulnerabilityIDQuery) QueryVulnerabilityMetadata() *VulnerabilityMetadataQuery {
	query := (&VulnerabilityMetadataClient{config: viq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := viq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := viq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnerabilityid.Table, vulnerabilityid.FieldID, selector),
			sqlgraph.To(vulnerabilitymetadata.Table, vulnerabilitymetadata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, vulnerabilityid.VulnerabilityMetadataTable, vulnerabilityid.VulnerabilityMetadataColumn),
		)
		fromU = sqlgraph.SetNeighbors(viq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VulnerabilityID entity from the query.
// Returns a *NotFoundError when no VulnerabilityID was found.
func (viq *VulnerabilityIDQuery) First(ctx context.Context) (*VulnerabilityID, error) {
	nodes, err := viq.Limit(1).All(setContextOp(ctx, viq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vulnerabilityid.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (viq *VulnerabilityIDQuery) FirstX(ctx context.Context) *VulnerabilityID {
	node, err := viq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VulnerabilityID ID from the query.
// Returns a *NotFoundError when no VulnerabilityID ID was found.
func (viq *VulnerabilityIDQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = viq.Limit(1).IDs(setContextOp(ctx, viq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vulnerabilityid.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (viq *VulnerabilityIDQuery) FirstIDX(ctx context.Context) int {
	id, err := viq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VulnerabilityID entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VulnerabilityID entity is found.
// Returns a *NotFoundError when no VulnerabilityID entities are found.
func (viq *VulnerabilityIDQuery) Only(ctx context.Context) (*VulnerabilityID, error) {
	nodes, err := viq.Limit(2).All(setContextOp(ctx, viq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vulnerabilityid.Label}
	default:
		return nil, &NotSingularError{vulnerabilityid.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (viq *VulnerabilityIDQuery) OnlyX(ctx context.Context) *VulnerabilityID {
	node, err := viq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VulnerabilityID ID in the query.
// Returns a *NotSingularError when more than one VulnerabilityID ID is found.
// Returns a *NotFoundError when no entities are found.
func (viq *VulnerabilityIDQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = viq.Limit(2).IDs(setContextOp(ctx, viq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vulnerabilityid.Label}
	default:
		err = &NotSingularError{vulnerabilityid.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (viq *VulnerabilityIDQuery) OnlyIDX(ctx context.Context) int {
	id, err := viq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VulnerabilityIDs.
func (viq *VulnerabilityIDQuery) All(ctx context.Context) ([]*VulnerabilityID, error) {
	ctx = setContextOp(ctx, viq.ctx, "All")
	if err := viq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VulnerabilityID, *VulnerabilityIDQuery]()
	return withInterceptors[[]*VulnerabilityID](ctx, viq, qr, viq.inters)
}

// AllX is like All, but panics if an error occurs.
func (viq *VulnerabilityIDQuery) AllX(ctx context.Context) []*VulnerabilityID {
	nodes, err := viq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VulnerabilityID IDs.
func (viq *VulnerabilityIDQuery) IDs(ctx context.Context) (ids []int, err error) {
	if viq.ctx.Unique == nil && viq.path != nil {
		viq.Unique(true)
	}
	ctx = setContextOp(ctx, viq.ctx, "IDs")
	if err = viq.Select(vulnerabilityid.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (viq *VulnerabilityIDQuery) IDsX(ctx context.Context) []int {
	ids, err := viq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (viq *VulnerabilityIDQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, viq.ctx, "Count")
	if err := viq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, viq, querierCount[*VulnerabilityIDQuery](), viq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (viq *VulnerabilityIDQuery) CountX(ctx context.Context) int {
	count, err := viq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (viq *VulnerabilityIDQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, viq.ctx, "Exist")
	switch _, err := viq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (viq *VulnerabilityIDQuery) ExistX(ctx context.Context) bool {
	exist, err := viq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VulnerabilityIDQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (viq *VulnerabilityIDQuery) Clone() *VulnerabilityIDQuery {
	if viq == nil {
		return nil
	}
	return &VulnerabilityIDQuery{
		config:                    viq.config,
		ctx:                       viq.ctx.Clone(),
		order:                     append([]vulnerabilityid.OrderOption{}, viq.order...),
		inters:                    append([]Interceptor{}, viq.inters...),
		predicates:                append([]predicate.VulnerabilityID{}, viq.predicates...),
		withType:                  viq.withType.Clone(),
		withVulnEquals:            viq.withVulnEquals.Clone(),
		withVulnerabilityMetadata: viq.withVulnerabilityMetadata.Clone(),
		// clone intermediate query.
		sql:  viq.sql.Clone(),
		path: viq.path,
	}
}

// WithType tells the query-builder to eager-load the nodes that are connected to
// the "type" edge. The optional arguments are used to configure the query builder of the edge.
func (viq *VulnerabilityIDQuery) WithType(opts ...func(*VulnerabilityTypeQuery)) *VulnerabilityIDQuery {
	query := (&VulnerabilityTypeClient{config: viq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	viq.withType = query
	return viq
}

// WithVulnEquals tells the query-builder to eager-load the nodes that are connected to
// the "vuln_equals" edge. The optional arguments are used to configure the query builder of the edge.
func (viq *VulnerabilityIDQuery) WithVulnEquals(opts ...func(*VulnEqualQuery)) *VulnerabilityIDQuery {
	query := (&VulnEqualClient{config: viq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	viq.withVulnEquals = query
	return viq
}

// WithVulnerabilityMetadata tells the query-builder to eager-load the nodes that are connected to
// the "vulnerability_metadata" edge. The optional arguments are used to configure the query builder of the edge.
func (viq *VulnerabilityIDQuery) WithVulnerabilityMetadata(opts ...func(*VulnerabilityMetadataQuery)) *VulnerabilityIDQuery {
	query := (&VulnerabilityMetadataClient{config: viq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	viq.withVulnerabilityMetadata = query
	return viq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		VulnerabilityID string `json:"vulnerability_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VulnerabilityID.Query().
//		GroupBy(vulnerabilityid.FieldVulnerabilityID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (viq *VulnerabilityIDQuery) GroupBy(field string, fields ...string) *VulnerabilityIDGroupBy {
	viq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VulnerabilityIDGroupBy{build: viq}
	grbuild.flds = &viq.ctx.Fields
	grbuild.label = vulnerabilityid.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		VulnerabilityID string `json:"vulnerability_id,omitempty"`
//	}
//
//	client.VulnerabilityID.Query().
//		Select(vulnerabilityid.FieldVulnerabilityID).
//		Scan(ctx, &v)
func (viq *VulnerabilityIDQuery) Select(fields ...string) *VulnerabilityIDSelect {
	viq.ctx.Fields = append(viq.ctx.Fields, fields...)
	sbuild := &VulnerabilityIDSelect{VulnerabilityIDQuery: viq}
	sbuild.label = vulnerabilityid.Label
	sbuild.flds, sbuild.scan = &viq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VulnerabilityIDSelect configured with the given aggregations.
func (viq *VulnerabilityIDQuery) Aggregate(fns ...AggregateFunc) *VulnerabilityIDSelect {
	return viq.Select().Aggregate(fns...)
}

func (viq *VulnerabilityIDQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range viq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, viq); err != nil {
				return err
			}
		}
	}
	for _, f := range viq.ctx.Fields {
		if !vulnerabilityid.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if viq.path != nil {
		prev, err := viq.path(ctx)
		if err != nil {
			return err
		}
		viq.sql = prev
	}
	return nil
}

func (viq *VulnerabilityIDQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VulnerabilityID, error) {
	var (
		nodes       = []*VulnerabilityID{}
		_spec       = viq.querySpec()
		loadedTypes = [3]bool{
			viq.withType != nil,
			viq.withVulnEquals != nil,
			viq.withVulnerabilityMetadata != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VulnerabilityID).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VulnerabilityID{config: viq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(viq.modifiers) > 0 {
		_spec.Modifiers = viq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, viq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := viq.withType; query != nil {
		if err := viq.loadType(ctx, query, nodes, nil,
			func(n *VulnerabilityID, e *VulnerabilityType) { n.Edges.Type = e }); err != nil {
			return nil, err
		}
	}
	if query := viq.withVulnEquals; query != nil {
		if err := viq.loadVulnEquals(ctx, query, nodes,
			func(n *VulnerabilityID) { n.Edges.VulnEquals = []*VulnEqual{} },
			func(n *VulnerabilityID, e *VulnEqual) { n.Edges.VulnEquals = append(n.Edges.VulnEquals, e) }); err != nil {
			return nil, err
		}
	}
	if query := viq.withVulnerabilityMetadata; query != nil {
		if err := viq.loadVulnerabilityMetadata(ctx, query, nodes,
			func(n *VulnerabilityID) { n.Edges.VulnerabilityMetadata = []*VulnerabilityMetadata{} },
			func(n *VulnerabilityID, e *VulnerabilityMetadata) {
				n.Edges.VulnerabilityMetadata = append(n.Edges.VulnerabilityMetadata, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range viq.withNamedVulnEquals {
		if err := viq.loadVulnEquals(ctx, query, nodes,
			func(n *VulnerabilityID) { n.appendNamedVulnEquals(name) },
			func(n *VulnerabilityID, e *VulnEqual) { n.appendNamedVulnEquals(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range viq.withNamedVulnerabilityMetadata {
		if err := viq.loadVulnerabilityMetadata(ctx, query, nodes,
			func(n *VulnerabilityID) { n.appendNamedVulnerabilityMetadata(name) },
			func(n *VulnerabilityID, e *VulnerabilityMetadata) { n.appendNamedVulnerabilityMetadata(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range viq.loadTotal {
		if err := viq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (viq *VulnerabilityIDQuery) loadType(ctx context.Context, query *VulnerabilityTypeQuery, nodes []*VulnerabilityID, init func(*VulnerabilityID), assign func(*VulnerabilityID, *VulnerabilityType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*VulnerabilityID)
	for i := range nodes {
		fk := nodes[i].TypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(vulnerabilitytype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (viq *VulnerabilityIDQuery) loadVulnEquals(ctx context.Context, query *VulnEqualQuery, nodes []*VulnerabilityID, init func(*VulnerabilityID), assign func(*VulnerabilityID, *VulnEqual)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*VulnerabilityID)
	nids := make(map[int]map[*VulnerabilityID]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(vulnerabilityid.VulnEqualsTable)
		s.Join(joinT).On(s.C(vulnequal.FieldID), joinT.C(vulnerabilityid.VulnEqualsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(vulnerabilityid.VulnEqualsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(vulnerabilityid.VulnEqualsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*VulnerabilityID]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*VulnEqual](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "vuln_equals" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (viq *VulnerabilityIDQuery) loadVulnerabilityMetadata(ctx context.Context, query *VulnerabilityMetadataQuery, nodes []*VulnerabilityID, init func(*VulnerabilityID), assign func(*VulnerabilityID, *VulnerabilityMetadata)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*VulnerabilityID)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(vulnerabilitymetadata.FieldVulnerabilityIDID)
	}
	query.Where(predicate.VulnerabilityMetadata(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(vulnerabilityid.VulnerabilityMetadataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VulnerabilityIDID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "vulnerability_id_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (viq *VulnerabilityIDQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := viq.querySpec()
	if len(viq.modifiers) > 0 {
		_spec.Modifiers = viq.modifiers
	}
	_spec.Node.Columns = viq.ctx.Fields
	if len(viq.ctx.Fields) > 0 {
		_spec.Unique = viq.ctx.Unique != nil && *viq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, viq.driver, _spec)
}

func (viq *VulnerabilityIDQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(vulnerabilityid.Table, vulnerabilityid.Columns, sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt))
	_spec.From = viq.sql
	if unique := viq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if viq.path != nil {
		_spec.Unique = true
	}
	if fields := viq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerabilityid.FieldID)
		for i := range fields {
			if fields[i] != vulnerabilityid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if viq.withType != nil {
			_spec.Node.AddColumnOnce(vulnerabilityid.FieldTypeID)
		}
	}
	if ps := viq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := viq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := viq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := viq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (viq *VulnerabilityIDQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(viq.driver.Dialect())
	t1 := builder.Table(vulnerabilityid.Table)
	columns := viq.ctx.Fields
	if len(columns) == 0 {
		columns = vulnerabilityid.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if viq.sql != nil {
		selector = viq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if viq.ctx.Unique != nil && *viq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range viq.predicates {
		p(selector)
	}
	for _, p := range viq.order {
		p(selector)
	}
	if offset := viq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := viq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedVulnEquals tells the query-builder to eager-load the nodes that are connected to the "vuln_equals"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (viq *VulnerabilityIDQuery) WithNamedVulnEquals(name string, opts ...func(*VulnEqualQuery)) *VulnerabilityIDQuery {
	query := (&VulnEqualClient{config: viq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if viq.withNamedVulnEquals == nil {
		viq.withNamedVulnEquals = make(map[string]*VulnEqualQuery)
	}
	viq.withNamedVulnEquals[name] = query
	return viq
}

// WithNamedVulnerabilityMetadata tells the query-builder to eager-load the nodes that are connected to the "vulnerability_metadata"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (viq *VulnerabilityIDQuery) WithNamedVulnerabilityMetadata(name string, opts ...func(*VulnerabilityMetadataQuery)) *VulnerabilityIDQuery {
	query := (&VulnerabilityMetadataClient{config: viq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if viq.withNamedVulnerabilityMetadata == nil {
		viq.withNamedVulnerabilityMetadata = make(map[string]*VulnerabilityMetadataQuery)
	}
	viq.withNamedVulnerabilityMetadata[name] = query
	return viq
}

// VulnerabilityIDGroupBy is the group-by builder for VulnerabilityID entities.
type VulnerabilityIDGroupBy struct {
	selector
	build *VulnerabilityIDQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vigb *VulnerabilityIDGroupBy) Aggregate(fns ...AggregateFunc) *VulnerabilityIDGroupBy {
	vigb.fns = append(vigb.fns, fns...)
	return vigb
}

// Scan applies the selector query and scans the result into the given value.
func (vigb *VulnerabilityIDGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vigb.build.ctx, "GroupBy")
	if err := vigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VulnerabilityIDQuery, *VulnerabilityIDGroupBy](ctx, vigb.build, vigb, vigb.build.inters, v)
}

func (vigb *VulnerabilityIDGroupBy) sqlScan(ctx context.Context, root *VulnerabilityIDQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vigb.fns))
	for _, fn := range vigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vigb.flds)+len(vigb.fns))
		for _, f := range *vigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VulnerabilityIDSelect is the builder for selecting fields of VulnerabilityID entities.
type VulnerabilityIDSelect struct {
	*VulnerabilityIDQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vis *VulnerabilityIDSelect) Aggregate(fns ...AggregateFunc) *VulnerabilityIDSelect {
	vis.fns = append(vis.fns, fns...)
	return vis
}

// Scan applies the selector query and scans the result into the given value.
func (vis *VulnerabilityIDSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vis.ctx, "Select")
	if err := vis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VulnerabilityIDQuery, *VulnerabilityIDSelect](ctx, vis.VulnerabilityIDQuery, vis, vis.inters, v)
}

func (vis *VulnerabilityIDSelect) sqlScan(ctx context.Context, root *VulnerabilityIDQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vis.fns))
	for _, fn := range vis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

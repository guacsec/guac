// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hasmetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// HasMetadataDelete is the builder for deleting a HasMetadata entity.
type HasMetadataDelete struct {
	config
	hooks    []Hook
	mutation *HasMetadataMutation
}

// Where appends a list predicates to the HasMetadataDelete builder.
func (hmd *HasMetadataDelete) Where(ps ...predicate.HasMetadata) *HasMetadataDelete {
	hmd.mutation.Where(ps...)
	return hmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hmd *HasMetadataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hmd.sqlExec, hmd.mutation, hmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hmd *HasMetadataDelete) ExecX(ctx context.Context) int {
	n, err := hmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hmd *HasMetadataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hasmetadata.Table, sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeInt))
	if ps := hmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hmd.mutation.done = true
	return affected, err
}

// HasMetadataDeleteOne is the builder for deleting a single HasMetadata entity.
type HasMetadataDeleteOne struct {
	hmd *HasMetadataDelete
}

// Where appends a list predicates to the HasMetadataDelete builder.
func (hmdo *HasMetadataDeleteOne) Where(ps ...predicate.HasMetadata) *HasMetadataDeleteOne {
	hmdo.hmd.mutation.Where(ps...)
	return hmdo
}

// Exec executes the deletion query.
func (hmdo *HasMetadataDeleteOne) Exec(ctx context.Context) error {
	n, err := hmdo.hmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hasmetadata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hmdo *HasMetadataDeleteOne) ExecX(ctx context.Context) {
	if err := hmdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
)

// BillOfMaterials is the model entity for the BillOfMaterials schema.
type BillOfMaterials struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID *int `json:"package_id,omitempty"`
	// ArtifactID holds the value of the "artifact_id" field.
	ArtifactID *int `json:"artifact_id,omitempty"`
	// SBOM's URI
	URI string `json:"uri,omitempty"`
	// Digest algorithm
	Algorithm string `json:"algorithm,omitempty"`
	// Digest holds the value of the "digest" field.
	Digest string `json:"digest,omitempty"`
	// DownloadLocation holds the value of the "download_location" field.
	DownloadLocation string `json:"download_location,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// GUAC collector for the document
	Collector string `json:"collector,omitempty"`
	// KnownSince holds the value of the "known_since" field.
	KnownSince time.Time `json:"known_since,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillOfMaterialsQuery when eager-loading is set.
	Edges        BillOfMaterialsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillOfMaterialsEdges holds the relations/edges for other nodes in the graph.
type BillOfMaterialsEdges struct {
	// Package holds the value of the package edge.
	Package *PackageVersion `json:"package,omitempty"`
	// Artifact holds the value of the artifact edge.
	Artifact *Artifact `json:"artifact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillOfMaterialsEdges) PackageOrErr() (*PackageVersion, error) {
	if e.loadedTypes[0] {
		if e.Package == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.Package, nil
	}
	return nil, &NotLoadedError{edge: "package"}
}

// ArtifactOrErr returns the Artifact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillOfMaterialsEdges) ArtifactOrErr() (*Artifact, error) {
	if e.loadedTypes[1] {
		if e.Artifact == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: artifact.Label}
		}
		return e.Artifact, nil
	}
	return nil, &NotLoadedError{edge: "artifact"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillOfMaterials) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billofmaterials.FieldID, billofmaterials.FieldPackageID, billofmaterials.FieldArtifactID:
			values[i] = new(sql.NullInt64)
		case billofmaterials.FieldURI, billofmaterials.FieldAlgorithm, billofmaterials.FieldDigest, billofmaterials.FieldDownloadLocation, billofmaterials.FieldOrigin, billofmaterials.FieldCollector:
			values[i] = new(sql.NullString)
		case billofmaterials.FieldKnownSince:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillOfMaterials fields.
func (bom *BillOfMaterials) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billofmaterials.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bom.ID = int(value.Int64)
		case billofmaterials.FieldPackageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value.Valid {
				bom.PackageID = new(int)
				*bom.PackageID = int(value.Int64)
			}
		case billofmaterials.FieldArtifactID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field artifact_id", values[i])
			} else if value.Valid {
				bom.ArtifactID = new(int)
				*bom.ArtifactID = int(value.Int64)
			}
		case billofmaterials.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				bom.URI = value.String
			}
		case billofmaterials.FieldAlgorithm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algorithm", values[i])
			} else if value.Valid {
				bom.Algorithm = value.String
			}
		case billofmaterials.FieldDigest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digest", values[i])
			} else if value.Valid {
				bom.Digest = value.String
			}
		case billofmaterials.FieldDownloadLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_location", values[i])
			} else if value.Valid {
				bom.DownloadLocation = value.String
			}
		case billofmaterials.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				bom.Origin = value.String
			}
		case billofmaterials.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				bom.Collector = value.String
			}
		case billofmaterials.FieldKnownSince:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field known_since", values[i])
			} else if value.Valid {
				bom.KnownSince = value.Time
			}
		default:
			bom.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillOfMaterials.
// This includes values selected through modifiers, order, etc.
func (bom *BillOfMaterials) Value(name string) (ent.Value, error) {
	return bom.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the BillOfMaterials entity.
func (bom *BillOfMaterials) QueryPackage() *PackageVersionQuery {
	return NewBillOfMaterialsClient(bom.config).QueryPackage(bom)
}

// QueryArtifact queries the "artifact" edge of the BillOfMaterials entity.
func (bom *BillOfMaterials) QueryArtifact() *ArtifactQuery {
	return NewBillOfMaterialsClient(bom.config).QueryArtifact(bom)
}

// Update returns a builder for updating this BillOfMaterials.
// Note that you need to call BillOfMaterials.Unwrap() before calling this method if this BillOfMaterials
// was returned from a transaction, and the transaction was committed or rolled back.
func (bom *BillOfMaterials) Update() *BillOfMaterialsUpdateOne {
	return NewBillOfMaterialsClient(bom.config).UpdateOne(bom)
}

// Unwrap unwraps the BillOfMaterials entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bom *BillOfMaterials) Unwrap() *BillOfMaterials {
	_tx, ok := bom.config.driver.(*txDriver)
	if !ok {
		panic("ent: BillOfMaterials is not a transactional entity")
	}
	bom.config.driver = _tx.drv
	return bom
}

// String implements the fmt.Stringer.
func (bom *BillOfMaterials) String() string {
	var builder strings.Builder
	builder.WriteString("BillOfMaterials(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bom.ID))
	if v := bom.PackageID; v != nil {
		builder.WriteString("package_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bom.ArtifactID; v != nil {
		builder.WriteString("artifact_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("uri=")
	builder.WriteString(bom.URI)
	builder.WriteString(", ")
	builder.WriteString("algorithm=")
	builder.WriteString(bom.Algorithm)
	builder.WriteString(", ")
	builder.WriteString("digest=")
	builder.WriteString(bom.Digest)
	builder.WriteString(", ")
	builder.WriteString("download_location=")
	builder.WriteString(bom.DownloadLocation)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(bom.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(bom.Collector)
	builder.WriteString(", ")
	builder.WriteString("known_since=")
	builder.WriteString(bom.KnownSince.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BillOfMaterialsSlice is a parsable slice of BillOfMaterials.
type BillOfMaterialsSlice []*BillOfMaterials

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitymetadata"
)

// VulnerabilityMetadata is the model entity for the VulnerabilityMetadata schema.
type VulnerabilityMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VulnerabilityIDID holds the value of the "vulnerability_id_id" field.
	VulnerabilityIDID int `json:"vulnerability_id_id,omitempty"`
	// ScoreType holds the value of the "score_type" field.
	ScoreType vulnerabilitymetadata.ScoreType `json:"score_type,omitempty"`
	// ScoreValue holds the value of the "score_value" field.
	ScoreValue float64 `json:"score_value,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VulnerabilityMetadataQuery when eager-loading is set.
	Edges        VulnerabilityMetadataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VulnerabilityMetadataEdges holds the relations/edges for other nodes in the graph.
type VulnerabilityMetadataEdges struct {
	// VulnerabilityID holds the value of the vulnerability_id edge.
	VulnerabilityID *VulnerabilityID `json:"vulnerability_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// VulnerabilityIDOrErr returns the VulnerabilityID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VulnerabilityMetadataEdges) VulnerabilityIDOrErr() (*VulnerabilityID, error) {
	if e.loadedTypes[0] {
		if e.VulnerabilityID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vulnerabilityid.Label}
		}
		return e.VulnerabilityID, nil
	}
	return nil, &NotLoadedError{edge: "vulnerability_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VulnerabilityMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vulnerabilitymetadata.FieldScoreValue:
			values[i] = new(sql.NullFloat64)
		case vulnerabilitymetadata.FieldID, vulnerabilitymetadata.FieldVulnerabilityIDID:
			values[i] = new(sql.NullInt64)
		case vulnerabilitymetadata.FieldScoreType, vulnerabilitymetadata.FieldOrigin, vulnerabilitymetadata.FieldCollector:
			values[i] = new(sql.NullString)
		case vulnerabilitymetadata.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VulnerabilityMetadata fields.
func (vm *VulnerabilityMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vulnerabilitymetadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vm.ID = int(value.Int64)
		case vulnerabilitymetadata.FieldVulnerabilityIDID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vulnerability_id_id", values[i])
			} else if value.Valid {
				vm.VulnerabilityIDID = int(value.Int64)
			}
		case vulnerabilitymetadata.FieldScoreType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field score_type", values[i])
			} else if value.Valid {
				vm.ScoreType = vulnerabilitymetadata.ScoreType(value.String)
			}
		case vulnerabilitymetadata.FieldScoreValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score_value", values[i])
			} else if value.Valid {
				vm.ScoreValue = value.Float64
			}
		case vulnerabilitymetadata.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				vm.Timestamp = value.Time
			}
		case vulnerabilitymetadata.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				vm.Origin = value.String
			}
		case vulnerabilitymetadata.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				vm.Collector = value.String
			}
		default:
			vm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VulnerabilityMetadata.
// This includes values selected through modifiers, order, etc.
func (vm *VulnerabilityMetadata) Value(name string) (ent.Value, error) {
	return vm.selectValues.Get(name)
}

// QueryVulnerabilityID queries the "vulnerability_id" edge of the VulnerabilityMetadata entity.
func (vm *VulnerabilityMetadata) QueryVulnerabilityID() *VulnerabilityIDQuery {
	return NewVulnerabilityMetadataClient(vm.config).QueryVulnerabilityID(vm)
}

// Update returns a builder for updating this VulnerabilityMetadata.
// Note that you need to call VulnerabilityMetadata.Unwrap() before calling this method if this VulnerabilityMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (vm *VulnerabilityMetadata) Update() *VulnerabilityMetadataUpdateOne {
	return NewVulnerabilityMetadataClient(vm.config).UpdateOne(vm)
}

// Unwrap unwraps the VulnerabilityMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vm *VulnerabilityMetadata) Unwrap() *VulnerabilityMetadata {
	_tx, ok := vm.config.driver.(*txDriver)
	if !ok {
		panic("ent: VulnerabilityMetadata is not a transactional entity")
	}
	vm.config.driver = _tx.drv
	return vm
}

// String implements the fmt.Stringer.
func (vm *VulnerabilityMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("VulnerabilityMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vm.ID))
	builder.WriteString("vulnerability_id_id=")
	builder.WriteString(fmt.Sprintf("%v", vm.VulnerabilityIDID))
	builder.WriteString(", ")
	builder.WriteString("score_type=")
	builder.WriteString(fmt.Sprintf("%v", vm.ScoreType))
	builder.WriteString(", ")
	builder.WriteString("score_value=")
	builder.WriteString(fmt.Sprintf("%v", vm.ScoreValue))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(vm.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(vm.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(vm.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// VulnerabilityMetadataSlice is a parsable slice of VulnerabilityMetadata.
type VulnerabilityMetadataSlice []*VulnerabilityMetadata

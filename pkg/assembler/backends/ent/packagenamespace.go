// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagetype"
)

// PackageNamespace is the model entity for the PackageNamespace schema.
type PackageNamespace struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID int `json:"package_id,omitempty"`
	// In the pURL representation, each PackageNamespace matches the pkg:<type>/<namespace>/ partial pURL
	Namespace string `json:"namespace,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackageNamespaceQuery when eager-loading is set.
	Edges        PackageNamespaceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PackageNamespaceEdges holds the relations/edges for other nodes in the graph.
type PackageNamespaceEdges struct {
	// Package holds the value of the package edge.
	Package *PackageType `json:"package,omitempty"`
	// Names holds the value of the names edge.
	Names []*PackageName `json:"names,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedNames map[string][]*PackageName
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackageNamespaceEdges) PackageOrErr() (*PackageType, error) {
	if e.loadedTypes[0] {
		if e.Package == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packagetype.Label}
		}
		return e.Package, nil
	}
	return nil, &NotLoadedError{edge: "package"}
}

// NamesOrErr returns the Names value or an error if the edge
// was not loaded in eager-loading.
func (e PackageNamespaceEdges) NamesOrErr() ([]*PackageName, error) {
	if e.loadedTypes[1] {
		return e.Names, nil
	}
	return nil, &NotLoadedError{edge: "names"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PackageNamespace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case packagenamespace.FieldID, packagenamespace.FieldPackageID:
			values[i] = new(sql.NullInt64)
		case packagenamespace.FieldNamespace:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PackageNamespace fields.
func (pn *PackageNamespace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packagenamespace.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pn.ID = int(value.Int64)
		case packagenamespace.FieldPackageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value.Valid {
				pn.PackageID = int(value.Int64)
			}
		case packagenamespace.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				pn.Namespace = value.String
			}
		default:
			pn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PackageNamespace.
// This includes values selected through modifiers, order, etc.
func (pn *PackageNamespace) Value(name string) (ent.Value, error) {
	return pn.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the PackageNamespace entity.
func (pn *PackageNamespace) QueryPackage() *PackageTypeQuery {
	return NewPackageNamespaceClient(pn.config).QueryPackage(pn)
}

// QueryNames queries the "names" edge of the PackageNamespace entity.
func (pn *PackageNamespace) QueryNames() *PackageNameQuery {
	return NewPackageNamespaceClient(pn.config).QueryNames(pn)
}

// Update returns a builder for updating this PackageNamespace.
// Note that you need to call PackageNamespace.Unwrap() before calling this method if this PackageNamespace
// was returned from a transaction, and the transaction was committed or rolled back.
func (pn *PackageNamespace) Update() *PackageNamespaceUpdateOne {
	return NewPackageNamespaceClient(pn.config).UpdateOne(pn)
}

// Unwrap unwraps the PackageNamespace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pn *PackageNamespace) Unwrap() *PackageNamespace {
	_tx, ok := pn.config.driver.(*txDriver)
	if !ok {
		panic("ent: PackageNamespace is not a transactional entity")
	}
	pn.config.driver = _tx.drv
	return pn
}

// String implements the fmt.Stringer.
func (pn *PackageNamespace) String() string {
	var builder strings.Builder
	builder.WriteString("PackageNamespace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pn.ID))
	builder.WriteString("package_id=")
	builder.WriteString(fmt.Sprintf("%v", pn.PackageID))
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(pn.Namespace)
	builder.WriteByte(')')
	return builder.String()
}

// NamedNames returns the Names named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pn *PackageNamespace) NamedNames(name string) ([]*PackageName, error) {
	if pn.Edges.namedNames == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pn.Edges.namedNames[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pn *PackageNamespace) appendNamedNames(name string, edges ...*PackageName) {
	if pn.Edges.namedNames == nil {
		pn.Edges.namedNames = make(map[string][]*PackageName)
	}
	if len(edges) == 0 {
		pn.Edges.namedNames[name] = []*PackageName{}
	} else {
		pn.Edges.namedNames[name] = append(pn.Edges.namedNames[name], edges...)
	}
}

// PackageNamespaces is a parsable slice of PackageNamespace.
type PackageNamespaces []*PackageNamespace

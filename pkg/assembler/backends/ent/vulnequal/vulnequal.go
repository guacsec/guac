// Code generated by ent, DO NOT EDIT.

package vulnequal

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the vulnequal type in the database.
	Label = "vuln_equal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVulnID holds the string denoting the vuln_id field in the database.
	FieldVulnID = "vuln_id"
	// FieldEqualVulnID holds the string denoting the equal_vuln_id field in the database.
	FieldEqualVulnID = "equal_vuln_id"
	// FieldJustification holds the string denoting the justification field in the database.
	FieldJustification = "justification"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// FieldVulnerabilitiesHash holds the string denoting the vulnerabilities_hash field in the database.
	FieldVulnerabilitiesHash = "vulnerabilities_hash"
	// EdgeVulnerabilityA holds the string denoting the vulnerability_a edge name in mutations.
	EdgeVulnerabilityA = "vulnerability_a"
	// EdgeVulnerabilityB holds the string denoting the vulnerability_b edge name in mutations.
	EdgeVulnerabilityB = "vulnerability_b"
	// Table holds the table name of the vulnequal in the database.
	Table = "vuln_equals"
	// VulnerabilityATable is the table that holds the vulnerability_a relation/edge.
	VulnerabilityATable = "vuln_equals"
	// VulnerabilityAInverseTable is the table name for the VulnerabilityID entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilityid" package.
	VulnerabilityAInverseTable = "vulnerability_ids"
	// VulnerabilityAColumn is the table column denoting the vulnerability_a relation/edge.
	VulnerabilityAColumn = "vuln_id"
	// VulnerabilityBTable is the table that holds the vulnerability_b relation/edge.
	VulnerabilityBTable = "vuln_equals"
	// VulnerabilityBInverseTable is the table name for the VulnerabilityID entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilityid" package.
	VulnerabilityBInverseTable = "vulnerability_ids"
	// VulnerabilityBColumn is the table column denoting the vulnerability_b relation/edge.
	VulnerabilityBColumn = "equal_vuln_id"
)

// Columns holds all SQL columns for vulnequal fields.
var Columns = []string{
	FieldID,
	FieldVulnID,
	FieldEqualVulnID,
	FieldJustification,
	FieldOrigin,
	FieldCollector,
	FieldVulnerabilitiesHash,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the VulnEqual queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVulnID orders the results by the vuln_id field.
func ByVulnID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVulnID, opts...).ToFunc()
}

// ByEqualVulnID orders the results by the equal_vuln_id field.
func ByEqualVulnID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEqualVulnID, opts...).ToFunc()
}

// ByJustification orders the results by the justification field.
func ByJustification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJustification, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByVulnerabilitiesHash orders the results by the vulnerabilities_hash field.
func ByVulnerabilitiesHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVulnerabilitiesHash, opts...).ToFunc()
}

// ByVulnerabilityAField orders the results by vulnerability_a field.
func ByVulnerabilityAField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnerabilityAStep(), sql.OrderByField(field, opts...))
	}
}

// ByVulnerabilityBField orders the results by vulnerability_b field.
func ByVulnerabilityBField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnerabilityBStep(), sql.OrderByField(field, opts...))
	}
}
func newVulnerabilityAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnerabilityAInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, VulnerabilityATable, VulnerabilityAColumn),
	)
}
func newVulnerabilityBStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnerabilityBInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, VulnerabilityBTable, VulnerabilityBColumn),
	)
}

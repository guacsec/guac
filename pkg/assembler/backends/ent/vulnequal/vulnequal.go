// Code generated by ent, DO NOT EDIT.

package vulnequal

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vulnequal type in the database.
	Label = "vuln_equal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJustification holds the string denoting the justification field in the database.
	FieldJustification = "justification"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// EdgeVulnerabilityIds holds the string denoting the vulnerability_ids edge name in mutations.
	EdgeVulnerabilityIds = "vulnerability_ids"
	// Table holds the table name of the vulnequal in the database.
	Table = "vuln_equals"
	// VulnerabilityIdsTable is the table that holds the vulnerability_ids relation/edge. The primary key declared below.
	VulnerabilityIdsTable = "vuln_equal_vulnerability_ids"
	// VulnerabilityIdsInverseTable is the table name for the VulnerabilityID entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilityid" package.
	VulnerabilityIdsInverseTable = "vulnerability_ids"
)

// Columns holds all SQL columns for vulnequal fields.
var Columns = []string{
	FieldID,
	FieldJustification,
	FieldOrigin,
	FieldCollector,
}

var (
	// VulnerabilityIdsPrimaryKey and VulnerabilityIdsColumn2 are the table columns denoting the
	// primary key for the vulnerability_ids relation (M2M).
	VulnerabilityIdsPrimaryKey = []string{"vuln_equal_id", "vulnerability_id_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the VulnEqual queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByJustification orders the results by the justification field.
func ByJustification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJustification, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByVulnerabilityIdsCount orders the results by vulnerability_ids count.
func ByVulnerabilityIdsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVulnerabilityIdsStep(), opts...)
	}
}

// ByVulnerabilityIds orders the results by vulnerability_ids terms.
func ByVulnerabilityIds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnerabilityIdsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVulnerabilityIdsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnerabilityIdsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, VulnerabilityIdsTable, VulnerabilityIdsPrimaryKey...),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isdependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// IsDependencyQuery is the builder for querying IsDependency entities.
type IsDependencyQuery struct {
	config
	ctx                  *QueryContext
	order                []isdependency.OrderOption
	inters               []Interceptor
	predicates           []predicate.IsDependency
	withPackage          *PackageVersionQuery
	withDependentPackage *PackageNameQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IsDependencyQuery builder.
func (idq *IsDependencyQuery) Where(ps ...predicate.IsDependency) *IsDependencyQuery {
	idq.predicates = append(idq.predicates, ps...)
	return idq
}

// Limit the number of records to be returned by this query.
func (idq *IsDependencyQuery) Limit(limit int) *IsDependencyQuery {
	idq.ctx.Limit = &limit
	return idq
}

// Offset to start from.
func (idq *IsDependencyQuery) Offset(offset int) *IsDependencyQuery {
	idq.ctx.Offset = &offset
	return idq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (idq *IsDependencyQuery) Unique(unique bool) *IsDependencyQuery {
	idq.ctx.Unique = &unique
	return idq
}

// Order specifies how the records should be ordered.
func (idq *IsDependencyQuery) Order(o ...isdependency.OrderOption) *IsDependencyQuery {
	idq.order = append(idq.order, o...)
	return idq
}

// QueryPackage chains the current query on the "package" edge.
func (idq *IsDependencyQuery) QueryPackage() *PackageVersionQuery {
	query := (&PackageVersionClient{config: idq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(isdependency.Table, isdependency.FieldID, selector),
			sqlgraph.To(packageversion.Table, packageversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, isdependency.PackageTable, isdependency.PackageColumn),
		)
		fromU = sqlgraph.SetNeighbors(idq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDependentPackage chains the current query on the "dependent_package" edge.
func (idq *IsDependencyQuery) QueryDependentPackage() *PackageNameQuery {
	query := (&PackageNameClient{config: idq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(isdependency.Table, isdependency.FieldID, selector),
			sqlgraph.To(packagename.Table, packagename.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, isdependency.DependentPackageTable, isdependency.DependentPackageColumn),
		)
		fromU = sqlgraph.SetNeighbors(idq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IsDependency entity from the query.
// Returns a *NotFoundError when no IsDependency was found.
func (idq *IsDependencyQuery) First(ctx context.Context) (*IsDependency, error) {
	nodes, err := idq.Limit(1).All(setContextOp(ctx, idq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{isdependency.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (idq *IsDependencyQuery) FirstX(ctx context.Context) *IsDependency {
	node, err := idq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IsDependency ID from the query.
// Returns a *NotFoundError when no IsDependency ID was found.
func (idq *IsDependencyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = idq.Limit(1).IDs(setContextOp(ctx, idq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{isdependency.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (idq *IsDependencyQuery) FirstIDX(ctx context.Context) int {
	id, err := idq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IsDependency entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IsDependency entity is found.
// Returns a *NotFoundError when no IsDependency entities are found.
func (idq *IsDependencyQuery) Only(ctx context.Context) (*IsDependency, error) {
	nodes, err := idq.Limit(2).All(setContextOp(ctx, idq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{isdependency.Label}
	default:
		return nil, &NotSingularError{isdependency.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (idq *IsDependencyQuery) OnlyX(ctx context.Context) *IsDependency {
	node, err := idq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IsDependency ID in the query.
// Returns a *NotSingularError when more than one IsDependency ID is found.
// Returns a *NotFoundError when no entities are found.
func (idq *IsDependencyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = idq.Limit(2).IDs(setContextOp(ctx, idq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{isdependency.Label}
	default:
		err = &NotSingularError{isdependency.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (idq *IsDependencyQuery) OnlyIDX(ctx context.Context) int {
	id, err := idq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IsDependencies.
func (idq *IsDependencyQuery) All(ctx context.Context) ([]*IsDependency, error) {
	ctx = setContextOp(ctx, idq.ctx, "All")
	if err := idq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IsDependency, *IsDependencyQuery]()
	return withInterceptors[[]*IsDependency](ctx, idq, qr, idq.inters)
}

// AllX is like All, but panics if an error occurs.
func (idq *IsDependencyQuery) AllX(ctx context.Context) []*IsDependency {
	nodes, err := idq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IsDependency IDs.
func (idq *IsDependencyQuery) IDs(ctx context.Context) (ids []int, err error) {
	if idq.ctx.Unique == nil && idq.path != nil {
		idq.Unique(true)
	}
	ctx = setContextOp(ctx, idq.ctx, "IDs")
	if err = idq.Select(isdependency.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (idq *IsDependencyQuery) IDsX(ctx context.Context) []int {
	ids, err := idq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (idq *IsDependencyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, idq.ctx, "Count")
	if err := idq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, idq, querierCount[*IsDependencyQuery](), idq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (idq *IsDependencyQuery) CountX(ctx context.Context) int {
	count, err := idq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (idq *IsDependencyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, idq.ctx, "Exist")
	switch _, err := idq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (idq *IsDependencyQuery) ExistX(ctx context.Context) bool {
	exist, err := idq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IsDependencyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (idq *IsDependencyQuery) Clone() *IsDependencyQuery {
	if idq == nil {
		return nil
	}
	return &IsDependencyQuery{
		config:               idq.config,
		ctx:                  idq.ctx.Clone(),
		order:                append([]isdependency.OrderOption{}, idq.order...),
		inters:               append([]Interceptor{}, idq.inters...),
		predicates:           append([]predicate.IsDependency{}, idq.predicates...),
		withPackage:          idq.withPackage.Clone(),
		withDependentPackage: idq.withDependentPackage.Clone(),
		// clone intermediate query.
		sql:  idq.sql.Clone(),
		path: idq.path,
	}
}

// WithPackage tells the query-builder to eager-load the nodes that are connected to
// the "package" edge. The optional arguments are used to configure the query builder of the edge.
func (idq *IsDependencyQuery) WithPackage(opts ...func(*PackageVersionQuery)) *IsDependencyQuery {
	query := (&PackageVersionClient{config: idq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idq.withPackage = query
	return idq
}

// WithDependentPackage tells the query-builder to eager-load the nodes that are connected to
// the "dependent_package" edge. The optional arguments are used to configure the query builder of the edge.
func (idq *IsDependencyQuery) WithDependentPackage(opts ...func(*PackageNameQuery)) *IsDependencyQuery {
	query := (&PackageNameClient{config: idq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idq.withDependentPackage = query
	return idq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PackageID int `json:"package_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IsDependency.Query().
//		GroupBy(isdependency.FieldPackageID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (idq *IsDependencyQuery) GroupBy(field string, fields ...string) *IsDependencyGroupBy {
	idq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IsDependencyGroupBy{build: idq}
	grbuild.flds = &idq.ctx.Fields
	grbuild.label = isdependency.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PackageID int `json:"package_id,omitempty"`
//	}
//
//	client.IsDependency.Query().
//		Select(isdependency.FieldPackageID).
//		Scan(ctx, &v)
func (idq *IsDependencyQuery) Select(fields ...string) *IsDependencySelect {
	idq.ctx.Fields = append(idq.ctx.Fields, fields...)
	sbuild := &IsDependencySelect{IsDependencyQuery: idq}
	sbuild.label = isdependency.Label
	sbuild.flds, sbuild.scan = &idq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IsDependencySelect configured with the given aggregations.
func (idq *IsDependencyQuery) Aggregate(fns ...AggregateFunc) *IsDependencySelect {
	return idq.Select().Aggregate(fns...)
}

func (idq *IsDependencyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range idq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, idq); err != nil {
				return err
			}
		}
	}
	for _, f := range idq.ctx.Fields {
		if !isdependency.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if idq.path != nil {
		prev, err := idq.path(ctx)
		if err != nil {
			return err
		}
		idq.sql = prev
	}
	return nil
}

func (idq *IsDependencyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IsDependency, error) {
	var (
		nodes       = []*IsDependency{}
		_spec       = idq.querySpec()
		loadedTypes = [2]bool{
			idq.withPackage != nil,
			idq.withDependentPackage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IsDependency).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IsDependency{config: idq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, idq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := idq.withPackage; query != nil {
		if err := idq.loadPackage(ctx, query, nodes, nil,
			func(n *IsDependency, e *PackageVersion) { n.Edges.Package = e }); err != nil {
			return nil, err
		}
	}
	if query := idq.withDependentPackage; query != nil {
		if err := idq.loadDependentPackage(ctx, query, nodes, nil,
			func(n *IsDependency, e *PackageName) { n.Edges.DependentPackage = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (idq *IsDependencyQuery) loadPackage(ctx context.Context, query *PackageVersionQuery, nodes []*IsDependency, init func(*IsDependency), assign func(*IsDependency, *PackageVersion)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IsDependency)
	for i := range nodes {
		fk := nodes[i].PackageID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packageversion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "package_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (idq *IsDependencyQuery) loadDependentPackage(ctx context.Context, query *PackageNameQuery, nodes []*IsDependency, init func(*IsDependency), assign func(*IsDependency, *PackageName)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IsDependency)
	for i := range nodes {
		fk := nodes[i].DependentPackageID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packagename.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "dependent_package_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (idq *IsDependencyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := idq.querySpec()
	_spec.Node.Columns = idq.ctx.Fields
	if len(idq.ctx.Fields) > 0 {
		_spec.Unique = idq.ctx.Unique != nil && *idq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, idq.driver, _spec)
}

func (idq *IsDependencyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(isdependency.Table, isdependency.Columns, sqlgraph.NewFieldSpec(isdependency.FieldID, field.TypeInt))
	_spec.From = idq.sql
	if unique := idq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if idq.path != nil {
		_spec.Unique = true
	}
	if fields := idq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, isdependency.FieldID)
		for i := range fields {
			if fields[i] != isdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if idq.withPackage != nil {
			_spec.Node.AddColumnOnce(isdependency.FieldPackageID)
		}
		if idq.withDependentPackage != nil {
			_spec.Node.AddColumnOnce(isdependency.FieldDependentPackageID)
		}
	}
	if ps := idq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := idq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := idq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := idq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (idq *IsDependencyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(idq.driver.Dialect())
	t1 := builder.Table(isdependency.Table)
	columns := idq.ctx.Fields
	if len(columns) == 0 {
		columns = isdependency.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if idq.sql != nil {
		selector = idq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if idq.ctx.Unique != nil && *idq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range idq.predicates {
		p(selector)
	}
	for _, p := range idq.order {
		p(selector)
	}
	if offset := idq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := idq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IsDependencyGroupBy is the group-by builder for IsDependency entities.
type IsDependencyGroupBy struct {
	selector
	build *IsDependencyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (idgb *IsDependencyGroupBy) Aggregate(fns ...AggregateFunc) *IsDependencyGroupBy {
	idgb.fns = append(idgb.fns, fns...)
	return idgb
}

// Scan applies the selector query and scans the result into the given value.
func (idgb *IsDependencyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, idgb.build.ctx, "GroupBy")
	if err := idgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IsDependencyQuery, *IsDependencyGroupBy](ctx, idgb.build, idgb, idgb.build.inters, v)
}

func (idgb *IsDependencyGroupBy) sqlScan(ctx context.Context, root *IsDependencyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(idgb.fns))
	for _, fn := range idgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*idgb.flds)+len(idgb.fns))
		for _, f := range *idgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*idgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := idgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IsDependencySelect is the builder for selecting fields of IsDependency entities.
type IsDependencySelect struct {
	*IsDependencyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ids *IsDependencySelect) Aggregate(fns ...AggregateFunc) *IsDependencySelect {
	ids.fns = append(ids.fns, fns...)
	return ids
}

// Scan applies the selector query and scans the result into the given value.
func (ids *IsDependencySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ids.ctx, "Select")
	if err := ids.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IsDependencyQuery, *IsDependencySelect](ctx, ids.IsDependencyQuery, ids, ids.inters, v)
}

func (ids *IsDependencySelect) sqlScan(ctx context.Context, root *IsDependencyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ids.fns))
	for _, fn := range ids.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ids.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ids.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isdependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// IsDependencyUpdate is the builder for updating IsDependency entities.
type IsDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *IsDependencyMutation
}

// Where appends a list predicates to the IsDependencyUpdate builder.
func (idu *IsDependencyUpdate) Where(ps ...predicate.IsDependency) *IsDependencyUpdate {
	idu.mutation.Where(ps...)
	return idu
}

// SetPackageID sets the "package_id" field.
func (idu *IsDependencyUpdate) SetPackageID(i int) *IsDependencyUpdate {
	idu.mutation.SetPackageID(i)
	return idu
}

// SetDependentPackageID sets the "dependent_package_id" field.
func (idu *IsDependencyUpdate) SetDependentPackageID(i int) *IsDependencyUpdate {
	idu.mutation.SetDependentPackageID(i)
	return idu
}

// SetVersionRange sets the "version_range" field.
func (idu *IsDependencyUpdate) SetVersionRange(s string) *IsDependencyUpdate {
	idu.mutation.SetVersionRange(s)
	return idu
}

// SetDependencyType sets the "dependency_type" field.
func (idu *IsDependencyUpdate) SetDependencyType(s string) *IsDependencyUpdate {
	idu.mutation.SetDependencyType(s)
	return idu
}

// SetJustification sets the "justification" field.
func (idu *IsDependencyUpdate) SetJustification(s string) *IsDependencyUpdate {
	idu.mutation.SetJustification(s)
	return idu
}

// SetOrigin sets the "origin" field.
func (idu *IsDependencyUpdate) SetOrigin(s string) *IsDependencyUpdate {
	idu.mutation.SetOrigin(s)
	return idu
}

// SetCollector sets the "collector" field.
func (idu *IsDependencyUpdate) SetCollector(s string) *IsDependencyUpdate {
	idu.mutation.SetCollector(s)
	return idu
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (idu *IsDependencyUpdate) SetPackage(p *PackageVersion) *IsDependencyUpdate {
	return idu.SetPackageID(p.ID)
}

// SetDependentPackage sets the "dependent_package" edge to the PackageName entity.
func (idu *IsDependencyUpdate) SetDependentPackage(p *PackageName) *IsDependencyUpdate {
	return idu.SetDependentPackageID(p.ID)
}

// Mutation returns the IsDependencyMutation object of the builder.
func (idu *IsDependencyUpdate) Mutation() *IsDependencyMutation {
	return idu.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (idu *IsDependencyUpdate) ClearPackage() *IsDependencyUpdate {
	idu.mutation.ClearPackage()
	return idu
}

// ClearDependentPackage clears the "dependent_package" edge to the PackageName entity.
func (idu *IsDependencyUpdate) ClearDependentPackage() *IsDependencyUpdate {
	idu.mutation.ClearDependentPackage()
	return idu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (idu *IsDependencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, idu.sqlSave, idu.mutation, idu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idu *IsDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := idu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (idu *IsDependencyUpdate) Exec(ctx context.Context) error {
	_, err := idu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idu *IsDependencyUpdate) ExecX(ctx context.Context) {
	if err := idu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idu *IsDependencyUpdate) check() error {
	if _, ok := idu.mutation.PackageID(); idu.mutation.PackageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsDependency.package"`)
	}
	if _, ok := idu.mutation.DependentPackageID(); idu.mutation.DependentPackageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsDependency.dependent_package"`)
	}
	return nil
}

func (idu *IsDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := idu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(isdependency.Table, isdependency.Columns, sqlgraph.NewFieldSpec(isdependency.FieldID, field.TypeInt))
	if ps := idu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idu.mutation.VersionRange(); ok {
		_spec.SetField(isdependency.FieldVersionRange, field.TypeString, value)
	}
	if value, ok := idu.mutation.DependencyType(); ok {
		_spec.SetField(isdependency.FieldDependencyType, field.TypeString, value)
	}
	if value, ok := idu.mutation.Justification(); ok {
		_spec.SetField(isdependency.FieldJustification, field.TypeString, value)
	}
	if value, ok := idu.mutation.Origin(); ok {
		_spec.SetField(isdependency.FieldOrigin, field.TypeString, value)
	}
	if value, ok := idu.mutation.Collector(); ok {
		_spec.SetField(isdependency.FieldCollector, field.TypeString, value)
	}
	if idu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdependency.PackageTable,
			Columns: []string{isdependency.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idu.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdependency.PackageTable,
			Columns: []string{isdependency.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idu.mutation.DependentPackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdependency.DependentPackageTable,
			Columns: []string{isdependency.DependentPackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idu.mutation.DependentPackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdependency.DependentPackageTable,
			Columns: []string{isdependency.DependentPackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, idu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{isdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	idu.mutation.done = true
	return n, nil
}

// IsDependencyUpdateOne is the builder for updating a single IsDependency entity.
type IsDependencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IsDependencyMutation
}

// SetPackageID sets the "package_id" field.
func (iduo *IsDependencyUpdateOne) SetPackageID(i int) *IsDependencyUpdateOne {
	iduo.mutation.SetPackageID(i)
	return iduo
}

// SetDependentPackageID sets the "dependent_package_id" field.
func (iduo *IsDependencyUpdateOne) SetDependentPackageID(i int) *IsDependencyUpdateOne {
	iduo.mutation.SetDependentPackageID(i)
	return iduo
}

// SetVersionRange sets the "version_range" field.
func (iduo *IsDependencyUpdateOne) SetVersionRange(s string) *IsDependencyUpdateOne {
	iduo.mutation.SetVersionRange(s)
	return iduo
}

// SetDependencyType sets the "dependency_type" field.
func (iduo *IsDependencyUpdateOne) SetDependencyType(s string) *IsDependencyUpdateOne {
	iduo.mutation.SetDependencyType(s)
	return iduo
}

// SetJustification sets the "justification" field.
func (iduo *IsDependencyUpdateOne) SetJustification(s string) *IsDependencyUpdateOne {
	iduo.mutation.SetJustification(s)
	return iduo
}

// SetOrigin sets the "origin" field.
func (iduo *IsDependencyUpdateOne) SetOrigin(s string) *IsDependencyUpdateOne {
	iduo.mutation.SetOrigin(s)
	return iduo
}

// SetCollector sets the "collector" field.
func (iduo *IsDependencyUpdateOne) SetCollector(s string) *IsDependencyUpdateOne {
	iduo.mutation.SetCollector(s)
	return iduo
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (iduo *IsDependencyUpdateOne) SetPackage(p *PackageVersion) *IsDependencyUpdateOne {
	return iduo.SetPackageID(p.ID)
}

// SetDependentPackage sets the "dependent_package" edge to the PackageName entity.
func (iduo *IsDependencyUpdateOne) SetDependentPackage(p *PackageName) *IsDependencyUpdateOne {
	return iduo.SetDependentPackageID(p.ID)
}

// Mutation returns the IsDependencyMutation object of the builder.
func (iduo *IsDependencyUpdateOne) Mutation() *IsDependencyMutation {
	return iduo.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (iduo *IsDependencyUpdateOne) ClearPackage() *IsDependencyUpdateOne {
	iduo.mutation.ClearPackage()
	return iduo
}

// ClearDependentPackage clears the "dependent_package" edge to the PackageName entity.
func (iduo *IsDependencyUpdateOne) ClearDependentPackage() *IsDependencyUpdateOne {
	iduo.mutation.ClearDependentPackage()
	return iduo
}

// Where appends a list predicates to the IsDependencyUpdate builder.
func (iduo *IsDependencyUpdateOne) Where(ps ...predicate.IsDependency) *IsDependencyUpdateOne {
	iduo.mutation.Where(ps...)
	return iduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iduo *IsDependencyUpdateOne) Select(field string, fields ...string) *IsDependencyUpdateOne {
	iduo.fields = append([]string{field}, fields...)
	return iduo
}

// Save executes the query and returns the updated IsDependency entity.
func (iduo *IsDependencyUpdateOne) Save(ctx context.Context) (*IsDependency, error) {
	return withHooks(ctx, iduo.sqlSave, iduo.mutation, iduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iduo *IsDependencyUpdateOne) SaveX(ctx context.Context) *IsDependency {
	node, err := iduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iduo *IsDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := iduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iduo *IsDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := iduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iduo *IsDependencyUpdateOne) check() error {
	if _, ok := iduo.mutation.PackageID(); iduo.mutation.PackageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsDependency.package"`)
	}
	if _, ok := iduo.mutation.DependentPackageID(); iduo.mutation.DependentPackageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsDependency.dependent_package"`)
	}
	return nil
}

func (iduo *IsDependencyUpdateOne) sqlSave(ctx context.Context) (_node *IsDependency, err error) {
	if err := iduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(isdependency.Table, isdependency.Columns, sqlgraph.NewFieldSpec(isdependency.FieldID, field.TypeInt))
	id, ok := iduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IsDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, isdependency.FieldID)
		for _, f := range fields {
			if !isdependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != isdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iduo.mutation.VersionRange(); ok {
		_spec.SetField(isdependency.FieldVersionRange, field.TypeString, value)
	}
	if value, ok := iduo.mutation.DependencyType(); ok {
		_spec.SetField(isdependency.FieldDependencyType, field.TypeString, value)
	}
	if value, ok := iduo.mutation.Justification(); ok {
		_spec.SetField(isdependency.FieldJustification, field.TypeString, value)
	}
	if value, ok := iduo.mutation.Origin(); ok {
		_spec.SetField(isdependency.FieldOrigin, field.TypeString, value)
	}
	if value, ok := iduo.mutation.Collector(); ok {
		_spec.SetField(isdependency.FieldCollector, field.TypeString, value)
	}
	if iduo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdependency.PackageTable,
			Columns: []string{isdependency.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iduo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdependency.PackageTable,
			Columns: []string{isdependency.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iduo.mutation.DependentPackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdependency.DependentPackageTable,
			Columns: []string{isdependency.DependentPackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iduo.mutation.DependentPackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdependency.DependentPackageTable,
			Columns: []string{isdependency.DependentPackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IsDependency{config: iduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{isdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iduo.mutation.done = true
	return _node, nil
}

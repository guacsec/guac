// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifylegal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hasmetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hassourceat"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pointofcontact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// SourceNameQuery is the builder for querying SourceName entities.
type SourceNameQuery struct {
	config
	ctx                    *QueryContext
	order                  []sourcename.OrderOption
	inters                 []Interceptor
	predicates             []predicate.SourceName
	withOccurrences        *OccurrenceQuery
	withHasSourceAt        *HasSourceAtQuery
	withScorecard          *CertifyScorecardQuery
	withCertification      *CertificationQuery
	withMetadata           *HasMetadataQuery
	withPoc                *PointOfContactQuery
	withCertifyLegal       *CertifyLegalQuery
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*SourceName) error
	withNamedOccurrences   map[string]*OccurrenceQuery
	withNamedHasSourceAt   map[string]*HasSourceAtQuery
	withNamedScorecard     map[string]*CertifyScorecardQuery
	withNamedCertification map[string]*CertificationQuery
	withNamedMetadata      map[string]*HasMetadataQuery
	withNamedPoc           map[string]*PointOfContactQuery
	withNamedCertifyLegal  map[string]*CertifyLegalQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SourceNameQuery builder.
func (snq *SourceNameQuery) Where(ps ...predicate.SourceName) *SourceNameQuery {
	snq.predicates = append(snq.predicates, ps...)
	return snq
}

// Limit the number of records to be returned by this query.
func (snq *SourceNameQuery) Limit(limit int) *SourceNameQuery {
	snq.ctx.Limit = &limit
	return snq
}

// Offset to start from.
func (snq *SourceNameQuery) Offset(offset int) *SourceNameQuery {
	snq.ctx.Offset = &offset
	return snq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (snq *SourceNameQuery) Unique(unique bool) *SourceNameQuery {
	snq.ctx.Unique = &unique
	return snq
}

// Order specifies how the records should be ordered.
func (snq *SourceNameQuery) Order(o ...sourcename.OrderOption) *SourceNameQuery {
	snq.order = append(snq.order, o...)
	return snq
}

// QueryOccurrences chains the current query on the "occurrences" edge.
func (snq *SourceNameQuery) QueryOccurrences() *OccurrenceQuery {
	query := (&OccurrenceClient{config: snq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := snq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := snq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcename.Table, sourcename.FieldID, selector),
			sqlgraph.To(occurrence.Table, occurrence.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, sourcename.OccurrencesTable, sourcename.OccurrencesColumn),
		)
		fromU = sqlgraph.SetNeighbors(snq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHasSourceAt chains the current query on the "has_source_at" edge.
func (snq *SourceNameQuery) QueryHasSourceAt() *HasSourceAtQuery {
	query := (&HasSourceAtClient{config: snq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := snq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := snq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcename.Table, sourcename.FieldID, selector),
			sqlgraph.To(hassourceat.Table, hassourceat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, sourcename.HasSourceAtTable, sourcename.HasSourceAtColumn),
		)
		fromU = sqlgraph.SetNeighbors(snq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScorecard chains the current query on the "scorecard" edge.
func (snq *SourceNameQuery) QueryScorecard() *CertifyScorecardQuery {
	query := (&CertifyScorecardClient{config: snq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := snq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := snq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcename.Table, sourcename.FieldID, selector),
			sqlgraph.To(certifyscorecard.Table, certifyscorecard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, sourcename.ScorecardTable, sourcename.ScorecardColumn),
		)
		fromU = sqlgraph.SetNeighbors(snq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCertification chains the current query on the "certification" edge.
func (snq *SourceNameQuery) QueryCertification() *CertificationQuery {
	query := (&CertificationClient{config: snq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := snq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := snq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcename.Table, sourcename.FieldID, selector),
			sqlgraph.To(certification.Table, certification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, sourcename.CertificationTable, sourcename.CertificationColumn),
		)
		fromU = sqlgraph.SetNeighbors(snq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMetadata chains the current query on the "metadata" edge.
func (snq *SourceNameQuery) QueryMetadata() *HasMetadataQuery {
	query := (&HasMetadataClient{config: snq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := snq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := snq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcename.Table, sourcename.FieldID, selector),
			sqlgraph.To(hasmetadata.Table, hasmetadata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, sourcename.MetadataTable, sourcename.MetadataColumn),
		)
		fromU = sqlgraph.SetNeighbors(snq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPoc chains the current query on the "poc" edge.
func (snq *SourceNameQuery) QueryPoc() *PointOfContactQuery {
	query := (&PointOfContactClient{config: snq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := snq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := snq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcename.Table, sourcename.FieldID, selector),
			sqlgraph.To(pointofcontact.Table, pointofcontact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, sourcename.PocTable, sourcename.PocColumn),
		)
		fromU = sqlgraph.SetNeighbors(snq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCertifyLegal chains the current query on the "certify_legal" edge.
func (snq *SourceNameQuery) QueryCertifyLegal() *CertifyLegalQuery {
	query := (&CertifyLegalClient{config: snq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := snq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := snq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcename.Table, sourcename.FieldID, selector),
			sqlgraph.To(certifylegal.Table, certifylegal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, sourcename.CertifyLegalTable, sourcename.CertifyLegalColumn),
		)
		fromU = sqlgraph.SetNeighbors(snq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SourceName entity from the query.
// Returns a *NotFoundError when no SourceName was found.
func (snq *SourceNameQuery) First(ctx context.Context) (*SourceName, error) {
	nodes, err := snq.Limit(1).All(setContextOp(ctx, snq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sourcename.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (snq *SourceNameQuery) FirstX(ctx context.Context) *SourceName {
	node, err := snq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SourceName ID from the query.
// Returns a *NotFoundError when no SourceName ID was found.
func (snq *SourceNameQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = snq.Limit(1).IDs(setContextOp(ctx, snq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sourcename.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (snq *SourceNameQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := snq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SourceName entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SourceName entity is found.
// Returns a *NotFoundError when no SourceName entities are found.
func (snq *SourceNameQuery) Only(ctx context.Context) (*SourceName, error) {
	nodes, err := snq.Limit(2).All(setContextOp(ctx, snq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sourcename.Label}
	default:
		return nil, &NotSingularError{sourcename.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (snq *SourceNameQuery) OnlyX(ctx context.Context) *SourceName {
	node, err := snq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SourceName ID in the query.
// Returns a *NotSingularError when more than one SourceName ID is found.
// Returns a *NotFoundError when no entities are found.
func (snq *SourceNameQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = snq.Limit(2).IDs(setContextOp(ctx, snq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sourcename.Label}
	default:
		err = &NotSingularError{sourcename.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (snq *SourceNameQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := snq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SourceNames.
func (snq *SourceNameQuery) All(ctx context.Context) ([]*SourceName, error) {
	ctx = setContextOp(ctx, snq.ctx, "All")
	if err := snq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SourceName, *SourceNameQuery]()
	return withInterceptors[[]*SourceName](ctx, snq, qr, snq.inters)
}

// AllX is like All, but panics if an error occurs.
func (snq *SourceNameQuery) AllX(ctx context.Context) []*SourceName {
	nodes, err := snq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SourceName IDs.
func (snq *SourceNameQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if snq.ctx.Unique == nil && snq.path != nil {
		snq.Unique(true)
	}
	ctx = setContextOp(ctx, snq.ctx, "IDs")
	if err = snq.Select(sourcename.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (snq *SourceNameQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := snq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (snq *SourceNameQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, snq.ctx, "Count")
	if err := snq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, snq, querierCount[*SourceNameQuery](), snq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (snq *SourceNameQuery) CountX(ctx context.Context) int {
	count, err := snq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (snq *SourceNameQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, snq.ctx, "Exist")
	switch _, err := snq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (snq *SourceNameQuery) ExistX(ctx context.Context) bool {
	exist, err := snq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SourceNameQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (snq *SourceNameQuery) Clone() *SourceNameQuery {
	if snq == nil {
		return nil
	}
	return &SourceNameQuery{
		config:            snq.config,
		ctx:               snq.ctx.Clone(),
		order:             append([]sourcename.OrderOption{}, snq.order...),
		inters:            append([]Interceptor{}, snq.inters...),
		predicates:        append([]predicate.SourceName{}, snq.predicates...),
		withOccurrences:   snq.withOccurrences.Clone(),
		withHasSourceAt:   snq.withHasSourceAt.Clone(),
		withScorecard:     snq.withScorecard.Clone(),
		withCertification: snq.withCertification.Clone(),
		withMetadata:      snq.withMetadata.Clone(),
		withPoc:           snq.withPoc.Clone(),
		withCertifyLegal:  snq.withCertifyLegal.Clone(),
		// clone intermediate query.
		sql:  snq.sql.Clone(),
		path: snq.path,
	}
}

// WithOccurrences tells the query-builder to eager-load the nodes that are connected to
// the "occurrences" edge. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithOccurrences(opts ...func(*OccurrenceQuery)) *SourceNameQuery {
	query := (&OccurrenceClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snq.withOccurrences = query
	return snq
}

// WithHasSourceAt tells the query-builder to eager-load the nodes that are connected to
// the "has_source_at" edge. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithHasSourceAt(opts ...func(*HasSourceAtQuery)) *SourceNameQuery {
	query := (&HasSourceAtClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snq.withHasSourceAt = query
	return snq
}

// WithScorecard tells the query-builder to eager-load the nodes that are connected to
// the "scorecard" edge. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithScorecard(opts ...func(*CertifyScorecardQuery)) *SourceNameQuery {
	query := (&CertifyScorecardClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snq.withScorecard = query
	return snq
}

// WithCertification tells the query-builder to eager-load the nodes that are connected to
// the "certification" edge. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithCertification(opts ...func(*CertificationQuery)) *SourceNameQuery {
	query := (&CertificationClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snq.withCertification = query
	return snq
}

// WithMetadata tells the query-builder to eager-load the nodes that are connected to
// the "metadata" edge. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithMetadata(opts ...func(*HasMetadataQuery)) *SourceNameQuery {
	query := (&HasMetadataClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snq.withMetadata = query
	return snq
}

// WithPoc tells the query-builder to eager-load the nodes that are connected to
// the "poc" edge. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithPoc(opts ...func(*PointOfContactQuery)) *SourceNameQuery {
	query := (&PointOfContactClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snq.withPoc = query
	return snq
}

// WithCertifyLegal tells the query-builder to eager-load the nodes that are connected to
// the "certify_legal" edge. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithCertifyLegal(opts ...func(*CertifyLegalQuery)) *SourceNameQuery {
	query := (&CertifyLegalClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snq.withCertifyLegal = query
	return snq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SourceName.Query().
//		GroupBy(sourcename.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (snq *SourceNameQuery) GroupBy(field string, fields ...string) *SourceNameGroupBy {
	snq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SourceNameGroupBy{build: snq}
	grbuild.flds = &snq.ctx.Fields
	grbuild.label = sourcename.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//	}
//
//	client.SourceName.Query().
//		Select(sourcename.FieldType).
//		Scan(ctx, &v)
func (snq *SourceNameQuery) Select(fields ...string) *SourceNameSelect {
	snq.ctx.Fields = append(snq.ctx.Fields, fields...)
	sbuild := &SourceNameSelect{SourceNameQuery: snq}
	sbuild.label = sourcename.Label
	sbuild.flds, sbuild.scan = &snq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SourceNameSelect configured with the given aggregations.
func (snq *SourceNameQuery) Aggregate(fns ...AggregateFunc) *SourceNameSelect {
	return snq.Select().Aggregate(fns...)
}

func (snq *SourceNameQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range snq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, snq); err != nil {
				return err
			}
		}
	}
	for _, f := range snq.ctx.Fields {
		if !sourcename.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if snq.path != nil {
		prev, err := snq.path(ctx)
		if err != nil {
			return err
		}
		snq.sql = prev
	}
	return nil
}

func (snq *SourceNameQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SourceName, error) {
	var (
		nodes       = []*SourceName{}
		_spec       = snq.querySpec()
		loadedTypes = [7]bool{
			snq.withOccurrences != nil,
			snq.withHasSourceAt != nil,
			snq.withScorecard != nil,
			snq.withCertification != nil,
			snq.withMetadata != nil,
			snq.withPoc != nil,
			snq.withCertifyLegal != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SourceName).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SourceName{config: snq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(snq.modifiers) > 0 {
		_spec.Modifiers = snq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, snq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := snq.withOccurrences; query != nil {
		if err := snq.loadOccurrences(ctx, query, nodes,
			func(n *SourceName) { n.Edges.Occurrences = []*Occurrence{} },
			func(n *SourceName, e *Occurrence) { n.Edges.Occurrences = append(n.Edges.Occurrences, e) }); err != nil {
			return nil, err
		}
	}
	if query := snq.withHasSourceAt; query != nil {
		if err := snq.loadHasSourceAt(ctx, query, nodes,
			func(n *SourceName) { n.Edges.HasSourceAt = []*HasSourceAt{} },
			func(n *SourceName, e *HasSourceAt) { n.Edges.HasSourceAt = append(n.Edges.HasSourceAt, e) }); err != nil {
			return nil, err
		}
	}
	if query := snq.withScorecard; query != nil {
		if err := snq.loadScorecard(ctx, query, nodes,
			func(n *SourceName) { n.Edges.Scorecard = []*CertifyScorecard{} },
			func(n *SourceName, e *CertifyScorecard) { n.Edges.Scorecard = append(n.Edges.Scorecard, e) }); err != nil {
			return nil, err
		}
	}
	if query := snq.withCertification; query != nil {
		if err := snq.loadCertification(ctx, query, nodes,
			func(n *SourceName) { n.Edges.Certification = []*Certification{} },
			func(n *SourceName, e *Certification) { n.Edges.Certification = append(n.Edges.Certification, e) }); err != nil {
			return nil, err
		}
	}
	if query := snq.withMetadata; query != nil {
		if err := snq.loadMetadata(ctx, query, nodes,
			func(n *SourceName) { n.Edges.Metadata = []*HasMetadata{} },
			func(n *SourceName, e *HasMetadata) { n.Edges.Metadata = append(n.Edges.Metadata, e) }); err != nil {
			return nil, err
		}
	}
	if query := snq.withPoc; query != nil {
		if err := snq.loadPoc(ctx, query, nodes,
			func(n *SourceName) { n.Edges.Poc = []*PointOfContact{} },
			func(n *SourceName, e *PointOfContact) { n.Edges.Poc = append(n.Edges.Poc, e) }); err != nil {
			return nil, err
		}
	}
	if query := snq.withCertifyLegal; query != nil {
		if err := snq.loadCertifyLegal(ctx, query, nodes,
			func(n *SourceName) { n.Edges.CertifyLegal = []*CertifyLegal{} },
			func(n *SourceName, e *CertifyLegal) { n.Edges.CertifyLegal = append(n.Edges.CertifyLegal, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range snq.withNamedOccurrences {
		if err := snq.loadOccurrences(ctx, query, nodes,
			func(n *SourceName) { n.appendNamedOccurrences(name) },
			func(n *SourceName, e *Occurrence) { n.appendNamedOccurrences(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range snq.withNamedHasSourceAt {
		if err := snq.loadHasSourceAt(ctx, query, nodes,
			func(n *SourceName) { n.appendNamedHasSourceAt(name) },
			func(n *SourceName, e *HasSourceAt) { n.appendNamedHasSourceAt(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range snq.withNamedScorecard {
		if err := snq.loadScorecard(ctx, query, nodes,
			func(n *SourceName) { n.appendNamedScorecard(name) },
			func(n *SourceName, e *CertifyScorecard) { n.appendNamedScorecard(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range snq.withNamedCertification {
		if err := snq.loadCertification(ctx, query, nodes,
			func(n *SourceName) { n.appendNamedCertification(name) },
			func(n *SourceName, e *Certification) { n.appendNamedCertification(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range snq.withNamedMetadata {
		if err := snq.loadMetadata(ctx, query, nodes,
			func(n *SourceName) { n.appendNamedMetadata(name) },
			func(n *SourceName, e *HasMetadata) { n.appendNamedMetadata(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range snq.withNamedPoc {
		if err := snq.loadPoc(ctx, query, nodes,
			func(n *SourceName) { n.appendNamedPoc(name) },
			func(n *SourceName, e *PointOfContact) { n.appendNamedPoc(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range snq.withNamedCertifyLegal {
		if err := snq.loadCertifyLegal(ctx, query, nodes,
			func(n *SourceName) { n.appendNamedCertifyLegal(name) },
			func(n *SourceName, e *CertifyLegal) { n.appendNamedCertifyLegal(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range snq.loadTotal {
		if err := snq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (snq *SourceNameQuery) loadOccurrences(ctx context.Context, query *OccurrenceQuery, nodes []*SourceName, init func(*SourceName), assign func(*SourceName, *Occurrence)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SourceName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(occurrence.FieldSourceID)
	}
	query.Where(predicate.Occurrence(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sourcename.OccurrencesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SourceID
		if fk == nil {
			return fmt.Errorf(`foreign-key "source_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "source_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (snq *SourceNameQuery) loadHasSourceAt(ctx context.Context, query *HasSourceAtQuery, nodes []*SourceName, init func(*SourceName), assign func(*SourceName, *HasSourceAt)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SourceName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(hassourceat.FieldSourceID)
	}
	query.Where(predicate.HasSourceAt(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sourcename.HasSourceAtColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SourceID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "source_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (snq *SourceNameQuery) loadScorecard(ctx context.Context, query *CertifyScorecardQuery, nodes []*SourceName, init func(*SourceName), assign func(*SourceName, *CertifyScorecard)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SourceName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(certifyscorecard.FieldSourceID)
	}
	query.Where(predicate.CertifyScorecard(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sourcename.ScorecardColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SourceID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "source_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (snq *SourceNameQuery) loadCertification(ctx context.Context, query *CertificationQuery, nodes []*SourceName, init func(*SourceName), assign func(*SourceName, *Certification)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SourceName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(certification.FieldSourceID)
	}
	query.Where(predicate.Certification(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sourcename.CertificationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SourceID
		if fk == nil {
			return fmt.Errorf(`foreign-key "source_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "source_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (snq *SourceNameQuery) loadMetadata(ctx context.Context, query *HasMetadataQuery, nodes []*SourceName, init func(*SourceName), assign func(*SourceName, *HasMetadata)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SourceName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(hasmetadata.FieldSourceID)
	}
	query.Where(predicate.HasMetadata(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sourcename.MetadataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SourceID
		if fk == nil {
			return fmt.Errorf(`foreign-key "source_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "source_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (snq *SourceNameQuery) loadPoc(ctx context.Context, query *PointOfContactQuery, nodes []*SourceName, init func(*SourceName), assign func(*SourceName, *PointOfContact)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SourceName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(pointofcontact.FieldSourceID)
	}
	query.Where(predicate.PointOfContact(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sourcename.PocColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SourceID
		if fk == nil {
			return fmt.Errorf(`foreign-key "source_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "source_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (snq *SourceNameQuery) loadCertifyLegal(ctx context.Context, query *CertifyLegalQuery, nodes []*SourceName, init func(*SourceName), assign func(*SourceName, *CertifyLegal)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SourceName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(certifylegal.FieldSourceID)
	}
	query.Where(predicate.CertifyLegal(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sourcename.CertifyLegalColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SourceID
		if fk == nil {
			return fmt.Errorf(`foreign-key "source_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "source_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (snq *SourceNameQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := snq.querySpec()
	if len(snq.modifiers) > 0 {
		_spec.Modifiers = snq.modifiers
	}
	_spec.Node.Columns = snq.ctx.Fields
	if len(snq.ctx.Fields) > 0 {
		_spec.Unique = snq.ctx.Unique != nil && *snq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, snq.driver, _spec)
}

func (snq *SourceNameQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sourcename.Table, sourcename.Columns, sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeUUID))
	_spec.From = snq.sql
	if unique := snq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if snq.path != nil {
		_spec.Unique = true
	}
	if fields := snq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sourcename.FieldID)
		for i := range fields {
			if fields[i] != sourcename.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := snq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := snq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := snq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := snq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (snq *SourceNameQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(snq.driver.Dialect())
	t1 := builder.Table(sourcename.Table)
	columns := snq.ctx.Fields
	if len(columns) == 0 {
		columns = sourcename.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if snq.sql != nil {
		selector = snq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if snq.ctx.Unique != nil && *snq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range snq.predicates {
		p(selector)
	}
	for _, p := range snq.order {
		p(selector)
	}
	if offset := snq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := snq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedOccurrences tells the query-builder to eager-load the nodes that are connected to the "occurrences"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithNamedOccurrences(name string, opts ...func(*OccurrenceQuery)) *SourceNameQuery {
	query := (&OccurrenceClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if snq.withNamedOccurrences == nil {
		snq.withNamedOccurrences = make(map[string]*OccurrenceQuery)
	}
	snq.withNamedOccurrences[name] = query
	return snq
}

// WithNamedHasSourceAt tells the query-builder to eager-load the nodes that are connected to the "has_source_at"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithNamedHasSourceAt(name string, opts ...func(*HasSourceAtQuery)) *SourceNameQuery {
	query := (&HasSourceAtClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if snq.withNamedHasSourceAt == nil {
		snq.withNamedHasSourceAt = make(map[string]*HasSourceAtQuery)
	}
	snq.withNamedHasSourceAt[name] = query
	return snq
}

// WithNamedScorecard tells the query-builder to eager-load the nodes that are connected to the "scorecard"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithNamedScorecard(name string, opts ...func(*CertifyScorecardQuery)) *SourceNameQuery {
	query := (&CertifyScorecardClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if snq.withNamedScorecard == nil {
		snq.withNamedScorecard = make(map[string]*CertifyScorecardQuery)
	}
	snq.withNamedScorecard[name] = query
	return snq
}

// WithNamedCertification tells the query-builder to eager-load the nodes that are connected to the "certification"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithNamedCertification(name string, opts ...func(*CertificationQuery)) *SourceNameQuery {
	query := (&CertificationClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if snq.withNamedCertification == nil {
		snq.withNamedCertification = make(map[string]*CertificationQuery)
	}
	snq.withNamedCertification[name] = query
	return snq
}

// WithNamedMetadata tells the query-builder to eager-load the nodes that are connected to the "metadata"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithNamedMetadata(name string, opts ...func(*HasMetadataQuery)) *SourceNameQuery {
	query := (&HasMetadataClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if snq.withNamedMetadata == nil {
		snq.withNamedMetadata = make(map[string]*HasMetadataQuery)
	}
	snq.withNamedMetadata[name] = query
	return snq
}

// WithNamedPoc tells the query-builder to eager-load the nodes that are connected to the "poc"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithNamedPoc(name string, opts ...func(*PointOfContactQuery)) *SourceNameQuery {
	query := (&PointOfContactClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if snq.withNamedPoc == nil {
		snq.withNamedPoc = make(map[string]*PointOfContactQuery)
	}
	snq.withNamedPoc[name] = query
	return snq
}

// WithNamedCertifyLegal tells the query-builder to eager-load the nodes that are connected to the "certify_legal"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithNamedCertifyLegal(name string, opts ...func(*CertifyLegalQuery)) *SourceNameQuery {
	query := (&CertifyLegalClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if snq.withNamedCertifyLegal == nil {
		snq.withNamedCertifyLegal = make(map[string]*CertifyLegalQuery)
	}
	snq.withNamedCertifyLegal[name] = query
	return snq
}

// SourceNameGroupBy is the group-by builder for SourceName entities.
type SourceNameGroupBy struct {
	selector
	build *SourceNameQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sngb *SourceNameGroupBy) Aggregate(fns ...AggregateFunc) *SourceNameGroupBy {
	sngb.fns = append(sngb.fns, fns...)
	return sngb
}

// Scan applies the selector query and scans the result into the given value.
func (sngb *SourceNameGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sngb.build.ctx, "GroupBy")
	if err := sngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SourceNameQuery, *SourceNameGroupBy](ctx, sngb.build, sngb, sngb.build.inters, v)
}

func (sngb *SourceNameGroupBy) sqlScan(ctx context.Context, root *SourceNameQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sngb.fns))
	for _, fn := range sngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sngb.flds)+len(sngb.fns))
		for _, f := range *sngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SourceNameSelect is the builder for selecting fields of SourceName entities.
type SourceNameSelect struct {
	*SourceNameQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sns *SourceNameSelect) Aggregate(fns ...AggregateFunc) *SourceNameSelect {
	sns.fns = append(sns.fns, fns...)
	return sns
}

// Scan applies the selector query and scans the result into the given value.
func (sns *SourceNameSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sns.ctx, "Select")
	if err := sns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SourceNameQuery, *SourceNameSelect](ctx, sns.SourceNameQuery, sns, sns.inters, v)
}

func (sns *SourceNameSelect) sqlScan(ctx context.Context, root *SourceNameQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sns.fns))
	for _, fn := range sns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

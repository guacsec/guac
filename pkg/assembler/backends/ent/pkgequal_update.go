// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pkgequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PkgEqualUpdate is the builder for updating PkgEqual entities.
type PkgEqualUpdate struct {
	config
	hooks    []Hook
	mutation *PkgEqualMutation
}

// Where appends a list predicates to the PkgEqualUpdate builder.
func (peu *PkgEqualUpdate) Where(ps ...predicate.PkgEqual) *PkgEqualUpdate {
	peu.mutation.Where(ps...)
	return peu
}

// SetPkgID sets the "pkg_id" field.
func (peu *PkgEqualUpdate) SetPkgID(u uuid.UUID) *PkgEqualUpdate {
	peu.mutation.SetPkgID(u)
	return peu
}

// SetNillablePkgID sets the "pkg_id" field if the given value is not nil.
func (peu *PkgEqualUpdate) SetNillablePkgID(u *uuid.UUID) *PkgEqualUpdate {
	if u != nil {
		peu.SetPkgID(*u)
	}
	return peu
}

// SetEqualPkgID sets the "equal_pkg_id" field.
func (peu *PkgEqualUpdate) SetEqualPkgID(u uuid.UUID) *PkgEqualUpdate {
	peu.mutation.SetEqualPkgID(u)
	return peu
}

// SetNillableEqualPkgID sets the "equal_pkg_id" field if the given value is not nil.
func (peu *PkgEqualUpdate) SetNillableEqualPkgID(u *uuid.UUID) *PkgEqualUpdate {
	if u != nil {
		peu.SetEqualPkgID(*u)
	}
	return peu
}

// SetOrigin sets the "origin" field.
func (peu *PkgEqualUpdate) SetOrigin(s string) *PkgEqualUpdate {
	peu.mutation.SetOrigin(s)
	return peu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (peu *PkgEqualUpdate) SetNillableOrigin(s *string) *PkgEqualUpdate {
	if s != nil {
		peu.SetOrigin(*s)
	}
	return peu
}

// SetCollector sets the "collector" field.
func (peu *PkgEqualUpdate) SetCollector(s string) *PkgEqualUpdate {
	peu.mutation.SetCollector(s)
	return peu
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (peu *PkgEqualUpdate) SetNillableCollector(s *string) *PkgEqualUpdate {
	if s != nil {
		peu.SetCollector(*s)
	}
	return peu
}

// SetDocumentRef sets the "document_ref" field.
func (peu *PkgEqualUpdate) SetDocumentRef(s string) *PkgEqualUpdate {
	peu.mutation.SetDocumentRef(s)
	return peu
}

// SetNillableDocumentRef sets the "document_ref" field if the given value is not nil.
func (peu *PkgEqualUpdate) SetNillableDocumentRef(s *string) *PkgEqualUpdate {
	if s != nil {
		peu.SetDocumentRef(*s)
	}
	return peu
}

// SetJustification sets the "justification" field.
func (peu *PkgEqualUpdate) SetJustification(s string) *PkgEqualUpdate {
	peu.mutation.SetJustification(s)
	return peu
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (peu *PkgEqualUpdate) SetNillableJustification(s *string) *PkgEqualUpdate {
	if s != nil {
		peu.SetJustification(*s)
	}
	return peu
}

// SetPackagesHash sets the "packages_hash" field.
func (peu *PkgEqualUpdate) SetPackagesHash(s string) *PkgEqualUpdate {
	peu.mutation.SetPackagesHash(s)
	return peu
}

// SetNillablePackagesHash sets the "packages_hash" field if the given value is not nil.
func (peu *PkgEqualUpdate) SetNillablePackagesHash(s *string) *PkgEqualUpdate {
	if s != nil {
		peu.SetPackagesHash(*s)
	}
	return peu
}

// SetPackageAID sets the "package_a" edge to the PackageVersion entity by ID.
func (peu *PkgEqualUpdate) SetPackageAID(id uuid.UUID) *PkgEqualUpdate {
	peu.mutation.SetPackageAID(id)
	return peu
}

// SetPackageA sets the "package_a" edge to the PackageVersion entity.
func (peu *PkgEqualUpdate) SetPackageA(p *PackageVersion) *PkgEqualUpdate {
	return peu.SetPackageAID(p.ID)
}

// SetPackageBID sets the "package_b" edge to the PackageVersion entity by ID.
func (peu *PkgEqualUpdate) SetPackageBID(id uuid.UUID) *PkgEqualUpdate {
	peu.mutation.SetPackageBID(id)
	return peu
}

// SetPackageB sets the "package_b" edge to the PackageVersion entity.
func (peu *PkgEqualUpdate) SetPackageB(p *PackageVersion) *PkgEqualUpdate {
	return peu.SetPackageBID(p.ID)
}

// Mutation returns the PkgEqualMutation object of the builder.
func (peu *PkgEqualUpdate) Mutation() *PkgEqualMutation {
	return peu.mutation
}

// ClearPackageA clears the "package_a" edge to the PackageVersion entity.
func (peu *PkgEqualUpdate) ClearPackageA() *PkgEqualUpdate {
	peu.mutation.ClearPackageA()
	return peu
}

// ClearPackageB clears the "package_b" edge to the PackageVersion entity.
func (peu *PkgEqualUpdate) ClearPackageB() *PkgEqualUpdate {
	peu.mutation.ClearPackageB()
	return peu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (peu *PkgEqualUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, peu.sqlSave, peu.mutation, peu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peu *PkgEqualUpdate) SaveX(ctx context.Context) int {
	affected, err := peu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (peu *PkgEqualUpdate) Exec(ctx context.Context) error {
	_, err := peu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peu *PkgEqualUpdate) ExecX(ctx context.Context) {
	if err := peu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (peu *PkgEqualUpdate) check() error {
	if _, ok := peu.mutation.PackageAID(); peu.mutation.PackageACleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PkgEqual.package_a"`)
	}
	if _, ok := peu.mutation.PackageBID(); peu.mutation.PackageBCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PkgEqual.package_b"`)
	}
	return nil
}

func (peu *PkgEqualUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := peu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pkgequal.Table, pkgequal.Columns, sqlgraph.NewFieldSpec(pkgequal.FieldID, field.TypeUUID))
	if ps := peu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peu.mutation.Origin(); ok {
		_spec.SetField(pkgequal.FieldOrigin, field.TypeString, value)
	}
	if value, ok := peu.mutation.Collector(); ok {
		_spec.SetField(pkgequal.FieldCollector, field.TypeString, value)
	}
	if value, ok := peu.mutation.DocumentRef(); ok {
		_spec.SetField(pkgequal.FieldDocumentRef, field.TypeString, value)
	}
	if value, ok := peu.mutation.Justification(); ok {
		_spec.SetField(pkgequal.FieldJustification, field.TypeString, value)
	}
	if value, ok := peu.mutation.PackagesHash(); ok {
		_spec.SetField(pkgequal.FieldPackagesHash, field.TypeString, value)
	}
	if peu.mutation.PackageACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkgequal.PackageATable,
			Columns: []string{pkgequal.PackageAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.PackageAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkgequal.PackageATable,
			Columns: []string{pkgequal.PackageAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peu.mutation.PackageBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkgequal.PackageBTable,
			Columns: []string{pkgequal.PackageBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.PackageBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkgequal.PackageBTable,
			Columns: []string{pkgequal.PackageBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, peu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pkgequal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	peu.mutation.done = true
	return n, nil
}

// PkgEqualUpdateOne is the builder for updating a single PkgEqual entity.
type PkgEqualUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PkgEqualMutation
}

// SetPkgID sets the "pkg_id" field.
func (peuo *PkgEqualUpdateOne) SetPkgID(u uuid.UUID) *PkgEqualUpdateOne {
	peuo.mutation.SetPkgID(u)
	return peuo
}

// SetNillablePkgID sets the "pkg_id" field if the given value is not nil.
func (peuo *PkgEqualUpdateOne) SetNillablePkgID(u *uuid.UUID) *PkgEqualUpdateOne {
	if u != nil {
		peuo.SetPkgID(*u)
	}
	return peuo
}

// SetEqualPkgID sets the "equal_pkg_id" field.
func (peuo *PkgEqualUpdateOne) SetEqualPkgID(u uuid.UUID) *PkgEqualUpdateOne {
	peuo.mutation.SetEqualPkgID(u)
	return peuo
}

// SetNillableEqualPkgID sets the "equal_pkg_id" field if the given value is not nil.
func (peuo *PkgEqualUpdateOne) SetNillableEqualPkgID(u *uuid.UUID) *PkgEqualUpdateOne {
	if u != nil {
		peuo.SetEqualPkgID(*u)
	}
	return peuo
}

// SetOrigin sets the "origin" field.
func (peuo *PkgEqualUpdateOne) SetOrigin(s string) *PkgEqualUpdateOne {
	peuo.mutation.SetOrigin(s)
	return peuo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (peuo *PkgEqualUpdateOne) SetNillableOrigin(s *string) *PkgEqualUpdateOne {
	if s != nil {
		peuo.SetOrigin(*s)
	}
	return peuo
}

// SetCollector sets the "collector" field.
func (peuo *PkgEqualUpdateOne) SetCollector(s string) *PkgEqualUpdateOne {
	peuo.mutation.SetCollector(s)
	return peuo
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (peuo *PkgEqualUpdateOne) SetNillableCollector(s *string) *PkgEqualUpdateOne {
	if s != nil {
		peuo.SetCollector(*s)
	}
	return peuo
}

// SetDocumentRef sets the "document_ref" field.
func (peuo *PkgEqualUpdateOne) SetDocumentRef(s string) *PkgEqualUpdateOne {
	peuo.mutation.SetDocumentRef(s)
	return peuo
}

// SetNillableDocumentRef sets the "document_ref" field if the given value is not nil.
func (peuo *PkgEqualUpdateOne) SetNillableDocumentRef(s *string) *PkgEqualUpdateOne {
	if s != nil {
		peuo.SetDocumentRef(*s)
	}
	return peuo
}

// SetJustification sets the "justification" field.
func (peuo *PkgEqualUpdateOne) SetJustification(s string) *PkgEqualUpdateOne {
	peuo.mutation.SetJustification(s)
	return peuo
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (peuo *PkgEqualUpdateOne) SetNillableJustification(s *string) *PkgEqualUpdateOne {
	if s != nil {
		peuo.SetJustification(*s)
	}
	return peuo
}

// SetPackagesHash sets the "packages_hash" field.
func (peuo *PkgEqualUpdateOne) SetPackagesHash(s string) *PkgEqualUpdateOne {
	peuo.mutation.SetPackagesHash(s)
	return peuo
}

// SetNillablePackagesHash sets the "packages_hash" field if the given value is not nil.
func (peuo *PkgEqualUpdateOne) SetNillablePackagesHash(s *string) *PkgEqualUpdateOne {
	if s != nil {
		peuo.SetPackagesHash(*s)
	}
	return peuo
}

// SetPackageAID sets the "package_a" edge to the PackageVersion entity by ID.
func (peuo *PkgEqualUpdateOne) SetPackageAID(id uuid.UUID) *PkgEqualUpdateOne {
	peuo.mutation.SetPackageAID(id)
	return peuo
}

// SetPackageA sets the "package_a" edge to the PackageVersion entity.
func (peuo *PkgEqualUpdateOne) SetPackageA(p *PackageVersion) *PkgEqualUpdateOne {
	return peuo.SetPackageAID(p.ID)
}

// SetPackageBID sets the "package_b" edge to the PackageVersion entity by ID.
func (peuo *PkgEqualUpdateOne) SetPackageBID(id uuid.UUID) *PkgEqualUpdateOne {
	peuo.mutation.SetPackageBID(id)
	return peuo
}

// SetPackageB sets the "package_b" edge to the PackageVersion entity.
func (peuo *PkgEqualUpdateOne) SetPackageB(p *PackageVersion) *PkgEqualUpdateOne {
	return peuo.SetPackageBID(p.ID)
}

// Mutation returns the PkgEqualMutation object of the builder.
func (peuo *PkgEqualUpdateOne) Mutation() *PkgEqualMutation {
	return peuo.mutation
}

// ClearPackageA clears the "package_a" edge to the PackageVersion entity.
func (peuo *PkgEqualUpdateOne) ClearPackageA() *PkgEqualUpdateOne {
	peuo.mutation.ClearPackageA()
	return peuo
}

// ClearPackageB clears the "package_b" edge to the PackageVersion entity.
func (peuo *PkgEqualUpdateOne) ClearPackageB() *PkgEqualUpdateOne {
	peuo.mutation.ClearPackageB()
	return peuo
}

// Where appends a list predicates to the PkgEqualUpdate builder.
func (peuo *PkgEqualUpdateOne) Where(ps ...predicate.PkgEqual) *PkgEqualUpdateOne {
	peuo.mutation.Where(ps...)
	return peuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (peuo *PkgEqualUpdateOne) Select(field string, fields ...string) *PkgEqualUpdateOne {
	peuo.fields = append([]string{field}, fields...)
	return peuo
}

// Save executes the query and returns the updated PkgEqual entity.
func (peuo *PkgEqualUpdateOne) Save(ctx context.Context) (*PkgEqual, error) {
	return withHooks(ctx, peuo.sqlSave, peuo.mutation, peuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peuo *PkgEqualUpdateOne) SaveX(ctx context.Context) *PkgEqual {
	node, err := peuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (peuo *PkgEqualUpdateOne) Exec(ctx context.Context) error {
	_, err := peuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peuo *PkgEqualUpdateOne) ExecX(ctx context.Context) {
	if err := peuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (peuo *PkgEqualUpdateOne) check() error {
	if _, ok := peuo.mutation.PackageAID(); peuo.mutation.PackageACleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PkgEqual.package_a"`)
	}
	if _, ok := peuo.mutation.PackageBID(); peuo.mutation.PackageBCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PkgEqual.package_b"`)
	}
	return nil
}

func (peuo *PkgEqualUpdateOne) sqlSave(ctx context.Context) (_node *PkgEqual, err error) {
	if err := peuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pkgequal.Table, pkgequal.Columns, sqlgraph.NewFieldSpec(pkgequal.FieldID, field.TypeUUID))
	id, ok := peuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PkgEqual.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := peuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pkgequal.FieldID)
		for _, f := range fields {
			if !pkgequal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pkgequal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := peuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peuo.mutation.Origin(); ok {
		_spec.SetField(pkgequal.FieldOrigin, field.TypeString, value)
	}
	if value, ok := peuo.mutation.Collector(); ok {
		_spec.SetField(pkgequal.FieldCollector, field.TypeString, value)
	}
	if value, ok := peuo.mutation.DocumentRef(); ok {
		_spec.SetField(pkgequal.FieldDocumentRef, field.TypeString, value)
	}
	if value, ok := peuo.mutation.Justification(); ok {
		_spec.SetField(pkgequal.FieldJustification, field.TypeString, value)
	}
	if value, ok := peuo.mutation.PackagesHash(); ok {
		_spec.SetField(pkgequal.FieldPackagesHash, field.TypeString, value)
	}
	if peuo.mutation.PackageACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkgequal.PackageATable,
			Columns: []string{pkgequal.PackageAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.PackageAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkgequal.PackageATable,
			Columns: []string{pkgequal.PackageAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peuo.mutation.PackageBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkgequal.PackageBTable,
			Columns: []string{pkgequal.PackageBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.PackageBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkgequal.PackageBTable,
			Columns: []string{pkgequal.PackageBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PkgEqual{config: peuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, peuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pkgequal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	peuo.mutation.done = true
	return _node, nil
}

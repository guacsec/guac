// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pointofcontact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// PointOfContactCreate is the builder for creating a PointOfContact entity.
type PointOfContactCreate struct {
	config
	mutation *PointOfContactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSourceID sets the "source_id" field.
func (pocc *PointOfContactCreate) SetSourceID(i int) *PointOfContactCreate {
	pocc.mutation.SetSourceID(i)
	return pocc
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (pocc *PointOfContactCreate) SetNillableSourceID(i *int) *PointOfContactCreate {
	if i != nil {
		pocc.SetSourceID(*i)
	}
	return pocc
}

// SetPackageVersionID sets the "package_version_id" field.
func (pocc *PointOfContactCreate) SetPackageVersionID(i int) *PointOfContactCreate {
	pocc.mutation.SetPackageVersionID(i)
	return pocc
}

// SetNillablePackageVersionID sets the "package_version_id" field if the given value is not nil.
func (pocc *PointOfContactCreate) SetNillablePackageVersionID(i *int) *PointOfContactCreate {
	if i != nil {
		pocc.SetPackageVersionID(*i)
	}
	return pocc
}

// SetPackageNameID sets the "package_name_id" field.
func (pocc *PointOfContactCreate) SetPackageNameID(i int) *PointOfContactCreate {
	pocc.mutation.SetPackageNameID(i)
	return pocc
}

// SetNillablePackageNameID sets the "package_name_id" field if the given value is not nil.
func (pocc *PointOfContactCreate) SetNillablePackageNameID(i *int) *PointOfContactCreate {
	if i != nil {
		pocc.SetPackageNameID(*i)
	}
	return pocc
}

// SetArtifactID sets the "artifact_id" field.
func (pocc *PointOfContactCreate) SetArtifactID(i int) *PointOfContactCreate {
	pocc.mutation.SetArtifactID(i)
	return pocc
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (pocc *PointOfContactCreate) SetNillableArtifactID(i *int) *PointOfContactCreate {
	if i != nil {
		pocc.SetArtifactID(*i)
	}
	return pocc
}

// SetEmail sets the "email" field.
func (pocc *PointOfContactCreate) SetEmail(s string) *PointOfContactCreate {
	pocc.mutation.SetEmail(s)
	return pocc
}

// SetInfo sets the "info" field.
func (pocc *PointOfContactCreate) SetInfo(s string) *PointOfContactCreate {
	pocc.mutation.SetInfo(s)
	return pocc
}

// SetSince sets the "since" field.
func (pocc *PointOfContactCreate) SetSince(t time.Time) *PointOfContactCreate {
	pocc.mutation.SetSince(t)
	return pocc
}

// SetJustification sets the "justification" field.
func (pocc *PointOfContactCreate) SetJustification(s string) *PointOfContactCreate {
	pocc.mutation.SetJustification(s)
	return pocc
}

// SetOrigin sets the "origin" field.
func (pocc *PointOfContactCreate) SetOrigin(s string) *PointOfContactCreate {
	pocc.mutation.SetOrigin(s)
	return pocc
}

// SetCollector sets the "collector" field.
func (pocc *PointOfContactCreate) SetCollector(s string) *PointOfContactCreate {
	pocc.mutation.SetCollector(s)
	return pocc
}

// SetSource sets the "source" edge to the SourceName entity.
func (pocc *PointOfContactCreate) SetSource(s *SourceName) *PointOfContactCreate {
	return pocc.SetSourceID(s.ID)
}

// SetPackageVersion sets the "package_version" edge to the PackageVersion entity.
func (pocc *PointOfContactCreate) SetPackageVersion(p *PackageVersion) *PointOfContactCreate {
	return pocc.SetPackageVersionID(p.ID)
}

// SetAllVersionsID sets the "all_versions" edge to the PackageName entity by ID.
func (pocc *PointOfContactCreate) SetAllVersionsID(id int) *PointOfContactCreate {
	pocc.mutation.SetAllVersionsID(id)
	return pocc
}

// SetNillableAllVersionsID sets the "all_versions" edge to the PackageName entity by ID if the given value is not nil.
func (pocc *PointOfContactCreate) SetNillableAllVersionsID(id *int) *PointOfContactCreate {
	if id != nil {
		pocc = pocc.SetAllVersionsID(*id)
	}
	return pocc
}

// SetAllVersions sets the "all_versions" edge to the PackageName entity.
func (pocc *PointOfContactCreate) SetAllVersions(p *PackageName) *PointOfContactCreate {
	return pocc.SetAllVersionsID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (pocc *PointOfContactCreate) SetArtifact(a *Artifact) *PointOfContactCreate {
	return pocc.SetArtifactID(a.ID)
}

// Mutation returns the PointOfContactMutation object of the builder.
func (pocc *PointOfContactCreate) Mutation() *PointOfContactMutation {
	return pocc.mutation
}

// Save creates the PointOfContact in the database.
func (pocc *PointOfContactCreate) Save(ctx context.Context) (*PointOfContact, error) {
	return withHooks(ctx, pocc.sqlSave, pocc.mutation, pocc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pocc *PointOfContactCreate) SaveX(ctx context.Context) *PointOfContact {
	v, err := pocc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pocc *PointOfContactCreate) Exec(ctx context.Context) error {
	_, err := pocc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocc *PointOfContactCreate) ExecX(ctx context.Context) {
	if err := pocc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pocc *PointOfContactCreate) check() error {
	if _, ok := pocc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "PointOfContact.email"`)}
	}
	if _, ok := pocc.mutation.Info(); !ok {
		return &ValidationError{Name: "info", err: errors.New(`ent: missing required field "PointOfContact.info"`)}
	}
	if _, ok := pocc.mutation.Since(); !ok {
		return &ValidationError{Name: "since", err: errors.New(`ent: missing required field "PointOfContact.since"`)}
	}
	if _, ok := pocc.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "PointOfContact.justification"`)}
	}
	if _, ok := pocc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "PointOfContact.origin"`)}
	}
	if _, ok := pocc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "PointOfContact.collector"`)}
	}
	return nil
}

func (pocc *PointOfContactCreate) sqlSave(ctx context.Context) (*PointOfContact, error) {
	if err := pocc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pocc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pocc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pocc.mutation.id = &_node.ID
	pocc.mutation.done = true
	return _node, nil
}

func (pocc *PointOfContactCreate) createSpec() (*PointOfContact, *sqlgraph.CreateSpec) {
	var (
		_node = &PointOfContact{config: pocc.config}
		_spec = sqlgraph.NewCreateSpec(pointofcontact.Table, sqlgraph.NewFieldSpec(pointofcontact.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pocc.conflict
	if value, ok := pocc.mutation.Email(); ok {
		_spec.SetField(pointofcontact.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pocc.mutation.Info(); ok {
		_spec.SetField(pointofcontact.FieldInfo, field.TypeString, value)
		_node.Info = value
	}
	if value, ok := pocc.mutation.Since(); ok {
		_spec.SetField(pointofcontact.FieldSince, field.TypeTime, value)
		_node.Since = value
	}
	if value, ok := pocc.mutation.Justification(); ok {
		_spec.SetField(pointofcontact.FieldJustification, field.TypeString, value)
		_node.Justification = value
	}
	if value, ok := pocc.mutation.Origin(); ok {
		_spec.SetField(pointofcontact.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := pocc.mutation.Collector(); ok {
		_spec.SetField(pointofcontact.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if nodes := pocc.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.SourceTable,
			Columns: []string{pointofcontact.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pocc.mutation.PackageVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.PackageVersionTable,
			Columns: []string{pointofcontact.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageVersionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pocc.mutation.AllVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.AllVersionsTable,
			Columns: []string{pointofcontact.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageNameID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pocc.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointofcontact.ArtifactTable,
			Columns: []string{pointofcontact.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArtifactID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PointOfContact.Create().
//		SetSourceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PointOfContactUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (pocc *PointOfContactCreate) OnConflict(opts ...sql.ConflictOption) *PointOfContactUpsertOne {
	pocc.conflict = opts
	return &PointOfContactUpsertOne{
		create: pocc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PointOfContact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pocc *PointOfContactCreate) OnConflictColumns(columns ...string) *PointOfContactUpsertOne {
	pocc.conflict = append(pocc.conflict, sql.ConflictColumns(columns...))
	return &PointOfContactUpsertOne{
		create: pocc,
	}
}

type (
	// PointOfContactUpsertOne is the builder for "upsert"-ing
	//  one PointOfContact node.
	PointOfContactUpsertOne struct {
		create *PointOfContactCreate
	}

	// PointOfContactUpsert is the "OnConflict" setter.
	PointOfContactUpsert struct {
		*sql.UpdateSet
	}
)

// SetSourceID sets the "source_id" field.
func (u *PointOfContactUpsert) SetSourceID(v int) *PointOfContactUpsert {
	u.Set(pointofcontact.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *PointOfContactUpsert) UpdateSourceID() *PointOfContactUpsert {
	u.SetExcluded(pointofcontact.FieldSourceID)
	return u
}

// ClearSourceID clears the value of the "source_id" field.
func (u *PointOfContactUpsert) ClearSourceID() *PointOfContactUpsert {
	u.SetNull(pointofcontact.FieldSourceID)
	return u
}

// SetPackageVersionID sets the "package_version_id" field.
func (u *PointOfContactUpsert) SetPackageVersionID(v int) *PointOfContactUpsert {
	u.Set(pointofcontact.FieldPackageVersionID, v)
	return u
}

// UpdatePackageVersionID sets the "package_version_id" field to the value that was provided on create.
func (u *PointOfContactUpsert) UpdatePackageVersionID() *PointOfContactUpsert {
	u.SetExcluded(pointofcontact.FieldPackageVersionID)
	return u
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (u *PointOfContactUpsert) ClearPackageVersionID() *PointOfContactUpsert {
	u.SetNull(pointofcontact.FieldPackageVersionID)
	return u
}

// SetPackageNameID sets the "package_name_id" field.
func (u *PointOfContactUpsert) SetPackageNameID(v int) *PointOfContactUpsert {
	u.Set(pointofcontact.FieldPackageNameID, v)
	return u
}

// UpdatePackageNameID sets the "package_name_id" field to the value that was provided on create.
func (u *PointOfContactUpsert) UpdatePackageNameID() *PointOfContactUpsert {
	u.SetExcluded(pointofcontact.FieldPackageNameID)
	return u
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (u *PointOfContactUpsert) ClearPackageNameID() *PointOfContactUpsert {
	u.SetNull(pointofcontact.FieldPackageNameID)
	return u
}

// SetArtifactID sets the "artifact_id" field.
func (u *PointOfContactUpsert) SetArtifactID(v int) *PointOfContactUpsert {
	u.Set(pointofcontact.FieldArtifactID, v)
	return u
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *PointOfContactUpsert) UpdateArtifactID() *PointOfContactUpsert {
	u.SetExcluded(pointofcontact.FieldArtifactID)
	return u
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *PointOfContactUpsert) ClearArtifactID() *PointOfContactUpsert {
	u.SetNull(pointofcontact.FieldArtifactID)
	return u
}

// SetEmail sets the "email" field.
func (u *PointOfContactUpsert) SetEmail(v string) *PointOfContactUpsert {
	u.Set(pointofcontact.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *PointOfContactUpsert) UpdateEmail() *PointOfContactUpsert {
	u.SetExcluded(pointofcontact.FieldEmail)
	return u
}

// SetInfo sets the "info" field.
func (u *PointOfContactUpsert) SetInfo(v string) *PointOfContactUpsert {
	u.Set(pointofcontact.FieldInfo, v)
	return u
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *PointOfContactUpsert) UpdateInfo() *PointOfContactUpsert {
	u.SetExcluded(pointofcontact.FieldInfo)
	return u
}

// SetSince sets the "since" field.
func (u *PointOfContactUpsert) SetSince(v time.Time) *PointOfContactUpsert {
	u.Set(pointofcontact.FieldSince, v)
	return u
}

// UpdateSince sets the "since" field to the value that was provided on create.
func (u *PointOfContactUpsert) UpdateSince() *PointOfContactUpsert {
	u.SetExcluded(pointofcontact.FieldSince)
	return u
}

// SetJustification sets the "justification" field.
func (u *PointOfContactUpsert) SetJustification(v string) *PointOfContactUpsert {
	u.Set(pointofcontact.FieldJustification, v)
	return u
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *PointOfContactUpsert) UpdateJustification() *PointOfContactUpsert {
	u.SetExcluded(pointofcontact.FieldJustification)
	return u
}

// SetOrigin sets the "origin" field.
func (u *PointOfContactUpsert) SetOrigin(v string) *PointOfContactUpsert {
	u.Set(pointofcontact.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *PointOfContactUpsert) UpdateOrigin() *PointOfContactUpsert {
	u.SetExcluded(pointofcontact.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *PointOfContactUpsert) SetCollector(v string) *PointOfContactUpsert {
	u.Set(pointofcontact.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *PointOfContactUpsert) UpdateCollector() *PointOfContactUpsert {
	u.SetExcluded(pointofcontact.FieldCollector)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PointOfContact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PointOfContactUpsertOne) UpdateNewValues() *PointOfContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PointOfContact.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PointOfContactUpsertOne) Ignore() *PointOfContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PointOfContactUpsertOne) DoNothing() *PointOfContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PointOfContactCreate.OnConflict
// documentation for more info.
func (u *PointOfContactUpsertOne) Update(set func(*PointOfContactUpsert)) *PointOfContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PointOfContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *PointOfContactUpsertOne) SetSourceID(v int) *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *PointOfContactUpsertOne) UpdateSourceID() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateSourceID()
	})
}

// ClearSourceID clears the value of the "source_id" field.
func (u *PointOfContactUpsertOne) ClearSourceID() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.ClearSourceID()
	})
}

// SetPackageVersionID sets the "package_version_id" field.
func (u *PointOfContactUpsertOne) SetPackageVersionID(v int) *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetPackageVersionID(v)
	})
}

// UpdatePackageVersionID sets the "package_version_id" field to the value that was provided on create.
func (u *PointOfContactUpsertOne) UpdatePackageVersionID() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdatePackageVersionID()
	})
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (u *PointOfContactUpsertOne) ClearPackageVersionID() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.ClearPackageVersionID()
	})
}

// SetPackageNameID sets the "package_name_id" field.
func (u *PointOfContactUpsertOne) SetPackageNameID(v int) *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetPackageNameID(v)
	})
}

// UpdatePackageNameID sets the "package_name_id" field to the value that was provided on create.
func (u *PointOfContactUpsertOne) UpdatePackageNameID() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdatePackageNameID()
	})
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (u *PointOfContactUpsertOne) ClearPackageNameID() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.ClearPackageNameID()
	})
}

// SetArtifactID sets the "artifact_id" field.
func (u *PointOfContactUpsertOne) SetArtifactID(v int) *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetArtifactID(v)
	})
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *PointOfContactUpsertOne) UpdateArtifactID() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateArtifactID()
	})
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *PointOfContactUpsertOne) ClearArtifactID() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.ClearArtifactID()
	})
}

// SetEmail sets the "email" field.
func (u *PointOfContactUpsertOne) SetEmail(v string) *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *PointOfContactUpsertOne) UpdateEmail() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateEmail()
	})
}

// SetInfo sets the "info" field.
func (u *PointOfContactUpsertOne) SetInfo(v string) *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *PointOfContactUpsertOne) UpdateInfo() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateInfo()
	})
}

// SetSince sets the "since" field.
func (u *PointOfContactUpsertOne) SetSince(v time.Time) *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetSince(v)
	})
}

// UpdateSince sets the "since" field to the value that was provided on create.
func (u *PointOfContactUpsertOne) UpdateSince() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateSince()
	})
}

// SetJustification sets the "justification" field.
func (u *PointOfContactUpsertOne) SetJustification(v string) *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *PointOfContactUpsertOne) UpdateJustification() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *PointOfContactUpsertOne) SetOrigin(v string) *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *PointOfContactUpsertOne) UpdateOrigin() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *PointOfContactUpsertOne) SetCollector(v string) *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *PointOfContactUpsertOne) UpdateCollector() *PointOfContactUpsertOne {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *PointOfContactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PointOfContactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PointOfContactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PointOfContactUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PointOfContactUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PointOfContactCreateBulk is the builder for creating many PointOfContact entities in bulk.
type PointOfContactCreateBulk struct {
	config
	err      error
	builders []*PointOfContactCreate
	conflict []sql.ConflictOption
}

// Save creates the PointOfContact entities in the database.
func (poccb *PointOfContactCreateBulk) Save(ctx context.Context) ([]*PointOfContact, error) {
	if poccb.err != nil {
		return nil, poccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(poccb.builders))
	nodes := make([]*PointOfContact, len(poccb.builders))
	mutators := make([]Mutator, len(poccb.builders))
	for i := range poccb.builders {
		func(i int, root context.Context) {
			builder := poccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PointOfContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, poccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = poccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, poccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, poccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (poccb *PointOfContactCreateBulk) SaveX(ctx context.Context) []*PointOfContact {
	v, err := poccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poccb *PointOfContactCreateBulk) Exec(ctx context.Context) error {
	_, err := poccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poccb *PointOfContactCreateBulk) ExecX(ctx context.Context) {
	if err := poccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PointOfContact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PointOfContactUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (poccb *PointOfContactCreateBulk) OnConflict(opts ...sql.ConflictOption) *PointOfContactUpsertBulk {
	poccb.conflict = opts
	return &PointOfContactUpsertBulk{
		create: poccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PointOfContact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (poccb *PointOfContactCreateBulk) OnConflictColumns(columns ...string) *PointOfContactUpsertBulk {
	poccb.conflict = append(poccb.conflict, sql.ConflictColumns(columns...))
	return &PointOfContactUpsertBulk{
		create: poccb,
	}
}

// PointOfContactUpsertBulk is the builder for "upsert"-ing
// a bulk of PointOfContact nodes.
type PointOfContactUpsertBulk struct {
	create *PointOfContactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PointOfContact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PointOfContactUpsertBulk) UpdateNewValues() *PointOfContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PointOfContact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PointOfContactUpsertBulk) Ignore() *PointOfContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PointOfContactUpsertBulk) DoNothing() *PointOfContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PointOfContactCreateBulk.OnConflict
// documentation for more info.
func (u *PointOfContactUpsertBulk) Update(set func(*PointOfContactUpsert)) *PointOfContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PointOfContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *PointOfContactUpsertBulk) SetSourceID(v int) *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *PointOfContactUpsertBulk) UpdateSourceID() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateSourceID()
	})
}

// ClearSourceID clears the value of the "source_id" field.
func (u *PointOfContactUpsertBulk) ClearSourceID() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.ClearSourceID()
	})
}

// SetPackageVersionID sets the "package_version_id" field.
func (u *PointOfContactUpsertBulk) SetPackageVersionID(v int) *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetPackageVersionID(v)
	})
}

// UpdatePackageVersionID sets the "package_version_id" field to the value that was provided on create.
func (u *PointOfContactUpsertBulk) UpdatePackageVersionID() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdatePackageVersionID()
	})
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (u *PointOfContactUpsertBulk) ClearPackageVersionID() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.ClearPackageVersionID()
	})
}

// SetPackageNameID sets the "package_name_id" field.
func (u *PointOfContactUpsertBulk) SetPackageNameID(v int) *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetPackageNameID(v)
	})
}

// UpdatePackageNameID sets the "package_name_id" field to the value that was provided on create.
func (u *PointOfContactUpsertBulk) UpdatePackageNameID() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdatePackageNameID()
	})
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (u *PointOfContactUpsertBulk) ClearPackageNameID() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.ClearPackageNameID()
	})
}

// SetArtifactID sets the "artifact_id" field.
func (u *PointOfContactUpsertBulk) SetArtifactID(v int) *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetArtifactID(v)
	})
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *PointOfContactUpsertBulk) UpdateArtifactID() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateArtifactID()
	})
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *PointOfContactUpsertBulk) ClearArtifactID() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.ClearArtifactID()
	})
}

// SetEmail sets the "email" field.
func (u *PointOfContactUpsertBulk) SetEmail(v string) *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *PointOfContactUpsertBulk) UpdateEmail() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateEmail()
	})
}

// SetInfo sets the "info" field.
func (u *PointOfContactUpsertBulk) SetInfo(v string) *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *PointOfContactUpsertBulk) UpdateInfo() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateInfo()
	})
}

// SetSince sets the "since" field.
func (u *PointOfContactUpsertBulk) SetSince(v time.Time) *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetSince(v)
	})
}

// UpdateSince sets the "since" field to the value that was provided on create.
func (u *PointOfContactUpsertBulk) UpdateSince() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateSince()
	})
}

// SetJustification sets the "justification" field.
func (u *PointOfContactUpsertBulk) SetJustification(v string) *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *PointOfContactUpsertBulk) UpdateJustification() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *PointOfContactUpsertBulk) SetOrigin(v string) *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *PointOfContactUpsertBulk) UpdateOrigin() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *PointOfContactUpsertBulk) SetCollector(v string) *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *PointOfContactUpsertBulk) UpdateCollector() *PointOfContactUpsertBulk {
	return u.Update(func(s *PointOfContactUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *PointOfContactUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PointOfContactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PointOfContactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PointOfContactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcetype"
)

// SourceNamespaceCreate is the builder for creating a SourceNamespace entity.
type SourceNamespaceCreate struct {
	config
	mutation *SourceNamespaceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (snc *SourceNamespaceCreate) SetNamespace(s string) *SourceNamespaceCreate {
	snc.mutation.SetNamespace(s)
	return snc
}

// SetSourceID sets the "source_id" field.
func (snc *SourceNamespaceCreate) SetSourceID(i int) *SourceNamespaceCreate {
	snc.mutation.SetSourceID(i)
	return snc
}

// SetSourceTypeID sets the "source_type" edge to the SourceType entity by ID.
func (snc *SourceNamespaceCreate) SetSourceTypeID(id int) *SourceNamespaceCreate {
	snc.mutation.SetSourceTypeID(id)
	return snc
}

// SetSourceType sets the "source_type" edge to the SourceType entity.
func (snc *SourceNamespaceCreate) SetSourceType(s *SourceType) *SourceNamespaceCreate {
	return snc.SetSourceTypeID(s.ID)
}

// AddNameIDs adds the "names" edge to the SourceName entity by IDs.
func (snc *SourceNamespaceCreate) AddNameIDs(ids ...int) *SourceNamespaceCreate {
	snc.mutation.AddNameIDs(ids...)
	return snc
}

// AddNames adds the "names" edges to the SourceName entity.
func (snc *SourceNamespaceCreate) AddNames(s ...*SourceName) *SourceNamespaceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return snc.AddNameIDs(ids...)
}

// Mutation returns the SourceNamespaceMutation object of the builder.
func (snc *SourceNamespaceCreate) Mutation() *SourceNamespaceMutation {
	return snc.mutation
}

// Save creates the SourceNamespace in the database.
func (snc *SourceNamespaceCreate) Save(ctx context.Context) (*SourceNamespace, error) {
	return withHooks(ctx, snc.sqlSave, snc.mutation, snc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (snc *SourceNamespaceCreate) SaveX(ctx context.Context) *SourceNamespace {
	v, err := snc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (snc *SourceNamespaceCreate) Exec(ctx context.Context) error {
	_, err := snc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snc *SourceNamespaceCreate) ExecX(ctx context.Context) {
	if err := snc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snc *SourceNamespaceCreate) check() error {
	if _, ok := snc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "SourceNamespace.namespace"`)}
	}
	if _, ok := snc.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source_id", err: errors.New(`ent: missing required field "SourceNamespace.source_id"`)}
	}
	if _, ok := snc.mutation.SourceTypeID(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required edge "SourceNamespace.source_type"`)}
	}
	return nil
}

func (snc *SourceNamespaceCreate) sqlSave(ctx context.Context) (*SourceNamespace, error) {
	if err := snc.check(); err != nil {
		return nil, err
	}
	_node, _spec := snc.createSpec()
	if err := sqlgraph.CreateNode(ctx, snc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	snc.mutation.id = &_node.ID
	snc.mutation.done = true
	return _node, nil
}

func (snc *SourceNamespaceCreate) createSpec() (*SourceNamespace, *sqlgraph.CreateSpec) {
	var (
		_node = &SourceNamespace{config: snc.config}
		_spec = sqlgraph.NewCreateSpec(sourcenamespace.Table, sqlgraph.NewFieldSpec(sourcenamespace.FieldID, field.TypeInt))
	)
	_spec.OnConflict = snc.conflict
	if value, ok := snc.mutation.Namespace(); ok {
		_spec.SetField(sourcenamespace.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if nodes := snc.mutation.SourceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcenamespace.SourceTypeTable,
			Columns: []string{sourcenamespace.SourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := snc.mutation.NamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcenamespace.NamesTable,
			Columns: []string{sourcenamespace.NamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SourceNamespace.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SourceNamespaceUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (snc *SourceNamespaceCreate) OnConflict(opts ...sql.ConflictOption) *SourceNamespaceUpsertOne {
	snc.conflict = opts
	return &SourceNamespaceUpsertOne{
		create: snc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SourceNamespace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (snc *SourceNamespaceCreate) OnConflictColumns(columns ...string) *SourceNamespaceUpsertOne {
	snc.conflict = append(snc.conflict, sql.ConflictColumns(columns...))
	return &SourceNamespaceUpsertOne{
		create: snc,
	}
}

type (
	// SourceNamespaceUpsertOne is the builder for "upsert"-ing
	//  one SourceNamespace node.
	SourceNamespaceUpsertOne struct {
		create *SourceNamespaceCreate
	}

	// SourceNamespaceUpsert is the "OnConflict" setter.
	SourceNamespaceUpsert struct {
		*sql.UpdateSet
	}
)

// SetNamespace sets the "namespace" field.
func (u *SourceNamespaceUpsert) SetNamespace(v string) *SourceNamespaceUpsert {
	u.Set(sourcenamespace.FieldNamespace, v)
	return u
}

// UpdateNamespace sets the "namespace" field to the value that was provided on create.
func (u *SourceNamespaceUpsert) UpdateNamespace() *SourceNamespaceUpsert {
	u.SetExcluded(sourcenamespace.FieldNamespace)
	return u
}

// SetSourceID sets the "source_id" field.
func (u *SourceNamespaceUpsert) SetSourceID(v int) *SourceNamespaceUpsert {
	u.Set(sourcenamespace.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *SourceNamespaceUpsert) UpdateSourceID() *SourceNamespaceUpsert {
	u.SetExcluded(sourcenamespace.FieldSourceID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SourceNamespace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SourceNamespaceUpsertOne) UpdateNewValues() *SourceNamespaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SourceNamespace.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SourceNamespaceUpsertOne) Ignore() *SourceNamespaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SourceNamespaceUpsertOne) DoNothing() *SourceNamespaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SourceNamespaceCreate.OnConflict
// documentation for more info.
func (u *SourceNamespaceUpsertOne) Update(set func(*SourceNamespaceUpsert)) *SourceNamespaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SourceNamespaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetNamespace sets the "namespace" field.
func (u *SourceNamespaceUpsertOne) SetNamespace(v string) *SourceNamespaceUpsertOne {
	return u.Update(func(s *SourceNamespaceUpsert) {
		s.SetNamespace(v)
	})
}

// UpdateNamespace sets the "namespace" field to the value that was provided on create.
func (u *SourceNamespaceUpsertOne) UpdateNamespace() *SourceNamespaceUpsertOne {
	return u.Update(func(s *SourceNamespaceUpsert) {
		s.UpdateNamespace()
	})
}

// SetSourceID sets the "source_id" field.
func (u *SourceNamespaceUpsertOne) SetSourceID(v int) *SourceNamespaceUpsertOne {
	return u.Update(func(s *SourceNamespaceUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *SourceNamespaceUpsertOne) UpdateSourceID() *SourceNamespaceUpsertOne {
	return u.Update(func(s *SourceNamespaceUpsert) {
		s.UpdateSourceID()
	})
}

// Exec executes the query.
func (u *SourceNamespaceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SourceNamespaceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SourceNamespaceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SourceNamespaceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SourceNamespaceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SourceNamespaceCreateBulk is the builder for creating many SourceNamespace entities in bulk.
type SourceNamespaceCreateBulk struct {
	config
	builders []*SourceNamespaceCreate
	conflict []sql.ConflictOption
}

// Save creates the SourceNamespace entities in the database.
func (sncb *SourceNamespaceCreateBulk) Save(ctx context.Context) ([]*SourceNamespace, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sncb.builders))
	nodes := make([]*SourceNamespace, len(sncb.builders))
	mutators := make([]Mutator, len(sncb.builders))
	for i := range sncb.builders {
		func(i int, root context.Context) {
			builder := sncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SourceNamespaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sncb *SourceNamespaceCreateBulk) SaveX(ctx context.Context) []*SourceNamespace {
	v, err := sncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sncb *SourceNamespaceCreateBulk) Exec(ctx context.Context) error {
	_, err := sncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sncb *SourceNamespaceCreateBulk) ExecX(ctx context.Context) {
	if err := sncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SourceNamespace.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SourceNamespaceUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (sncb *SourceNamespaceCreateBulk) OnConflict(opts ...sql.ConflictOption) *SourceNamespaceUpsertBulk {
	sncb.conflict = opts
	return &SourceNamespaceUpsertBulk{
		create: sncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SourceNamespace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sncb *SourceNamespaceCreateBulk) OnConflictColumns(columns ...string) *SourceNamespaceUpsertBulk {
	sncb.conflict = append(sncb.conflict, sql.ConflictColumns(columns...))
	return &SourceNamespaceUpsertBulk{
		create: sncb,
	}
}

// SourceNamespaceUpsertBulk is the builder for "upsert"-ing
// a bulk of SourceNamespace nodes.
type SourceNamespaceUpsertBulk struct {
	create *SourceNamespaceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SourceNamespace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SourceNamespaceUpsertBulk) UpdateNewValues() *SourceNamespaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SourceNamespace.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SourceNamespaceUpsertBulk) Ignore() *SourceNamespaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SourceNamespaceUpsertBulk) DoNothing() *SourceNamespaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SourceNamespaceCreateBulk.OnConflict
// documentation for more info.
func (u *SourceNamespaceUpsertBulk) Update(set func(*SourceNamespaceUpsert)) *SourceNamespaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SourceNamespaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetNamespace sets the "namespace" field.
func (u *SourceNamespaceUpsertBulk) SetNamespace(v string) *SourceNamespaceUpsertBulk {
	return u.Update(func(s *SourceNamespaceUpsert) {
		s.SetNamespace(v)
	})
}

// UpdateNamespace sets the "namespace" field to the value that was provided on create.
func (u *SourceNamespaceUpsertBulk) UpdateNamespace() *SourceNamespaceUpsertBulk {
	return u.Update(func(s *SourceNamespaceUpsert) {
		s.UpdateNamespace()
	})
}

// SetSourceID sets the "source_id" field.
func (u *SourceNamespaceUpsertBulk) SetSourceID(v int) *SourceNamespaceUpsertBulk {
	return u.Update(func(s *SourceNamespaceUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *SourceNamespaceUpsertBulk) UpdateSourceID() *SourceNamespaceUpsertBulk {
	return u.Update(func(s *SourceNamespaceUpsert) {
		s.UpdateSourceID()
	})
}

// Exec executes the query.
func (u *SourceNamespaceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SourceNamespaceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SourceNamespaceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SourceNamespaceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

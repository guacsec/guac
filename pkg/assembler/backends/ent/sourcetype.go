// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcetype"
)

// SourceType is the model entity for the SourceType schema.
type SourceType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SourceTypeQuery when eager-loading is set.
	Edges        SourceTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SourceTypeEdges holds the relations/edges for other nodes in the graph.
type SourceTypeEdges struct {
	// Namespaces holds the value of the namespaces edge.
	Namespaces []*SourceNamespace `json:"namespaces,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedNamespaces map[string][]*SourceNamespace
}

// NamespacesOrErr returns the Namespaces value or an error if the edge
// was not loaded in eager-loading.
func (e SourceTypeEdges) NamespacesOrErr() ([]*SourceNamespace, error) {
	if e.loadedTypes[0] {
		return e.Namespaces, nil
	}
	return nil, &NotLoadedError{edge: "namespaces"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SourceType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sourcetype.FieldID:
			values[i] = new(sql.NullInt64)
		case sourcetype.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SourceType fields.
func (st *SourceType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sourcetype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case sourcetype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				st.Type = value.String
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SourceType.
// This includes values selected through modifiers, order, etc.
func (st *SourceType) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryNamespaces queries the "namespaces" edge of the SourceType entity.
func (st *SourceType) QueryNamespaces() *SourceNamespaceQuery {
	return NewSourceTypeClient(st.config).QueryNamespaces(st)
}

// Update returns a builder for updating this SourceType.
// Note that you need to call SourceType.Unwrap() before calling this method if this SourceType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SourceType) Update() *SourceTypeUpdateOne {
	return NewSourceTypeClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SourceType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SourceType) Unwrap() *SourceType {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SourceType is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SourceType) String() string {
	var builder strings.Builder
	builder.WriteString("SourceType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("type=")
	builder.WriteString(st.Type)
	builder.WriteByte(')')
	return builder.String()
}

// NamedNamespaces returns the Namespaces named value or an error if the edge was not
// loaded in eager-loading with this name.
func (st *SourceType) NamedNamespaces(name string) ([]*SourceNamespace, error) {
	if st.Edges.namedNamespaces == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := st.Edges.namedNamespaces[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (st *SourceType) appendNamedNamespaces(name string, edges ...*SourceNamespace) {
	if st.Edges.namedNamespaces == nil {
		st.Edges.namedNamespaces = make(map[string][]*SourceNamespace)
	}
	if len(edges) == 0 {
		st.Edges.namedNamespaces[name] = []*SourceNamespace{}
	} else {
		st.Edges.namedNamespaces[name] = append(st.Edges.namedNamespaces[name], edges...)
	}
}

// SourceTypes is a parsable slice of SourceType.
type SourceTypes []*SourceType

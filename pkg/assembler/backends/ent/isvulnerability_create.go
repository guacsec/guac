// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isvulnerability"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
)

// IsVulnerabilityCreate is the builder for creating a IsVulnerability entity.
type IsVulnerabilityCreate struct {
	config
	mutation *IsVulnerabilityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOsvID sets the "osv_id" field.
func (ivc *IsVulnerabilityCreate) SetOsvID(i int) *IsVulnerabilityCreate {
	ivc.mutation.SetOsvID(i)
	return ivc
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (ivc *IsVulnerabilityCreate) SetVulnerabilityID(i int) *IsVulnerabilityCreate {
	ivc.mutation.SetVulnerabilityID(i)
	return ivc
}

// SetJustification sets the "justification" field.
func (ivc *IsVulnerabilityCreate) SetJustification(s string) *IsVulnerabilityCreate {
	ivc.mutation.SetJustification(s)
	return ivc
}

// SetOrigin sets the "origin" field.
func (ivc *IsVulnerabilityCreate) SetOrigin(s string) *IsVulnerabilityCreate {
	ivc.mutation.SetOrigin(s)
	return ivc
}

// SetCollector sets the "collector" field.
func (ivc *IsVulnerabilityCreate) SetCollector(s string) *IsVulnerabilityCreate {
	ivc.mutation.SetCollector(s)
	return ivc
}

// SetOsv sets the "osv" edge to the VulnerabilityType entity.
func (ivc *IsVulnerabilityCreate) SetOsv(v *VulnerabilityType) *IsVulnerabilityCreate {
	return ivc.SetOsvID(v.ID)
}

// SetVulnerability sets the "vulnerability" edge to the VulnerabilityType entity.
func (ivc *IsVulnerabilityCreate) SetVulnerability(v *VulnerabilityType) *IsVulnerabilityCreate {
	return ivc.SetVulnerabilityID(v.ID)
}

// Mutation returns the IsVulnerabilityMutation object of the builder.
func (ivc *IsVulnerabilityCreate) Mutation() *IsVulnerabilityMutation {
	return ivc.mutation
}

// Save creates the IsVulnerability in the database.
func (ivc *IsVulnerabilityCreate) Save(ctx context.Context) (*IsVulnerability, error) {
	return withHooks(ctx, ivc.sqlSave, ivc.mutation, ivc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ivc *IsVulnerabilityCreate) SaveX(ctx context.Context) *IsVulnerability {
	v, err := ivc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ivc *IsVulnerabilityCreate) Exec(ctx context.Context) error {
	_, err := ivc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivc *IsVulnerabilityCreate) ExecX(ctx context.Context) {
	if err := ivc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivc *IsVulnerabilityCreate) check() error {
	if _, ok := ivc.mutation.OsvID(); !ok {
		return &ValidationError{Name: "osv_id", err: errors.New(`ent: missing required field "IsVulnerability.osv_id"`)}
	}
	if _, ok := ivc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability_id", err: errors.New(`ent: missing required field "IsVulnerability.vulnerability_id"`)}
	}
	if _, ok := ivc.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "IsVulnerability.justification"`)}
	}
	if _, ok := ivc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "IsVulnerability.origin"`)}
	}
	if _, ok := ivc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "IsVulnerability.collector"`)}
	}
	if _, ok := ivc.mutation.OsvID(); !ok {
		return &ValidationError{Name: "osv", err: errors.New(`ent: missing required edge "IsVulnerability.osv"`)}
	}
	if _, ok := ivc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability", err: errors.New(`ent: missing required edge "IsVulnerability.vulnerability"`)}
	}
	return nil
}

func (ivc *IsVulnerabilityCreate) sqlSave(ctx context.Context) (*IsVulnerability, error) {
	if err := ivc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ivc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ivc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ivc.mutation.id = &_node.ID
	ivc.mutation.done = true
	return _node, nil
}

func (ivc *IsVulnerabilityCreate) createSpec() (*IsVulnerability, *sqlgraph.CreateSpec) {
	var (
		_node = &IsVulnerability{config: ivc.config}
		_spec = sqlgraph.NewCreateSpec(isvulnerability.Table, sqlgraph.NewFieldSpec(isvulnerability.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ivc.conflict
	if value, ok := ivc.mutation.Justification(); ok {
		_spec.SetField(isvulnerability.FieldJustification, field.TypeString, value)
		_node.Justification = value
	}
	if value, ok := ivc.mutation.Origin(); ok {
		_spec.SetField(isvulnerability.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := ivc.mutation.Collector(); ok {
		_spec.SetField(isvulnerability.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if nodes := ivc.mutation.OsvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isvulnerability.OsvTable,
			Columns: []string{isvulnerability.OsvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OsvID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ivc.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isvulnerability.VulnerabilityTable,
			Columns: []string{isvulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VulnerabilityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IsVulnerability.Create().
//		SetOsvID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IsVulnerabilityUpsert) {
//			SetOsvID(v+v).
//		}).
//		Exec(ctx)
func (ivc *IsVulnerabilityCreate) OnConflict(opts ...sql.ConflictOption) *IsVulnerabilityUpsertOne {
	ivc.conflict = opts
	return &IsVulnerabilityUpsertOne{
		create: ivc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IsVulnerability.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ivc *IsVulnerabilityCreate) OnConflictColumns(columns ...string) *IsVulnerabilityUpsertOne {
	ivc.conflict = append(ivc.conflict, sql.ConflictColumns(columns...))
	return &IsVulnerabilityUpsertOne{
		create: ivc,
	}
}

type (
	// IsVulnerabilityUpsertOne is the builder for "upsert"-ing
	//  one IsVulnerability node.
	IsVulnerabilityUpsertOne struct {
		create *IsVulnerabilityCreate
	}

	// IsVulnerabilityUpsert is the "OnConflict" setter.
	IsVulnerabilityUpsert struct {
		*sql.UpdateSet
	}
)

// SetOsvID sets the "osv_id" field.
func (u *IsVulnerabilityUpsert) SetOsvID(v int) *IsVulnerabilityUpsert {
	u.Set(isvulnerability.FieldOsvID, v)
	return u
}

// UpdateOsvID sets the "osv_id" field to the value that was provided on create.
func (u *IsVulnerabilityUpsert) UpdateOsvID() *IsVulnerabilityUpsert {
	u.SetExcluded(isvulnerability.FieldOsvID)
	return u
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *IsVulnerabilityUpsert) SetVulnerabilityID(v int) *IsVulnerabilityUpsert {
	u.Set(isvulnerability.FieldVulnerabilityID, v)
	return u
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *IsVulnerabilityUpsert) UpdateVulnerabilityID() *IsVulnerabilityUpsert {
	u.SetExcluded(isvulnerability.FieldVulnerabilityID)
	return u
}

// SetJustification sets the "justification" field.
func (u *IsVulnerabilityUpsert) SetJustification(v string) *IsVulnerabilityUpsert {
	u.Set(isvulnerability.FieldJustification, v)
	return u
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *IsVulnerabilityUpsert) UpdateJustification() *IsVulnerabilityUpsert {
	u.SetExcluded(isvulnerability.FieldJustification)
	return u
}

// SetOrigin sets the "origin" field.
func (u *IsVulnerabilityUpsert) SetOrigin(v string) *IsVulnerabilityUpsert {
	u.Set(isvulnerability.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsVulnerabilityUpsert) UpdateOrigin() *IsVulnerabilityUpsert {
	u.SetExcluded(isvulnerability.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *IsVulnerabilityUpsert) SetCollector(v string) *IsVulnerabilityUpsert {
	u.Set(isvulnerability.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsVulnerabilityUpsert) UpdateCollector() *IsVulnerabilityUpsert {
	u.SetExcluded(isvulnerability.FieldCollector)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IsVulnerability.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IsVulnerabilityUpsertOne) UpdateNewValues() *IsVulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IsVulnerability.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IsVulnerabilityUpsertOne) Ignore() *IsVulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IsVulnerabilityUpsertOne) DoNothing() *IsVulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IsVulnerabilityCreate.OnConflict
// documentation for more info.
func (u *IsVulnerabilityUpsertOne) Update(set func(*IsVulnerabilityUpsert)) *IsVulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IsVulnerabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetOsvID sets the "osv_id" field.
func (u *IsVulnerabilityUpsertOne) SetOsvID(v int) *IsVulnerabilityUpsertOne {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.SetOsvID(v)
	})
}

// UpdateOsvID sets the "osv_id" field to the value that was provided on create.
func (u *IsVulnerabilityUpsertOne) UpdateOsvID() *IsVulnerabilityUpsertOne {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.UpdateOsvID()
	})
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *IsVulnerabilityUpsertOne) SetVulnerabilityID(v int) *IsVulnerabilityUpsertOne {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *IsVulnerabilityUpsertOne) UpdateVulnerabilityID() *IsVulnerabilityUpsertOne {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// SetJustification sets the "justification" field.
func (u *IsVulnerabilityUpsertOne) SetJustification(v string) *IsVulnerabilityUpsertOne {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *IsVulnerabilityUpsertOne) UpdateJustification() *IsVulnerabilityUpsertOne {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *IsVulnerabilityUpsertOne) SetOrigin(v string) *IsVulnerabilityUpsertOne {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsVulnerabilityUpsertOne) UpdateOrigin() *IsVulnerabilityUpsertOne {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *IsVulnerabilityUpsertOne) SetCollector(v string) *IsVulnerabilityUpsertOne {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsVulnerabilityUpsertOne) UpdateCollector() *IsVulnerabilityUpsertOne {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *IsVulnerabilityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IsVulnerabilityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IsVulnerabilityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IsVulnerabilityUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IsVulnerabilityUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IsVulnerabilityCreateBulk is the builder for creating many IsVulnerability entities in bulk.
type IsVulnerabilityCreateBulk struct {
	config
	builders []*IsVulnerabilityCreate
	conflict []sql.ConflictOption
}

// Save creates the IsVulnerability entities in the database.
func (ivcb *IsVulnerabilityCreateBulk) Save(ctx context.Context) ([]*IsVulnerability, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ivcb.builders))
	nodes := make([]*IsVulnerability, len(ivcb.builders))
	mutators := make([]Mutator, len(ivcb.builders))
	for i := range ivcb.builders {
		func(i int, root context.Context) {
			builder := ivcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IsVulnerabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ivcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ivcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ivcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ivcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ivcb *IsVulnerabilityCreateBulk) SaveX(ctx context.Context) []*IsVulnerability {
	v, err := ivcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ivcb *IsVulnerabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := ivcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivcb *IsVulnerabilityCreateBulk) ExecX(ctx context.Context) {
	if err := ivcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IsVulnerability.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IsVulnerabilityUpsert) {
//			SetOsvID(v+v).
//		}).
//		Exec(ctx)
func (ivcb *IsVulnerabilityCreateBulk) OnConflict(opts ...sql.ConflictOption) *IsVulnerabilityUpsertBulk {
	ivcb.conflict = opts
	return &IsVulnerabilityUpsertBulk{
		create: ivcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IsVulnerability.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ivcb *IsVulnerabilityCreateBulk) OnConflictColumns(columns ...string) *IsVulnerabilityUpsertBulk {
	ivcb.conflict = append(ivcb.conflict, sql.ConflictColumns(columns...))
	return &IsVulnerabilityUpsertBulk{
		create: ivcb,
	}
}

// IsVulnerabilityUpsertBulk is the builder for "upsert"-ing
// a bulk of IsVulnerability nodes.
type IsVulnerabilityUpsertBulk struct {
	create *IsVulnerabilityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IsVulnerability.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IsVulnerabilityUpsertBulk) UpdateNewValues() *IsVulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IsVulnerability.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IsVulnerabilityUpsertBulk) Ignore() *IsVulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IsVulnerabilityUpsertBulk) DoNothing() *IsVulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IsVulnerabilityCreateBulk.OnConflict
// documentation for more info.
func (u *IsVulnerabilityUpsertBulk) Update(set func(*IsVulnerabilityUpsert)) *IsVulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IsVulnerabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetOsvID sets the "osv_id" field.
func (u *IsVulnerabilityUpsertBulk) SetOsvID(v int) *IsVulnerabilityUpsertBulk {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.SetOsvID(v)
	})
}

// UpdateOsvID sets the "osv_id" field to the value that was provided on create.
func (u *IsVulnerabilityUpsertBulk) UpdateOsvID() *IsVulnerabilityUpsertBulk {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.UpdateOsvID()
	})
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *IsVulnerabilityUpsertBulk) SetVulnerabilityID(v int) *IsVulnerabilityUpsertBulk {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *IsVulnerabilityUpsertBulk) UpdateVulnerabilityID() *IsVulnerabilityUpsertBulk {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// SetJustification sets the "justification" field.
func (u *IsVulnerabilityUpsertBulk) SetJustification(v string) *IsVulnerabilityUpsertBulk {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *IsVulnerabilityUpsertBulk) UpdateJustification() *IsVulnerabilityUpsertBulk {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *IsVulnerabilityUpsertBulk) SetOrigin(v string) *IsVulnerabilityUpsertBulk {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsVulnerabilityUpsertBulk) UpdateOrigin() *IsVulnerabilityUpsertBulk {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *IsVulnerabilityUpsertBulk) SetCollector(v string) *IsVulnerabilityUpsertBulk {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsVulnerabilityUpsertBulk) UpdateCollector() *IsVulnerabilityUpsertBulk {
	return u.Update(func(s *IsVulnerabilityUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *IsVulnerabilityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IsVulnerabilityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IsVulnerabilityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IsVulnerabilityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

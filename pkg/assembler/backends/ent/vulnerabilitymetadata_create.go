// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitymetadata"
)

// VulnerabilityMetadataCreate is the builder for creating a VulnerabilityMetadata entity.
type VulnerabilityMetadataCreate struct {
	config
	mutation *VulnerabilityMetadataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVulnerabilityIDID sets the "vulnerability_id_id" field.
func (vmc *VulnerabilityMetadataCreate) SetVulnerabilityIDID(i int) *VulnerabilityMetadataCreate {
	vmc.mutation.SetVulnerabilityIDID(i)
	return vmc
}

// SetScoreType sets the "score_type" field.
func (vmc *VulnerabilityMetadataCreate) SetScoreType(vt vulnerabilitymetadata.ScoreType) *VulnerabilityMetadataCreate {
	vmc.mutation.SetScoreType(vt)
	return vmc
}

// SetScoreValue sets the "score_value" field.
func (vmc *VulnerabilityMetadataCreate) SetScoreValue(f float64) *VulnerabilityMetadataCreate {
	vmc.mutation.SetScoreValue(f)
	return vmc
}

// SetTimestamp sets the "timestamp" field.
func (vmc *VulnerabilityMetadataCreate) SetTimestamp(t time.Time) *VulnerabilityMetadataCreate {
	vmc.mutation.SetTimestamp(t)
	return vmc
}

// SetOrigin sets the "origin" field.
func (vmc *VulnerabilityMetadataCreate) SetOrigin(s string) *VulnerabilityMetadataCreate {
	vmc.mutation.SetOrigin(s)
	return vmc
}

// SetCollector sets the "collector" field.
func (vmc *VulnerabilityMetadataCreate) SetCollector(s string) *VulnerabilityMetadataCreate {
	vmc.mutation.SetCollector(s)
	return vmc
}

// SetVulnerabilityID sets the "vulnerability_id" edge to the VulnerabilityID entity.
func (vmc *VulnerabilityMetadataCreate) SetVulnerabilityID(v *VulnerabilityID) *VulnerabilityMetadataCreate {
	return vmc.SetVulnerabilityIDID(v.ID)
}

// Mutation returns the VulnerabilityMetadataMutation object of the builder.
func (vmc *VulnerabilityMetadataCreate) Mutation() *VulnerabilityMetadataMutation {
	return vmc.mutation
}

// Save creates the VulnerabilityMetadata in the database.
func (vmc *VulnerabilityMetadataCreate) Save(ctx context.Context) (*VulnerabilityMetadata, error) {
	return withHooks(ctx, vmc.sqlSave, vmc.mutation, vmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vmc *VulnerabilityMetadataCreate) SaveX(ctx context.Context) *VulnerabilityMetadata {
	v, err := vmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmc *VulnerabilityMetadataCreate) Exec(ctx context.Context) error {
	_, err := vmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmc *VulnerabilityMetadataCreate) ExecX(ctx context.Context) {
	if err := vmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmc *VulnerabilityMetadataCreate) check() error {
	if _, ok := vmc.mutation.VulnerabilityIDID(); !ok {
		return &ValidationError{Name: "vulnerability_id_id", err: errors.New(`ent: missing required field "VulnerabilityMetadata.vulnerability_id_id"`)}
	}
	if _, ok := vmc.mutation.ScoreType(); !ok {
		return &ValidationError{Name: "score_type", err: errors.New(`ent: missing required field "VulnerabilityMetadata.score_type"`)}
	}
	if v, ok := vmc.mutation.ScoreType(); ok {
		if err := vulnerabilitymetadata.ScoreTypeValidator(v); err != nil {
			return &ValidationError{Name: "score_type", err: fmt.Errorf(`ent: validator failed for field "VulnerabilityMetadata.score_type": %w`, err)}
		}
	}
	if _, ok := vmc.mutation.ScoreValue(); !ok {
		return &ValidationError{Name: "score_value", err: errors.New(`ent: missing required field "VulnerabilityMetadata.score_value"`)}
	}
	if _, ok := vmc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "VulnerabilityMetadata.timestamp"`)}
	}
	if _, ok := vmc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "VulnerabilityMetadata.origin"`)}
	}
	if _, ok := vmc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "VulnerabilityMetadata.collector"`)}
	}
	if _, ok := vmc.mutation.VulnerabilityIDID(); !ok {
		return &ValidationError{Name: "vulnerability_id", err: errors.New(`ent: missing required edge "VulnerabilityMetadata.vulnerability_id"`)}
	}
	return nil
}

func (vmc *VulnerabilityMetadataCreate) sqlSave(ctx context.Context) (*VulnerabilityMetadata, error) {
	if err := vmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vmc.mutation.id = &_node.ID
	vmc.mutation.done = true
	return _node, nil
}

func (vmc *VulnerabilityMetadataCreate) createSpec() (*VulnerabilityMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &VulnerabilityMetadata{config: vmc.config}
		_spec = sqlgraph.NewCreateSpec(vulnerabilitymetadata.Table, sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vmc.conflict
	if value, ok := vmc.mutation.ScoreType(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldScoreType, field.TypeEnum, value)
		_node.ScoreType = value
	}
	if value, ok := vmc.mutation.ScoreValue(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldScoreValue, field.TypeFloat64, value)
		_node.ScoreValue = value
	}
	if value, ok := vmc.mutation.Timestamp(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := vmc.mutation.Origin(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := vmc.mutation.Collector(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if nodes := vmc.mutation.VulnerabilityIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerabilitymetadata.VulnerabilityIDTable,
			Columns: []string{vulnerabilitymetadata.VulnerabilityIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VulnerabilityIDID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VulnerabilityMetadata.Create().
//		SetVulnerabilityIDID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityMetadataUpsert) {
//			SetVulnerabilityIDID(v+v).
//		}).
//		Exec(ctx)
func (vmc *VulnerabilityMetadataCreate) OnConflict(opts ...sql.ConflictOption) *VulnerabilityMetadataUpsertOne {
	vmc.conflict = opts
	return &VulnerabilityMetadataUpsertOne{
		create: vmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VulnerabilityMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vmc *VulnerabilityMetadataCreate) OnConflictColumns(columns ...string) *VulnerabilityMetadataUpsertOne {
	vmc.conflict = append(vmc.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityMetadataUpsertOne{
		create: vmc,
	}
}

type (
	// VulnerabilityMetadataUpsertOne is the builder for "upsert"-ing
	//  one VulnerabilityMetadata node.
	VulnerabilityMetadataUpsertOne struct {
		create *VulnerabilityMetadataCreate
	}

	// VulnerabilityMetadataUpsert is the "OnConflict" setter.
	VulnerabilityMetadataUpsert struct {
		*sql.UpdateSet
	}
)

// SetVulnerabilityIDID sets the "vulnerability_id_id" field.
func (u *VulnerabilityMetadataUpsert) SetVulnerabilityIDID(v int) *VulnerabilityMetadataUpsert {
	u.Set(vulnerabilitymetadata.FieldVulnerabilityIDID, v)
	return u
}

// UpdateVulnerabilityIDID sets the "vulnerability_id_id" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsert) UpdateVulnerabilityIDID() *VulnerabilityMetadataUpsert {
	u.SetExcluded(vulnerabilitymetadata.FieldVulnerabilityIDID)
	return u
}

// SetScoreType sets the "score_type" field.
func (u *VulnerabilityMetadataUpsert) SetScoreType(v vulnerabilitymetadata.ScoreType) *VulnerabilityMetadataUpsert {
	u.Set(vulnerabilitymetadata.FieldScoreType, v)
	return u
}

// UpdateScoreType sets the "score_type" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsert) UpdateScoreType() *VulnerabilityMetadataUpsert {
	u.SetExcluded(vulnerabilitymetadata.FieldScoreType)
	return u
}

// SetScoreValue sets the "score_value" field.
func (u *VulnerabilityMetadataUpsert) SetScoreValue(v float64) *VulnerabilityMetadataUpsert {
	u.Set(vulnerabilitymetadata.FieldScoreValue, v)
	return u
}

// UpdateScoreValue sets the "score_value" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsert) UpdateScoreValue() *VulnerabilityMetadataUpsert {
	u.SetExcluded(vulnerabilitymetadata.FieldScoreValue)
	return u
}

// AddScoreValue adds v to the "score_value" field.
func (u *VulnerabilityMetadataUpsert) AddScoreValue(v float64) *VulnerabilityMetadataUpsert {
	u.Add(vulnerabilitymetadata.FieldScoreValue, v)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *VulnerabilityMetadataUpsert) SetTimestamp(v time.Time) *VulnerabilityMetadataUpsert {
	u.Set(vulnerabilitymetadata.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsert) UpdateTimestamp() *VulnerabilityMetadataUpsert {
	u.SetExcluded(vulnerabilitymetadata.FieldTimestamp)
	return u
}

// SetOrigin sets the "origin" field.
func (u *VulnerabilityMetadataUpsert) SetOrigin(v string) *VulnerabilityMetadataUpsert {
	u.Set(vulnerabilitymetadata.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsert) UpdateOrigin() *VulnerabilityMetadataUpsert {
	u.SetExcluded(vulnerabilitymetadata.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *VulnerabilityMetadataUpsert) SetCollector(v string) *VulnerabilityMetadataUpsert {
	u.Set(vulnerabilitymetadata.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsert) UpdateCollector() *VulnerabilityMetadataUpsert {
	u.SetExcluded(vulnerabilitymetadata.FieldCollector)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VulnerabilityMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VulnerabilityMetadataUpsertOne) UpdateNewValues() *VulnerabilityMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VulnerabilityMetadata.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VulnerabilityMetadataUpsertOne) Ignore() *VulnerabilityMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityMetadataUpsertOne) DoNothing() *VulnerabilityMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityMetadataCreate.OnConflict
// documentation for more info.
func (u *VulnerabilityMetadataUpsertOne) Update(set func(*VulnerabilityMetadataUpsert)) *VulnerabilityMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnerabilityIDID sets the "vulnerability_id_id" field.
func (u *VulnerabilityMetadataUpsertOne) SetVulnerabilityIDID(v int) *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetVulnerabilityIDID(v)
	})
}

// UpdateVulnerabilityIDID sets the "vulnerability_id_id" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertOne) UpdateVulnerabilityIDID() *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateVulnerabilityIDID()
	})
}

// SetScoreType sets the "score_type" field.
func (u *VulnerabilityMetadataUpsertOne) SetScoreType(v vulnerabilitymetadata.ScoreType) *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetScoreType(v)
	})
}

// UpdateScoreType sets the "score_type" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertOne) UpdateScoreType() *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateScoreType()
	})
}

// SetScoreValue sets the "score_value" field.
func (u *VulnerabilityMetadataUpsertOne) SetScoreValue(v float64) *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetScoreValue(v)
	})
}

// AddScoreValue adds v to the "score_value" field.
func (u *VulnerabilityMetadataUpsertOne) AddScoreValue(v float64) *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.AddScoreValue(v)
	})
}

// UpdateScoreValue sets the "score_value" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertOne) UpdateScoreValue() *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateScoreValue()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *VulnerabilityMetadataUpsertOne) SetTimestamp(v time.Time) *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertOne) UpdateTimestamp() *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateTimestamp()
	})
}

// SetOrigin sets the "origin" field.
func (u *VulnerabilityMetadataUpsertOne) SetOrigin(v string) *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertOne) UpdateOrigin() *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *VulnerabilityMetadataUpsertOne) SetCollector(v string) *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertOne) UpdateCollector() *VulnerabilityMetadataUpsertOne {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *VulnerabilityMetadataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityMetadataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityMetadataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VulnerabilityMetadataUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VulnerabilityMetadataUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VulnerabilityMetadataCreateBulk is the builder for creating many VulnerabilityMetadata entities in bulk.
type VulnerabilityMetadataCreateBulk struct {
	config
	err      error
	builders []*VulnerabilityMetadataCreate
	conflict []sql.ConflictOption
}

// Save creates the VulnerabilityMetadata entities in the database.
func (vmcb *VulnerabilityMetadataCreateBulk) Save(ctx context.Context) ([]*VulnerabilityMetadata, error) {
	if vmcb.err != nil {
		return nil, vmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vmcb.builders))
	nodes := make([]*VulnerabilityMetadata, len(vmcb.builders))
	mutators := make([]Mutator, len(vmcb.builders))
	for i := range vmcb.builders {
		func(i int, root context.Context) {
			builder := vmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VulnerabilityMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vmcb *VulnerabilityMetadataCreateBulk) SaveX(ctx context.Context) []*VulnerabilityMetadata {
	v, err := vmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmcb *VulnerabilityMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := vmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmcb *VulnerabilityMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := vmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VulnerabilityMetadata.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityMetadataUpsert) {
//			SetVulnerabilityIDID(v+v).
//		}).
//		Exec(ctx)
func (vmcb *VulnerabilityMetadataCreateBulk) OnConflict(opts ...sql.ConflictOption) *VulnerabilityMetadataUpsertBulk {
	vmcb.conflict = opts
	return &VulnerabilityMetadataUpsertBulk{
		create: vmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VulnerabilityMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vmcb *VulnerabilityMetadataCreateBulk) OnConflictColumns(columns ...string) *VulnerabilityMetadataUpsertBulk {
	vmcb.conflict = append(vmcb.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityMetadataUpsertBulk{
		create: vmcb,
	}
}

// VulnerabilityMetadataUpsertBulk is the builder for "upsert"-ing
// a bulk of VulnerabilityMetadata nodes.
type VulnerabilityMetadataUpsertBulk struct {
	create *VulnerabilityMetadataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VulnerabilityMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VulnerabilityMetadataUpsertBulk) UpdateNewValues() *VulnerabilityMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VulnerabilityMetadata.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VulnerabilityMetadataUpsertBulk) Ignore() *VulnerabilityMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityMetadataUpsertBulk) DoNothing() *VulnerabilityMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityMetadataCreateBulk.OnConflict
// documentation for more info.
func (u *VulnerabilityMetadataUpsertBulk) Update(set func(*VulnerabilityMetadataUpsert)) *VulnerabilityMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnerabilityIDID sets the "vulnerability_id_id" field.
func (u *VulnerabilityMetadataUpsertBulk) SetVulnerabilityIDID(v int) *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetVulnerabilityIDID(v)
	})
}

// UpdateVulnerabilityIDID sets the "vulnerability_id_id" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertBulk) UpdateVulnerabilityIDID() *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateVulnerabilityIDID()
	})
}

// SetScoreType sets the "score_type" field.
func (u *VulnerabilityMetadataUpsertBulk) SetScoreType(v vulnerabilitymetadata.ScoreType) *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetScoreType(v)
	})
}

// UpdateScoreType sets the "score_type" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertBulk) UpdateScoreType() *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateScoreType()
	})
}

// SetScoreValue sets the "score_value" field.
func (u *VulnerabilityMetadataUpsertBulk) SetScoreValue(v float64) *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetScoreValue(v)
	})
}

// AddScoreValue adds v to the "score_value" field.
func (u *VulnerabilityMetadataUpsertBulk) AddScoreValue(v float64) *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.AddScoreValue(v)
	})
}

// UpdateScoreValue sets the "score_value" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertBulk) UpdateScoreValue() *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateScoreValue()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *VulnerabilityMetadataUpsertBulk) SetTimestamp(v time.Time) *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertBulk) UpdateTimestamp() *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateTimestamp()
	})
}

// SetOrigin sets the "origin" field.
func (u *VulnerabilityMetadataUpsertBulk) SetOrigin(v string) *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertBulk) UpdateOrigin() *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *VulnerabilityMetadataUpsertBulk) SetCollector(v string) *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *VulnerabilityMetadataUpsertBulk) UpdateCollector() *VulnerabilityMetadataUpsertBulk {
	return u.Update(func(s *VulnerabilityMetadataUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *VulnerabilityMetadataUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VulnerabilityMetadataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityMetadataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityMetadataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

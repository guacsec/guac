// Code generated by ent, DO NOT EDIT.

package isvulnerability

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the isvulnerability type in the database.
	Label = "is_vulnerability"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOsvID holds the string denoting the osv_id field in the database.
	FieldOsvID = "osv_id"
	// FieldVulnerabilityID holds the string denoting the vulnerability_id field in the database.
	FieldVulnerabilityID = "vulnerability_id"
	// FieldJustification holds the string denoting the justification field in the database.
	FieldJustification = "justification"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// EdgeOsv holds the string denoting the osv edge name in mutations.
	EdgeOsv = "osv"
	// EdgeVulnerability holds the string denoting the vulnerability edge name in mutations.
	EdgeVulnerability = "vulnerability"
	// Table holds the table name of the isvulnerability in the database.
	Table = "is_vulnerabilities"
	// OsvTable is the table that holds the osv relation/edge.
	OsvTable = "is_vulnerabilities"
	// OsvInverseTable is the table name for the VulnerabilityType entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilitytype" package.
	OsvInverseTable = "vulnerability_types"
	// OsvColumn is the table column denoting the osv relation/edge.
	OsvColumn = "osv_id"
	// VulnerabilityTable is the table that holds the vulnerability relation/edge.
	VulnerabilityTable = "is_vulnerabilities"
	// VulnerabilityInverseTable is the table name for the VulnerabilityType entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilitytype" package.
	VulnerabilityInverseTable = "vulnerability_types"
	// VulnerabilityColumn is the table column denoting the vulnerability relation/edge.
	VulnerabilityColumn = "vulnerability_id"
)

// Columns holds all SQL columns for isvulnerability fields.
var Columns = []string{
	FieldID,
	FieldOsvID,
	FieldVulnerabilityID,
	FieldJustification,
	FieldOrigin,
	FieldCollector,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the IsVulnerability queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOsvID orders the results by the osv_id field.
func ByOsvID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsvID, opts...).ToFunc()
}

// ByVulnerabilityID orders the results by the vulnerability_id field.
func ByVulnerabilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVulnerabilityID, opts...).ToFunc()
}

// ByJustification orders the results by the justification field.
func ByJustification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJustification, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByOsvField orders the results by osv field.
func ByOsvField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOsvStep(), sql.OrderByField(field, opts...))
	}
}

// ByVulnerabilityField orders the results by vulnerability field.
func ByVulnerabilityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnerabilityStep(), sql.OrderByField(field, opts...))
	}
}
func newOsvStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OsvInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OsvTable, OsvColumn),
	)
}
func newVulnerabilityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnerabilityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, VulnerabilityTable, VulnerabilityColumn),
	)
}

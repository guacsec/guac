// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrencesubject"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// OccurrenceSubjectCreate is the builder for creating a OccurrenceSubject entity.
type OccurrenceSubjectCreate struct {
	config
	mutation *OccurrenceSubjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSourceID sets the "source_id" field.
func (osc *OccurrenceSubjectCreate) SetSourceID(i int) *OccurrenceSubjectCreate {
	osc.mutation.SetSourceID(i)
	return osc
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (osc *OccurrenceSubjectCreate) SetNillableSourceID(i *int) *OccurrenceSubjectCreate {
	if i != nil {
		osc.SetSourceID(*i)
	}
	return osc
}

// SetPackageID sets the "package_id" field.
func (osc *OccurrenceSubjectCreate) SetPackageID(i int) *OccurrenceSubjectCreate {
	osc.mutation.SetPackageID(i)
	return osc
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (osc *OccurrenceSubjectCreate) SetNillablePackageID(i *int) *OccurrenceSubjectCreate {
	if i != nil {
		osc.SetPackageID(*i)
	}
	return osc
}

// SetOccurrenceID sets the "occurrence" edge to the Occurrence entity by ID.
func (osc *OccurrenceSubjectCreate) SetOccurrenceID(id int) *OccurrenceSubjectCreate {
	osc.mutation.SetOccurrenceID(id)
	return osc
}

// SetNillableOccurrenceID sets the "occurrence" edge to the Occurrence entity by ID if the given value is not nil.
func (osc *OccurrenceSubjectCreate) SetNillableOccurrenceID(id *int) *OccurrenceSubjectCreate {
	if id != nil {
		osc = osc.SetOccurrenceID(*id)
	}
	return osc
}

// SetOccurrence sets the "occurrence" edge to the Occurrence entity.
func (osc *OccurrenceSubjectCreate) SetOccurrence(o *Occurrence) *OccurrenceSubjectCreate {
	return osc.SetOccurrenceID(o.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (osc *OccurrenceSubjectCreate) SetPackage(p *PackageVersion) *OccurrenceSubjectCreate {
	return osc.SetPackageID(p.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (osc *OccurrenceSubjectCreate) SetSource(s *SourceName) *OccurrenceSubjectCreate {
	return osc.SetSourceID(s.ID)
}

// Mutation returns the OccurrenceSubjectMutation object of the builder.
func (osc *OccurrenceSubjectCreate) Mutation() *OccurrenceSubjectMutation {
	return osc.mutation
}

// Save creates the OccurrenceSubject in the database.
func (osc *OccurrenceSubjectCreate) Save(ctx context.Context) (*OccurrenceSubject, error) {
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OccurrenceSubjectCreate) SaveX(ctx context.Context) *OccurrenceSubject {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OccurrenceSubjectCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OccurrenceSubjectCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OccurrenceSubjectCreate) check() error {
	return nil
}

func (osc *OccurrenceSubjectCreate) sqlSave(ctx context.Context) (*OccurrenceSubject, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OccurrenceSubjectCreate) createSpec() (*OccurrenceSubject, *sqlgraph.CreateSpec) {
	var (
		_node = &OccurrenceSubject{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(occurrencesubject.Table, sqlgraph.NewFieldSpec(occurrencesubject.FieldID, field.TypeInt))
	)
	_spec.OnConflict = osc.conflict
	if nodes := osc.mutation.OccurrenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   occurrencesubject.OccurrenceTable,
			Columns: []string{occurrencesubject.OccurrenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrencesubject.PackageTable,
			Columns: []string{occurrencesubject.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osc.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrencesubject.SourceTable,
			Columns: []string{occurrencesubject.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OccurrenceSubject.Create().
//		SetSourceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OccurrenceSubjectUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (osc *OccurrenceSubjectCreate) OnConflict(opts ...sql.ConflictOption) *OccurrenceSubjectUpsertOne {
	osc.conflict = opts
	return &OccurrenceSubjectUpsertOne{
		create: osc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OccurrenceSubject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (osc *OccurrenceSubjectCreate) OnConflictColumns(columns ...string) *OccurrenceSubjectUpsertOne {
	osc.conflict = append(osc.conflict, sql.ConflictColumns(columns...))
	return &OccurrenceSubjectUpsertOne{
		create: osc,
	}
}

type (
	// OccurrenceSubjectUpsertOne is the builder for "upsert"-ing
	//  one OccurrenceSubject node.
	OccurrenceSubjectUpsertOne struct {
		create *OccurrenceSubjectCreate
	}

	// OccurrenceSubjectUpsert is the "OnConflict" setter.
	OccurrenceSubjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetSourceID sets the "source_id" field.
func (u *OccurrenceSubjectUpsert) SetSourceID(v int) *OccurrenceSubjectUpsert {
	u.Set(occurrencesubject.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *OccurrenceSubjectUpsert) UpdateSourceID() *OccurrenceSubjectUpsert {
	u.SetExcluded(occurrencesubject.FieldSourceID)
	return u
}

// ClearSourceID clears the value of the "source_id" field.
func (u *OccurrenceSubjectUpsert) ClearSourceID() *OccurrenceSubjectUpsert {
	u.SetNull(occurrencesubject.FieldSourceID)
	return u
}

// SetPackageID sets the "package_id" field.
func (u *OccurrenceSubjectUpsert) SetPackageID(v int) *OccurrenceSubjectUpsert {
	u.Set(occurrencesubject.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *OccurrenceSubjectUpsert) UpdatePackageID() *OccurrenceSubjectUpsert {
	u.SetExcluded(occurrencesubject.FieldPackageID)
	return u
}

// ClearPackageID clears the value of the "package_id" field.
func (u *OccurrenceSubjectUpsert) ClearPackageID() *OccurrenceSubjectUpsert {
	u.SetNull(occurrencesubject.FieldPackageID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OccurrenceSubject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OccurrenceSubjectUpsertOne) UpdateNewValues() *OccurrenceSubjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OccurrenceSubject.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OccurrenceSubjectUpsertOne) Ignore() *OccurrenceSubjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OccurrenceSubjectUpsertOne) DoNothing() *OccurrenceSubjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OccurrenceSubjectCreate.OnConflict
// documentation for more info.
func (u *OccurrenceSubjectUpsertOne) Update(set func(*OccurrenceSubjectUpsert)) *OccurrenceSubjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OccurrenceSubjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *OccurrenceSubjectUpsertOne) SetSourceID(v int) *OccurrenceSubjectUpsertOne {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *OccurrenceSubjectUpsertOne) UpdateSourceID() *OccurrenceSubjectUpsertOne {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.UpdateSourceID()
	})
}

// ClearSourceID clears the value of the "source_id" field.
func (u *OccurrenceSubjectUpsertOne) ClearSourceID() *OccurrenceSubjectUpsertOne {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.ClearSourceID()
	})
}

// SetPackageID sets the "package_id" field.
func (u *OccurrenceSubjectUpsertOne) SetPackageID(v int) *OccurrenceSubjectUpsertOne {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *OccurrenceSubjectUpsertOne) UpdatePackageID() *OccurrenceSubjectUpsertOne {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *OccurrenceSubjectUpsertOne) ClearPackageID() *OccurrenceSubjectUpsertOne {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.ClearPackageID()
	})
}

// Exec executes the query.
func (u *OccurrenceSubjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OccurrenceSubjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OccurrenceSubjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OccurrenceSubjectUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OccurrenceSubjectUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OccurrenceSubjectCreateBulk is the builder for creating many OccurrenceSubject entities in bulk.
type OccurrenceSubjectCreateBulk struct {
	config
	builders []*OccurrenceSubjectCreate
	conflict []sql.ConflictOption
}

// Save creates the OccurrenceSubject entities in the database.
func (oscb *OccurrenceSubjectCreateBulk) Save(ctx context.Context) ([]*OccurrenceSubject, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OccurrenceSubject, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OccurrenceSubjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OccurrenceSubjectCreateBulk) SaveX(ctx context.Context) []*OccurrenceSubject {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OccurrenceSubjectCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OccurrenceSubjectCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OccurrenceSubject.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OccurrenceSubjectUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (oscb *OccurrenceSubjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *OccurrenceSubjectUpsertBulk {
	oscb.conflict = opts
	return &OccurrenceSubjectUpsertBulk{
		create: oscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OccurrenceSubject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oscb *OccurrenceSubjectCreateBulk) OnConflictColumns(columns ...string) *OccurrenceSubjectUpsertBulk {
	oscb.conflict = append(oscb.conflict, sql.ConflictColumns(columns...))
	return &OccurrenceSubjectUpsertBulk{
		create: oscb,
	}
}

// OccurrenceSubjectUpsertBulk is the builder for "upsert"-ing
// a bulk of OccurrenceSubject nodes.
type OccurrenceSubjectUpsertBulk struct {
	create *OccurrenceSubjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OccurrenceSubject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OccurrenceSubjectUpsertBulk) UpdateNewValues() *OccurrenceSubjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OccurrenceSubject.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OccurrenceSubjectUpsertBulk) Ignore() *OccurrenceSubjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OccurrenceSubjectUpsertBulk) DoNothing() *OccurrenceSubjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OccurrenceSubjectCreateBulk.OnConflict
// documentation for more info.
func (u *OccurrenceSubjectUpsertBulk) Update(set func(*OccurrenceSubjectUpsert)) *OccurrenceSubjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OccurrenceSubjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *OccurrenceSubjectUpsertBulk) SetSourceID(v int) *OccurrenceSubjectUpsertBulk {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *OccurrenceSubjectUpsertBulk) UpdateSourceID() *OccurrenceSubjectUpsertBulk {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.UpdateSourceID()
	})
}

// ClearSourceID clears the value of the "source_id" field.
func (u *OccurrenceSubjectUpsertBulk) ClearSourceID() *OccurrenceSubjectUpsertBulk {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.ClearSourceID()
	})
}

// SetPackageID sets the "package_id" field.
func (u *OccurrenceSubjectUpsertBulk) SetPackageID(v int) *OccurrenceSubjectUpsertBulk {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *OccurrenceSubjectUpsertBulk) UpdatePackageID() *OccurrenceSubjectUpsertBulk {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *OccurrenceSubjectUpsertBulk) ClearPackageID() *OccurrenceSubjectUpsertBulk {
	return u.Update(func(s *OccurrenceSubjectUpsert) {
		s.ClearPackageID()
	})
}

// Exec executes the query.
func (u *OccurrenceSubjectUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OccurrenceSubjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OccurrenceSubjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OccurrenceSubjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

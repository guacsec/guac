// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
)

// HashEqual is the model entity for the HashEqual schema.
type HashEqual struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ArtID holds the value of the "art_id" field.
	ArtID uuid.UUID `json:"art_id,omitempty"`
	// EqualArtID holds the value of the "equal_art_id" field.
	EqualArtID uuid.UUID `json:"equal_art_id,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// DocumentRef holds the value of the "document_ref" field.
	DocumentRef string `json:"document_ref,omitempty"`
	// An opaque hash of the artifact IDs that are equal
	ArtifactsHash string `json:"artifacts_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HashEqualQuery when eager-loading is set.
	Edges        HashEqualEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HashEqualEdges holds the relations/edges for other nodes in the graph.
type HashEqualEdges struct {
	// ArtifactA holds the value of the artifact_a edge.
	ArtifactA *Artifact `json:"artifact_a,omitempty"`
	// ArtifactB holds the value of the artifact_b edge.
	ArtifactB *Artifact `json:"artifact_b,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ArtifactAOrErr returns the ArtifactA value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HashEqualEdges) ArtifactAOrErr() (*Artifact, error) {
	if e.ArtifactA != nil {
		return e.ArtifactA, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: artifact.Label}
	}
	return nil, &NotLoadedError{edge: "artifact_a"}
}

// ArtifactBOrErr returns the ArtifactB value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HashEqualEdges) ArtifactBOrErr() (*Artifact, error) {
	if e.ArtifactB != nil {
		return e.ArtifactB, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: artifact.Label}
	}
	return nil, &NotLoadedError{edge: "artifact_b"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HashEqual) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hashequal.FieldOrigin, hashequal.FieldCollector, hashequal.FieldJustification, hashequal.FieldDocumentRef, hashequal.FieldArtifactsHash:
			values[i] = new(sql.NullString)
		case hashequal.FieldID, hashequal.FieldArtID, hashequal.FieldEqualArtID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HashEqual fields.
func (he *HashEqual) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hashequal.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				he.ID = *value
			}
		case hashequal.FieldArtID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field art_id", values[i])
			} else if value != nil {
				he.ArtID = *value
			}
		case hashequal.FieldEqualArtID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field equal_art_id", values[i])
			} else if value != nil {
				he.EqualArtID = *value
			}
		case hashequal.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				he.Origin = value.String
			}
		case hashequal.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				he.Collector = value.String
			}
		case hashequal.FieldJustification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field justification", values[i])
			} else if value.Valid {
				he.Justification = value.String
			}
		case hashequal.FieldDocumentRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_ref", values[i])
			} else if value.Valid {
				he.DocumentRef = value.String
			}
		case hashequal.FieldArtifactsHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artifacts_hash", values[i])
			} else if value.Valid {
				he.ArtifactsHash = value.String
			}
		default:
			he.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HashEqual.
// This includes values selected through modifiers, order, etc.
func (he *HashEqual) Value(name string) (ent.Value, error) {
	return he.selectValues.Get(name)
}

// QueryArtifactA queries the "artifact_a" edge of the HashEqual entity.
func (he *HashEqual) QueryArtifactA() *ArtifactQuery {
	return NewHashEqualClient(he.config).QueryArtifactA(he)
}

// QueryArtifactB queries the "artifact_b" edge of the HashEqual entity.
func (he *HashEqual) QueryArtifactB() *ArtifactQuery {
	return NewHashEqualClient(he.config).QueryArtifactB(he)
}

// Update returns a builder for updating this HashEqual.
// Note that you need to call HashEqual.Unwrap() before calling this method if this HashEqual
// was returned from a transaction, and the transaction was committed or rolled back.
func (he *HashEqual) Update() *HashEqualUpdateOne {
	return NewHashEqualClient(he.config).UpdateOne(he)
}

// Unwrap unwraps the HashEqual entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (he *HashEqual) Unwrap() *HashEqual {
	_tx, ok := he.config.driver.(*txDriver)
	if !ok {
		panic("ent: HashEqual is not a transactional entity")
	}
	he.config.driver = _tx.drv
	return he
}

// String implements the fmt.Stringer.
func (he *HashEqual) String() string {
	var builder strings.Builder
	builder.WriteString("HashEqual(")
	builder.WriteString(fmt.Sprintf("id=%v, ", he.ID))
	builder.WriteString("art_id=")
	builder.WriteString(fmt.Sprintf("%v", he.ArtID))
	builder.WriteString(", ")
	builder.WriteString("equal_art_id=")
	builder.WriteString(fmt.Sprintf("%v", he.EqualArtID))
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(he.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(he.Collector)
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(he.Justification)
	builder.WriteString(", ")
	builder.WriteString("document_ref=")
	builder.WriteString(he.DocumentRef)
	builder.WriteString(", ")
	builder.WriteString("artifacts_hash=")
	builder.WriteString(he.ArtifactsHash)
	builder.WriteByte(')')
	return builder.String()
}

// HashEquals is a parsable slice of HashEqual.
type HashEquals []*HashEqual

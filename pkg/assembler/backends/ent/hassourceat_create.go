// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hassourceat"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// HasSourceAtCreate is the builder for creating a HasSourceAt entity.
type HasSourceAtCreate struct {
	config
	mutation *HasSourceAtMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPackageVersionID sets the "package_version_id" field.
func (hsac *HasSourceAtCreate) SetPackageVersionID(u uuid.UUID) *HasSourceAtCreate {
	hsac.mutation.SetPackageVersionID(u)
	return hsac
}

// SetNillablePackageVersionID sets the "package_version_id" field if the given value is not nil.
func (hsac *HasSourceAtCreate) SetNillablePackageVersionID(u *uuid.UUID) *HasSourceAtCreate {
	if u != nil {
		hsac.SetPackageVersionID(*u)
	}
	return hsac
}

// SetPackageNameID sets the "package_name_id" field.
func (hsac *HasSourceAtCreate) SetPackageNameID(u uuid.UUID) *HasSourceAtCreate {
	hsac.mutation.SetPackageNameID(u)
	return hsac
}

// SetNillablePackageNameID sets the "package_name_id" field if the given value is not nil.
func (hsac *HasSourceAtCreate) SetNillablePackageNameID(u *uuid.UUID) *HasSourceAtCreate {
	if u != nil {
		hsac.SetPackageNameID(*u)
	}
	return hsac
}

// SetSourceID sets the "source_id" field.
func (hsac *HasSourceAtCreate) SetSourceID(u uuid.UUID) *HasSourceAtCreate {
	hsac.mutation.SetSourceID(u)
	return hsac
}

// SetKnownSince sets the "known_since" field.
func (hsac *HasSourceAtCreate) SetKnownSince(t time.Time) *HasSourceAtCreate {
	hsac.mutation.SetKnownSince(t)
	return hsac
}

// SetJustification sets the "justification" field.
func (hsac *HasSourceAtCreate) SetJustification(s string) *HasSourceAtCreate {
	hsac.mutation.SetJustification(s)
	return hsac
}

// SetOrigin sets the "origin" field.
func (hsac *HasSourceAtCreate) SetOrigin(s string) *HasSourceAtCreate {
	hsac.mutation.SetOrigin(s)
	return hsac
}

// SetCollector sets the "collector" field.
func (hsac *HasSourceAtCreate) SetCollector(s string) *HasSourceAtCreate {
	hsac.mutation.SetCollector(s)
	return hsac
}

// SetDocumentRef sets the "document_ref" field.
func (hsac *HasSourceAtCreate) SetDocumentRef(s string) *HasSourceAtCreate {
	hsac.mutation.SetDocumentRef(s)
	return hsac
}

// SetID sets the "id" field.
func (hsac *HasSourceAtCreate) SetID(u uuid.UUID) *HasSourceAtCreate {
	hsac.mutation.SetID(u)
	return hsac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hsac *HasSourceAtCreate) SetNillableID(u *uuid.UUID) *HasSourceAtCreate {
	if u != nil {
		hsac.SetID(*u)
	}
	return hsac
}

// SetPackageVersion sets the "package_version" edge to the PackageVersion entity.
func (hsac *HasSourceAtCreate) SetPackageVersion(p *PackageVersion) *HasSourceAtCreate {
	return hsac.SetPackageVersionID(p.ID)
}

// SetAllVersionsID sets the "all_versions" edge to the PackageName entity by ID.
func (hsac *HasSourceAtCreate) SetAllVersionsID(id uuid.UUID) *HasSourceAtCreate {
	hsac.mutation.SetAllVersionsID(id)
	return hsac
}

// SetNillableAllVersionsID sets the "all_versions" edge to the PackageName entity by ID if the given value is not nil.
func (hsac *HasSourceAtCreate) SetNillableAllVersionsID(id *uuid.UUID) *HasSourceAtCreate {
	if id != nil {
		hsac = hsac.SetAllVersionsID(*id)
	}
	return hsac
}

// SetAllVersions sets the "all_versions" edge to the PackageName entity.
func (hsac *HasSourceAtCreate) SetAllVersions(p *PackageName) *HasSourceAtCreate {
	return hsac.SetAllVersionsID(p.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (hsac *HasSourceAtCreate) SetSource(s *SourceName) *HasSourceAtCreate {
	return hsac.SetSourceID(s.ID)
}

// Mutation returns the HasSourceAtMutation object of the builder.
func (hsac *HasSourceAtCreate) Mutation() *HasSourceAtMutation {
	return hsac.mutation
}

// Save creates the HasSourceAt in the database.
func (hsac *HasSourceAtCreate) Save(ctx context.Context) (*HasSourceAt, error) {
	hsac.defaults()
	return withHooks(ctx, hsac.sqlSave, hsac.mutation, hsac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hsac *HasSourceAtCreate) SaveX(ctx context.Context) *HasSourceAt {
	v, err := hsac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hsac *HasSourceAtCreate) Exec(ctx context.Context) error {
	_, err := hsac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsac *HasSourceAtCreate) ExecX(ctx context.Context) {
	if err := hsac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hsac *HasSourceAtCreate) defaults() {
	if _, ok := hsac.mutation.ID(); !ok {
		v := hassourceat.DefaultID()
		hsac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hsac *HasSourceAtCreate) check() error {
	if _, ok := hsac.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source_id", err: errors.New(`ent: missing required field "HasSourceAt.source_id"`)}
	}
	if _, ok := hsac.mutation.KnownSince(); !ok {
		return &ValidationError{Name: "known_since", err: errors.New(`ent: missing required field "HasSourceAt.known_since"`)}
	}
	if _, ok := hsac.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "HasSourceAt.justification"`)}
	}
	if _, ok := hsac.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "HasSourceAt.origin"`)}
	}
	if _, ok := hsac.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "HasSourceAt.collector"`)}
	}
	if _, ok := hsac.mutation.DocumentRef(); !ok {
		return &ValidationError{Name: "document_ref", err: errors.New(`ent: missing required field "HasSourceAt.document_ref"`)}
	}
	if len(hsac.mutation.SourceIDs()) == 0 {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required edge "HasSourceAt.source"`)}
	}
	return nil
}

func (hsac *HasSourceAtCreate) sqlSave(ctx context.Context) (*HasSourceAt, error) {
	if err := hsac.check(); err != nil {
		return nil, err
	}
	_node, _spec := hsac.createSpec()
	if err := sqlgraph.CreateNode(ctx, hsac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	hsac.mutation.id = &_node.ID
	hsac.mutation.done = true
	return _node, nil
}

func (hsac *HasSourceAtCreate) createSpec() (*HasSourceAt, *sqlgraph.CreateSpec) {
	var (
		_node = &HasSourceAt{config: hsac.config}
		_spec = sqlgraph.NewCreateSpec(hassourceat.Table, sqlgraph.NewFieldSpec(hassourceat.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = hsac.conflict
	if id, ok := hsac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := hsac.mutation.KnownSince(); ok {
		_spec.SetField(hassourceat.FieldKnownSince, field.TypeTime, value)
		_node.KnownSince = value
	}
	if value, ok := hsac.mutation.Justification(); ok {
		_spec.SetField(hassourceat.FieldJustification, field.TypeString, value)
		_node.Justification = value
	}
	if value, ok := hsac.mutation.Origin(); ok {
		_spec.SetField(hassourceat.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := hsac.mutation.Collector(); ok {
		_spec.SetField(hassourceat.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if value, ok := hsac.mutation.DocumentRef(); ok {
		_spec.SetField(hassourceat.FieldDocumentRef, field.TypeString, value)
		_node.DocumentRef = value
	}
	if nodes := hsac.mutation.PackageVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hassourceat.PackageVersionTable,
			Columns: []string{hassourceat.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageVersionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hsac.mutation.AllVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hassourceat.AllVersionsTable,
			Columns: []string{hassourceat.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageNameID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hsac.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hassourceat.SourceTable,
			Columns: []string{hassourceat.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HasSourceAt.Create().
//		SetPackageVersionID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HasSourceAtUpsert) {
//			SetPackageVersionID(v+v).
//		}).
//		Exec(ctx)
func (hsac *HasSourceAtCreate) OnConflict(opts ...sql.ConflictOption) *HasSourceAtUpsertOne {
	hsac.conflict = opts
	return &HasSourceAtUpsertOne{
		create: hsac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HasSourceAt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hsac *HasSourceAtCreate) OnConflictColumns(columns ...string) *HasSourceAtUpsertOne {
	hsac.conflict = append(hsac.conflict, sql.ConflictColumns(columns...))
	return &HasSourceAtUpsertOne{
		create: hsac,
	}
}

type (
	// HasSourceAtUpsertOne is the builder for "upsert"-ing
	//  one HasSourceAt node.
	HasSourceAtUpsertOne struct {
		create *HasSourceAtCreate
	}

	// HasSourceAtUpsert is the "OnConflict" setter.
	HasSourceAtUpsert struct {
		*sql.UpdateSet
	}
)

// SetPackageVersionID sets the "package_version_id" field.
func (u *HasSourceAtUpsert) SetPackageVersionID(v uuid.UUID) *HasSourceAtUpsert {
	u.Set(hassourceat.FieldPackageVersionID, v)
	return u
}

// UpdatePackageVersionID sets the "package_version_id" field to the value that was provided on create.
func (u *HasSourceAtUpsert) UpdatePackageVersionID() *HasSourceAtUpsert {
	u.SetExcluded(hassourceat.FieldPackageVersionID)
	return u
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (u *HasSourceAtUpsert) ClearPackageVersionID() *HasSourceAtUpsert {
	u.SetNull(hassourceat.FieldPackageVersionID)
	return u
}

// SetPackageNameID sets the "package_name_id" field.
func (u *HasSourceAtUpsert) SetPackageNameID(v uuid.UUID) *HasSourceAtUpsert {
	u.Set(hassourceat.FieldPackageNameID, v)
	return u
}

// UpdatePackageNameID sets the "package_name_id" field to the value that was provided on create.
func (u *HasSourceAtUpsert) UpdatePackageNameID() *HasSourceAtUpsert {
	u.SetExcluded(hassourceat.FieldPackageNameID)
	return u
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (u *HasSourceAtUpsert) ClearPackageNameID() *HasSourceAtUpsert {
	u.SetNull(hassourceat.FieldPackageNameID)
	return u
}

// SetSourceID sets the "source_id" field.
func (u *HasSourceAtUpsert) SetSourceID(v uuid.UUID) *HasSourceAtUpsert {
	u.Set(hassourceat.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *HasSourceAtUpsert) UpdateSourceID() *HasSourceAtUpsert {
	u.SetExcluded(hassourceat.FieldSourceID)
	return u
}

// SetKnownSince sets the "known_since" field.
func (u *HasSourceAtUpsert) SetKnownSince(v time.Time) *HasSourceAtUpsert {
	u.Set(hassourceat.FieldKnownSince, v)
	return u
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *HasSourceAtUpsert) UpdateKnownSince() *HasSourceAtUpsert {
	u.SetExcluded(hassourceat.FieldKnownSince)
	return u
}

// SetJustification sets the "justification" field.
func (u *HasSourceAtUpsert) SetJustification(v string) *HasSourceAtUpsert {
	u.Set(hassourceat.FieldJustification, v)
	return u
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *HasSourceAtUpsert) UpdateJustification() *HasSourceAtUpsert {
	u.SetExcluded(hassourceat.FieldJustification)
	return u
}

// SetOrigin sets the "origin" field.
func (u *HasSourceAtUpsert) SetOrigin(v string) *HasSourceAtUpsert {
	u.Set(hassourceat.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *HasSourceAtUpsert) UpdateOrigin() *HasSourceAtUpsert {
	u.SetExcluded(hassourceat.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *HasSourceAtUpsert) SetCollector(v string) *HasSourceAtUpsert {
	u.Set(hassourceat.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *HasSourceAtUpsert) UpdateCollector() *HasSourceAtUpsert {
	u.SetExcluded(hassourceat.FieldCollector)
	return u
}

// SetDocumentRef sets the "document_ref" field.
func (u *HasSourceAtUpsert) SetDocumentRef(v string) *HasSourceAtUpsert {
	u.Set(hassourceat.FieldDocumentRef, v)
	return u
}

// UpdateDocumentRef sets the "document_ref" field to the value that was provided on create.
func (u *HasSourceAtUpsert) UpdateDocumentRef() *HasSourceAtUpsert {
	u.SetExcluded(hassourceat.FieldDocumentRef)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.HasSourceAt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hassourceat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HasSourceAtUpsertOne) UpdateNewValues() *HasSourceAtUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(hassourceat.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HasSourceAt.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HasSourceAtUpsertOne) Ignore() *HasSourceAtUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HasSourceAtUpsertOne) DoNothing() *HasSourceAtUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HasSourceAtCreate.OnConflict
// documentation for more info.
func (u *HasSourceAtUpsertOne) Update(set func(*HasSourceAtUpsert)) *HasSourceAtUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HasSourceAtUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageVersionID sets the "package_version_id" field.
func (u *HasSourceAtUpsertOne) SetPackageVersionID(v uuid.UUID) *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetPackageVersionID(v)
	})
}

// UpdatePackageVersionID sets the "package_version_id" field to the value that was provided on create.
func (u *HasSourceAtUpsertOne) UpdatePackageVersionID() *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdatePackageVersionID()
	})
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (u *HasSourceAtUpsertOne) ClearPackageVersionID() *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.ClearPackageVersionID()
	})
}

// SetPackageNameID sets the "package_name_id" field.
func (u *HasSourceAtUpsertOne) SetPackageNameID(v uuid.UUID) *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetPackageNameID(v)
	})
}

// UpdatePackageNameID sets the "package_name_id" field to the value that was provided on create.
func (u *HasSourceAtUpsertOne) UpdatePackageNameID() *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdatePackageNameID()
	})
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (u *HasSourceAtUpsertOne) ClearPackageNameID() *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.ClearPackageNameID()
	})
}

// SetSourceID sets the "source_id" field.
func (u *HasSourceAtUpsertOne) SetSourceID(v uuid.UUID) *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *HasSourceAtUpsertOne) UpdateSourceID() *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateSourceID()
	})
}

// SetKnownSince sets the "known_since" field.
func (u *HasSourceAtUpsertOne) SetKnownSince(v time.Time) *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetKnownSince(v)
	})
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *HasSourceAtUpsertOne) UpdateKnownSince() *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateKnownSince()
	})
}

// SetJustification sets the "justification" field.
func (u *HasSourceAtUpsertOne) SetJustification(v string) *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *HasSourceAtUpsertOne) UpdateJustification() *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *HasSourceAtUpsertOne) SetOrigin(v string) *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *HasSourceAtUpsertOne) UpdateOrigin() *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *HasSourceAtUpsertOne) SetCollector(v string) *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *HasSourceAtUpsertOne) UpdateCollector() *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateCollector()
	})
}

// SetDocumentRef sets the "document_ref" field.
func (u *HasSourceAtUpsertOne) SetDocumentRef(v string) *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetDocumentRef(v)
	})
}

// UpdateDocumentRef sets the "document_ref" field to the value that was provided on create.
func (u *HasSourceAtUpsertOne) UpdateDocumentRef() *HasSourceAtUpsertOne {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateDocumentRef()
	})
}

// Exec executes the query.
func (u *HasSourceAtUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HasSourceAtCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HasSourceAtUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HasSourceAtUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: HasSourceAtUpsertOne.ID is not supported by MySQL driver. Use HasSourceAtUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HasSourceAtUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HasSourceAtCreateBulk is the builder for creating many HasSourceAt entities in bulk.
type HasSourceAtCreateBulk struct {
	config
	err      error
	builders []*HasSourceAtCreate
	conflict []sql.ConflictOption
}

// Save creates the HasSourceAt entities in the database.
func (hsacb *HasSourceAtCreateBulk) Save(ctx context.Context) ([]*HasSourceAt, error) {
	if hsacb.err != nil {
		return nil, hsacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hsacb.builders))
	nodes := make([]*HasSourceAt, len(hsacb.builders))
	mutators := make([]Mutator, len(hsacb.builders))
	for i := range hsacb.builders {
		func(i int, root context.Context) {
			builder := hsacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HasSourceAtMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hsacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hsacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hsacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hsacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hsacb *HasSourceAtCreateBulk) SaveX(ctx context.Context) []*HasSourceAt {
	v, err := hsacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hsacb *HasSourceAtCreateBulk) Exec(ctx context.Context) error {
	_, err := hsacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsacb *HasSourceAtCreateBulk) ExecX(ctx context.Context) {
	if err := hsacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HasSourceAt.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HasSourceAtUpsert) {
//			SetPackageVersionID(v+v).
//		}).
//		Exec(ctx)
func (hsacb *HasSourceAtCreateBulk) OnConflict(opts ...sql.ConflictOption) *HasSourceAtUpsertBulk {
	hsacb.conflict = opts
	return &HasSourceAtUpsertBulk{
		create: hsacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HasSourceAt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hsacb *HasSourceAtCreateBulk) OnConflictColumns(columns ...string) *HasSourceAtUpsertBulk {
	hsacb.conflict = append(hsacb.conflict, sql.ConflictColumns(columns...))
	return &HasSourceAtUpsertBulk{
		create: hsacb,
	}
}

// HasSourceAtUpsertBulk is the builder for "upsert"-ing
// a bulk of HasSourceAt nodes.
type HasSourceAtUpsertBulk struct {
	create *HasSourceAtCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HasSourceAt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hassourceat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HasSourceAtUpsertBulk) UpdateNewValues() *HasSourceAtUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(hassourceat.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HasSourceAt.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HasSourceAtUpsertBulk) Ignore() *HasSourceAtUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HasSourceAtUpsertBulk) DoNothing() *HasSourceAtUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HasSourceAtCreateBulk.OnConflict
// documentation for more info.
func (u *HasSourceAtUpsertBulk) Update(set func(*HasSourceAtUpsert)) *HasSourceAtUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HasSourceAtUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageVersionID sets the "package_version_id" field.
func (u *HasSourceAtUpsertBulk) SetPackageVersionID(v uuid.UUID) *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetPackageVersionID(v)
	})
}

// UpdatePackageVersionID sets the "package_version_id" field to the value that was provided on create.
func (u *HasSourceAtUpsertBulk) UpdatePackageVersionID() *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdatePackageVersionID()
	})
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (u *HasSourceAtUpsertBulk) ClearPackageVersionID() *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.ClearPackageVersionID()
	})
}

// SetPackageNameID sets the "package_name_id" field.
func (u *HasSourceAtUpsertBulk) SetPackageNameID(v uuid.UUID) *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetPackageNameID(v)
	})
}

// UpdatePackageNameID sets the "package_name_id" field to the value that was provided on create.
func (u *HasSourceAtUpsertBulk) UpdatePackageNameID() *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdatePackageNameID()
	})
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (u *HasSourceAtUpsertBulk) ClearPackageNameID() *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.ClearPackageNameID()
	})
}

// SetSourceID sets the "source_id" field.
func (u *HasSourceAtUpsertBulk) SetSourceID(v uuid.UUID) *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *HasSourceAtUpsertBulk) UpdateSourceID() *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateSourceID()
	})
}

// SetKnownSince sets the "known_since" field.
func (u *HasSourceAtUpsertBulk) SetKnownSince(v time.Time) *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetKnownSince(v)
	})
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *HasSourceAtUpsertBulk) UpdateKnownSince() *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateKnownSince()
	})
}

// SetJustification sets the "justification" field.
func (u *HasSourceAtUpsertBulk) SetJustification(v string) *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *HasSourceAtUpsertBulk) UpdateJustification() *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *HasSourceAtUpsertBulk) SetOrigin(v string) *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *HasSourceAtUpsertBulk) UpdateOrigin() *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *HasSourceAtUpsertBulk) SetCollector(v string) *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *HasSourceAtUpsertBulk) UpdateCollector() *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateCollector()
	})
}

// SetDocumentRef sets the "document_ref" field.
func (u *HasSourceAtUpsertBulk) SetDocumentRef(v string) *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.SetDocumentRef(v)
	})
}

// UpdateDocumentRef sets the "document_ref" field to the value that was provided on create.
func (u *HasSourceAtUpsertBulk) UpdateDocumentRef() *HasSourceAtUpsertBulk {
	return u.Update(func(s *HasSourceAtUpsert) {
		s.UpdateDocumentRef()
	})
}

// Exec executes the query.
func (u *HasSourceAtUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HasSourceAtCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HasSourceAtCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HasSourceAtUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

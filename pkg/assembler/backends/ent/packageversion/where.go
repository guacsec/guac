// Code generated by ent, DO NOT EDIT.

package packageversion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLTE(FieldID, id))
}

// NameID applies equality check predicate on the "name_id" field. It's identical to NameIDEQ.
func NameID(v int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldNameID, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldVersion, v))
}

// Subpath applies equality check predicate on the "subpath" field. It's identical to SubpathEQ.
func Subpath(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldSubpath, v))
}

// Qualifiers applies equality check predicate on the "qualifiers" field. It's identical to QualifiersEQ.
func Qualifiers(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldQualifiers, v))
}

// NameIDEQ applies the EQ predicate on the "name_id" field.
func NameIDEQ(v int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldNameID, v))
}

// NameIDNEQ applies the NEQ predicate on the "name_id" field.
func NameIDNEQ(v int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNEQ(FieldNameID, v))
}

// NameIDIn applies the In predicate on the "name_id" field.
func NameIDIn(vs ...int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIn(FieldNameID, vs...))
}

// NameIDNotIn applies the NotIn predicate on the "name_id" field.
func NameIDNotIn(vs ...int) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotIn(FieldNameID, vs...))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContainsFold(FieldVersion, v))
}

// SubpathEQ applies the EQ predicate on the "subpath" field.
func SubpathEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldSubpath, v))
}

// SubpathNEQ applies the NEQ predicate on the "subpath" field.
func SubpathNEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNEQ(FieldSubpath, v))
}

// SubpathIn applies the In predicate on the "subpath" field.
func SubpathIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIn(FieldSubpath, vs...))
}

// SubpathNotIn applies the NotIn predicate on the "subpath" field.
func SubpathNotIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotIn(FieldSubpath, vs...))
}

// SubpathGT applies the GT predicate on the "subpath" field.
func SubpathGT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGT(FieldSubpath, v))
}

// SubpathGTE applies the GTE predicate on the "subpath" field.
func SubpathGTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGTE(FieldSubpath, v))
}

// SubpathLT applies the LT predicate on the "subpath" field.
func SubpathLT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLT(FieldSubpath, v))
}

// SubpathLTE applies the LTE predicate on the "subpath" field.
func SubpathLTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLTE(FieldSubpath, v))
}

// SubpathContains applies the Contains predicate on the "subpath" field.
func SubpathContains(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContains(FieldSubpath, v))
}

// SubpathHasPrefix applies the HasPrefix predicate on the "subpath" field.
func SubpathHasPrefix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasPrefix(FieldSubpath, v))
}

// SubpathHasSuffix applies the HasSuffix predicate on the "subpath" field.
func SubpathHasSuffix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasSuffix(FieldSubpath, v))
}

// SubpathEqualFold applies the EqualFold predicate on the "subpath" field.
func SubpathEqualFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEqualFold(FieldSubpath, v))
}

// SubpathContainsFold applies the ContainsFold predicate on the "subpath" field.
func SubpathContainsFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContainsFold(FieldSubpath, v))
}

// QualifiersEQ applies the EQ predicate on the "qualifiers" field.
func QualifiersEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldQualifiers, v))
}

// QualifiersNEQ applies the NEQ predicate on the "qualifiers" field.
func QualifiersNEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNEQ(FieldQualifiers, v))
}

// QualifiersIn applies the In predicate on the "qualifiers" field.
func QualifiersIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIn(FieldQualifiers, vs...))
}

// QualifiersNotIn applies the NotIn predicate on the "qualifiers" field.
func QualifiersNotIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotIn(FieldQualifiers, vs...))
}

// QualifiersGT applies the GT predicate on the "qualifiers" field.
func QualifiersGT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGT(FieldQualifiers, v))
}

// QualifiersGTE applies the GTE predicate on the "qualifiers" field.
func QualifiersGTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGTE(FieldQualifiers, v))
}

// QualifiersLT applies the LT predicate on the "qualifiers" field.
func QualifiersLT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLT(FieldQualifiers, v))
}

// QualifiersLTE applies the LTE predicate on the "qualifiers" field.
func QualifiersLTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLTE(FieldQualifiers, v))
}

// QualifiersContains applies the Contains predicate on the "qualifiers" field.
func QualifiersContains(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContains(FieldQualifiers, v))
}

// QualifiersHasPrefix applies the HasPrefix predicate on the "qualifiers" field.
func QualifiersHasPrefix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasPrefix(FieldQualifiers, v))
}

// QualifiersHasSuffix applies the HasSuffix predicate on the "qualifiers" field.
func QualifiersHasSuffix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasSuffix(FieldQualifiers, v))
}

// QualifiersEqualFold applies the EqualFold predicate on the "qualifiers" field.
func QualifiersEqualFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEqualFold(FieldQualifiers, v))
}

// QualifiersContainsFold applies the ContainsFold predicate on the "qualifiers" field.
func QualifiersContainsFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContainsFold(FieldQualifiers, v))
}

// HasName applies the HasEdge predicate on the "name" edge.
func HasName() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NameTable, NameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNameWith applies the HasEdge predicate on the "name" edge with a given conditions (other predicates).
func HasNameWith(preds ...predicate.PackageName) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newNameStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PackageVersion) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PackageVersion) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PackageVersion) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		p(s.Not())
	})
}

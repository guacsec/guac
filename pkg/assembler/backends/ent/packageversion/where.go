// Code generated by ent, DO NOT EDIT.

package packageversion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLTE(FieldID, id))
}

// NameID applies equality check predicate on the "name_id" field. It's identical to NameIDEQ.
func NameID(v uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldNameID, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldVersion, v))
}

// Subpath applies equality check predicate on the "subpath" field. It's identical to SubpathEQ.
func Subpath(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldSubpath, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldHash, v))
}

// NameIDEQ applies the EQ predicate on the "name_id" field.
func NameIDEQ(v uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldNameID, v))
}

// NameIDNEQ applies the NEQ predicate on the "name_id" field.
func NameIDNEQ(v uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNEQ(FieldNameID, v))
}

// NameIDIn applies the In predicate on the "name_id" field.
func NameIDIn(vs ...uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIn(FieldNameID, vs...))
}

// NameIDNotIn applies the NotIn predicate on the "name_id" field.
func NameIDNotIn(vs ...uuid.UUID) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotIn(FieldNameID, vs...))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContainsFold(FieldVersion, v))
}

// SubpathEQ applies the EQ predicate on the "subpath" field.
func SubpathEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldSubpath, v))
}

// SubpathNEQ applies the NEQ predicate on the "subpath" field.
func SubpathNEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNEQ(FieldSubpath, v))
}

// SubpathIn applies the In predicate on the "subpath" field.
func SubpathIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIn(FieldSubpath, vs...))
}

// SubpathNotIn applies the NotIn predicate on the "subpath" field.
func SubpathNotIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotIn(FieldSubpath, vs...))
}

// SubpathGT applies the GT predicate on the "subpath" field.
func SubpathGT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGT(FieldSubpath, v))
}

// SubpathGTE applies the GTE predicate on the "subpath" field.
func SubpathGTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGTE(FieldSubpath, v))
}

// SubpathLT applies the LT predicate on the "subpath" field.
func SubpathLT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLT(FieldSubpath, v))
}

// SubpathLTE applies the LTE predicate on the "subpath" field.
func SubpathLTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLTE(FieldSubpath, v))
}

// SubpathContains applies the Contains predicate on the "subpath" field.
func SubpathContains(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContains(FieldSubpath, v))
}

// SubpathHasPrefix applies the HasPrefix predicate on the "subpath" field.
func SubpathHasPrefix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasPrefix(FieldSubpath, v))
}

// SubpathHasSuffix applies the HasSuffix predicate on the "subpath" field.
func SubpathHasSuffix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasSuffix(FieldSubpath, v))
}

// SubpathEqualFold applies the EqualFold predicate on the "subpath" field.
func SubpathEqualFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEqualFold(FieldSubpath, v))
}

// SubpathContainsFold applies the ContainsFold predicate on the "subpath" field.
func SubpathContainsFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContainsFold(FieldSubpath, v))
}

// QualifiersIsNil applies the IsNil predicate on the "qualifiers" field.
func QualifiersIsNil() predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIsNull(FieldQualifiers))
}

// QualifiersNotNil applies the NotNil predicate on the "qualifiers" field.
func QualifiersNotNil() predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotNull(FieldQualifiers))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.PackageVersion {
	return predicate.PackageVersion(sql.FieldContainsFold(FieldHash, v))
}

// HasName applies the HasEdge predicate on the "name" edge.
func HasName() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NameTable, NameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNameWith applies the HasEdge predicate on the "name" edge with a given conditions (other predicates).
func HasNameWith(preds ...predicate.PackageName) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newNameStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOccurrences applies the HasEdge predicate on the "occurrences" edge.
func HasOccurrences() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OccurrencesTable, OccurrencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOccurrencesWith applies the HasEdge predicate on the "occurrences" edge with a given conditions (other predicates).
func HasOccurrencesWith(preds ...predicate.Occurrence) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newOccurrencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSbom applies the HasEdge predicate on the "sbom" edge.
func HasSbom() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SbomTable, SbomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSbomWith applies the HasEdge predicate on the "sbom" edge with a given conditions (other predicates).
func HasSbomWith(preds ...predicate.BillOfMaterials) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newSbomStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVuln applies the HasEdge predicate on the "vuln" edge.
func HasVuln() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, VulnTable, VulnColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVulnWith applies the HasEdge predicate on the "vuln" edge with a given conditions (other predicates).
func HasVulnWith(preds ...predicate.CertifyVuln) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newVulnStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVex applies the HasEdge predicate on the "vex" edge.
func HasVex() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, VexTable, VexColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVexWith applies the HasEdge predicate on the "vex" edge with a given conditions (other predicates).
func HasVexWith(preds ...predicate.CertifyVex) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newVexStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHasSourceAt applies the HasEdge predicate on the "has_source_at" edge.
func HasHasSourceAt() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, HasSourceAtTable, HasSourceAtColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHasSourceAtWith applies the HasEdge predicate on the "has_source_at" edge with a given conditions (other predicates).
func HasHasSourceAtWith(preds ...predicate.HasSourceAt) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newHasSourceAtStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCertification applies the HasEdge predicate on the "certification" edge.
func HasCertification() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CertificationTable, CertificationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertificationWith applies the HasEdge predicate on the "certification" edge with a given conditions (other predicates).
func HasCertificationWith(preds ...predicate.Certification) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newCertificationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMetadata applies the HasEdge predicate on the "metadata" edge.
func HasMetadata() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataWith applies the HasEdge predicate on the "metadata" edge with a given conditions (other predicates).
func HasMetadataWith(preds ...predicate.HasMetadata) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newMetadataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependency applies the HasEdge predicate on the "dependency" edge.
func HasDependency() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DependencyTable, DependencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependencyWith applies the HasEdge predicate on the "dependency" edge with a given conditions (other predicates).
func HasDependencyWith(preds ...predicate.Dependency) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newDependencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependencySubject applies the HasEdge predicate on the "dependency_subject" edge.
func HasDependencySubject() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DependencySubjectTable, DependencySubjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependencySubjectWith applies the HasEdge predicate on the "dependency_subject" edge with a given conditions (other predicates).
func HasDependencySubjectWith(preds ...predicate.Dependency) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newDependencySubjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncludedInSboms applies the HasEdge predicate on the "included_in_sboms" edge.
func HasIncludedInSboms() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, IncludedInSbomsTable, IncludedInSbomsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncludedInSbomsWith applies the HasEdge predicate on the "included_in_sboms" edge with a given conditions (other predicates).
func HasIncludedInSbomsWith(preds ...predicate.BillOfMaterials) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newIncludedInSbomsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPkgEqualPkgA applies the HasEdge predicate on the "pkg_equal_pkg_a" edge.
func HasPkgEqualPkgA() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PkgEqualPkgATable, PkgEqualPkgAColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPkgEqualPkgAWith applies the HasEdge predicate on the "pkg_equal_pkg_a" edge with a given conditions (other predicates).
func HasPkgEqualPkgAWith(preds ...predicate.PkgEqual) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newPkgEqualPkgAStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPkgEqualPkgB applies the HasEdge predicate on the "pkg_equal_pkg_b" edge.
func HasPkgEqualPkgB() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PkgEqualPkgBTable, PkgEqualPkgBColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPkgEqualPkgBWith applies the HasEdge predicate on the "pkg_equal_pkg_b" edge with a given conditions (other predicates).
func HasPkgEqualPkgBWith(preds ...predicate.PkgEqual) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newPkgEqualPkgBStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPoc applies the HasEdge predicate on the "poc" edge.
func HasPoc() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PocTable, PocColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPocWith applies the HasEdge predicate on the "poc" edge with a given conditions (other predicates).
func HasPocWith(preds ...predicate.PointOfContact) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newPocStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCertifyLegal applies the HasEdge predicate on the "certify_legal" edge.
func HasCertifyLegal() predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CertifyLegalTable, CertifyLegalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertifyLegalWith applies the HasEdge predicate on the "certify_legal" edge with a given conditions (other predicates).
func HasCertifyLegalWith(preds ...predicate.CertifyLegal) predicate.PackageVersion {
	return predicate.PackageVersion(func(s *sql.Selector) {
		step := newCertifyLegalStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PackageVersion) predicate.PackageVersion {
	return predicate.PackageVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PackageVersion) predicate.PackageVersion {
	return predicate.PackageVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PackageVersion) predicate.PackageVersion {
	return predicate.PackageVersion(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package packageversion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the packageversion type in the database.
	Label = "package_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNameID holds the string denoting the name_id field in the database.
	FieldNameID = "name_id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldSubpath holds the string denoting the subpath field in the database.
	FieldSubpath = "subpath"
	// FieldQualifiers holds the string denoting the qualifiers field in the database.
	FieldQualifiers = "qualifiers"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// EdgeName holds the string denoting the name edge name in mutations.
	EdgeName = "name"
	// EdgeOccurrences holds the string denoting the occurrences edge name in mutations.
	EdgeOccurrences = "occurrences"
	// EdgeSbom holds the string denoting the sbom edge name in mutations.
	EdgeSbom = "sbom"
	// EdgeVuln holds the string denoting the vuln edge name in mutations.
	EdgeVuln = "vuln"
	// EdgeVex holds the string denoting the vex edge name in mutations.
	EdgeVex = "vex"
	// EdgeHasSourceAt holds the string denoting the has_source_at edge name in mutations.
	EdgeHasSourceAt = "has_source_at"
	// EdgeCertification holds the string denoting the certification edge name in mutations.
	EdgeCertification = "certification"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgeDependency holds the string denoting the dependency edge name in mutations.
	EdgeDependency = "dependency"
	// EdgeDependencySubject holds the string denoting the dependency_subject edge name in mutations.
	EdgeDependencySubject = "dependency_subject"
	// EdgeIncludedInSboms holds the string denoting the included_in_sboms edge name in mutations.
	EdgeIncludedInSboms = "included_in_sboms"
	// EdgePkgEqualPkgA holds the string denoting the pkg_equal_pkg_a edge name in mutations.
	EdgePkgEqualPkgA = "pkg_equal_pkg_a"
	// EdgePkgEqualPkgB holds the string denoting the pkg_equal_pkg_b edge name in mutations.
	EdgePkgEqualPkgB = "pkg_equal_pkg_b"
	// EdgePoc holds the string denoting the poc edge name in mutations.
	EdgePoc = "poc"
	// EdgeCertifyLegal holds the string denoting the certify_legal edge name in mutations.
	EdgeCertifyLegal = "certify_legal"
	// Table holds the table name of the packageversion in the database.
	Table = "package_versions"
	// NameTable is the table that holds the name relation/edge.
	NameTable = "package_versions"
	// NameInverseTable is the table name for the PackageName entity.
	// It exists in this package in order to avoid circular dependency with the "packagename" package.
	NameInverseTable = "package_names"
	// NameColumn is the table column denoting the name relation/edge.
	NameColumn = "name_id"
	// OccurrencesTable is the table that holds the occurrences relation/edge.
	OccurrencesTable = "occurrences"
	// OccurrencesInverseTable is the table name for the Occurrence entity.
	// It exists in this package in order to avoid circular dependency with the "occurrence" package.
	OccurrencesInverseTable = "occurrences"
	// OccurrencesColumn is the table column denoting the occurrences relation/edge.
	OccurrencesColumn = "package_id"
	// SbomTable is the table that holds the sbom relation/edge.
	SbomTable = "bill_of_materials"
	// SbomInverseTable is the table name for the BillOfMaterials entity.
	// It exists in this package in order to avoid circular dependency with the "billofmaterials" package.
	SbomInverseTable = "bill_of_materials"
	// SbomColumn is the table column denoting the sbom relation/edge.
	SbomColumn = "package_id"
	// VulnTable is the table that holds the vuln relation/edge.
	VulnTable = "certify_vulns"
	// VulnInverseTable is the table name for the CertifyVuln entity.
	// It exists in this package in order to avoid circular dependency with the "certifyvuln" package.
	VulnInverseTable = "certify_vulns"
	// VulnColumn is the table column denoting the vuln relation/edge.
	VulnColumn = "package_id"
	// VexTable is the table that holds the vex relation/edge.
	VexTable = "certify_vexes"
	// VexInverseTable is the table name for the CertifyVex entity.
	// It exists in this package in order to avoid circular dependency with the "certifyvex" package.
	VexInverseTable = "certify_vexes"
	// VexColumn is the table column denoting the vex relation/edge.
	VexColumn = "package_id"
	// HasSourceAtTable is the table that holds the has_source_at relation/edge.
	HasSourceAtTable = "has_source_ats"
	// HasSourceAtInverseTable is the table name for the HasSourceAt entity.
	// It exists in this package in order to avoid circular dependency with the "hassourceat" package.
	HasSourceAtInverseTable = "has_source_ats"
	// HasSourceAtColumn is the table column denoting the has_source_at relation/edge.
	HasSourceAtColumn = "package_version_id"
	// CertificationTable is the table that holds the certification relation/edge.
	CertificationTable = "certifications"
	// CertificationInverseTable is the table name for the Certification entity.
	// It exists in this package in order to avoid circular dependency with the "certification" package.
	CertificationInverseTable = "certifications"
	// CertificationColumn is the table column denoting the certification relation/edge.
	CertificationColumn = "package_version_id"
	// MetadataTable is the table that holds the metadata relation/edge.
	MetadataTable = "has_metadata"
	// MetadataInverseTable is the table name for the HasMetadata entity.
	// It exists in this package in order to avoid circular dependency with the "hasmetadata" package.
	MetadataInverseTable = "has_metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "package_version_id"
	// DependencyTable is the table that holds the dependency relation/edge.
	DependencyTable = "dependencies"
	// DependencyInverseTable is the table name for the Dependency entity.
	// It exists in this package in order to avoid circular dependency with the "dependency" package.
	DependencyInverseTable = "dependencies"
	// DependencyColumn is the table column denoting the dependency relation/edge.
	DependencyColumn = "dependent_package_version_id"
	// DependencySubjectTable is the table that holds the dependency_subject relation/edge.
	DependencySubjectTable = "dependencies"
	// DependencySubjectInverseTable is the table name for the Dependency entity.
	// It exists in this package in order to avoid circular dependency with the "dependency" package.
	DependencySubjectInverseTable = "dependencies"
	// DependencySubjectColumn is the table column denoting the dependency_subject relation/edge.
	DependencySubjectColumn = "package_id"
	// IncludedInSbomsTable is the table that holds the included_in_sboms relation/edge. The primary key declared below.
	IncludedInSbomsTable = "bill_of_materials_included_software_packages"
	// IncludedInSbomsInverseTable is the table name for the BillOfMaterials entity.
	// It exists in this package in order to avoid circular dependency with the "billofmaterials" package.
	IncludedInSbomsInverseTable = "bill_of_materials"
	// PkgEqualPkgATable is the table that holds the pkg_equal_pkg_a relation/edge.
	PkgEqualPkgATable = "pkg_equals"
	// PkgEqualPkgAInverseTable is the table name for the PkgEqual entity.
	// It exists in this package in order to avoid circular dependency with the "pkgequal" package.
	PkgEqualPkgAInverseTable = "pkg_equals"
	// PkgEqualPkgAColumn is the table column denoting the pkg_equal_pkg_a relation/edge.
	PkgEqualPkgAColumn = "pkg_id"
	// PkgEqualPkgBTable is the table that holds the pkg_equal_pkg_b relation/edge.
	PkgEqualPkgBTable = "pkg_equals"
	// PkgEqualPkgBInverseTable is the table name for the PkgEqual entity.
	// It exists in this package in order to avoid circular dependency with the "pkgequal" package.
	PkgEqualPkgBInverseTable = "pkg_equals"
	// PkgEqualPkgBColumn is the table column denoting the pkg_equal_pkg_b relation/edge.
	PkgEqualPkgBColumn = "equal_pkg_id"
	// PocTable is the table that holds the poc relation/edge.
	PocTable = "point_of_contacts"
	// PocInverseTable is the table name for the PointOfContact entity.
	// It exists in this package in order to avoid circular dependency with the "pointofcontact" package.
	PocInverseTable = "point_of_contacts"
	// PocColumn is the table column denoting the poc relation/edge.
	PocColumn = "package_version_id"
	// CertifyLegalTable is the table that holds the certify_legal relation/edge.
	CertifyLegalTable = "certify_legals"
	// CertifyLegalInverseTable is the table name for the CertifyLegal entity.
	// It exists in this package in order to avoid circular dependency with the "certifylegal" package.
	CertifyLegalInverseTable = "certify_legals"
	// CertifyLegalColumn is the table column denoting the certify_legal relation/edge.
	CertifyLegalColumn = "package_id"
)

// Columns holds all SQL columns for packageversion fields.
var Columns = []string{
	FieldID,
	FieldNameID,
	FieldVersion,
	FieldSubpath,
	FieldQualifiers,
	FieldHash,
}

var (
	// IncludedInSbomsPrimaryKey and IncludedInSbomsColumn2 are the table columns denoting the
	// primary key for the included_in_sboms relation (M2M).
	IncludedInSbomsPrimaryKey = []string{"bill_of_materials_id", "package_version_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion string
	// DefaultSubpath holds the default value on creation for the "subpath" field.
	DefaultSubpath string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the PackageVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNameID orders the results by the name_id field.
func ByNameID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// BySubpath orders the results by the subpath field.
func BySubpath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubpath, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByNameField orders the results by name field.
func ByNameField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNameStep(), sql.OrderByField(field, opts...))
	}
}

// ByOccurrencesCount orders the results by occurrences count.
func ByOccurrencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOccurrencesStep(), opts...)
	}
}

// ByOccurrences orders the results by occurrences terms.
func ByOccurrences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOccurrencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySbomCount orders the results by sbom count.
func BySbomCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSbomStep(), opts...)
	}
}

// BySbom orders the results by sbom terms.
func BySbom(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSbomStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVulnCount orders the results by vuln count.
func ByVulnCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVulnStep(), opts...)
	}
}

// ByVuln orders the results by vuln terms.
func ByVuln(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVexCount orders the results by vex count.
func ByVexCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVexStep(), opts...)
	}
}

// ByVex orders the results by vex terms.
func ByVex(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVexStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHasSourceAtCount orders the results by has_source_at count.
func ByHasSourceAtCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHasSourceAtStep(), opts...)
	}
}

// ByHasSourceAt orders the results by has_source_at terms.
func ByHasSourceAt(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHasSourceAtStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCertificationCount orders the results by certification count.
func ByCertificationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCertificationStep(), opts...)
	}
}

// ByCertification orders the results by certification terms.
func ByCertification(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCertificationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMetadataCount orders the results by metadata count.
func ByMetadataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetadataStep(), opts...)
	}
}

// ByMetadata orders the results by metadata terms.
func ByMetadata(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetadataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependencyCount orders the results by dependency count.
func ByDependencyCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependencyStep(), opts...)
	}
}

// ByDependency orders the results by dependency terms.
func ByDependency(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependencyStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependencySubjectCount orders the results by dependency_subject count.
func ByDependencySubjectCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependencySubjectStep(), opts...)
	}
}

// ByDependencySubject orders the results by dependency_subject terms.
func ByDependencySubject(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependencySubjectStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncludedInSbomsCount orders the results by included_in_sboms count.
func ByIncludedInSbomsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncludedInSbomsStep(), opts...)
	}
}

// ByIncludedInSboms orders the results by included_in_sboms terms.
func ByIncludedInSboms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncludedInSbomsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPkgEqualPkgACount orders the results by pkg_equal_pkg_a count.
func ByPkgEqualPkgACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPkgEqualPkgAStep(), opts...)
	}
}

// ByPkgEqualPkgA orders the results by pkg_equal_pkg_a terms.
func ByPkgEqualPkgA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPkgEqualPkgAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPkgEqualPkgBCount orders the results by pkg_equal_pkg_b count.
func ByPkgEqualPkgBCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPkgEqualPkgBStep(), opts...)
	}
}

// ByPkgEqualPkgB orders the results by pkg_equal_pkg_b terms.
func ByPkgEqualPkgB(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPkgEqualPkgBStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPocCount orders the results by poc count.
func ByPocCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPocStep(), opts...)
	}
}

// ByPoc orders the results by poc terms.
func ByPoc(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPocStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCertifyLegalCount orders the results by certify_legal count.
func ByCertifyLegalCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCertifyLegalStep(), opts...)
	}
}

// ByCertifyLegal orders the results by certify_legal terms.
func ByCertifyLegal(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCertifyLegalStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNameStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NameInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NameTable, NameColumn),
	)
}
func newOccurrencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OccurrencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OccurrencesTable, OccurrencesColumn),
	)
}
func newSbomStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SbomInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SbomTable, SbomColumn),
	)
}
func newVulnStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, VulnTable, VulnColumn),
	)
}
func newVexStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VexInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, VexTable, VexColumn),
	)
}
func newHasSourceAtStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HasSourceAtInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HasSourceAtTable, HasSourceAtColumn),
	)
}
func newCertificationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CertificationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CertificationTable, CertificationColumn),
	)
}
func newMetadataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetadataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MetadataTable, MetadataColumn),
	)
}
func newDependencyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependencyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DependencyTable, DependencyColumn),
	)
}
func newDependencySubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependencySubjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DependencySubjectTable, DependencySubjectColumn),
	)
}
func newIncludedInSbomsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncludedInSbomsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, IncludedInSbomsTable, IncludedInSbomsPrimaryKey...),
	)
}
func newPkgEqualPkgAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PkgEqualPkgAInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PkgEqualPkgATable, PkgEqualPkgAColumn),
	)
}
func newPkgEqualPkgBStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PkgEqualPkgBInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PkgEqualPkgBTable, PkgEqualPkgBColumn),
	)
}
func newPocStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PocInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PocTable, PocColumn),
	)
}
func newCertifyLegalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CertifyLegalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CertifyLegalTable, CertifyLegalColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package slsaattestation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the slsaattestation type in the database.
	Label = "slsa_attestation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBuildType holds the string denoting the build_type field in the database.
	FieldBuildType = "build_type"
	// FieldBuiltByID holds the string denoting the built_by_id field in the database.
	FieldBuiltByID = "built_by_id"
	// FieldSubjectID holds the string denoting the subject_id field in the database.
	FieldSubjectID = "subject_id"
	// FieldSlsaPredicate holds the string denoting the slsa_predicate field in the database.
	FieldSlsaPredicate = "slsa_predicate"
	// FieldSlsaVersion holds the string denoting the slsa_version field in the database.
	FieldSlsaVersion = "slsa_version"
	// FieldStartedOn holds the string denoting the started_on field in the database.
	FieldStartedOn = "started_on"
	// FieldFinishedOn holds the string denoting the finished_on field in the database.
	FieldFinishedOn = "finished_on"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// FieldBuiltFromHash holds the string denoting the built_from_hash field in the database.
	FieldBuiltFromHash = "built_from_hash"
	// EdgeBuiltFrom holds the string denoting the built_from edge name in mutations.
	EdgeBuiltFrom = "built_from"
	// EdgeBuiltBy holds the string denoting the built_by edge name in mutations.
	EdgeBuiltBy = "built_by"
	// EdgeSubject holds the string denoting the subject edge name in mutations.
	EdgeSubject = "subject"
	// Table holds the table name of the slsaattestation in the database.
	Table = "slsa_attestations"
	// BuiltFromTable is the table that holds the built_from relation/edge. The primary key declared below.
	BuiltFromTable = "slsa_attestation_built_from"
	// BuiltFromInverseTable is the table name for the Artifact entity.
	// It exists in this package in order to avoid circular dependency with the "artifact" package.
	BuiltFromInverseTable = "artifacts"
	// BuiltByTable is the table that holds the built_by relation/edge.
	BuiltByTable = "slsa_attestations"
	// BuiltByInverseTable is the table name for the Builder entity.
	// It exists in this package in order to avoid circular dependency with the "builder" package.
	BuiltByInverseTable = "builders"
	// BuiltByColumn is the table column denoting the built_by relation/edge.
	BuiltByColumn = "built_by_id"
	// SubjectTable is the table that holds the subject relation/edge.
	SubjectTable = "slsa_attestations"
	// SubjectInverseTable is the table name for the Artifact entity.
	// It exists in this package in order to avoid circular dependency with the "artifact" package.
	SubjectInverseTable = "artifacts"
	// SubjectColumn is the table column denoting the subject relation/edge.
	SubjectColumn = "subject_id"
)

// Columns holds all SQL columns for slsaattestation fields.
var Columns = []string{
	FieldID,
	FieldBuildType,
	FieldBuiltByID,
	FieldSubjectID,
	FieldSlsaPredicate,
	FieldSlsaVersion,
	FieldStartedOn,
	FieldFinishedOn,
	FieldOrigin,
	FieldCollector,
	FieldBuiltFromHash,
}

var (
	// BuiltFromPrimaryKey and BuiltFromColumn2 are the table columns denoting the
	// primary key for the built_from relation (M2M).
	BuiltFromPrimaryKey = []string{"slsa_attestation_id", "artifact_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SLSAAttestation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBuildType orders the results by the build_type field.
func ByBuildType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildType, opts...).ToFunc()
}

// ByBuiltByID orders the results by the built_by_id field.
func ByBuiltByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuiltByID, opts...).ToFunc()
}

// BySubjectID orders the results by the subject_id field.
func BySubjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectID, opts...).ToFunc()
}

// BySlsaVersion orders the results by the slsa_version field.
func BySlsaVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlsaVersion, opts...).ToFunc()
}

// ByStartedOn orders the results by the started_on field.
func ByStartedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedOn, opts...).ToFunc()
}

// ByFinishedOn orders the results by the finished_on field.
func ByFinishedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedOn, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByBuiltFromHash orders the results by the built_from_hash field.
func ByBuiltFromHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuiltFromHash, opts...).ToFunc()
}

// ByBuiltFromCount orders the results by built_from count.
func ByBuiltFromCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBuiltFromStep(), opts...)
	}
}

// ByBuiltFrom orders the results by built_from terms.
func ByBuiltFrom(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBuiltFromStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBuiltByField orders the results by built_by field.
func ByBuiltByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBuiltByStep(), sql.OrderByField(field, opts...))
	}
}

// BySubjectField orders the results by subject field.
func BySubjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectStep(), sql.OrderByField(field, opts...))
	}
}
func newBuiltFromStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BuiltFromInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, BuiltFromTable, BuiltFromPrimaryKey...),
	)
}
func newBuiltByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BuiltByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BuiltByTable, BuiltByColumn),
	)
}
func newSubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubjectTable, SubjectColumn),
	)
}

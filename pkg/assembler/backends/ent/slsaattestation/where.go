// Code generated by ent, DO NOT EDIT.

package slsaattestation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLTE(FieldID, id))
}

// BuildType applies equality check predicate on the "build_type" field. It's identical to BuildTypeEQ.
func BuildType(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldBuildType, v))
}

// BuiltByID applies equality check predicate on the "built_by_id" field. It's identical to BuiltByIDEQ.
func BuiltByID(v int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldBuiltByID, v))
}

// SubjectID applies equality check predicate on the "subject_id" field. It's identical to SubjectIDEQ.
func SubjectID(v int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldSubjectID, v))
}

// SlsaVersion applies equality check predicate on the "slsa_version" field. It's identical to SlsaVersionEQ.
func SlsaVersion(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldSlsaVersion, v))
}

// StartedOn applies equality check predicate on the "started_on" field. It's identical to StartedOnEQ.
func StartedOn(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldStartedOn, v))
}

// FinishedOn applies equality check predicate on the "finished_on" field. It's identical to FinishedOnEQ.
func FinishedOn(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldFinishedOn, v))
}

// Origin applies equality check predicate on the "origin" field. It's identical to OriginEQ.
func Origin(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldOrigin, v))
}

// Collector applies equality check predicate on the "collector" field. It's identical to CollectorEQ.
func Collector(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldCollector, v))
}

// BuiltFromHash applies equality check predicate on the "built_from_hash" field. It's identical to BuiltFromHashEQ.
func BuiltFromHash(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldBuiltFromHash, v))
}

// BuildTypeEQ applies the EQ predicate on the "build_type" field.
func BuildTypeEQ(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldBuildType, v))
}

// BuildTypeNEQ applies the NEQ predicate on the "build_type" field.
func BuildTypeNEQ(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNEQ(FieldBuildType, v))
}

// BuildTypeIn applies the In predicate on the "build_type" field.
func BuildTypeIn(vs ...string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIn(FieldBuildType, vs...))
}

// BuildTypeNotIn applies the NotIn predicate on the "build_type" field.
func BuildTypeNotIn(vs ...string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotIn(FieldBuildType, vs...))
}

// BuildTypeGT applies the GT predicate on the "build_type" field.
func BuildTypeGT(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGT(FieldBuildType, v))
}

// BuildTypeGTE applies the GTE predicate on the "build_type" field.
func BuildTypeGTE(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGTE(FieldBuildType, v))
}

// BuildTypeLT applies the LT predicate on the "build_type" field.
func BuildTypeLT(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLT(FieldBuildType, v))
}

// BuildTypeLTE applies the LTE predicate on the "build_type" field.
func BuildTypeLTE(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLTE(FieldBuildType, v))
}

// BuildTypeContains applies the Contains predicate on the "build_type" field.
func BuildTypeContains(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldContains(FieldBuildType, v))
}

// BuildTypeHasPrefix applies the HasPrefix predicate on the "build_type" field.
func BuildTypeHasPrefix(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldHasPrefix(FieldBuildType, v))
}

// BuildTypeHasSuffix applies the HasSuffix predicate on the "build_type" field.
func BuildTypeHasSuffix(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldHasSuffix(FieldBuildType, v))
}

// BuildTypeEqualFold applies the EqualFold predicate on the "build_type" field.
func BuildTypeEqualFold(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEqualFold(FieldBuildType, v))
}

// BuildTypeContainsFold applies the ContainsFold predicate on the "build_type" field.
func BuildTypeContainsFold(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldContainsFold(FieldBuildType, v))
}

// BuiltByIDEQ applies the EQ predicate on the "built_by_id" field.
func BuiltByIDEQ(v int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldBuiltByID, v))
}

// BuiltByIDNEQ applies the NEQ predicate on the "built_by_id" field.
func BuiltByIDNEQ(v int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNEQ(FieldBuiltByID, v))
}

// BuiltByIDIn applies the In predicate on the "built_by_id" field.
func BuiltByIDIn(vs ...int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIn(FieldBuiltByID, vs...))
}

// BuiltByIDNotIn applies the NotIn predicate on the "built_by_id" field.
func BuiltByIDNotIn(vs ...int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotIn(FieldBuiltByID, vs...))
}

// SubjectIDEQ applies the EQ predicate on the "subject_id" field.
func SubjectIDEQ(v int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldSubjectID, v))
}

// SubjectIDNEQ applies the NEQ predicate on the "subject_id" field.
func SubjectIDNEQ(v int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNEQ(FieldSubjectID, v))
}

// SubjectIDIn applies the In predicate on the "subject_id" field.
func SubjectIDIn(vs ...int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIn(FieldSubjectID, vs...))
}

// SubjectIDNotIn applies the NotIn predicate on the "subject_id" field.
func SubjectIDNotIn(vs ...int) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotIn(FieldSubjectID, vs...))
}

// SlsaPredicateIsNil applies the IsNil predicate on the "slsa_predicate" field.
func SlsaPredicateIsNil() predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIsNull(FieldSlsaPredicate))
}

// SlsaPredicateNotNil applies the NotNil predicate on the "slsa_predicate" field.
func SlsaPredicateNotNil() predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotNull(FieldSlsaPredicate))
}

// SlsaVersionEQ applies the EQ predicate on the "slsa_version" field.
func SlsaVersionEQ(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldSlsaVersion, v))
}

// SlsaVersionNEQ applies the NEQ predicate on the "slsa_version" field.
func SlsaVersionNEQ(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNEQ(FieldSlsaVersion, v))
}

// SlsaVersionIn applies the In predicate on the "slsa_version" field.
func SlsaVersionIn(vs ...string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIn(FieldSlsaVersion, vs...))
}

// SlsaVersionNotIn applies the NotIn predicate on the "slsa_version" field.
func SlsaVersionNotIn(vs ...string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotIn(FieldSlsaVersion, vs...))
}

// SlsaVersionGT applies the GT predicate on the "slsa_version" field.
func SlsaVersionGT(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGT(FieldSlsaVersion, v))
}

// SlsaVersionGTE applies the GTE predicate on the "slsa_version" field.
func SlsaVersionGTE(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGTE(FieldSlsaVersion, v))
}

// SlsaVersionLT applies the LT predicate on the "slsa_version" field.
func SlsaVersionLT(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLT(FieldSlsaVersion, v))
}

// SlsaVersionLTE applies the LTE predicate on the "slsa_version" field.
func SlsaVersionLTE(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLTE(FieldSlsaVersion, v))
}

// SlsaVersionContains applies the Contains predicate on the "slsa_version" field.
func SlsaVersionContains(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldContains(FieldSlsaVersion, v))
}

// SlsaVersionHasPrefix applies the HasPrefix predicate on the "slsa_version" field.
func SlsaVersionHasPrefix(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldHasPrefix(FieldSlsaVersion, v))
}

// SlsaVersionHasSuffix applies the HasSuffix predicate on the "slsa_version" field.
func SlsaVersionHasSuffix(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldHasSuffix(FieldSlsaVersion, v))
}

// SlsaVersionEqualFold applies the EqualFold predicate on the "slsa_version" field.
func SlsaVersionEqualFold(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEqualFold(FieldSlsaVersion, v))
}

// SlsaVersionContainsFold applies the ContainsFold predicate on the "slsa_version" field.
func SlsaVersionContainsFold(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldContainsFold(FieldSlsaVersion, v))
}

// StartedOnEQ applies the EQ predicate on the "started_on" field.
func StartedOnEQ(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldStartedOn, v))
}

// StartedOnNEQ applies the NEQ predicate on the "started_on" field.
func StartedOnNEQ(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNEQ(FieldStartedOn, v))
}

// StartedOnIn applies the In predicate on the "started_on" field.
func StartedOnIn(vs ...time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIn(FieldStartedOn, vs...))
}

// StartedOnNotIn applies the NotIn predicate on the "started_on" field.
func StartedOnNotIn(vs ...time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotIn(FieldStartedOn, vs...))
}

// StartedOnGT applies the GT predicate on the "started_on" field.
func StartedOnGT(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGT(FieldStartedOn, v))
}

// StartedOnGTE applies the GTE predicate on the "started_on" field.
func StartedOnGTE(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGTE(FieldStartedOn, v))
}

// StartedOnLT applies the LT predicate on the "started_on" field.
func StartedOnLT(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLT(FieldStartedOn, v))
}

// StartedOnLTE applies the LTE predicate on the "started_on" field.
func StartedOnLTE(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLTE(FieldStartedOn, v))
}

// StartedOnIsNil applies the IsNil predicate on the "started_on" field.
func StartedOnIsNil() predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIsNull(FieldStartedOn))
}

// StartedOnNotNil applies the NotNil predicate on the "started_on" field.
func StartedOnNotNil() predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotNull(FieldStartedOn))
}

// FinishedOnEQ applies the EQ predicate on the "finished_on" field.
func FinishedOnEQ(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldFinishedOn, v))
}

// FinishedOnNEQ applies the NEQ predicate on the "finished_on" field.
func FinishedOnNEQ(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNEQ(FieldFinishedOn, v))
}

// FinishedOnIn applies the In predicate on the "finished_on" field.
func FinishedOnIn(vs ...time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIn(FieldFinishedOn, vs...))
}

// FinishedOnNotIn applies the NotIn predicate on the "finished_on" field.
func FinishedOnNotIn(vs ...time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotIn(FieldFinishedOn, vs...))
}

// FinishedOnGT applies the GT predicate on the "finished_on" field.
func FinishedOnGT(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGT(FieldFinishedOn, v))
}

// FinishedOnGTE applies the GTE predicate on the "finished_on" field.
func FinishedOnGTE(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGTE(FieldFinishedOn, v))
}

// FinishedOnLT applies the LT predicate on the "finished_on" field.
func FinishedOnLT(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLT(FieldFinishedOn, v))
}

// FinishedOnLTE applies the LTE predicate on the "finished_on" field.
func FinishedOnLTE(v time.Time) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLTE(FieldFinishedOn, v))
}

// FinishedOnIsNil applies the IsNil predicate on the "finished_on" field.
func FinishedOnIsNil() predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIsNull(FieldFinishedOn))
}

// FinishedOnNotNil applies the NotNil predicate on the "finished_on" field.
func FinishedOnNotNil() predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotNull(FieldFinishedOn))
}

// OriginEQ applies the EQ predicate on the "origin" field.
func OriginEQ(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldOrigin, v))
}

// OriginNEQ applies the NEQ predicate on the "origin" field.
func OriginNEQ(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNEQ(FieldOrigin, v))
}

// OriginIn applies the In predicate on the "origin" field.
func OriginIn(vs ...string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIn(FieldOrigin, vs...))
}

// OriginNotIn applies the NotIn predicate on the "origin" field.
func OriginNotIn(vs ...string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotIn(FieldOrigin, vs...))
}

// OriginGT applies the GT predicate on the "origin" field.
func OriginGT(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGT(FieldOrigin, v))
}

// OriginGTE applies the GTE predicate on the "origin" field.
func OriginGTE(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGTE(FieldOrigin, v))
}

// OriginLT applies the LT predicate on the "origin" field.
func OriginLT(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLT(FieldOrigin, v))
}

// OriginLTE applies the LTE predicate on the "origin" field.
func OriginLTE(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLTE(FieldOrigin, v))
}

// OriginContains applies the Contains predicate on the "origin" field.
func OriginContains(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldContains(FieldOrigin, v))
}

// OriginHasPrefix applies the HasPrefix predicate on the "origin" field.
func OriginHasPrefix(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldHasPrefix(FieldOrigin, v))
}

// OriginHasSuffix applies the HasSuffix predicate on the "origin" field.
func OriginHasSuffix(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldHasSuffix(FieldOrigin, v))
}

// OriginEqualFold applies the EqualFold predicate on the "origin" field.
func OriginEqualFold(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEqualFold(FieldOrigin, v))
}

// OriginContainsFold applies the ContainsFold predicate on the "origin" field.
func OriginContainsFold(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldContainsFold(FieldOrigin, v))
}

// CollectorEQ applies the EQ predicate on the "collector" field.
func CollectorEQ(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldCollector, v))
}

// CollectorNEQ applies the NEQ predicate on the "collector" field.
func CollectorNEQ(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNEQ(FieldCollector, v))
}

// CollectorIn applies the In predicate on the "collector" field.
func CollectorIn(vs ...string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIn(FieldCollector, vs...))
}

// CollectorNotIn applies the NotIn predicate on the "collector" field.
func CollectorNotIn(vs ...string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotIn(FieldCollector, vs...))
}

// CollectorGT applies the GT predicate on the "collector" field.
func CollectorGT(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGT(FieldCollector, v))
}

// CollectorGTE applies the GTE predicate on the "collector" field.
func CollectorGTE(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGTE(FieldCollector, v))
}

// CollectorLT applies the LT predicate on the "collector" field.
func CollectorLT(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLT(FieldCollector, v))
}

// CollectorLTE applies the LTE predicate on the "collector" field.
func CollectorLTE(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLTE(FieldCollector, v))
}

// CollectorContains applies the Contains predicate on the "collector" field.
func CollectorContains(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldContains(FieldCollector, v))
}

// CollectorHasPrefix applies the HasPrefix predicate on the "collector" field.
func CollectorHasPrefix(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldHasPrefix(FieldCollector, v))
}

// CollectorHasSuffix applies the HasSuffix predicate on the "collector" field.
func CollectorHasSuffix(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldHasSuffix(FieldCollector, v))
}

// CollectorEqualFold applies the EqualFold predicate on the "collector" field.
func CollectorEqualFold(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEqualFold(FieldCollector, v))
}

// CollectorContainsFold applies the ContainsFold predicate on the "collector" field.
func CollectorContainsFold(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldContainsFold(FieldCollector, v))
}

// BuiltFromHashEQ applies the EQ predicate on the "built_from_hash" field.
func BuiltFromHashEQ(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEQ(FieldBuiltFromHash, v))
}

// BuiltFromHashNEQ applies the NEQ predicate on the "built_from_hash" field.
func BuiltFromHashNEQ(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNEQ(FieldBuiltFromHash, v))
}

// BuiltFromHashIn applies the In predicate on the "built_from_hash" field.
func BuiltFromHashIn(vs ...string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldIn(FieldBuiltFromHash, vs...))
}

// BuiltFromHashNotIn applies the NotIn predicate on the "built_from_hash" field.
func BuiltFromHashNotIn(vs ...string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldNotIn(FieldBuiltFromHash, vs...))
}

// BuiltFromHashGT applies the GT predicate on the "built_from_hash" field.
func BuiltFromHashGT(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGT(FieldBuiltFromHash, v))
}

// BuiltFromHashGTE applies the GTE predicate on the "built_from_hash" field.
func BuiltFromHashGTE(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldGTE(FieldBuiltFromHash, v))
}

// BuiltFromHashLT applies the LT predicate on the "built_from_hash" field.
func BuiltFromHashLT(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLT(FieldBuiltFromHash, v))
}

// BuiltFromHashLTE applies the LTE predicate on the "built_from_hash" field.
func BuiltFromHashLTE(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldLTE(FieldBuiltFromHash, v))
}

// BuiltFromHashContains applies the Contains predicate on the "built_from_hash" field.
func BuiltFromHashContains(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldContains(FieldBuiltFromHash, v))
}

// BuiltFromHashHasPrefix applies the HasPrefix predicate on the "built_from_hash" field.
func BuiltFromHashHasPrefix(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldHasPrefix(FieldBuiltFromHash, v))
}

// BuiltFromHashHasSuffix applies the HasSuffix predicate on the "built_from_hash" field.
func BuiltFromHashHasSuffix(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldHasSuffix(FieldBuiltFromHash, v))
}

// BuiltFromHashEqualFold applies the EqualFold predicate on the "built_from_hash" field.
func BuiltFromHashEqualFold(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldEqualFold(FieldBuiltFromHash, v))
}

// BuiltFromHashContainsFold applies the ContainsFold predicate on the "built_from_hash" field.
func BuiltFromHashContainsFold(v string) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.FieldContainsFold(FieldBuiltFromHash, v))
}

// HasBuiltFrom applies the HasEdge predicate on the "built_from" edge.
func HasBuiltFrom() predicate.SLSAAttestation {
	return predicate.SLSAAttestation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, BuiltFromTable, BuiltFromPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuiltFromWith applies the HasEdge predicate on the "built_from" edge with a given conditions (other predicates).
func HasBuiltFromWith(preds ...predicate.Artifact) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(func(s *sql.Selector) {
		step := newBuiltFromStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuiltBy applies the HasEdge predicate on the "built_by" edge.
func HasBuiltBy() predicate.SLSAAttestation {
	return predicate.SLSAAttestation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BuiltByTable, BuiltByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuiltByWith applies the HasEdge predicate on the "built_by" edge with a given conditions (other predicates).
func HasBuiltByWith(preds ...predicate.Builder) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(func(s *sql.Selector) {
		step := newBuiltByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubject applies the HasEdge predicate on the "subject" edge.
func HasSubject() predicate.SLSAAttestation {
	return predicate.SLSAAttestation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubjectTable, SubjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectWith applies the HasEdge predicate on the "subject" edge with a given conditions (other predicates).
func HasSubjectWith(preds ...predicate.Artifact) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(func(s *sql.Selector) {
		step := newSubjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SLSAAttestation) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SLSAAttestation) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SLSAAttestation) predicate.SLSAAttestation {
	return predicate.SLSAAttestation(sql.NotPredicates(p))
}

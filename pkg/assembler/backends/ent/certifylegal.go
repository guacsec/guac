// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifylegal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// CertifyLegal is the model entity for the CertifyLegal schema.
type CertifyLegal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID *int `json:"package_id,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID *int `json:"source_id,omitempty"`
	// DeclaredLicense holds the value of the "declared_license" field.
	DeclaredLicense string `json:"declared_license,omitempty"`
	// DiscoveredLicense holds the value of the "discovered_license" field.
	DiscoveredLicense string `json:"discovered_license,omitempty"`
	// Attribution holds the value of the "attribution" field.
	Attribution string `json:"attribution,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// TimeScanned holds the value of the "time_scanned" field.
	TimeScanned time.Time `json:"time_scanned,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// An opaque hash of the declared license IDs to ensure uniqueness
	DeclaredLicensesHash string `json:"declared_licenses_hash,omitempty"`
	// An opaque hash of the discovered license IDs to ensure uniqueness
	DiscoveredLicensesHash string `json:"discovered_licenses_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertifyLegalQuery when eager-loading is set.
	Edges        CertifyLegalEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CertifyLegalEdges holds the relations/edges for other nodes in the graph.
type CertifyLegalEdges struct {
	// Package holds the value of the package edge.
	Package *PackageVersion `json:"package,omitempty"`
	// Source holds the value of the source edge.
	Source *SourceName `json:"source,omitempty"`
	// DeclaredLicenses holds the value of the declared_licenses edge.
	DeclaredLicenses []*License `json:"declared_licenses,omitempty"`
	// DiscoveredLicenses holds the value of the discovered_licenses edge.
	DiscoveredLicenses []*License `json:"discovered_licenses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedDeclaredLicenses   map[string][]*License
	namedDiscoveredLicenses map[string][]*License
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertifyLegalEdges) PackageOrErr() (*PackageVersion, error) {
	if e.loadedTypes[0] {
		if e.Package == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.Package, nil
	}
	return nil, &NotLoadedError{edge: "package"}
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertifyLegalEdges) SourceOrErr() (*SourceName, error) {
	if e.loadedTypes[1] {
		if e.Source == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sourcename.Label}
		}
		return e.Source, nil
	}
	return nil, &NotLoadedError{edge: "source"}
}

// DeclaredLicensesOrErr returns the DeclaredLicenses value or an error if the edge
// was not loaded in eager-loading.
func (e CertifyLegalEdges) DeclaredLicensesOrErr() ([]*License, error) {
	if e.loadedTypes[2] {
		return e.DeclaredLicenses, nil
	}
	return nil, &NotLoadedError{edge: "declared_licenses"}
}

// DiscoveredLicensesOrErr returns the DiscoveredLicenses value or an error if the edge
// was not loaded in eager-loading.
func (e CertifyLegalEdges) DiscoveredLicensesOrErr() ([]*License, error) {
	if e.loadedTypes[3] {
		return e.DiscoveredLicenses, nil
	}
	return nil, &NotLoadedError{edge: "discovered_licenses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CertifyLegal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case certifylegal.FieldID, certifylegal.FieldPackageID, certifylegal.FieldSourceID:
			values[i] = new(sql.NullInt64)
		case certifylegal.FieldDeclaredLicense, certifylegal.FieldDiscoveredLicense, certifylegal.FieldAttribution, certifylegal.FieldJustification, certifylegal.FieldOrigin, certifylegal.FieldCollector, certifylegal.FieldDeclaredLicensesHash, certifylegal.FieldDiscoveredLicensesHash:
			values[i] = new(sql.NullString)
		case certifylegal.FieldTimeScanned:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CertifyLegal fields.
func (cl *CertifyLegal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case certifylegal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = int(value.Int64)
		case certifylegal.FieldPackageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value.Valid {
				cl.PackageID = new(int)
				*cl.PackageID = int(value.Int64)
			}
		case certifylegal.FieldSourceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_id", values[i])
			} else if value.Valid {
				cl.SourceID = new(int)
				*cl.SourceID = int(value.Int64)
			}
		case certifylegal.FieldDeclaredLicense:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field declared_license", values[i])
			} else if value.Valid {
				cl.DeclaredLicense = value.String
			}
		case certifylegal.FieldDiscoveredLicense:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discovered_license", values[i])
			} else if value.Valid {
				cl.DiscoveredLicense = value.String
			}
		case certifylegal.FieldAttribution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attribution", values[i])
			} else if value.Valid {
				cl.Attribution = value.String
			}
		case certifylegal.FieldJustification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field justification", values[i])
			} else if value.Valid {
				cl.Justification = value.String
			}
		case certifylegal.FieldTimeScanned:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_scanned", values[i])
			} else if value.Valid {
				cl.TimeScanned = value.Time
			}
		case certifylegal.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				cl.Origin = value.String
			}
		case certifylegal.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				cl.Collector = value.String
			}
		case certifylegal.FieldDeclaredLicensesHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field declared_licenses_hash", values[i])
			} else if value.Valid {
				cl.DeclaredLicensesHash = value.String
			}
		case certifylegal.FieldDiscoveredLicensesHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discovered_licenses_hash", values[i])
			} else if value.Valid {
				cl.DiscoveredLicensesHash = value.String
			}
		default:
			cl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CertifyLegal.
// This includes values selected through modifiers, order, etc.
func (cl *CertifyLegal) Value(name string) (ent.Value, error) {
	return cl.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the CertifyLegal entity.
func (cl *CertifyLegal) QueryPackage() *PackageVersionQuery {
	return NewCertifyLegalClient(cl.config).QueryPackage(cl)
}

// QuerySource queries the "source" edge of the CertifyLegal entity.
func (cl *CertifyLegal) QuerySource() *SourceNameQuery {
	return NewCertifyLegalClient(cl.config).QuerySource(cl)
}

// QueryDeclaredLicenses queries the "declared_licenses" edge of the CertifyLegal entity.
func (cl *CertifyLegal) QueryDeclaredLicenses() *LicenseQuery {
	return NewCertifyLegalClient(cl.config).QueryDeclaredLicenses(cl)
}

// QueryDiscoveredLicenses queries the "discovered_licenses" edge of the CertifyLegal entity.
func (cl *CertifyLegal) QueryDiscoveredLicenses() *LicenseQuery {
	return NewCertifyLegalClient(cl.config).QueryDiscoveredLicenses(cl)
}

// Update returns a builder for updating this CertifyLegal.
// Note that you need to call CertifyLegal.Unwrap() before calling this method if this CertifyLegal
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CertifyLegal) Update() *CertifyLegalUpdateOne {
	return NewCertifyLegalClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the CertifyLegal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CertifyLegal) Unwrap() *CertifyLegal {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CertifyLegal is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CertifyLegal) String() string {
	var builder strings.Builder
	builder.WriteString("CertifyLegal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	if v := cl.PackageID; v != nil {
		builder.WriteString("package_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cl.SourceID; v != nil {
		builder.WriteString("source_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("declared_license=")
	builder.WriteString(cl.DeclaredLicense)
	builder.WriteString(", ")
	builder.WriteString("discovered_license=")
	builder.WriteString(cl.DiscoveredLicense)
	builder.WriteString(", ")
	builder.WriteString("attribution=")
	builder.WriteString(cl.Attribution)
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(cl.Justification)
	builder.WriteString(", ")
	builder.WriteString("time_scanned=")
	builder.WriteString(cl.TimeScanned.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(cl.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(cl.Collector)
	builder.WriteString(", ")
	builder.WriteString("declared_licenses_hash=")
	builder.WriteString(cl.DeclaredLicensesHash)
	builder.WriteString(", ")
	builder.WriteString("discovered_licenses_hash=")
	builder.WriteString(cl.DiscoveredLicensesHash)
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeclaredLicenses returns the DeclaredLicenses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cl *CertifyLegal) NamedDeclaredLicenses(name string) ([]*License, error) {
	if cl.Edges.namedDeclaredLicenses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cl.Edges.namedDeclaredLicenses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cl *CertifyLegal) appendNamedDeclaredLicenses(name string, edges ...*License) {
	if cl.Edges.namedDeclaredLicenses == nil {
		cl.Edges.namedDeclaredLicenses = make(map[string][]*License)
	}
	if len(edges) == 0 {
		cl.Edges.namedDeclaredLicenses[name] = []*License{}
	} else {
		cl.Edges.namedDeclaredLicenses[name] = append(cl.Edges.namedDeclaredLicenses[name], edges...)
	}
}

// NamedDiscoveredLicenses returns the DiscoveredLicenses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cl *CertifyLegal) NamedDiscoveredLicenses(name string) ([]*License, error) {
	if cl.Edges.namedDiscoveredLicenses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cl.Edges.namedDiscoveredLicenses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cl *CertifyLegal) appendNamedDiscoveredLicenses(name string, edges ...*License) {
	if cl.Edges.namedDiscoveredLicenses == nil {
		cl.Edges.namedDiscoveredLicenses = make(map[string][]*License)
	}
	if len(edges) == 0 {
		cl.Edges.namedDiscoveredLicenses[name] = []*License{}
	} else {
		cl.Edges.namedDiscoveredLicenses[name] = append(cl.Edges.namedDiscoveredLicenses[name], edges...)
	}
}

// CertifyLegals is a parsable slice of CertifyLegal.
type CertifyLegals []*CertifyLegal

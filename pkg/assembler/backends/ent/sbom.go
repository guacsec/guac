// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sbom"
)

// SBOM is the model entity for the SBOM schema.
type SBOM struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID *int `json:"package_id,omitempty"`
	// ArtifactID holds the value of the "artifact_id" field.
	ArtifactID *int `json:"artifact_id,omitempty"`
	// SBOM's URI
	URI string `json:"uri,omitempty"`
	// Digest algorithm
	Algorithm string `json:"algorithm,omitempty"`
	// Digest holds the value of the "digest" field.
	Digest string `json:"digest,omitempty"`
	// DownloadLocation holds the value of the "downloadLocation" field.
	DownloadLocation string `json:"downloadLocation,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// GUAC collector for the document
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SBOMQuery when eager-loading is set.
	Edges        SBOMEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SBOMEdges holds the relations/edges for other nodes in the graph.
type SBOMEdges struct {
	// Package holds the value of the package edge.
	Package *PackageVersion `json:"package,omitempty"`
	// Artifact holds the value of the artifact edge.
	Artifact *Artifact `json:"artifact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SBOMEdges) PackageOrErr() (*PackageVersion, error) {
	if e.loadedTypes[0] {
		if e.Package == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.Package, nil
	}
	return nil, &NotLoadedError{edge: "package"}
}

// ArtifactOrErr returns the Artifact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SBOMEdges) ArtifactOrErr() (*Artifact, error) {
	if e.loadedTypes[1] {
		if e.Artifact == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: artifact.Label}
		}
		return e.Artifact, nil
	}
	return nil, &NotLoadedError{edge: "artifact"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SBOM) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sbom.FieldID, sbom.FieldPackageID, sbom.FieldArtifactID:
			values[i] = new(sql.NullInt64)
		case sbom.FieldURI, sbom.FieldAlgorithm, sbom.FieldDigest, sbom.FieldDownloadLocation, sbom.FieldOrigin, sbom.FieldCollector:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SBOM fields.
func (s *SBOM) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sbom.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case sbom.FieldPackageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value.Valid {
				s.PackageID = new(int)
				*s.PackageID = int(value.Int64)
			}
		case sbom.FieldArtifactID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field artifact_id", values[i])
			} else if value.Valid {
				s.ArtifactID = new(int)
				*s.ArtifactID = int(value.Int64)
			}
		case sbom.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				s.URI = value.String
			}
		case sbom.FieldAlgorithm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algorithm", values[i])
			} else if value.Valid {
				s.Algorithm = value.String
			}
		case sbom.FieldDigest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digest", values[i])
			} else if value.Valid {
				s.Digest = value.String
			}
		case sbom.FieldDownloadLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field downloadLocation", values[i])
			} else if value.Valid {
				s.DownloadLocation = value.String
			}
		case sbom.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				s.Origin = value.String
			}
		case sbom.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				s.Collector = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SBOM.
// This includes values selected through modifiers, order, etc.
func (s *SBOM) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the SBOM entity.
func (s *SBOM) QueryPackage() *PackageVersionQuery {
	return NewSBOMClient(s.config).QueryPackage(s)
}

// QueryArtifact queries the "artifact" edge of the SBOM entity.
func (s *SBOM) QueryArtifact() *ArtifactQuery {
	return NewSBOMClient(s.config).QueryArtifact(s)
}

// Update returns a builder for updating this SBOM.
// Note that you need to call SBOM.Unwrap() before calling this method if this SBOM
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *SBOM) Update() *SBOMUpdateOne {
	return NewSBOMClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the SBOM entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *SBOM) Unwrap() *SBOM {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: SBOM is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *SBOM) String() string {
	var builder strings.Builder
	builder.WriteString("SBOM(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	if v := s.PackageID; v != nil {
		builder.WriteString("package_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.ArtifactID; v != nil {
		builder.WriteString("artifact_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("uri=")
	builder.WriteString(s.URI)
	builder.WriteString(", ")
	builder.WriteString("algorithm=")
	builder.WriteString(s.Algorithm)
	builder.WriteString(", ")
	builder.WriteString("digest=")
	builder.WriteString(s.Digest)
	builder.WriteString(", ")
	builder.WriteString("downloadLocation=")
	builder.WriteString(s.DownloadLocation)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(s.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(s.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// SBOMs is a parsable slice of SBOM.
type SBOMs []*SBOM

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isvulnerability"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
)

// IsVulnerability is the model entity for the IsVulnerability schema.
type IsVulnerability struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OsvID holds the value of the "osv_id" field.
	OsvID int `json:"osv_id,omitempty"`
	// VulnerabilityID holds the value of the "vulnerability_id" field.
	VulnerabilityID int `json:"vulnerability_id,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IsVulnerabilityQuery when eager-loading is set.
	Edges        IsVulnerabilityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IsVulnerabilityEdges holds the relations/edges for other nodes in the graph.
type IsVulnerabilityEdges struct {
	// Osv holds the value of the osv edge.
	Osv *VulnerabilityType `json:"osv,omitempty"`
	// Vulnerability holds the value of the vulnerability edge.
	Vulnerability *VulnerabilityType `json:"vulnerability,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// OsvOrErr returns the Osv value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IsVulnerabilityEdges) OsvOrErr() (*VulnerabilityType, error) {
	if e.loadedTypes[0] {
		if e.Osv == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vulnerabilitytype.Label}
		}
		return e.Osv, nil
	}
	return nil, &NotLoadedError{edge: "osv"}
}

// VulnerabilityOrErr returns the Vulnerability value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IsVulnerabilityEdges) VulnerabilityOrErr() (*VulnerabilityType, error) {
	if e.loadedTypes[1] {
		if e.Vulnerability == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vulnerabilitytype.Label}
		}
		return e.Vulnerability, nil
	}
	return nil, &NotLoadedError{edge: "vulnerability"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IsVulnerability) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case isvulnerability.FieldID, isvulnerability.FieldOsvID, isvulnerability.FieldVulnerabilityID:
			values[i] = new(sql.NullInt64)
		case isvulnerability.FieldJustification, isvulnerability.FieldOrigin, isvulnerability.FieldCollector:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IsVulnerability fields.
func (iv *IsVulnerability) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case isvulnerability.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			iv.ID = int(value.Int64)
		case isvulnerability.FieldOsvID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field osv_id", values[i])
			} else if value.Valid {
				iv.OsvID = int(value.Int64)
			}
		case isvulnerability.FieldVulnerabilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vulnerability_id", values[i])
			} else if value.Valid {
				iv.VulnerabilityID = int(value.Int64)
			}
		case isvulnerability.FieldJustification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field justification", values[i])
			} else if value.Valid {
				iv.Justification = value.String
			}
		case isvulnerability.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				iv.Origin = value.String
			}
		case isvulnerability.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				iv.Collector = value.String
			}
		default:
			iv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IsVulnerability.
// This includes values selected through modifiers, order, etc.
func (iv *IsVulnerability) Value(name string) (ent.Value, error) {
	return iv.selectValues.Get(name)
}

// QueryOsv queries the "osv" edge of the IsVulnerability entity.
func (iv *IsVulnerability) QueryOsv() *VulnerabilityTypeQuery {
	return NewIsVulnerabilityClient(iv.config).QueryOsv(iv)
}

// QueryVulnerability queries the "vulnerability" edge of the IsVulnerability entity.
func (iv *IsVulnerability) QueryVulnerability() *VulnerabilityTypeQuery {
	return NewIsVulnerabilityClient(iv.config).QueryVulnerability(iv)
}

// Update returns a builder for updating this IsVulnerability.
// Note that you need to call IsVulnerability.Unwrap() before calling this method if this IsVulnerability
// was returned from a transaction, and the transaction was committed or rolled back.
func (iv *IsVulnerability) Update() *IsVulnerabilityUpdateOne {
	return NewIsVulnerabilityClient(iv.config).UpdateOne(iv)
}

// Unwrap unwraps the IsVulnerability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iv *IsVulnerability) Unwrap() *IsVulnerability {
	_tx, ok := iv.config.driver.(*txDriver)
	if !ok {
		panic("ent: IsVulnerability is not a transactional entity")
	}
	iv.config.driver = _tx.drv
	return iv
}

// String implements the fmt.Stringer.
func (iv *IsVulnerability) String() string {
	var builder strings.Builder
	builder.WriteString("IsVulnerability(")
	builder.WriteString(fmt.Sprintf("id=%v, ", iv.ID))
	builder.WriteString("osv_id=")
	builder.WriteString(fmt.Sprintf("%v", iv.OsvID))
	builder.WriteString(", ")
	builder.WriteString("vulnerability_id=")
	builder.WriteString(fmt.Sprintf("%v", iv.VulnerabilityID))
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(iv.Justification)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(iv.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(iv.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// IsVulnerabilities is a parsable slice of IsVulnerability.
type IsVulnerabilities []*IsVulnerability

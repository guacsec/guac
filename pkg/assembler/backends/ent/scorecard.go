// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/scorecard"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// Scorecard is the model entity for the Scorecard schema.
type Scorecard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Checks holds the value of the "checks" field.
	Checks []*model.ScorecardCheck `json:"checks,omitempty"`
	// Overall Scorecard score for the source
	AggregateScore float64 `json:"aggregate_score,omitempty"`
	// TimeScanned holds the value of the "time_scanned" field.
	TimeScanned time.Time `json:"time_scanned,omitempty"`
	// ScorecardVersion holds the value of the "scorecard_version" field.
	ScorecardVersion string `json:"scorecard_version,omitempty"`
	// ScorecardCommit holds the value of the "scorecard_commit" field.
	ScorecardCommit string `json:"scorecard_commit,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScorecardQuery when eager-loading is set.
	Edges        ScorecardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScorecardEdges holds the relations/edges for other nodes in the graph.
type ScorecardEdges struct {
	// Certifications holds the value of the certifications edge.
	Certifications []*CertifyScorecard `json:"certifications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedCertifications map[string][]*CertifyScorecard
}

// CertificationsOrErr returns the Certifications value or an error if the edge
// was not loaded in eager-loading.
func (e ScorecardEdges) CertificationsOrErr() ([]*CertifyScorecard, error) {
	if e.loadedTypes[0] {
		return e.Certifications, nil
	}
	return nil, &NotLoadedError{edge: "certifications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scorecard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scorecard.FieldChecks:
			values[i] = new([]byte)
		case scorecard.FieldAggregateScore:
			values[i] = new(sql.NullFloat64)
		case scorecard.FieldID:
			values[i] = new(sql.NullInt64)
		case scorecard.FieldScorecardVersion, scorecard.FieldScorecardCommit, scorecard.FieldOrigin, scorecard.FieldCollector:
			values[i] = new(sql.NullString)
		case scorecard.FieldTimeScanned:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scorecard fields.
func (s *Scorecard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scorecard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case scorecard.FieldChecks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field checks", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Checks); err != nil {
					return fmt.Errorf("unmarshal field checks: %w", err)
				}
			}
		case scorecard.FieldAggregateScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field aggregate_score", values[i])
			} else if value.Valid {
				s.AggregateScore = value.Float64
			}
		case scorecard.FieldTimeScanned:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_scanned", values[i])
			} else if value.Valid {
				s.TimeScanned = value.Time
			}
		case scorecard.FieldScorecardVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scorecard_version", values[i])
			} else if value.Valid {
				s.ScorecardVersion = value.String
			}
		case scorecard.FieldScorecardCommit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scorecard_commit", values[i])
			} else if value.Valid {
				s.ScorecardCommit = value.String
			}
		case scorecard.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				s.Origin = value.String
			}
		case scorecard.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				s.Collector = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Scorecard.
// This includes values selected through modifiers, order, etc.
func (s *Scorecard) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryCertifications queries the "certifications" edge of the Scorecard entity.
func (s *Scorecard) QueryCertifications() *CertifyScorecardQuery {
	return NewScorecardClient(s.config).QueryCertifications(s)
}

// Update returns a builder for updating this Scorecard.
// Note that you need to call Scorecard.Unwrap() before calling this method if this Scorecard
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scorecard) Update() *ScorecardUpdateOne {
	return NewScorecardClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Scorecard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Scorecard) Unwrap() *Scorecard {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scorecard is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scorecard) String() string {
	var builder strings.Builder
	builder.WriteString("Scorecard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("checks=")
	builder.WriteString(fmt.Sprintf("%v", s.Checks))
	builder.WriteString(", ")
	builder.WriteString("aggregate_score=")
	builder.WriteString(fmt.Sprintf("%v", s.AggregateScore))
	builder.WriteString(", ")
	builder.WriteString("time_scanned=")
	builder.WriteString(s.TimeScanned.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("scorecard_version=")
	builder.WriteString(s.ScorecardVersion)
	builder.WriteString(", ")
	builder.WriteString("scorecard_commit=")
	builder.WriteString(s.ScorecardCommit)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(s.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(s.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCertifications returns the Certifications named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Scorecard) NamedCertifications(name string) ([]*CertifyScorecard, error) {
	if s.Edges.namedCertifications == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedCertifications[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Scorecard) appendNamedCertifications(name string, edges ...*CertifyScorecard) {
	if s.Edges.namedCertifications == nil {
		s.Edges.namedCertifications = make(map[string][]*CertifyScorecard)
	}
	if len(edges) == 0 {
		s.Edges.namedCertifications[name] = []*CertifyScorecard{}
	} else {
		s.Edges.namedCertifications[name] = append(s.Edges.namedCertifications[name], edges...)
	}
}

// Scorecards is a parsable slice of Scorecard.
type Scorecards []*Scorecard

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
)

// VulnerabilityTypeUpdate is the builder for updating VulnerabilityType entities.
type VulnerabilityTypeUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityTypeMutation
}

// Where appends a list predicates to the VulnerabilityTypeUpdate builder.
func (vtu *VulnerabilityTypeUpdate) Where(ps ...predicate.VulnerabilityType) *VulnerabilityTypeUpdate {
	vtu.mutation.Where(ps...)
	return vtu
}

// SetType sets the "type" field.
func (vtu *VulnerabilityTypeUpdate) SetType(s string) *VulnerabilityTypeUpdate {
	vtu.mutation.SetType(s)
	return vtu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vtu *VulnerabilityTypeUpdate) SetNillableType(s *string) *VulnerabilityTypeUpdate {
	if s != nil {
		vtu.SetType(*s)
	}
	return vtu
}

// AddVulnerabilityIDIDs adds the "vulnerability_ids" edge to the VulnerabilityID entity by IDs.
func (vtu *VulnerabilityTypeUpdate) AddVulnerabilityIDIDs(ids ...int) *VulnerabilityTypeUpdate {
	vtu.mutation.AddVulnerabilityIDIDs(ids...)
	return vtu
}

// AddVulnerabilityIds adds the "vulnerability_ids" edges to the VulnerabilityID entity.
func (vtu *VulnerabilityTypeUpdate) AddVulnerabilityIds(v ...*VulnerabilityID) *VulnerabilityTypeUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vtu.AddVulnerabilityIDIDs(ids...)
}

// Mutation returns the VulnerabilityTypeMutation object of the builder.
func (vtu *VulnerabilityTypeUpdate) Mutation() *VulnerabilityTypeMutation {
	return vtu.mutation
}

// ClearVulnerabilityIds clears all "vulnerability_ids" edges to the VulnerabilityID entity.
func (vtu *VulnerabilityTypeUpdate) ClearVulnerabilityIds() *VulnerabilityTypeUpdate {
	vtu.mutation.ClearVulnerabilityIds()
	return vtu
}

// RemoveVulnerabilityIDIDs removes the "vulnerability_ids" edge to VulnerabilityID entities by IDs.
func (vtu *VulnerabilityTypeUpdate) RemoveVulnerabilityIDIDs(ids ...int) *VulnerabilityTypeUpdate {
	vtu.mutation.RemoveVulnerabilityIDIDs(ids...)
	return vtu
}

// RemoveVulnerabilityIds removes "vulnerability_ids" edges to VulnerabilityID entities.
func (vtu *VulnerabilityTypeUpdate) RemoveVulnerabilityIds(v ...*VulnerabilityID) *VulnerabilityTypeUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vtu.RemoveVulnerabilityIDIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vtu *VulnerabilityTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vtu.sqlSave, vtu.mutation, vtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtu *VulnerabilityTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := vtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vtu *VulnerabilityTypeUpdate) Exec(ctx context.Context) error {
	_, err := vtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtu *VulnerabilityTypeUpdate) ExecX(ctx context.Context) {
	if err := vtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtu *VulnerabilityTypeUpdate) check() error {
	if v, ok := vtu.mutation.GetType(); ok {
		if err := vulnerabilitytype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "VulnerabilityType.type": %w`, err)}
		}
	}
	return nil
}

func (vtu *VulnerabilityTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerabilitytype.Table, vulnerabilitytype.Columns, sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt))
	if ps := vtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtu.mutation.GetType(); ok {
		_spec.SetField(vulnerabilitytype.FieldType, field.TypeString, value)
	}
	if vtu.mutation.VulnerabilityIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerabilitytype.VulnerabilityIdsTable,
			Columns: []string{vulnerabilitytype.VulnerabilityIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtu.mutation.RemovedVulnerabilityIdsIDs(); len(nodes) > 0 && !vtu.mutation.VulnerabilityIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerabilitytype.VulnerabilityIdsTable,
			Columns: []string{vulnerabilitytype.VulnerabilityIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtu.mutation.VulnerabilityIdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerabilitytype.VulnerabilityIdsTable,
			Columns: []string{vulnerabilitytype.VulnerabilityIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerabilitytype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vtu.mutation.done = true
	return n, nil
}

// VulnerabilityTypeUpdateOne is the builder for updating a single VulnerabilityType entity.
type VulnerabilityTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityTypeMutation
}

// SetType sets the "type" field.
func (vtuo *VulnerabilityTypeUpdateOne) SetType(s string) *VulnerabilityTypeUpdateOne {
	vtuo.mutation.SetType(s)
	return vtuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vtuo *VulnerabilityTypeUpdateOne) SetNillableType(s *string) *VulnerabilityTypeUpdateOne {
	if s != nil {
		vtuo.SetType(*s)
	}
	return vtuo
}

// AddVulnerabilityIDIDs adds the "vulnerability_ids" edge to the VulnerabilityID entity by IDs.
func (vtuo *VulnerabilityTypeUpdateOne) AddVulnerabilityIDIDs(ids ...int) *VulnerabilityTypeUpdateOne {
	vtuo.mutation.AddVulnerabilityIDIDs(ids...)
	return vtuo
}

// AddVulnerabilityIds adds the "vulnerability_ids" edges to the VulnerabilityID entity.
func (vtuo *VulnerabilityTypeUpdateOne) AddVulnerabilityIds(v ...*VulnerabilityID) *VulnerabilityTypeUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vtuo.AddVulnerabilityIDIDs(ids...)
}

// Mutation returns the VulnerabilityTypeMutation object of the builder.
func (vtuo *VulnerabilityTypeUpdateOne) Mutation() *VulnerabilityTypeMutation {
	return vtuo.mutation
}

// ClearVulnerabilityIds clears all "vulnerability_ids" edges to the VulnerabilityID entity.
func (vtuo *VulnerabilityTypeUpdateOne) ClearVulnerabilityIds() *VulnerabilityTypeUpdateOne {
	vtuo.mutation.ClearVulnerabilityIds()
	return vtuo
}

// RemoveVulnerabilityIDIDs removes the "vulnerability_ids" edge to VulnerabilityID entities by IDs.
func (vtuo *VulnerabilityTypeUpdateOne) RemoveVulnerabilityIDIDs(ids ...int) *VulnerabilityTypeUpdateOne {
	vtuo.mutation.RemoveVulnerabilityIDIDs(ids...)
	return vtuo
}

// RemoveVulnerabilityIds removes "vulnerability_ids" edges to VulnerabilityID entities.
func (vtuo *VulnerabilityTypeUpdateOne) RemoveVulnerabilityIds(v ...*VulnerabilityID) *VulnerabilityTypeUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vtuo.RemoveVulnerabilityIDIDs(ids...)
}

// Where appends a list predicates to the VulnerabilityTypeUpdate builder.
func (vtuo *VulnerabilityTypeUpdateOne) Where(ps ...predicate.VulnerabilityType) *VulnerabilityTypeUpdateOne {
	vtuo.mutation.Where(ps...)
	return vtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vtuo *VulnerabilityTypeUpdateOne) Select(field string, fields ...string) *VulnerabilityTypeUpdateOne {
	vtuo.fields = append([]string{field}, fields...)
	return vtuo
}

// Save executes the query and returns the updated VulnerabilityType entity.
func (vtuo *VulnerabilityTypeUpdateOne) Save(ctx context.Context) (*VulnerabilityType, error) {
	return withHooks(ctx, vtuo.sqlSave, vtuo.mutation, vtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtuo *VulnerabilityTypeUpdateOne) SaveX(ctx context.Context) *VulnerabilityType {
	node, err := vtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vtuo *VulnerabilityTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := vtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtuo *VulnerabilityTypeUpdateOne) ExecX(ctx context.Context) {
	if err := vtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtuo *VulnerabilityTypeUpdateOne) check() error {
	if v, ok := vtuo.mutation.GetType(); ok {
		if err := vulnerabilitytype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "VulnerabilityType.type": %w`, err)}
		}
	}
	return nil
}

func (vtuo *VulnerabilityTypeUpdateOne) sqlSave(ctx context.Context) (_node *VulnerabilityType, err error) {
	if err := vtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerabilitytype.Table, vulnerabilitytype.Columns, sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt))
	id, ok := vtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VulnerabilityType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerabilitytype.FieldID)
		for _, f := range fields {
			if !vulnerabilitytype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerabilitytype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtuo.mutation.GetType(); ok {
		_spec.SetField(vulnerabilitytype.FieldType, field.TypeString, value)
	}
	if vtuo.mutation.VulnerabilityIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerabilitytype.VulnerabilityIdsTable,
			Columns: []string{vulnerabilitytype.VulnerabilityIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtuo.mutation.RemovedVulnerabilityIdsIDs(); len(nodes) > 0 && !vtuo.mutation.VulnerabilityIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerabilitytype.VulnerabilityIdsTable,
			Columns: []string{vulnerabilitytype.VulnerabilityIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtuo.mutation.VulnerabilityIdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerabilitytype.VulnerabilityIdsTable,
			Columns: []string{vulnerabilitytype.VulnerabilityIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VulnerabilityType{config: vtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerabilitytype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vtuo.mutation.done = true
	return _node, nil
}

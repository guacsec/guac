// Code generated by ent, DO NOT EDIT.

package certifyvex

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLTE(FieldID, id))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldPackageID, v))
}

// ArtifactID applies equality check predicate on the "artifact_id" field. It's identical to ArtifactIDEQ.
func ArtifactID(v int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldArtifactID, v))
}

// VulnerabilityID applies equality check predicate on the "vulnerability_id" field. It's identical to VulnerabilityIDEQ.
func VulnerabilityID(v int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldVulnerabilityID, v))
}

// KnownSince applies equality check predicate on the "known_since" field. It's identical to KnownSinceEQ.
func KnownSince(v time.Time) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldKnownSince, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldStatus, v))
}

// Statement applies equality check predicate on the "statement" field. It's identical to StatementEQ.
func Statement(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldStatement, v))
}

// StatusNotes applies equality check predicate on the "status_notes" field. It's identical to StatusNotesEQ.
func StatusNotes(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldStatusNotes, v))
}

// Justification applies equality check predicate on the "justification" field. It's identical to JustificationEQ.
func Justification(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldJustification, v))
}

// Origin applies equality check predicate on the "origin" field. It's identical to OriginEQ.
func Origin(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldOrigin, v))
}

// Collector applies equality check predicate on the "collector" field. It's identical to CollectorEQ.
func Collector(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldCollector, v))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldPackageID, vs...))
}

// PackageIDIsNil applies the IsNil predicate on the "package_id" field.
func PackageIDIsNil() predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIsNull(FieldPackageID))
}

// PackageIDNotNil applies the NotNil predicate on the "package_id" field.
func PackageIDNotNil() predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotNull(FieldPackageID))
}

// ArtifactIDEQ applies the EQ predicate on the "artifact_id" field.
func ArtifactIDEQ(v int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldArtifactID, v))
}

// ArtifactIDNEQ applies the NEQ predicate on the "artifact_id" field.
func ArtifactIDNEQ(v int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldArtifactID, v))
}

// ArtifactIDIn applies the In predicate on the "artifact_id" field.
func ArtifactIDIn(vs ...int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldArtifactID, vs...))
}

// ArtifactIDNotIn applies the NotIn predicate on the "artifact_id" field.
func ArtifactIDNotIn(vs ...int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldArtifactID, vs...))
}

// ArtifactIDIsNil applies the IsNil predicate on the "artifact_id" field.
func ArtifactIDIsNil() predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIsNull(FieldArtifactID))
}

// ArtifactIDNotNil applies the NotNil predicate on the "artifact_id" field.
func ArtifactIDNotNil() predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotNull(FieldArtifactID))
}

// VulnerabilityIDEQ applies the EQ predicate on the "vulnerability_id" field.
func VulnerabilityIDEQ(v int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldVulnerabilityID, v))
}

// VulnerabilityIDNEQ applies the NEQ predicate on the "vulnerability_id" field.
func VulnerabilityIDNEQ(v int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldVulnerabilityID, v))
}

// VulnerabilityIDIn applies the In predicate on the "vulnerability_id" field.
func VulnerabilityIDIn(vs ...int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldVulnerabilityID, vs...))
}

// VulnerabilityIDNotIn applies the NotIn predicate on the "vulnerability_id" field.
func VulnerabilityIDNotIn(vs ...int) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldVulnerabilityID, vs...))
}

// KnownSinceEQ applies the EQ predicate on the "known_since" field.
func KnownSinceEQ(v time.Time) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldKnownSince, v))
}

// KnownSinceNEQ applies the NEQ predicate on the "known_since" field.
func KnownSinceNEQ(v time.Time) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldKnownSince, v))
}

// KnownSinceIn applies the In predicate on the "known_since" field.
func KnownSinceIn(vs ...time.Time) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldKnownSince, vs...))
}

// KnownSinceNotIn applies the NotIn predicate on the "known_since" field.
func KnownSinceNotIn(vs ...time.Time) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldKnownSince, vs...))
}

// KnownSinceGT applies the GT predicate on the "known_since" field.
func KnownSinceGT(v time.Time) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGT(FieldKnownSince, v))
}

// KnownSinceGTE applies the GTE predicate on the "known_since" field.
func KnownSinceGTE(v time.Time) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGTE(FieldKnownSince, v))
}

// KnownSinceLT applies the LT predicate on the "known_since" field.
func KnownSinceLT(v time.Time) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLT(FieldKnownSince, v))
}

// KnownSinceLTE applies the LTE predicate on the "known_since" field.
func KnownSinceLTE(v time.Time) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLTE(FieldKnownSince, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContainsFold(FieldStatus, v))
}

// StatementEQ applies the EQ predicate on the "statement" field.
func StatementEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldStatement, v))
}

// StatementNEQ applies the NEQ predicate on the "statement" field.
func StatementNEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldStatement, v))
}

// StatementIn applies the In predicate on the "statement" field.
func StatementIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldStatement, vs...))
}

// StatementNotIn applies the NotIn predicate on the "statement" field.
func StatementNotIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldStatement, vs...))
}

// StatementGT applies the GT predicate on the "statement" field.
func StatementGT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGT(FieldStatement, v))
}

// StatementGTE applies the GTE predicate on the "statement" field.
func StatementGTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGTE(FieldStatement, v))
}

// StatementLT applies the LT predicate on the "statement" field.
func StatementLT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLT(FieldStatement, v))
}

// StatementLTE applies the LTE predicate on the "statement" field.
func StatementLTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLTE(FieldStatement, v))
}

// StatementContains applies the Contains predicate on the "statement" field.
func StatementContains(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContains(FieldStatement, v))
}

// StatementHasPrefix applies the HasPrefix predicate on the "statement" field.
func StatementHasPrefix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasPrefix(FieldStatement, v))
}

// StatementHasSuffix applies the HasSuffix predicate on the "statement" field.
func StatementHasSuffix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasSuffix(FieldStatement, v))
}

// StatementEqualFold applies the EqualFold predicate on the "statement" field.
func StatementEqualFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEqualFold(FieldStatement, v))
}

// StatementContainsFold applies the ContainsFold predicate on the "statement" field.
func StatementContainsFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContainsFold(FieldStatement, v))
}

// StatusNotesEQ applies the EQ predicate on the "status_notes" field.
func StatusNotesEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldStatusNotes, v))
}

// StatusNotesNEQ applies the NEQ predicate on the "status_notes" field.
func StatusNotesNEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldStatusNotes, v))
}

// StatusNotesIn applies the In predicate on the "status_notes" field.
func StatusNotesIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldStatusNotes, vs...))
}

// StatusNotesNotIn applies the NotIn predicate on the "status_notes" field.
func StatusNotesNotIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldStatusNotes, vs...))
}

// StatusNotesGT applies the GT predicate on the "status_notes" field.
func StatusNotesGT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGT(FieldStatusNotes, v))
}

// StatusNotesGTE applies the GTE predicate on the "status_notes" field.
func StatusNotesGTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGTE(FieldStatusNotes, v))
}

// StatusNotesLT applies the LT predicate on the "status_notes" field.
func StatusNotesLT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLT(FieldStatusNotes, v))
}

// StatusNotesLTE applies the LTE predicate on the "status_notes" field.
func StatusNotesLTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLTE(FieldStatusNotes, v))
}

// StatusNotesContains applies the Contains predicate on the "status_notes" field.
func StatusNotesContains(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContains(FieldStatusNotes, v))
}

// StatusNotesHasPrefix applies the HasPrefix predicate on the "status_notes" field.
func StatusNotesHasPrefix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasPrefix(FieldStatusNotes, v))
}

// StatusNotesHasSuffix applies the HasSuffix predicate on the "status_notes" field.
func StatusNotesHasSuffix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasSuffix(FieldStatusNotes, v))
}

// StatusNotesEqualFold applies the EqualFold predicate on the "status_notes" field.
func StatusNotesEqualFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEqualFold(FieldStatusNotes, v))
}

// StatusNotesContainsFold applies the ContainsFold predicate on the "status_notes" field.
func StatusNotesContainsFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContainsFold(FieldStatusNotes, v))
}

// JustificationEQ applies the EQ predicate on the "justification" field.
func JustificationEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldJustification, v))
}

// JustificationNEQ applies the NEQ predicate on the "justification" field.
func JustificationNEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldJustification, v))
}

// JustificationIn applies the In predicate on the "justification" field.
func JustificationIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldJustification, vs...))
}

// JustificationNotIn applies the NotIn predicate on the "justification" field.
func JustificationNotIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldJustification, vs...))
}

// JustificationGT applies the GT predicate on the "justification" field.
func JustificationGT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGT(FieldJustification, v))
}

// JustificationGTE applies the GTE predicate on the "justification" field.
func JustificationGTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGTE(FieldJustification, v))
}

// JustificationLT applies the LT predicate on the "justification" field.
func JustificationLT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLT(FieldJustification, v))
}

// JustificationLTE applies the LTE predicate on the "justification" field.
func JustificationLTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLTE(FieldJustification, v))
}

// JustificationContains applies the Contains predicate on the "justification" field.
func JustificationContains(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContains(FieldJustification, v))
}

// JustificationHasPrefix applies the HasPrefix predicate on the "justification" field.
func JustificationHasPrefix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasPrefix(FieldJustification, v))
}

// JustificationHasSuffix applies the HasSuffix predicate on the "justification" field.
func JustificationHasSuffix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasSuffix(FieldJustification, v))
}

// JustificationEqualFold applies the EqualFold predicate on the "justification" field.
func JustificationEqualFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEqualFold(FieldJustification, v))
}

// JustificationContainsFold applies the ContainsFold predicate on the "justification" field.
func JustificationContainsFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContainsFold(FieldJustification, v))
}

// OriginEQ applies the EQ predicate on the "origin" field.
func OriginEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldOrigin, v))
}

// OriginNEQ applies the NEQ predicate on the "origin" field.
func OriginNEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldOrigin, v))
}

// OriginIn applies the In predicate on the "origin" field.
func OriginIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldOrigin, vs...))
}

// OriginNotIn applies the NotIn predicate on the "origin" field.
func OriginNotIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldOrigin, vs...))
}

// OriginGT applies the GT predicate on the "origin" field.
func OriginGT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGT(FieldOrigin, v))
}

// OriginGTE applies the GTE predicate on the "origin" field.
func OriginGTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGTE(FieldOrigin, v))
}

// OriginLT applies the LT predicate on the "origin" field.
func OriginLT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLT(FieldOrigin, v))
}

// OriginLTE applies the LTE predicate on the "origin" field.
func OriginLTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLTE(FieldOrigin, v))
}

// OriginContains applies the Contains predicate on the "origin" field.
func OriginContains(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContains(FieldOrigin, v))
}

// OriginHasPrefix applies the HasPrefix predicate on the "origin" field.
func OriginHasPrefix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasPrefix(FieldOrigin, v))
}

// OriginHasSuffix applies the HasSuffix predicate on the "origin" field.
func OriginHasSuffix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasSuffix(FieldOrigin, v))
}

// OriginEqualFold applies the EqualFold predicate on the "origin" field.
func OriginEqualFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEqualFold(FieldOrigin, v))
}

// OriginContainsFold applies the ContainsFold predicate on the "origin" field.
func OriginContainsFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContainsFold(FieldOrigin, v))
}

// CollectorEQ applies the EQ predicate on the "collector" field.
func CollectorEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEQ(FieldCollector, v))
}

// CollectorNEQ applies the NEQ predicate on the "collector" field.
func CollectorNEQ(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNEQ(FieldCollector, v))
}

// CollectorIn applies the In predicate on the "collector" field.
func CollectorIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldIn(FieldCollector, vs...))
}

// CollectorNotIn applies the NotIn predicate on the "collector" field.
func CollectorNotIn(vs ...string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldNotIn(FieldCollector, vs...))
}

// CollectorGT applies the GT predicate on the "collector" field.
func CollectorGT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGT(FieldCollector, v))
}

// CollectorGTE applies the GTE predicate on the "collector" field.
func CollectorGTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldGTE(FieldCollector, v))
}

// CollectorLT applies the LT predicate on the "collector" field.
func CollectorLT(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLT(FieldCollector, v))
}

// CollectorLTE applies the LTE predicate on the "collector" field.
func CollectorLTE(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldLTE(FieldCollector, v))
}

// CollectorContains applies the Contains predicate on the "collector" field.
func CollectorContains(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContains(FieldCollector, v))
}

// CollectorHasPrefix applies the HasPrefix predicate on the "collector" field.
func CollectorHasPrefix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasPrefix(FieldCollector, v))
}

// CollectorHasSuffix applies the HasSuffix predicate on the "collector" field.
func CollectorHasSuffix(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldHasSuffix(FieldCollector, v))
}

// CollectorEqualFold applies the EqualFold predicate on the "collector" field.
func CollectorEqualFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldEqualFold(FieldCollector, v))
}

// CollectorContainsFold applies the ContainsFold predicate on the "collector" field.
func CollectorContainsFold(v string) predicate.CertifyVex {
	return predicate.CertifyVex(sql.FieldContainsFold(FieldCollector, v))
}

// HasPackage applies the HasEdge predicate on the "package" edge.
func HasPackage() predicate.CertifyVex {
	return predicate.CertifyVex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PackageTable, PackageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageWith applies the HasEdge predicate on the "package" edge with a given conditions (other predicates).
func HasPackageWith(preds ...predicate.PackageVersion) predicate.CertifyVex {
	return predicate.CertifyVex(func(s *sql.Selector) {
		step := newPackageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArtifact applies the HasEdge predicate on the "artifact" edge.
func HasArtifact() predicate.CertifyVex {
	return predicate.CertifyVex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ArtifactTable, ArtifactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtifactWith applies the HasEdge predicate on the "artifact" edge with a given conditions (other predicates).
func HasArtifactWith(preds ...predicate.Artifact) predicate.CertifyVex {
	return predicate.CertifyVex(func(s *sql.Selector) {
		step := newArtifactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVulnerability applies the HasEdge predicate on the "vulnerability" edge.
func HasVulnerability() predicate.CertifyVex {
	return predicate.CertifyVex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VulnerabilityTable, VulnerabilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVulnerabilityWith applies the HasEdge predicate on the "vulnerability" edge with a given conditions (other predicates).
func HasVulnerabilityWith(preds ...predicate.VulnerabilityID) predicate.CertifyVex {
	return predicate.CertifyVex(func(s *sql.Selector) {
		step := newVulnerabilityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CertifyVex) predicate.CertifyVex {
	return predicate.CertifyVex(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CertifyVex) predicate.CertifyVex {
	return predicate.CertifyVex(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CertifyVex) predicate.CertifyVex {
	return predicate.CertifyVex(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hasmetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hassourceat"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pointofcontact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PackageNameQuery is the builder for querying PackageName entities.
type PackageNameQuery struct {
	config
	ctx                    *QueryContext
	order                  []packagename.OrderOption
	inters                 []Interceptor
	predicates             []predicate.PackageName
	withVersions           *PackageVersionQuery
	withHasSourceAt        *HasSourceAtQuery
	withCertification      *CertificationQuery
	withMetadata           *HasMetadataQuery
	withPoc                *PointOfContactQuery
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*PackageName) error
	withNamedVersions      map[string]*PackageVersionQuery
	withNamedHasSourceAt   map[string]*HasSourceAtQuery
	withNamedCertification map[string]*CertificationQuery
	withNamedMetadata      map[string]*HasMetadataQuery
	withNamedPoc           map[string]*PointOfContactQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PackageNameQuery builder.
func (pnq *PackageNameQuery) Where(ps ...predicate.PackageName) *PackageNameQuery {
	pnq.predicates = append(pnq.predicates, ps...)
	return pnq
}

// Limit the number of records to be returned by this query.
func (pnq *PackageNameQuery) Limit(limit int) *PackageNameQuery {
	pnq.ctx.Limit = &limit
	return pnq
}

// Offset to start from.
func (pnq *PackageNameQuery) Offset(offset int) *PackageNameQuery {
	pnq.ctx.Offset = &offset
	return pnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pnq *PackageNameQuery) Unique(unique bool) *PackageNameQuery {
	pnq.ctx.Unique = &unique
	return pnq
}

// Order specifies how the records should be ordered.
func (pnq *PackageNameQuery) Order(o ...packagename.OrderOption) *PackageNameQuery {
	pnq.order = append(pnq.order, o...)
	return pnq
}

// QueryVersions chains the current query on the "versions" edge.
func (pnq *PackageNameQuery) QueryVersions() *PackageVersionQuery {
	query := (&PackageVersionClient{config: pnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packagename.Table, packagename.FieldID, selector),
			sqlgraph.To(packageversion.Table, packageversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, packagename.VersionsTable, packagename.VersionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHasSourceAt chains the current query on the "has_source_at" edge.
func (pnq *PackageNameQuery) QueryHasSourceAt() *HasSourceAtQuery {
	query := (&HasSourceAtClient{config: pnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packagename.Table, packagename.FieldID, selector),
			sqlgraph.To(hassourceat.Table, hassourceat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packagename.HasSourceAtTable, packagename.HasSourceAtColumn),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCertification chains the current query on the "certification" edge.
func (pnq *PackageNameQuery) QueryCertification() *CertificationQuery {
	query := (&CertificationClient{config: pnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packagename.Table, packagename.FieldID, selector),
			sqlgraph.To(certification.Table, certification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packagename.CertificationTable, packagename.CertificationColumn),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMetadata chains the current query on the "metadata" edge.
func (pnq *PackageNameQuery) QueryMetadata() *HasMetadataQuery {
	query := (&HasMetadataClient{config: pnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packagename.Table, packagename.FieldID, selector),
			sqlgraph.To(hasmetadata.Table, hasmetadata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packagename.MetadataTable, packagename.MetadataColumn),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPoc chains the current query on the "poc" edge.
func (pnq *PackageNameQuery) QueryPoc() *PointOfContactQuery {
	query := (&PointOfContactClient{config: pnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packagename.Table, packagename.FieldID, selector),
			sqlgraph.To(pointofcontact.Table, pointofcontact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packagename.PocTable, packagename.PocColumn),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PackageName entity from the query.
// Returns a *NotFoundError when no PackageName was found.
func (pnq *PackageNameQuery) First(ctx context.Context) (*PackageName, error) {
	nodes, err := pnq.Limit(1).All(setContextOp(ctx, pnq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{packagename.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pnq *PackageNameQuery) FirstX(ctx context.Context) *PackageName {
	node, err := pnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PackageName ID from the query.
// Returns a *NotFoundError when no PackageName ID was found.
func (pnq *PackageNameQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pnq.Limit(1).IDs(setContextOp(ctx, pnq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{packagename.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pnq *PackageNameQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PackageName entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PackageName entity is found.
// Returns a *NotFoundError when no PackageName entities are found.
func (pnq *PackageNameQuery) Only(ctx context.Context) (*PackageName, error) {
	nodes, err := pnq.Limit(2).All(setContextOp(ctx, pnq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{packagename.Label}
	default:
		return nil, &NotSingularError{packagename.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pnq *PackageNameQuery) OnlyX(ctx context.Context) *PackageName {
	node, err := pnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PackageName ID in the query.
// Returns a *NotSingularError when more than one PackageName ID is found.
// Returns a *NotFoundError when no entities are found.
func (pnq *PackageNameQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pnq.Limit(2).IDs(setContextOp(ctx, pnq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{packagename.Label}
	default:
		err = &NotSingularError{packagename.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pnq *PackageNameQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PackageNames.
func (pnq *PackageNameQuery) All(ctx context.Context) ([]*PackageName, error) {
	ctx = setContextOp(ctx, pnq.ctx, ent.OpQueryAll)
	if err := pnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PackageName, *PackageNameQuery]()
	return withInterceptors[[]*PackageName](ctx, pnq, qr, pnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pnq *PackageNameQuery) AllX(ctx context.Context) []*PackageName {
	nodes, err := pnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PackageName IDs.
func (pnq *PackageNameQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pnq.ctx.Unique == nil && pnq.path != nil {
		pnq.Unique(true)
	}
	ctx = setContextOp(ctx, pnq.ctx, ent.OpQueryIDs)
	if err = pnq.Select(packagename.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pnq *PackageNameQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pnq *PackageNameQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pnq.ctx, ent.OpQueryCount)
	if err := pnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pnq, querierCount[*PackageNameQuery](), pnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pnq *PackageNameQuery) CountX(ctx context.Context) int {
	count, err := pnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pnq *PackageNameQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pnq.ctx, ent.OpQueryExist)
	switch _, err := pnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pnq *PackageNameQuery) ExistX(ctx context.Context) bool {
	exist, err := pnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PackageNameQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pnq *PackageNameQuery) Clone() *PackageNameQuery {
	if pnq == nil {
		return nil
	}
	return &PackageNameQuery{
		config:            pnq.config,
		ctx:               pnq.ctx.Clone(),
		order:             append([]packagename.OrderOption{}, pnq.order...),
		inters:            append([]Interceptor{}, pnq.inters...),
		predicates:        append([]predicate.PackageName{}, pnq.predicates...),
		withVersions:      pnq.withVersions.Clone(),
		withHasSourceAt:   pnq.withHasSourceAt.Clone(),
		withCertification: pnq.withCertification.Clone(),
		withMetadata:      pnq.withMetadata.Clone(),
		withPoc:           pnq.withPoc.Clone(),
		// clone intermediate query.
		sql:  pnq.sql.Clone(),
		path: pnq.path,
	}
}

// WithVersions tells the query-builder to eager-load the nodes that are connected to
// the "versions" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNameQuery) WithVersions(opts ...func(*PackageVersionQuery)) *PackageNameQuery {
	query := (&PackageVersionClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pnq.withVersions = query
	return pnq
}

// WithHasSourceAt tells the query-builder to eager-load the nodes that are connected to
// the "has_source_at" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNameQuery) WithHasSourceAt(opts ...func(*HasSourceAtQuery)) *PackageNameQuery {
	query := (&HasSourceAtClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pnq.withHasSourceAt = query
	return pnq
}

// WithCertification tells the query-builder to eager-load the nodes that are connected to
// the "certification" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNameQuery) WithCertification(opts ...func(*CertificationQuery)) *PackageNameQuery {
	query := (&CertificationClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pnq.withCertification = query
	return pnq
}

// WithMetadata tells the query-builder to eager-load the nodes that are connected to
// the "metadata" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNameQuery) WithMetadata(opts ...func(*HasMetadataQuery)) *PackageNameQuery {
	query := (&HasMetadataClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pnq.withMetadata = query
	return pnq
}

// WithPoc tells the query-builder to eager-load the nodes that are connected to
// the "poc" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNameQuery) WithPoc(opts ...func(*PointOfContactQuery)) *PackageNameQuery {
	query := (&PointOfContactClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pnq.withPoc = query
	return pnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PackageName.Query().
//		GroupBy(packagename.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pnq *PackageNameQuery) GroupBy(field string, fields ...string) *PackageNameGroupBy {
	pnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PackageNameGroupBy{build: pnq}
	grbuild.flds = &pnq.ctx.Fields
	grbuild.label = packagename.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//	}
//
//	client.PackageName.Query().
//		Select(packagename.FieldType).
//		Scan(ctx, &v)
func (pnq *PackageNameQuery) Select(fields ...string) *PackageNameSelect {
	pnq.ctx.Fields = append(pnq.ctx.Fields, fields...)
	sbuild := &PackageNameSelect{PackageNameQuery: pnq}
	sbuild.label = packagename.Label
	sbuild.flds, sbuild.scan = &pnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PackageNameSelect configured with the given aggregations.
func (pnq *PackageNameQuery) Aggregate(fns ...AggregateFunc) *PackageNameSelect {
	return pnq.Select().Aggregate(fns...)
}

func (pnq *PackageNameQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pnq); err != nil {
				return err
			}
		}
	}
	for _, f := range pnq.ctx.Fields {
		if !packagename.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pnq.path != nil {
		prev, err := pnq.path(ctx)
		if err != nil {
			return err
		}
		pnq.sql = prev
	}
	return nil
}

func (pnq *PackageNameQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PackageName, error) {
	var (
		nodes       = []*PackageName{}
		_spec       = pnq.querySpec()
		loadedTypes = [5]bool{
			pnq.withVersions != nil,
			pnq.withHasSourceAt != nil,
			pnq.withCertification != nil,
			pnq.withMetadata != nil,
			pnq.withPoc != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PackageName).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PackageName{config: pnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pnq.modifiers) > 0 {
		_spec.Modifiers = pnq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pnq.withVersions; query != nil {
		if err := pnq.loadVersions(ctx, query, nodes,
			func(n *PackageName) { n.Edges.Versions = []*PackageVersion{} },
			func(n *PackageName, e *PackageVersion) { n.Edges.Versions = append(n.Edges.Versions, e) }); err != nil {
			return nil, err
		}
	}
	if query := pnq.withHasSourceAt; query != nil {
		if err := pnq.loadHasSourceAt(ctx, query, nodes,
			func(n *PackageName) { n.Edges.HasSourceAt = []*HasSourceAt{} },
			func(n *PackageName, e *HasSourceAt) { n.Edges.HasSourceAt = append(n.Edges.HasSourceAt, e) }); err != nil {
			return nil, err
		}
	}
	if query := pnq.withCertification; query != nil {
		if err := pnq.loadCertification(ctx, query, nodes,
			func(n *PackageName) { n.Edges.Certification = []*Certification{} },
			func(n *PackageName, e *Certification) { n.Edges.Certification = append(n.Edges.Certification, e) }); err != nil {
			return nil, err
		}
	}
	if query := pnq.withMetadata; query != nil {
		if err := pnq.loadMetadata(ctx, query, nodes,
			func(n *PackageName) { n.Edges.Metadata = []*HasMetadata{} },
			func(n *PackageName, e *HasMetadata) { n.Edges.Metadata = append(n.Edges.Metadata, e) }); err != nil {
			return nil, err
		}
	}
	if query := pnq.withPoc; query != nil {
		if err := pnq.loadPoc(ctx, query, nodes,
			func(n *PackageName) { n.Edges.Poc = []*PointOfContact{} },
			func(n *PackageName, e *PointOfContact) { n.Edges.Poc = append(n.Edges.Poc, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pnq.withNamedVersions {
		if err := pnq.loadVersions(ctx, query, nodes,
			func(n *PackageName) { n.appendNamedVersions(name) },
			func(n *PackageName, e *PackageVersion) { n.appendNamedVersions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pnq.withNamedHasSourceAt {
		if err := pnq.loadHasSourceAt(ctx, query, nodes,
			func(n *PackageName) { n.appendNamedHasSourceAt(name) },
			func(n *PackageName, e *HasSourceAt) { n.appendNamedHasSourceAt(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pnq.withNamedCertification {
		if err := pnq.loadCertification(ctx, query, nodes,
			func(n *PackageName) { n.appendNamedCertification(name) },
			func(n *PackageName, e *Certification) { n.appendNamedCertification(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pnq.withNamedMetadata {
		if err := pnq.loadMetadata(ctx, query, nodes,
			func(n *PackageName) { n.appendNamedMetadata(name) },
			func(n *PackageName, e *HasMetadata) { n.appendNamedMetadata(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pnq.withNamedPoc {
		if err := pnq.loadPoc(ctx, query, nodes,
			func(n *PackageName) { n.appendNamedPoc(name) },
			func(n *PackageName, e *PointOfContact) { n.appendNamedPoc(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pnq.loadTotal {
		if err := pnq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pnq *PackageNameQuery) loadVersions(ctx context.Context, query *PackageVersionQuery, nodes []*PackageName, init func(*PackageName), assign func(*PackageName, *PackageVersion)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*PackageName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(packageversion.FieldNameID)
	}
	query.Where(predicate.PackageVersion(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packagename.VersionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.NameID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "name_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pnq *PackageNameQuery) loadHasSourceAt(ctx context.Context, query *HasSourceAtQuery, nodes []*PackageName, init func(*PackageName), assign func(*PackageName, *HasSourceAt)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*PackageName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(hassourceat.FieldPackageNameID)
	}
	query.Where(predicate.HasSourceAt(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packagename.HasSourceAtColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PackageNameID
		if fk == nil {
			return fmt.Errorf(`foreign-key "package_name_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "package_name_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pnq *PackageNameQuery) loadCertification(ctx context.Context, query *CertificationQuery, nodes []*PackageName, init func(*PackageName), assign func(*PackageName, *Certification)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*PackageName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(certification.FieldPackageNameID)
	}
	query.Where(predicate.Certification(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packagename.CertificationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PackageNameID
		if fk == nil {
			return fmt.Errorf(`foreign-key "package_name_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "package_name_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pnq *PackageNameQuery) loadMetadata(ctx context.Context, query *HasMetadataQuery, nodes []*PackageName, init func(*PackageName), assign func(*PackageName, *HasMetadata)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*PackageName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(hasmetadata.FieldPackageNameID)
	}
	query.Where(predicate.HasMetadata(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packagename.MetadataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PackageNameID
		if fk == nil {
			return fmt.Errorf(`foreign-key "package_name_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "package_name_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pnq *PackageNameQuery) loadPoc(ctx context.Context, query *PointOfContactQuery, nodes []*PackageName, init func(*PackageName), assign func(*PackageName, *PointOfContact)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*PackageName)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(pointofcontact.FieldPackageNameID)
	}
	query.Where(predicate.PointOfContact(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packagename.PocColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PackageNameID
		if fk == nil {
			return fmt.Errorf(`foreign-key "package_name_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "package_name_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pnq *PackageNameQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pnq.querySpec()
	if len(pnq.modifiers) > 0 {
		_spec.Modifiers = pnq.modifiers
	}
	_spec.Node.Columns = pnq.ctx.Fields
	if len(pnq.ctx.Fields) > 0 {
		_spec.Unique = pnq.ctx.Unique != nil && *pnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pnq.driver, _spec)
}

func (pnq *PackageNameQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(packagename.Table, packagename.Columns, sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeUUID))
	_spec.From = pnq.sql
	if unique := pnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pnq.path != nil {
		_spec.Unique = true
	}
	if fields := pnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packagename.FieldID)
		for i := range fields {
			if fields[i] != packagename.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pnq *PackageNameQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pnq.driver.Dialect())
	t1 := builder.Table(packagename.Table)
	columns := pnq.ctx.Fields
	if len(columns) == 0 {
		columns = packagename.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pnq.sql != nil {
		selector = pnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pnq.ctx.Unique != nil && *pnq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pnq.predicates {
		p(selector)
	}
	for _, p := range pnq.order {
		p(selector)
	}
	if offset := pnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedVersions tells the query-builder to eager-load the nodes that are connected to the "versions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNameQuery) WithNamedVersions(name string, opts ...func(*PackageVersionQuery)) *PackageNameQuery {
	query := (&PackageVersionClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pnq.withNamedVersions == nil {
		pnq.withNamedVersions = make(map[string]*PackageVersionQuery)
	}
	pnq.withNamedVersions[name] = query
	return pnq
}

// WithNamedHasSourceAt tells the query-builder to eager-load the nodes that are connected to the "has_source_at"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNameQuery) WithNamedHasSourceAt(name string, opts ...func(*HasSourceAtQuery)) *PackageNameQuery {
	query := (&HasSourceAtClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pnq.withNamedHasSourceAt == nil {
		pnq.withNamedHasSourceAt = make(map[string]*HasSourceAtQuery)
	}
	pnq.withNamedHasSourceAt[name] = query
	return pnq
}

// WithNamedCertification tells the query-builder to eager-load the nodes that are connected to the "certification"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNameQuery) WithNamedCertification(name string, opts ...func(*CertificationQuery)) *PackageNameQuery {
	query := (&CertificationClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pnq.withNamedCertification == nil {
		pnq.withNamedCertification = make(map[string]*CertificationQuery)
	}
	pnq.withNamedCertification[name] = query
	return pnq
}

// WithNamedMetadata tells the query-builder to eager-load the nodes that are connected to the "metadata"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNameQuery) WithNamedMetadata(name string, opts ...func(*HasMetadataQuery)) *PackageNameQuery {
	query := (&HasMetadataClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pnq.withNamedMetadata == nil {
		pnq.withNamedMetadata = make(map[string]*HasMetadataQuery)
	}
	pnq.withNamedMetadata[name] = query
	return pnq
}

// WithNamedPoc tells the query-builder to eager-load the nodes that are connected to the "poc"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNameQuery) WithNamedPoc(name string, opts ...func(*PointOfContactQuery)) *PackageNameQuery {
	query := (&PointOfContactClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pnq.withNamedPoc == nil {
		pnq.withNamedPoc = make(map[string]*PointOfContactQuery)
	}
	pnq.withNamedPoc[name] = query
	return pnq
}

// PackageNameGroupBy is the group-by builder for PackageName entities.
type PackageNameGroupBy struct {
	selector
	build *PackageNameQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pngb *PackageNameGroupBy) Aggregate(fns ...AggregateFunc) *PackageNameGroupBy {
	pngb.fns = append(pngb.fns, fns...)
	return pngb
}

// Scan applies the selector query and scans the result into the given value.
func (pngb *PackageNameGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pngb.build.ctx, ent.OpQueryGroupBy)
	if err := pngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackageNameQuery, *PackageNameGroupBy](ctx, pngb.build, pngb, pngb.build.inters, v)
}

func (pngb *PackageNameGroupBy) sqlScan(ctx context.Context, root *PackageNameQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pngb.fns))
	for _, fn := range pngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pngb.flds)+len(pngb.fns))
		for _, f := range *pngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PackageNameSelect is the builder for selecting fields of PackageName entities.
type PackageNameSelect struct {
	*PackageNameQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pns *PackageNameSelect) Aggregate(fns ...AggregateFunc) *PackageNameSelect {
	pns.fns = append(pns.fns, fns...)
	return pns
}

// Scan applies the selector query and scans the result into the given value.
func (pns *PackageNameSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pns.ctx, ent.OpQuerySelect)
	if err := pns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackageNameQuery, *PackageNameSelect](ctx, pns.PackageNameQuery, pns, pns.inters, v)
}

func (pns *PackageNameSelect) sqlScan(ctx context.Context, root *PackageNameQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pns.fns))
	for _, fn := range pns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

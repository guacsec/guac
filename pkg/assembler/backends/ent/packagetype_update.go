// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagetype"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PackageTypeUpdate is the builder for updating PackageType entities.
type PackageTypeUpdate struct {
	config
	hooks    []Hook
	mutation *PackageTypeMutation
}

// Where appends a list predicates to the PackageTypeUpdate builder.
func (ptu *PackageTypeUpdate) Where(ps ...predicate.PackageType) *PackageTypeUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetType sets the "type" field.
func (ptu *PackageTypeUpdate) SetType(s string) *PackageTypeUpdate {
	ptu.mutation.SetType(s)
	return ptu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptu *PackageTypeUpdate) SetNillableType(s *string) *PackageTypeUpdate {
	if s != nil {
		ptu.SetType(*s)
	}
	return ptu
}

// AddNamespaceIDs adds the "namespaces" edge to the PackageNamespace entity by IDs.
func (ptu *PackageTypeUpdate) AddNamespaceIDs(ids ...int) *PackageTypeUpdate {
	ptu.mutation.AddNamespaceIDs(ids...)
	return ptu
}

// AddNamespaces adds the "namespaces" edges to the PackageNamespace entity.
func (ptu *PackageTypeUpdate) AddNamespaces(p ...*PackageNamespace) *PackageTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddNamespaceIDs(ids...)
}

// Mutation returns the PackageTypeMutation object of the builder.
func (ptu *PackageTypeUpdate) Mutation() *PackageTypeMutation {
	return ptu.mutation
}

// ClearNamespaces clears all "namespaces" edges to the PackageNamespace entity.
func (ptu *PackageTypeUpdate) ClearNamespaces() *PackageTypeUpdate {
	ptu.mutation.ClearNamespaces()
	return ptu
}

// RemoveNamespaceIDs removes the "namespaces" edge to PackageNamespace entities by IDs.
func (ptu *PackageTypeUpdate) RemoveNamespaceIDs(ids ...int) *PackageTypeUpdate {
	ptu.mutation.RemoveNamespaceIDs(ids...)
	return ptu
}

// RemoveNamespaces removes "namespaces" edges to PackageNamespace entities.
func (ptu *PackageTypeUpdate) RemoveNamespaces(p ...*PackageNamespace) *PackageTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveNamespaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PackageTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PackageTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PackageTypeUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PackageTypeUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *PackageTypeUpdate) check() error {
	if v, ok := ptu.mutation.GetType(); ok {
		if err := packagetype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PackageType.type": %w`, err)}
		}
	}
	return nil
}

func (ptu *PackageTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(packagetype.Table, packagetype.Columns, sqlgraph.NewFieldSpec(packagetype.FieldID, field.TypeInt))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.GetType(); ok {
		_spec.SetField(packagetype.FieldType, field.TypeString, value)
	}
	if ptu.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagetype.NamespacesTable,
			Columns: []string{packagetype.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedNamespacesIDs(); len(nodes) > 0 && !ptu.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagetype.NamespacesTable,
			Columns: []string{packagetype.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagetype.NamespacesTable,
			Columns: []string{packagetype.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packagetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PackageTypeUpdateOne is the builder for updating a single PackageType entity.
type PackageTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackageTypeMutation
}

// SetType sets the "type" field.
func (ptuo *PackageTypeUpdateOne) SetType(s string) *PackageTypeUpdateOne {
	ptuo.mutation.SetType(s)
	return ptuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptuo *PackageTypeUpdateOne) SetNillableType(s *string) *PackageTypeUpdateOne {
	if s != nil {
		ptuo.SetType(*s)
	}
	return ptuo
}

// AddNamespaceIDs adds the "namespaces" edge to the PackageNamespace entity by IDs.
func (ptuo *PackageTypeUpdateOne) AddNamespaceIDs(ids ...int) *PackageTypeUpdateOne {
	ptuo.mutation.AddNamespaceIDs(ids...)
	return ptuo
}

// AddNamespaces adds the "namespaces" edges to the PackageNamespace entity.
func (ptuo *PackageTypeUpdateOne) AddNamespaces(p ...*PackageNamespace) *PackageTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddNamespaceIDs(ids...)
}

// Mutation returns the PackageTypeMutation object of the builder.
func (ptuo *PackageTypeUpdateOne) Mutation() *PackageTypeMutation {
	return ptuo.mutation
}

// ClearNamespaces clears all "namespaces" edges to the PackageNamespace entity.
func (ptuo *PackageTypeUpdateOne) ClearNamespaces() *PackageTypeUpdateOne {
	ptuo.mutation.ClearNamespaces()
	return ptuo
}

// RemoveNamespaceIDs removes the "namespaces" edge to PackageNamespace entities by IDs.
func (ptuo *PackageTypeUpdateOne) RemoveNamespaceIDs(ids ...int) *PackageTypeUpdateOne {
	ptuo.mutation.RemoveNamespaceIDs(ids...)
	return ptuo
}

// RemoveNamespaces removes "namespaces" edges to PackageNamespace entities.
func (ptuo *PackageTypeUpdateOne) RemoveNamespaces(p ...*PackageNamespace) *PackageTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveNamespaceIDs(ids...)
}

// Where appends a list predicates to the PackageTypeUpdate builder.
func (ptuo *PackageTypeUpdateOne) Where(ps ...predicate.PackageType) *PackageTypeUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PackageTypeUpdateOne) Select(field string, fields ...string) *PackageTypeUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PackageType entity.
func (ptuo *PackageTypeUpdateOne) Save(ctx context.Context) (*PackageType, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PackageTypeUpdateOne) SaveX(ctx context.Context) *PackageType {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PackageTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PackageTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *PackageTypeUpdateOne) check() error {
	if v, ok := ptuo.mutation.GetType(); ok {
		if err := packagetype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PackageType.type": %w`, err)}
		}
	}
	return nil
}

func (ptuo *PackageTypeUpdateOne) sqlSave(ctx context.Context) (_node *PackageType, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(packagetype.Table, packagetype.Columns, sqlgraph.NewFieldSpec(packagetype.FieldID, field.TypeInt))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PackageType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packagetype.FieldID)
		for _, f := range fields {
			if !packagetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != packagetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.GetType(); ok {
		_spec.SetField(packagetype.FieldType, field.TypeString, value)
	}
	if ptuo.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagetype.NamespacesTable,
			Columns: []string{packagetype.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedNamespacesIDs(); len(nodes) > 0 && !ptuo.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagetype.NamespacesTable,
			Columns: []string{packagetype.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagetype.NamespacesTable,
			Columns: []string{packagetype.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PackageType{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packagetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}

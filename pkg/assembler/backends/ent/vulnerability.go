// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/securityadvisory"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerability"
)

// Vulnerability is the model entity for the Vulnerability schema.
type Vulnerability struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Advisory is one of OSV, GHSA, or CVE, or nil if not vulnerable
	VulnerabilityID *int `json:"vulnerability_id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID int `json:"package_id,omitempty"`
	// TimeScanned holds the value of the "time_scanned" field.
	TimeScanned time.Time `json:"time_scanned,omitempty"`
	// DbURI holds the value of the "db_uri" field.
	DbURI string `json:"db_uri,omitempty"`
	// DbVersion holds the value of the "db_version" field.
	DbVersion string `json:"db_version,omitempty"`
	// ScannerURI holds the value of the "scanner_uri" field.
	ScannerURI string `json:"scanner_uri,omitempty"`
	// ScannerVersion holds the value of the "scanner_version" field.
	ScannerVersion string `json:"scanner_version,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VulnerabilityQuery when eager-loading is set.
	Edges        VulnerabilityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VulnerabilityEdges holds the relations/edges for other nodes in the graph.
type VulnerabilityEdges struct {
	// Vulnerability is one of OSV, GHSA, or CVE
	Vulnerability *SecurityAdvisory `json:"vulnerability,omitempty"`
	// Package holds the value of the package edge.
	Package *PackageVersion `json:"package,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VulnerabilityOrErr returns the Vulnerability value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VulnerabilityEdges) VulnerabilityOrErr() (*SecurityAdvisory, error) {
	if e.loadedTypes[0] {
		if e.Vulnerability == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: securityadvisory.Label}
		}
		return e.Vulnerability, nil
	}
	return nil, &NotLoadedError{edge: "vulnerability"}
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VulnerabilityEdges) PackageOrErr() (*PackageVersion, error) {
	if e.loadedTypes[1] {
		if e.Package == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.Package, nil
	}
	return nil, &NotLoadedError{edge: "package"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vulnerability) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vulnerability.FieldID, vulnerability.FieldVulnerabilityID, vulnerability.FieldPackageID:
			values[i] = new(sql.NullInt64)
		case vulnerability.FieldDbURI, vulnerability.FieldDbVersion, vulnerability.FieldScannerURI, vulnerability.FieldScannerVersion, vulnerability.FieldOrigin, vulnerability.FieldCollector:
			values[i] = new(sql.NullString)
		case vulnerability.FieldTimeScanned:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vulnerability fields.
func (v *Vulnerability) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vulnerability.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vulnerability.FieldVulnerabilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vulnerability_id", values[i])
			} else if value.Valid {
				v.VulnerabilityID = new(int)
				*v.VulnerabilityID = int(value.Int64)
			}
		case vulnerability.FieldPackageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value.Valid {
				v.PackageID = int(value.Int64)
			}
		case vulnerability.FieldTimeScanned:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_scanned", values[i])
			} else if value.Valid {
				v.TimeScanned = value.Time
			}
		case vulnerability.FieldDbURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field db_uri", values[i])
			} else if value.Valid {
				v.DbURI = value.String
			}
		case vulnerability.FieldDbVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field db_version", values[i])
			} else if value.Valid {
				v.DbVersion = value.String
			}
		case vulnerability.FieldScannerURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scanner_uri", values[i])
			} else if value.Valid {
				v.ScannerURI = value.String
			}
		case vulnerability.FieldScannerVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scanner_version", values[i])
			} else if value.Valid {
				v.ScannerVersion = value.String
			}
		case vulnerability.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				v.Origin = value.String
			}
		case vulnerability.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				v.Collector = value.String
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vulnerability.
// This includes values selected through modifiers, order, etc.
func (v *Vulnerability) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryVulnerability queries the "vulnerability" edge of the Vulnerability entity.
func (v *Vulnerability) QueryVulnerability() *SecurityAdvisoryQuery {
	return NewVulnerabilityClient(v.config).QueryVulnerability(v)
}

// QueryPackage queries the "package" edge of the Vulnerability entity.
func (v *Vulnerability) QueryPackage() *PackageVersionQuery {
	return NewVulnerabilityClient(v.config).QueryPackage(v)
}

// Update returns a builder for updating this Vulnerability.
// Note that you need to call Vulnerability.Unwrap() before calling this method if this Vulnerability
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vulnerability) Update() *VulnerabilityUpdateOne {
	return NewVulnerabilityClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vulnerability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vulnerability) Unwrap() *Vulnerability {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vulnerability is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vulnerability) String() string {
	var builder strings.Builder
	builder.WriteString("Vulnerability(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	if v := v.VulnerabilityID; v != nil {
		builder.WriteString("vulnerability_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("package_id=")
	builder.WriteString(fmt.Sprintf("%v", v.PackageID))
	builder.WriteString(", ")
	builder.WriteString("time_scanned=")
	builder.WriteString(v.TimeScanned.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("db_uri=")
	builder.WriteString(v.DbURI)
	builder.WriteString(", ")
	builder.WriteString("db_version=")
	builder.WriteString(v.DbVersion)
	builder.WriteString(", ")
	builder.WriteString("scanner_uri=")
	builder.WriteString(v.ScannerURI)
	builder.WriteString(", ")
	builder.WriteString("scanner_version=")
	builder.WriteString(v.ScannerVersion)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(v.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(v.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// Vulnerabilities is a parsable slice of Vulnerability.
type Vulnerabilities []*Vulnerability

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hasmetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// HasMetadataQuery is the builder for querying HasMetadata entities.
type HasMetadataQuery struct {
	config
	ctx                *QueryContext
	order              []hasmetadata.OrderOption
	inters             []Interceptor
	predicates         []predicate.HasMetadata
	withSource         *SourceNameQuery
	withPackageVersion *PackageVersionQuery
	withAllVersions    *PackageNameQuery
	withArtifact       *ArtifactQuery
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*HasMetadata) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HasMetadataQuery builder.
func (hmq *HasMetadataQuery) Where(ps ...predicate.HasMetadata) *HasMetadataQuery {
	hmq.predicates = append(hmq.predicates, ps...)
	return hmq
}

// Limit the number of records to be returned by this query.
func (hmq *HasMetadataQuery) Limit(limit int) *HasMetadataQuery {
	hmq.ctx.Limit = &limit
	return hmq
}

// Offset to start from.
func (hmq *HasMetadataQuery) Offset(offset int) *HasMetadataQuery {
	hmq.ctx.Offset = &offset
	return hmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hmq *HasMetadataQuery) Unique(unique bool) *HasMetadataQuery {
	hmq.ctx.Unique = &unique
	return hmq
}

// Order specifies how the records should be ordered.
func (hmq *HasMetadataQuery) Order(o ...hasmetadata.OrderOption) *HasMetadataQuery {
	hmq.order = append(hmq.order, o...)
	return hmq
}

// QuerySource chains the current query on the "source" edge.
func (hmq *HasMetadataQuery) QuerySource() *SourceNameQuery {
	query := (&SourceNameClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hasmetadata.Table, hasmetadata.FieldID, selector),
			sqlgraph.To(sourcename.Table, sourcename.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hasmetadata.SourceTable, hasmetadata.SourceColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackageVersion chains the current query on the "package_version" edge.
func (hmq *HasMetadataQuery) QueryPackageVersion() *PackageVersionQuery {
	query := (&PackageVersionClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hasmetadata.Table, hasmetadata.FieldID, selector),
			sqlgraph.To(packageversion.Table, packageversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hasmetadata.PackageVersionTable, hasmetadata.PackageVersionColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAllVersions chains the current query on the "all_versions" edge.
func (hmq *HasMetadataQuery) QueryAllVersions() *PackageNameQuery {
	query := (&PackageNameClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hasmetadata.Table, hasmetadata.FieldID, selector),
			sqlgraph.To(packagename.Table, packagename.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hasmetadata.AllVersionsTable, hasmetadata.AllVersionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArtifact chains the current query on the "artifact" edge.
func (hmq *HasMetadataQuery) QueryArtifact() *ArtifactQuery {
	query := (&ArtifactClient{config: hmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hasmetadata.Table, hasmetadata.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hasmetadata.ArtifactTable, hasmetadata.ArtifactColumn),
		)
		fromU = sqlgraph.SetNeighbors(hmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HasMetadata entity from the query.
// Returns a *NotFoundError when no HasMetadata was found.
func (hmq *HasMetadataQuery) First(ctx context.Context) (*HasMetadata, error) {
	nodes, err := hmq.Limit(1).All(setContextOp(ctx, hmq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hasmetadata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hmq *HasMetadataQuery) FirstX(ctx context.Context) *HasMetadata {
	node, err := hmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HasMetadata ID from the query.
// Returns a *NotFoundError when no HasMetadata ID was found.
func (hmq *HasMetadataQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hmq.Limit(1).IDs(setContextOp(ctx, hmq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hasmetadata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hmq *HasMetadataQuery) FirstIDX(ctx context.Context) int {
	id, err := hmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HasMetadata entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HasMetadata entity is found.
// Returns a *NotFoundError when no HasMetadata entities are found.
func (hmq *HasMetadataQuery) Only(ctx context.Context) (*HasMetadata, error) {
	nodes, err := hmq.Limit(2).All(setContextOp(ctx, hmq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hasmetadata.Label}
	default:
		return nil, &NotSingularError{hasmetadata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hmq *HasMetadataQuery) OnlyX(ctx context.Context) *HasMetadata {
	node, err := hmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HasMetadata ID in the query.
// Returns a *NotSingularError when more than one HasMetadata ID is found.
// Returns a *NotFoundError when no entities are found.
func (hmq *HasMetadataQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hmq.Limit(2).IDs(setContextOp(ctx, hmq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hasmetadata.Label}
	default:
		err = &NotSingularError{hasmetadata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hmq *HasMetadataQuery) OnlyIDX(ctx context.Context) int {
	id, err := hmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HasMetadataSlice.
func (hmq *HasMetadataQuery) All(ctx context.Context) ([]*HasMetadata, error) {
	ctx = setContextOp(ctx, hmq.ctx, "All")
	if err := hmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HasMetadata, *HasMetadataQuery]()
	return withInterceptors[[]*HasMetadata](ctx, hmq, qr, hmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hmq *HasMetadataQuery) AllX(ctx context.Context) []*HasMetadata {
	nodes, err := hmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HasMetadata IDs.
func (hmq *HasMetadataQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hmq.ctx.Unique == nil && hmq.path != nil {
		hmq.Unique(true)
	}
	ctx = setContextOp(ctx, hmq.ctx, "IDs")
	if err = hmq.Select(hasmetadata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hmq *HasMetadataQuery) IDsX(ctx context.Context) []int {
	ids, err := hmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hmq *HasMetadataQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hmq.ctx, "Count")
	if err := hmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hmq, querierCount[*HasMetadataQuery](), hmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hmq *HasMetadataQuery) CountX(ctx context.Context) int {
	count, err := hmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hmq *HasMetadataQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hmq.ctx, "Exist")
	switch _, err := hmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hmq *HasMetadataQuery) ExistX(ctx context.Context) bool {
	exist, err := hmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HasMetadataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hmq *HasMetadataQuery) Clone() *HasMetadataQuery {
	if hmq == nil {
		return nil
	}
	return &HasMetadataQuery{
		config:             hmq.config,
		ctx:                hmq.ctx.Clone(),
		order:              append([]hasmetadata.OrderOption{}, hmq.order...),
		inters:             append([]Interceptor{}, hmq.inters...),
		predicates:         append([]predicate.HasMetadata{}, hmq.predicates...),
		withSource:         hmq.withSource.Clone(),
		withPackageVersion: hmq.withPackageVersion.Clone(),
		withAllVersions:    hmq.withAllVersions.Clone(),
		withArtifact:       hmq.withArtifact.Clone(),
		// clone intermediate query.
		sql:  hmq.sql.Clone(),
		path: hmq.path,
	}
}

// WithSource tells the query-builder to eager-load the nodes that are connected to
// the "source" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HasMetadataQuery) WithSource(opts ...func(*SourceNameQuery)) *HasMetadataQuery {
	query := (&SourceNameClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withSource = query
	return hmq
}

// WithPackageVersion tells the query-builder to eager-load the nodes that are connected to
// the "package_version" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HasMetadataQuery) WithPackageVersion(opts ...func(*PackageVersionQuery)) *HasMetadataQuery {
	query := (&PackageVersionClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withPackageVersion = query
	return hmq
}

// WithAllVersions tells the query-builder to eager-load the nodes that are connected to
// the "all_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HasMetadataQuery) WithAllVersions(opts ...func(*PackageNameQuery)) *HasMetadataQuery {
	query := (&PackageNameClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withAllVersions = query
	return hmq
}

// WithArtifact tells the query-builder to eager-load the nodes that are connected to
// the "artifact" edge. The optional arguments are used to configure the query builder of the edge.
func (hmq *HasMetadataQuery) WithArtifact(opts ...func(*ArtifactQuery)) *HasMetadataQuery {
	query := (&ArtifactClient{config: hmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hmq.withArtifact = query
	return hmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SourceID int `json:"source_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HasMetadata.Query().
//		GroupBy(hasmetadata.FieldSourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hmq *HasMetadataQuery) GroupBy(field string, fields ...string) *HasMetadataGroupBy {
	hmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HasMetadataGroupBy{build: hmq}
	grbuild.flds = &hmq.ctx.Fields
	grbuild.label = hasmetadata.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SourceID int `json:"source_id,omitempty"`
//	}
//
//	client.HasMetadata.Query().
//		Select(hasmetadata.FieldSourceID).
//		Scan(ctx, &v)
func (hmq *HasMetadataQuery) Select(fields ...string) *HasMetadataSelect {
	hmq.ctx.Fields = append(hmq.ctx.Fields, fields...)
	sbuild := &HasMetadataSelect{HasMetadataQuery: hmq}
	sbuild.label = hasmetadata.Label
	sbuild.flds, sbuild.scan = &hmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HasMetadataSelect configured with the given aggregations.
func (hmq *HasMetadataQuery) Aggregate(fns ...AggregateFunc) *HasMetadataSelect {
	return hmq.Select().Aggregate(fns...)
}

func (hmq *HasMetadataQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hmq); err != nil {
				return err
			}
		}
	}
	for _, f := range hmq.ctx.Fields {
		if !hasmetadata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hmq.path != nil {
		prev, err := hmq.path(ctx)
		if err != nil {
			return err
		}
		hmq.sql = prev
	}
	return nil
}

func (hmq *HasMetadataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HasMetadata, error) {
	var (
		nodes       = []*HasMetadata{}
		_spec       = hmq.querySpec()
		loadedTypes = [4]bool{
			hmq.withSource != nil,
			hmq.withPackageVersion != nil,
			hmq.withAllVersions != nil,
			hmq.withArtifact != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HasMetadata).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HasMetadata{config: hmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hmq.modifiers) > 0 {
		_spec.Modifiers = hmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hmq.withSource; query != nil {
		if err := hmq.loadSource(ctx, query, nodes, nil,
			func(n *HasMetadata, e *SourceName) { n.Edges.Source = e }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withPackageVersion; query != nil {
		if err := hmq.loadPackageVersion(ctx, query, nodes, nil,
			func(n *HasMetadata, e *PackageVersion) { n.Edges.PackageVersion = e }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withAllVersions; query != nil {
		if err := hmq.loadAllVersions(ctx, query, nodes, nil,
			func(n *HasMetadata, e *PackageName) { n.Edges.AllVersions = e }); err != nil {
			return nil, err
		}
	}
	if query := hmq.withArtifact; query != nil {
		if err := hmq.loadArtifact(ctx, query, nodes, nil,
			func(n *HasMetadata, e *Artifact) { n.Edges.Artifact = e }); err != nil {
			return nil, err
		}
	}
	for i := range hmq.loadTotal {
		if err := hmq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hmq *HasMetadataQuery) loadSource(ctx context.Context, query *SourceNameQuery, nodes []*HasMetadata, init func(*HasMetadata), assign func(*HasMetadata, *SourceName)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HasMetadata)
	for i := range nodes {
		if nodes[i].SourceID == nil {
			continue
		}
		fk := *nodes[i].SourceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sourcename.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "source_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hmq *HasMetadataQuery) loadPackageVersion(ctx context.Context, query *PackageVersionQuery, nodes []*HasMetadata, init func(*HasMetadata), assign func(*HasMetadata, *PackageVersion)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HasMetadata)
	for i := range nodes {
		if nodes[i].PackageVersionID == nil {
			continue
		}
		fk := *nodes[i].PackageVersionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packageversion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "package_version_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hmq *HasMetadataQuery) loadAllVersions(ctx context.Context, query *PackageNameQuery, nodes []*HasMetadata, init func(*HasMetadata), assign func(*HasMetadata, *PackageName)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HasMetadata)
	for i := range nodes {
		if nodes[i].PackageNameID == nil {
			continue
		}
		fk := *nodes[i].PackageNameID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packagename.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "package_name_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hmq *HasMetadataQuery) loadArtifact(ctx context.Context, query *ArtifactQuery, nodes []*HasMetadata, init func(*HasMetadata), assign func(*HasMetadata, *Artifact)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HasMetadata)
	for i := range nodes {
		if nodes[i].ArtifactID == nil {
			continue
		}
		fk := *nodes[i].ArtifactID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(artifact.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "artifact_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (hmq *HasMetadataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hmq.querySpec()
	if len(hmq.modifiers) > 0 {
		_spec.Modifiers = hmq.modifiers
	}
	_spec.Node.Columns = hmq.ctx.Fields
	if len(hmq.ctx.Fields) > 0 {
		_spec.Unique = hmq.ctx.Unique != nil && *hmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hmq.driver, _spec)
}

func (hmq *HasMetadataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hasmetadata.Table, hasmetadata.Columns, sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeInt))
	_spec.From = hmq.sql
	if unique := hmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hmq.path != nil {
		_spec.Unique = true
	}
	if fields := hmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hasmetadata.FieldID)
		for i := range fields {
			if fields[i] != hasmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hmq.withSource != nil {
			_spec.Node.AddColumnOnce(hasmetadata.FieldSourceID)
		}
		if hmq.withPackageVersion != nil {
			_spec.Node.AddColumnOnce(hasmetadata.FieldPackageVersionID)
		}
		if hmq.withAllVersions != nil {
			_spec.Node.AddColumnOnce(hasmetadata.FieldPackageNameID)
		}
		if hmq.withArtifact != nil {
			_spec.Node.AddColumnOnce(hasmetadata.FieldArtifactID)
		}
	}
	if ps := hmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hmq *HasMetadataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hmq.driver.Dialect())
	t1 := builder.Table(hasmetadata.Table)
	columns := hmq.ctx.Fields
	if len(columns) == 0 {
		columns = hasmetadata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hmq.sql != nil {
		selector = hmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hmq.ctx.Unique != nil && *hmq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hmq.predicates {
		p(selector)
	}
	for _, p := range hmq.order {
		p(selector)
	}
	if offset := hmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HasMetadataGroupBy is the group-by builder for HasMetadata entities.
type HasMetadataGroupBy struct {
	selector
	build *HasMetadataQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hmgb *HasMetadataGroupBy) Aggregate(fns ...AggregateFunc) *HasMetadataGroupBy {
	hmgb.fns = append(hmgb.fns, fns...)
	return hmgb
}

// Scan applies the selector query and scans the result into the given value.
func (hmgb *HasMetadataGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hmgb.build.ctx, "GroupBy")
	if err := hmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HasMetadataQuery, *HasMetadataGroupBy](ctx, hmgb.build, hmgb, hmgb.build.inters, v)
}

func (hmgb *HasMetadataGroupBy) sqlScan(ctx context.Context, root *HasMetadataQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hmgb.fns))
	for _, fn := range hmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hmgb.flds)+len(hmgb.fns))
		for _, f := range *hmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HasMetadataSelect is the builder for selecting fields of HasMetadata entities.
type HasMetadataSelect struct {
	*HasMetadataQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hms *HasMetadataSelect) Aggregate(fns ...AggregateFunc) *HasMetadataSelect {
	hms.fns = append(hms.fns, fns...)
	return hms
}

// Scan applies the selector query and scans the result into the given value.
func (hms *HasMetadataSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hms.ctx, "Select")
	if err := hms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HasMetadataQuery, *HasMetadataSelect](ctx, hms.HasMetadataQuery, hms, hms.inters, v)
}

func (hms *HasMetadataSelect) sqlScan(ctx context.Context, root *HasMetadataQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hms.fns))
	for _, fn := range hms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

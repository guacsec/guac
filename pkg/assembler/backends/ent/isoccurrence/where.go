// Code generated by ent, DO NOT EDIT.

package isoccurrence

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldLTE(FieldID, id))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldPackageID, v))
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldSourceID, v))
}

// ArtifactID applies equality check predicate on the "artifact_id" field. It's identical to ArtifactIDEQ.
func ArtifactID(v int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldArtifactID, v))
}

// Justification applies equality check predicate on the "justification" field. It's identical to JustificationEQ.
func Justification(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldJustification, v))
}

// Origin applies equality check predicate on the "origin" field. It's identical to OriginEQ.
func Origin(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldOrigin, v))
}

// Collector applies equality check predicate on the "collector" field. It's identical to CollectorEQ.
func Collector(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldCollector, v))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNotIn(FieldPackageID, vs...))
}

// PackageIDIsNil applies the IsNil predicate on the "package_id" field.
func PackageIDIsNil() predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldIsNull(FieldPackageID))
}

// PackageIDNotNil applies the NotNil predicate on the "package_id" field.
func PackageIDNotNil() predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNotNull(FieldPackageID))
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldSourceID, v))
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNEQ(FieldSourceID, v))
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldIn(FieldSourceID, vs...))
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNotIn(FieldSourceID, vs...))
}

// SourceIDIsNil applies the IsNil predicate on the "source_id" field.
func SourceIDIsNil() predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldIsNull(FieldSourceID))
}

// SourceIDNotNil applies the NotNil predicate on the "source_id" field.
func SourceIDNotNil() predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNotNull(FieldSourceID))
}

// ArtifactIDEQ applies the EQ predicate on the "artifact_id" field.
func ArtifactIDEQ(v int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldArtifactID, v))
}

// ArtifactIDNEQ applies the NEQ predicate on the "artifact_id" field.
func ArtifactIDNEQ(v int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNEQ(FieldArtifactID, v))
}

// ArtifactIDIn applies the In predicate on the "artifact_id" field.
func ArtifactIDIn(vs ...int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldIn(FieldArtifactID, vs...))
}

// ArtifactIDNotIn applies the NotIn predicate on the "artifact_id" field.
func ArtifactIDNotIn(vs ...int) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNotIn(FieldArtifactID, vs...))
}

// JustificationEQ applies the EQ predicate on the "justification" field.
func JustificationEQ(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldJustification, v))
}

// JustificationNEQ applies the NEQ predicate on the "justification" field.
func JustificationNEQ(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNEQ(FieldJustification, v))
}

// JustificationIn applies the In predicate on the "justification" field.
func JustificationIn(vs ...string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldIn(FieldJustification, vs...))
}

// JustificationNotIn applies the NotIn predicate on the "justification" field.
func JustificationNotIn(vs ...string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNotIn(FieldJustification, vs...))
}

// JustificationGT applies the GT predicate on the "justification" field.
func JustificationGT(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldGT(FieldJustification, v))
}

// JustificationGTE applies the GTE predicate on the "justification" field.
func JustificationGTE(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldGTE(FieldJustification, v))
}

// JustificationLT applies the LT predicate on the "justification" field.
func JustificationLT(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldLT(FieldJustification, v))
}

// JustificationLTE applies the LTE predicate on the "justification" field.
func JustificationLTE(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldLTE(FieldJustification, v))
}

// JustificationContains applies the Contains predicate on the "justification" field.
func JustificationContains(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldContains(FieldJustification, v))
}

// JustificationHasPrefix applies the HasPrefix predicate on the "justification" field.
func JustificationHasPrefix(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldHasPrefix(FieldJustification, v))
}

// JustificationHasSuffix applies the HasSuffix predicate on the "justification" field.
func JustificationHasSuffix(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldHasSuffix(FieldJustification, v))
}

// JustificationEqualFold applies the EqualFold predicate on the "justification" field.
func JustificationEqualFold(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEqualFold(FieldJustification, v))
}

// JustificationContainsFold applies the ContainsFold predicate on the "justification" field.
func JustificationContainsFold(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldContainsFold(FieldJustification, v))
}

// OriginEQ applies the EQ predicate on the "origin" field.
func OriginEQ(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldOrigin, v))
}

// OriginNEQ applies the NEQ predicate on the "origin" field.
func OriginNEQ(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNEQ(FieldOrigin, v))
}

// OriginIn applies the In predicate on the "origin" field.
func OriginIn(vs ...string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldIn(FieldOrigin, vs...))
}

// OriginNotIn applies the NotIn predicate on the "origin" field.
func OriginNotIn(vs ...string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNotIn(FieldOrigin, vs...))
}

// OriginGT applies the GT predicate on the "origin" field.
func OriginGT(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldGT(FieldOrigin, v))
}

// OriginGTE applies the GTE predicate on the "origin" field.
func OriginGTE(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldGTE(FieldOrigin, v))
}

// OriginLT applies the LT predicate on the "origin" field.
func OriginLT(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldLT(FieldOrigin, v))
}

// OriginLTE applies the LTE predicate on the "origin" field.
func OriginLTE(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldLTE(FieldOrigin, v))
}

// OriginContains applies the Contains predicate on the "origin" field.
func OriginContains(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldContains(FieldOrigin, v))
}

// OriginHasPrefix applies the HasPrefix predicate on the "origin" field.
func OriginHasPrefix(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldHasPrefix(FieldOrigin, v))
}

// OriginHasSuffix applies the HasSuffix predicate on the "origin" field.
func OriginHasSuffix(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldHasSuffix(FieldOrigin, v))
}

// OriginEqualFold applies the EqualFold predicate on the "origin" field.
func OriginEqualFold(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEqualFold(FieldOrigin, v))
}

// OriginContainsFold applies the ContainsFold predicate on the "origin" field.
func OriginContainsFold(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldContainsFold(FieldOrigin, v))
}

// CollectorEQ applies the EQ predicate on the "collector" field.
func CollectorEQ(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEQ(FieldCollector, v))
}

// CollectorNEQ applies the NEQ predicate on the "collector" field.
func CollectorNEQ(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNEQ(FieldCollector, v))
}

// CollectorIn applies the In predicate on the "collector" field.
func CollectorIn(vs ...string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldIn(FieldCollector, vs...))
}

// CollectorNotIn applies the NotIn predicate on the "collector" field.
func CollectorNotIn(vs ...string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldNotIn(FieldCollector, vs...))
}

// CollectorGT applies the GT predicate on the "collector" field.
func CollectorGT(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldGT(FieldCollector, v))
}

// CollectorGTE applies the GTE predicate on the "collector" field.
func CollectorGTE(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldGTE(FieldCollector, v))
}

// CollectorLT applies the LT predicate on the "collector" field.
func CollectorLT(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldLT(FieldCollector, v))
}

// CollectorLTE applies the LTE predicate on the "collector" field.
func CollectorLTE(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldLTE(FieldCollector, v))
}

// CollectorContains applies the Contains predicate on the "collector" field.
func CollectorContains(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldContains(FieldCollector, v))
}

// CollectorHasPrefix applies the HasPrefix predicate on the "collector" field.
func CollectorHasPrefix(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldHasPrefix(FieldCollector, v))
}

// CollectorHasSuffix applies the HasSuffix predicate on the "collector" field.
func CollectorHasSuffix(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldHasSuffix(FieldCollector, v))
}

// CollectorEqualFold applies the EqualFold predicate on the "collector" field.
func CollectorEqualFold(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldEqualFold(FieldCollector, v))
}

// CollectorContainsFold applies the ContainsFold predicate on the "collector" field.
func CollectorContainsFold(v string) predicate.IsOccurrence {
	return predicate.IsOccurrence(sql.FieldContainsFold(FieldCollector, v))
}

// HasPackageVersion applies the HasEdge predicate on the "package_version" edge.
func HasPackageVersion() predicate.IsOccurrence {
	return predicate.IsOccurrence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PackageVersionTable, PackageVersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageVersionWith applies the HasEdge predicate on the "package_version" edge with a given conditions (other predicates).
func HasPackageVersionWith(preds ...predicate.PackageVersion) predicate.IsOccurrence {
	return predicate.IsOccurrence(func(s *sql.Selector) {
		step := newPackageVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSource applies the HasEdge predicate on the "source" edge.
func HasSource() predicate.IsOccurrence {
	return predicate.IsOccurrence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceWith applies the HasEdge predicate on the "source" edge with a given conditions (other predicates).
func HasSourceWith(preds ...predicate.SourceName) predicate.IsOccurrence {
	return predicate.IsOccurrence(func(s *sql.Selector) {
		step := newSourceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArtifact applies the HasEdge predicate on the "artifact" edge.
func HasArtifact() predicate.IsOccurrence {
	return predicate.IsOccurrence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ArtifactTable, ArtifactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtifactWith applies the HasEdge predicate on the "artifact" edge with a given conditions (other predicates).
func HasArtifactWith(preds ...predicate.Artifact) predicate.IsOccurrence {
	return predicate.IsOccurrence(func(s *sql.Selector) {
		step := newArtifactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IsOccurrence) predicate.IsOccurrence {
	return predicate.IsOccurrence(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IsOccurrence) predicate.IsOccurrence {
	return predicate.IsOccurrence(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IsOccurrence) predicate.IsOccurrence {
	return predicate.IsOccurrence(func(s *sql.Selector) {
		p(s.Not())
	})
}

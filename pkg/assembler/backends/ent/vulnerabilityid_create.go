// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvuln"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitymetadata"
)

// VulnerabilityIDCreate is the builder for creating a VulnerabilityID entity.
type VulnerabilityIDCreate struct {
	config
	mutation *VulnerabilityIDMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (vic *VulnerabilityIDCreate) SetVulnerabilityID(s string) *VulnerabilityIDCreate {
	vic.mutation.SetVulnerabilityID(s)
	return vic
}

// SetType sets the "type" field.
func (vic *VulnerabilityIDCreate) SetType(s string) *VulnerabilityIDCreate {
	vic.mutation.SetType(s)
	return vic
}

// SetID sets the "id" field.
func (vic *VulnerabilityIDCreate) SetID(u uuid.UUID) *VulnerabilityIDCreate {
	vic.mutation.SetID(u)
	return vic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vic *VulnerabilityIDCreate) SetNillableID(u *uuid.UUID) *VulnerabilityIDCreate {
	if u != nil {
		vic.SetID(*u)
	}
	return vic
}

// AddVulnEqualVulnAIDs adds the "vuln_equal_vuln_a" edge to the VulnEqual entity by IDs.
func (vic *VulnerabilityIDCreate) AddVulnEqualVulnAIDs(ids ...uuid.UUID) *VulnerabilityIDCreate {
	vic.mutation.AddVulnEqualVulnAIDs(ids...)
	return vic
}

// AddVulnEqualVulnA adds the "vuln_equal_vuln_a" edges to the VulnEqual entity.
func (vic *VulnerabilityIDCreate) AddVulnEqualVulnA(v ...*VulnEqual) *VulnerabilityIDCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vic.AddVulnEqualVulnAIDs(ids...)
}

// AddVulnEqualVulnBIDs adds the "vuln_equal_vuln_b" edge to the VulnEqual entity by IDs.
func (vic *VulnerabilityIDCreate) AddVulnEqualVulnBIDs(ids ...uuid.UUID) *VulnerabilityIDCreate {
	vic.mutation.AddVulnEqualVulnBIDs(ids...)
	return vic
}

// AddVulnEqualVulnB adds the "vuln_equal_vuln_b" edges to the VulnEqual entity.
func (vic *VulnerabilityIDCreate) AddVulnEqualVulnB(v ...*VulnEqual) *VulnerabilityIDCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vic.AddVulnEqualVulnBIDs(ids...)
}

// AddMetadatumIDs adds the "metadata" edge to the VulnerabilityMetadata entity by IDs.
func (vic *VulnerabilityIDCreate) AddMetadatumIDs(ids ...uuid.UUID) *VulnerabilityIDCreate {
	vic.mutation.AddMetadatumIDs(ids...)
	return vic
}

// AddMetadata adds the "metadata" edges to the VulnerabilityMetadata entity.
func (vic *VulnerabilityIDCreate) AddMetadata(v ...*VulnerabilityMetadata) *VulnerabilityIDCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vic.AddMetadatumIDs(ids...)
}

// AddCertifyVulnIDs adds the "certify_vuln" edge to the CertifyVuln entity by IDs.
func (vic *VulnerabilityIDCreate) AddCertifyVulnIDs(ids ...uuid.UUID) *VulnerabilityIDCreate {
	vic.mutation.AddCertifyVulnIDs(ids...)
	return vic
}

// AddCertifyVuln adds the "certify_vuln" edges to the CertifyVuln entity.
func (vic *VulnerabilityIDCreate) AddCertifyVuln(c ...*CertifyVuln) *VulnerabilityIDCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vic.AddCertifyVulnIDs(ids...)
}

// AddVexIDs adds the "vex" edge to the CertifyVex entity by IDs.
func (vic *VulnerabilityIDCreate) AddVexIDs(ids ...uuid.UUID) *VulnerabilityIDCreate {
	vic.mutation.AddVexIDs(ids...)
	return vic
}

// AddVex adds the "vex" edges to the CertifyVex entity.
func (vic *VulnerabilityIDCreate) AddVex(c ...*CertifyVex) *VulnerabilityIDCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vic.AddVexIDs(ids...)
}

// Mutation returns the VulnerabilityIDMutation object of the builder.
func (vic *VulnerabilityIDCreate) Mutation() *VulnerabilityIDMutation {
	return vic.mutation
}

// Save creates the VulnerabilityID in the database.
func (vic *VulnerabilityIDCreate) Save(ctx context.Context) (*VulnerabilityID, error) {
	vic.defaults()
	return withHooks(ctx, vic.sqlSave, vic.mutation, vic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vic *VulnerabilityIDCreate) SaveX(ctx context.Context) *VulnerabilityID {
	v, err := vic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vic *VulnerabilityIDCreate) Exec(ctx context.Context) error {
	_, err := vic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vic *VulnerabilityIDCreate) ExecX(ctx context.Context) {
	if err := vic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vic *VulnerabilityIDCreate) defaults() {
	if _, ok := vic.mutation.ID(); !ok {
		v := vulnerabilityid.DefaultID()
		vic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vic *VulnerabilityIDCreate) check() error {
	if _, ok := vic.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability_id", err: errors.New(`ent: missing required field "VulnerabilityID.vulnerability_id"`)}
	}
	if _, ok := vic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "VulnerabilityID.type"`)}
	}
	if v, ok := vic.mutation.GetType(); ok {
		if err := vulnerabilityid.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "VulnerabilityID.type": %w`, err)}
		}
	}
	return nil
}

func (vic *VulnerabilityIDCreate) sqlSave(ctx context.Context) (*VulnerabilityID, error) {
	if err := vic.check(); err != nil {
		return nil, err
	}
	_node, _spec := vic.createSpec()
	if err := sqlgraph.CreateNode(ctx, vic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vic.mutation.id = &_node.ID
	vic.mutation.done = true
	return _node, nil
}

func (vic *VulnerabilityIDCreate) createSpec() (*VulnerabilityID, *sqlgraph.CreateSpec) {
	var (
		_node = &VulnerabilityID{config: vic.config}
		_spec = sqlgraph.NewCreateSpec(vulnerabilityid.Table, sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = vic.conflict
	if id, ok := vic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vic.mutation.VulnerabilityID(); ok {
		_spec.SetField(vulnerabilityid.FieldVulnerabilityID, field.TypeString, value)
		_node.VulnerabilityID = value
	}
	if value, ok := vic.mutation.GetType(); ok {
		_spec.SetField(vulnerabilityid.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := vic.mutation.VulnEqualVulnAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnATable,
			Columns: []string{vulnerabilityid.VulnEqualVulnAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vic.mutation.VulnEqualVulnBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnBTable,
			Columns: []string{vulnerabilityid.VulnEqualVulnBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vic.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.MetadataTable,
			Columns: []string{vulnerabilityid.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vic.mutation.CertifyVulnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.CertifyVulnTable,
			Columns: []string{vulnerabilityid.CertifyVulnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvuln.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vic.mutation.VexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VexTable,
			Columns: []string{vulnerabilityid.VexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VulnerabilityID.Create().
//		SetVulnerabilityID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityIDUpsert) {
//			SetVulnerabilityID(v+v).
//		}).
//		Exec(ctx)
func (vic *VulnerabilityIDCreate) OnConflict(opts ...sql.ConflictOption) *VulnerabilityIDUpsertOne {
	vic.conflict = opts
	return &VulnerabilityIDUpsertOne{
		create: vic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VulnerabilityID.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vic *VulnerabilityIDCreate) OnConflictColumns(columns ...string) *VulnerabilityIDUpsertOne {
	vic.conflict = append(vic.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityIDUpsertOne{
		create: vic,
	}
}

type (
	// VulnerabilityIDUpsertOne is the builder for "upsert"-ing
	//  one VulnerabilityID node.
	VulnerabilityIDUpsertOne struct {
		create *VulnerabilityIDCreate
	}

	// VulnerabilityIDUpsert is the "OnConflict" setter.
	VulnerabilityIDUpsert struct {
		*sql.UpdateSet
	}
)

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *VulnerabilityIDUpsert) SetVulnerabilityID(v string) *VulnerabilityIDUpsert {
	u.Set(vulnerabilityid.FieldVulnerabilityID, v)
	return u
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *VulnerabilityIDUpsert) UpdateVulnerabilityID() *VulnerabilityIDUpsert {
	u.SetExcluded(vulnerabilityid.FieldVulnerabilityID)
	return u
}

// SetType sets the "type" field.
func (u *VulnerabilityIDUpsert) SetType(v string) *VulnerabilityIDUpsert {
	u.Set(vulnerabilityid.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VulnerabilityIDUpsert) UpdateType() *VulnerabilityIDUpsert {
	u.SetExcluded(vulnerabilityid.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.VulnerabilityID.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vulnerabilityid.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VulnerabilityIDUpsertOne) UpdateNewValues() *VulnerabilityIDUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(vulnerabilityid.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VulnerabilityID.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VulnerabilityIDUpsertOne) Ignore() *VulnerabilityIDUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityIDUpsertOne) DoNothing() *VulnerabilityIDUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityIDCreate.OnConflict
// documentation for more info.
func (u *VulnerabilityIDUpsertOne) Update(set func(*VulnerabilityIDUpsert)) *VulnerabilityIDUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityIDUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *VulnerabilityIDUpsertOne) SetVulnerabilityID(v string) *VulnerabilityIDUpsertOne {
	return u.Update(func(s *VulnerabilityIDUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *VulnerabilityIDUpsertOne) UpdateVulnerabilityID() *VulnerabilityIDUpsertOne {
	return u.Update(func(s *VulnerabilityIDUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// SetType sets the "type" field.
func (u *VulnerabilityIDUpsertOne) SetType(v string) *VulnerabilityIDUpsertOne {
	return u.Update(func(s *VulnerabilityIDUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VulnerabilityIDUpsertOne) UpdateType() *VulnerabilityIDUpsertOne {
	return u.Update(func(s *VulnerabilityIDUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *VulnerabilityIDUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityIDCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityIDUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VulnerabilityIDUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: VulnerabilityIDUpsertOne.ID is not supported by MySQL driver. Use VulnerabilityIDUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VulnerabilityIDUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VulnerabilityIDCreateBulk is the builder for creating many VulnerabilityID entities in bulk.
type VulnerabilityIDCreateBulk struct {
	config
	err      error
	builders []*VulnerabilityIDCreate
	conflict []sql.ConflictOption
}

// Save creates the VulnerabilityID entities in the database.
func (vicb *VulnerabilityIDCreateBulk) Save(ctx context.Context) ([]*VulnerabilityID, error) {
	if vicb.err != nil {
		return nil, vicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vicb.builders))
	nodes := make([]*VulnerabilityID, len(vicb.builders))
	mutators := make([]Mutator, len(vicb.builders))
	for i := range vicb.builders {
		func(i int, root context.Context) {
			builder := vicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VulnerabilityIDMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vicb *VulnerabilityIDCreateBulk) SaveX(ctx context.Context) []*VulnerabilityID {
	v, err := vicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vicb *VulnerabilityIDCreateBulk) Exec(ctx context.Context) error {
	_, err := vicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vicb *VulnerabilityIDCreateBulk) ExecX(ctx context.Context) {
	if err := vicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VulnerabilityID.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityIDUpsert) {
//			SetVulnerabilityID(v+v).
//		}).
//		Exec(ctx)
func (vicb *VulnerabilityIDCreateBulk) OnConflict(opts ...sql.ConflictOption) *VulnerabilityIDUpsertBulk {
	vicb.conflict = opts
	return &VulnerabilityIDUpsertBulk{
		create: vicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VulnerabilityID.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vicb *VulnerabilityIDCreateBulk) OnConflictColumns(columns ...string) *VulnerabilityIDUpsertBulk {
	vicb.conflict = append(vicb.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityIDUpsertBulk{
		create: vicb,
	}
}

// VulnerabilityIDUpsertBulk is the builder for "upsert"-ing
// a bulk of VulnerabilityID nodes.
type VulnerabilityIDUpsertBulk struct {
	create *VulnerabilityIDCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VulnerabilityID.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vulnerabilityid.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VulnerabilityIDUpsertBulk) UpdateNewValues() *VulnerabilityIDUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(vulnerabilityid.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VulnerabilityID.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VulnerabilityIDUpsertBulk) Ignore() *VulnerabilityIDUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityIDUpsertBulk) DoNothing() *VulnerabilityIDUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityIDCreateBulk.OnConflict
// documentation for more info.
func (u *VulnerabilityIDUpsertBulk) Update(set func(*VulnerabilityIDUpsert)) *VulnerabilityIDUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityIDUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *VulnerabilityIDUpsertBulk) SetVulnerabilityID(v string) *VulnerabilityIDUpsertBulk {
	return u.Update(func(s *VulnerabilityIDUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *VulnerabilityIDUpsertBulk) UpdateVulnerabilityID() *VulnerabilityIDUpsertBulk {
	return u.Update(func(s *VulnerabilityIDUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// SetType sets the "type" field.
func (u *VulnerabilityIDUpsertBulk) SetType(v string) *VulnerabilityIDUpsertBulk {
	return u.Update(func(s *VulnerabilityIDUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VulnerabilityIDUpsertBulk) UpdateType() *VulnerabilityIDUpsertBulk {
	return u.Update(func(s *VulnerabilityIDUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *VulnerabilityIDUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VulnerabilityIDCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityIDCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityIDUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

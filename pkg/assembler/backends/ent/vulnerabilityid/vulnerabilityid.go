// Code generated by ent, DO NOT EDIT.

package vulnerabilityid

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the vulnerabilityid type in the database.
	Label = "vulnerability_id"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVulnerabilityID holds the string denoting the vulnerability_id field in the database.
	FieldVulnerabilityID = "vulnerability_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeVulnEqualVulnA holds the string denoting the vuln_equal_vuln_a edge name in mutations.
	EdgeVulnEqualVulnA = "vuln_equal_vuln_a"
	// EdgeVulnEqualVulnB holds the string denoting the vuln_equal_vuln_b edge name in mutations.
	EdgeVulnEqualVulnB = "vuln_equal_vuln_b"
	// EdgeVulnerabilityMetadata holds the string denoting the vulnerability_metadata edge name in mutations.
	EdgeVulnerabilityMetadata = "vulnerability_metadata"
	// Table holds the table name of the vulnerabilityid in the database.
	Table = "vulnerability_ids"
	// VulnEqualVulnATable is the table that holds the vuln_equal_vuln_a relation/edge.
	VulnEqualVulnATable = "vuln_equals"
	// VulnEqualVulnAInverseTable is the table name for the VulnEqual entity.
	// It exists in this package in order to avoid circular dependency with the "vulnequal" package.
	VulnEqualVulnAInverseTable = "vuln_equals"
	// VulnEqualVulnAColumn is the table column denoting the vuln_equal_vuln_a relation/edge.
	VulnEqualVulnAColumn = "vuln_id"
	// VulnEqualVulnBTable is the table that holds the vuln_equal_vuln_b relation/edge.
	VulnEqualVulnBTable = "vuln_equals"
	// VulnEqualVulnBInverseTable is the table name for the VulnEqual entity.
	// It exists in this package in order to avoid circular dependency with the "vulnequal" package.
	VulnEqualVulnBInverseTable = "vuln_equals"
	// VulnEqualVulnBColumn is the table column denoting the vuln_equal_vuln_b relation/edge.
	VulnEqualVulnBColumn = "equal_vuln_id"
	// VulnerabilityMetadataTable is the table that holds the vulnerability_metadata relation/edge.
	VulnerabilityMetadataTable = "vulnerability_metadata"
	// VulnerabilityMetadataInverseTable is the table name for the VulnerabilityMetadata entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilitymetadata" package.
	VulnerabilityMetadataInverseTable = "vulnerability_metadata"
	// VulnerabilityMetadataColumn is the table column denoting the vulnerability_metadata relation/edge.
	VulnerabilityMetadataColumn = "vulnerability_id_id"
)

// Columns holds all SQL columns for vulnerabilityid fields.
var Columns = []string{
	FieldID,
	FieldVulnerabilityID,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the VulnerabilityID queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVulnerabilityID orders the results by the vulnerability_id field.
func ByVulnerabilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVulnerabilityID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVulnEqualVulnACount orders the results by vuln_equal_vuln_a count.
func ByVulnEqualVulnACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVulnEqualVulnAStep(), opts...)
	}
}

// ByVulnEqualVulnA orders the results by vuln_equal_vuln_a terms.
func ByVulnEqualVulnA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnEqualVulnAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVulnEqualVulnBCount orders the results by vuln_equal_vuln_b count.
func ByVulnEqualVulnBCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVulnEqualVulnBStep(), opts...)
	}
}

// ByVulnEqualVulnB orders the results by vuln_equal_vuln_b terms.
func ByVulnEqualVulnB(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnEqualVulnBStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVulnerabilityMetadataCount orders the results by vulnerability_metadata count.
func ByVulnerabilityMetadataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVulnerabilityMetadataStep(), opts...)
	}
}

// ByVulnerabilityMetadata orders the results by vulnerability_metadata terms.
func ByVulnerabilityMetadata(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnerabilityMetadataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVulnEqualVulnAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnEqualVulnAInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, VulnEqualVulnATable, VulnEqualVulnAColumn),
	)
}
func newVulnEqualVulnBStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnEqualVulnBInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, VulnEqualVulnBTable, VulnEqualVulnBColumn),
	)
}
func newVulnerabilityMetadataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnerabilityMetadataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, VulnerabilityMetadataTable, VulnerabilityMetadataColumn),
	)
}

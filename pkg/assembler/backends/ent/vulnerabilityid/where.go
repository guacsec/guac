// Code generated by ent, DO NOT EDIT.

package vulnerabilityid

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldLTE(FieldID, id))
}

// VulnerabilityID applies equality check predicate on the "vulnerability_id" field. It's identical to VulnerabilityIDEQ.
func VulnerabilityID(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldEQ(FieldVulnerabilityID, v))
}

// TypeID applies equality check predicate on the "type_id" field. It's identical to TypeIDEQ.
func TypeID(v int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldEQ(FieldTypeID, v))
}

// VulnerabilityIDEQ applies the EQ predicate on the "vulnerability_id" field.
func VulnerabilityIDEQ(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldEQ(FieldVulnerabilityID, v))
}

// VulnerabilityIDNEQ applies the NEQ predicate on the "vulnerability_id" field.
func VulnerabilityIDNEQ(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldNEQ(FieldVulnerabilityID, v))
}

// VulnerabilityIDIn applies the In predicate on the "vulnerability_id" field.
func VulnerabilityIDIn(vs ...string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldIn(FieldVulnerabilityID, vs...))
}

// VulnerabilityIDNotIn applies the NotIn predicate on the "vulnerability_id" field.
func VulnerabilityIDNotIn(vs ...string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldNotIn(FieldVulnerabilityID, vs...))
}

// VulnerabilityIDGT applies the GT predicate on the "vulnerability_id" field.
func VulnerabilityIDGT(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldGT(FieldVulnerabilityID, v))
}

// VulnerabilityIDGTE applies the GTE predicate on the "vulnerability_id" field.
func VulnerabilityIDGTE(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldGTE(FieldVulnerabilityID, v))
}

// VulnerabilityIDLT applies the LT predicate on the "vulnerability_id" field.
func VulnerabilityIDLT(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldLT(FieldVulnerabilityID, v))
}

// VulnerabilityIDLTE applies the LTE predicate on the "vulnerability_id" field.
func VulnerabilityIDLTE(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldLTE(FieldVulnerabilityID, v))
}

// VulnerabilityIDContains applies the Contains predicate on the "vulnerability_id" field.
func VulnerabilityIDContains(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldContains(FieldVulnerabilityID, v))
}

// VulnerabilityIDHasPrefix applies the HasPrefix predicate on the "vulnerability_id" field.
func VulnerabilityIDHasPrefix(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldHasPrefix(FieldVulnerabilityID, v))
}

// VulnerabilityIDHasSuffix applies the HasSuffix predicate on the "vulnerability_id" field.
func VulnerabilityIDHasSuffix(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldHasSuffix(FieldVulnerabilityID, v))
}

// VulnerabilityIDEqualFold applies the EqualFold predicate on the "vulnerability_id" field.
func VulnerabilityIDEqualFold(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldEqualFold(FieldVulnerabilityID, v))
}

// VulnerabilityIDContainsFold applies the ContainsFold predicate on the "vulnerability_id" field.
func VulnerabilityIDContainsFold(v string) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldContainsFold(FieldVulnerabilityID, v))
}

// TypeIDEQ applies the EQ predicate on the "type_id" field.
func TypeIDEQ(v int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldEQ(FieldTypeID, v))
}

// TypeIDNEQ applies the NEQ predicate on the "type_id" field.
func TypeIDNEQ(v int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldNEQ(FieldTypeID, v))
}

// TypeIDIn applies the In predicate on the "type_id" field.
func TypeIDIn(vs ...int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldIn(FieldTypeID, vs...))
}

// TypeIDNotIn applies the NotIn predicate on the "type_id" field.
func TypeIDNotIn(vs ...int) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.FieldNotIn(FieldTypeID, vs...))
}

// HasType applies the HasEdge predicate on the "type" edge.
func HasType() predicate.VulnerabilityID {
	return predicate.VulnerabilityID(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TypeTable, TypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTypeWith applies the HasEdge predicate on the "type" edge with a given conditions (other predicates).
func HasTypeWith(preds ...predicate.VulnerabilityType) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(func(s *sql.Selector) {
		step := newTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVulnEquals applies the HasEdge predicate on the "vuln_equals" edge.
func HasVulnEquals() predicate.VulnerabilityID {
	return predicate.VulnerabilityID(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, VulnEqualsTable, VulnEqualsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVulnEqualsWith applies the HasEdge predicate on the "vuln_equals" edge with a given conditions (other predicates).
func HasVulnEqualsWith(preds ...predicate.VulnEqual) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(func(s *sql.Selector) {
		step := newVulnEqualsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVulnerabilityMetadata applies the HasEdge predicate on the "vulnerability_metadata" edge.
func HasVulnerabilityMetadata() predicate.VulnerabilityID {
	return predicate.VulnerabilityID(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, VulnerabilityMetadataTable, VulnerabilityMetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVulnerabilityMetadataWith applies the HasEdge predicate on the "vulnerability_metadata" edge with a given conditions (other predicates).
func HasVulnerabilityMetadataWith(preds ...predicate.VulnerabilityMetadata) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(func(s *sql.Selector) {
		step := newVulnerabilityMetadataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VulnerabilityID) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VulnerabilityID) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VulnerabilityID) predicate.VulnerabilityID {
	return predicate.VulnerabilityID(sql.NotPredicates(p))
}

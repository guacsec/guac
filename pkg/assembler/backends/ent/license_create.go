// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifylegal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/license"
)

// LicenseCreate is the builder for creating a License entity.
type LicenseCreate struct {
	config
	mutation *LicenseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (lc *LicenseCreate) SetName(s string) *LicenseCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetInline sets the "inline" field.
func (lc *LicenseCreate) SetInline(s string) *LicenseCreate {
	lc.mutation.SetInline(s)
	return lc
}

// SetNillableInline sets the "inline" field if the given value is not nil.
func (lc *LicenseCreate) SetNillableInline(s *string) *LicenseCreate {
	if s != nil {
		lc.SetInline(*s)
	}
	return lc
}

// SetListVersion sets the "list_version" field.
func (lc *LicenseCreate) SetListVersion(s string) *LicenseCreate {
	lc.mutation.SetListVersion(s)
	return lc
}

// SetNillableListVersion sets the "list_version" field if the given value is not nil.
func (lc *LicenseCreate) SetNillableListVersion(s *string) *LicenseCreate {
	if s != nil {
		lc.SetListVersion(*s)
	}
	return lc
}

// AddDeclaredInCertifyLegalIDs adds the "declared_in_certify_legals" edge to the CertifyLegal entity by IDs.
func (lc *LicenseCreate) AddDeclaredInCertifyLegalIDs(ids ...int) *LicenseCreate {
	lc.mutation.AddDeclaredInCertifyLegalIDs(ids...)
	return lc
}

// AddDeclaredInCertifyLegals adds the "declared_in_certify_legals" edges to the CertifyLegal entity.
func (lc *LicenseCreate) AddDeclaredInCertifyLegals(c ...*CertifyLegal) *LicenseCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lc.AddDeclaredInCertifyLegalIDs(ids...)
}

// AddDiscoveredInCertifyLegalIDs adds the "discovered_in_certify_legals" edge to the CertifyLegal entity by IDs.
func (lc *LicenseCreate) AddDiscoveredInCertifyLegalIDs(ids ...int) *LicenseCreate {
	lc.mutation.AddDiscoveredInCertifyLegalIDs(ids...)
	return lc
}

// AddDiscoveredInCertifyLegals adds the "discovered_in_certify_legals" edges to the CertifyLegal entity.
func (lc *LicenseCreate) AddDiscoveredInCertifyLegals(c ...*CertifyLegal) *LicenseCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lc.AddDiscoveredInCertifyLegalIDs(ids...)
}

// Mutation returns the LicenseMutation object of the builder.
func (lc *LicenseCreate) Mutation() *LicenseMutation {
	return lc.mutation
}

// Save creates the License in the database.
func (lc *LicenseCreate) Save(ctx context.Context) (*License, error) {
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LicenseCreate) SaveX(ctx context.Context) *License {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LicenseCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LicenseCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LicenseCreate) check() error {
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "License.name"`)}
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := license.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "License.name": %w`, err)}
		}
	}
	return nil
}

func (lc *LicenseCreate) sqlSave(ctx context.Context) (*License, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LicenseCreate) createSpec() (*License, *sqlgraph.CreateSpec) {
	var (
		_node = &License{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(license.Table, sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt))
	)
	_spec.OnConflict = lc.conflict
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(license.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.Inline(); ok {
		_spec.SetField(license.FieldInline, field.TypeString, value)
		_node.Inline = &value
	}
	if value, ok := lc.mutation.ListVersion(); ok {
		_spec.SetField(license.FieldListVersion, field.TypeString, value)
		_node.ListVersion = &value
	}
	if nodes := lc.mutation.DeclaredInCertifyLegalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   license.DeclaredInCertifyLegalsTable,
			Columns: license.DeclaredInCertifyLegalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.DiscoveredInCertifyLegalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   license.DiscoveredInCertifyLegalsTable,
			Columns: license.DiscoveredInCertifyLegalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.License.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LicenseUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (lc *LicenseCreate) OnConflict(opts ...sql.ConflictOption) *LicenseUpsertOne {
	lc.conflict = opts
	return &LicenseUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.License.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LicenseCreate) OnConflictColumns(columns ...string) *LicenseUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LicenseUpsertOne{
		create: lc,
	}
}

type (
	// LicenseUpsertOne is the builder for "upsert"-ing
	//  one License node.
	LicenseUpsertOne struct {
		create *LicenseCreate
	}

	// LicenseUpsert is the "OnConflict" setter.
	LicenseUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *LicenseUpsert) SetName(v string) *LicenseUpsert {
	u.Set(license.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LicenseUpsert) UpdateName() *LicenseUpsert {
	u.SetExcluded(license.FieldName)
	return u
}

// SetInline sets the "inline" field.
func (u *LicenseUpsert) SetInline(v string) *LicenseUpsert {
	u.Set(license.FieldInline, v)
	return u
}

// UpdateInline sets the "inline" field to the value that was provided on create.
func (u *LicenseUpsert) UpdateInline() *LicenseUpsert {
	u.SetExcluded(license.FieldInline)
	return u
}

// ClearInline clears the value of the "inline" field.
func (u *LicenseUpsert) ClearInline() *LicenseUpsert {
	u.SetNull(license.FieldInline)
	return u
}

// SetListVersion sets the "list_version" field.
func (u *LicenseUpsert) SetListVersion(v string) *LicenseUpsert {
	u.Set(license.FieldListVersion, v)
	return u
}

// UpdateListVersion sets the "list_version" field to the value that was provided on create.
func (u *LicenseUpsert) UpdateListVersion() *LicenseUpsert {
	u.SetExcluded(license.FieldListVersion)
	return u
}

// ClearListVersion clears the value of the "list_version" field.
func (u *LicenseUpsert) ClearListVersion() *LicenseUpsert {
	u.SetNull(license.FieldListVersion)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.License.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LicenseUpsertOne) UpdateNewValues() *LicenseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.License.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LicenseUpsertOne) Ignore() *LicenseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LicenseUpsertOne) DoNothing() *LicenseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LicenseCreate.OnConflict
// documentation for more info.
func (u *LicenseUpsertOne) Update(set func(*LicenseUpsert)) *LicenseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LicenseUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *LicenseUpsertOne) SetName(v string) *LicenseUpsertOne {
	return u.Update(func(s *LicenseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LicenseUpsertOne) UpdateName() *LicenseUpsertOne {
	return u.Update(func(s *LicenseUpsert) {
		s.UpdateName()
	})
}

// SetInline sets the "inline" field.
func (u *LicenseUpsertOne) SetInline(v string) *LicenseUpsertOne {
	return u.Update(func(s *LicenseUpsert) {
		s.SetInline(v)
	})
}

// UpdateInline sets the "inline" field to the value that was provided on create.
func (u *LicenseUpsertOne) UpdateInline() *LicenseUpsertOne {
	return u.Update(func(s *LicenseUpsert) {
		s.UpdateInline()
	})
}

// ClearInline clears the value of the "inline" field.
func (u *LicenseUpsertOne) ClearInline() *LicenseUpsertOne {
	return u.Update(func(s *LicenseUpsert) {
		s.ClearInline()
	})
}

// SetListVersion sets the "list_version" field.
func (u *LicenseUpsertOne) SetListVersion(v string) *LicenseUpsertOne {
	return u.Update(func(s *LicenseUpsert) {
		s.SetListVersion(v)
	})
}

// UpdateListVersion sets the "list_version" field to the value that was provided on create.
func (u *LicenseUpsertOne) UpdateListVersion() *LicenseUpsertOne {
	return u.Update(func(s *LicenseUpsert) {
		s.UpdateListVersion()
	})
}

// ClearListVersion clears the value of the "list_version" field.
func (u *LicenseUpsertOne) ClearListVersion() *LicenseUpsertOne {
	return u.Update(func(s *LicenseUpsert) {
		s.ClearListVersion()
	})
}

// Exec executes the query.
func (u *LicenseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LicenseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LicenseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LicenseUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LicenseUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LicenseCreateBulk is the builder for creating many License entities in bulk.
type LicenseCreateBulk struct {
	config
	err      error
	builders []*LicenseCreate
	conflict []sql.ConflictOption
}

// Save creates the License entities in the database.
func (lcb *LicenseCreateBulk) Save(ctx context.Context) ([]*License, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*License, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LicenseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LicenseCreateBulk) SaveX(ctx context.Context) []*License {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LicenseCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LicenseCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.License.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LicenseUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (lcb *LicenseCreateBulk) OnConflict(opts ...sql.ConflictOption) *LicenseUpsertBulk {
	lcb.conflict = opts
	return &LicenseUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.License.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LicenseCreateBulk) OnConflictColumns(columns ...string) *LicenseUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LicenseUpsertBulk{
		create: lcb,
	}
}

// LicenseUpsertBulk is the builder for "upsert"-ing
// a bulk of License nodes.
type LicenseUpsertBulk struct {
	create *LicenseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.License.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LicenseUpsertBulk) UpdateNewValues() *LicenseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.License.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LicenseUpsertBulk) Ignore() *LicenseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LicenseUpsertBulk) DoNothing() *LicenseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LicenseCreateBulk.OnConflict
// documentation for more info.
func (u *LicenseUpsertBulk) Update(set func(*LicenseUpsert)) *LicenseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LicenseUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *LicenseUpsertBulk) SetName(v string) *LicenseUpsertBulk {
	return u.Update(func(s *LicenseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LicenseUpsertBulk) UpdateName() *LicenseUpsertBulk {
	return u.Update(func(s *LicenseUpsert) {
		s.UpdateName()
	})
}

// SetInline sets the "inline" field.
func (u *LicenseUpsertBulk) SetInline(v string) *LicenseUpsertBulk {
	return u.Update(func(s *LicenseUpsert) {
		s.SetInline(v)
	})
}

// UpdateInline sets the "inline" field to the value that was provided on create.
func (u *LicenseUpsertBulk) UpdateInline() *LicenseUpsertBulk {
	return u.Update(func(s *LicenseUpsert) {
		s.UpdateInline()
	})
}

// ClearInline clears the value of the "inline" field.
func (u *LicenseUpsertBulk) ClearInline() *LicenseUpsertBulk {
	return u.Update(func(s *LicenseUpsert) {
		s.ClearInline()
	})
}

// SetListVersion sets the "list_version" field.
func (u *LicenseUpsertBulk) SetListVersion(v string) *LicenseUpsertBulk {
	return u.Update(func(s *LicenseUpsert) {
		s.SetListVersion(v)
	})
}

// UpdateListVersion sets the "list_version" field to the value that was provided on create.
func (u *LicenseUpsertBulk) UpdateListVersion() *LicenseUpsertBulk {
	return u.Update(func(s *LicenseUpsert) {
		s.UpdateListVersion()
	})
}

// ClearListVersion clears the value of the "list_version" field.
func (u *LicenseUpsertBulk) ClearListVersion() *LicenseUpsertBulk {
	return u.Update(func(s *LicenseUpsert) {
		s.ClearListVersion()
	})
}

// Exec executes the query.
func (u *LicenseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LicenseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LicenseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LicenseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

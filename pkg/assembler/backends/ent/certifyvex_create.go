// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
)

// CertifyVexCreate is the builder for creating a CertifyVex entity.
type CertifyVexCreate struct {
	config
	mutation *CertifyVexMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPackageID sets the "package_id" field.
func (cvc *CertifyVexCreate) SetPackageID(i int) *CertifyVexCreate {
	cvc.mutation.SetPackageID(i)
	return cvc
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (cvc *CertifyVexCreate) SetNillablePackageID(i *int) *CertifyVexCreate {
	if i != nil {
		cvc.SetPackageID(*i)
	}
	return cvc
}

// SetArtifactID sets the "artifact_id" field.
func (cvc *CertifyVexCreate) SetArtifactID(i int) *CertifyVexCreate {
	cvc.mutation.SetArtifactID(i)
	return cvc
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (cvc *CertifyVexCreate) SetNillableArtifactID(i *int) *CertifyVexCreate {
	if i != nil {
		cvc.SetArtifactID(*i)
	}
	return cvc
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (cvc *CertifyVexCreate) SetVulnerabilityID(i int) *CertifyVexCreate {
	cvc.mutation.SetVulnerabilityID(i)
	return cvc
}

// SetKnownSince sets the "known_since" field.
func (cvc *CertifyVexCreate) SetKnownSince(t time.Time) *CertifyVexCreate {
	cvc.mutation.SetKnownSince(t)
	return cvc
}

// SetStatus sets the "status" field.
func (cvc *CertifyVexCreate) SetStatus(s string) *CertifyVexCreate {
	cvc.mutation.SetStatus(s)
	return cvc
}

// SetStatement sets the "statement" field.
func (cvc *CertifyVexCreate) SetStatement(s string) *CertifyVexCreate {
	cvc.mutation.SetStatement(s)
	return cvc
}

// SetStatusNotes sets the "status_notes" field.
func (cvc *CertifyVexCreate) SetStatusNotes(s string) *CertifyVexCreate {
	cvc.mutation.SetStatusNotes(s)
	return cvc
}

// SetJustification sets the "justification" field.
func (cvc *CertifyVexCreate) SetJustification(s string) *CertifyVexCreate {
	cvc.mutation.SetJustification(s)
	return cvc
}

// SetOrigin sets the "origin" field.
func (cvc *CertifyVexCreate) SetOrigin(s string) *CertifyVexCreate {
	cvc.mutation.SetOrigin(s)
	return cvc
}

// SetCollector sets the "collector" field.
func (cvc *CertifyVexCreate) SetCollector(s string) *CertifyVexCreate {
	cvc.mutation.SetCollector(s)
	return cvc
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (cvc *CertifyVexCreate) SetPackage(p *PackageVersion) *CertifyVexCreate {
	return cvc.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (cvc *CertifyVexCreate) SetArtifact(a *Artifact) *CertifyVexCreate {
	return cvc.SetArtifactID(a.ID)
}

// SetVulnerability sets the "vulnerability" edge to the VulnerabilityID entity.
func (cvc *CertifyVexCreate) SetVulnerability(v *VulnerabilityID) *CertifyVexCreate {
	return cvc.SetVulnerabilityID(v.ID)
}

// Mutation returns the CertifyVexMutation object of the builder.
func (cvc *CertifyVexCreate) Mutation() *CertifyVexMutation {
	return cvc.mutation
}

// Save creates the CertifyVex in the database.
func (cvc *CertifyVexCreate) Save(ctx context.Context) (*CertifyVex, error) {
	return withHooks(ctx, cvc.sqlSave, cvc.mutation, cvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cvc *CertifyVexCreate) SaveX(ctx context.Context) *CertifyVex {
	v, err := cvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvc *CertifyVexCreate) Exec(ctx context.Context) error {
	_, err := cvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvc *CertifyVexCreate) ExecX(ctx context.Context) {
	if err := cvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvc *CertifyVexCreate) check() error {
	if _, ok := cvc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability_id", err: errors.New(`ent: missing required field "CertifyVex.vulnerability_id"`)}
	}
	if _, ok := cvc.mutation.KnownSince(); !ok {
		return &ValidationError{Name: "known_since", err: errors.New(`ent: missing required field "CertifyVex.known_since"`)}
	}
	if _, ok := cvc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CertifyVex.status"`)}
	}
	if _, ok := cvc.mutation.Statement(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required field "CertifyVex.statement"`)}
	}
	if _, ok := cvc.mutation.StatusNotes(); !ok {
		return &ValidationError{Name: "status_notes", err: errors.New(`ent: missing required field "CertifyVex.status_notes"`)}
	}
	if _, ok := cvc.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "CertifyVex.justification"`)}
	}
	if _, ok := cvc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "CertifyVex.origin"`)}
	}
	if _, ok := cvc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "CertifyVex.collector"`)}
	}
	if _, ok := cvc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability", err: errors.New(`ent: missing required edge "CertifyVex.vulnerability"`)}
	}
	return nil
}

func (cvc *CertifyVexCreate) sqlSave(ctx context.Context) (*CertifyVex, error) {
	if err := cvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cvc.mutation.id = &_node.ID
	cvc.mutation.done = true
	return _node, nil
}

func (cvc *CertifyVexCreate) createSpec() (*CertifyVex, *sqlgraph.CreateSpec) {
	var (
		_node = &CertifyVex{config: cvc.config}
		_spec = sqlgraph.NewCreateSpec(certifyvex.Table, sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cvc.conflict
	if value, ok := cvc.mutation.KnownSince(); ok {
		_spec.SetField(certifyvex.FieldKnownSince, field.TypeTime, value)
		_node.KnownSince = value
	}
	if value, ok := cvc.mutation.Status(); ok {
		_spec.SetField(certifyvex.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cvc.mutation.Statement(); ok {
		_spec.SetField(certifyvex.FieldStatement, field.TypeString, value)
		_node.Statement = value
	}
	if value, ok := cvc.mutation.StatusNotes(); ok {
		_spec.SetField(certifyvex.FieldStatusNotes, field.TypeString, value)
		_node.StatusNotes = value
	}
	if value, ok := cvc.mutation.Justification(); ok {
		_spec.SetField(certifyvex.FieldJustification, field.TypeString, value)
		_node.Justification = value
	}
	if value, ok := cvc.mutation.Origin(); ok {
		_spec.SetField(certifyvex.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := cvc.mutation.Collector(); ok {
		_spec.SetField(certifyvex.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if nodes := cvc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.PackageTable,
			Columns: []string{certifyvex.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cvc.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.ArtifactTable,
			Columns: []string{certifyvex.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArtifactID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cvc.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.VulnerabilityTable,
			Columns: []string{certifyvex.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VulnerabilityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CertifyVex.Create().
//		SetPackageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertifyVexUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (cvc *CertifyVexCreate) OnConflict(opts ...sql.ConflictOption) *CertifyVexUpsertOne {
	cvc.conflict = opts
	return &CertifyVexUpsertOne{
		create: cvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CertifyVex.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cvc *CertifyVexCreate) OnConflictColumns(columns ...string) *CertifyVexUpsertOne {
	cvc.conflict = append(cvc.conflict, sql.ConflictColumns(columns...))
	return &CertifyVexUpsertOne{
		create: cvc,
	}
}

type (
	// CertifyVexUpsertOne is the builder for "upsert"-ing
	//  one CertifyVex node.
	CertifyVexUpsertOne struct {
		create *CertifyVexCreate
	}

	// CertifyVexUpsert is the "OnConflict" setter.
	CertifyVexUpsert struct {
		*sql.UpdateSet
	}
)

// SetPackageID sets the "package_id" field.
func (u *CertifyVexUpsert) SetPackageID(v int) *CertifyVexUpsert {
	u.Set(certifyvex.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *CertifyVexUpsert) UpdatePackageID() *CertifyVexUpsert {
	u.SetExcluded(certifyvex.FieldPackageID)
	return u
}

// ClearPackageID clears the value of the "package_id" field.
func (u *CertifyVexUpsert) ClearPackageID() *CertifyVexUpsert {
	u.SetNull(certifyvex.FieldPackageID)
	return u
}

// SetArtifactID sets the "artifact_id" field.
func (u *CertifyVexUpsert) SetArtifactID(v int) *CertifyVexUpsert {
	u.Set(certifyvex.FieldArtifactID, v)
	return u
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *CertifyVexUpsert) UpdateArtifactID() *CertifyVexUpsert {
	u.SetExcluded(certifyvex.FieldArtifactID)
	return u
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *CertifyVexUpsert) ClearArtifactID() *CertifyVexUpsert {
	u.SetNull(certifyvex.FieldArtifactID)
	return u
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *CertifyVexUpsert) SetVulnerabilityID(v int) *CertifyVexUpsert {
	u.Set(certifyvex.FieldVulnerabilityID, v)
	return u
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *CertifyVexUpsert) UpdateVulnerabilityID() *CertifyVexUpsert {
	u.SetExcluded(certifyvex.FieldVulnerabilityID)
	return u
}

// SetKnownSince sets the "known_since" field.
func (u *CertifyVexUpsert) SetKnownSince(v time.Time) *CertifyVexUpsert {
	u.Set(certifyvex.FieldKnownSince, v)
	return u
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *CertifyVexUpsert) UpdateKnownSince() *CertifyVexUpsert {
	u.SetExcluded(certifyvex.FieldKnownSince)
	return u
}

// SetStatus sets the "status" field.
func (u *CertifyVexUpsert) SetStatus(v string) *CertifyVexUpsert {
	u.Set(certifyvex.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CertifyVexUpsert) UpdateStatus() *CertifyVexUpsert {
	u.SetExcluded(certifyvex.FieldStatus)
	return u
}

// SetStatement sets the "statement" field.
func (u *CertifyVexUpsert) SetStatement(v string) *CertifyVexUpsert {
	u.Set(certifyvex.FieldStatement, v)
	return u
}

// UpdateStatement sets the "statement" field to the value that was provided on create.
func (u *CertifyVexUpsert) UpdateStatement() *CertifyVexUpsert {
	u.SetExcluded(certifyvex.FieldStatement)
	return u
}

// SetStatusNotes sets the "status_notes" field.
func (u *CertifyVexUpsert) SetStatusNotes(v string) *CertifyVexUpsert {
	u.Set(certifyvex.FieldStatusNotes, v)
	return u
}

// UpdateStatusNotes sets the "status_notes" field to the value that was provided on create.
func (u *CertifyVexUpsert) UpdateStatusNotes() *CertifyVexUpsert {
	u.SetExcluded(certifyvex.FieldStatusNotes)
	return u
}

// SetJustification sets the "justification" field.
func (u *CertifyVexUpsert) SetJustification(v string) *CertifyVexUpsert {
	u.Set(certifyvex.FieldJustification, v)
	return u
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *CertifyVexUpsert) UpdateJustification() *CertifyVexUpsert {
	u.SetExcluded(certifyvex.FieldJustification)
	return u
}

// SetOrigin sets the "origin" field.
func (u *CertifyVexUpsert) SetOrigin(v string) *CertifyVexUpsert {
	u.Set(certifyvex.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *CertifyVexUpsert) UpdateOrigin() *CertifyVexUpsert {
	u.SetExcluded(certifyvex.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *CertifyVexUpsert) SetCollector(v string) *CertifyVexUpsert {
	u.Set(certifyvex.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *CertifyVexUpsert) UpdateCollector() *CertifyVexUpsert {
	u.SetExcluded(certifyvex.FieldCollector)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CertifyVex.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CertifyVexUpsertOne) UpdateNewValues() *CertifyVexUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CertifyVex.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CertifyVexUpsertOne) Ignore() *CertifyVexUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertifyVexUpsertOne) DoNothing() *CertifyVexUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertifyVexCreate.OnConflict
// documentation for more info.
func (u *CertifyVexUpsertOne) Update(set func(*CertifyVexUpsert)) *CertifyVexUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertifyVexUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *CertifyVexUpsertOne) SetPackageID(v int) *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *CertifyVexUpsertOne) UpdatePackageID() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *CertifyVexUpsertOne) ClearPackageID() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.ClearPackageID()
	})
}

// SetArtifactID sets the "artifact_id" field.
func (u *CertifyVexUpsertOne) SetArtifactID(v int) *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetArtifactID(v)
	})
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *CertifyVexUpsertOne) UpdateArtifactID() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateArtifactID()
	})
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *CertifyVexUpsertOne) ClearArtifactID() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.ClearArtifactID()
	})
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *CertifyVexUpsertOne) SetVulnerabilityID(v int) *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *CertifyVexUpsertOne) UpdateVulnerabilityID() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// SetKnownSince sets the "known_since" field.
func (u *CertifyVexUpsertOne) SetKnownSince(v time.Time) *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetKnownSince(v)
	})
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *CertifyVexUpsertOne) UpdateKnownSince() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateKnownSince()
	})
}

// SetStatus sets the "status" field.
func (u *CertifyVexUpsertOne) SetStatus(v string) *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CertifyVexUpsertOne) UpdateStatus() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateStatus()
	})
}

// SetStatement sets the "statement" field.
func (u *CertifyVexUpsertOne) SetStatement(v string) *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetStatement(v)
	})
}

// UpdateStatement sets the "statement" field to the value that was provided on create.
func (u *CertifyVexUpsertOne) UpdateStatement() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateStatement()
	})
}

// SetStatusNotes sets the "status_notes" field.
func (u *CertifyVexUpsertOne) SetStatusNotes(v string) *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetStatusNotes(v)
	})
}

// UpdateStatusNotes sets the "status_notes" field to the value that was provided on create.
func (u *CertifyVexUpsertOne) UpdateStatusNotes() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateStatusNotes()
	})
}

// SetJustification sets the "justification" field.
func (u *CertifyVexUpsertOne) SetJustification(v string) *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *CertifyVexUpsertOne) UpdateJustification() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *CertifyVexUpsertOne) SetOrigin(v string) *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *CertifyVexUpsertOne) UpdateOrigin() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *CertifyVexUpsertOne) SetCollector(v string) *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *CertifyVexUpsertOne) UpdateCollector() *CertifyVexUpsertOne {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *CertifyVexUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CertifyVexCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertifyVexUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CertifyVexUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CertifyVexUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CertifyVexCreateBulk is the builder for creating many CertifyVex entities in bulk.
type CertifyVexCreateBulk struct {
	config
	err      error
	builders []*CertifyVexCreate
	conflict []sql.ConflictOption
}

// Save creates the CertifyVex entities in the database.
func (cvcb *CertifyVexCreateBulk) Save(ctx context.Context) ([]*CertifyVex, error) {
	if cvcb.err != nil {
		return nil, cvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cvcb.builders))
	nodes := make([]*CertifyVex, len(cvcb.builders))
	mutators := make([]Mutator, len(cvcb.builders))
	for i := range cvcb.builders {
		func(i int, root context.Context) {
			builder := cvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertifyVexMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cvcb *CertifyVexCreateBulk) SaveX(ctx context.Context) []*CertifyVex {
	v, err := cvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvcb *CertifyVexCreateBulk) Exec(ctx context.Context) error {
	_, err := cvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvcb *CertifyVexCreateBulk) ExecX(ctx context.Context) {
	if err := cvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CertifyVex.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertifyVexUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (cvcb *CertifyVexCreateBulk) OnConflict(opts ...sql.ConflictOption) *CertifyVexUpsertBulk {
	cvcb.conflict = opts
	return &CertifyVexUpsertBulk{
		create: cvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CertifyVex.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cvcb *CertifyVexCreateBulk) OnConflictColumns(columns ...string) *CertifyVexUpsertBulk {
	cvcb.conflict = append(cvcb.conflict, sql.ConflictColumns(columns...))
	return &CertifyVexUpsertBulk{
		create: cvcb,
	}
}

// CertifyVexUpsertBulk is the builder for "upsert"-ing
// a bulk of CertifyVex nodes.
type CertifyVexUpsertBulk struct {
	create *CertifyVexCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CertifyVex.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CertifyVexUpsertBulk) UpdateNewValues() *CertifyVexUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CertifyVex.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CertifyVexUpsertBulk) Ignore() *CertifyVexUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertifyVexUpsertBulk) DoNothing() *CertifyVexUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertifyVexCreateBulk.OnConflict
// documentation for more info.
func (u *CertifyVexUpsertBulk) Update(set func(*CertifyVexUpsert)) *CertifyVexUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertifyVexUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *CertifyVexUpsertBulk) SetPackageID(v int) *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *CertifyVexUpsertBulk) UpdatePackageID() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *CertifyVexUpsertBulk) ClearPackageID() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.ClearPackageID()
	})
}

// SetArtifactID sets the "artifact_id" field.
func (u *CertifyVexUpsertBulk) SetArtifactID(v int) *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetArtifactID(v)
	})
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *CertifyVexUpsertBulk) UpdateArtifactID() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateArtifactID()
	})
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (u *CertifyVexUpsertBulk) ClearArtifactID() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.ClearArtifactID()
	})
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *CertifyVexUpsertBulk) SetVulnerabilityID(v int) *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *CertifyVexUpsertBulk) UpdateVulnerabilityID() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// SetKnownSince sets the "known_since" field.
func (u *CertifyVexUpsertBulk) SetKnownSince(v time.Time) *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetKnownSince(v)
	})
}

// UpdateKnownSince sets the "known_since" field to the value that was provided on create.
func (u *CertifyVexUpsertBulk) UpdateKnownSince() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateKnownSince()
	})
}

// SetStatus sets the "status" field.
func (u *CertifyVexUpsertBulk) SetStatus(v string) *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CertifyVexUpsertBulk) UpdateStatus() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateStatus()
	})
}

// SetStatement sets the "statement" field.
func (u *CertifyVexUpsertBulk) SetStatement(v string) *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetStatement(v)
	})
}

// UpdateStatement sets the "statement" field to the value that was provided on create.
func (u *CertifyVexUpsertBulk) UpdateStatement() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateStatement()
	})
}

// SetStatusNotes sets the "status_notes" field.
func (u *CertifyVexUpsertBulk) SetStatusNotes(v string) *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetStatusNotes(v)
	})
}

// UpdateStatusNotes sets the "status_notes" field to the value that was provided on create.
func (u *CertifyVexUpsertBulk) UpdateStatusNotes() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateStatusNotes()
	})
}

// SetJustification sets the "justification" field.
func (u *CertifyVexUpsertBulk) SetJustification(v string) *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *CertifyVexUpsertBulk) UpdateJustification() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *CertifyVexUpsertBulk) SetOrigin(v string) *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *CertifyVexUpsertBulk) UpdateOrigin() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *CertifyVexUpsertBulk) SetCollector(v string) *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *CertifyVexUpsertBulk) UpdateCollector() *CertifyVexUpsertBulk {
	return u.Update(func(s *CertifyVexUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *CertifyVexUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CertifyVexCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CertifyVexCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertifyVexUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

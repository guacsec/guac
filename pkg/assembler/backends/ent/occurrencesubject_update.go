// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrencesubject"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// OccurrenceSubjectUpdate is the builder for updating OccurrenceSubject entities.
type OccurrenceSubjectUpdate struct {
	config
	hooks    []Hook
	mutation *OccurrenceSubjectMutation
}

// Where appends a list predicates to the OccurrenceSubjectUpdate builder.
func (osu *OccurrenceSubjectUpdate) Where(ps ...predicate.OccurrenceSubject) *OccurrenceSubjectUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetSourceID sets the "source_id" field.
func (osu *OccurrenceSubjectUpdate) SetSourceID(i int) *OccurrenceSubjectUpdate {
	osu.mutation.SetSourceID(i)
	return osu
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (osu *OccurrenceSubjectUpdate) SetNillableSourceID(i *int) *OccurrenceSubjectUpdate {
	if i != nil {
		osu.SetSourceID(*i)
	}
	return osu
}

// ClearSourceID clears the value of the "source_id" field.
func (osu *OccurrenceSubjectUpdate) ClearSourceID() *OccurrenceSubjectUpdate {
	osu.mutation.ClearSourceID()
	return osu
}

// SetPackageID sets the "package_id" field.
func (osu *OccurrenceSubjectUpdate) SetPackageID(i int) *OccurrenceSubjectUpdate {
	osu.mutation.SetPackageID(i)
	return osu
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (osu *OccurrenceSubjectUpdate) SetNillablePackageID(i *int) *OccurrenceSubjectUpdate {
	if i != nil {
		osu.SetPackageID(*i)
	}
	return osu
}

// ClearPackageID clears the value of the "package_id" field.
func (osu *OccurrenceSubjectUpdate) ClearPackageID() *OccurrenceSubjectUpdate {
	osu.mutation.ClearPackageID()
	return osu
}

// SetOccurrenceID sets the "occurrence" edge to the Occurrence entity by ID.
func (osu *OccurrenceSubjectUpdate) SetOccurrenceID(id int) *OccurrenceSubjectUpdate {
	osu.mutation.SetOccurrenceID(id)
	return osu
}

// SetNillableOccurrenceID sets the "occurrence" edge to the Occurrence entity by ID if the given value is not nil.
func (osu *OccurrenceSubjectUpdate) SetNillableOccurrenceID(id *int) *OccurrenceSubjectUpdate {
	if id != nil {
		osu = osu.SetOccurrenceID(*id)
	}
	return osu
}

// SetOccurrence sets the "occurrence" edge to the Occurrence entity.
func (osu *OccurrenceSubjectUpdate) SetOccurrence(o *Occurrence) *OccurrenceSubjectUpdate {
	return osu.SetOccurrenceID(o.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (osu *OccurrenceSubjectUpdate) SetPackage(p *PackageVersion) *OccurrenceSubjectUpdate {
	return osu.SetPackageID(p.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (osu *OccurrenceSubjectUpdate) SetSource(s *SourceName) *OccurrenceSubjectUpdate {
	return osu.SetSourceID(s.ID)
}

// Mutation returns the OccurrenceSubjectMutation object of the builder.
func (osu *OccurrenceSubjectUpdate) Mutation() *OccurrenceSubjectMutation {
	return osu.mutation
}

// ClearOccurrence clears the "occurrence" edge to the Occurrence entity.
func (osu *OccurrenceSubjectUpdate) ClearOccurrence() *OccurrenceSubjectUpdate {
	osu.mutation.ClearOccurrence()
	return osu
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (osu *OccurrenceSubjectUpdate) ClearPackage() *OccurrenceSubjectUpdate {
	osu.mutation.ClearPackage()
	return osu
}

// ClearSource clears the "source" edge to the SourceName entity.
func (osu *OccurrenceSubjectUpdate) ClearSource() *OccurrenceSubjectUpdate {
	osu.mutation.ClearSource()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OccurrenceSubjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OccurrenceSubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OccurrenceSubjectUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OccurrenceSubjectUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (osu *OccurrenceSubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(occurrencesubject.Table, occurrencesubject.Columns, sqlgraph.NewFieldSpec(occurrencesubject.FieldID, field.TypeInt))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if osu.mutation.OccurrenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   occurrencesubject.OccurrenceTable,
			Columns: []string{occurrencesubject.OccurrenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.OccurrenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   occurrencesubject.OccurrenceTable,
			Columns: []string{occurrencesubject.OccurrenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrencesubject.PackageTable,
			Columns: []string{occurrencesubject.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrencesubject.PackageTable,
			Columns: []string{occurrencesubject.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osu.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrencesubject.SourceTable,
			Columns: []string{occurrencesubject.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrencesubject.SourceTable,
			Columns: []string{occurrencesubject.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{occurrencesubject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OccurrenceSubjectUpdateOne is the builder for updating a single OccurrenceSubject entity.
type OccurrenceSubjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OccurrenceSubjectMutation
}

// SetSourceID sets the "source_id" field.
func (osuo *OccurrenceSubjectUpdateOne) SetSourceID(i int) *OccurrenceSubjectUpdateOne {
	osuo.mutation.SetSourceID(i)
	return osuo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (osuo *OccurrenceSubjectUpdateOne) SetNillableSourceID(i *int) *OccurrenceSubjectUpdateOne {
	if i != nil {
		osuo.SetSourceID(*i)
	}
	return osuo
}

// ClearSourceID clears the value of the "source_id" field.
func (osuo *OccurrenceSubjectUpdateOne) ClearSourceID() *OccurrenceSubjectUpdateOne {
	osuo.mutation.ClearSourceID()
	return osuo
}

// SetPackageID sets the "package_id" field.
func (osuo *OccurrenceSubjectUpdateOne) SetPackageID(i int) *OccurrenceSubjectUpdateOne {
	osuo.mutation.SetPackageID(i)
	return osuo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (osuo *OccurrenceSubjectUpdateOne) SetNillablePackageID(i *int) *OccurrenceSubjectUpdateOne {
	if i != nil {
		osuo.SetPackageID(*i)
	}
	return osuo
}

// ClearPackageID clears the value of the "package_id" field.
func (osuo *OccurrenceSubjectUpdateOne) ClearPackageID() *OccurrenceSubjectUpdateOne {
	osuo.mutation.ClearPackageID()
	return osuo
}

// SetOccurrenceID sets the "occurrence" edge to the Occurrence entity by ID.
func (osuo *OccurrenceSubjectUpdateOne) SetOccurrenceID(id int) *OccurrenceSubjectUpdateOne {
	osuo.mutation.SetOccurrenceID(id)
	return osuo
}

// SetNillableOccurrenceID sets the "occurrence" edge to the Occurrence entity by ID if the given value is not nil.
func (osuo *OccurrenceSubjectUpdateOne) SetNillableOccurrenceID(id *int) *OccurrenceSubjectUpdateOne {
	if id != nil {
		osuo = osuo.SetOccurrenceID(*id)
	}
	return osuo
}

// SetOccurrence sets the "occurrence" edge to the Occurrence entity.
func (osuo *OccurrenceSubjectUpdateOne) SetOccurrence(o *Occurrence) *OccurrenceSubjectUpdateOne {
	return osuo.SetOccurrenceID(o.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (osuo *OccurrenceSubjectUpdateOne) SetPackage(p *PackageVersion) *OccurrenceSubjectUpdateOne {
	return osuo.SetPackageID(p.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (osuo *OccurrenceSubjectUpdateOne) SetSource(s *SourceName) *OccurrenceSubjectUpdateOne {
	return osuo.SetSourceID(s.ID)
}

// Mutation returns the OccurrenceSubjectMutation object of the builder.
func (osuo *OccurrenceSubjectUpdateOne) Mutation() *OccurrenceSubjectMutation {
	return osuo.mutation
}

// ClearOccurrence clears the "occurrence" edge to the Occurrence entity.
func (osuo *OccurrenceSubjectUpdateOne) ClearOccurrence() *OccurrenceSubjectUpdateOne {
	osuo.mutation.ClearOccurrence()
	return osuo
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (osuo *OccurrenceSubjectUpdateOne) ClearPackage() *OccurrenceSubjectUpdateOne {
	osuo.mutation.ClearPackage()
	return osuo
}

// ClearSource clears the "source" edge to the SourceName entity.
func (osuo *OccurrenceSubjectUpdateOne) ClearSource() *OccurrenceSubjectUpdateOne {
	osuo.mutation.ClearSource()
	return osuo
}

// Where appends a list predicates to the OccurrenceSubjectUpdate builder.
func (osuo *OccurrenceSubjectUpdateOne) Where(ps ...predicate.OccurrenceSubject) *OccurrenceSubjectUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OccurrenceSubjectUpdateOne) Select(field string, fields ...string) *OccurrenceSubjectUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OccurrenceSubject entity.
func (osuo *OccurrenceSubjectUpdateOne) Save(ctx context.Context) (*OccurrenceSubject, error) {
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OccurrenceSubjectUpdateOne) SaveX(ctx context.Context) *OccurrenceSubject {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OccurrenceSubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OccurrenceSubjectUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (osuo *OccurrenceSubjectUpdateOne) sqlSave(ctx context.Context) (_node *OccurrenceSubject, err error) {
	_spec := sqlgraph.NewUpdateSpec(occurrencesubject.Table, occurrencesubject.Columns, sqlgraph.NewFieldSpec(occurrencesubject.FieldID, field.TypeInt))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OccurrenceSubject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, occurrencesubject.FieldID)
		for _, f := range fields {
			if !occurrencesubject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != occurrencesubject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if osuo.mutation.OccurrenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   occurrencesubject.OccurrenceTable,
			Columns: []string{occurrencesubject.OccurrenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.OccurrenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   occurrencesubject.OccurrenceTable,
			Columns: []string{occurrencesubject.OccurrenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osuo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrencesubject.PackageTable,
			Columns: []string{occurrencesubject.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrencesubject.PackageTable,
			Columns: []string{occurrencesubject.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osuo.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrencesubject.SourceTable,
			Columns: []string{occurrencesubject.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   occurrencesubject.SourceTable,
			Columns: []string{occurrencesubject.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OccurrenceSubject{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{occurrencesubject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcetype"
)

// SourceNamespaceUpdate is the builder for updating SourceNamespace entities.
type SourceNamespaceUpdate struct {
	config
	hooks    []Hook
	mutation *SourceNamespaceMutation
}

// Where appends a list predicates to the SourceNamespaceUpdate builder.
func (snu *SourceNamespaceUpdate) Where(ps ...predicate.SourceNamespace) *SourceNamespaceUpdate {
	snu.mutation.Where(ps...)
	return snu
}

// SetNamespace sets the "namespace" field.
func (snu *SourceNamespaceUpdate) SetNamespace(s string) *SourceNamespaceUpdate {
	snu.mutation.SetNamespace(s)
	return snu
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (snu *SourceNamespaceUpdate) SetNillableNamespace(s *string) *SourceNamespaceUpdate {
	if s != nil {
		snu.SetNamespace(*s)
	}
	return snu
}

// SetSourceID sets the "source_id" field.
func (snu *SourceNamespaceUpdate) SetSourceID(i int) *SourceNamespaceUpdate {
	snu.mutation.SetSourceID(i)
	return snu
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (snu *SourceNamespaceUpdate) SetNillableSourceID(i *int) *SourceNamespaceUpdate {
	if i != nil {
		snu.SetSourceID(*i)
	}
	return snu
}

// SetSourceTypeID sets the "source_type" edge to the SourceType entity by ID.
func (snu *SourceNamespaceUpdate) SetSourceTypeID(id int) *SourceNamespaceUpdate {
	snu.mutation.SetSourceTypeID(id)
	return snu
}

// SetSourceType sets the "source_type" edge to the SourceType entity.
func (snu *SourceNamespaceUpdate) SetSourceType(s *SourceType) *SourceNamespaceUpdate {
	return snu.SetSourceTypeID(s.ID)
}

// AddNameIDs adds the "names" edge to the SourceName entity by IDs.
func (snu *SourceNamespaceUpdate) AddNameIDs(ids ...int) *SourceNamespaceUpdate {
	snu.mutation.AddNameIDs(ids...)
	return snu
}

// AddNames adds the "names" edges to the SourceName entity.
func (snu *SourceNamespaceUpdate) AddNames(s ...*SourceName) *SourceNamespaceUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return snu.AddNameIDs(ids...)
}

// Mutation returns the SourceNamespaceMutation object of the builder.
func (snu *SourceNamespaceUpdate) Mutation() *SourceNamespaceMutation {
	return snu.mutation
}

// ClearSourceType clears the "source_type" edge to the SourceType entity.
func (snu *SourceNamespaceUpdate) ClearSourceType() *SourceNamespaceUpdate {
	snu.mutation.ClearSourceType()
	return snu
}

// ClearNames clears all "names" edges to the SourceName entity.
func (snu *SourceNamespaceUpdate) ClearNames() *SourceNamespaceUpdate {
	snu.mutation.ClearNames()
	return snu
}

// RemoveNameIDs removes the "names" edge to SourceName entities by IDs.
func (snu *SourceNamespaceUpdate) RemoveNameIDs(ids ...int) *SourceNamespaceUpdate {
	snu.mutation.RemoveNameIDs(ids...)
	return snu
}

// RemoveNames removes "names" edges to SourceName entities.
func (snu *SourceNamespaceUpdate) RemoveNames(s ...*SourceName) *SourceNamespaceUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return snu.RemoveNameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (snu *SourceNamespaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, snu.sqlSave, snu.mutation, snu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snu *SourceNamespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := snu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (snu *SourceNamespaceUpdate) Exec(ctx context.Context) error {
	_, err := snu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snu *SourceNamespaceUpdate) ExecX(ctx context.Context) {
	if err := snu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snu *SourceNamespaceUpdate) check() error {
	if _, ok := snu.mutation.SourceTypeID(); snu.mutation.SourceTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SourceNamespace.source_type"`)
	}
	return nil
}

func (snu *SourceNamespaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := snu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sourcenamespace.Table, sourcenamespace.Columns, sqlgraph.NewFieldSpec(sourcenamespace.FieldID, field.TypeInt))
	if ps := snu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snu.mutation.Namespace(); ok {
		_spec.SetField(sourcenamespace.FieldNamespace, field.TypeString, value)
	}
	if snu.mutation.SourceTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcenamespace.SourceTypeTable,
			Columns: []string{sourcenamespace.SourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.SourceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcenamespace.SourceTypeTable,
			Columns: []string{sourcenamespace.SourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snu.mutation.NamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcenamespace.NamesTable,
			Columns: []string{sourcenamespace.NamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.RemovedNamesIDs(); len(nodes) > 0 && !snu.mutation.NamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcenamespace.NamesTable,
			Columns: []string{sourcenamespace.NamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.NamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcenamespace.NamesTable,
			Columns: []string{sourcenamespace.NamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, snu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sourcenamespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	snu.mutation.done = true
	return n, nil
}

// SourceNamespaceUpdateOne is the builder for updating a single SourceNamespace entity.
type SourceNamespaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SourceNamespaceMutation
}

// SetNamespace sets the "namespace" field.
func (snuo *SourceNamespaceUpdateOne) SetNamespace(s string) *SourceNamespaceUpdateOne {
	snuo.mutation.SetNamespace(s)
	return snuo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (snuo *SourceNamespaceUpdateOne) SetNillableNamespace(s *string) *SourceNamespaceUpdateOne {
	if s != nil {
		snuo.SetNamespace(*s)
	}
	return snuo
}

// SetSourceID sets the "source_id" field.
func (snuo *SourceNamespaceUpdateOne) SetSourceID(i int) *SourceNamespaceUpdateOne {
	snuo.mutation.SetSourceID(i)
	return snuo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (snuo *SourceNamespaceUpdateOne) SetNillableSourceID(i *int) *SourceNamespaceUpdateOne {
	if i != nil {
		snuo.SetSourceID(*i)
	}
	return snuo
}

// SetSourceTypeID sets the "source_type" edge to the SourceType entity by ID.
func (snuo *SourceNamespaceUpdateOne) SetSourceTypeID(id int) *SourceNamespaceUpdateOne {
	snuo.mutation.SetSourceTypeID(id)
	return snuo
}

// SetSourceType sets the "source_type" edge to the SourceType entity.
func (snuo *SourceNamespaceUpdateOne) SetSourceType(s *SourceType) *SourceNamespaceUpdateOne {
	return snuo.SetSourceTypeID(s.ID)
}

// AddNameIDs adds the "names" edge to the SourceName entity by IDs.
func (snuo *SourceNamespaceUpdateOne) AddNameIDs(ids ...int) *SourceNamespaceUpdateOne {
	snuo.mutation.AddNameIDs(ids...)
	return snuo
}

// AddNames adds the "names" edges to the SourceName entity.
func (snuo *SourceNamespaceUpdateOne) AddNames(s ...*SourceName) *SourceNamespaceUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return snuo.AddNameIDs(ids...)
}

// Mutation returns the SourceNamespaceMutation object of the builder.
func (snuo *SourceNamespaceUpdateOne) Mutation() *SourceNamespaceMutation {
	return snuo.mutation
}

// ClearSourceType clears the "source_type" edge to the SourceType entity.
func (snuo *SourceNamespaceUpdateOne) ClearSourceType() *SourceNamespaceUpdateOne {
	snuo.mutation.ClearSourceType()
	return snuo
}

// ClearNames clears all "names" edges to the SourceName entity.
func (snuo *SourceNamespaceUpdateOne) ClearNames() *SourceNamespaceUpdateOne {
	snuo.mutation.ClearNames()
	return snuo
}

// RemoveNameIDs removes the "names" edge to SourceName entities by IDs.
func (snuo *SourceNamespaceUpdateOne) RemoveNameIDs(ids ...int) *SourceNamespaceUpdateOne {
	snuo.mutation.RemoveNameIDs(ids...)
	return snuo
}

// RemoveNames removes "names" edges to SourceName entities.
func (snuo *SourceNamespaceUpdateOne) RemoveNames(s ...*SourceName) *SourceNamespaceUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return snuo.RemoveNameIDs(ids...)
}

// Where appends a list predicates to the SourceNamespaceUpdate builder.
func (snuo *SourceNamespaceUpdateOne) Where(ps ...predicate.SourceNamespace) *SourceNamespaceUpdateOne {
	snuo.mutation.Where(ps...)
	return snuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (snuo *SourceNamespaceUpdateOne) Select(field string, fields ...string) *SourceNamespaceUpdateOne {
	snuo.fields = append([]string{field}, fields...)
	return snuo
}

// Save executes the query and returns the updated SourceNamespace entity.
func (snuo *SourceNamespaceUpdateOne) Save(ctx context.Context) (*SourceNamespace, error) {
	return withHooks(ctx, snuo.sqlSave, snuo.mutation, snuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snuo *SourceNamespaceUpdateOne) SaveX(ctx context.Context) *SourceNamespace {
	node, err := snuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (snuo *SourceNamespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := snuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snuo *SourceNamespaceUpdateOne) ExecX(ctx context.Context) {
	if err := snuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snuo *SourceNamespaceUpdateOne) check() error {
	if _, ok := snuo.mutation.SourceTypeID(); snuo.mutation.SourceTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SourceNamespace.source_type"`)
	}
	return nil
}

func (snuo *SourceNamespaceUpdateOne) sqlSave(ctx context.Context) (_node *SourceNamespace, err error) {
	if err := snuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sourcenamespace.Table, sourcenamespace.Columns, sqlgraph.NewFieldSpec(sourcenamespace.FieldID, field.TypeInt))
	id, ok := snuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SourceNamespace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := snuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sourcenamespace.FieldID)
		for _, f := range fields {
			if !sourcenamespace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sourcenamespace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := snuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snuo.mutation.Namespace(); ok {
		_spec.SetField(sourcenamespace.FieldNamespace, field.TypeString, value)
	}
	if snuo.mutation.SourceTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcenamespace.SourceTypeTable,
			Columns: []string{sourcenamespace.SourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.SourceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcenamespace.SourceTypeTable,
			Columns: []string{sourcenamespace.SourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snuo.mutation.NamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcenamespace.NamesTable,
			Columns: []string{sourcenamespace.NamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.RemovedNamesIDs(); len(nodes) > 0 && !snuo.mutation.NamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcenamespace.NamesTable,
			Columns: []string{sourcenamespace.NamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.NamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcenamespace.NamesTable,
			Columns: []string{sourcenamespace.NamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SourceNamespace{config: snuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, snuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sourcenamespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	snuo.mutation.done = true
	return _node, nil
}

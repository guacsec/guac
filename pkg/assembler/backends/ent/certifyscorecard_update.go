// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// CertifyScorecardUpdate is the builder for updating CertifyScorecard entities.
type CertifyScorecardUpdate struct {
	config
	hooks    []Hook
	mutation *CertifyScorecardMutation
}

// Where appends a list predicates to the CertifyScorecardUpdate builder.
func (csu *CertifyScorecardUpdate) Where(ps ...predicate.CertifyScorecard) *CertifyScorecardUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetSourceID sets the "source_id" field.
func (csu *CertifyScorecardUpdate) SetSourceID(u uuid.UUID) *CertifyScorecardUpdate {
	csu.mutation.SetSourceID(u)
	return csu
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (csu *CertifyScorecardUpdate) SetNillableSourceID(u *uuid.UUID) *CertifyScorecardUpdate {
	if u != nil {
		csu.SetSourceID(*u)
	}
	return csu
}

// SetChecks sets the "checks" field.
func (csu *CertifyScorecardUpdate) SetChecks(mc []*model.ScorecardCheck) *CertifyScorecardUpdate {
	csu.mutation.SetChecks(mc)
	return csu
}

// AppendChecks appends mc to the "checks" field.
func (csu *CertifyScorecardUpdate) AppendChecks(mc []*model.ScorecardCheck) *CertifyScorecardUpdate {
	csu.mutation.AppendChecks(mc)
	return csu
}

// SetAggregateScore sets the "aggregate_score" field.
func (csu *CertifyScorecardUpdate) SetAggregateScore(f float64) *CertifyScorecardUpdate {
	csu.mutation.ResetAggregateScore()
	csu.mutation.SetAggregateScore(f)
	return csu
}

// SetNillableAggregateScore sets the "aggregate_score" field if the given value is not nil.
func (csu *CertifyScorecardUpdate) SetNillableAggregateScore(f *float64) *CertifyScorecardUpdate {
	if f != nil {
		csu.SetAggregateScore(*f)
	}
	return csu
}

// AddAggregateScore adds f to the "aggregate_score" field.
func (csu *CertifyScorecardUpdate) AddAggregateScore(f float64) *CertifyScorecardUpdate {
	csu.mutation.AddAggregateScore(f)
	return csu
}

// SetTimeScanned sets the "time_scanned" field.
func (csu *CertifyScorecardUpdate) SetTimeScanned(t time.Time) *CertifyScorecardUpdate {
	csu.mutation.SetTimeScanned(t)
	return csu
}

// SetNillableTimeScanned sets the "time_scanned" field if the given value is not nil.
func (csu *CertifyScorecardUpdate) SetNillableTimeScanned(t *time.Time) *CertifyScorecardUpdate {
	if t != nil {
		csu.SetTimeScanned(*t)
	}
	return csu
}

// SetScorecardVersion sets the "scorecard_version" field.
func (csu *CertifyScorecardUpdate) SetScorecardVersion(s string) *CertifyScorecardUpdate {
	csu.mutation.SetScorecardVersion(s)
	return csu
}

// SetNillableScorecardVersion sets the "scorecard_version" field if the given value is not nil.
func (csu *CertifyScorecardUpdate) SetNillableScorecardVersion(s *string) *CertifyScorecardUpdate {
	if s != nil {
		csu.SetScorecardVersion(*s)
	}
	return csu
}

// SetScorecardCommit sets the "scorecard_commit" field.
func (csu *CertifyScorecardUpdate) SetScorecardCommit(s string) *CertifyScorecardUpdate {
	csu.mutation.SetScorecardCommit(s)
	return csu
}

// SetNillableScorecardCommit sets the "scorecard_commit" field if the given value is not nil.
func (csu *CertifyScorecardUpdate) SetNillableScorecardCommit(s *string) *CertifyScorecardUpdate {
	if s != nil {
		csu.SetScorecardCommit(*s)
	}
	return csu
}

// SetOrigin sets the "origin" field.
func (csu *CertifyScorecardUpdate) SetOrigin(s string) *CertifyScorecardUpdate {
	csu.mutation.SetOrigin(s)
	return csu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (csu *CertifyScorecardUpdate) SetNillableOrigin(s *string) *CertifyScorecardUpdate {
	if s != nil {
		csu.SetOrigin(*s)
	}
	return csu
}

// SetCollector sets the "collector" field.
func (csu *CertifyScorecardUpdate) SetCollector(s string) *CertifyScorecardUpdate {
	csu.mutation.SetCollector(s)
	return csu
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (csu *CertifyScorecardUpdate) SetNillableCollector(s *string) *CertifyScorecardUpdate {
	if s != nil {
		csu.SetCollector(*s)
	}
	return csu
}

// SetDocumentRef sets the "document_ref" field.
func (csu *CertifyScorecardUpdate) SetDocumentRef(s string) *CertifyScorecardUpdate {
	csu.mutation.SetDocumentRef(s)
	return csu
}

// SetNillableDocumentRef sets the "document_ref" field if the given value is not nil.
func (csu *CertifyScorecardUpdate) SetNillableDocumentRef(s *string) *CertifyScorecardUpdate {
	if s != nil {
		csu.SetDocumentRef(*s)
	}
	return csu
}

// SetChecksHash sets the "checks_hash" field.
func (csu *CertifyScorecardUpdate) SetChecksHash(s string) *CertifyScorecardUpdate {
	csu.mutation.SetChecksHash(s)
	return csu
}

// SetNillableChecksHash sets the "checks_hash" field if the given value is not nil.
func (csu *CertifyScorecardUpdate) SetNillableChecksHash(s *string) *CertifyScorecardUpdate {
	if s != nil {
		csu.SetChecksHash(*s)
	}
	return csu
}

// SetSource sets the "source" edge to the SourceName entity.
func (csu *CertifyScorecardUpdate) SetSource(s *SourceName) *CertifyScorecardUpdate {
	return csu.SetSourceID(s.ID)
}

// Mutation returns the CertifyScorecardMutation object of the builder.
func (csu *CertifyScorecardUpdate) Mutation() *CertifyScorecardMutation {
	return csu.mutation
}

// ClearSource clears the "source" edge to the SourceName entity.
func (csu *CertifyScorecardUpdate) ClearSource() *CertifyScorecardUpdate {
	csu.mutation.ClearSource()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CertifyScorecardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CertifyScorecardUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CertifyScorecardUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CertifyScorecardUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CertifyScorecardUpdate) check() error {
	if csu.mutation.SourceCleared() && len(csu.mutation.SourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CertifyScorecard.source"`)
	}
	return nil
}

func (csu *CertifyScorecardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(certifyscorecard.Table, certifyscorecard.Columns, sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeUUID))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Checks(); ok {
		_spec.SetField(certifyscorecard.FieldChecks, field.TypeJSON, value)
	}
	if value, ok := csu.mutation.AppendedChecks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, certifyscorecard.FieldChecks, value)
		})
	}
	if value, ok := csu.mutation.AggregateScore(); ok {
		_spec.SetField(certifyscorecard.FieldAggregateScore, field.TypeFloat64, value)
	}
	if value, ok := csu.mutation.AddedAggregateScore(); ok {
		_spec.AddField(certifyscorecard.FieldAggregateScore, field.TypeFloat64, value)
	}
	if value, ok := csu.mutation.TimeScanned(); ok {
		_spec.SetField(certifyscorecard.FieldTimeScanned, field.TypeTime, value)
	}
	if value, ok := csu.mutation.ScorecardVersion(); ok {
		_spec.SetField(certifyscorecard.FieldScorecardVersion, field.TypeString, value)
	}
	if value, ok := csu.mutation.ScorecardCommit(); ok {
		_spec.SetField(certifyscorecard.FieldScorecardCommit, field.TypeString, value)
	}
	if value, ok := csu.mutation.Origin(); ok {
		_spec.SetField(certifyscorecard.FieldOrigin, field.TypeString, value)
	}
	if value, ok := csu.mutation.Collector(); ok {
		_spec.SetField(certifyscorecard.FieldCollector, field.TypeString, value)
	}
	if value, ok := csu.mutation.DocumentRef(); ok {
		_spec.SetField(certifyscorecard.FieldDocumentRef, field.TypeString, value)
	}
	if value, ok := csu.mutation.ChecksHash(); ok {
		_spec.SetField(certifyscorecard.FieldChecksHash, field.TypeString, value)
	}
	if csu.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyscorecard.SourceTable,
			Columns: []string{certifyscorecard.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyscorecard.SourceTable,
			Columns: []string{certifyscorecard.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certifyscorecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CertifyScorecardUpdateOne is the builder for updating a single CertifyScorecard entity.
type CertifyScorecardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertifyScorecardMutation
}

// SetSourceID sets the "source_id" field.
func (csuo *CertifyScorecardUpdateOne) SetSourceID(u uuid.UUID) *CertifyScorecardUpdateOne {
	csuo.mutation.SetSourceID(u)
	return csuo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (csuo *CertifyScorecardUpdateOne) SetNillableSourceID(u *uuid.UUID) *CertifyScorecardUpdateOne {
	if u != nil {
		csuo.SetSourceID(*u)
	}
	return csuo
}

// SetChecks sets the "checks" field.
func (csuo *CertifyScorecardUpdateOne) SetChecks(mc []*model.ScorecardCheck) *CertifyScorecardUpdateOne {
	csuo.mutation.SetChecks(mc)
	return csuo
}

// AppendChecks appends mc to the "checks" field.
func (csuo *CertifyScorecardUpdateOne) AppendChecks(mc []*model.ScorecardCheck) *CertifyScorecardUpdateOne {
	csuo.mutation.AppendChecks(mc)
	return csuo
}

// SetAggregateScore sets the "aggregate_score" field.
func (csuo *CertifyScorecardUpdateOne) SetAggregateScore(f float64) *CertifyScorecardUpdateOne {
	csuo.mutation.ResetAggregateScore()
	csuo.mutation.SetAggregateScore(f)
	return csuo
}

// SetNillableAggregateScore sets the "aggregate_score" field if the given value is not nil.
func (csuo *CertifyScorecardUpdateOne) SetNillableAggregateScore(f *float64) *CertifyScorecardUpdateOne {
	if f != nil {
		csuo.SetAggregateScore(*f)
	}
	return csuo
}

// AddAggregateScore adds f to the "aggregate_score" field.
func (csuo *CertifyScorecardUpdateOne) AddAggregateScore(f float64) *CertifyScorecardUpdateOne {
	csuo.mutation.AddAggregateScore(f)
	return csuo
}

// SetTimeScanned sets the "time_scanned" field.
func (csuo *CertifyScorecardUpdateOne) SetTimeScanned(t time.Time) *CertifyScorecardUpdateOne {
	csuo.mutation.SetTimeScanned(t)
	return csuo
}

// SetNillableTimeScanned sets the "time_scanned" field if the given value is not nil.
func (csuo *CertifyScorecardUpdateOne) SetNillableTimeScanned(t *time.Time) *CertifyScorecardUpdateOne {
	if t != nil {
		csuo.SetTimeScanned(*t)
	}
	return csuo
}

// SetScorecardVersion sets the "scorecard_version" field.
func (csuo *CertifyScorecardUpdateOne) SetScorecardVersion(s string) *CertifyScorecardUpdateOne {
	csuo.mutation.SetScorecardVersion(s)
	return csuo
}

// SetNillableScorecardVersion sets the "scorecard_version" field if the given value is not nil.
func (csuo *CertifyScorecardUpdateOne) SetNillableScorecardVersion(s *string) *CertifyScorecardUpdateOne {
	if s != nil {
		csuo.SetScorecardVersion(*s)
	}
	return csuo
}

// SetScorecardCommit sets the "scorecard_commit" field.
func (csuo *CertifyScorecardUpdateOne) SetScorecardCommit(s string) *CertifyScorecardUpdateOne {
	csuo.mutation.SetScorecardCommit(s)
	return csuo
}

// SetNillableScorecardCommit sets the "scorecard_commit" field if the given value is not nil.
func (csuo *CertifyScorecardUpdateOne) SetNillableScorecardCommit(s *string) *CertifyScorecardUpdateOne {
	if s != nil {
		csuo.SetScorecardCommit(*s)
	}
	return csuo
}

// SetOrigin sets the "origin" field.
func (csuo *CertifyScorecardUpdateOne) SetOrigin(s string) *CertifyScorecardUpdateOne {
	csuo.mutation.SetOrigin(s)
	return csuo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (csuo *CertifyScorecardUpdateOne) SetNillableOrigin(s *string) *CertifyScorecardUpdateOne {
	if s != nil {
		csuo.SetOrigin(*s)
	}
	return csuo
}

// SetCollector sets the "collector" field.
func (csuo *CertifyScorecardUpdateOne) SetCollector(s string) *CertifyScorecardUpdateOne {
	csuo.mutation.SetCollector(s)
	return csuo
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (csuo *CertifyScorecardUpdateOne) SetNillableCollector(s *string) *CertifyScorecardUpdateOne {
	if s != nil {
		csuo.SetCollector(*s)
	}
	return csuo
}

// SetDocumentRef sets the "document_ref" field.
func (csuo *CertifyScorecardUpdateOne) SetDocumentRef(s string) *CertifyScorecardUpdateOne {
	csuo.mutation.SetDocumentRef(s)
	return csuo
}

// SetNillableDocumentRef sets the "document_ref" field if the given value is not nil.
func (csuo *CertifyScorecardUpdateOne) SetNillableDocumentRef(s *string) *CertifyScorecardUpdateOne {
	if s != nil {
		csuo.SetDocumentRef(*s)
	}
	return csuo
}

// SetChecksHash sets the "checks_hash" field.
func (csuo *CertifyScorecardUpdateOne) SetChecksHash(s string) *CertifyScorecardUpdateOne {
	csuo.mutation.SetChecksHash(s)
	return csuo
}

// SetNillableChecksHash sets the "checks_hash" field if the given value is not nil.
func (csuo *CertifyScorecardUpdateOne) SetNillableChecksHash(s *string) *CertifyScorecardUpdateOne {
	if s != nil {
		csuo.SetChecksHash(*s)
	}
	return csuo
}

// SetSource sets the "source" edge to the SourceName entity.
func (csuo *CertifyScorecardUpdateOne) SetSource(s *SourceName) *CertifyScorecardUpdateOne {
	return csuo.SetSourceID(s.ID)
}

// Mutation returns the CertifyScorecardMutation object of the builder.
func (csuo *CertifyScorecardUpdateOne) Mutation() *CertifyScorecardMutation {
	return csuo.mutation
}

// ClearSource clears the "source" edge to the SourceName entity.
func (csuo *CertifyScorecardUpdateOne) ClearSource() *CertifyScorecardUpdateOne {
	csuo.mutation.ClearSource()
	return csuo
}

// Where appends a list predicates to the CertifyScorecardUpdate builder.
func (csuo *CertifyScorecardUpdateOne) Where(ps ...predicate.CertifyScorecard) *CertifyScorecardUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CertifyScorecardUpdateOne) Select(field string, fields ...string) *CertifyScorecardUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CertifyScorecard entity.
func (csuo *CertifyScorecardUpdateOne) Save(ctx context.Context) (*CertifyScorecard, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CertifyScorecardUpdateOne) SaveX(ctx context.Context) *CertifyScorecard {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CertifyScorecardUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CertifyScorecardUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CertifyScorecardUpdateOne) check() error {
	if csuo.mutation.SourceCleared() && len(csuo.mutation.SourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CertifyScorecard.source"`)
	}
	return nil
}

func (csuo *CertifyScorecardUpdateOne) sqlSave(ctx context.Context) (_node *CertifyScorecard, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(certifyscorecard.Table, certifyscorecard.Columns, sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeUUID))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CertifyScorecard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certifyscorecard.FieldID)
		for _, f := range fields {
			if !certifyscorecard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certifyscorecard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Checks(); ok {
		_spec.SetField(certifyscorecard.FieldChecks, field.TypeJSON, value)
	}
	if value, ok := csuo.mutation.AppendedChecks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, certifyscorecard.FieldChecks, value)
		})
	}
	if value, ok := csuo.mutation.AggregateScore(); ok {
		_spec.SetField(certifyscorecard.FieldAggregateScore, field.TypeFloat64, value)
	}
	if value, ok := csuo.mutation.AddedAggregateScore(); ok {
		_spec.AddField(certifyscorecard.FieldAggregateScore, field.TypeFloat64, value)
	}
	if value, ok := csuo.mutation.TimeScanned(); ok {
		_spec.SetField(certifyscorecard.FieldTimeScanned, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.ScorecardVersion(); ok {
		_spec.SetField(certifyscorecard.FieldScorecardVersion, field.TypeString, value)
	}
	if value, ok := csuo.mutation.ScorecardCommit(); ok {
		_spec.SetField(certifyscorecard.FieldScorecardCommit, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Origin(); ok {
		_spec.SetField(certifyscorecard.FieldOrigin, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Collector(); ok {
		_spec.SetField(certifyscorecard.FieldCollector, field.TypeString, value)
	}
	if value, ok := csuo.mutation.DocumentRef(); ok {
		_spec.SetField(certifyscorecard.FieldDocumentRef, field.TypeString, value)
	}
	if value, ok := csuo.mutation.ChecksHash(); ok {
		_spec.SetField(certifyscorecard.FieldChecksHash, field.TypeString, value)
	}
	if csuo.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyscorecard.SourceTable,
			Columns: []string{certifyscorecard.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyscorecard.SourceTable,
			Columns: []string{certifyscorecard.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CertifyScorecard{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certifyscorecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}

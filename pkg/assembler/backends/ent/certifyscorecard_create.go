// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/scorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// CertifyScorecardCreate is the builder for creating a CertifyScorecard entity.
type CertifyScorecardCreate struct {
	config
	mutation *CertifyScorecardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSourceID sets the "source_id" field.
func (csc *CertifyScorecardCreate) SetSourceID(i int) *CertifyScorecardCreate {
	csc.mutation.SetSourceID(i)
	return csc
}

// SetScorecardID sets the "scorecard_id" field.
func (csc *CertifyScorecardCreate) SetScorecardID(i int) *CertifyScorecardCreate {
	csc.mutation.SetScorecardID(i)
	return csc
}

// SetScorecard sets the "scorecard" edge to the Scorecard entity.
func (csc *CertifyScorecardCreate) SetScorecard(s *Scorecard) *CertifyScorecardCreate {
	return csc.SetScorecardID(s.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (csc *CertifyScorecardCreate) SetSource(s *SourceName) *CertifyScorecardCreate {
	return csc.SetSourceID(s.ID)
}

// Mutation returns the CertifyScorecardMutation object of the builder.
func (csc *CertifyScorecardCreate) Mutation() *CertifyScorecardMutation {
	return csc.mutation
}

// Save creates the CertifyScorecard in the database.
func (csc *CertifyScorecardCreate) Save(ctx context.Context) (*CertifyScorecard, error) {
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CertifyScorecardCreate) SaveX(ctx context.Context) *CertifyScorecard {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CertifyScorecardCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CertifyScorecardCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CertifyScorecardCreate) check() error {
	if _, ok := csc.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source_id", err: errors.New(`ent: missing required field "CertifyScorecard.source_id"`)}
	}
	if _, ok := csc.mutation.ScorecardID(); !ok {
		return &ValidationError{Name: "scorecard_id", err: errors.New(`ent: missing required field "CertifyScorecard.scorecard_id"`)}
	}
	if _, ok := csc.mutation.ScorecardID(); !ok {
		return &ValidationError{Name: "scorecard", err: errors.New(`ent: missing required edge "CertifyScorecard.scorecard"`)}
	}
	if _, ok := csc.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required edge "CertifyScorecard.source"`)}
	}
	return nil
}

func (csc *CertifyScorecardCreate) sqlSave(ctx context.Context) (*CertifyScorecard, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CertifyScorecardCreate) createSpec() (*CertifyScorecard, *sqlgraph.CreateSpec) {
	var (
		_node = &CertifyScorecard{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(certifyscorecard.Table, sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeInt))
	)
	_spec.OnConflict = csc.conflict
	if nodes := csc.mutation.ScorecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certifyscorecard.ScorecardTable,
			Columns: []string{certifyscorecard.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scorecard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScorecardID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyscorecard.SourceTable,
			Columns: []string{certifyscorecard.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CertifyScorecard.Create().
//		SetSourceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertifyScorecardUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (csc *CertifyScorecardCreate) OnConflict(opts ...sql.ConflictOption) *CertifyScorecardUpsertOne {
	csc.conflict = opts
	return &CertifyScorecardUpsertOne{
		create: csc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CertifyScorecard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csc *CertifyScorecardCreate) OnConflictColumns(columns ...string) *CertifyScorecardUpsertOne {
	csc.conflict = append(csc.conflict, sql.ConflictColumns(columns...))
	return &CertifyScorecardUpsertOne{
		create: csc,
	}
}

type (
	// CertifyScorecardUpsertOne is the builder for "upsert"-ing
	//  one CertifyScorecard node.
	CertifyScorecardUpsertOne struct {
		create *CertifyScorecardCreate
	}

	// CertifyScorecardUpsert is the "OnConflict" setter.
	CertifyScorecardUpsert struct {
		*sql.UpdateSet
	}
)

// SetSourceID sets the "source_id" field.
func (u *CertifyScorecardUpsert) SetSourceID(v int) *CertifyScorecardUpsert {
	u.Set(certifyscorecard.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *CertifyScorecardUpsert) UpdateSourceID() *CertifyScorecardUpsert {
	u.SetExcluded(certifyscorecard.FieldSourceID)
	return u
}

// SetScorecardID sets the "scorecard_id" field.
func (u *CertifyScorecardUpsert) SetScorecardID(v int) *CertifyScorecardUpsert {
	u.Set(certifyscorecard.FieldScorecardID, v)
	return u
}

// UpdateScorecardID sets the "scorecard_id" field to the value that was provided on create.
func (u *CertifyScorecardUpsert) UpdateScorecardID() *CertifyScorecardUpsert {
	u.SetExcluded(certifyscorecard.FieldScorecardID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CertifyScorecard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CertifyScorecardUpsertOne) UpdateNewValues() *CertifyScorecardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CertifyScorecard.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CertifyScorecardUpsertOne) Ignore() *CertifyScorecardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertifyScorecardUpsertOne) DoNothing() *CertifyScorecardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertifyScorecardCreate.OnConflict
// documentation for more info.
func (u *CertifyScorecardUpsertOne) Update(set func(*CertifyScorecardUpsert)) *CertifyScorecardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertifyScorecardUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *CertifyScorecardUpsertOne) SetSourceID(v int) *CertifyScorecardUpsertOne {
	return u.Update(func(s *CertifyScorecardUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *CertifyScorecardUpsertOne) UpdateSourceID() *CertifyScorecardUpsertOne {
	return u.Update(func(s *CertifyScorecardUpsert) {
		s.UpdateSourceID()
	})
}

// SetScorecardID sets the "scorecard_id" field.
func (u *CertifyScorecardUpsertOne) SetScorecardID(v int) *CertifyScorecardUpsertOne {
	return u.Update(func(s *CertifyScorecardUpsert) {
		s.SetScorecardID(v)
	})
}

// UpdateScorecardID sets the "scorecard_id" field to the value that was provided on create.
func (u *CertifyScorecardUpsertOne) UpdateScorecardID() *CertifyScorecardUpsertOne {
	return u.Update(func(s *CertifyScorecardUpsert) {
		s.UpdateScorecardID()
	})
}

// Exec executes the query.
func (u *CertifyScorecardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CertifyScorecardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertifyScorecardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CertifyScorecardUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CertifyScorecardUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CertifyScorecardCreateBulk is the builder for creating many CertifyScorecard entities in bulk.
type CertifyScorecardCreateBulk struct {
	config
	builders []*CertifyScorecardCreate
	conflict []sql.ConflictOption
}

// Save creates the CertifyScorecard entities in the database.
func (cscb *CertifyScorecardCreateBulk) Save(ctx context.Context) ([]*CertifyScorecard, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CertifyScorecard, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertifyScorecardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CertifyScorecardCreateBulk) SaveX(ctx context.Context) []*CertifyScorecard {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CertifyScorecardCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CertifyScorecardCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CertifyScorecard.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertifyScorecardUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (cscb *CertifyScorecardCreateBulk) OnConflict(opts ...sql.ConflictOption) *CertifyScorecardUpsertBulk {
	cscb.conflict = opts
	return &CertifyScorecardUpsertBulk{
		create: cscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CertifyScorecard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cscb *CertifyScorecardCreateBulk) OnConflictColumns(columns ...string) *CertifyScorecardUpsertBulk {
	cscb.conflict = append(cscb.conflict, sql.ConflictColumns(columns...))
	return &CertifyScorecardUpsertBulk{
		create: cscb,
	}
}

// CertifyScorecardUpsertBulk is the builder for "upsert"-ing
// a bulk of CertifyScorecard nodes.
type CertifyScorecardUpsertBulk struct {
	create *CertifyScorecardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CertifyScorecard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CertifyScorecardUpsertBulk) UpdateNewValues() *CertifyScorecardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CertifyScorecard.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CertifyScorecardUpsertBulk) Ignore() *CertifyScorecardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertifyScorecardUpsertBulk) DoNothing() *CertifyScorecardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertifyScorecardCreateBulk.OnConflict
// documentation for more info.
func (u *CertifyScorecardUpsertBulk) Update(set func(*CertifyScorecardUpsert)) *CertifyScorecardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertifyScorecardUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *CertifyScorecardUpsertBulk) SetSourceID(v int) *CertifyScorecardUpsertBulk {
	return u.Update(func(s *CertifyScorecardUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *CertifyScorecardUpsertBulk) UpdateSourceID() *CertifyScorecardUpsertBulk {
	return u.Update(func(s *CertifyScorecardUpsert) {
		s.UpdateSourceID()
	})
}

// SetScorecardID sets the "scorecard_id" field.
func (u *CertifyScorecardUpsertBulk) SetScorecardID(v int) *CertifyScorecardUpsertBulk {
	return u.Update(func(s *CertifyScorecardUpsert) {
		s.SetScorecardID(v)
	})
}

// UpdateScorecardID sets the "scorecard_id" field to the value that was provided on create.
func (u *CertifyScorecardUpsertBulk) UpdateScorecardID() *CertifyScorecardUpsertBulk {
	return u.Update(func(s *CertifyScorecardUpsert) {
		s.UpdateScorecardID()
	})
}

// Exec executes the query.
func (u *CertifyScorecardUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CertifyScorecardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CertifyScorecardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertifyScorecardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifylegal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/license"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// CertifyLegalUpdate is the builder for updating CertifyLegal entities.
type CertifyLegalUpdate struct {
	config
	hooks    []Hook
	mutation *CertifyLegalMutation
}

// Where appends a list predicates to the CertifyLegalUpdate builder.
func (clu *CertifyLegalUpdate) Where(ps ...predicate.CertifyLegal) *CertifyLegalUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetPackageID sets the "package_id" field.
func (clu *CertifyLegalUpdate) SetPackageID(i int) *CertifyLegalUpdate {
	clu.mutation.SetPackageID(i)
	return clu
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (clu *CertifyLegalUpdate) SetNillablePackageID(i *int) *CertifyLegalUpdate {
	if i != nil {
		clu.SetPackageID(*i)
	}
	return clu
}

// ClearPackageID clears the value of the "package_id" field.
func (clu *CertifyLegalUpdate) ClearPackageID() *CertifyLegalUpdate {
	clu.mutation.ClearPackageID()
	return clu
}

// SetSourceID sets the "source_id" field.
func (clu *CertifyLegalUpdate) SetSourceID(i int) *CertifyLegalUpdate {
	clu.mutation.SetSourceID(i)
	return clu
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (clu *CertifyLegalUpdate) SetNillableSourceID(i *int) *CertifyLegalUpdate {
	if i != nil {
		clu.SetSourceID(*i)
	}
	return clu
}

// ClearSourceID clears the value of the "source_id" field.
func (clu *CertifyLegalUpdate) ClearSourceID() *CertifyLegalUpdate {
	clu.mutation.ClearSourceID()
	return clu
}

// SetDeclaredLicense sets the "declared_license" field.
func (clu *CertifyLegalUpdate) SetDeclaredLicense(s string) *CertifyLegalUpdate {
	clu.mutation.SetDeclaredLicense(s)
	return clu
}

// SetDiscoveredLicense sets the "discovered_license" field.
func (clu *CertifyLegalUpdate) SetDiscoveredLicense(s string) *CertifyLegalUpdate {
	clu.mutation.SetDiscoveredLicense(s)
	return clu
}

// SetAttribution sets the "attribution" field.
func (clu *CertifyLegalUpdate) SetAttribution(s string) *CertifyLegalUpdate {
	clu.mutation.SetAttribution(s)
	return clu
}

// SetJustification sets the "justification" field.
func (clu *CertifyLegalUpdate) SetJustification(s string) *CertifyLegalUpdate {
	clu.mutation.SetJustification(s)
	return clu
}

// SetTimeScanned sets the "time_scanned" field.
func (clu *CertifyLegalUpdate) SetTimeScanned(t time.Time) *CertifyLegalUpdate {
	clu.mutation.SetTimeScanned(t)
	return clu
}

// SetOrigin sets the "origin" field.
func (clu *CertifyLegalUpdate) SetOrigin(s string) *CertifyLegalUpdate {
	clu.mutation.SetOrigin(s)
	return clu
}

// SetCollector sets the "collector" field.
func (clu *CertifyLegalUpdate) SetCollector(s string) *CertifyLegalUpdate {
	clu.mutation.SetCollector(s)
	return clu
}

// SetDeclaredLicensesHash sets the "declared_licenses_hash" field.
func (clu *CertifyLegalUpdate) SetDeclaredLicensesHash(s string) *CertifyLegalUpdate {
	clu.mutation.SetDeclaredLicensesHash(s)
	return clu
}

// SetDiscoveredLicensesHash sets the "discovered_licenses_hash" field.
func (clu *CertifyLegalUpdate) SetDiscoveredLicensesHash(s string) *CertifyLegalUpdate {
	clu.mutation.SetDiscoveredLicensesHash(s)
	return clu
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (clu *CertifyLegalUpdate) SetPackage(p *PackageVersion) *CertifyLegalUpdate {
	return clu.SetPackageID(p.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (clu *CertifyLegalUpdate) SetSource(s *SourceName) *CertifyLegalUpdate {
	return clu.SetSourceID(s.ID)
}

// AddDeclaredLicenseIDs adds the "declared_licenses" edge to the License entity by IDs.
func (clu *CertifyLegalUpdate) AddDeclaredLicenseIDs(ids ...int) *CertifyLegalUpdate {
	clu.mutation.AddDeclaredLicenseIDs(ids...)
	return clu
}

// AddDeclaredLicenses adds the "declared_licenses" edges to the License entity.
func (clu *CertifyLegalUpdate) AddDeclaredLicenses(l ...*License) *CertifyLegalUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return clu.AddDeclaredLicenseIDs(ids...)
}

// AddDiscoveredLicenseIDs adds the "discovered_licenses" edge to the License entity by IDs.
func (clu *CertifyLegalUpdate) AddDiscoveredLicenseIDs(ids ...int) *CertifyLegalUpdate {
	clu.mutation.AddDiscoveredLicenseIDs(ids...)
	return clu
}

// AddDiscoveredLicenses adds the "discovered_licenses" edges to the License entity.
func (clu *CertifyLegalUpdate) AddDiscoveredLicenses(l ...*License) *CertifyLegalUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return clu.AddDiscoveredLicenseIDs(ids...)
}

// Mutation returns the CertifyLegalMutation object of the builder.
func (clu *CertifyLegalUpdate) Mutation() *CertifyLegalMutation {
	return clu.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (clu *CertifyLegalUpdate) ClearPackage() *CertifyLegalUpdate {
	clu.mutation.ClearPackage()
	return clu
}

// ClearSource clears the "source" edge to the SourceName entity.
func (clu *CertifyLegalUpdate) ClearSource() *CertifyLegalUpdate {
	clu.mutation.ClearSource()
	return clu
}

// ClearDeclaredLicenses clears all "declared_licenses" edges to the License entity.
func (clu *CertifyLegalUpdate) ClearDeclaredLicenses() *CertifyLegalUpdate {
	clu.mutation.ClearDeclaredLicenses()
	return clu
}

// RemoveDeclaredLicenseIDs removes the "declared_licenses" edge to License entities by IDs.
func (clu *CertifyLegalUpdate) RemoveDeclaredLicenseIDs(ids ...int) *CertifyLegalUpdate {
	clu.mutation.RemoveDeclaredLicenseIDs(ids...)
	return clu
}

// RemoveDeclaredLicenses removes "declared_licenses" edges to License entities.
func (clu *CertifyLegalUpdate) RemoveDeclaredLicenses(l ...*License) *CertifyLegalUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return clu.RemoveDeclaredLicenseIDs(ids...)
}

// ClearDiscoveredLicenses clears all "discovered_licenses" edges to the License entity.
func (clu *CertifyLegalUpdate) ClearDiscoveredLicenses() *CertifyLegalUpdate {
	clu.mutation.ClearDiscoveredLicenses()
	return clu
}

// RemoveDiscoveredLicenseIDs removes the "discovered_licenses" edge to License entities by IDs.
func (clu *CertifyLegalUpdate) RemoveDiscoveredLicenseIDs(ids ...int) *CertifyLegalUpdate {
	clu.mutation.RemoveDiscoveredLicenseIDs(ids...)
	return clu
}

// RemoveDiscoveredLicenses removes "discovered_licenses" edges to License entities.
func (clu *CertifyLegalUpdate) RemoveDiscoveredLicenses(l ...*License) *CertifyLegalUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return clu.RemoveDiscoveredLicenseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CertifyLegalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CertifyLegalUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CertifyLegalUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CertifyLegalUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (clu *CertifyLegalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(certifylegal.Table, certifylegal.Columns, sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeInt))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.DeclaredLicense(); ok {
		_spec.SetField(certifylegal.FieldDeclaredLicense, field.TypeString, value)
	}
	if value, ok := clu.mutation.DiscoveredLicense(); ok {
		_spec.SetField(certifylegal.FieldDiscoveredLicense, field.TypeString, value)
	}
	if value, ok := clu.mutation.Attribution(); ok {
		_spec.SetField(certifylegal.FieldAttribution, field.TypeString, value)
	}
	if value, ok := clu.mutation.Justification(); ok {
		_spec.SetField(certifylegal.FieldJustification, field.TypeString, value)
	}
	if value, ok := clu.mutation.TimeScanned(); ok {
		_spec.SetField(certifylegal.FieldTimeScanned, field.TypeTime, value)
	}
	if value, ok := clu.mutation.Origin(); ok {
		_spec.SetField(certifylegal.FieldOrigin, field.TypeString, value)
	}
	if value, ok := clu.mutation.Collector(); ok {
		_spec.SetField(certifylegal.FieldCollector, field.TypeString, value)
	}
	if value, ok := clu.mutation.DeclaredLicensesHash(); ok {
		_spec.SetField(certifylegal.FieldDeclaredLicensesHash, field.TypeString, value)
	}
	if value, ok := clu.mutation.DiscoveredLicensesHash(); ok {
		_spec.SetField(certifylegal.FieldDiscoveredLicensesHash, field.TypeString, value)
	}
	if clu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifylegal.PackageTable,
			Columns: []string{certifylegal.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifylegal.PackageTable,
			Columns: []string{certifylegal.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifylegal.SourceTable,
			Columns: []string{certifylegal.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifylegal.SourceTable,
			Columns: []string{certifylegal.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.DeclaredLicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DeclaredLicensesTable,
			Columns: certifylegal.DeclaredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.RemovedDeclaredLicensesIDs(); len(nodes) > 0 && !clu.mutation.DeclaredLicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DeclaredLicensesTable,
			Columns: certifylegal.DeclaredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.DeclaredLicensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DeclaredLicensesTable,
			Columns: certifylegal.DeclaredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.DiscoveredLicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DiscoveredLicensesTable,
			Columns: certifylegal.DiscoveredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.RemovedDiscoveredLicensesIDs(); len(nodes) > 0 && !clu.mutation.DiscoveredLicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DiscoveredLicensesTable,
			Columns: certifylegal.DiscoveredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.DiscoveredLicensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DiscoveredLicensesTable,
			Columns: certifylegal.DiscoveredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certifylegal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// CertifyLegalUpdateOne is the builder for updating a single CertifyLegal entity.
type CertifyLegalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertifyLegalMutation
}

// SetPackageID sets the "package_id" field.
func (cluo *CertifyLegalUpdateOne) SetPackageID(i int) *CertifyLegalUpdateOne {
	cluo.mutation.SetPackageID(i)
	return cluo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (cluo *CertifyLegalUpdateOne) SetNillablePackageID(i *int) *CertifyLegalUpdateOne {
	if i != nil {
		cluo.SetPackageID(*i)
	}
	return cluo
}

// ClearPackageID clears the value of the "package_id" field.
func (cluo *CertifyLegalUpdateOne) ClearPackageID() *CertifyLegalUpdateOne {
	cluo.mutation.ClearPackageID()
	return cluo
}

// SetSourceID sets the "source_id" field.
func (cluo *CertifyLegalUpdateOne) SetSourceID(i int) *CertifyLegalUpdateOne {
	cluo.mutation.SetSourceID(i)
	return cluo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (cluo *CertifyLegalUpdateOne) SetNillableSourceID(i *int) *CertifyLegalUpdateOne {
	if i != nil {
		cluo.SetSourceID(*i)
	}
	return cluo
}

// ClearSourceID clears the value of the "source_id" field.
func (cluo *CertifyLegalUpdateOne) ClearSourceID() *CertifyLegalUpdateOne {
	cluo.mutation.ClearSourceID()
	return cluo
}

// SetDeclaredLicense sets the "declared_license" field.
func (cluo *CertifyLegalUpdateOne) SetDeclaredLicense(s string) *CertifyLegalUpdateOne {
	cluo.mutation.SetDeclaredLicense(s)
	return cluo
}

// SetDiscoveredLicense sets the "discovered_license" field.
func (cluo *CertifyLegalUpdateOne) SetDiscoveredLicense(s string) *CertifyLegalUpdateOne {
	cluo.mutation.SetDiscoveredLicense(s)
	return cluo
}

// SetAttribution sets the "attribution" field.
func (cluo *CertifyLegalUpdateOne) SetAttribution(s string) *CertifyLegalUpdateOne {
	cluo.mutation.SetAttribution(s)
	return cluo
}

// SetJustification sets the "justification" field.
func (cluo *CertifyLegalUpdateOne) SetJustification(s string) *CertifyLegalUpdateOne {
	cluo.mutation.SetJustification(s)
	return cluo
}

// SetTimeScanned sets the "time_scanned" field.
func (cluo *CertifyLegalUpdateOne) SetTimeScanned(t time.Time) *CertifyLegalUpdateOne {
	cluo.mutation.SetTimeScanned(t)
	return cluo
}

// SetOrigin sets the "origin" field.
func (cluo *CertifyLegalUpdateOne) SetOrigin(s string) *CertifyLegalUpdateOne {
	cluo.mutation.SetOrigin(s)
	return cluo
}

// SetCollector sets the "collector" field.
func (cluo *CertifyLegalUpdateOne) SetCollector(s string) *CertifyLegalUpdateOne {
	cluo.mutation.SetCollector(s)
	return cluo
}

// SetDeclaredLicensesHash sets the "declared_licenses_hash" field.
func (cluo *CertifyLegalUpdateOne) SetDeclaredLicensesHash(s string) *CertifyLegalUpdateOne {
	cluo.mutation.SetDeclaredLicensesHash(s)
	return cluo
}

// SetDiscoveredLicensesHash sets the "discovered_licenses_hash" field.
func (cluo *CertifyLegalUpdateOne) SetDiscoveredLicensesHash(s string) *CertifyLegalUpdateOne {
	cluo.mutation.SetDiscoveredLicensesHash(s)
	return cluo
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (cluo *CertifyLegalUpdateOne) SetPackage(p *PackageVersion) *CertifyLegalUpdateOne {
	return cluo.SetPackageID(p.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (cluo *CertifyLegalUpdateOne) SetSource(s *SourceName) *CertifyLegalUpdateOne {
	return cluo.SetSourceID(s.ID)
}

// AddDeclaredLicenseIDs adds the "declared_licenses" edge to the License entity by IDs.
func (cluo *CertifyLegalUpdateOne) AddDeclaredLicenseIDs(ids ...int) *CertifyLegalUpdateOne {
	cluo.mutation.AddDeclaredLicenseIDs(ids...)
	return cluo
}

// AddDeclaredLicenses adds the "declared_licenses" edges to the License entity.
func (cluo *CertifyLegalUpdateOne) AddDeclaredLicenses(l ...*License) *CertifyLegalUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cluo.AddDeclaredLicenseIDs(ids...)
}

// AddDiscoveredLicenseIDs adds the "discovered_licenses" edge to the License entity by IDs.
func (cluo *CertifyLegalUpdateOne) AddDiscoveredLicenseIDs(ids ...int) *CertifyLegalUpdateOne {
	cluo.mutation.AddDiscoveredLicenseIDs(ids...)
	return cluo
}

// AddDiscoveredLicenses adds the "discovered_licenses" edges to the License entity.
func (cluo *CertifyLegalUpdateOne) AddDiscoveredLicenses(l ...*License) *CertifyLegalUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cluo.AddDiscoveredLicenseIDs(ids...)
}

// Mutation returns the CertifyLegalMutation object of the builder.
func (cluo *CertifyLegalUpdateOne) Mutation() *CertifyLegalMutation {
	return cluo.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (cluo *CertifyLegalUpdateOne) ClearPackage() *CertifyLegalUpdateOne {
	cluo.mutation.ClearPackage()
	return cluo
}

// ClearSource clears the "source" edge to the SourceName entity.
func (cluo *CertifyLegalUpdateOne) ClearSource() *CertifyLegalUpdateOne {
	cluo.mutation.ClearSource()
	return cluo
}

// ClearDeclaredLicenses clears all "declared_licenses" edges to the License entity.
func (cluo *CertifyLegalUpdateOne) ClearDeclaredLicenses() *CertifyLegalUpdateOne {
	cluo.mutation.ClearDeclaredLicenses()
	return cluo
}

// RemoveDeclaredLicenseIDs removes the "declared_licenses" edge to License entities by IDs.
func (cluo *CertifyLegalUpdateOne) RemoveDeclaredLicenseIDs(ids ...int) *CertifyLegalUpdateOne {
	cluo.mutation.RemoveDeclaredLicenseIDs(ids...)
	return cluo
}

// RemoveDeclaredLicenses removes "declared_licenses" edges to License entities.
func (cluo *CertifyLegalUpdateOne) RemoveDeclaredLicenses(l ...*License) *CertifyLegalUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cluo.RemoveDeclaredLicenseIDs(ids...)
}

// ClearDiscoveredLicenses clears all "discovered_licenses" edges to the License entity.
func (cluo *CertifyLegalUpdateOne) ClearDiscoveredLicenses() *CertifyLegalUpdateOne {
	cluo.mutation.ClearDiscoveredLicenses()
	return cluo
}

// RemoveDiscoveredLicenseIDs removes the "discovered_licenses" edge to License entities by IDs.
func (cluo *CertifyLegalUpdateOne) RemoveDiscoveredLicenseIDs(ids ...int) *CertifyLegalUpdateOne {
	cluo.mutation.RemoveDiscoveredLicenseIDs(ids...)
	return cluo
}

// RemoveDiscoveredLicenses removes "discovered_licenses" edges to License entities.
func (cluo *CertifyLegalUpdateOne) RemoveDiscoveredLicenses(l ...*License) *CertifyLegalUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cluo.RemoveDiscoveredLicenseIDs(ids...)
}

// Where appends a list predicates to the CertifyLegalUpdate builder.
func (cluo *CertifyLegalUpdateOne) Where(ps ...predicate.CertifyLegal) *CertifyLegalUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CertifyLegalUpdateOne) Select(field string, fields ...string) *CertifyLegalUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CertifyLegal entity.
func (cluo *CertifyLegalUpdateOne) Save(ctx context.Context) (*CertifyLegal, error) {
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CertifyLegalUpdateOne) SaveX(ctx context.Context) *CertifyLegal {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CertifyLegalUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CertifyLegalUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cluo *CertifyLegalUpdateOne) sqlSave(ctx context.Context) (_node *CertifyLegal, err error) {
	_spec := sqlgraph.NewUpdateSpec(certifylegal.Table, certifylegal.Columns, sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeInt))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CertifyLegal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certifylegal.FieldID)
		for _, f := range fields {
			if !certifylegal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certifylegal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.DeclaredLicense(); ok {
		_spec.SetField(certifylegal.FieldDeclaredLicense, field.TypeString, value)
	}
	if value, ok := cluo.mutation.DiscoveredLicense(); ok {
		_spec.SetField(certifylegal.FieldDiscoveredLicense, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Attribution(); ok {
		_spec.SetField(certifylegal.FieldAttribution, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Justification(); ok {
		_spec.SetField(certifylegal.FieldJustification, field.TypeString, value)
	}
	if value, ok := cluo.mutation.TimeScanned(); ok {
		_spec.SetField(certifylegal.FieldTimeScanned, field.TypeTime, value)
	}
	if value, ok := cluo.mutation.Origin(); ok {
		_spec.SetField(certifylegal.FieldOrigin, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Collector(); ok {
		_spec.SetField(certifylegal.FieldCollector, field.TypeString, value)
	}
	if value, ok := cluo.mutation.DeclaredLicensesHash(); ok {
		_spec.SetField(certifylegal.FieldDeclaredLicensesHash, field.TypeString, value)
	}
	if value, ok := cluo.mutation.DiscoveredLicensesHash(); ok {
		_spec.SetField(certifylegal.FieldDiscoveredLicensesHash, field.TypeString, value)
	}
	if cluo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifylegal.PackageTable,
			Columns: []string{certifylegal.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifylegal.PackageTable,
			Columns: []string{certifylegal.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifylegal.SourceTable,
			Columns: []string{certifylegal.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifylegal.SourceTable,
			Columns: []string{certifylegal.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.DeclaredLicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DeclaredLicensesTable,
			Columns: certifylegal.DeclaredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.RemovedDeclaredLicensesIDs(); len(nodes) > 0 && !cluo.mutation.DeclaredLicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DeclaredLicensesTable,
			Columns: certifylegal.DeclaredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.DeclaredLicensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DeclaredLicensesTable,
			Columns: certifylegal.DeclaredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.DiscoveredLicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DiscoveredLicensesTable,
			Columns: certifylegal.DiscoveredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.RemovedDiscoveredLicensesIDs(); len(nodes) > 0 && !cluo.mutation.DiscoveredLicensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DiscoveredLicensesTable,
			Columns: certifylegal.DiscoveredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.DiscoveredLicensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifylegal.DiscoveredLicensesTable,
			Columns: certifylegal.DiscoveredLicensesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CertifyLegal{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certifylegal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}

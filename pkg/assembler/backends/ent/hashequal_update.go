// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// HashEqualUpdate is the builder for updating HashEqual entities.
type HashEqualUpdate struct {
	config
	hooks    []Hook
	mutation *HashEqualMutation
}

// Where appends a list predicates to the HashEqualUpdate builder.
func (heu *HashEqualUpdate) Where(ps ...predicate.HashEqual) *HashEqualUpdate {
	heu.mutation.Where(ps...)
	return heu
}

// SetOrigin sets the "origin" field.
func (heu *HashEqualUpdate) SetOrigin(s string) *HashEqualUpdate {
	heu.mutation.SetOrigin(s)
	return heu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (heu *HashEqualUpdate) SetNillableOrigin(s *string) *HashEqualUpdate {
	if s != nil {
		heu.SetOrigin(*s)
	}
	return heu
}

// SetCollector sets the "collector" field.
func (heu *HashEqualUpdate) SetCollector(s string) *HashEqualUpdate {
	heu.mutation.SetCollector(s)
	return heu
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (heu *HashEqualUpdate) SetNillableCollector(s *string) *HashEqualUpdate {
	if s != nil {
		heu.SetCollector(*s)
	}
	return heu
}

// SetJustification sets the "justification" field.
func (heu *HashEqualUpdate) SetJustification(s string) *HashEqualUpdate {
	heu.mutation.SetJustification(s)
	return heu
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (heu *HashEqualUpdate) SetNillableJustification(s *string) *HashEqualUpdate {
	if s != nil {
		heu.SetJustification(*s)
	}
	return heu
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (heu *HashEqualUpdate) AddArtifactIDs(ids ...int) *HashEqualUpdate {
	heu.mutation.AddArtifactIDs(ids...)
	return heu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (heu *HashEqualUpdate) AddArtifacts(a ...*Artifact) *HashEqualUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return heu.AddArtifactIDs(ids...)
}

// Mutation returns the HashEqualMutation object of the builder.
func (heu *HashEqualUpdate) Mutation() *HashEqualMutation {
	return heu.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (heu *HashEqualUpdate) ClearArtifacts() *HashEqualUpdate {
	heu.mutation.ClearArtifacts()
	return heu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (heu *HashEqualUpdate) RemoveArtifactIDs(ids ...int) *HashEqualUpdate {
	heu.mutation.RemoveArtifactIDs(ids...)
	return heu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (heu *HashEqualUpdate) RemoveArtifacts(a ...*Artifact) *HashEqualUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return heu.RemoveArtifactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (heu *HashEqualUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, heu.sqlSave, heu.mutation, heu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (heu *HashEqualUpdate) SaveX(ctx context.Context) int {
	affected, err := heu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (heu *HashEqualUpdate) Exec(ctx context.Context) error {
	_, err := heu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (heu *HashEqualUpdate) ExecX(ctx context.Context) {
	if err := heu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (heu *HashEqualUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hashequal.Table, hashequal.Columns, sqlgraph.NewFieldSpec(hashequal.FieldID, field.TypeInt))
	if ps := heu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := heu.mutation.Origin(); ok {
		_spec.SetField(hashequal.FieldOrigin, field.TypeString, value)
	}
	if value, ok := heu.mutation.Collector(); ok {
		_spec.SetField(hashequal.FieldCollector, field.TypeString, value)
	}
	if value, ok := heu.mutation.Justification(); ok {
		_spec.SetField(hashequal.FieldJustification, field.TypeString, value)
	}
	if heu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hashequal.ArtifactsTable,
			Columns: hashequal.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := heu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !heu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hashequal.ArtifactsTable,
			Columns: hashequal.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := heu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hashequal.ArtifactsTable,
			Columns: hashequal.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, heu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hashequal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	heu.mutation.done = true
	return n, nil
}

// HashEqualUpdateOne is the builder for updating a single HashEqual entity.
type HashEqualUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HashEqualMutation
}

// SetOrigin sets the "origin" field.
func (heuo *HashEqualUpdateOne) SetOrigin(s string) *HashEqualUpdateOne {
	heuo.mutation.SetOrigin(s)
	return heuo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (heuo *HashEqualUpdateOne) SetNillableOrigin(s *string) *HashEqualUpdateOne {
	if s != nil {
		heuo.SetOrigin(*s)
	}
	return heuo
}

// SetCollector sets the "collector" field.
func (heuo *HashEqualUpdateOne) SetCollector(s string) *HashEqualUpdateOne {
	heuo.mutation.SetCollector(s)
	return heuo
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (heuo *HashEqualUpdateOne) SetNillableCollector(s *string) *HashEqualUpdateOne {
	if s != nil {
		heuo.SetCollector(*s)
	}
	return heuo
}

// SetJustification sets the "justification" field.
func (heuo *HashEqualUpdateOne) SetJustification(s string) *HashEqualUpdateOne {
	heuo.mutation.SetJustification(s)
	return heuo
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (heuo *HashEqualUpdateOne) SetNillableJustification(s *string) *HashEqualUpdateOne {
	if s != nil {
		heuo.SetJustification(*s)
	}
	return heuo
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (heuo *HashEqualUpdateOne) AddArtifactIDs(ids ...int) *HashEqualUpdateOne {
	heuo.mutation.AddArtifactIDs(ids...)
	return heuo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (heuo *HashEqualUpdateOne) AddArtifacts(a ...*Artifact) *HashEqualUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return heuo.AddArtifactIDs(ids...)
}

// Mutation returns the HashEqualMutation object of the builder.
func (heuo *HashEqualUpdateOne) Mutation() *HashEqualMutation {
	return heuo.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (heuo *HashEqualUpdateOne) ClearArtifacts() *HashEqualUpdateOne {
	heuo.mutation.ClearArtifacts()
	return heuo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (heuo *HashEqualUpdateOne) RemoveArtifactIDs(ids ...int) *HashEqualUpdateOne {
	heuo.mutation.RemoveArtifactIDs(ids...)
	return heuo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (heuo *HashEqualUpdateOne) RemoveArtifacts(a ...*Artifact) *HashEqualUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return heuo.RemoveArtifactIDs(ids...)
}

// Where appends a list predicates to the HashEqualUpdate builder.
func (heuo *HashEqualUpdateOne) Where(ps ...predicate.HashEqual) *HashEqualUpdateOne {
	heuo.mutation.Where(ps...)
	return heuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (heuo *HashEqualUpdateOne) Select(field string, fields ...string) *HashEqualUpdateOne {
	heuo.fields = append([]string{field}, fields...)
	return heuo
}

// Save executes the query and returns the updated HashEqual entity.
func (heuo *HashEqualUpdateOne) Save(ctx context.Context) (*HashEqual, error) {
	return withHooks(ctx, heuo.sqlSave, heuo.mutation, heuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (heuo *HashEqualUpdateOne) SaveX(ctx context.Context) *HashEqual {
	node, err := heuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (heuo *HashEqualUpdateOne) Exec(ctx context.Context) error {
	_, err := heuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (heuo *HashEqualUpdateOne) ExecX(ctx context.Context) {
	if err := heuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (heuo *HashEqualUpdateOne) sqlSave(ctx context.Context) (_node *HashEqual, err error) {
	_spec := sqlgraph.NewUpdateSpec(hashequal.Table, hashequal.Columns, sqlgraph.NewFieldSpec(hashequal.FieldID, field.TypeInt))
	id, ok := heuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HashEqual.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := heuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hashequal.FieldID)
		for _, f := range fields {
			if !hashequal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hashequal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := heuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := heuo.mutation.Origin(); ok {
		_spec.SetField(hashequal.FieldOrigin, field.TypeString, value)
	}
	if value, ok := heuo.mutation.Collector(); ok {
		_spec.SetField(hashequal.FieldCollector, field.TypeString, value)
	}
	if value, ok := heuo.mutation.Justification(); ok {
		_spec.SetField(hashequal.FieldJustification, field.TypeString, value)
	}
	if heuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hashequal.ArtifactsTable,
			Columns: hashequal.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := heuo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !heuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hashequal.ArtifactsTable,
			Columns: hashequal.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := heuo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hashequal.ArtifactsTable,
			Columns: hashequal.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HashEqual{config: heuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, heuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hashequal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	heuo.mutation.done = true
	return _node, nil
}

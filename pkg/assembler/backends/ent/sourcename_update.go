// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifylegal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hasmetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hassourceat"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pointofcontact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// SourceNameUpdate is the builder for updating SourceName entities.
type SourceNameUpdate struct {
	config
	hooks    []Hook
	mutation *SourceNameMutation
}

// Where appends a list predicates to the SourceNameUpdate builder.
func (snu *SourceNameUpdate) Where(ps ...predicate.SourceName) *SourceNameUpdate {
	snu.mutation.Where(ps...)
	return snu
}

// SetType sets the "type" field.
func (snu *SourceNameUpdate) SetType(s string) *SourceNameUpdate {
	snu.mutation.SetType(s)
	return snu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableType(s *string) *SourceNameUpdate {
	if s != nil {
		snu.SetType(*s)
	}
	return snu
}

// SetNamespace sets the "namespace" field.
func (snu *SourceNameUpdate) SetNamespace(s string) *SourceNameUpdate {
	snu.mutation.SetNamespace(s)
	return snu
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableNamespace(s *string) *SourceNameUpdate {
	if s != nil {
		snu.SetNamespace(*s)
	}
	return snu
}

// SetName sets the "name" field.
func (snu *SourceNameUpdate) SetName(s string) *SourceNameUpdate {
	snu.mutation.SetName(s)
	return snu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableName(s *string) *SourceNameUpdate {
	if s != nil {
		snu.SetName(*s)
	}
	return snu
}

// SetCommit sets the "commit" field.
func (snu *SourceNameUpdate) SetCommit(s string) *SourceNameUpdate {
	snu.mutation.SetCommit(s)
	return snu
}

// SetNillableCommit sets the "commit" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableCommit(s *string) *SourceNameUpdate {
	if s != nil {
		snu.SetCommit(*s)
	}
	return snu
}

// ClearCommit clears the value of the "commit" field.
func (snu *SourceNameUpdate) ClearCommit() *SourceNameUpdate {
	snu.mutation.ClearCommit()
	return snu
}

// SetTag sets the "tag" field.
func (snu *SourceNameUpdate) SetTag(s string) *SourceNameUpdate {
	snu.mutation.SetTag(s)
	return snu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableTag(s *string) *SourceNameUpdate {
	if s != nil {
		snu.SetTag(*s)
	}
	return snu
}

// ClearTag clears the value of the "tag" field.
func (snu *SourceNameUpdate) ClearTag() *SourceNameUpdate {
	snu.mutation.ClearTag()
	return snu
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (snu *SourceNameUpdate) AddOccurrenceIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.AddOccurrenceIDs(ids...)
	return snu
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (snu *SourceNameUpdate) AddOccurrences(o ...*Occurrence) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snu.AddOccurrenceIDs(ids...)
}

// AddHasSourceAtIDs adds the "has_source_at" edge to the HasSourceAt entity by IDs.
func (snu *SourceNameUpdate) AddHasSourceAtIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.AddHasSourceAtIDs(ids...)
	return snu
}

// AddHasSourceAt adds the "has_source_at" edges to the HasSourceAt entity.
func (snu *SourceNameUpdate) AddHasSourceAt(h ...*HasSourceAt) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return snu.AddHasSourceAtIDs(ids...)
}

// AddScorecardIDs adds the "scorecard" edge to the CertifyScorecard entity by IDs.
func (snu *SourceNameUpdate) AddScorecardIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.AddScorecardIDs(ids...)
	return snu
}

// AddScorecard adds the "scorecard" edges to the CertifyScorecard entity.
func (snu *SourceNameUpdate) AddScorecard(c ...*CertifyScorecard) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snu.AddScorecardIDs(ids...)
}

// AddCertificationIDs adds the "certification" edge to the Certification entity by IDs.
func (snu *SourceNameUpdate) AddCertificationIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.AddCertificationIDs(ids...)
	return snu
}

// AddCertification adds the "certification" edges to the Certification entity.
func (snu *SourceNameUpdate) AddCertification(c ...*Certification) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snu.AddCertificationIDs(ids...)
}

// AddMetadatumIDs adds the "metadata" edge to the HasMetadata entity by IDs.
func (snu *SourceNameUpdate) AddMetadatumIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.AddMetadatumIDs(ids...)
	return snu
}

// AddMetadata adds the "metadata" edges to the HasMetadata entity.
func (snu *SourceNameUpdate) AddMetadata(h ...*HasMetadata) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return snu.AddMetadatumIDs(ids...)
}

// AddPocIDs adds the "poc" edge to the PointOfContact entity by IDs.
func (snu *SourceNameUpdate) AddPocIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.AddPocIDs(ids...)
	return snu
}

// AddPoc adds the "poc" edges to the PointOfContact entity.
func (snu *SourceNameUpdate) AddPoc(p ...*PointOfContact) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return snu.AddPocIDs(ids...)
}

// AddCertifyLegalIDs adds the "certify_legal" edge to the CertifyLegal entity by IDs.
func (snu *SourceNameUpdate) AddCertifyLegalIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.AddCertifyLegalIDs(ids...)
	return snu
}

// AddCertifyLegal adds the "certify_legal" edges to the CertifyLegal entity.
func (snu *SourceNameUpdate) AddCertifyLegal(c ...*CertifyLegal) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snu.AddCertifyLegalIDs(ids...)
}

// Mutation returns the SourceNameMutation object of the builder.
func (snu *SourceNameUpdate) Mutation() *SourceNameMutation {
	return snu.mutation
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (snu *SourceNameUpdate) ClearOccurrences() *SourceNameUpdate {
	snu.mutation.ClearOccurrences()
	return snu
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (snu *SourceNameUpdate) RemoveOccurrenceIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.RemoveOccurrenceIDs(ids...)
	return snu
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (snu *SourceNameUpdate) RemoveOccurrences(o ...*Occurrence) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snu.RemoveOccurrenceIDs(ids...)
}

// ClearHasSourceAt clears all "has_source_at" edges to the HasSourceAt entity.
func (snu *SourceNameUpdate) ClearHasSourceAt() *SourceNameUpdate {
	snu.mutation.ClearHasSourceAt()
	return snu
}

// RemoveHasSourceAtIDs removes the "has_source_at" edge to HasSourceAt entities by IDs.
func (snu *SourceNameUpdate) RemoveHasSourceAtIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.RemoveHasSourceAtIDs(ids...)
	return snu
}

// RemoveHasSourceAt removes "has_source_at" edges to HasSourceAt entities.
func (snu *SourceNameUpdate) RemoveHasSourceAt(h ...*HasSourceAt) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return snu.RemoveHasSourceAtIDs(ids...)
}

// ClearScorecard clears all "scorecard" edges to the CertifyScorecard entity.
func (snu *SourceNameUpdate) ClearScorecard() *SourceNameUpdate {
	snu.mutation.ClearScorecard()
	return snu
}

// RemoveScorecardIDs removes the "scorecard" edge to CertifyScorecard entities by IDs.
func (snu *SourceNameUpdate) RemoveScorecardIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.RemoveScorecardIDs(ids...)
	return snu
}

// RemoveScorecard removes "scorecard" edges to CertifyScorecard entities.
func (snu *SourceNameUpdate) RemoveScorecard(c ...*CertifyScorecard) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snu.RemoveScorecardIDs(ids...)
}

// ClearCertification clears all "certification" edges to the Certification entity.
func (snu *SourceNameUpdate) ClearCertification() *SourceNameUpdate {
	snu.mutation.ClearCertification()
	return snu
}

// RemoveCertificationIDs removes the "certification" edge to Certification entities by IDs.
func (snu *SourceNameUpdate) RemoveCertificationIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.RemoveCertificationIDs(ids...)
	return snu
}

// RemoveCertification removes "certification" edges to Certification entities.
func (snu *SourceNameUpdate) RemoveCertification(c ...*Certification) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snu.RemoveCertificationIDs(ids...)
}

// ClearMetadata clears all "metadata" edges to the HasMetadata entity.
func (snu *SourceNameUpdate) ClearMetadata() *SourceNameUpdate {
	snu.mutation.ClearMetadata()
	return snu
}

// RemoveMetadatumIDs removes the "metadata" edge to HasMetadata entities by IDs.
func (snu *SourceNameUpdate) RemoveMetadatumIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.RemoveMetadatumIDs(ids...)
	return snu
}

// RemoveMetadata removes "metadata" edges to HasMetadata entities.
func (snu *SourceNameUpdate) RemoveMetadata(h ...*HasMetadata) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return snu.RemoveMetadatumIDs(ids...)
}

// ClearPoc clears all "poc" edges to the PointOfContact entity.
func (snu *SourceNameUpdate) ClearPoc() *SourceNameUpdate {
	snu.mutation.ClearPoc()
	return snu
}

// RemovePocIDs removes the "poc" edge to PointOfContact entities by IDs.
func (snu *SourceNameUpdate) RemovePocIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.RemovePocIDs(ids...)
	return snu
}

// RemovePoc removes "poc" edges to PointOfContact entities.
func (snu *SourceNameUpdate) RemovePoc(p ...*PointOfContact) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return snu.RemovePocIDs(ids...)
}

// ClearCertifyLegal clears all "certify_legal" edges to the CertifyLegal entity.
func (snu *SourceNameUpdate) ClearCertifyLegal() *SourceNameUpdate {
	snu.mutation.ClearCertifyLegal()
	return snu
}

// RemoveCertifyLegalIDs removes the "certify_legal" edge to CertifyLegal entities by IDs.
func (snu *SourceNameUpdate) RemoveCertifyLegalIDs(ids ...uuid.UUID) *SourceNameUpdate {
	snu.mutation.RemoveCertifyLegalIDs(ids...)
	return snu
}

// RemoveCertifyLegal removes "certify_legal" edges to CertifyLegal entities.
func (snu *SourceNameUpdate) RemoveCertifyLegal(c ...*CertifyLegal) *SourceNameUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snu.RemoveCertifyLegalIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (snu *SourceNameUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, snu.sqlSave, snu.mutation, snu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snu *SourceNameUpdate) SaveX(ctx context.Context) int {
	affected, err := snu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (snu *SourceNameUpdate) Exec(ctx context.Context) error {
	_, err := snu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snu *SourceNameUpdate) ExecX(ctx context.Context) {
	if err := snu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (snu *SourceNameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sourcename.Table, sourcename.Columns, sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeUUID))
	if ps := snu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snu.mutation.GetType(); ok {
		_spec.SetField(sourcename.FieldType, field.TypeString, value)
	}
	if value, ok := snu.mutation.Namespace(); ok {
		_spec.SetField(sourcename.FieldNamespace, field.TypeString, value)
	}
	if value, ok := snu.mutation.Name(); ok {
		_spec.SetField(sourcename.FieldName, field.TypeString, value)
	}
	if value, ok := snu.mutation.Commit(); ok {
		_spec.SetField(sourcename.FieldCommit, field.TypeString, value)
	}
	if snu.mutation.CommitCleared() {
		_spec.ClearField(sourcename.FieldCommit, field.TypeString)
	}
	if value, ok := snu.mutation.Tag(); ok {
		_spec.SetField(sourcename.FieldTag, field.TypeString, value)
	}
	if snu.mutation.TagCleared() {
		_spec.ClearField(sourcename.FieldTag, field.TypeString)
	}
	if snu.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.RemovedOccurrencesIDs(); len(nodes) > 0 && !snu.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.OccurrencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snu.mutation.HasSourceAtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.HasSourceAtTable,
			Columns: []string{sourcename.HasSourceAtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hassourceat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.RemovedHasSourceAtIDs(); len(nodes) > 0 && !snu.mutation.HasSourceAtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.HasSourceAtTable,
			Columns: []string{sourcename.HasSourceAtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hassourceat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.HasSourceAtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.HasSourceAtTable,
			Columns: []string{sourcename.HasSourceAtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hassourceat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snu.mutation.ScorecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.ScorecardTable,
			Columns: []string{sourcename.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.RemovedScorecardIDs(); len(nodes) > 0 && !snu.mutation.ScorecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.ScorecardTable,
			Columns: []string{sourcename.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.ScorecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.ScorecardTable,
			Columns: []string{sourcename.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snu.mutation.CertificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertificationTable,
			Columns: []string{sourcename.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.RemovedCertificationIDs(); len(nodes) > 0 && !snu.mutation.CertificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertificationTable,
			Columns: []string{sourcename.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.CertificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertificationTable,
			Columns: []string{sourcename.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.MetadataTable,
			Columns: []string{sourcename.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !snu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.MetadataTable,
			Columns: []string{sourcename.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.MetadataTable,
			Columns: []string{sourcename.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snu.mutation.PocCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.PocTable,
			Columns: []string{sourcename.PocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointofcontact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.RemovedPocIDs(); len(nodes) > 0 && !snu.mutation.PocCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.PocTable,
			Columns: []string{sourcename.PocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointofcontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.PocIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.PocTable,
			Columns: []string{sourcename.PocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointofcontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snu.mutation.CertifyLegalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertifyLegalTable,
			Columns: []string{sourcename.CertifyLegalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.RemovedCertifyLegalIDs(); len(nodes) > 0 && !snu.mutation.CertifyLegalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertifyLegalTable,
			Columns: []string{sourcename.CertifyLegalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.CertifyLegalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertifyLegalTable,
			Columns: []string{sourcename.CertifyLegalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, snu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sourcename.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	snu.mutation.done = true
	return n, nil
}

// SourceNameUpdateOne is the builder for updating a single SourceName entity.
type SourceNameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SourceNameMutation
}

// SetType sets the "type" field.
func (snuo *SourceNameUpdateOne) SetType(s string) *SourceNameUpdateOne {
	snuo.mutation.SetType(s)
	return snuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableType(s *string) *SourceNameUpdateOne {
	if s != nil {
		snuo.SetType(*s)
	}
	return snuo
}

// SetNamespace sets the "namespace" field.
func (snuo *SourceNameUpdateOne) SetNamespace(s string) *SourceNameUpdateOne {
	snuo.mutation.SetNamespace(s)
	return snuo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableNamespace(s *string) *SourceNameUpdateOne {
	if s != nil {
		snuo.SetNamespace(*s)
	}
	return snuo
}

// SetName sets the "name" field.
func (snuo *SourceNameUpdateOne) SetName(s string) *SourceNameUpdateOne {
	snuo.mutation.SetName(s)
	return snuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableName(s *string) *SourceNameUpdateOne {
	if s != nil {
		snuo.SetName(*s)
	}
	return snuo
}

// SetCommit sets the "commit" field.
func (snuo *SourceNameUpdateOne) SetCommit(s string) *SourceNameUpdateOne {
	snuo.mutation.SetCommit(s)
	return snuo
}

// SetNillableCommit sets the "commit" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableCommit(s *string) *SourceNameUpdateOne {
	if s != nil {
		snuo.SetCommit(*s)
	}
	return snuo
}

// ClearCommit clears the value of the "commit" field.
func (snuo *SourceNameUpdateOne) ClearCommit() *SourceNameUpdateOne {
	snuo.mutation.ClearCommit()
	return snuo
}

// SetTag sets the "tag" field.
func (snuo *SourceNameUpdateOne) SetTag(s string) *SourceNameUpdateOne {
	snuo.mutation.SetTag(s)
	return snuo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableTag(s *string) *SourceNameUpdateOne {
	if s != nil {
		snuo.SetTag(*s)
	}
	return snuo
}

// ClearTag clears the value of the "tag" field.
func (snuo *SourceNameUpdateOne) ClearTag() *SourceNameUpdateOne {
	snuo.mutation.ClearTag()
	return snuo
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (snuo *SourceNameUpdateOne) AddOccurrenceIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.AddOccurrenceIDs(ids...)
	return snuo
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (snuo *SourceNameUpdateOne) AddOccurrences(o ...*Occurrence) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snuo.AddOccurrenceIDs(ids...)
}

// AddHasSourceAtIDs adds the "has_source_at" edge to the HasSourceAt entity by IDs.
func (snuo *SourceNameUpdateOne) AddHasSourceAtIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.AddHasSourceAtIDs(ids...)
	return snuo
}

// AddHasSourceAt adds the "has_source_at" edges to the HasSourceAt entity.
func (snuo *SourceNameUpdateOne) AddHasSourceAt(h ...*HasSourceAt) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return snuo.AddHasSourceAtIDs(ids...)
}

// AddScorecardIDs adds the "scorecard" edge to the CertifyScorecard entity by IDs.
func (snuo *SourceNameUpdateOne) AddScorecardIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.AddScorecardIDs(ids...)
	return snuo
}

// AddScorecard adds the "scorecard" edges to the CertifyScorecard entity.
func (snuo *SourceNameUpdateOne) AddScorecard(c ...*CertifyScorecard) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snuo.AddScorecardIDs(ids...)
}

// AddCertificationIDs adds the "certification" edge to the Certification entity by IDs.
func (snuo *SourceNameUpdateOne) AddCertificationIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.AddCertificationIDs(ids...)
	return snuo
}

// AddCertification adds the "certification" edges to the Certification entity.
func (snuo *SourceNameUpdateOne) AddCertification(c ...*Certification) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snuo.AddCertificationIDs(ids...)
}

// AddMetadatumIDs adds the "metadata" edge to the HasMetadata entity by IDs.
func (snuo *SourceNameUpdateOne) AddMetadatumIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.AddMetadatumIDs(ids...)
	return snuo
}

// AddMetadata adds the "metadata" edges to the HasMetadata entity.
func (snuo *SourceNameUpdateOne) AddMetadata(h ...*HasMetadata) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return snuo.AddMetadatumIDs(ids...)
}

// AddPocIDs adds the "poc" edge to the PointOfContact entity by IDs.
func (snuo *SourceNameUpdateOne) AddPocIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.AddPocIDs(ids...)
	return snuo
}

// AddPoc adds the "poc" edges to the PointOfContact entity.
func (snuo *SourceNameUpdateOne) AddPoc(p ...*PointOfContact) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return snuo.AddPocIDs(ids...)
}

// AddCertifyLegalIDs adds the "certify_legal" edge to the CertifyLegal entity by IDs.
func (snuo *SourceNameUpdateOne) AddCertifyLegalIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.AddCertifyLegalIDs(ids...)
	return snuo
}

// AddCertifyLegal adds the "certify_legal" edges to the CertifyLegal entity.
func (snuo *SourceNameUpdateOne) AddCertifyLegal(c ...*CertifyLegal) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snuo.AddCertifyLegalIDs(ids...)
}

// Mutation returns the SourceNameMutation object of the builder.
func (snuo *SourceNameUpdateOne) Mutation() *SourceNameMutation {
	return snuo.mutation
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (snuo *SourceNameUpdateOne) ClearOccurrences() *SourceNameUpdateOne {
	snuo.mutation.ClearOccurrences()
	return snuo
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (snuo *SourceNameUpdateOne) RemoveOccurrenceIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.RemoveOccurrenceIDs(ids...)
	return snuo
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (snuo *SourceNameUpdateOne) RemoveOccurrences(o ...*Occurrence) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snuo.RemoveOccurrenceIDs(ids...)
}

// ClearHasSourceAt clears all "has_source_at" edges to the HasSourceAt entity.
func (snuo *SourceNameUpdateOne) ClearHasSourceAt() *SourceNameUpdateOne {
	snuo.mutation.ClearHasSourceAt()
	return snuo
}

// RemoveHasSourceAtIDs removes the "has_source_at" edge to HasSourceAt entities by IDs.
func (snuo *SourceNameUpdateOne) RemoveHasSourceAtIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.RemoveHasSourceAtIDs(ids...)
	return snuo
}

// RemoveHasSourceAt removes "has_source_at" edges to HasSourceAt entities.
func (snuo *SourceNameUpdateOne) RemoveHasSourceAt(h ...*HasSourceAt) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return snuo.RemoveHasSourceAtIDs(ids...)
}

// ClearScorecard clears all "scorecard" edges to the CertifyScorecard entity.
func (snuo *SourceNameUpdateOne) ClearScorecard() *SourceNameUpdateOne {
	snuo.mutation.ClearScorecard()
	return snuo
}

// RemoveScorecardIDs removes the "scorecard" edge to CertifyScorecard entities by IDs.
func (snuo *SourceNameUpdateOne) RemoveScorecardIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.RemoveScorecardIDs(ids...)
	return snuo
}

// RemoveScorecard removes "scorecard" edges to CertifyScorecard entities.
func (snuo *SourceNameUpdateOne) RemoveScorecard(c ...*CertifyScorecard) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snuo.RemoveScorecardIDs(ids...)
}

// ClearCertification clears all "certification" edges to the Certification entity.
func (snuo *SourceNameUpdateOne) ClearCertification() *SourceNameUpdateOne {
	snuo.mutation.ClearCertification()
	return snuo
}

// RemoveCertificationIDs removes the "certification" edge to Certification entities by IDs.
func (snuo *SourceNameUpdateOne) RemoveCertificationIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.RemoveCertificationIDs(ids...)
	return snuo
}

// RemoveCertification removes "certification" edges to Certification entities.
func (snuo *SourceNameUpdateOne) RemoveCertification(c ...*Certification) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snuo.RemoveCertificationIDs(ids...)
}

// ClearMetadata clears all "metadata" edges to the HasMetadata entity.
func (snuo *SourceNameUpdateOne) ClearMetadata() *SourceNameUpdateOne {
	snuo.mutation.ClearMetadata()
	return snuo
}

// RemoveMetadatumIDs removes the "metadata" edge to HasMetadata entities by IDs.
func (snuo *SourceNameUpdateOne) RemoveMetadatumIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.RemoveMetadatumIDs(ids...)
	return snuo
}

// RemoveMetadata removes "metadata" edges to HasMetadata entities.
func (snuo *SourceNameUpdateOne) RemoveMetadata(h ...*HasMetadata) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return snuo.RemoveMetadatumIDs(ids...)
}

// ClearPoc clears all "poc" edges to the PointOfContact entity.
func (snuo *SourceNameUpdateOne) ClearPoc() *SourceNameUpdateOne {
	snuo.mutation.ClearPoc()
	return snuo
}

// RemovePocIDs removes the "poc" edge to PointOfContact entities by IDs.
func (snuo *SourceNameUpdateOne) RemovePocIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.RemovePocIDs(ids...)
	return snuo
}

// RemovePoc removes "poc" edges to PointOfContact entities.
func (snuo *SourceNameUpdateOne) RemovePoc(p ...*PointOfContact) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return snuo.RemovePocIDs(ids...)
}

// ClearCertifyLegal clears all "certify_legal" edges to the CertifyLegal entity.
func (snuo *SourceNameUpdateOne) ClearCertifyLegal() *SourceNameUpdateOne {
	snuo.mutation.ClearCertifyLegal()
	return snuo
}

// RemoveCertifyLegalIDs removes the "certify_legal" edge to CertifyLegal entities by IDs.
func (snuo *SourceNameUpdateOne) RemoveCertifyLegalIDs(ids ...uuid.UUID) *SourceNameUpdateOne {
	snuo.mutation.RemoveCertifyLegalIDs(ids...)
	return snuo
}

// RemoveCertifyLegal removes "certify_legal" edges to CertifyLegal entities.
func (snuo *SourceNameUpdateOne) RemoveCertifyLegal(c ...*CertifyLegal) *SourceNameUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return snuo.RemoveCertifyLegalIDs(ids...)
}

// Where appends a list predicates to the SourceNameUpdate builder.
func (snuo *SourceNameUpdateOne) Where(ps ...predicate.SourceName) *SourceNameUpdateOne {
	snuo.mutation.Where(ps...)
	return snuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (snuo *SourceNameUpdateOne) Select(field string, fields ...string) *SourceNameUpdateOne {
	snuo.fields = append([]string{field}, fields...)
	return snuo
}

// Save executes the query and returns the updated SourceName entity.
func (snuo *SourceNameUpdateOne) Save(ctx context.Context) (*SourceName, error) {
	return withHooks(ctx, snuo.sqlSave, snuo.mutation, snuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snuo *SourceNameUpdateOne) SaveX(ctx context.Context) *SourceName {
	node, err := snuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (snuo *SourceNameUpdateOne) Exec(ctx context.Context) error {
	_, err := snuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snuo *SourceNameUpdateOne) ExecX(ctx context.Context) {
	if err := snuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (snuo *SourceNameUpdateOne) sqlSave(ctx context.Context) (_node *SourceName, err error) {
	_spec := sqlgraph.NewUpdateSpec(sourcename.Table, sourcename.Columns, sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeUUID))
	id, ok := snuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SourceName.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := snuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sourcename.FieldID)
		for _, f := range fields {
			if !sourcename.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sourcename.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := snuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snuo.mutation.GetType(); ok {
		_spec.SetField(sourcename.FieldType, field.TypeString, value)
	}
	if value, ok := snuo.mutation.Namespace(); ok {
		_spec.SetField(sourcename.FieldNamespace, field.TypeString, value)
	}
	if value, ok := snuo.mutation.Name(); ok {
		_spec.SetField(sourcename.FieldName, field.TypeString, value)
	}
	if value, ok := snuo.mutation.Commit(); ok {
		_spec.SetField(sourcename.FieldCommit, field.TypeString, value)
	}
	if snuo.mutation.CommitCleared() {
		_spec.ClearField(sourcename.FieldCommit, field.TypeString)
	}
	if value, ok := snuo.mutation.Tag(); ok {
		_spec.SetField(sourcename.FieldTag, field.TypeString, value)
	}
	if snuo.mutation.TagCleared() {
		_spec.ClearField(sourcename.FieldTag, field.TypeString)
	}
	if snuo.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.RemovedOccurrencesIDs(); len(nodes) > 0 && !snuo.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.OccurrencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snuo.mutation.HasSourceAtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.HasSourceAtTable,
			Columns: []string{sourcename.HasSourceAtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hassourceat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.RemovedHasSourceAtIDs(); len(nodes) > 0 && !snuo.mutation.HasSourceAtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.HasSourceAtTable,
			Columns: []string{sourcename.HasSourceAtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hassourceat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.HasSourceAtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.HasSourceAtTable,
			Columns: []string{sourcename.HasSourceAtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hassourceat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snuo.mutation.ScorecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.ScorecardTable,
			Columns: []string{sourcename.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.RemovedScorecardIDs(); len(nodes) > 0 && !snuo.mutation.ScorecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.ScorecardTable,
			Columns: []string{sourcename.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.ScorecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.ScorecardTable,
			Columns: []string{sourcename.ScorecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snuo.mutation.CertificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertificationTable,
			Columns: []string{sourcename.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.RemovedCertificationIDs(); len(nodes) > 0 && !snuo.mutation.CertificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertificationTable,
			Columns: []string{sourcename.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.CertificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertificationTable,
			Columns: []string{sourcename.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.MetadataTable,
			Columns: []string{sourcename.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !snuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.MetadataTable,
			Columns: []string{sourcename.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.MetadataTable,
			Columns: []string{sourcename.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snuo.mutation.PocCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.PocTable,
			Columns: []string{sourcename.PocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointofcontact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.RemovedPocIDs(); len(nodes) > 0 && !snuo.mutation.PocCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.PocTable,
			Columns: []string{sourcename.PocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointofcontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.PocIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.PocTable,
			Columns: []string{sourcename.PocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointofcontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snuo.mutation.CertifyLegalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertifyLegalTable,
			Columns: []string{sourcename.CertifyLegalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.RemovedCertifyLegalIDs(); len(nodes) > 0 && !snuo.mutation.CertifyLegalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertifyLegalTable,
			Columns: []string{sourcename.CertifyLegalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.CertifyLegalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.CertifyLegalTable,
			Columns: []string{sourcename.CertifyLegalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifylegal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SourceName{config: snuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, snuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sourcename.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	snuo.mutation.done = true
	return _node, nil
}

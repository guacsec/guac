// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcenamespace"
)

// SourceNameUpdate is the builder for updating SourceName entities.
type SourceNameUpdate struct {
	config
	hooks    []Hook
	mutation *SourceNameMutation
}

// Where appends a list predicates to the SourceNameUpdate builder.
func (snu *SourceNameUpdate) Where(ps ...predicate.SourceName) *SourceNameUpdate {
	snu.mutation.Where(ps...)
	return snu
}

// SetName sets the "name" field.
func (snu *SourceNameUpdate) SetName(s string) *SourceNameUpdate {
	snu.mutation.SetName(s)
	return snu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableName(s *string) *SourceNameUpdate {
	if s != nil {
		snu.SetName(*s)
	}
	return snu
}

// SetCommit sets the "commit" field.
func (snu *SourceNameUpdate) SetCommit(s string) *SourceNameUpdate {
	snu.mutation.SetCommit(s)
	return snu
}

// SetNillableCommit sets the "commit" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableCommit(s *string) *SourceNameUpdate {
	if s != nil {
		snu.SetCommit(*s)
	}
	return snu
}

// ClearCommit clears the value of the "commit" field.
func (snu *SourceNameUpdate) ClearCommit() *SourceNameUpdate {
	snu.mutation.ClearCommit()
	return snu
}

// SetTag sets the "tag" field.
func (snu *SourceNameUpdate) SetTag(s string) *SourceNameUpdate {
	snu.mutation.SetTag(s)
	return snu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableTag(s *string) *SourceNameUpdate {
	if s != nil {
		snu.SetTag(*s)
	}
	return snu
}

// ClearTag clears the value of the "tag" field.
func (snu *SourceNameUpdate) ClearTag() *SourceNameUpdate {
	snu.mutation.ClearTag()
	return snu
}

// SetNamespaceID sets the "namespace_id" field.
func (snu *SourceNameUpdate) SetNamespaceID(i int) *SourceNameUpdate {
	snu.mutation.SetNamespaceID(i)
	return snu
}

// SetNillableNamespaceID sets the "namespace_id" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableNamespaceID(i *int) *SourceNameUpdate {
	if i != nil {
		snu.SetNamespaceID(*i)
	}
	return snu
}

// SetNamespace sets the "namespace" edge to the SourceNamespace entity.
func (snu *SourceNameUpdate) SetNamespace(s *SourceNamespace) *SourceNameUpdate {
	return snu.SetNamespaceID(s.ID)
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (snu *SourceNameUpdate) AddOccurrenceIDs(ids ...int) *SourceNameUpdate {
	snu.mutation.AddOccurrenceIDs(ids...)
	return snu
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (snu *SourceNameUpdate) AddOccurrences(o ...*Occurrence) *SourceNameUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snu.AddOccurrenceIDs(ids...)
}

// Mutation returns the SourceNameMutation object of the builder.
func (snu *SourceNameUpdate) Mutation() *SourceNameMutation {
	return snu.mutation
}

// ClearNamespace clears the "namespace" edge to the SourceNamespace entity.
func (snu *SourceNameUpdate) ClearNamespace() *SourceNameUpdate {
	snu.mutation.ClearNamespace()
	return snu
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (snu *SourceNameUpdate) ClearOccurrences() *SourceNameUpdate {
	snu.mutation.ClearOccurrences()
	return snu
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (snu *SourceNameUpdate) RemoveOccurrenceIDs(ids ...int) *SourceNameUpdate {
	snu.mutation.RemoveOccurrenceIDs(ids...)
	return snu
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (snu *SourceNameUpdate) RemoveOccurrences(o ...*Occurrence) *SourceNameUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snu.RemoveOccurrenceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (snu *SourceNameUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, snu.sqlSave, snu.mutation, snu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snu *SourceNameUpdate) SaveX(ctx context.Context) int {
	affected, err := snu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (snu *SourceNameUpdate) Exec(ctx context.Context) error {
	_, err := snu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snu *SourceNameUpdate) ExecX(ctx context.Context) {
	if err := snu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snu *SourceNameUpdate) check() error {
	if _, ok := snu.mutation.NamespaceID(); snu.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SourceName.namespace"`)
	}
	return nil
}

func (snu *SourceNameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := snu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sourcename.Table, sourcename.Columns, sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt))
	if ps := snu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snu.mutation.Name(); ok {
		_spec.SetField(sourcename.FieldName, field.TypeString, value)
	}
	if value, ok := snu.mutation.Commit(); ok {
		_spec.SetField(sourcename.FieldCommit, field.TypeString, value)
	}
	if snu.mutation.CommitCleared() {
		_spec.ClearField(sourcename.FieldCommit, field.TypeString)
	}
	if value, ok := snu.mutation.Tag(); ok {
		_spec.SetField(sourcename.FieldTag, field.TypeString, value)
	}
	if snu.mutation.TagCleared() {
		_spec.ClearField(sourcename.FieldTag, field.TypeString)
	}
	if snu.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcename.NamespaceTable,
			Columns: []string{sourcename.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcenamespace.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcename.NamespaceTable,
			Columns: []string{sourcename.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snu.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.RemovedOccurrencesIDs(); len(nodes) > 0 && !snu.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.OccurrencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, snu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sourcename.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	snu.mutation.done = true
	return n, nil
}

// SourceNameUpdateOne is the builder for updating a single SourceName entity.
type SourceNameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SourceNameMutation
}

// SetName sets the "name" field.
func (snuo *SourceNameUpdateOne) SetName(s string) *SourceNameUpdateOne {
	snuo.mutation.SetName(s)
	return snuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableName(s *string) *SourceNameUpdateOne {
	if s != nil {
		snuo.SetName(*s)
	}
	return snuo
}

// SetCommit sets the "commit" field.
func (snuo *SourceNameUpdateOne) SetCommit(s string) *SourceNameUpdateOne {
	snuo.mutation.SetCommit(s)
	return snuo
}

// SetNillableCommit sets the "commit" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableCommit(s *string) *SourceNameUpdateOne {
	if s != nil {
		snuo.SetCommit(*s)
	}
	return snuo
}

// ClearCommit clears the value of the "commit" field.
func (snuo *SourceNameUpdateOne) ClearCommit() *SourceNameUpdateOne {
	snuo.mutation.ClearCommit()
	return snuo
}

// SetTag sets the "tag" field.
func (snuo *SourceNameUpdateOne) SetTag(s string) *SourceNameUpdateOne {
	snuo.mutation.SetTag(s)
	return snuo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableTag(s *string) *SourceNameUpdateOne {
	if s != nil {
		snuo.SetTag(*s)
	}
	return snuo
}

// ClearTag clears the value of the "tag" field.
func (snuo *SourceNameUpdateOne) ClearTag() *SourceNameUpdateOne {
	snuo.mutation.ClearTag()
	return snuo
}

// SetNamespaceID sets the "namespace_id" field.
func (snuo *SourceNameUpdateOne) SetNamespaceID(i int) *SourceNameUpdateOne {
	snuo.mutation.SetNamespaceID(i)
	return snuo
}

// SetNillableNamespaceID sets the "namespace_id" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableNamespaceID(i *int) *SourceNameUpdateOne {
	if i != nil {
		snuo.SetNamespaceID(*i)
	}
	return snuo
}

// SetNamespace sets the "namespace" edge to the SourceNamespace entity.
func (snuo *SourceNameUpdateOne) SetNamespace(s *SourceNamespace) *SourceNameUpdateOne {
	return snuo.SetNamespaceID(s.ID)
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (snuo *SourceNameUpdateOne) AddOccurrenceIDs(ids ...int) *SourceNameUpdateOne {
	snuo.mutation.AddOccurrenceIDs(ids...)
	return snuo
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (snuo *SourceNameUpdateOne) AddOccurrences(o ...*Occurrence) *SourceNameUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snuo.AddOccurrenceIDs(ids...)
}

// Mutation returns the SourceNameMutation object of the builder.
func (snuo *SourceNameUpdateOne) Mutation() *SourceNameMutation {
	return snuo.mutation
}

// ClearNamespace clears the "namespace" edge to the SourceNamespace entity.
func (snuo *SourceNameUpdateOne) ClearNamespace() *SourceNameUpdateOne {
	snuo.mutation.ClearNamespace()
	return snuo
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (snuo *SourceNameUpdateOne) ClearOccurrences() *SourceNameUpdateOne {
	snuo.mutation.ClearOccurrences()
	return snuo
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (snuo *SourceNameUpdateOne) RemoveOccurrenceIDs(ids ...int) *SourceNameUpdateOne {
	snuo.mutation.RemoveOccurrenceIDs(ids...)
	return snuo
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (snuo *SourceNameUpdateOne) RemoveOccurrences(o ...*Occurrence) *SourceNameUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snuo.RemoveOccurrenceIDs(ids...)
}

// Where appends a list predicates to the SourceNameUpdate builder.
func (snuo *SourceNameUpdateOne) Where(ps ...predicate.SourceName) *SourceNameUpdateOne {
	snuo.mutation.Where(ps...)
	return snuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (snuo *SourceNameUpdateOne) Select(field string, fields ...string) *SourceNameUpdateOne {
	snuo.fields = append([]string{field}, fields...)
	return snuo
}

// Save executes the query and returns the updated SourceName entity.
func (snuo *SourceNameUpdateOne) Save(ctx context.Context) (*SourceName, error) {
	return withHooks(ctx, snuo.sqlSave, snuo.mutation, snuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snuo *SourceNameUpdateOne) SaveX(ctx context.Context) *SourceName {
	node, err := snuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (snuo *SourceNameUpdateOne) Exec(ctx context.Context) error {
	_, err := snuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snuo *SourceNameUpdateOne) ExecX(ctx context.Context) {
	if err := snuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snuo *SourceNameUpdateOne) check() error {
	if _, ok := snuo.mutation.NamespaceID(); snuo.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SourceName.namespace"`)
	}
	return nil
}

func (snuo *SourceNameUpdateOne) sqlSave(ctx context.Context) (_node *SourceName, err error) {
	if err := snuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sourcename.Table, sourcename.Columns, sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt))
	id, ok := snuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SourceName.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := snuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sourcename.FieldID)
		for _, f := range fields {
			if !sourcename.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sourcename.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := snuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snuo.mutation.Name(); ok {
		_spec.SetField(sourcename.FieldName, field.TypeString, value)
	}
	if value, ok := snuo.mutation.Commit(); ok {
		_spec.SetField(sourcename.FieldCommit, field.TypeString, value)
	}
	if snuo.mutation.CommitCleared() {
		_spec.ClearField(sourcename.FieldCommit, field.TypeString)
	}
	if value, ok := snuo.mutation.Tag(); ok {
		_spec.SetField(sourcename.FieldTag, field.TypeString, value)
	}
	if snuo.mutation.TagCleared() {
		_spec.ClearField(sourcename.FieldTag, field.TypeString)
	}
	if snuo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcename.NamespaceTable,
			Columns: []string{sourcename.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcenamespace.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcename.NamespaceTable,
			Columns: []string{sourcename.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if snuo.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.RemovedOccurrencesIDs(); len(nodes) > 0 && !snuo.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.OccurrencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sourcename.OccurrencesTable,
			Columns: []string{sourcename.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SourceName{config: snuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, snuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sourcename.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	snuo.mutation.done = true
	return _node, nil
}

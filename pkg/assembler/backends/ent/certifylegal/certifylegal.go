// Code generated by ent, DO NOT EDIT.

package certifylegal

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the certifylegal type in the database.
	Label = "certify_legal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPackageID holds the string denoting the package_id field in the database.
	FieldPackageID = "package_id"
	// FieldSourceID holds the string denoting the source_id field in the database.
	FieldSourceID = "source_id"
	// FieldDeclaredLicense holds the string denoting the declared_license field in the database.
	FieldDeclaredLicense = "declared_license"
	// FieldDiscoveredLicense holds the string denoting the discovered_license field in the database.
	FieldDiscoveredLicense = "discovered_license"
	// FieldAttribution holds the string denoting the attribution field in the database.
	FieldAttribution = "attribution"
	// FieldJustification holds the string denoting the justification field in the database.
	FieldJustification = "justification"
	// FieldTimeScanned holds the string denoting the time_scanned field in the database.
	FieldTimeScanned = "time_scanned"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// FieldDeclaredLicensesHash holds the string denoting the declared_licenses_hash field in the database.
	FieldDeclaredLicensesHash = "declared_licenses_hash"
	// FieldDiscoveredLicensesHash holds the string denoting the discovered_licenses_hash field in the database.
	FieldDiscoveredLicensesHash = "discovered_licenses_hash"
	// EdgePackage holds the string denoting the package edge name in mutations.
	EdgePackage = "package"
	// EdgeSource holds the string denoting the source edge name in mutations.
	EdgeSource = "source"
	// EdgeDeclaredLicenses holds the string denoting the declared_licenses edge name in mutations.
	EdgeDeclaredLicenses = "declared_licenses"
	// EdgeDiscoveredLicenses holds the string denoting the discovered_licenses edge name in mutations.
	EdgeDiscoveredLicenses = "discovered_licenses"
	// Table holds the table name of the certifylegal in the database.
	Table = "certify_legals"
	// PackageTable is the table that holds the package relation/edge.
	PackageTable = "certify_legals"
	// PackageInverseTable is the table name for the PackageVersion entity.
	// It exists in this package in order to avoid circular dependency with the "packageversion" package.
	PackageInverseTable = "package_versions"
	// PackageColumn is the table column denoting the package relation/edge.
	PackageColumn = "package_id"
	// SourceTable is the table that holds the source relation/edge.
	SourceTable = "certify_legals"
	// SourceInverseTable is the table name for the SourceName entity.
	// It exists in this package in order to avoid circular dependency with the "sourcename" package.
	SourceInverseTable = "source_names"
	// SourceColumn is the table column denoting the source relation/edge.
	SourceColumn = "source_id"
	// DeclaredLicensesTable is the table that holds the declared_licenses relation/edge. The primary key declared below.
	DeclaredLicensesTable = "certify_legal_declared_licenses"
	// DeclaredLicensesInverseTable is the table name for the License entity.
	// It exists in this package in order to avoid circular dependency with the "license" package.
	DeclaredLicensesInverseTable = "licenses"
	// DiscoveredLicensesTable is the table that holds the discovered_licenses relation/edge. The primary key declared below.
	DiscoveredLicensesTable = "certify_legal_discovered_licenses"
	// DiscoveredLicensesInverseTable is the table name for the License entity.
	// It exists in this package in order to avoid circular dependency with the "license" package.
	DiscoveredLicensesInverseTable = "licenses"
)

// Columns holds all SQL columns for certifylegal fields.
var Columns = []string{
	FieldID,
	FieldPackageID,
	FieldSourceID,
	FieldDeclaredLicense,
	FieldDiscoveredLicense,
	FieldAttribution,
	FieldJustification,
	FieldTimeScanned,
	FieldOrigin,
	FieldCollector,
	FieldDeclaredLicensesHash,
	FieldDiscoveredLicensesHash,
}

var (
	// DeclaredLicensesPrimaryKey and DeclaredLicensesColumn2 are the table columns denoting the
	// primary key for the declared_licenses relation (M2M).
	DeclaredLicensesPrimaryKey = []string{"certify_legal_id", "license_id"}
	// DiscoveredLicensesPrimaryKey and DiscoveredLicensesColumn2 are the table columns denoting the
	// primary key for the discovered_licenses relation (M2M).
	DiscoveredLicensesPrimaryKey = []string{"certify_legal_id", "license_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CertifyLegal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPackageID orders the results by the package_id field.
func ByPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageID, opts...).ToFunc()
}

// BySourceID orders the results by the source_id field.
func BySourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceID, opts...).ToFunc()
}

// ByDeclaredLicense orders the results by the declared_license field.
func ByDeclaredLicense(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeclaredLicense, opts...).ToFunc()
}

// ByDiscoveredLicense orders the results by the discovered_license field.
func ByDiscoveredLicense(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscoveredLicense, opts...).ToFunc()
}

// ByAttribution orders the results by the attribution field.
func ByAttribution(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttribution, opts...).ToFunc()
}

// ByJustification orders the results by the justification field.
func ByJustification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJustification, opts...).ToFunc()
}

// ByTimeScanned orders the results by the time_scanned field.
func ByTimeScanned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeScanned, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByDeclaredLicensesHash orders the results by the declared_licenses_hash field.
func ByDeclaredLicensesHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeclaredLicensesHash, opts...).ToFunc()
}

// ByDiscoveredLicensesHash orders the results by the discovered_licenses_hash field.
func ByDiscoveredLicensesHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscoveredLicensesHash, opts...).ToFunc()
}

// ByPackageField orders the results by package field.
func ByPackageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackageStep(), sql.OrderByField(field, opts...))
	}
}

// BySourceField orders the results by source field.
func BySourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeclaredLicensesCount orders the results by declared_licenses count.
func ByDeclaredLicensesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeclaredLicensesStep(), opts...)
	}
}

// ByDeclaredLicenses orders the results by declared_licenses terms.
func ByDeclaredLicenses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeclaredLicensesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDiscoveredLicensesCount orders the results by discovered_licenses count.
func ByDiscoveredLicensesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDiscoveredLicensesStep(), opts...)
	}
}

// ByDiscoveredLicenses orders the results by discovered_licenses terms.
func ByDiscoveredLicenses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscoveredLicensesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPackageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackageTable, PackageColumn),
	)
}
func newSourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
	)
}
func newDeclaredLicensesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeclaredLicensesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DeclaredLicensesTable, DeclaredLicensesPrimaryKey...),
	)
}
func newDiscoveredLicensesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscoveredLicensesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DiscoveredLicensesTable, DiscoveredLicensesPrimaryKey...),
	)
}

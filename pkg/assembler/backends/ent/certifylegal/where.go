// Code generated by ent, DO NOT EDIT.

package certifylegal

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLTE(FieldID, id))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldPackageID, v))
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldSourceID, v))
}

// DeclaredLicense applies equality check predicate on the "declared_license" field. It's identical to DeclaredLicenseEQ.
func DeclaredLicense(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldDeclaredLicense, v))
}

// DiscoveredLicense applies equality check predicate on the "discovered_license" field. It's identical to DiscoveredLicenseEQ.
func DiscoveredLicense(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldDiscoveredLicense, v))
}

// Attribution applies equality check predicate on the "attribution" field. It's identical to AttributionEQ.
func Attribution(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldAttribution, v))
}

// Justification applies equality check predicate on the "justification" field. It's identical to JustificationEQ.
func Justification(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldJustification, v))
}

// TimeScanned applies equality check predicate on the "time_scanned" field. It's identical to TimeScannedEQ.
func TimeScanned(v time.Time) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldTimeScanned, v))
}

// Origin applies equality check predicate on the "origin" field. It's identical to OriginEQ.
func Origin(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldOrigin, v))
}

// Collector applies equality check predicate on the "collector" field. It's identical to CollectorEQ.
func Collector(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldCollector, v))
}

// DeclaredLicensesHash applies equality check predicate on the "declared_licenses_hash" field. It's identical to DeclaredLicensesHashEQ.
func DeclaredLicensesHash(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldDeclaredLicensesHash, v))
}

// DiscoveredLicensesHash applies equality check predicate on the "discovered_licenses_hash" field. It's identical to DiscoveredLicensesHashEQ.
func DiscoveredLicensesHash(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldDiscoveredLicensesHash, v))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldPackageID, vs...))
}

// PackageIDIsNil applies the IsNil predicate on the "package_id" field.
func PackageIDIsNil() predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIsNull(FieldPackageID))
}

// PackageIDNotNil applies the NotNil predicate on the "package_id" field.
func PackageIDNotNil() predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotNull(FieldPackageID))
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldSourceID, v))
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldSourceID, v))
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldSourceID, vs...))
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...int) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldSourceID, vs...))
}

// SourceIDIsNil applies the IsNil predicate on the "source_id" field.
func SourceIDIsNil() predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIsNull(FieldSourceID))
}

// SourceIDNotNil applies the NotNil predicate on the "source_id" field.
func SourceIDNotNil() predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotNull(FieldSourceID))
}

// DeclaredLicenseEQ applies the EQ predicate on the "declared_license" field.
func DeclaredLicenseEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldDeclaredLicense, v))
}

// DeclaredLicenseNEQ applies the NEQ predicate on the "declared_license" field.
func DeclaredLicenseNEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldDeclaredLicense, v))
}

// DeclaredLicenseIn applies the In predicate on the "declared_license" field.
func DeclaredLicenseIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldDeclaredLicense, vs...))
}

// DeclaredLicenseNotIn applies the NotIn predicate on the "declared_license" field.
func DeclaredLicenseNotIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldDeclaredLicense, vs...))
}

// DeclaredLicenseGT applies the GT predicate on the "declared_license" field.
func DeclaredLicenseGT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGT(FieldDeclaredLicense, v))
}

// DeclaredLicenseGTE applies the GTE predicate on the "declared_license" field.
func DeclaredLicenseGTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGTE(FieldDeclaredLicense, v))
}

// DeclaredLicenseLT applies the LT predicate on the "declared_license" field.
func DeclaredLicenseLT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLT(FieldDeclaredLicense, v))
}

// DeclaredLicenseLTE applies the LTE predicate on the "declared_license" field.
func DeclaredLicenseLTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLTE(FieldDeclaredLicense, v))
}

// DeclaredLicenseContains applies the Contains predicate on the "declared_license" field.
func DeclaredLicenseContains(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContains(FieldDeclaredLicense, v))
}

// DeclaredLicenseHasPrefix applies the HasPrefix predicate on the "declared_license" field.
func DeclaredLicenseHasPrefix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasPrefix(FieldDeclaredLicense, v))
}

// DeclaredLicenseHasSuffix applies the HasSuffix predicate on the "declared_license" field.
func DeclaredLicenseHasSuffix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasSuffix(FieldDeclaredLicense, v))
}

// DeclaredLicenseEqualFold applies the EqualFold predicate on the "declared_license" field.
func DeclaredLicenseEqualFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEqualFold(FieldDeclaredLicense, v))
}

// DeclaredLicenseContainsFold applies the ContainsFold predicate on the "declared_license" field.
func DeclaredLicenseContainsFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContainsFold(FieldDeclaredLicense, v))
}

// DiscoveredLicenseEQ applies the EQ predicate on the "discovered_license" field.
func DiscoveredLicenseEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldDiscoveredLicense, v))
}

// DiscoveredLicenseNEQ applies the NEQ predicate on the "discovered_license" field.
func DiscoveredLicenseNEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldDiscoveredLicense, v))
}

// DiscoveredLicenseIn applies the In predicate on the "discovered_license" field.
func DiscoveredLicenseIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldDiscoveredLicense, vs...))
}

// DiscoveredLicenseNotIn applies the NotIn predicate on the "discovered_license" field.
func DiscoveredLicenseNotIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldDiscoveredLicense, vs...))
}

// DiscoveredLicenseGT applies the GT predicate on the "discovered_license" field.
func DiscoveredLicenseGT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGT(FieldDiscoveredLicense, v))
}

// DiscoveredLicenseGTE applies the GTE predicate on the "discovered_license" field.
func DiscoveredLicenseGTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGTE(FieldDiscoveredLicense, v))
}

// DiscoveredLicenseLT applies the LT predicate on the "discovered_license" field.
func DiscoveredLicenseLT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLT(FieldDiscoveredLicense, v))
}

// DiscoveredLicenseLTE applies the LTE predicate on the "discovered_license" field.
func DiscoveredLicenseLTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLTE(FieldDiscoveredLicense, v))
}

// DiscoveredLicenseContains applies the Contains predicate on the "discovered_license" field.
func DiscoveredLicenseContains(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContains(FieldDiscoveredLicense, v))
}

// DiscoveredLicenseHasPrefix applies the HasPrefix predicate on the "discovered_license" field.
func DiscoveredLicenseHasPrefix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasPrefix(FieldDiscoveredLicense, v))
}

// DiscoveredLicenseHasSuffix applies the HasSuffix predicate on the "discovered_license" field.
func DiscoveredLicenseHasSuffix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasSuffix(FieldDiscoveredLicense, v))
}

// DiscoveredLicenseEqualFold applies the EqualFold predicate on the "discovered_license" field.
func DiscoveredLicenseEqualFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEqualFold(FieldDiscoveredLicense, v))
}

// DiscoveredLicenseContainsFold applies the ContainsFold predicate on the "discovered_license" field.
func DiscoveredLicenseContainsFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContainsFold(FieldDiscoveredLicense, v))
}

// AttributionEQ applies the EQ predicate on the "attribution" field.
func AttributionEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldAttribution, v))
}

// AttributionNEQ applies the NEQ predicate on the "attribution" field.
func AttributionNEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldAttribution, v))
}

// AttributionIn applies the In predicate on the "attribution" field.
func AttributionIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldAttribution, vs...))
}

// AttributionNotIn applies the NotIn predicate on the "attribution" field.
func AttributionNotIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldAttribution, vs...))
}

// AttributionGT applies the GT predicate on the "attribution" field.
func AttributionGT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGT(FieldAttribution, v))
}

// AttributionGTE applies the GTE predicate on the "attribution" field.
func AttributionGTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGTE(FieldAttribution, v))
}

// AttributionLT applies the LT predicate on the "attribution" field.
func AttributionLT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLT(FieldAttribution, v))
}

// AttributionLTE applies the LTE predicate on the "attribution" field.
func AttributionLTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLTE(FieldAttribution, v))
}

// AttributionContains applies the Contains predicate on the "attribution" field.
func AttributionContains(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContains(FieldAttribution, v))
}

// AttributionHasPrefix applies the HasPrefix predicate on the "attribution" field.
func AttributionHasPrefix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasPrefix(FieldAttribution, v))
}

// AttributionHasSuffix applies the HasSuffix predicate on the "attribution" field.
func AttributionHasSuffix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasSuffix(FieldAttribution, v))
}

// AttributionEqualFold applies the EqualFold predicate on the "attribution" field.
func AttributionEqualFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEqualFold(FieldAttribution, v))
}

// AttributionContainsFold applies the ContainsFold predicate on the "attribution" field.
func AttributionContainsFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContainsFold(FieldAttribution, v))
}

// JustificationEQ applies the EQ predicate on the "justification" field.
func JustificationEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldJustification, v))
}

// JustificationNEQ applies the NEQ predicate on the "justification" field.
func JustificationNEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldJustification, v))
}

// JustificationIn applies the In predicate on the "justification" field.
func JustificationIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldJustification, vs...))
}

// JustificationNotIn applies the NotIn predicate on the "justification" field.
func JustificationNotIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldJustification, vs...))
}

// JustificationGT applies the GT predicate on the "justification" field.
func JustificationGT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGT(FieldJustification, v))
}

// JustificationGTE applies the GTE predicate on the "justification" field.
func JustificationGTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGTE(FieldJustification, v))
}

// JustificationLT applies the LT predicate on the "justification" field.
func JustificationLT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLT(FieldJustification, v))
}

// JustificationLTE applies the LTE predicate on the "justification" field.
func JustificationLTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLTE(FieldJustification, v))
}

// JustificationContains applies the Contains predicate on the "justification" field.
func JustificationContains(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContains(FieldJustification, v))
}

// JustificationHasPrefix applies the HasPrefix predicate on the "justification" field.
func JustificationHasPrefix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasPrefix(FieldJustification, v))
}

// JustificationHasSuffix applies the HasSuffix predicate on the "justification" field.
func JustificationHasSuffix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasSuffix(FieldJustification, v))
}

// JustificationEqualFold applies the EqualFold predicate on the "justification" field.
func JustificationEqualFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEqualFold(FieldJustification, v))
}

// JustificationContainsFold applies the ContainsFold predicate on the "justification" field.
func JustificationContainsFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContainsFold(FieldJustification, v))
}

// TimeScannedEQ applies the EQ predicate on the "time_scanned" field.
func TimeScannedEQ(v time.Time) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldTimeScanned, v))
}

// TimeScannedNEQ applies the NEQ predicate on the "time_scanned" field.
func TimeScannedNEQ(v time.Time) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldTimeScanned, v))
}

// TimeScannedIn applies the In predicate on the "time_scanned" field.
func TimeScannedIn(vs ...time.Time) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldTimeScanned, vs...))
}

// TimeScannedNotIn applies the NotIn predicate on the "time_scanned" field.
func TimeScannedNotIn(vs ...time.Time) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldTimeScanned, vs...))
}

// TimeScannedGT applies the GT predicate on the "time_scanned" field.
func TimeScannedGT(v time.Time) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGT(FieldTimeScanned, v))
}

// TimeScannedGTE applies the GTE predicate on the "time_scanned" field.
func TimeScannedGTE(v time.Time) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGTE(FieldTimeScanned, v))
}

// TimeScannedLT applies the LT predicate on the "time_scanned" field.
func TimeScannedLT(v time.Time) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLT(FieldTimeScanned, v))
}

// TimeScannedLTE applies the LTE predicate on the "time_scanned" field.
func TimeScannedLTE(v time.Time) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLTE(FieldTimeScanned, v))
}

// OriginEQ applies the EQ predicate on the "origin" field.
func OriginEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldOrigin, v))
}

// OriginNEQ applies the NEQ predicate on the "origin" field.
func OriginNEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldOrigin, v))
}

// OriginIn applies the In predicate on the "origin" field.
func OriginIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldOrigin, vs...))
}

// OriginNotIn applies the NotIn predicate on the "origin" field.
func OriginNotIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldOrigin, vs...))
}

// OriginGT applies the GT predicate on the "origin" field.
func OriginGT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGT(FieldOrigin, v))
}

// OriginGTE applies the GTE predicate on the "origin" field.
func OriginGTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGTE(FieldOrigin, v))
}

// OriginLT applies the LT predicate on the "origin" field.
func OriginLT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLT(FieldOrigin, v))
}

// OriginLTE applies the LTE predicate on the "origin" field.
func OriginLTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLTE(FieldOrigin, v))
}

// OriginContains applies the Contains predicate on the "origin" field.
func OriginContains(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContains(FieldOrigin, v))
}

// OriginHasPrefix applies the HasPrefix predicate on the "origin" field.
func OriginHasPrefix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasPrefix(FieldOrigin, v))
}

// OriginHasSuffix applies the HasSuffix predicate on the "origin" field.
func OriginHasSuffix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasSuffix(FieldOrigin, v))
}

// OriginEqualFold applies the EqualFold predicate on the "origin" field.
func OriginEqualFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEqualFold(FieldOrigin, v))
}

// OriginContainsFold applies the ContainsFold predicate on the "origin" field.
func OriginContainsFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContainsFold(FieldOrigin, v))
}

// CollectorEQ applies the EQ predicate on the "collector" field.
func CollectorEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldCollector, v))
}

// CollectorNEQ applies the NEQ predicate on the "collector" field.
func CollectorNEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldCollector, v))
}

// CollectorIn applies the In predicate on the "collector" field.
func CollectorIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldCollector, vs...))
}

// CollectorNotIn applies the NotIn predicate on the "collector" field.
func CollectorNotIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldCollector, vs...))
}

// CollectorGT applies the GT predicate on the "collector" field.
func CollectorGT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGT(FieldCollector, v))
}

// CollectorGTE applies the GTE predicate on the "collector" field.
func CollectorGTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGTE(FieldCollector, v))
}

// CollectorLT applies the LT predicate on the "collector" field.
func CollectorLT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLT(FieldCollector, v))
}

// CollectorLTE applies the LTE predicate on the "collector" field.
func CollectorLTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLTE(FieldCollector, v))
}

// CollectorContains applies the Contains predicate on the "collector" field.
func CollectorContains(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContains(FieldCollector, v))
}

// CollectorHasPrefix applies the HasPrefix predicate on the "collector" field.
func CollectorHasPrefix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasPrefix(FieldCollector, v))
}

// CollectorHasSuffix applies the HasSuffix predicate on the "collector" field.
func CollectorHasSuffix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasSuffix(FieldCollector, v))
}

// CollectorEqualFold applies the EqualFold predicate on the "collector" field.
func CollectorEqualFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEqualFold(FieldCollector, v))
}

// CollectorContainsFold applies the ContainsFold predicate on the "collector" field.
func CollectorContainsFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContainsFold(FieldCollector, v))
}

// DeclaredLicensesHashEQ applies the EQ predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldDeclaredLicensesHash, v))
}

// DeclaredLicensesHashNEQ applies the NEQ predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashNEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldDeclaredLicensesHash, v))
}

// DeclaredLicensesHashIn applies the In predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldDeclaredLicensesHash, vs...))
}

// DeclaredLicensesHashNotIn applies the NotIn predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashNotIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldDeclaredLicensesHash, vs...))
}

// DeclaredLicensesHashGT applies the GT predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashGT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGT(FieldDeclaredLicensesHash, v))
}

// DeclaredLicensesHashGTE applies the GTE predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashGTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGTE(FieldDeclaredLicensesHash, v))
}

// DeclaredLicensesHashLT applies the LT predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashLT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLT(FieldDeclaredLicensesHash, v))
}

// DeclaredLicensesHashLTE applies the LTE predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashLTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLTE(FieldDeclaredLicensesHash, v))
}

// DeclaredLicensesHashContains applies the Contains predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashContains(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContains(FieldDeclaredLicensesHash, v))
}

// DeclaredLicensesHashHasPrefix applies the HasPrefix predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashHasPrefix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasPrefix(FieldDeclaredLicensesHash, v))
}

// DeclaredLicensesHashHasSuffix applies the HasSuffix predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashHasSuffix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasSuffix(FieldDeclaredLicensesHash, v))
}

// DeclaredLicensesHashEqualFold applies the EqualFold predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashEqualFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEqualFold(FieldDeclaredLicensesHash, v))
}

// DeclaredLicensesHashContainsFold applies the ContainsFold predicate on the "declared_licenses_hash" field.
func DeclaredLicensesHashContainsFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContainsFold(FieldDeclaredLicensesHash, v))
}

// DiscoveredLicensesHashEQ applies the EQ predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEQ(FieldDiscoveredLicensesHash, v))
}

// DiscoveredLicensesHashNEQ applies the NEQ predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashNEQ(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNEQ(FieldDiscoveredLicensesHash, v))
}

// DiscoveredLicensesHashIn applies the In predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldIn(FieldDiscoveredLicensesHash, vs...))
}

// DiscoveredLicensesHashNotIn applies the NotIn predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashNotIn(vs ...string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldNotIn(FieldDiscoveredLicensesHash, vs...))
}

// DiscoveredLicensesHashGT applies the GT predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashGT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGT(FieldDiscoveredLicensesHash, v))
}

// DiscoveredLicensesHashGTE applies the GTE predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashGTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldGTE(FieldDiscoveredLicensesHash, v))
}

// DiscoveredLicensesHashLT applies the LT predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashLT(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLT(FieldDiscoveredLicensesHash, v))
}

// DiscoveredLicensesHashLTE applies the LTE predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashLTE(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldLTE(FieldDiscoveredLicensesHash, v))
}

// DiscoveredLicensesHashContains applies the Contains predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashContains(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContains(FieldDiscoveredLicensesHash, v))
}

// DiscoveredLicensesHashHasPrefix applies the HasPrefix predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashHasPrefix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasPrefix(FieldDiscoveredLicensesHash, v))
}

// DiscoveredLicensesHashHasSuffix applies the HasSuffix predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashHasSuffix(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldHasSuffix(FieldDiscoveredLicensesHash, v))
}

// DiscoveredLicensesHashEqualFold applies the EqualFold predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashEqualFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldEqualFold(FieldDiscoveredLicensesHash, v))
}

// DiscoveredLicensesHashContainsFold applies the ContainsFold predicate on the "discovered_licenses_hash" field.
func DiscoveredLicensesHashContainsFold(v string) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.FieldContainsFold(FieldDiscoveredLicensesHash, v))
}

// HasPackage applies the HasEdge predicate on the "package" edge.
func HasPackage() predicate.CertifyLegal {
	return predicate.CertifyLegal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PackageTable, PackageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackageWith applies the HasEdge predicate on the "package" edge with a given conditions (other predicates).
func HasPackageWith(preds ...predicate.PackageVersion) predicate.CertifyLegal {
	return predicate.CertifyLegal(func(s *sql.Selector) {
		step := newPackageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSource applies the HasEdge predicate on the "source" edge.
func HasSource() predicate.CertifyLegal {
	return predicate.CertifyLegal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceWith applies the HasEdge predicate on the "source" edge with a given conditions (other predicates).
func HasSourceWith(preds ...predicate.SourceName) predicate.CertifyLegal {
	return predicate.CertifyLegal(func(s *sql.Selector) {
		step := newSourceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeclaredLicenses applies the HasEdge predicate on the "declared_licenses" edge.
func HasDeclaredLicenses() predicate.CertifyLegal {
	return predicate.CertifyLegal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DeclaredLicensesTable, DeclaredLicensesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeclaredLicensesWith applies the HasEdge predicate on the "declared_licenses" edge with a given conditions (other predicates).
func HasDeclaredLicensesWith(preds ...predicate.License) predicate.CertifyLegal {
	return predicate.CertifyLegal(func(s *sql.Selector) {
		step := newDeclaredLicensesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDiscoveredLicenses applies the HasEdge predicate on the "discovered_licenses" edge.
func HasDiscoveredLicenses() predicate.CertifyLegal {
	return predicate.CertifyLegal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DiscoveredLicensesTable, DiscoveredLicensesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiscoveredLicensesWith applies the HasEdge predicate on the "discovered_licenses" edge with a given conditions (other predicates).
func HasDiscoveredLicensesWith(preds ...predicate.License) predicate.CertifyLegal {
	return predicate.CertifyLegal(func(s *sql.Selector) {
		step := newDiscoveredLicensesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CertifyLegal) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CertifyLegal) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CertifyLegal) predicate.CertifyLegal {
	return predicate.CertifyLegal(sql.NotPredicates(p))
}

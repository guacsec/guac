// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
)

// VulnerabilityID is the model entity for the VulnerabilityID schema.
type VulnerabilityID struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ID of the vulnerability, one of OSV, GHSA, CVE, or custom
	VulnerabilityID string `json:"vulnerability_id,omitempty"`
	// Type of vulnerability, one of OSV, GHSA, CVE, or custom
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VulnerabilityIDQuery when eager-loading is set.
	Edges        VulnerabilityIDEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VulnerabilityIDEdges holds the relations/edges for other nodes in the graph.
type VulnerabilityIDEdges struct {
	// VulnEqualVulnA holds the value of the vuln_equal_vuln_a edge.
	VulnEqualVulnA []*VulnEqual `json:"vuln_equal_vuln_a,omitempty"`
	// VulnEqualVulnB holds the value of the vuln_equal_vuln_b edge.
	VulnEqualVulnB []*VulnEqual `json:"vuln_equal_vuln_b,omitempty"`
	// VulnerabilityMetadata holds the value of the vulnerability_metadata edge.
	VulnerabilityMetadata []*VulnerabilityMetadata `json:"vulnerability_metadata,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedVulnEqualVulnA        map[string][]*VulnEqual
	namedVulnEqualVulnB        map[string][]*VulnEqual
	namedVulnerabilityMetadata map[string][]*VulnerabilityMetadata
}

// VulnEqualVulnAOrErr returns the VulnEqualVulnA value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityIDEdges) VulnEqualVulnAOrErr() ([]*VulnEqual, error) {
	if e.loadedTypes[0] {
		return e.VulnEqualVulnA, nil
	}
	return nil, &NotLoadedError{edge: "vuln_equal_vuln_a"}
}

// VulnEqualVulnBOrErr returns the VulnEqualVulnB value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityIDEdges) VulnEqualVulnBOrErr() ([]*VulnEqual, error) {
	if e.loadedTypes[1] {
		return e.VulnEqualVulnB, nil
	}
	return nil, &NotLoadedError{edge: "vuln_equal_vuln_b"}
}

// VulnerabilityMetadataOrErr returns the VulnerabilityMetadata value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityIDEdges) VulnerabilityMetadataOrErr() ([]*VulnerabilityMetadata, error) {
	if e.loadedTypes[2] {
		return e.VulnerabilityMetadata, nil
	}
	return nil, &NotLoadedError{edge: "vulnerability_metadata"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VulnerabilityID) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vulnerabilityid.FieldVulnerabilityID, vulnerabilityid.FieldType:
			values[i] = new(sql.NullString)
		case vulnerabilityid.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VulnerabilityID fields.
func (vi *VulnerabilityID) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vulnerabilityid.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vi.ID = *value
			}
		case vulnerabilityid.FieldVulnerabilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vulnerability_id", values[i])
			} else if value.Valid {
				vi.VulnerabilityID = value.String
			}
		case vulnerabilityid.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				vi.Type = value.String
			}
		default:
			vi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VulnerabilityID.
// This includes values selected through modifiers, order, etc.
func (vi *VulnerabilityID) Value(name string) (ent.Value, error) {
	return vi.selectValues.Get(name)
}

// QueryVulnEqualVulnA queries the "vuln_equal_vuln_a" edge of the VulnerabilityID entity.
func (vi *VulnerabilityID) QueryVulnEqualVulnA() *VulnEqualQuery {
	return NewVulnerabilityIDClient(vi.config).QueryVulnEqualVulnA(vi)
}

// QueryVulnEqualVulnB queries the "vuln_equal_vuln_b" edge of the VulnerabilityID entity.
func (vi *VulnerabilityID) QueryVulnEqualVulnB() *VulnEqualQuery {
	return NewVulnerabilityIDClient(vi.config).QueryVulnEqualVulnB(vi)
}

// QueryVulnerabilityMetadata queries the "vulnerability_metadata" edge of the VulnerabilityID entity.
func (vi *VulnerabilityID) QueryVulnerabilityMetadata() *VulnerabilityMetadataQuery {
	return NewVulnerabilityIDClient(vi.config).QueryVulnerabilityMetadata(vi)
}

// Update returns a builder for updating this VulnerabilityID.
// Note that you need to call VulnerabilityID.Unwrap() before calling this method if this VulnerabilityID
// was returned from a transaction, and the transaction was committed or rolled back.
func (vi *VulnerabilityID) Update() *VulnerabilityIDUpdateOne {
	return NewVulnerabilityIDClient(vi.config).UpdateOne(vi)
}

// Unwrap unwraps the VulnerabilityID entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vi *VulnerabilityID) Unwrap() *VulnerabilityID {
	_tx, ok := vi.config.driver.(*txDriver)
	if !ok {
		panic("ent: VulnerabilityID is not a transactional entity")
	}
	vi.config.driver = _tx.drv
	return vi
}

// String implements the fmt.Stringer.
func (vi *VulnerabilityID) String() string {
	var builder strings.Builder
	builder.WriteString("VulnerabilityID(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vi.ID))
	builder.WriteString("vulnerability_id=")
	builder.WriteString(vi.VulnerabilityID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(vi.Type)
	builder.WriteByte(')')
	return builder.String()
}

// NamedVulnEqualVulnA returns the VulnEqualVulnA named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vi *VulnerabilityID) NamedVulnEqualVulnA(name string) ([]*VulnEqual, error) {
	if vi.Edges.namedVulnEqualVulnA == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vi.Edges.namedVulnEqualVulnA[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vi *VulnerabilityID) appendNamedVulnEqualVulnA(name string, edges ...*VulnEqual) {
	if vi.Edges.namedVulnEqualVulnA == nil {
		vi.Edges.namedVulnEqualVulnA = make(map[string][]*VulnEqual)
	}
	if len(edges) == 0 {
		vi.Edges.namedVulnEqualVulnA[name] = []*VulnEqual{}
	} else {
		vi.Edges.namedVulnEqualVulnA[name] = append(vi.Edges.namedVulnEqualVulnA[name], edges...)
	}
}

// NamedVulnEqualVulnB returns the VulnEqualVulnB named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vi *VulnerabilityID) NamedVulnEqualVulnB(name string) ([]*VulnEqual, error) {
	if vi.Edges.namedVulnEqualVulnB == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vi.Edges.namedVulnEqualVulnB[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vi *VulnerabilityID) appendNamedVulnEqualVulnB(name string, edges ...*VulnEqual) {
	if vi.Edges.namedVulnEqualVulnB == nil {
		vi.Edges.namedVulnEqualVulnB = make(map[string][]*VulnEqual)
	}
	if len(edges) == 0 {
		vi.Edges.namedVulnEqualVulnB[name] = []*VulnEqual{}
	} else {
		vi.Edges.namedVulnEqualVulnB[name] = append(vi.Edges.namedVulnEqualVulnB[name], edges...)
	}
}

// NamedVulnerabilityMetadata returns the VulnerabilityMetadata named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vi *VulnerabilityID) NamedVulnerabilityMetadata(name string) ([]*VulnerabilityMetadata, error) {
	if vi.Edges.namedVulnerabilityMetadata == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vi.Edges.namedVulnerabilityMetadata[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vi *VulnerabilityID) appendNamedVulnerabilityMetadata(name string, edges ...*VulnerabilityMetadata) {
	if vi.Edges.namedVulnerabilityMetadata == nil {
		vi.Edges.namedVulnerabilityMetadata = make(map[string][]*VulnerabilityMetadata)
	}
	if len(edges) == 0 {
		vi.Edges.namedVulnerabilityMetadata[name] = []*VulnerabilityMetadata{}
	} else {
		vi.Edges.namedVulnerabilityMetadata[name] = append(vi.Edges.namedVulnerabilityMetadata[name], edges...)
	}
}

// VulnerabilityIDs is a parsable slice of VulnerabilityID.
type VulnerabilityIDs []*VulnerabilityID

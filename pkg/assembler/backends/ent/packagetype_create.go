// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagetype"
)

// PackageTypeCreate is the builder for creating a PackageType entity.
type PackageTypeCreate struct {
	config
	mutation *PackageTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (ptc *PackageTypeCreate) SetType(s string) *PackageTypeCreate {
	ptc.mutation.SetType(s)
	return ptc
}

// AddNamespaceIDs adds the "namespaces" edge to the PackageNamespace entity by IDs.
func (ptc *PackageTypeCreate) AddNamespaceIDs(ids ...int) *PackageTypeCreate {
	ptc.mutation.AddNamespaceIDs(ids...)
	return ptc
}

// AddNamespaces adds the "namespaces" edges to the PackageNamespace entity.
func (ptc *PackageTypeCreate) AddNamespaces(p ...*PackageNamespace) *PackageTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddNamespaceIDs(ids...)
}

// Mutation returns the PackageTypeMutation object of the builder.
func (ptc *PackageTypeCreate) Mutation() *PackageTypeMutation {
	return ptc.mutation
}

// Save creates the PackageType in the database.
func (ptc *PackageTypeCreate) Save(ctx context.Context) (*PackageType, error) {
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PackageTypeCreate) SaveX(ctx context.Context) *PackageType {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PackageTypeCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PackageTypeCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PackageTypeCreate) check() error {
	if _, ok := ptc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PackageType.type"`)}
	}
	if v, ok := ptc.mutation.GetType(); ok {
		if err := packagetype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PackageType.type": %w`, err)}
		}
	}
	return nil
}

func (ptc *PackageTypeCreate) sqlSave(ctx context.Context) (*PackageType, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *PackageTypeCreate) createSpec() (*PackageType, *sqlgraph.CreateSpec) {
	var (
		_node = &PackageType{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(packagetype.Table, sqlgraph.NewFieldSpec(packagetype.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ptc.conflict
	if value, ok := ptc.mutation.GetType(); ok {
		_spec.SetField(packagetype.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := ptc.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagetype.NamespacesTable,
			Columns: []string{packagetype.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackageType.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackageTypeUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ptc *PackageTypeCreate) OnConflict(opts ...sql.ConflictOption) *PackageTypeUpsertOne {
	ptc.conflict = opts
	return &PackageTypeUpsertOne{
		create: ptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackageType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptc *PackageTypeCreate) OnConflictColumns(columns ...string) *PackageTypeUpsertOne {
	ptc.conflict = append(ptc.conflict, sql.ConflictColumns(columns...))
	return &PackageTypeUpsertOne{
		create: ptc,
	}
}

type (
	// PackageTypeUpsertOne is the builder for "upsert"-ing
	//  one PackageType node.
	PackageTypeUpsertOne struct {
		create *PackageTypeCreate
	}

	// PackageTypeUpsert is the "OnConflict" setter.
	PackageTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *PackageTypeUpsert) SetType(v string) *PackageTypeUpsert {
	u.Set(packagetype.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PackageTypeUpsert) UpdateType() *PackageTypeUpsert {
	u.SetExcluded(packagetype.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PackageType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PackageTypeUpsertOne) UpdateNewValues() *PackageTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackageType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PackageTypeUpsertOne) Ignore() *PackageTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackageTypeUpsertOne) DoNothing() *PackageTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackageTypeCreate.OnConflict
// documentation for more info.
func (u *PackageTypeUpsertOne) Update(set func(*PackageTypeUpsert)) *PackageTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackageTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *PackageTypeUpsertOne) SetType(v string) *PackageTypeUpsertOne {
	return u.Update(func(s *PackageTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PackageTypeUpsertOne) UpdateType() *PackageTypeUpsertOne {
	return u.Update(func(s *PackageTypeUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *PackageTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackageTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackageTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PackageTypeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PackageTypeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PackageTypeCreateBulk is the builder for creating many PackageType entities in bulk.
type PackageTypeCreateBulk struct {
	config
	err      error
	builders []*PackageTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the PackageType entities in the database.
func (ptcb *PackageTypeCreateBulk) Save(ctx context.Context) ([]*PackageType, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PackageType, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PackageTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PackageTypeCreateBulk) SaveX(ctx context.Context) []*PackageType {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PackageTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PackageTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackageType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackageTypeUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ptcb *PackageTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *PackageTypeUpsertBulk {
	ptcb.conflict = opts
	return &PackageTypeUpsertBulk{
		create: ptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackageType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptcb *PackageTypeCreateBulk) OnConflictColumns(columns ...string) *PackageTypeUpsertBulk {
	ptcb.conflict = append(ptcb.conflict, sql.ConflictColumns(columns...))
	return &PackageTypeUpsertBulk{
		create: ptcb,
	}
}

// PackageTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of PackageType nodes.
type PackageTypeUpsertBulk struct {
	create *PackageTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PackageType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PackageTypeUpsertBulk) UpdateNewValues() *PackageTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackageType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PackageTypeUpsertBulk) Ignore() *PackageTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackageTypeUpsertBulk) DoNothing() *PackageTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackageTypeCreateBulk.OnConflict
// documentation for more info.
func (u *PackageTypeUpsertBulk) Update(set func(*PackageTypeUpsert)) *PackageTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackageTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *PackageTypeUpsertBulk) SetType(v string) *PackageTypeUpsertBulk {
	return u.Update(func(s *PackageTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PackageTypeUpsertBulk) UpdateType() *PackageTypeUpsertBulk {
	return u.Update(func(s *PackageTypeUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *PackageTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PackageTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackageTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackageTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

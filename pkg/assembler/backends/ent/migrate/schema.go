// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ArtifactsColumns holds the columns for the "artifacts" table.
	ArtifactsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "algorithm", Type: field.TypeString},
		{Name: "digest", Type: field.TypeString},
	}
	// ArtifactsTable holds the schema information for the "artifacts" table.
	ArtifactsTable = &schema.Table{
		Name:       "artifacts",
		Columns:    ArtifactsColumns,
		PrimaryKey: []*schema.Column{ArtifactsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "artifact_algorithm_digest",
				Unique:  true,
				Columns: []*schema.Column{ArtifactsColumns[1], ArtifactsColumns[2]},
			},
		},
	}
	// BillOfMaterialsColumns holds the columns for the "bill_of_materials" table.
	BillOfMaterialsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uri", Type: field.TypeString},
		{Name: "algorithm", Type: field.TypeString},
		{Name: "digest", Type: field.TypeString},
		{Name: "download_location", Type: field.TypeString},
		{Name: "origin", Type: field.TypeString},
		{Name: "collector", Type: field.TypeString},
		{Name: "annotations", Type: field.TypeJSON, Nullable: true},
		{Name: "package_id", Type: field.TypeInt, Nullable: true},
		{Name: "artifact_id", Type: field.TypeInt, Nullable: true},
	}
	// BillOfMaterialsTable holds the schema information for the "bill_of_materials" table.
	BillOfMaterialsTable = &schema.Table{
		Name:       "bill_of_materials",
		Columns:    BillOfMaterialsColumns,
		PrimaryKey: []*schema.Column{BillOfMaterialsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bill_of_materials_package_versions_package",
				Columns:    []*schema.Column{BillOfMaterialsColumns[8]},
				RefColumns: []*schema.Column{PackageVersionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "bill_of_materials_artifacts_artifact",
				Columns:    []*schema.Column{BillOfMaterialsColumns[9]},
				RefColumns: []*schema.Column{ArtifactsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "sbom_unique_package",
				Unique:  true,
				Columns: []*schema.Column{BillOfMaterialsColumns[2], BillOfMaterialsColumns[3], BillOfMaterialsColumns[1], BillOfMaterialsColumns[4], BillOfMaterialsColumns[8]},
				Annotation: &entsql.IndexAnnotation{
					Where: "package_id IS NOT NULL AND artifact_id IS NULL",
				},
			},
			{
				Name:    "sbom_unique_artifact",
				Unique:  true,
				Columns: []*schema.Column{BillOfMaterialsColumns[2], BillOfMaterialsColumns[3], BillOfMaterialsColumns[1], BillOfMaterialsColumns[4], BillOfMaterialsColumns[9]},
				Annotation: &entsql.IndexAnnotation{
					Where: "package_id IS NULL AND artifact_id IS NOT NULL",
				},
			},
		},
	}
	// BuildersColumns holds the columns for the "builders" table.
	BuildersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uri", Type: field.TypeString, Unique: true},
		{Name: "slsa_attestation_built_by", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// BuildersTable holds the schema information for the "builders" table.
	BuildersTable = &schema.Table{
		Name:       "builders",
		Columns:    BuildersColumns,
		PrimaryKey: []*schema.Column{BuildersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "builders_slsa_attestations_built_by",
				Columns:    []*schema.Column{BuildersColumns[2]},
				RefColumns: []*schema.Column{SlsaAttestationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "builder_uri",
				Unique:  true,
				Columns: []*schema.Column{BuildersColumns[1]},
			},
		},
	}
	// DependenciesColumns holds the columns for the "dependencies" table.
	DependenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "version_range", Type: field.TypeString},
		{Name: "dependency_type", Type: field.TypeEnum, Enums: []string{"UNSPECIFIED", "DIRECT", "INDIRECT"}},
		{Name: "justification", Type: field.TypeString},
		{Name: "origin", Type: field.TypeString},
		{Name: "collector", Type: field.TypeString},
		{Name: "package_id", Type: field.TypeInt},
		{Name: "dependent_package_id", Type: field.TypeInt},
	}
	// DependenciesTable holds the schema information for the "dependencies" table.
	DependenciesTable = &schema.Table{
		Name:       "dependencies",
		Columns:    DependenciesColumns,
		PrimaryKey: []*schema.Column{DependenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dependencies_package_versions_package",
				Columns:    []*schema.Column{DependenciesColumns[6]},
				RefColumns: []*schema.Column{PackageVersionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "dependencies_package_names_dependent_package",
				Columns:    []*schema.Column{DependenciesColumns[7]},
				RefColumns: []*schema.Column{PackageNamesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "dependency_version_range_dependency_type_justification_origin_collector_package_id_dependent_package_id",
				Unique:  true,
				Columns: []*schema.Column{DependenciesColumns[1], DependenciesColumns[2], DependenciesColumns[3], DependenciesColumns[4], DependenciesColumns[5], DependenciesColumns[6], DependenciesColumns[7]},
			},
		},
	}
	// IsVulnerabilitiesColumns holds the columns for the "is_vulnerabilities" table.
	IsVulnerabilitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "justification", Type: field.TypeString},
		{Name: "origin", Type: field.TypeString},
		{Name: "collector", Type: field.TypeString},
		{Name: "osv_id", Type: field.TypeInt},
		{Name: "vulnerability_id", Type: field.TypeInt},
	}
	// IsVulnerabilitiesTable holds the schema information for the "is_vulnerabilities" table.
	IsVulnerabilitiesTable = &schema.Table{
		Name:       "is_vulnerabilities",
		Columns:    IsVulnerabilitiesColumns,
		PrimaryKey: []*schema.Column{IsVulnerabilitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "is_vulnerabilities_security_advisories_osv",
				Columns:    []*schema.Column{IsVulnerabilitiesColumns[4]},
				RefColumns: []*schema.Column{SecurityAdvisoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "is_vulnerabilities_security_advisories_vulnerability",
				Columns:    []*schema.Column{IsVulnerabilitiesColumns[5]},
				RefColumns: []*schema.Column{SecurityAdvisoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "isvulnerability_origin_justification_osv_id_vulnerability_id",
				Unique:  true,
				Columns: []*schema.Column{IsVulnerabilitiesColumns[2], IsVulnerabilitiesColumns[1], IsVulnerabilitiesColumns[4], IsVulnerabilitiesColumns[5]},
			},
		},
	}
	// OccurrencesColumns holds the columns for the "occurrences" table.
	OccurrencesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "justification", Type: field.TypeString},
		{Name: "origin", Type: field.TypeString},
		{Name: "collector", Type: field.TypeString},
		{Name: "artifact_id", Type: field.TypeInt},
		{Name: "package_id", Type: field.TypeInt, Nullable: true},
		{Name: "source_id", Type: field.TypeInt, Nullable: true},
	}
	// OccurrencesTable holds the schema information for the "occurrences" table.
	OccurrencesTable = &schema.Table{
		Name:       "occurrences",
		Columns:    OccurrencesColumns,
		PrimaryKey: []*schema.Column{OccurrencesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "occurrences_artifacts_artifact",
				Columns:    []*schema.Column{OccurrencesColumns[4]},
				RefColumns: []*schema.Column{ArtifactsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "occurrences_package_versions_package",
				Columns:    []*schema.Column{OccurrencesColumns[5]},
				RefColumns: []*schema.Column{PackageVersionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "occurrences_source_names_source",
				Columns:    []*schema.Column{OccurrencesColumns[6]},
				RefColumns: []*schema.Column{SourceNamesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "occurrence_unique_package",
				Unique:  true,
				Columns: []*schema.Column{OccurrencesColumns[1], OccurrencesColumns[2], OccurrencesColumns[3], OccurrencesColumns[4], OccurrencesColumns[5]},
				Annotation: &entsql.IndexAnnotation{
					Where: "package_id IS NOT NULL AND source_id IS NULL",
				},
			},
			{
				Name:    "occurrence_unique_source",
				Unique:  true,
				Columns: []*schema.Column{OccurrencesColumns[1], OccurrencesColumns[2], OccurrencesColumns[3], OccurrencesColumns[4], OccurrencesColumns[6]},
				Annotation: &entsql.IndexAnnotation{
					Where: "package_id IS NULL AND source_id IS NOT NULL",
				},
			},
		},
	}
	// PackageNamesColumns holds the columns for the "package_names" table.
	PackageNamesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "namespace_id", Type: field.TypeInt},
	}
	// PackageNamesTable holds the schema information for the "package_names" table.
	PackageNamesTable = &schema.Table{
		Name:       "package_names",
		Columns:    PackageNamesColumns,
		PrimaryKey: []*schema.Column{PackageNamesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "package_names_package_namespaces_names",
				Columns:    []*schema.Column{PackageNamesColumns[2]},
				RefColumns: []*schema.Column{PackageNamespacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "packagename_name_namespace_id",
				Unique:  true,
				Columns: []*schema.Column{PackageNamesColumns[1], PackageNamesColumns[2]},
			},
		},
	}
	// PackageNamespacesColumns holds the columns for the "package_namespaces" table.
	PackageNamespacesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "namespace", Type: field.TypeString},
		{Name: "package_id", Type: field.TypeInt},
	}
	// PackageNamespacesTable holds the schema information for the "package_namespaces" table.
	PackageNamespacesTable = &schema.Table{
		Name:       "package_namespaces",
		Columns:    PackageNamespacesColumns,
		PrimaryKey: []*schema.Column{PackageNamespacesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "package_namespaces_package_types_namespaces",
				Columns:    []*schema.Column{PackageNamespacesColumns[2]},
				RefColumns: []*schema.Column{PackageTypesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "packagenamespace_namespace_package_id",
				Unique:  true,
				Columns: []*schema.Column{PackageNamespacesColumns[1], PackageNamespacesColumns[2]},
			},
		},
	}
	// PackageTypesColumns holds the columns for the "package_types" table.
	PackageTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString, Unique: true},
	}
	// PackageTypesTable holds the schema information for the "package_types" table.
	PackageTypesTable = &schema.Table{
		Name:       "package_types",
		Columns:    PackageTypesColumns,
		PrimaryKey: []*schema.Column{PackageTypesColumns[0]},
	}
	// PackageVersionsColumns holds the columns for the "package_versions" table.
	PackageVersionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "version", Type: field.TypeString, Default: ""},
		{Name: "subpath", Type: field.TypeString, Default: ""},
		{Name: "qualifiers", Type: field.TypeJSON, Nullable: true},
		{Name: "hash", Type: field.TypeString},
		{Name: "name_id", Type: field.TypeInt},
	}
	// PackageVersionsTable holds the schema information for the "package_versions" table.
	PackageVersionsTable = &schema.Table{
		Name:       "package_versions",
		Columns:    PackageVersionsColumns,
		PrimaryKey: []*schema.Column{PackageVersionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "package_versions_package_names_versions",
				Columns:    []*schema.Column{PackageVersionsColumns[5]},
				RefColumns: []*schema.Column{PackageNamesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "packageversion_hash_name_id",
				Unique:  true,
				Columns: []*schema.Column{PackageVersionsColumns[4], PackageVersionsColumns[5]},
			},
			{
				Name:    "packageversion_qualifiers",
				Unique:  false,
				Columns: []*schema.Column{PackageVersionsColumns[3]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
		},
	}
	// SlsaAttestationsColumns holds the columns for the "slsa_attestations" table.
	SlsaAttestationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "build_type", Type: field.TypeString},
		{Name: "slsa_predicate", Type: field.TypeJSON, Nullable: true},
		{Name: "slsa_version", Type: field.TypeString},
		{Name: "started_on", Type: field.TypeTime, Nullable: true},
		{Name: "finished_on", Type: field.TypeTime, Nullable: true},
		{Name: "origin", Type: field.TypeString},
		{Name: "collector", Type: field.TypeString},
	}
	// SlsaAttestationsTable holds the schema information for the "slsa_attestations" table.
	SlsaAttestationsTable = &schema.Table{
		Name:       "slsa_attestations",
		Columns:    SlsaAttestationsColumns,
		PrimaryKey: []*schema.Column{SlsaAttestationsColumns[0]},
	}
	// SecurityAdvisoriesColumns holds the columns for the "security_advisories" table.
	SecurityAdvisoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "ghsa_id", Type: field.TypeString, Nullable: true},
		{Name: "cve_id", Type: field.TypeString, Nullable: true},
		{Name: "cve_year", Type: field.TypeInt, Nullable: true},
		{Name: "osv_id", Type: field.TypeString, Nullable: true},
	}
	// SecurityAdvisoriesTable holds the schema information for the "security_advisories" table.
	SecurityAdvisoriesTable = &schema.Table{
		Name:       "security_advisories",
		Columns:    SecurityAdvisoriesColumns,
		PrimaryKey: []*schema.Column{SecurityAdvisoriesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "securityadvisory_ghsa_id",
				Unique:  true,
				Columns: []*schema.Column{SecurityAdvisoriesColumns[1]},
				Annotation: &entsql.IndexAnnotation{
					Where: "osv_id IS NULL AND cve_id IS NULL AND ghsa_id IS NOT NULL",
				},
			},
			{
				Name:    "securityadvisory_cve_id",
				Unique:  true,
				Columns: []*schema.Column{SecurityAdvisoriesColumns[2]},
				Annotation: &entsql.IndexAnnotation{
					Where: "osv_id IS NULL AND cve_id IS NOT NULL AND ghsa_id IS NULL",
				},
			},
			{
				Name:    "securityadvisory_osv_id",
				Unique:  true,
				Columns: []*schema.Column{SecurityAdvisoriesColumns[4]},
				Annotation: &entsql.IndexAnnotation{
					Where: "osv_id IS NOT NULL AND cve_id IS NULL AND ghsa_id IS NULL",
				},
			},
		},
	}
	// SourceNamesColumns holds the columns for the "source_names" table.
	SourceNamesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "commit", Type: field.TypeString, Nullable: true},
		{Name: "tag", Type: field.TypeString, Nullable: true},
		{Name: "namespace_id", Type: field.TypeInt},
	}
	// SourceNamesTable holds the schema information for the "source_names" table.
	SourceNamesTable = &schema.Table{
		Name:       "source_names",
		Columns:    SourceNamesColumns,
		PrimaryKey: []*schema.Column{SourceNamesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "source_names_source_namespaces_namespace",
				Columns:    []*schema.Column{SourceNamesColumns[4]},
				RefColumns: []*schema.Column{SourceNamespacesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "sourcename_namespace_id_name_commit_tag",
				Unique:  true,
				Columns: []*schema.Column{SourceNamesColumns[4], SourceNamesColumns[1], SourceNamesColumns[2], SourceNamesColumns[3]},
				Annotation: &entsql.IndexAnnotation{
					Where: "commit IS NOT NULL OR tag IS NOT NULL",
				},
			},
		},
	}
	// SourceNamespacesColumns holds the columns for the "source_namespaces" table.
	SourceNamespacesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "namespace", Type: field.TypeString},
		{Name: "source_id", Type: field.TypeInt},
	}
	// SourceNamespacesTable holds the schema information for the "source_namespaces" table.
	SourceNamespacesTable = &schema.Table{
		Name:       "source_namespaces",
		Columns:    SourceNamespacesColumns,
		PrimaryKey: []*schema.Column{SourceNamespacesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "source_namespaces_source_types_source_type",
				Columns:    []*schema.Column{SourceNamespacesColumns[2]},
				RefColumns: []*schema.Column{SourceTypesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "sourcenamespace_namespace_source_id",
				Unique:  true,
				Columns: []*schema.Column{SourceNamespacesColumns[1], SourceNamespacesColumns[2]},
			},
		},
	}
	// SourceTypesColumns holds the columns for the "source_types" table.
	SourceTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString, Unique: true},
	}
	// SourceTypesTable holds the schema information for the "source_types" table.
	SourceTypesTable = &schema.Table{
		Name:       "source_types",
		Columns:    SourceTypesColumns,
		PrimaryKey: []*schema.Column{SourceTypesColumns[0]},
	}
	// SlsaAttestationBuiltFromColumns holds the columns for the "slsa_attestation_built_from" table.
	SlsaAttestationBuiltFromColumns = []*schema.Column{
		{Name: "slsa_attestation_id", Type: field.TypeInt},
		{Name: "artifact_id", Type: field.TypeInt},
	}
	// SlsaAttestationBuiltFromTable holds the schema information for the "slsa_attestation_built_from" table.
	SlsaAttestationBuiltFromTable = &schema.Table{
		Name:       "slsa_attestation_built_from",
		Columns:    SlsaAttestationBuiltFromColumns,
		PrimaryKey: []*schema.Column{SlsaAttestationBuiltFromColumns[0], SlsaAttestationBuiltFromColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "slsa_attestation_built_from_slsa_attestation_id",
				Columns:    []*schema.Column{SlsaAttestationBuiltFromColumns[0]},
				RefColumns: []*schema.Column{SlsaAttestationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "slsa_attestation_built_from_artifact_id",
				Columns:    []*schema.Column{SlsaAttestationBuiltFromColumns[1]},
				RefColumns: []*schema.Column{ArtifactsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ArtifactsTable,
		BillOfMaterialsTable,
		BuildersTable,
		DependenciesTable,
		IsVulnerabilitiesTable,
		OccurrencesTable,
		PackageNamesTable,
		PackageNamespacesTable,
		PackageTypesTable,
		PackageVersionsTable,
		SlsaAttestationsTable,
		SecurityAdvisoriesTable,
		SourceNamesTable,
		SourceNamespacesTable,
		SourceTypesTable,
		SlsaAttestationBuiltFromTable,
	}
)

func init() {
	BillOfMaterialsTable.ForeignKeys[0].RefTable = PackageVersionsTable
	BillOfMaterialsTable.ForeignKeys[1].RefTable = ArtifactsTable
	BuildersTable.ForeignKeys[0].RefTable = SlsaAttestationsTable
	DependenciesTable.ForeignKeys[0].RefTable = PackageVersionsTable
	DependenciesTable.ForeignKeys[1].RefTable = PackageNamesTable
	IsVulnerabilitiesTable.ForeignKeys[0].RefTable = SecurityAdvisoriesTable
	IsVulnerabilitiesTable.ForeignKeys[1].RefTable = SecurityAdvisoriesTable
	OccurrencesTable.ForeignKeys[0].RefTable = ArtifactsTable
	OccurrencesTable.ForeignKeys[1].RefTable = PackageVersionsTable
	OccurrencesTable.ForeignKeys[2].RefTable = SourceNamesTable
	PackageNamesTable.ForeignKeys[0].RefTable = PackageNamespacesTable
	PackageNamespacesTable.ForeignKeys[0].RefTable = PackageTypesTable
	PackageVersionsTable.ForeignKeys[0].RefTable = PackageNamesTable
	SlsaAttestationsTable.Annotation = &entsql.Annotation{
		Table: "slsa_attestations",
	}
	SourceNamesTable.ForeignKeys[0].RefTable = SourceNamespacesTable
	SourceNamespacesTable.ForeignKeys[0].RefTable = SourceTypesTable
	SlsaAttestationBuiltFromTable.ForeignKeys[0].RefTable = SlsaAttestationsTable
	SlsaAttestationBuiltFromTable.ForeignKeys[1].RefTable = ArtifactsTable
}

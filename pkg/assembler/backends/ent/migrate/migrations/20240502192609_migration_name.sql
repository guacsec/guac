-- Create "artifacts" table
CREATE TABLE "artifacts" ("id" uuid NOT NULL, "algorithm" character varying NOT NULL, "digest" character varying NOT NULL, PRIMARY KEY ("id"));
-- Create index "artifact_algorithm_digest" to table: "artifacts"
CREATE UNIQUE INDEX "artifact_algorithm_digest" ON "artifacts" ("algorithm", "digest");
-- Create "package_names" table
CREATE TABLE "package_names" ("id" uuid NOT NULL, "type" character varying NOT NULL, "namespace" character varying NOT NULL, "name" character varying NOT NULL, PRIMARY KEY ("id"));
-- Create index "packagename_name_namespace_type" to table: "package_names"
CREATE UNIQUE INDEX "packagename_name_namespace_type" ON "package_names" ("name", "namespace", "type");
-- Create "package_versions" table
CREATE TABLE "package_versions" ("id" uuid NOT NULL, "version" character varying NOT NULL DEFAULT '', "subpath" character varying NOT NULL DEFAULT '', "qualifiers" jsonb NULL, "hash" character varying NOT NULL, "name_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "package_versions_package_names_versions" FOREIGN KEY ("name_id") REFERENCES "package_names" ("id") ON UPDATE NO ACTION ON DELETE CASCADE);
-- Create index "packageversion_hash_name_id" to table: "package_versions"
CREATE UNIQUE INDEX "packageversion_hash_name_id" ON "package_versions" ("hash", "name_id");
-- Create index "packageversion_qualifiers" to table: "package_versions"
CREATE INDEX "packageversion_qualifiers" ON "package_versions" USING gin ("qualifiers");
-- Create index "packageversion_version_subpath_qualifiers_name_id" to table: "package_versions"
CREATE UNIQUE INDEX "packageversion_version_subpath_qualifiers_name_id" ON "package_versions" ("version", "subpath", "qualifiers", "name_id");
-- Create "bill_of_materials" table
CREATE TABLE "bill_of_materials" ("id" uuid NOT NULL, "uri" character varying NOT NULL, "algorithm" character varying NOT NULL, "digest" character varying NOT NULL, "download_location" character varying NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "known_since" timestamptz NOT NULL, "included_packages_hash" character varying NOT NULL, "included_artifacts_hash" character varying NOT NULL, "included_dependencies_hash" character varying NOT NULL, "included_occurrences_hash" character varying NOT NULL, "package_id" uuid NULL, "artifact_id" uuid NULL, PRIMARY KEY ("id"), CONSTRAINT "bill_of_materials_artifacts_artifact" FOREIGN KEY ("artifact_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "bill_of_materials_package_versions_package" FOREIGN KEY ("package_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE SET NULL);
-- Create index "sbom_artifact_id" to table: "bill_of_materials"
CREATE UNIQUE INDEX "sbom_artifact_id" ON "bill_of_materials" ("algorithm", "digest", "uri", "download_location", "known_since", "included_packages_hash", "included_artifacts_hash", "included_dependencies_hash", "included_occurrences_hash", "origin", "collector", "document_ref", "artifact_id") WHERE ((package_id IS NULL) AND (artifact_id IS NOT NULL));
-- Create index "sbom_package_id" to table: "bill_of_materials"
CREATE UNIQUE INDEX "sbom_package_id" ON "bill_of_materials" ("algorithm", "digest", "uri", "download_location", "known_since", "included_packages_hash", "included_artifacts_hash", "included_dependencies_hash", "included_occurrences_hash", "origin", "collector", "document_ref", "package_id") WHERE ((package_id IS NOT NULL) AND (artifact_id IS NULL));
-- Create "dependencies" table
CREATE TABLE "dependencies" ("id" uuid NOT NULL, "version_range" character varying NOT NULL, "dependency_type" character varying NOT NULL, "justification" character varying NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "package_id" uuid NOT NULL, "dependent_package_name_id" uuid NULL, "dependent_package_version_id" uuid NULL, PRIMARY KEY ("id"), CONSTRAINT "dependencies_package_names_dependent_package_name" FOREIGN KEY ("dependent_package_name_id") REFERENCES "package_names" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "dependencies_package_versions_dependent_package_version" FOREIGN KEY ("dependent_package_version_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "dependencies_package_versions_package" FOREIGN KEY ("package_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "dep_package_name_id" to table: "dependencies"
CREATE UNIQUE INDEX "dep_package_name_id" ON "dependencies" ("version_range", "dependency_type", "justification", "origin", "collector", "document_ref", "package_id", "dependent_package_name_id") WHERE ((dependent_package_name_id IS NOT NULL) AND (dependent_package_version_id IS NULL));
-- Create index "dep_package_version_id" to table: "dependencies"
CREATE UNIQUE INDEX "dep_package_version_id" ON "dependencies" ("version_range", "dependency_type", "justification", "origin", "collector", "document_ref", "package_id", "dependent_package_version_id") WHERE ((dependent_package_name_id IS NULL) AND (dependent_package_version_id IS NOT NULL));
-- Create "bill_of_materials_included_dependencies" table
CREATE TABLE "bill_of_materials_included_dependencies" ("bill_of_materials_id" uuid NOT NULL, "dependency_id" uuid NOT NULL, PRIMARY KEY ("bill_of_materials_id", "dependency_id"), CONSTRAINT "bill_of_materials_included_dependencies_bill_of_materials_id" FOREIGN KEY ("bill_of_materials_id") REFERENCES "bill_of_materials" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "bill_of_materials_included_dependencies_dependency_id" FOREIGN KEY ("dependency_id") REFERENCES "dependencies" ("id") ON UPDATE NO ACTION ON DELETE CASCADE);
-- Create "source_names" table
CREATE TABLE "source_names" ("id" uuid NOT NULL, "type" character varying NOT NULL, "namespace" character varying NOT NULL, "name" character varying NOT NULL, "commit" character varying NULL, "tag" character varying NULL, PRIMARY KEY ("id"));
-- Create index "sourcename_type_namespace_name_commit_tag" to table: "source_names"
CREATE UNIQUE INDEX "sourcename_type_namespace_name_commit_tag" ON "source_names" ("type", "namespace", "name", "commit", "tag");
-- Create "occurrences" table
CREATE TABLE "occurrences" ("id" uuid NOT NULL, "justification" character varying NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "artifact_id" uuid NOT NULL, "package_id" uuid NULL, "source_id" uuid NULL, PRIMARY KEY ("id"), CONSTRAINT "occurrences_artifacts_artifact" FOREIGN KEY ("artifact_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION, CONSTRAINT "occurrences_package_versions_package" FOREIGN KEY ("package_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "occurrences_source_names_source" FOREIGN KEY ("source_id") REFERENCES "source_names" ("id") ON UPDATE NO ACTION ON DELETE SET NULL);
-- Create index "occurrence_package_id" to table: "occurrences"
CREATE UNIQUE INDEX "occurrence_package_id" ON "occurrences" ("justification", "origin", "collector", "document_ref", "artifact_id", "package_id") WHERE ((package_id IS NOT NULL) AND (source_id IS NULL));
-- Create index "occurrence_source_id" to table: "occurrences"
CREATE UNIQUE INDEX "occurrence_source_id" ON "occurrences" ("justification", "origin", "collector", "document_ref", "artifact_id", "source_id") WHERE ((package_id IS NULL) AND (source_id IS NOT NULL));
-- Create "bill_of_materials_included_occurrences" table
CREATE TABLE "bill_of_materials_included_occurrences" ("bill_of_materials_id" uuid NOT NULL, "occurrence_id" uuid NOT NULL, PRIMARY KEY ("bill_of_materials_id", "occurrence_id"), CONSTRAINT "bill_of_materials_included_occurrences_bill_of_materials_id" FOREIGN KEY ("bill_of_materials_id") REFERENCES "bill_of_materials" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "bill_of_materials_included_occurrences_occurrence_id" FOREIGN KEY ("occurrence_id") REFERENCES "occurrences" ("id") ON UPDATE NO ACTION ON DELETE CASCADE);
-- Create "bill_of_materials_included_software_artifacts" table
CREATE TABLE "bill_of_materials_included_software_artifacts" ("bill_of_materials_id" uuid NOT NULL, "artifact_id" uuid NOT NULL, PRIMARY KEY ("bill_of_materials_id", "artifact_id"), CONSTRAINT "bill_of_materials_included_software_artifacts_artifact_id" FOREIGN KEY ("artifact_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "bill_of_materials_included_software_artifacts_bill_of_materials" FOREIGN KEY ("bill_of_materials_id") REFERENCES "bill_of_materials" ("id") ON UPDATE NO ACTION ON DELETE CASCADE);
-- Create "bill_of_materials_included_software_packages" table
CREATE TABLE "bill_of_materials_included_software_packages" ("bill_of_materials_id" uuid NOT NULL, "package_version_id" uuid NOT NULL, PRIMARY KEY ("bill_of_materials_id", "package_version_id"), CONSTRAINT "bill_of_materials_included_software_packages_bill_of_materials_" FOREIGN KEY ("bill_of_materials_id") REFERENCES "bill_of_materials" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "bill_of_materials_included_software_packages_package_version_id" FOREIGN KEY ("package_version_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE CASCADE);
-- Create "certifications" table
CREATE TABLE "certifications" ("id" uuid NOT NULL, "type" character varying NOT NULL DEFAULT 'GOOD', "justification" character varying NOT NULL, "known_since" timestamptz NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "source_id" uuid NULL, "package_version_id" uuid NULL, "package_name_id" uuid NULL, "artifact_id" uuid NULL, PRIMARY KEY ("id"), CONSTRAINT "certifications_artifacts_artifact" FOREIGN KEY ("artifact_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "certifications_package_names_all_versions" FOREIGN KEY ("package_name_id") REFERENCES "package_names" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "certifications_package_versions_package_version" FOREIGN KEY ("package_version_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "certifications_source_names_source" FOREIGN KEY ("source_id") REFERENCES "source_names" ("id") ON UPDATE NO ACTION ON DELETE SET NULL);
-- Create index "certification_type_justification_origin_collector_artifact_id_k" to table: "certifications"
CREATE UNIQUE INDEX "certification_type_justification_origin_collector_artifact_id_k" ON "certifications" ("type", "justification", "origin", "collector", "artifact_id", "known_since", "document_ref") WHERE ((source_id IS NULL) AND (package_version_id IS NULL) AND (package_name_id IS NULL) AND (artifact_id IS NOT NULL));
-- Create index "certification_type_justification_origin_collector_package_name_" to table: "certifications"
CREATE UNIQUE INDEX "certification_type_justification_origin_collector_package_name_" ON "certifications" ("type", "justification", "origin", "collector", "package_name_id", "known_since", "document_ref") WHERE ((source_id IS NULL) AND (package_version_id IS NULL) AND (package_name_id IS NOT NULL) AND (artifact_id IS NULL));
-- Create index "certification_type_justification_origin_collector_package_versi" to table: "certifications"
CREATE UNIQUE INDEX "certification_type_justification_origin_collector_package_versi" ON "certifications" ("type", "justification", "origin", "collector", "package_version_id", "known_since", "document_ref") WHERE ((source_id IS NULL) AND (package_version_id IS NOT NULL) AND (package_name_id IS NULL) AND (artifact_id IS NULL));
-- Create index "certification_type_justification_origin_collector_source_id_kno" to table: "certifications"
CREATE UNIQUE INDEX "certification_type_justification_origin_collector_source_id_kno" ON "certifications" ("type", "justification", "origin", "collector", "source_id", "known_since", "document_ref") WHERE ((source_id IS NOT NULL) AND (package_version_id IS NULL) AND (package_name_id IS NULL) AND (artifact_id IS NULL));
-- Create "certify_legals" table
CREATE TABLE "certify_legals" ("id" uuid NOT NULL, "declared_license" character varying NOT NULL, "discovered_license" character varying NOT NULL, "attribution" character varying NOT NULL, "justification" character varying NOT NULL, "time_scanned" timestamptz NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "declared_licenses_hash" character varying NOT NULL, "discovered_licenses_hash" character varying NOT NULL, "package_id" uuid NULL, "source_id" uuid NULL, PRIMARY KEY ("id"), CONSTRAINT "certify_legals_package_versions_package" FOREIGN KEY ("package_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "certify_legals_source_names_source" FOREIGN KEY ("source_id") REFERENCES "source_names" ("id") ON UPDATE NO ACTION ON DELETE SET NULL);
-- Create index "certifylegal_package_id_declared_license_discovered_license_att" to table: "certify_legals"
CREATE UNIQUE INDEX "certifylegal_package_id_declared_license_discovered_license_att" ON "certify_legals" ("package_id", "declared_license", "discovered_license", "attribution", "justification", "time_scanned", "origin", "collector", "document_ref", "declared_licenses_hash", "discovered_licenses_hash") WHERE ((package_id IS NOT NULL) AND (source_id IS NULL));
-- Create index "certifylegal_source_id_declared_license_discovered_license_attr" to table: "certify_legals"
CREATE UNIQUE INDEX "certifylegal_source_id_declared_license_discovered_license_attr" ON "certify_legals" ("source_id", "declared_license", "discovered_license", "attribution", "justification", "time_scanned", "origin", "collector", "document_ref", "declared_licenses_hash", "discovered_licenses_hash") WHERE ((package_id IS NULL) AND (source_id IS NOT NULL));
-- Create "licenses" table
CREATE TABLE "licenses" ("id" uuid NOT NULL, "name" character varying NOT NULL, "inline" character varying NULL, "list_version" character varying NULL, PRIMARY KEY ("id"));
-- Create index "license_name_inline_list_version" to table: "licenses"
CREATE UNIQUE INDEX "license_name_inline_list_version" ON "licenses" ("name", "inline", "list_version");
-- Create "certify_legal_declared_licenses" table
CREATE TABLE "certify_legal_declared_licenses" ("certify_legal_id" uuid NOT NULL, "license_id" uuid NOT NULL, PRIMARY KEY ("certify_legal_id", "license_id"), CONSTRAINT "certify_legal_declared_licenses_certify_legal_id" FOREIGN KEY ("certify_legal_id") REFERENCES "certify_legals" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "certify_legal_declared_licenses_license_id" FOREIGN KEY ("license_id") REFERENCES "licenses" ("id") ON UPDATE NO ACTION ON DELETE CASCADE);
-- Create "certify_legal_discovered_licenses" table
CREATE TABLE "certify_legal_discovered_licenses" ("certify_legal_id" uuid NOT NULL, "license_id" uuid NOT NULL, PRIMARY KEY ("certify_legal_id", "license_id"), CONSTRAINT "certify_legal_discovered_licenses_certify_legal_id" FOREIGN KEY ("certify_legal_id") REFERENCES "certify_legals" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "certify_legal_discovered_licenses_license_id" FOREIGN KEY ("license_id") REFERENCES "licenses" ("id") ON UPDATE NO ACTION ON DELETE CASCADE);
-- Create "certify_scorecards" table
CREATE TABLE "certify_scorecards" ("id" uuid NOT NULL, "checks" jsonb NOT NULL, "aggregate_score" double precision NOT NULL DEFAULT 0, "time_scanned" timestamptz NOT NULL, "scorecard_version" character varying NOT NULL, "scorecard_commit" character varying NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "checks_hash" character varying NOT NULL, "source_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "certify_scorecards_source_names_source" FOREIGN KEY ("source_id") REFERENCES "source_names" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "certifyscorecard_source_id_origin_collector_scorecard_version_s" to table: "certify_scorecards"
CREATE UNIQUE INDEX "certifyscorecard_source_id_origin_collector_scorecard_version_s" ON "certify_scorecards" ("source_id", "origin", "collector", "scorecard_version", "scorecard_commit", "aggregate_score", "time_scanned", "checks_hash", "document_ref");
-- Create "vulnerability_ids" table
CREATE TABLE "vulnerability_ids" ("id" uuid NOT NULL, "vulnerability_id" character varying NOT NULL, "type" character varying NOT NULL, PRIMARY KEY ("id"));
-- Create index "vulnerabilityid_vulnerability_id_type" to table: "vulnerability_ids"
CREATE UNIQUE INDEX "vulnerabilityid_vulnerability_id_type" ON "vulnerability_ids" ("vulnerability_id", "type");
-- Create "certify_vexes" table
CREATE TABLE "certify_vexes" ("id" uuid NOT NULL, "known_since" timestamptz NOT NULL, "status" character varying NOT NULL, "statement" character varying NOT NULL, "status_notes" character varying NOT NULL, "justification" character varying NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "package_id" uuid NULL, "artifact_id" uuid NULL, "vulnerability_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "certify_vexes_artifacts_artifact" FOREIGN KEY ("artifact_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "certify_vexes_package_versions_package" FOREIGN KEY ("package_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "certify_vexes_vulnerability_ids_vulnerability" FOREIGN KEY ("vulnerability_id") REFERENCES "vulnerability_ids" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "vex_artifact_id" to table: "certify_vexes"
CREATE UNIQUE INDEX "vex_artifact_id" ON "certify_vexes" ("known_since", "justification", "status", "statement", "status_notes", "origin", "collector", "document_ref", "vulnerability_id", "package_id") WHERE (artifact_id IS NULL);
-- Create index "vex_package_id" to table: "certify_vexes"
CREATE UNIQUE INDEX "vex_package_id" ON "certify_vexes" ("known_since", "justification", "status", "statement", "status_notes", "origin", "collector", "document_ref", "vulnerability_id", "artifact_id") WHERE (package_id IS NULL);
-- Create "certify_vulns" table
CREATE TABLE "certify_vulns" ("id" uuid NOT NULL, "time_scanned" timestamptz NOT NULL, "db_uri" character varying NOT NULL, "db_version" character varying NOT NULL, "scanner_uri" character varying NOT NULL, "scanner_version" character varying NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "vulnerability_id" uuid NOT NULL, "package_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "certify_vulns_package_versions_package" FOREIGN KEY ("package_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION, CONSTRAINT "certify_vulns_vulnerability_ids_vulnerability" FOREIGN KEY ("vulnerability_id") REFERENCES "vulnerability_ids" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "certifyvuln_db_uri_db_version_scanner_uri_scanner_version_origi" to table: "certify_vulns"
CREATE UNIQUE INDEX "certifyvuln_db_uri_db_version_scanner_uri_scanner_version_origi" ON "certify_vulns" ("db_uri", "db_version", "scanner_uri", "scanner_version", "origin", "collector", "time_scanned", "document_ref", "vulnerability_id", "package_id");
-- Create "has_metadata" table
CREATE TABLE "has_metadata" ("id" uuid NOT NULL, "timestamp" timestamptz NOT NULL, "key" character varying NOT NULL, "value" character varying NOT NULL, "justification" character varying NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "source_id" uuid NULL, "package_version_id" uuid NULL, "package_name_id" uuid NULL, "artifact_id" uuid NULL, PRIMARY KEY ("id"), CONSTRAINT "has_metadata_artifacts_artifact" FOREIGN KEY ("artifact_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "has_metadata_package_names_all_versions" FOREIGN KEY ("package_name_id") REFERENCES "package_names" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "has_metadata_package_versions_package_version" FOREIGN KEY ("package_version_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "has_metadata_source_names_source" FOREIGN KEY ("source_id") REFERENCES "source_names" ("id") ON UPDATE NO ACTION ON DELETE SET NULL);
-- Create index "has_metadata_artifact_id" to table: "has_metadata"
CREATE UNIQUE INDEX "has_metadata_artifact_id" ON "has_metadata" ("key", "value", "justification", "origin", "collector", "timestamp", "document_ref", "artifact_id") WHERE ((source_id IS NULL) AND (package_version_id IS NULL) AND (package_name_id IS NULL) AND (artifact_id IS NOT NULL));
-- Create index "has_metadata_package_name_id" to table: "has_metadata"
CREATE UNIQUE INDEX "has_metadata_package_name_id" ON "has_metadata" ("key", "value", "justification", "origin", "collector", "timestamp", "document_ref", "package_name_id") WHERE ((source_id IS NULL) AND (package_version_id IS NULL) AND (package_name_id IS NOT NULL) AND (artifact_id IS NULL));
-- Create index "has_metadata_package_version_id" to table: "has_metadata"
CREATE UNIQUE INDEX "has_metadata_package_version_id" ON "has_metadata" ("key", "value", "justification", "origin", "collector", "timestamp", "document_ref", "package_version_id") WHERE ((source_id IS NULL) AND (package_version_id IS NOT NULL) AND (package_name_id IS NULL) AND (artifact_id IS NULL));
-- Create index "has_metadata_source_id" to table: "has_metadata"
CREATE UNIQUE INDEX "has_metadata_source_id" ON "has_metadata" ("key", "value", "justification", "origin", "collector", "timestamp", "document_ref", "source_id") WHERE ((source_id IS NOT NULL) AND (package_version_id IS NULL) AND (package_name_id IS NULL) AND (artifact_id IS NULL));
-- Create "has_source_ats" table
CREATE TABLE "has_source_ats" ("id" uuid NOT NULL, "known_since" timestamptz NOT NULL, "justification" character varying NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "package_version_id" uuid NULL, "package_name_id" uuid NULL, "source_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "has_source_ats_package_names_all_versions" FOREIGN KEY ("package_name_id") REFERENCES "package_names" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "has_source_ats_package_versions_package_version" FOREIGN KEY ("package_version_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "has_source_ats_source_names_source" FOREIGN KEY ("source_id") REFERENCES "source_names" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "hassourceat_source_id_package_name_id_justification_origin_coll" to table: "has_source_ats"
CREATE UNIQUE INDEX "hassourceat_source_id_package_name_id_justification_origin_coll" ON "has_source_ats" ("source_id", "package_name_id", "justification", "origin", "collector", "known_since", "document_ref") WHERE ((package_name_id IS NOT NULL) AND (package_version_id IS NULL));
-- Create index "hassourceat_source_id_package_version_id_justification_origin_c" to table: "has_source_ats"
CREATE UNIQUE INDEX "hassourceat_source_id_package_version_id_justification_origin_c" ON "has_source_ats" ("source_id", "package_version_id", "justification", "origin", "collector", "known_since", "document_ref") WHERE ((package_version_id IS NOT NULL) AND (package_name_id IS NULL));
-- Create "hash_equals" table
CREATE TABLE "hash_equals" ("id" uuid NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "justification" character varying NOT NULL, "document_ref" character varying NOT NULL, "artifacts_hash" character varying NOT NULL, "art_id" uuid NOT NULL, "equal_art_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "hash_equals_artifacts_artifact_a" FOREIGN KEY ("art_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION, CONSTRAINT "hash_equals_artifacts_artifact_b" FOREIGN KEY ("equal_art_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "hashequal_art_id_equal_art_id_artifacts_hash_origin_justificati" to table: "hash_equals"
CREATE UNIQUE INDEX "hashequal_art_id_equal_art_id_artifacts_hash_origin_justificati" ON "hash_equals" ("art_id", "equal_art_id", "artifacts_hash", "origin", "justification", "collector", "document_ref");
-- Create "pkg_equals" table
CREATE TABLE "pkg_equals" ("id" uuid NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "justification" character varying NOT NULL, "packages_hash" character varying NOT NULL, "pkg_id" uuid NOT NULL, "equal_pkg_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "pkg_equals_package_versions_package_a" FOREIGN KEY ("pkg_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION, CONSTRAINT "pkg_equals_package_versions_package_b" FOREIGN KEY ("equal_pkg_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "pkgequal_pkg_id_equal_pkg_id_packages_hash_origin_justification" to table: "pkg_equals"
CREATE UNIQUE INDEX "pkgequal_pkg_id_equal_pkg_id_packages_hash_origin_justification" ON "pkg_equals" ("pkg_id", "equal_pkg_id", "packages_hash", "origin", "justification", "collector", "document_ref");
-- Create "point_of_contacts" table
CREATE TABLE "point_of_contacts" ("id" uuid NOT NULL, "email" character varying NOT NULL, "info" character varying NOT NULL, "since" timestamptz NOT NULL, "justification" character varying NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "source_id" uuid NULL, "package_version_id" uuid NULL, "package_name_id" uuid NULL, "artifact_id" uuid NULL, PRIMARY KEY ("id"), CONSTRAINT "point_of_contacts_artifacts_artifact" FOREIGN KEY ("artifact_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "point_of_contacts_package_names_all_versions" FOREIGN KEY ("package_name_id") REFERENCES "package_names" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "point_of_contacts_package_versions_package_version" FOREIGN KEY ("package_version_id") REFERENCES "package_versions" ("id") ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT "point_of_contacts_source_names_source" FOREIGN KEY ("source_id") REFERENCES "source_names" ("id") ON UPDATE NO ACTION ON DELETE SET NULL);
-- Create index "poc_artifact_id" to table: "point_of_contacts"
CREATE UNIQUE INDEX "poc_artifact_id" ON "point_of_contacts" ("since", "email", "info", "justification", "origin", "collector", "document_ref", "artifact_id") WHERE ((source_id IS NULL) AND (package_version_id IS NULL) AND (package_name_id IS NULL) AND (artifact_id IS NOT NULL));
-- Create index "poc_package_name_id" to table: "point_of_contacts"
CREATE UNIQUE INDEX "poc_package_name_id" ON "point_of_contacts" ("since", "email", "info", "justification", "origin", "collector", "document_ref", "package_name_id") WHERE ((source_id IS NULL) AND (package_version_id IS NULL) AND (package_name_id IS NOT NULL) AND (artifact_id IS NULL));
-- Create index "poc_package_version_id" to table: "point_of_contacts"
CREATE UNIQUE INDEX "poc_package_version_id" ON "point_of_contacts" ("since", "email", "info", "justification", "origin", "collector", "document_ref", "package_version_id") WHERE ((source_id IS NULL) AND (package_version_id IS NOT NULL) AND (package_name_id IS NULL) AND (artifact_id IS NULL));
-- Create index "poc_source_id" to table: "point_of_contacts"
CREATE UNIQUE INDEX "poc_source_id" ON "point_of_contacts" ("since", "email", "info", "justification", "origin", "collector", "document_ref", "source_id") WHERE ((source_id IS NOT NULL) AND (package_version_id IS NULL) AND (package_name_id IS NULL) AND (artifact_id IS NULL));
-- Create "builders" table
CREATE TABLE "builders" ("id" uuid NOT NULL, "uri" character varying NOT NULL, PRIMARY KEY ("id"));
-- Create index "builder_uri" to table: "builders"
CREATE UNIQUE INDEX "builder_uri" ON "builders" ("uri");
-- Create index "builders_uri_key" to table: "builders"
CREATE UNIQUE INDEX "builders_uri_key" ON "builders" ("uri");
-- Create "slsa_attestations" table
CREATE TABLE "slsa_attestations" ("id" uuid NOT NULL, "build_type" character varying NOT NULL, "slsa_predicate" jsonb NULL, "slsa_version" character varying NOT NULL, "started_on" timestamptz NOT NULL, "finished_on" timestamptz NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "built_from_hash" character varying NOT NULL, "built_by_id" uuid NOT NULL, "subject_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "slsa_attestations_artifacts_subject" FOREIGN KEY ("subject_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION, CONSTRAINT "slsa_attestations_builders_built_by" FOREIGN KEY ("built_by_id") REFERENCES "builders" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "slsaattestation_subject_id_origin_collector_document_ref_build_" to table: "slsa_attestations"
CREATE UNIQUE INDEX "slsaattestation_subject_id_origin_collector_document_ref_build_" ON "slsa_attestations" ("subject_id", "origin", "collector", "document_ref", "build_type", "slsa_version", "built_by_id", "built_from_hash", "started_on", "finished_on");
-- Create "slsa_attestation_built_from" table
CREATE TABLE "slsa_attestation_built_from" ("slsa_attestation_id" uuid NOT NULL, "artifact_id" uuid NOT NULL, PRIMARY KEY ("slsa_attestation_id", "artifact_id"), CONSTRAINT "slsa_attestation_built_from_artifact_id" FOREIGN KEY ("artifact_id") REFERENCES "artifacts" ("id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "slsa_attestation_built_from_slsa_attestation_id" FOREIGN KEY ("slsa_attestation_id") REFERENCES "slsa_attestations" ("id") ON UPDATE NO ACTION ON DELETE CASCADE);
-- Create "vuln_equals" table
CREATE TABLE "vuln_equals" ("id" uuid NOT NULL, "justification" character varying NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "vulnerabilities_hash" character varying NOT NULL, "vuln_id" uuid NOT NULL, "equal_vuln_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "vuln_equals_vulnerability_ids_vulnerability_a" FOREIGN KEY ("vuln_id") REFERENCES "vulnerability_ids" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION, CONSTRAINT "vuln_equals_vulnerability_ids_vulnerability_b" FOREIGN KEY ("equal_vuln_id") REFERENCES "vulnerability_ids" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "vulnequal_vuln_id_equal_vuln_id_vulnerabilities_hash_justificat" to table: "vuln_equals"
CREATE UNIQUE INDEX "vulnequal_vuln_id_equal_vuln_id_vulnerabilities_hash_justificat" ON "vuln_equals" ("vuln_id", "equal_vuln_id", "vulnerabilities_hash", "justification", "origin", "collector", "document_ref");
-- Create "vulnerability_metadata" table
CREATE TABLE "vulnerability_metadata" ("id" uuid NOT NULL, "score_type" character varying NOT NULL, "score_value" double precision NOT NULL, "timestamp" timestamptz NOT NULL, "origin" character varying NOT NULL, "collector" character varying NOT NULL, "document_ref" character varying NOT NULL, "vulnerability_id_id" uuid NOT NULL, PRIMARY KEY ("id"), CONSTRAINT "vulnerability_metadata_vulnerability_ids_vulnerability_id" FOREIGN KEY ("vulnerability_id_id") REFERENCES "vulnerability_ids" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION);
-- Create index "vulnerabilitymetadata_vulnerability_id_id_score_type_score_valu" to table: "vulnerability_metadata"
CREATE UNIQUE INDEX "vulnerabilitymetadata_vulnerability_id_id_score_type_score_valu" ON "vulnerability_metadata" ("vulnerability_id_id", "score_type", "score_value", "timestamp", "origin", "collector", "document_ref");

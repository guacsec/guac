// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isdependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
)

// IsDependency is the model entity for the IsDependency schema.
type IsDependency struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID int `json:"package_id,omitempty"`
	// DependentPackageID holds the value of the "dependent_package_id" field.
	DependentPackageID int `json:"dependent_package_id,omitempty"`
	// VersionRange holds the value of the "version_range" field.
	VersionRange string `json:"version_range,omitempty"`
	// DependencyType holds the value of the "dependency_type" field.
	DependencyType string `json:"dependency_type,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IsDependencyQuery when eager-loading is set.
	Edges        IsDependencyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IsDependencyEdges holds the relations/edges for other nodes in the graph.
type IsDependencyEdges struct {
	// Package holds the value of the package edge.
	Package *PackageVersion `json:"package,omitempty"`
	// DependentPackage holds the value of the dependent_package edge.
	DependentPackage *PackageName `json:"dependent_package,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IsDependencyEdges) PackageOrErr() (*PackageVersion, error) {
	if e.loadedTypes[0] {
		if e.Package == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.Package, nil
	}
	return nil, &NotLoadedError{edge: "package"}
}

// DependentPackageOrErr returns the DependentPackage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IsDependencyEdges) DependentPackageOrErr() (*PackageName, error) {
	if e.loadedTypes[1] {
		if e.DependentPackage == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packagename.Label}
		}
		return e.DependentPackage, nil
	}
	return nil, &NotLoadedError{edge: "dependent_package"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IsDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case isdependency.FieldID, isdependency.FieldPackageID, isdependency.FieldDependentPackageID:
			values[i] = new(sql.NullInt64)
		case isdependency.FieldVersionRange, isdependency.FieldDependencyType, isdependency.FieldJustification, isdependency.FieldOrigin, isdependency.FieldCollector:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IsDependency fields.
func (id *IsDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case isdependency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			id.ID = int(value.Int64)
		case isdependency.FieldPackageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value.Valid {
				id.PackageID = int(value.Int64)
			}
		case isdependency.FieldDependentPackageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dependent_package_id", values[i])
			} else if value.Valid {
				id.DependentPackageID = int(value.Int64)
			}
		case isdependency.FieldVersionRange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_range", values[i])
			} else if value.Valid {
				id.VersionRange = value.String
			}
		case isdependency.FieldDependencyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_type", values[i])
			} else if value.Valid {
				id.DependencyType = value.String
			}
		case isdependency.FieldJustification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field justification", values[i])
			} else if value.Valid {
				id.Justification = value.String
			}
		case isdependency.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				id.Origin = value.String
			}
		case isdependency.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				id.Collector = value.String
			}
		default:
			id.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IsDependency.
// This includes values selected through modifiers, order, etc.
func (id *IsDependency) Value(name string) (ent.Value, error) {
	return id.selectValues.Get(name)
}

// QueryPackage queries the "package" edge of the IsDependency entity.
func (id *IsDependency) QueryPackage() *PackageVersionQuery {
	return NewIsDependencyClient(id.config).QueryPackage(id)
}

// QueryDependentPackage queries the "dependent_package" edge of the IsDependency entity.
func (id *IsDependency) QueryDependentPackage() *PackageNameQuery {
	return NewIsDependencyClient(id.config).QueryDependentPackage(id)
}

// Update returns a builder for updating this IsDependency.
// Note that you need to call IsDependency.Unwrap() before calling this method if this IsDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (id *IsDependency) Update() *IsDependencyUpdateOne {
	return NewIsDependencyClient(id.config).UpdateOne(id)
}

// Unwrap unwraps the IsDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (id *IsDependency) Unwrap() *IsDependency {
	_tx, ok := id.config.driver.(*txDriver)
	if !ok {
		panic("ent: IsDependency is not a transactional entity")
	}
	id.config.driver = _tx.drv
	return id
}

// String implements the fmt.Stringer.
func (id *IsDependency) String() string {
	var builder strings.Builder
	builder.WriteString("IsDependency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", id.ID))
	builder.WriteString("package_id=")
	builder.WriteString(fmt.Sprintf("%v", id.PackageID))
	builder.WriteString(", ")
	builder.WriteString("dependent_package_id=")
	builder.WriteString(fmt.Sprintf("%v", id.DependentPackageID))
	builder.WriteString(", ")
	builder.WriteString("version_range=")
	builder.WriteString(id.VersionRange)
	builder.WriteString(", ")
	builder.WriteString("dependency_type=")
	builder.WriteString(id.DependencyType)
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(id.Justification)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(id.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(id.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// IsDependencies is a parsable slice of IsDependency.
type IsDependencies []*IsDependency

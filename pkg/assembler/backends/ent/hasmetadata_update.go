// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hasmetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// HasMetadataUpdate is the builder for updating HasMetadata entities.
type HasMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *HasMetadataMutation
}

// Where appends a list predicates to the HasMetadataUpdate builder.
func (hmu *HasMetadataUpdate) Where(ps ...predicate.HasMetadata) *HasMetadataUpdate {
	hmu.mutation.Where(ps...)
	return hmu
}

// SetSourceID sets the "source_id" field.
func (hmu *HasMetadataUpdate) SetSourceID(i int) *HasMetadataUpdate {
	hmu.mutation.SetSourceID(i)
	return hmu
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (hmu *HasMetadataUpdate) SetNillableSourceID(i *int) *HasMetadataUpdate {
	if i != nil {
		hmu.SetSourceID(*i)
	}
	return hmu
}

// ClearSourceID clears the value of the "source_id" field.
func (hmu *HasMetadataUpdate) ClearSourceID() *HasMetadataUpdate {
	hmu.mutation.ClearSourceID()
	return hmu
}

// SetPackageVersionID sets the "package_version_id" field.
func (hmu *HasMetadataUpdate) SetPackageVersionID(i int) *HasMetadataUpdate {
	hmu.mutation.SetPackageVersionID(i)
	return hmu
}

// SetNillablePackageVersionID sets the "package_version_id" field if the given value is not nil.
func (hmu *HasMetadataUpdate) SetNillablePackageVersionID(i *int) *HasMetadataUpdate {
	if i != nil {
		hmu.SetPackageVersionID(*i)
	}
	return hmu
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (hmu *HasMetadataUpdate) ClearPackageVersionID() *HasMetadataUpdate {
	hmu.mutation.ClearPackageVersionID()
	return hmu
}

// SetPackageNameID sets the "package_name_id" field.
func (hmu *HasMetadataUpdate) SetPackageNameID(i int) *HasMetadataUpdate {
	hmu.mutation.SetPackageNameID(i)
	return hmu
}

// SetNillablePackageNameID sets the "package_name_id" field if the given value is not nil.
func (hmu *HasMetadataUpdate) SetNillablePackageNameID(i *int) *HasMetadataUpdate {
	if i != nil {
		hmu.SetPackageNameID(*i)
	}
	return hmu
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (hmu *HasMetadataUpdate) ClearPackageNameID() *HasMetadataUpdate {
	hmu.mutation.ClearPackageNameID()
	return hmu
}

// SetArtifactID sets the "artifact_id" field.
func (hmu *HasMetadataUpdate) SetArtifactID(i int) *HasMetadataUpdate {
	hmu.mutation.SetArtifactID(i)
	return hmu
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (hmu *HasMetadataUpdate) SetNillableArtifactID(i *int) *HasMetadataUpdate {
	if i != nil {
		hmu.SetArtifactID(*i)
	}
	return hmu
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (hmu *HasMetadataUpdate) ClearArtifactID() *HasMetadataUpdate {
	hmu.mutation.ClearArtifactID()
	return hmu
}

// SetTimestamp sets the "timestamp" field.
func (hmu *HasMetadataUpdate) SetTimestamp(t time.Time) *HasMetadataUpdate {
	hmu.mutation.SetTimestamp(t)
	return hmu
}

// SetKey sets the "key" field.
func (hmu *HasMetadataUpdate) SetKey(s string) *HasMetadataUpdate {
	hmu.mutation.SetKey(s)
	return hmu
}

// SetValue sets the "value" field.
func (hmu *HasMetadataUpdate) SetValue(s string) *HasMetadataUpdate {
	hmu.mutation.SetValue(s)
	return hmu
}

// SetJustification sets the "justification" field.
func (hmu *HasMetadataUpdate) SetJustification(s string) *HasMetadataUpdate {
	hmu.mutation.SetJustification(s)
	return hmu
}

// SetOrigin sets the "origin" field.
func (hmu *HasMetadataUpdate) SetOrigin(s string) *HasMetadataUpdate {
	hmu.mutation.SetOrigin(s)
	return hmu
}

// SetCollector sets the "collector" field.
func (hmu *HasMetadataUpdate) SetCollector(s string) *HasMetadataUpdate {
	hmu.mutation.SetCollector(s)
	return hmu
}

// SetSource sets the "source" edge to the SourceName entity.
func (hmu *HasMetadataUpdate) SetSource(s *SourceName) *HasMetadataUpdate {
	return hmu.SetSourceID(s.ID)
}

// SetPackageVersion sets the "package_version" edge to the PackageVersion entity.
func (hmu *HasMetadataUpdate) SetPackageVersion(p *PackageVersion) *HasMetadataUpdate {
	return hmu.SetPackageVersionID(p.ID)
}

// SetAllVersionsID sets the "all_versions" edge to the PackageName entity by ID.
func (hmu *HasMetadataUpdate) SetAllVersionsID(id int) *HasMetadataUpdate {
	hmu.mutation.SetAllVersionsID(id)
	return hmu
}

// SetNillableAllVersionsID sets the "all_versions" edge to the PackageName entity by ID if the given value is not nil.
func (hmu *HasMetadataUpdate) SetNillableAllVersionsID(id *int) *HasMetadataUpdate {
	if id != nil {
		hmu = hmu.SetAllVersionsID(*id)
	}
	return hmu
}

// SetAllVersions sets the "all_versions" edge to the PackageName entity.
func (hmu *HasMetadataUpdate) SetAllVersions(p *PackageName) *HasMetadataUpdate {
	return hmu.SetAllVersionsID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (hmu *HasMetadataUpdate) SetArtifact(a *Artifact) *HasMetadataUpdate {
	return hmu.SetArtifactID(a.ID)
}

// Mutation returns the HasMetadataMutation object of the builder.
func (hmu *HasMetadataUpdate) Mutation() *HasMetadataMutation {
	return hmu.mutation
}

// ClearSource clears the "source" edge to the SourceName entity.
func (hmu *HasMetadataUpdate) ClearSource() *HasMetadataUpdate {
	hmu.mutation.ClearSource()
	return hmu
}

// ClearPackageVersion clears the "package_version" edge to the PackageVersion entity.
func (hmu *HasMetadataUpdate) ClearPackageVersion() *HasMetadataUpdate {
	hmu.mutation.ClearPackageVersion()
	return hmu
}

// ClearAllVersions clears the "all_versions" edge to the PackageName entity.
func (hmu *HasMetadataUpdate) ClearAllVersions() *HasMetadataUpdate {
	hmu.mutation.ClearAllVersions()
	return hmu
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (hmu *HasMetadataUpdate) ClearArtifact() *HasMetadataUpdate {
	hmu.mutation.ClearArtifact()
	return hmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hmu *HasMetadataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hmu.sqlSave, hmu.mutation, hmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hmu *HasMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := hmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hmu *HasMetadataUpdate) Exec(ctx context.Context) error {
	_, err := hmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hmu *HasMetadataUpdate) ExecX(ctx context.Context) {
	if err := hmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hmu *HasMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hasmetadata.Table, hasmetadata.Columns, sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeInt))
	if ps := hmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hmu.mutation.Timestamp(); ok {
		_spec.SetField(hasmetadata.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := hmu.mutation.Key(); ok {
		_spec.SetField(hasmetadata.FieldKey, field.TypeString, value)
	}
	if value, ok := hmu.mutation.Value(); ok {
		_spec.SetField(hasmetadata.FieldValue, field.TypeString, value)
	}
	if value, ok := hmu.mutation.Justification(); ok {
		_spec.SetField(hasmetadata.FieldJustification, field.TypeString, value)
	}
	if value, ok := hmu.mutation.Origin(); ok {
		_spec.SetField(hasmetadata.FieldOrigin, field.TypeString, value)
	}
	if value, ok := hmu.mutation.Collector(); ok {
		_spec.SetField(hasmetadata.FieldCollector, field.TypeString, value)
	}
	if hmu.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.SourceTable,
			Columns: []string{hasmetadata.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.SourceTable,
			Columns: []string{hasmetadata.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.PackageVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.PackageVersionTable,
			Columns: []string{hasmetadata.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.PackageVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.PackageVersionTable,
			Columns: []string{hasmetadata.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.AllVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.AllVersionsTable,
			Columns: []string{hasmetadata.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.AllVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.AllVersionsTable,
			Columns: []string{hasmetadata.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmu.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.ArtifactTable,
			Columns: []string{hasmetadata.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmu.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.ArtifactTable,
			Columns: []string{hasmetadata.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hasmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hmu.mutation.done = true
	return n, nil
}

// HasMetadataUpdateOne is the builder for updating a single HasMetadata entity.
type HasMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HasMetadataMutation
}

// SetSourceID sets the "source_id" field.
func (hmuo *HasMetadataUpdateOne) SetSourceID(i int) *HasMetadataUpdateOne {
	hmuo.mutation.SetSourceID(i)
	return hmuo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (hmuo *HasMetadataUpdateOne) SetNillableSourceID(i *int) *HasMetadataUpdateOne {
	if i != nil {
		hmuo.SetSourceID(*i)
	}
	return hmuo
}

// ClearSourceID clears the value of the "source_id" field.
func (hmuo *HasMetadataUpdateOne) ClearSourceID() *HasMetadataUpdateOne {
	hmuo.mutation.ClearSourceID()
	return hmuo
}

// SetPackageVersionID sets the "package_version_id" field.
func (hmuo *HasMetadataUpdateOne) SetPackageVersionID(i int) *HasMetadataUpdateOne {
	hmuo.mutation.SetPackageVersionID(i)
	return hmuo
}

// SetNillablePackageVersionID sets the "package_version_id" field if the given value is not nil.
func (hmuo *HasMetadataUpdateOne) SetNillablePackageVersionID(i *int) *HasMetadataUpdateOne {
	if i != nil {
		hmuo.SetPackageVersionID(*i)
	}
	return hmuo
}

// ClearPackageVersionID clears the value of the "package_version_id" field.
func (hmuo *HasMetadataUpdateOne) ClearPackageVersionID() *HasMetadataUpdateOne {
	hmuo.mutation.ClearPackageVersionID()
	return hmuo
}

// SetPackageNameID sets the "package_name_id" field.
func (hmuo *HasMetadataUpdateOne) SetPackageNameID(i int) *HasMetadataUpdateOne {
	hmuo.mutation.SetPackageNameID(i)
	return hmuo
}

// SetNillablePackageNameID sets the "package_name_id" field if the given value is not nil.
func (hmuo *HasMetadataUpdateOne) SetNillablePackageNameID(i *int) *HasMetadataUpdateOne {
	if i != nil {
		hmuo.SetPackageNameID(*i)
	}
	return hmuo
}

// ClearPackageNameID clears the value of the "package_name_id" field.
func (hmuo *HasMetadataUpdateOne) ClearPackageNameID() *HasMetadataUpdateOne {
	hmuo.mutation.ClearPackageNameID()
	return hmuo
}

// SetArtifactID sets the "artifact_id" field.
func (hmuo *HasMetadataUpdateOne) SetArtifactID(i int) *HasMetadataUpdateOne {
	hmuo.mutation.SetArtifactID(i)
	return hmuo
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (hmuo *HasMetadataUpdateOne) SetNillableArtifactID(i *int) *HasMetadataUpdateOne {
	if i != nil {
		hmuo.SetArtifactID(*i)
	}
	return hmuo
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (hmuo *HasMetadataUpdateOne) ClearArtifactID() *HasMetadataUpdateOne {
	hmuo.mutation.ClearArtifactID()
	return hmuo
}

// SetTimestamp sets the "timestamp" field.
func (hmuo *HasMetadataUpdateOne) SetTimestamp(t time.Time) *HasMetadataUpdateOne {
	hmuo.mutation.SetTimestamp(t)
	return hmuo
}

// SetKey sets the "key" field.
func (hmuo *HasMetadataUpdateOne) SetKey(s string) *HasMetadataUpdateOne {
	hmuo.mutation.SetKey(s)
	return hmuo
}

// SetValue sets the "value" field.
func (hmuo *HasMetadataUpdateOne) SetValue(s string) *HasMetadataUpdateOne {
	hmuo.mutation.SetValue(s)
	return hmuo
}

// SetJustification sets the "justification" field.
func (hmuo *HasMetadataUpdateOne) SetJustification(s string) *HasMetadataUpdateOne {
	hmuo.mutation.SetJustification(s)
	return hmuo
}

// SetOrigin sets the "origin" field.
func (hmuo *HasMetadataUpdateOne) SetOrigin(s string) *HasMetadataUpdateOne {
	hmuo.mutation.SetOrigin(s)
	return hmuo
}

// SetCollector sets the "collector" field.
func (hmuo *HasMetadataUpdateOne) SetCollector(s string) *HasMetadataUpdateOne {
	hmuo.mutation.SetCollector(s)
	return hmuo
}

// SetSource sets the "source" edge to the SourceName entity.
func (hmuo *HasMetadataUpdateOne) SetSource(s *SourceName) *HasMetadataUpdateOne {
	return hmuo.SetSourceID(s.ID)
}

// SetPackageVersion sets the "package_version" edge to the PackageVersion entity.
func (hmuo *HasMetadataUpdateOne) SetPackageVersion(p *PackageVersion) *HasMetadataUpdateOne {
	return hmuo.SetPackageVersionID(p.ID)
}

// SetAllVersionsID sets the "all_versions" edge to the PackageName entity by ID.
func (hmuo *HasMetadataUpdateOne) SetAllVersionsID(id int) *HasMetadataUpdateOne {
	hmuo.mutation.SetAllVersionsID(id)
	return hmuo
}

// SetNillableAllVersionsID sets the "all_versions" edge to the PackageName entity by ID if the given value is not nil.
func (hmuo *HasMetadataUpdateOne) SetNillableAllVersionsID(id *int) *HasMetadataUpdateOne {
	if id != nil {
		hmuo = hmuo.SetAllVersionsID(*id)
	}
	return hmuo
}

// SetAllVersions sets the "all_versions" edge to the PackageName entity.
func (hmuo *HasMetadataUpdateOne) SetAllVersions(p *PackageName) *HasMetadataUpdateOne {
	return hmuo.SetAllVersionsID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (hmuo *HasMetadataUpdateOne) SetArtifact(a *Artifact) *HasMetadataUpdateOne {
	return hmuo.SetArtifactID(a.ID)
}

// Mutation returns the HasMetadataMutation object of the builder.
func (hmuo *HasMetadataUpdateOne) Mutation() *HasMetadataMutation {
	return hmuo.mutation
}

// ClearSource clears the "source" edge to the SourceName entity.
func (hmuo *HasMetadataUpdateOne) ClearSource() *HasMetadataUpdateOne {
	hmuo.mutation.ClearSource()
	return hmuo
}

// ClearPackageVersion clears the "package_version" edge to the PackageVersion entity.
func (hmuo *HasMetadataUpdateOne) ClearPackageVersion() *HasMetadataUpdateOne {
	hmuo.mutation.ClearPackageVersion()
	return hmuo
}

// ClearAllVersions clears the "all_versions" edge to the PackageName entity.
func (hmuo *HasMetadataUpdateOne) ClearAllVersions() *HasMetadataUpdateOne {
	hmuo.mutation.ClearAllVersions()
	return hmuo
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (hmuo *HasMetadataUpdateOne) ClearArtifact() *HasMetadataUpdateOne {
	hmuo.mutation.ClearArtifact()
	return hmuo
}

// Where appends a list predicates to the HasMetadataUpdate builder.
func (hmuo *HasMetadataUpdateOne) Where(ps ...predicate.HasMetadata) *HasMetadataUpdateOne {
	hmuo.mutation.Where(ps...)
	return hmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hmuo *HasMetadataUpdateOne) Select(field string, fields ...string) *HasMetadataUpdateOne {
	hmuo.fields = append([]string{field}, fields...)
	return hmuo
}

// Save executes the query and returns the updated HasMetadata entity.
func (hmuo *HasMetadataUpdateOne) Save(ctx context.Context) (*HasMetadata, error) {
	return withHooks(ctx, hmuo.sqlSave, hmuo.mutation, hmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hmuo *HasMetadataUpdateOne) SaveX(ctx context.Context) *HasMetadata {
	node, err := hmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hmuo *HasMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := hmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hmuo *HasMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := hmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hmuo *HasMetadataUpdateOne) sqlSave(ctx context.Context) (_node *HasMetadata, err error) {
	_spec := sqlgraph.NewUpdateSpec(hasmetadata.Table, hasmetadata.Columns, sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeInt))
	id, ok := hmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HasMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hasmetadata.FieldID)
		for _, f := range fields {
			if !hasmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hasmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hmuo.mutation.Timestamp(); ok {
		_spec.SetField(hasmetadata.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := hmuo.mutation.Key(); ok {
		_spec.SetField(hasmetadata.FieldKey, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.Value(); ok {
		_spec.SetField(hasmetadata.FieldValue, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.Justification(); ok {
		_spec.SetField(hasmetadata.FieldJustification, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.Origin(); ok {
		_spec.SetField(hasmetadata.FieldOrigin, field.TypeString, value)
	}
	if value, ok := hmuo.mutation.Collector(); ok {
		_spec.SetField(hasmetadata.FieldCollector, field.TypeString, value)
	}
	if hmuo.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.SourceTable,
			Columns: []string{hasmetadata.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.SourceTable,
			Columns: []string{hasmetadata.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.PackageVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.PackageVersionTable,
			Columns: []string{hasmetadata.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.PackageVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.PackageVersionTable,
			Columns: []string{hasmetadata.PackageVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.AllVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.AllVersionsTable,
			Columns: []string{hasmetadata.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.AllVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.AllVersionsTable,
			Columns: []string{hasmetadata.AllVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hmuo.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.ArtifactTable,
			Columns: []string{hasmetadata.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hmuo.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hasmetadata.ArtifactTable,
			Columns: []string{hasmetadata.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HasMetadata{config: hmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hasmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hmuo.mutation.done = true
	return _node, nil
}

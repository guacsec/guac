// Code generated by ent, DO NOT EDIT.

package certifyscorecard

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the certifyscorecard type in the database.
	Label = "certify_scorecard"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceID holds the string denoting the source_id field in the database.
	FieldSourceID = "source_id"
	// FieldChecks holds the string denoting the checks field in the database.
	FieldChecks = "checks"
	// FieldAggregateScore holds the string denoting the aggregate_score field in the database.
	FieldAggregateScore = "aggregate_score"
	// FieldTimeScanned holds the string denoting the time_scanned field in the database.
	FieldTimeScanned = "time_scanned"
	// FieldScorecardVersion holds the string denoting the scorecard_version field in the database.
	FieldScorecardVersion = "scorecard_version"
	// FieldScorecardCommit holds the string denoting the scorecard_commit field in the database.
	FieldScorecardCommit = "scorecard_commit"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// FieldChecksHash holds the string denoting the checks_hash field in the database.
	FieldChecksHash = "checks_hash"
	// EdgeSource holds the string denoting the source edge name in mutations.
	EdgeSource = "source"
	// Table holds the table name of the certifyscorecard in the database.
	Table = "certify_scorecards"
	// SourceTable is the table that holds the source relation/edge.
	SourceTable = "certify_scorecards"
	// SourceInverseTable is the table name for the SourceName entity.
	// It exists in this package in order to avoid circular dependency with the "sourcename" package.
	SourceInverseTable = "source_names"
	// SourceColumn is the table column denoting the source relation/edge.
	SourceColumn = "source_id"
)

// Columns holds all SQL columns for certifyscorecard fields.
var Columns = []string{
	FieldID,
	FieldSourceID,
	FieldChecks,
	FieldAggregateScore,
	FieldTimeScanned,
	FieldScorecardVersion,
	FieldScorecardCommit,
	FieldOrigin,
	FieldCollector,
	FieldChecksHash,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAggregateScore holds the default value on creation for the "aggregate_score" field.
	DefaultAggregateScore float64
	// DefaultTimeScanned holds the default value on creation for the "time_scanned" field.
	DefaultTimeScanned func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the CertifyScorecard queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySourceID orders the results by the source_id field.
func BySourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceID, opts...).ToFunc()
}

// ByAggregateScore orders the results by the aggregate_score field.
func ByAggregateScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAggregateScore, opts...).ToFunc()
}

// ByTimeScanned orders the results by the time_scanned field.
func ByTimeScanned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeScanned, opts...).ToFunc()
}

// ByScorecardVersion orders the results by the scorecard_version field.
func ByScorecardVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScorecardVersion, opts...).ToFunc()
}

// ByScorecardCommit orders the results by the scorecard_commit field.
func ByScorecardCommit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScorecardCommit, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByChecksHash orders the results by the checks_hash field.
func ByChecksHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChecksHash, opts...).ToFunc()
}

// BySourceField orders the results by source field.
func BySourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceStep(), sql.OrderByField(field, opts...))
	}
}
func newSourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
	)
}

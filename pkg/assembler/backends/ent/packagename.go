// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
)

// PackageName is the model entity for the PackageName schema.
type PackageName struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// This node matches a pkg:<type> partial pURL
	Type string `json:"type,omitempty"`
	// In the pURL representation, each PackageNamespace matches the pkg:<type>/<namespace>/ partial pURL
	Namespace string `json:"namespace,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackageNameQuery when eager-loading is set.
	Edges        PackageNameEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PackageNameEdges holds the relations/edges for other nodes in the graph.
type PackageNameEdges struct {
	// Versions holds the value of the versions edge.
	Versions []*PackageVersion `json:"versions,omitempty"`
	// HasSourceAt holds the value of the has_source_at edge.
	HasSourceAt []*HasSourceAt `json:"has_source_at,omitempty"`
	// Certification holds the value of the certification edge.
	Certification []*Certification `json:"certification,omitempty"`
	// Metadata holds the value of the metadata edge.
	Metadata []*HasMetadata `json:"metadata,omitempty"`
	// Poc holds the value of the poc edge.
	Poc []*PointOfContact `json:"poc,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedVersions      map[string][]*PackageVersion
	namedHasSourceAt   map[string][]*HasSourceAt
	namedCertification map[string][]*Certification
	namedMetadata      map[string][]*HasMetadata
	namedPoc           map[string][]*PointOfContact
}

// VersionsOrErr returns the Versions value or an error if the edge
// was not loaded in eager-loading.
func (e PackageNameEdges) VersionsOrErr() ([]*PackageVersion, error) {
	if e.loadedTypes[0] {
		return e.Versions, nil
	}
	return nil, &NotLoadedError{edge: "versions"}
}

// HasSourceAtOrErr returns the HasSourceAt value or an error if the edge
// was not loaded in eager-loading.
func (e PackageNameEdges) HasSourceAtOrErr() ([]*HasSourceAt, error) {
	if e.loadedTypes[1] {
		return e.HasSourceAt, nil
	}
	return nil, &NotLoadedError{edge: "has_source_at"}
}

// CertificationOrErr returns the Certification value or an error if the edge
// was not loaded in eager-loading.
func (e PackageNameEdges) CertificationOrErr() ([]*Certification, error) {
	if e.loadedTypes[2] {
		return e.Certification, nil
	}
	return nil, &NotLoadedError{edge: "certification"}
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading.
func (e PackageNameEdges) MetadataOrErr() ([]*HasMetadata, error) {
	if e.loadedTypes[3] {
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// PocOrErr returns the Poc value or an error if the edge
// was not loaded in eager-loading.
func (e PackageNameEdges) PocOrErr() ([]*PointOfContact, error) {
	if e.loadedTypes[4] {
		return e.Poc, nil
	}
	return nil, &NotLoadedError{edge: "poc"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PackageName) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case packagename.FieldType, packagename.FieldNamespace, packagename.FieldName:
			values[i] = new(sql.NullString)
		case packagename.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PackageName fields.
func (pn *PackageName) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packagename.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pn.ID = *value
			}
		case packagename.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pn.Type = value.String
			}
		case packagename.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				pn.Namespace = value.String
			}
		case packagename.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pn.Name = value.String
			}
		default:
			pn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PackageName.
// This includes values selected through modifiers, order, etc.
func (pn *PackageName) Value(name string) (ent.Value, error) {
	return pn.selectValues.Get(name)
}

// QueryVersions queries the "versions" edge of the PackageName entity.
func (pn *PackageName) QueryVersions() *PackageVersionQuery {
	return NewPackageNameClient(pn.config).QueryVersions(pn)
}

// QueryHasSourceAt queries the "has_source_at" edge of the PackageName entity.
func (pn *PackageName) QueryHasSourceAt() *HasSourceAtQuery {
	return NewPackageNameClient(pn.config).QueryHasSourceAt(pn)
}

// QueryCertification queries the "certification" edge of the PackageName entity.
func (pn *PackageName) QueryCertification() *CertificationQuery {
	return NewPackageNameClient(pn.config).QueryCertification(pn)
}

// QueryMetadata queries the "metadata" edge of the PackageName entity.
func (pn *PackageName) QueryMetadata() *HasMetadataQuery {
	return NewPackageNameClient(pn.config).QueryMetadata(pn)
}

// QueryPoc queries the "poc" edge of the PackageName entity.
func (pn *PackageName) QueryPoc() *PointOfContactQuery {
	return NewPackageNameClient(pn.config).QueryPoc(pn)
}

// Update returns a builder for updating this PackageName.
// Note that you need to call PackageName.Unwrap() before calling this method if this PackageName
// was returned from a transaction, and the transaction was committed or rolled back.
func (pn *PackageName) Update() *PackageNameUpdateOne {
	return NewPackageNameClient(pn.config).UpdateOne(pn)
}

// Unwrap unwraps the PackageName entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pn *PackageName) Unwrap() *PackageName {
	_tx, ok := pn.config.driver.(*txDriver)
	if !ok {
		panic("ent: PackageName is not a transactional entity")
	}
	pn.config.driver = _tx.drv
	return pn
}

// String implements the fmt.Stringer.
func (pn *PackageName) String() string {
	var builder strings.Builder
	builder.WriteString("PackageName(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pn.ID))
	builder.WriteString("type=")
	builder.WriteString(pn.Type)
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(pn.Namespace)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pn.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedVersions returns the Versions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pn *PackageName) NamedVersions(name string) ([]*PackageVersion, error) {
	if pn.Edges.namedVersions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pn.Edges.namedVersions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pn *PackageName) appendNamedVersions(name string, edges ...*PackageVersion) {
	if pn.Edges.namedVersions == nil {
		pn.Edges.namedVersions = make(map[string][]*PackageVersion)
	}
	if len(edges) == 0 {
		pn.Edges.namedVersions[name] = []*PackageVersion{}
	} else {
		pn.Edges.namedVersions[name] = append(pn.Edges.namedVersions[name], edges...)
	}
}

// NamedHasSourceAt returns the HasSourceAt named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pn *PackageName) NamedHasSourceAt(name string) ([]*HasSourceAt, error) {
	if pn.Edges.namedHasSourceAt == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pn.Edges.namedHasSourceAt[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pn *PackageName) appendNamedHasSourceAt(name string, edges ...*HasSourceAt) {
	if pn.Edges.namedHasSourceAt == nil {
		pn.Edges.namedHasSourceAt = make(map[string][]*HasSourceAt)
	}
	if len(edges) == 0 {
		pn.Edges.namedHasSourceAt[name] = []*HasSourceAt{}
	} else {
		pn.Edges.namedHasSourceAt[name] = append(pn.Edges.namedHasSourceAt[name], edges...)
	}
}

// NamedCertification returns the Certification named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pn *PackageName) NamedCertification(name string) ([]*Certification, error) {
	if pn.Edges.namedCertification == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pn.Edges.namedCertification[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pn *PackageName) appendNamedCertification(name string, edges ...*Certification) {
	if pn.Edges.namedCertification == nil {
		pn.Edges.namedCertification = make(map[string][]*Certification)
	}
	if len(edges) == 0 {
		pn.Edges.namedCertification[name] = []*Certification{}
	} else {
		pn.Edges.namedCertification[name] = append(pn.Edges.namedCertification[name], edges...)
	}
}

// NamedMetadata returns the Metadata named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pn *PackageName) NamedMetadata(name string) ([]*HasMetadata, error) {
	if pn.Edges.namedMetadata == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pn.Edges.namedMetadata[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pn *PackageName) appendNamedMetadata(name string, edges ...*HasMetadata) {
	if pn.Edges.namedMetadata == nil {
		pn.Edges.namedMetadata = make(map[string][]*HasMetadata)
	}
	if len(edges) == 0 {
		pn.Edges.namedMetadata[name] = []*HasMetadata{}
	} else {
		pn.Edges.namedMetadata[name] = append(pn.Edges.namedMetadata[name], edges...)
	}
}

// NamedPoc returns the Poc named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pn *PackageName) NamedPoc(name string) ([]*PointOfContact, error) {
	if pn.Edges.namedPoc == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pn.Edges.namedPoc[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pn *PackageName) appendNamedPoc(name string, edges ...*PointOfContact) {
	if pn.Edges.namedPoc == nil {
		pn.Edges.namedPoc = make(map[string][]*PointOfContact)
	}
	if len(edges) == 0 {
		pn.Edges.namedPoc[name] = []*PointOfContact{}
	} else {
		pn.Edges.namedPoc[name] = append(pn.Edges.namedPoc[name], edges...)
	}
}

// PackageNames is a parsable slice of PackageName.
type PackageNames []*PackageName

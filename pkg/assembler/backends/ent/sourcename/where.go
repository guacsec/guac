// Code generated by ent, DO NOT EDIT.

package sourcename

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SourceName {
	return predicate.SourceName(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SourceName {
	return predicate.SourceName(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SourceName {
	return predicate.SourceName(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SourceName {
	return predicate.SourceName(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SourceName {
	return predicate.SourceName(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SourceName {
	return predicate.SourceName(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SourceName {
	return predicate.SourceName(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldType, v))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldNamespace, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldName, v))
}

// Commit applies equality check predicate on the "commit" field. It's identical to CommitEQ.
func Commit(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldCommit, v))
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldTag, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.SourceName {
	return predicate.SourceName(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.SourceName {
	return predicate.SourceName(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldContainsFold(FieldType, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.SourceName {
	return predicate.SourceName(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.SourceName {
	return predicate.SourceName(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldContainsFold(FieldNamespace, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SourceName {
	return predicate.SourceName(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SourceName {
	return predicate.SourceName(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldContainsFold(FieldName, v))
}

// CommitEQ applies the EQ predicate on the "commit" field.
func CommitEQ(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldCommit, v))
}

// CommitNEQ applies the NEQ predicate on the "commit" field.
func CommitNEQ(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldNEQ(FieldCommit, v))
}

// CommitIn applies the In predicate on the "commit" field.
func CommitIn(vs ...string) predicate.SourceName {
	return predicate.SourceName(sql.FieldIn(FieldCommit, vs...))
}

// CommitNotIn applies the NotIn predicate on the "commit" field.
func CommitNotIn(vs ...string) predicate.SourceName {
	return predicate.SourceName(sql.FieldNotIn(FieldCommit, vs...))
}

// CommitGT applies the GT predicate on the "commit" field.
func CommitGT(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldGT(FieldCommit, v))
}

// CommitGTE applies the GTE predicate on the "commit" field.
func CommitGTE(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldGTE(FieldCommit, v))
}

// CommitLT applies the LT predicate on the "commit" field.
func CommitLT(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldLT(FieldCommit, v))
}

// CommitLTE applies the LTE predicate on the "commit" field.
func CommitLTE(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldLTE(FieldCommit, v))
}

// CommitContains applies the Contains predicate on the "commit" field.
func CommitContains(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldContains(FieldCommit, v))
}

// CommitHasPrefix applies the HasPrefix predicate on the "commit" field.
func CommitHasPrefix(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldHasPrefix(FieldCommit, v))
}

// CommitHasSuffix applies the HasSuffix predicate on the "commit" field.
func CommitHasSuffix(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldHasSuffix(FieldCommit, v))
}

// CommitIsNil applies the IsNil predicate on the "commit" field.
func CommitIsNil() predicate.SourceName {
	return predicate.SourceName(sql.FieldIsNull(FieldCommit))
}

// CommitNotNil applies the NotNil predicate on the "commit" field.
func CommitNotNil() predicate.SourceName {
	return predicate.SourceName(sql.FieldNotNull(FieldCommit))
}

// CommitEqualFold applies the EqualFold predicate on the "commit" field.
func CommitEqualFold(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEqualFold(FieldCommit, v))
}

// CommitContainsFold applies the ContainsFold predicate on the "commit" field.
func CommitContainsFold(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldContainsFold(FieldCommit, v))
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.SourceName {
	return predicate.SourceName(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.SourceName {
	return predicate.SourceName(sql.FieldNotIn(FieldTag, vs...))
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldGT(FieldTag, v))
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldGTE(FieldTag, v))
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldLT(FieldTag, v))
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldLTE(FieldTag, v))
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldContains(FieldTag, v))
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldHasPrefix(FieldTag, v))
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldHasSuffix(FieldTag, v))
}

// TagIsNil applies the IsNil predicate on the "tag" field.
func TagIsNil() predicate.SourceName {
	return predicate.SourceName(sql.FieldIsNull(FieldTag))
}

// TagNotNil applies the NotNil predicate on the "tag" field.
func TagNotNil() predicate.SourceName {
	return predicate.SourceName(sql.FieldNotNull(FieldTag))
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldEqualFold(FieldTag, v))
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.SourceName {
	return predicate.SourceName(sql.FieldContainsFold(FieldTag, v))
}

// HasOccurrences applies the HasEdge predicate on the "occurrences" edge.
func HasOccurrences() predicate.SourceName {
	return predicate.SourceName(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OccurrencesTable, OccurrencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOccurrencesWith applies the HasEdge predicate on the "occurrences" edge with a given conditions (other predicates).
func HasOccurrencesWith(preds ...predicate.Occurrence) predicate.SourceName {
	return predicate.SourceName(func(s *sql.Selector) {
		step := newOccurrencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SourceName) predicate.SourceName {
	return predicate.SourceName(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SourceName) predicate.SourceName {
	return predicate.SourceName(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SourceName) predicate.SourceName {
	return predicate.SourceName(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
)

// VulnerabilityTypeCreate is the builder for creating a VulnerabilityType entity.
type VulnerabilityTypeCreate struct {
	config
	mutation *VulnerabilityTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (vtc *VulnerabilityTypeCreate) SetType(s string) *VulnerabilityTypeCreate {
	vtc.mutation.SetType(s)
	return vtc
}

// AddVulnerabilityIDIDs adds the "vulnerability_ids" edge to the VulnerabilityID entity by IDs.
func (vtc *VulnerabilityTypeCreate) AddVulnerabilityIDIDs(ids ...int) *VulnerabilityTypeCreate {
	vtc.mutation.AddVulnerabilityIDIDs(ids...)
	return vtc
}

// AddVulnerabilityIds adds the "vulnerability_ids" edges to the VulnerabilityID entity.
func (vtc *VulnerabilityTypeCreate) AddVulnerabilityIds(v ...*VulnerabilityID) *VulnerabilityTypeCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vtc.AddVulnerabilityIDIDs(ids...)
}

// Mutation returns the VulnerabilityTypeMutation object of the builder.
func (vtc *VulnerabilityTypeCreate) Mutation() *VulnerabilityTypeMutation {
	return vtc.mutation
}

// Save creates the VulnerabilityType in the database.
func (vtc *VulnerabilityTypeCreate) Save(ctx context.Context) (*VulnerabilityType, error) {
	return withHooks(ctx, vtc.sqlSave, vtc.mutation, vtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vtc *VulnerabilityTypeCreate) SaveX(ctx context.Context) *VulnerabilityType {
	v, err := vtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vtc *VulnerabilityTypeCreate) Exec(ctx context.Context) error {
	_, err := vtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtc *VulnerabilityTypeCreate) ExecX(ctx context.Context) {
	if err := vtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtc *VulnerabilityTypeCreate) check() error {
	if _, ok := vtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "VulnerabilityType.type"`)}
	}
	if v, ok := vtc.mutation.GetType(); ok {
		if err := vulnerabilitytype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "VulnerabilityType.type": %w`, err)}
		}
	}
	return nil
}

func (vtc *VulnerabilityTypeCreate) sqlSave(ctx context.Context) (*VulnerabilityType, error) {
	if err := vtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vtc.mutation.id = &_node.ID
	vtc.mutation.done = true
	return _node, nil
}

func (vtc *VulnerabilityTypeCreate) createSpec() (*VulnerabilityType, *sqlgraph.CreateSpec) {
	var (
		_node = &VulnerabilityType{config: vtc.config}
		_spec = sqlgraph.NewCreateSpec(vulnerabilitytype.Table, sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vtc.conflict
	if value, ok := vtc.mutation.GetType(); ok {
		_spec.SetField(vulnerabilitytype.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := vtc.mutation.VulnerabilityIdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vulnerabilitytype.VulnerabilityIdsTable,
			Columns: []string{vulnerabilitytype.VulnerabilityIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VulnerabilityType.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityTypeUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (vtc *VulnerabilityTypeCreate) OnConflict(opts ...sql.ConflictOption) *VulnerabilityTypeUpsertOne {
	vtc.conflict = opts
	return &VulnerabilityTypeUpsertOne{
		create: vtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VulnerabilityType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vtc *VulnerabilityTypeCreate) OnConflictColumns(columns ...string) *VulnerabilityTypeUpsertOne {
	vtc.conflict = append(vtc.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityTypeUpsertOne{
		create: vtc,
	}
}

type (
	// VulnerabilityTypeUpsertOne is the builder for "upsert"-ing
	//  one VulnerabilityType node.
	VulnerabilityTypeUpsertOne struct {
		create *VulnerabilityTypeCreate
	}

	// VulnerabilityTypeUpsert is the "OnConflict" setter.
	VulnerabilityTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *VulnerabilityTypeUpsert) SetType(v string) *VulnerabilityTypeUpsert {
	u.Set(vulnerabilitytype.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VulnerabilityTypeUpsert) UpdateType() *VulnerabilityTypeUpsert {
	u.SetExcluded(vulnerabilitytype.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VulnerabilityType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VulnerabilityTypeUpsertOne) UpdateNewValues() *VulnerabilityTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VulnerabilityType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VulnerabilityTypeUpsertOne) Ignore() *VulnerabilityTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityTypeUpsertOne) DoNothing() *VulnerabilityTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityTypeCreate.OnConflict
// documentation for more info.
func (u *VulnerabilityTypeUpsertOne) Update(set func(*VulnerabilityTypeUpsert)) *VulnerabilityTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *VulnerabilityTypeUpsertOne) SetType(v string) *VulnerabilityTypeUpsertOne {
	return u.Update(func(s *VulnerabilityTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VulnerabilityTypeUpsertOne) UpdateType() *VulnerabilityTypeUpsertOne {
	return u.Update(func(s *VulnerabilityTypeUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *VulnerabilityTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VulnerabilityTypeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VulnerabilityTypeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VulnerabilityTypeCreateBulk is the builder for creating many VulnerabilityType entities in bulk.
type VulnerabilityTypeCreateBulk struct {
	config
	builders []*VulnerabilityTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the VulnerabilityType entities in the database.
func (vtcb *VulnerabilityTypeCreateBulk) Save(ctx context.Context) ([]*VulnerabilityType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vtcb.builders))
	nodes := make([]*VulnerabilityType, len(vtcb.builders))
	mutators := make([]Mutator, len(vtcb.builders))
	for i := range vtcb.builders {
		func(i int, root context.Context) {
			builder := vtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VulnerabilityTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vtcb *VulnerabilityTypeCreateBulk) SaveX(ctx context.Context) []*VulnerabilityType {
	v, err := vtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vtcb *VulnerabilityTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := vtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtcb *VulnerabilityTypeCreateBulk) ExecX(ctx context.Context) {
	if err := vtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VulnerabilityType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityTypeUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (vtcb *VulnerabilityTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *VulnerabilityTypeUpsertBulk {
	vtcb.conflict = opts
	return &VulnerabilityTypeUpsertBulk{
		create: vtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VulnerabilityType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vtcb *VulnerabilityTypeCreateBulk) OnConflictColumns(columns ...string) *VulnerabilityTypeUpsertBulk {
	vtcb.conflict = append(vtcb.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityTypeUpsertBulk{
		create: vtcb,
	}
}

// VulnerabilityTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of VulnerabilityType nodes.
type VulnerabilityTypeUpsertBulk struct {
	create *VulnerabilityTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VulnerabilityType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VulnerabilityTypeUpsertBulk) UpdateNewValues() *VulnerabilityTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VulnerabilityType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VulnerabilityTypeUpsertBulk) Ignore() *VulnerabilityTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityTypeUpsertBulk) DoNothing() *VulnerabilityTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityTypeCreateBulk.OnConflict
// documentation for more info.
func (u *VulnerabilityTypeUpsertBulk) Update(set func(*VulnerabilityTypeUpsert)) *VulnerabilityTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *VulnerabilityTypeUpsertBulk) SetType(v string) *VulnerabilityTypeUpsertBulk {
	return u.Update(func(s *VulnerabilityTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VulnerabilityTypeUpsertBulk) UpdateType() *VulnerabilityTypeUpsertBulk {
	return u.Update(func(s *VulnerabilityTypeUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *VulnerabilityTypeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VulnerabilityTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

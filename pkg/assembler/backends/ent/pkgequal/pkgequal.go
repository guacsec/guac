// Code generated by ent, DO NOT EDIT.

package pkgequal

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pkgequal type in the database.
	Label = "pkg_equal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// FieldJustification holds the string denoting the justification field in the database.
	FieldJustification = "justification"
	// FieldPackagesHash holds the string denoting the packages_hash field in the database.
	FieldPackagesHash = "packages_hash"
	// EdgePackages holds the string denoting the packages edge name in mutations.
	EdgePackages = "packages"
	// Table holds the table name of the pkgequal in the database.
	Table = "pkg_equals"
	// PackagesTable is the table that holds the packages relation/edge. The primary key declared below.
	PackagesTable = "pkg_equal_packages"
	// PackagesInverseTable is the table name for the PackageVersion entity.
	// It exists in this package in order to avoid circular dependency with the "packageversion" package.
	PackagesInverseTable = "package_versions"
)

// Columns holds all SQL columns for pkgequal fields.
var Columns = []string{
	FieldID,
	FieldOrigin,
	FieldCollector,
	FieldJustification,
	FieldPackagesHash,
}

var (
	// PackagesPrimaryKey and PackagesColumn2 are the table columns denoting the
	// primary key for the packages relation (M2M).
	PackagesPrimaryKey = []string{"pkg_equal_id", "package_version_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PkgEqual queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByJustification orders the results by the justification field.
func ByJustification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJustification, opts...).ToFunc()
}

// ByPackagesHash orders the results by the packages_hash field.
func ByPackagesHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackagesHash, opts...).ToFunc()
}

// ByPackagesCount orders the results by packages count.
func ByPackagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPackagesStep(), opts...)
	}
}

// ByPackages orders the results by packages terms.
func ByPackages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPackagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PackagesTable, PackagesPrimaryKey...),
	)
}

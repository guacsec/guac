// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/dependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hasmetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hassourceat"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pointofcontact"
)

// PackageNameCreate is the builder for creating a PackageName entity.
type PackageNameCreate struct {
	config
	mutation *PackageNameMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (pnc *PackageNameCreate) SetType(s string) *PackageNameCreate {
	pnc.mutation.SetType(s)
	return pnc
}

// SetNamespace sets the "namespace" field.
func (pnc *PackageNameCreate) SetNamespace(s string) *PackageNameCreate {
	pnc.mutation.SetNamespace(s)
	return pnc
}

// SetName sets the "name" field.
func (pnc *PackageNameCreate) SetName(s string) *PackageNameCreate {
	pnc.mutation.SetName(s)
	return pnc
}

// SetID sets the "id" field.
func (pnc *PackageNameCreate) SetID(u uuid.UUID) *PackageNameCreate {
	pnc.mutation.SetID(u)
	return pnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pnc *PackageNameCreate) SetNillableID(u *uuid.UUID) *PackageNameCreate {
	if u != nil {
		pnc.SetID(*u)
	}
	return pnc
}

// AddVersionIDs adds the "versions" edge to the PackageVersion entity by IDs.
func (pnc *PackageNameCreate) AddVersionIDs(ids ...uuid.UUID) *PackageNameCreate {
	pnc.mutation.AddVersionIDs(ids...)
	return pnc
}

// AddVersions adds the "versions" edges to the PackageVersion entity.
func (pnc *PackageNameCreate) AddVersions(p ...*PackageVersion) *PackageNameCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnc.AddVersionIDs(ids...)
}

// AddHasSourceAtIDs adds the "has_source_at" edge to the HasSourceAt entity by IDs.
func (pnc *PackageNameCreate) AddHasSourceAtIDs(ids ...uuid.UUID) *PackageNameCreate {
	pnc.mutation.AddHasSourceAtIDs(ids...)
	return pnc
}

// AddHasSourceAt adds the "has_source_at" edges to the HasSourceAt entity.
func (pnc *PackageNameCreate) AddHasSourceAt(h ...*HasSourceAt) *PackageNameCreate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pnc.AddHasSourceAtIDs(ids...)
}

// AddDependencyIDs adds the "dependency" edge to the Dependency entity by IDs.
func (pnc *PackageNameCreate) AddDependencyIDs(ids ...uuid.UUID) *PackageNameCreate {
	pnc.mutation.AddDependencyIDs(ids...)
	return pnc
}

// AddDependency adds the "dependency" edges to the Dependency entity.
func (pnc *PackageNameCreate) AddDependency(d ...*Dependency) *PackageNameCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pnc.AddDependencyIDs(ids...)
}

// AddCertificationIDs adds the "certification" edge to the Certification entity by IDs.
func (pnc *PackageNameCreate) AddCertificationIDs(ids ...uuid.UUID) *PackageNameCreate {
	pnc.mutation.AddCertificationIDs(ids...)
	return pnc
}

// AddCertification adds the "certification" edges to the Certification entity.
func (pnc *PackageNameCreate) AddCertification(c ...*Certification) *PackageNameCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pnc.AddCertificationIDs(ids...)
}

// AddMetadatumIDs adds the "metadata" edge to the HasMetadata entity by IDs.
func (pnc *PackageNameCreate) AddMetadatumIDs(ids ...uuid.UUID) *PackageNameCreate {
	pnc.mutation.AddMetadatumIDs(ids...)
	return pnc
}

// AddMetadata adds the "metadata" edges to the HasMetadata entity.
func (pnc *PackageNameCreate) AddMetadata(h ...*HasMetadata) *PackageNameCreate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pnc.AddMetadatumIDs(ids...)
}

// AddPocIDs adds the "poc" edge to the PointOfContact entity by IDs.
func (pnc *PackageNameCreate) AddPocIDs(ids ...uuid.UUID) *PackageNameCreate {
	pnc.mutation.AddPocIDs(ids...)
	return pnc
}

// AddPoc adds the "poc" edges to the PointOfContact entity.
func (pnc *PackageNameCreate) AddPoc(p ...*PointOfContact) *PackageNameCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnc.AddPocIDs(ids...)
}

// Mutation returns the PackageNameMutation object of the builder.
func (pnc *PackageNameCreate) Mutation() *PackageNameMutation {
	return pnc.mutation
}

// Save creates the PackageName in the database.
func (pnc *PackageNameCreate) Save(ctx context.Context) (*PackageName, error) {
	pnc.defaults()
	return withHooks(ctx, pnc.sqlSave, pnc.mutation, pnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pnc *PackageNameCreate) SaveX(ctx context.Context) *PackageName {
	v, err := pnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pnc *PackageNameCreate) Exec(ctx context.Context) error {
	_, err := pnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnc *PackageNameCreate) ExecX(ctx context.Context) {
	if err := pnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pnc *PackageNameCreate) defaults() {
	if _, ok := pnc.mutation.ID(); !ok {
		v := packagename.DefaultID()
		pnc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnc *PackageNameCreate) check() error {
	if _, ok := pnc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PackageName.type"`)}
	}
	if v, ok := pnc.mutation.GetType(); ok {
		if err := packagename.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PackageName.type": %w`, err)}
		}
	}
	if _, ok := pnc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "PackageName.namespace"`)}
	}
	if _, ok := pnc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PackageName.name"`)}
	}
	if v, ok := pnc.mutation.Name(); ok {
		if err := packagename.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PackageName.name": %w`, err)}
		}
	}
	return nil
}

func (pnc *PackageNameCreate) sqlSave(ctx context.Context) (*PackageName, error) {
	if err := pnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pnc.mutation.id = &_node.ID
	pnc.mutation.done = true
	return _node, nil
}

func (pnc *PackageNameCreate) createSpec() (*PackageName, *sqlgraph.CreateSpec) {
	var (
		_node = &PackageName{config: pnc.config}
		_spec = sqlgraph.NewCreateSpec(packagename.Table, sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pnc.conflict
	if id, ok := pnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pnc.mutation.GetType(); ok {
		_spec.SetField(packagename.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := pnc.mutation.Namespace(); ok {
		_spec.SetField(packagename.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := pnc.mutation.Name(); ok {
		_spec.SetField(packagename.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := pnc.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagename.VersionsTable,
			Columns: []string{packagename.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.HasSourceAtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packagename.HasSourceAtTable,
			Columns: []string{packagename.HasSourceAtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hassourceat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.DependencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packagename.DependencyTable,
			Columns: []string{packagename.DependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dependency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.CertificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packagename.CertificationTable,
			Columns: []string{packagename.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packagename.MetadataTable,
			Columns: []string{packagename.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hasmetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.PocIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packagename.PocTable,
			Columns: []string{packagename.PocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointofcontact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackageName.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackageNameUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (pnc *PackageNameCreate) OnConflict(opts ...sql.ConflictOption) *PackageNameUpsertOne {
	pnc.conflict = opts
	return &PackageNameUpsertOne{
		create: pnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackageName.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pnc *PackageNameCreate) OnConflictColumns(columns ...string) *PackageNameUpsertOne {
	pnc.conflict = append(pnc.conflict, sql.ConflictColumns(columns...))
	return &PackageNameUpsertOne{
		create: pnc,
	}
}

type (
	// PackageNameUpsertOne is the builder for "upsert"-ing
	//  one PackageName node.
	PackageNameUpsertOne struct {
		create *PackageNameCreate
	}

	// PackageNameUpsert is the "OnConflict" setter.
	PackageNameUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *PackageNameUpsert) SetType(v string) *PackageNameUpsert {
	u.Set(packagename.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PackageNameUpsert) UpdateType() *PackageNameUpsert {
	u.SetExcluded(packagename.FieldType)
	return u
}

// SetNamespace sets the "namespace" field.
func (u *PackageNameUpsert) SetNamespace(v string) *PackageNameUpsert {
	u.Set(packagename.FieldNamespace, v)
	return u
}

// UpdateNamespace sets the "namespace" field to the value that was provided on create.
func (u *PackageNameUpsert) UpdateNamespace() *PackageNameUpsert {
	u.SetExcluded(packagename.FieldNamespace)
	return u
}

// SetName sets the "name" field.
func (u *PackageNameUpsert) SetName(v string) *PackageNameUpsert {
	u.Set(packagename.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackageNameUpsert) UpdateName() *PackageNameUpsert {
	u.SetExcluded(packagename.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PackageName.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packagename.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackageNameUpsertOne) UpdateNewValues() *PackageNameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(packagename.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackageName.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PackageNameUpsertOne) Ignore() *PackageNameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackageNameUpsertOne) DoNothing() *PackageNameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackageNameCreate.OnConflict
// documentation for more info.
func (u *PackageNameUpsertOne) Update(set func(*PackageNameUpsert)) *PackageNameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackageNameUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *PackageNameUpsertOne) SetType(v string) *PackageNameUpsertOne {
	return u.Update(func(s *PackageNameUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PackageNameUpsertOne) UpdateType() *PackageNameUpsertOne {
	return u.Update(func(s *PackageNameUpsert) {
		s.UpdateType()
	})
}

// SetNamespace sets the "namespace" field.
func (u *PackageNameUpsertOne) SetNamespace(v string) *PackageNameUpsertOne {
	return u.Update(func(s *PackageNameUpsert) {
		s.SetNamespace(v)
	})
}

// UpdateNamespace sets the "namespace" field to the value that was provided on create.
func (u *PackageNameUpsertOne) UpdateNamespace() *PackageNameUpsertOne {
	return u.Update(func(s *PackageNameUpsert) {
		s.UpdateNamespace()
	})
}

// SetName sets the "name" field.
func (u *PackageNameUpsertOne) SetName(v string) *PackageNameUpsertOne {
	return u.Update(func(s *PackageNameUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackageNameUpsertOne) UpdateName() *PackageNameUpsertOne {
	return u.Update(func(s *PackageNameUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *PackageNameUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackageNameCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackageNameUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PackageNameUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PackageNameUpsertOne.ID is not supported by MySQL driver. Use PackageNameUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PackageNameUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PackageNameCreateBulk is the builder for creating many PackageName entities in bulk.
type PackageNameCreateBulk struct {
	config
	err      error
	builders []*PackageNameCreate
	conflict []sql.ConflictOption
}

// Save creates the PackageName entities in the database.
func (pncb *PackageNameCreateBulk) Save(ctx context.Context) ([]*PackageName, error) {
	if pncb.err != nil {
		return nil, pncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pncb.builders))
	nodes := make([]*PackageName, len(pncb.builders))
	mutators := make([]Mutator, len(pncb.builders))
	for i := range pncb.builders {
		func(i int, root context.Context) {
			builder := pncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PackageNameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pncb *PackageNameCreateBulk) SaveX(ctx context.Context) []*PackageName {
	v, err := pncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pncb *PackageNameCreateBulk) Exec(ctx context.Context) error {
	_, err := pncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pncb *PackageNameCreateBulk) ExecX(ctx context.Context) {
	if err := pncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackageName.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackageNameUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (pncb *PackageNameCreateBulk) OnConflict(opts ...sql.ConflictOption) *PackageNameUpsertBulk {
	pncb.conflict = opts
	return &PackageNameUpsertBulk{
		create: pncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackageName.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pncb *PackageNameCreateBulk) OnConflictColumns(columns ...string) *PackageNameUpsertBulk {
	pncb.conflict = append(pncb.conflict, sql.ConflictColumns(columns...))
	return &PackageNameUpsertBulk{
		create: pncb,
	}
}

// PackageNameUpsertBulk is the builder for "upsert"-ing
// a bulk of PackageName nodes.
type PackageNameUpsertBulk struct {
	create *PackageNameCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PackageName.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packagename.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackageNameUpsertBulk) UpdateNewValues() *PackageNameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(packagename.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackageName.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PackageNameUpsertBulk) Ignore() *PackageNameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackageNameUpsertBulk) DoNothing() *PackageNameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackageNameCreateBulk.OnConflict
// documentation for more info.
func (u *PackageNameUpsertBulk) Update(set func(*PackageNameUpsert)) *PackageNameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackageNameUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *PackageNameUpsertBulk) SetType(v string) *PackageNameUpsertBulk {
	return u.Update(func(s *PackageNameUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PackageNameUpsertBulk) UpdateType() *PackageNameUpsertBulk {
	return u.Update(func(s *PackageNameUpsert) {
		s.UpdateType()
	})
}

// SetNamespace sets the "namespace" field.
func (u *PackageNameUpsertBulk) SetNamespace(v string) *PackageNameUpsertBulk {
	return u.Update(func(s *PackageNameUpsert) {
		s.SetNamespace(v)
	})
}

// UpdateNamespace sets the "namespace" field to the value that was provided on create.
func (u *PackageNameUpsertBulk) UpdateNamespace() *PackageNameUpsertBulk {
	return u.Update(func(s *PackageNameUpsert) {
		s.UpdateNamespace()
	})
}

// SetName sets the "name" field.
func (u *PackageNameUpsertBulk) SetName(v string) *PackageNameUpsertBulk {
	return u.Update(func(s *PackageNameUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackageNameUpsertBulk) UpdateName() *PackageNameUpsertBulk {
	return u.Update(func(s *PackageNameUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *PackageNameUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PackageNameCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackageNameCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackageNameUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PackageVersionDelete is the builder for deleting a PackageVersion entity.
type PackageVersionDelete struct {
	config
	hooks    []Hook
	mutation *PackageVersionMutation
}

// Where appends a list predicates to the PackageVersionDelete builder.
func (pvd *PackageVersionDelete) Where(ps ...predicate.PackageVersion) *PackageVersionDelete {
	pvd.mutation.Where(ps...)
	return pvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pvd *PackageVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pvd.sqlExec, pvd.mutation, pvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pvd *PackageVersionDelete) ExecX(ctx context.Context) int {
	n, err := pvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pvd *PackageVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(packageversion.Table, sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt))
	if ps := pvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pvd.mutation.done = true
	return affected, err
}

// PackageVersionDeleteOne is the builder for deleting a single PackageVersion entity.
type PackageVersionDeleteOne struct {
	pvd *PackageVersionDelete
}

// Where appends a list predicates to the PackageVersionDelete builder.
func (pvdo *PackageVersionDeleteOne) Where(ps ...predicate.PackageVersion) *PackageVersionDeleteOne {
	pvdo.pvd.mutation.Where(ps...)
	return pvdo
}

// Exec executes the deletion query.
func (pvdo *PackageVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := pvdo.pvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{packageversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pvdo *PackageVersionDeleteOne) ExecX(ctx context.Context) {
	if err := pvdo.Exec(ctx); err != nil {
		panic(err)
	}
}

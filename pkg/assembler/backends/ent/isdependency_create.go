// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isdependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
)

// IsDependencyCreate is the builder for creating a IsDependency entity.
type IsDependencyCreate struct {
	config
	mutation *IsDependencyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPackageID sets the "package_id" field.
func (idc *IsDependencyCreate) SetPackageID(i int) *IsDependencyCreate {
	idc.mutation.SetPackageID(i)
	return idc
}

// SetDependentPackageID sets the "dependent_package_id" field.
func (idc *IsDependencyCreate) SetDependentPackageID(i int) *IsDependencyCreate {
	idc.mutation.SetDependentPackageID(i)
	return idc
}

// SetVersionRange sets the "version_range" field.
func (idc *IsDependencyCreate) SetVersionRange(s string) *IsDependencyCreate {
	idc.mutation.SetVersionRange(s)
	return idc
}

// SetDependencyType sets the "dependency_type" field.
func (idc *IsDependencyCreate) SetDependencyType(s string) *IsDependencyCreate {
	idc.mutation.SetDependencyType(s)
	return idc
}

// SetJustification sets the "justification" field.
func (idc *IsDependencyCreate) SetJustification(s string) *IsDependencyCreate {
	idc.mutation.SetJustification(s)
	return idc
}

// SetOrigin sets the "origin" field.
func (idc *IsDependencyCreate) SetOrigin(s string) *IsDependencyCreate {
	idc.mutation.SetOrigin(s)
	return idc
}

// SetCollector sets the "collector" field.
func (idc *IsDependencyCreate) SetCollector(s string) *IsDependencyCreate {
	idc.mutation.SetCollector(s)
	return idc
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (idc *IsDependencyCreate) SetPackage(p *PackageVersion) *IsDependencyCreate {
	return idc.SetPackageID(p.ID)
}

// SetDependentPackage sets the "dependent_package" edge to the PackageName entity.
func (idc *IsDependencyCreate) SetDependentPackage(p *PackageName) *IsDependencyCreate {
	return idc.SetDependentPackageID(p.ID)
}

// Mutation returns the IsDependencyMutation object of the builder.
func (idc *IsDependencyCreate) Mutation() *IsDependencyMutation {
	return idc.mutation
}

// Save creates the IsDependency in the database.
func (idc *IsDependencyCreate) Save(ctx context.Context) (*IsDependency, error) {
	return withHooks(ctx, idc.sqlSave, idc.mutation, idc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (idc *IsDependencyCreate) SaveX(ctx context.Context) *IsDependency {
	v, err := idc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idc *IsDependencyCreate) Exec(ctx context.Context) error {
	_, err := idc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idc *IsDependencyCreate) ExecX(ctx context.Context) {
	if err := idc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idc *IsDependencyCreate) check() error {
	if _, ok := idc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package_id", err: errors.New(`ent: missing required field "IsDependency.package_id"`)}
	}
	if _, ok := idc.mutation.DependentPackageID(); !ok {
		return &ValidationError{Name: "dependent_package_id", err: errors.New(`ent: missing required field "IsDependency.dependent_package_id"`)}
	}
	if _, ok := idc.mutation.VersionRange(); !ok {
		return &ValidationError{Name: "version_range", err: errors.New(`ent: missing required field "IsDependency.version_range"`)}
	}
	if _, ok := idc.mutation.DependencyType(); !ok {
		return &ValidationError{Name: "dependency_type", err: errors.New(`ent: missing required field "IsDependency.dependency_type"`)}
	}
	if _, ok := idc.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "IsDependency.justification"`)}
	}
	if _, ok := idc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "IsDependency.origin"`)}
	}
	if _, ok := idc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "IsDependency.collector"`)}
	}
	if _, ok := idc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package", err: errors.New(`ent: missing required edge "IsDependency.package"`)}
	}
	if _, ok := idc.mutation.DependentPackageID(); !ok {
		return &ValidationError{Name: "dependent_package", err: errors.New(`ent: missing required edge "IsDependency.dependent_package"`)}
	}
	return nil
}

func (idc *IsDependencyCreate) sqlSave(ctx context.Context) (*IsDependency, error) {
	if err := idc.check(); err != nil {
		return nil, err
	}
	_node, _spec := idc.createSpec()
	if err := sqlgraph.CreateNode(ctx, idc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	idc.mutation.id = &_node.ID
	idc.mutation.done = true
	return _node, nil
}

func (idc *IsDependencyCreate) createSpec() (*IsDependency, *sqlgraph.CreateSpec) {
	var (
		_node = &IsDependency{config: idc.config}
		_spec = sqlgraph.NewCreateSpec(isdependency.Table, sqlgraph.NewFieldSpec(isdependency.FieldID, field.TypeInt))
	)
	_spec.OnConflict = idc.conflict
	if value, ok := idc.mutation.VersionRange(); ok {
		_spec.SetField(isdependency.FieldVersionRange, field.TypeString, value)
		_node.VersionRange = value
	}
	if value, ok := idc.mutation.DependencyType(); ok {
		_spec.SetField(isdependency.FieldDependencyType, field.TypeString, value)
		_node.DependencyType = value
	}
	if value, ok := idc.mutation.Justification(); ok {
		_spec.SetField(isdependency.FieldJustification, field.TypeString, value)
		_node.Justification = value
	}
	if value, ok := idc.mutation.Origin(); ok {
		_spec.SetField(isdependency.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := idc.mutation.Collector(); ok {
		_spec.SetField(isdependency.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if nodes := idc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdependency.PackageTable,
			Columns: []string{isdependency.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := idc.mutation.DependentPackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isdependency.DependentPackageTable,
			Columns: []string{isdependency.DependentPackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DependentPackageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IsDependency.Create().
//		SetPackageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IsDependencyUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (idc *IsDependencyCreate) OnConflict(opts ...sql.ConflictOption) *IsDependencyUpsertOne {
	idc.conflict = opts
	return &IsDependencyUpsertOne{
		create: idc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IsDependency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (idc *IsDependencyCreate) OnConflictColumns(columns ...string) *IsDependencyUpsertOne {
	idc.conflict = append(idc.conflict, sql.ConflictColumns(columns...))
	return &IsDependencyUpsertOne{
		create: idc,
	}
}

type (
	// IsDependencyUpsertOne is the builder for "upsert"-ing
	//  one IsDependency node.
	IsDependencyUpsertOne struct {
		create *IsDependencyCreate
	}

	// IsDependencyUpsert is the "OnConflict" setter.
	IsDependencyUpsert struct {
		*sql.UpdateSet
	}
)

// SetPackageID sets the "package_id" field.
func (u *IsDependencyUpsert) SetPackageID(v int) *IsDependencyUpsert {
	u.Set(isdependency.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *IsDependencyUpsert) UpdatePackageID() *IsDependencyUpsert {
	u.SetExcluded(isdependency.FieldPackageID)
	return u
}

// SetDependentPackageID sets the "dependent_package_id" field.
func (u *IsDependencyUpsert) SetDependentPackageID(v int) *IsDependencyUpsert {
	u.Set(isdependency.FieldDependentPackageID, v)
	return u
}

// UpdateDependentPackageID sets the "dependent_package_id" field to the value that was provided on create.
func (u *IsDependencyUpsert) UpdateDependentPackageID() *IsDependencyUpsert {
	u.SetExcluded(isdependency.FieldDependentPackageID)
	return u
}

// SetVersionRange sets the "version_range" field.
func (u *IsDependencyUpsert) SetVersionRange(v string) *IsDependencyUpsert {
	u.Set(isdependency.FieldVersionRange, v)
	return u
}

// UpdateVersionRange sets the "version_range" field to the value that was provided on create.
func (u *IsDependencyUpsert) UpdateVersionRange() *IsDependencyUpsert {
	u.SetExcluded(isdependency.FieldVersionRange)
	return u
}

// SetDependencyType sets the "dependency_type" field.
func (u *IsDependencyUpsert) SetDependencyType(v string) *IsDependencyUpsert {
	u.Set(isdependency.FieldDependencyType, v)
	return u
}

// UpdateDependencyType sets the "dependency_type" field to the value that was provided on create.
func (u *IsDependencyUpsert) UpdateDependencyType() *IsDependencyUpsert {
	u.SetExcluded(isdependency.FieldDependencyType)
	return u
}

// SetJustification sets the "justification" field.
func (u *IsDependencyUpsert) SetJustification(v string) *IsDependencyUpsert {
	u.Set(isdependency.FieldJustification, v)
	return u
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *IsDependencyUpsert) UpdateJustification() *IsDependencyUpsert {
	u.SetExcluded(isdependency.FieldJustification)
	return u
}

// SetOrigin sets the "origin" field.
func (u *IsDependencyUpsert) SetOrigin(v string) *IsDependencyUpsert {
	u.Set(isdependency.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsDependencyUpsert) UpdateOrigin() *IsDependencyUpsert {
	u.SetExcluded(isdependency.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *IsDependencyUpsert) SetCollector(v string) *IsDependencyUpsert {
	u.Set(isdependency.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsDependencyUpsert) UpdateCollector() *IsDependencyUpsert {
	u.SetExcluded(isdependency.FieldCollector)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IsDependency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IsDependencyUpsertOne) UpdateNewValues() *IsDependencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IsDependency.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IsDependencyUpsertOne) Ignore() *IsDependencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IsDependencyUpsertOne) DoNothing() *IsDependencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IsDependencyCreate.OnConflict
// documentation for more info.
func (u *IsDependencyUpsertOne) Update(set func(*IsDependencyUpsert)) *IsDependencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IsDependencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *IsDependencyUpsertOne) SetPackageID(v int) *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *IsDependencyUpsertOne) UpdatePackageID() *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdatePackageID()
	})
}

// SetDependentPackageID sets the "dependent_package_id" field.
func (u *IsDependencyUpsertOne) SetDependentPackageID(v int) *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetDependentPackageID(v)
	})
}

// UpdateDependentPackageID sets the "dependent_package_id" field to the value that was provided on create.
func (u *IsDependencyUpsertOne) UpdateDependentPackageID() *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateDependentPackageID()
	})
}

// SetVersionRange sets the "version_range" field.
func (u *IsDependencyUpsertOne) SetVersionRange(v string) *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetVersionRange(v)
	})
}

// UpdateVersionRange sets the "version_range" field to the value that was provided on create.
func (u *IsDependencyUpsertOne) UpdateVersionRange() *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateVersionRange()
	})
}

// SetDependencyType sets the "dependency_type" field.
func (u *IsDependencyUpsertOne) SetDependencyType(v string) *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetDependencyType(v)
	})
}

// UpdateDependencyType sets the "dependency_type" field to the value that was provided on create.
func (u *IsDependencyUpsertOne) UpdateDependencyType() *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateDependencyType()
	})
}

// SetJustification sets the "justification" field.
func (u *IsDependencyUpsertOne) SetJustification(v string) *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *IsDependencyUpsertOne) UpdateJustification() *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *IsDependencyUpsertOne) SetOrigin(v string) *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsDependencyUpsertOne) UpdateOrigin() *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *IsDependencyUpsertOne) SetCollector(v string) *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsDependencyUpsertOne) UpdateCollector() *IsDependencyUpsertOne {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *IsDependencyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IsDependencyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IsDependencyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IsDependencyUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IsDependencyUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IsDependencyCreateBulk is the builder for creating many IsDependency entities in bulk.
type IsDependencyCreateBulk struct {
	config
	builders []*IsDependencyCreate
	conflict []sql.ConflictOption
}

// Save creates the IsDependency entities in the database.
func (idcb *IsDependencyCreateBulk) Save(ctx context.Context) ([]*IsDependency, error) {
	specs := make([]*sqlgraph.CreateSpec, len(idcb.builders))
	nodes := make([]*IsDependency, len(idcb.builders))
	mutators := make([]Mutator, len(idcb.builders))
	for i := range idcb.builders {
		func(i int, root context.Context) {
			builder := idcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IsDependencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, idcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = idcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, idcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, idcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (idcb *IsDependencyCreateBulk) SaveX(ctx context.Context) []*IsDependency {
	v, err := idcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idcb *IsDependencyCreateBulk) Exec(ctx context.Context) error {
	_, err := idcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idcb *IsDependencyCreateBulk) ExecX(ctx context.Context) {
	if err := idcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IsDependency.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IsDependencyUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (idcb *IsDependencyCreateBulk) OnConflict(opts ...sql.ConflictOption) *IsDependencyUpsertBulk {
	idcb.conflict = opts
	return &IsDependencyUpsertBulk{
		create: idcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IsDependency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (idcb *IsDependencyCreateBulk) OnConflictColumns(columns ...string) *IsDependencyUpsertBulk {
	idcb.conflict = append(idcb.conflict, sql.ConflictColumns(columns...))
	return &IsDependencyUpsertBulk{
		create: idcb,
	}
}

// IsDependencyUpsertBulk is the builder for "upsert"-ing
// a bulk of IsDependency nodes.
type IsDependencyUpsertBulk struct {
	create *IsDependencyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IsDependency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IsDependencyUpsertBulk) UpdateNewValues() *IsDependencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IsDependency.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IsDependencyUpsertBulk) Ignore() *IsDependencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IsDependencyUpsertBulk) DoNothing() *IsDependencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IsDependencyCreateBulk.OnConflict
// documentation for more info.
func (u *IsDependencyUpsertBulk) Update(set func(*IsDependencyUpsert)) *IsDependencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IsDependencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *IsDependencyUpsertBulk) SetPackageID(v int) *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *IsDependencyUpsertBulk) UpdatePackageID() *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdatePackageID()
	})
}

// SetDependentPackageID sets the "dependent_package_id" field.
func (u *IsDependencyUpsertBulk) SetDependentPackageID(v int) *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetDependentPackageID(v)
	})
}

// UpdateDependentPackageID sets the "dependent_package_id" field to the value that was provided on create.
func (u *IsDependencyUpsertBulk) UpdateDependentPackageID() *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateDependentPackageID()
	})
}

// SetVersionRange sets the "version_range" field.
func (u *IsDependencyUpsertBulk) SetVersionRange(v string) *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetVersionRange(v)
	})
}

// UpdateVersionRange sets the "version_range" field to the value that was provided on create.
func (u *IsDependencyUpsertBulk) UpdateVersionRange() *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateVersionRange()
	})
}

// SetDependencyType sets the "dependency_type" field.
func (u *IsDependencyUpsertBulk) SetDependencyType(v string) *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetDependencyType(v)
	})
}

// UpdateDependencyType sets the "dependency_type" field to the value that was provided on create.
func (u *IsDependencyUpsertBulk) UpdateDependencyType() *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateDependencyType()
	})
}

// SetJustification sets the "justification" field.
func (u *IsDependencyUpsertBulk) SetJustification(v string) *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *IsDependencyUpsertBulk) UpdateJustification() *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *IsDependencyUpsertBulk) SetOrigin(v string) *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsDependencyUpsertBulk) UpdateOrigin() *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *IsDependencyUpsertBulk) SetCollector(v string) *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsDependencyUpsertBulk) UpdateCollector() *IsDependencyUpsertBulk {
	return u.Update(func(s *IsDependencyUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *IsDependencyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IsDependencyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IsDependencyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IsDependencyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

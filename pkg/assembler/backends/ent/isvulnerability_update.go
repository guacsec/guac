// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isvulnerability"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
)

// IsVulnerabilityUpdate is the builder for updating IsVulnerability entities.
type IsVulnerabilityUpdate struct {
	config
	hooks    []Hook
	mutation *IsVulnerabilityMutation
}

// Where appends a list predicates to the IsVulnerabilityUpdate builder.
func (ivu *IsVulnerabilityUpdate) Where(ps ...predicate.IsVulnerability) *IsVulnerabilityUpdate {
	ivu.mutation.Where(ps...)
	return ivu
}

// SetOsvID sets the "osv_id" field.
func (ivu *IsVulnerabilityUpdate) SetOsvID(i int) *IsVulnerabilityUpdate {
	ivu.mutation.SetOsvID(i)
	return ivu
}

// SetNillableOsvID sets the "osv_id" field if the given value is not nil.
func (ivu *IsVulnerabilityUpdate) SetNillableOsvID(i *int) *IsVulnerabilityUpdate {
	if i != nil {
		ivu.SetOsvID(*i)
	}
	return ivu
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (ivu *IsVulnerabilityUpdate) SetVulnerabilityID(i int) *IsVulnerabilityUpdate {
	ivu.mutation.SetVulnerabilityID(i)
	return ivu
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (ivu *IsVulnerabilityUpdate) SetNillableVulnerabilityID(i *int) *IsVulnerabilityUpdate {
	if i != nil {
		ivu.SetVulnerabilityID(*i)
	}
	return ivu
}

// SetJustification sets the "justification" field.
func (ivu *IsVulnerabilityUpdate) SetJustification(s string) *IsVulnerabilityUpdate {
	ivu.mutation.SetJustification(s)
	return ivu
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (ivu *IsVulnerabilityUpdate) SetNillableJustification(s *string) *IsVulnerabilityUpdate {
	if s != nil {
		ivu.SetJustification(*s)
	}
	return ivu
}

// SetOrigin sets the "origin" field.
func (ivu *IsVulnerabilityUpdate) SetOrigin(s string) *IsVulnerabilityUpdate {
	ivu.mutation.SetOrigin(s)
	return ivu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (ivu *IsVulnerabilityUpdate) SetNillableOrigin(s *string) *IsVulnerabilityUpdate {
	if s != nil {
		ivu.SetOrigin(*s)
	}
	return ivu
}

// SetCollector sets the "collector" field.
func (ivu *IsVulnerabilityUpdate) SetCollector(s string) *IsVulnerabilityUpdate {
	ivu.mutation.SetCollector(s)
	return ivu
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (ivu *IsVulnerabilityUpdate) SetNillableCollector(s *string) *IsVulnerabilityUpdate {
	if s != nil {
		ivu.SetCollector(*s)
	}
	return ivu
}

// SetOsv sets the "osv" edge to the VulnerabilityType entity.
func (ivu *IsVulnerabilityUpdate) SetOsv(v *VulnerabilityType) *IsVulnerabilityUpdate {
	return ivu.SetOsvID(v.ID)
}

// SetVulnerability sets the "vulnerability" edge to the VulnerabilityType entity.
func (ivu *IsVulnerabilityUpdate) SetVulnerability(v *VulnerabilityType) *IsVulnerabilityUpdate {
	return ivu.SetVulnerabilityID(v.ID)
}

// Mutation returns the IsVulnerabilityMutation object of the builder.
func (ivu *IsVulnerabilityUpdate) Mutation() *IsVulnerabilityMutation {
	return ivu.mutation
}

// ClearOsv clears the "osv" edge to the VulnerabilityType entity.
func (ivu *IsVulnerabilityUpdate) ClearOsv() *IsVulnerabilityUpdate {
	ivu.mutation.ClearOsv()
	return ivu
}

// ClearVulnerability clears the "vulnerability" edge to the VulnerabilityType entity.
func (ivu *IsVulnerabilityUpdate) ClearVulnerability() *IsVulnerabilityUpdate {
	ivu.mutation.ClearVulnerability()
	return ivu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ivu *IsVulnerabilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ivu.sqlSave, ivu.mutation, ivu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ivu *IsVulnerabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := ivu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ivu *IsVulnerabilityUpdate) Exec(ctx context.Context) error {
	_, err := ivu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivu *IsVulnerabilityUpdate) ExecX(ctx context.Context) {
	if err := ivu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivu *IsVulnerabilityUpdate) check() error {
	if _, ok := ivu.mutation.OsvID(); ivu.mutation.OsvCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsVulnerability.osv"`)
	}
	if _, ok := ivu.mutation.VulnerabilityID(); ivu.mutation.VulnerabilityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsVulnerability.vulnerability"`)
	}
	return nil
}

func (ivu *IsVulnerabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ivu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(isvulnerability.Table, isvulnerability.Columns, sqlgraph.NewFieldSpec(isvulnerability.FieldID, field.TypeInt))
	if ps := ivu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ivu.mutation.Justification(); ok {
		_spec.SetField(isvulnerability.FieldJustification, field.TypeString, value)
	}
	if value, ok := ivu.mutation.Origin(); ok {
		_spec.SetField(isvulnerability.FieldOrigin, field.TypeString, value)
	}
	if value, ok := ivu.mutation.Collector(); ok {
		_spec.SetField(isvulnerability.FieldCollector, field.TypeString, value)
	}
	if ivu.mutation.OsvCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isvulnerability.OsvTable,
			Columns: []string{isvulnerability.OsvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ivu.mutation.OsvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isvulnerability.OsvTable,
			Columns: []string{isvulnerability.OsvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ivu.mutation.VulnerabilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isvulnerability.VulnerabilityTable,
			Columns: []string{isvulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ivu.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isvulnerability.VulnerabilityTable,
			Columns: []string{isvulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ivu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{isvulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ivu.mutation.done = true
	return n, nil
}

// IsVulnerabilityUpdateOne is the builder for updating a single IsVulnerability entity.
type IsVulnerabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IsVulnerabilityMutation
}

// SetOsvID sets the "osv_id" field.
func (ivuo *IsVulnerabilityUpdateOne) SetOsvID(i int) *IsVulnerabilityUpdateOne {
	ivuo.mutation.SetOsvID(i)
	return ivuo
}

// SetNillableOsvID sets the "osv_id" field if the given value is not nil.
func (ivuo *IsVulnerabilityUpdateOne) SetNillableOsvID(i *int) *IsVulnerabilityUpdateOne {
	if i != nil {
		ivuo.SetOsvID(*i)
	}
	return ivuo
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (ivuo *IsVulnerabilityUpdateOne) SetVulnerabilityID(i int) *IsVulnerabilityUpdateOne {
	ivuo.mutation.SetVulnerabilityID(i)
	return ivuo
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (ivuo *IsVulnerabilityUpdateOne) SetNillableVulnerabilityID(i *int) *IsVulnerabilityUpdateOne {
	if i != nil {
		ivuo.SetVulnerabilityID(*i)
	}
	return ivuo
}

// SetJustification sets the "justification" field.
func (ivuo *IsVulnerabilityUpdateOne) SetJustification(s string) *IsVulnerabilityUpdateOne {
	ivuo.mutation.SetJustification(s)
	return ivuo
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (ivuo *IsVulnerabilityUpdateOne) SetNillableJustification(s *string) *IsVulnerabilityUpdateOne {
	if s != nil {
		ivuo.SetJustification(*s)
	}
	return ivuo
}

// SetOrigin sets the "origin" field.
func (ivuo *IsVulnerabilityUpdateOne) SetOrigin(s string) *IsVulnerabilityUpdateOne {
	ivuo.mutation.SetOrigin(s)
	return ivuo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (ivuo *IsVulnerabilityUpdateOne) SetNillableOrigin(s *string) *IsVulnerabilityUpdateOne {
	if s != nil {
		ivuo.SetOrigin(*s)
	}
	return ivuo
}

// SetCollector sets the "collector" field.
func (ivuo *IsVulnerabilityUpdateOne) SetCollector(s string) *IsVulnerabilityUpdateOne {
	ivuo.mutation.SetCollector(s)
	return ivuo
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (ivuo *IsVulnerabilityUpdateOne) SetNillableCollector(s *string) *IsVulnerabilityUpdateOne {
	if s != nil {
		ivuo.SetCollector(*s)
	}
	return ivuo
}

// SetOsv sets the "osv" edge to the VulnerabilityType entity.
func (ivuo *IsVulnerabilityUpdateOne) SetOsv(v *VulnerabilityType) *IsVulnerabilityUpdateOne {
	return ivuo.SetOsvID(v.ID)
}

// SetVulnerability sets the "vulnerability" edge to the VulnerabilityType entity.
func (ivuo *IsVulnerabilityUpdateOne) SetVulnerability(v *VulnerabilityType) *IsVulnerabilityUpdateOne {
	return ivuo.SetVulnerabilityID(v.ID)
}

// Mutation returns the IsVulnerabilityMutation object of the builder.
func (ivuo *IsVulnerabilityUpdateOne) Mutation() *IsVulnerabilityMutation {
	return ivuo.mutation
}

// ClearOsv clears the "osv" edge to the VulnerabilityType entity.
func (ivuo *IsVulnerabilityUpdateOne) ClearOsv() *IsVulnerabilityUpdateOne {
	ivuo.mutation.ClearOsv()
	return ivuo
}

// ClearVulnerability clears the "vulnerability" edge to the VulnerabilityType entity.
func (ivuo *IsVulnerabilityUpdateOne) ClearVulnerability() *IsVulnerabilityUpdateOne {
	ivuo.mutation.ClearVulnerability()
	return ivuo
}

// Where appends a list predicates to the IsVulnerabilityUpdate builder.
func (ivuo *IsVulnerabilityUpdateOne) Where(ps ...predicate.IsVulnerability) *IsVulnerabilityUpdateOne {
	ivuo.mutation.Where(ps...)
	return ivuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ivuo *IsVulnerabilityUpdateOne) Select(field string, fields ...string) *IsVulnerabilityUpdateOne {
	ivuo.fields = append([]string{field}, fields...)
	return ivuo
}

// Save executes the query and returns the updated IsVulnerability entity.
func (ivuo *IsVulnerabilityUpdateOne) Save(ctx context.Context) (*IsVulnerability, error) {
	return withHooks(ctx, ivuo.sqlSave, ivuo.mutation, ivuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ivuo *IsVulnerabilityUpdateOne) SaveX(ctx context.Context) *IsVulnerability {
	node, err := ivuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ivuo *IsVulnerabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := ivuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivuo *IsVulnerabilityUpdateOne) ExecX(ctx context.Context) {
	if err := ivuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivuo *IsVulnerabilityUpdateOne) check() error {
	if _, ok := ivuo.mutation.OsvID(); ivuo.mutation.OsvCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsVulnerability.osv"`)
	}
	if _, ok := ivuo.mutation.VulnerabilityID(); ivuo.mutation.VulnerabilityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsVulnerability.vulnerability"`)
	}
	return nil
}

func (ivuo *IsVulnerabilityUpdateOne) sqlSave(ctx context.Context) (_node *IsVulnerability, err error) {
	if err := ivuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(isvulnerability.Table, isvulnerability.Columns, sqlgraph.NewFieldSpec(isvulnerability.FieldID, field.TypeInt))
	id, ok := ivuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IsVulnerability.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ivuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, isvulnerability.FieldID)
		for _, f := range fields {
			if !isvulnerability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != isvulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ivuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ivuo.mutation.Justification(); ok {
		_spec.SetField(isvulnerability.FieldJustification, field.TypeString, value)
	}
	if value, ok := ivuo.mutation.Origin(); ok {
		_spec.SetField(isvulnerability.FieldOrigin, field.TypeString, value)
	}
	if value, ok := ivuo.mutation.Collector(); ok {
		_spec.SetField(isvulnerability.FieldCollector, field.TypeString, value)
	}
	if ivuo.mutation.OsvCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isvulnerability.OsvTable,
			Columns: []string{isvulnerability.OsvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ivuo.mutation.OsvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isvulnerability.OsvTable,
			Columns: []string{isvulnerability.OsvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ivuo.mutation.VulnerabilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isvulnerability.VulnerabilityTable,
			Columns: []string{isvulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ivuo.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isvulnerability.VulnerabilityTable,
			Columns: []string{isvulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IsVulnerability{config: ivuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ivuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{isvulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ivuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package buildernode

import (
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldLTE(FieldID, id))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldEQ(FieldURI, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.BuilderNode {
	return predicate.BuilderNode(sql.FieldContainsFold(FieldURI, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BuilderNode) predicate.BuilderNode {
	return predicate.BuilderNode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BuilderNode) predicate.BuilderNode {
	return predicate.BuilderNode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BuilderNode) predicate.BuilderNode {
	return predicate.BuilderNode(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package packagetype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the packagetype type in the database.
	Label = "package_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeNamespaces holds the string denoting the namespaces edge name in mutations.
	EdgeNamespaces = "namespaces"
	// Table holds the table name of the packagetype in the database.
	Table = "package_types"
	// NamespacesTable is the table that holds the namespaces relation/edge.
	NamespacesTable = "package_namespaces"
	// NamespacesInverseTable is the table name for the PackageNamespace entity.
	// It exists in this package in order to avoid circular dependency with the "packagenamespace" package.
	NamespacesInverseTable = "package_namespaces"
	// NamespacesColumn is the table column denoting the namespaces relation/edge.
	NamespacesColumn = "package_id"
)

// Columns holds all SQL columns for packagetype fields.
var Columns = []string{
	FieldID,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
)

// OrderOption defines the ordering options for the PackageType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByNamespacesCount orders the results by namespaces count.
func ByNamespacesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNamespacesStep(), opts...)
	}
}

// ByNamespaces orders the results by namespaces terms.
func ByNamespaces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNamespacesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNamespacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NamespacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NamespacesTable, NamespacesColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/buildernode"
)

// BuilderNode is the model entity for the BuilderNode schema.
type BuilderNode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// The URI of the builder, used as a unique identifier in the graph query
	URI          string `json:"uri,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BuilderNode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case buildernode.FieldID:
			values[i] = new(sql.NullInt64)
		case buildernode.FieldURI:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BuilderNode fields.
func (bn *BuilderNode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case buildernode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bn.ID = int(value.Int64)
		case buildernode.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				bn.URI = value.String
			}
		default:
			bn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BuilderNode.
// This includes values selected through modifiers, order, etc.
func (bn *BuilderNode) Value(name string) (ent.Value, error) {
	return bn.selectValues.Get(name)
}

// Update returns a builder for updating this BuilderNode.
// Note that you need to call BuilderNode.Unwrap() before calling this method if this BuilderNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (bn *BuilderNode) Update() *BuilderNodeUpdateOne {
	return NewBuilderNodeClient(bn.config).UpdateOne(bn)
}

// Unwrap unwraps the BuilderNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bn *BuilderNode) Unwrap() *BuilderNode {
	_tx, ok := bn.config.driver.(*txDriver)
	if !ok {
		panic("ent: BuilderNode is not a transactional entity")
	}
	bn.config.driver = _tx.drv
	return bn
}

// String implements the fmt.Stringer.
func (bn *BuilderNode) String() string {
	var builder strings.Builder
	builder.WriteString("BuilderNode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bn.ID))
	builder.WriteString("uri=")
	builder.WriteString(bn.URI)
	builder.WriteByte(')')
	return builder.String()
}

// BuilderNodes is a parsable slice of BuilderNode.
type BuilderNodes []*BuilderNode

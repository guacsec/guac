// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PackageNodeUpdate is the builder for updating PackageNode entities.
type PackageNodeUpdate struct {
	config
	hooks    []Hook
	mutation *PackageNodeMutation
}

// Where appends a list predicates to the PackageNodeUpdate builder.
func (pnu *PackageNodeUpdate) Where(ps ...predicate.PackageNode) *PackageNodeUpdate {
	pnu.mutation.Where(ps...)
	return pnu
}

// SetType sets the "type" field.
func (pnu *PackageNodeUpdate) SetType(s string) *PackageNodeUpdate {
	pnu.mutation.SetType(s)
	return pnu
}

// AddNamespaceIDs adds the "namespaces" edge to the PackageNamespace entity by IDs.
func (pnu *PackageNodeUpdate) AddNamespaceIDs(ids ...int) *PackageNodeUpdate {
	pnu.mutation.AddNamespaceIDs(ids...)
	return pnu
}

// AddNamespaces adds the "namespaces" edges to the PackageNamespace entity.
func (pnu *PackageNodeUpdate) AddNamespaces(p ...*PackageNamespace) *PackageNodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnu.AddNamespaceIDs(ids...)
}

// Mutation returns the PackageNodeMutation object of the builder.
func (pnu *PackageNodeUpdate) Mutation() *PackageNodeMutation {
	return pnu.mutation
}

// ClearNamespaces clears all "namespaces" edges to the PackageNamespace entity.
func (pnu *PackageNodeUpdate) ClearNamespaces() *PackageNodeUpdate {
	pnu.mutation.ClearNamespaces()
	return pnu
}

// RemoveNamespaceIDs removes the "namespaces" edge to PackageNamespace entities by IDs.
func (pnu *PackageNodeUpdate) RemoveNamespaceIDs(ids ...int) *PackageNodeUpdate {
	pnu.mutation.RemoveNamespaceIDs(ids...)
	return pnu
}

// RemoveNamespaces removes "namespaces" edges to PackageNamespace entities.
func (pnu *PackageNodeUpdate) RemoveNamespaces(p ...*PackageNamespace) *PackageNodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnu.RemoveNamespaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pnu *PackageNodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pnu.sqlSave, pnu.mutation, pnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pnu *PackageNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := pnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pnu *PackageNodeUpdate) Exec(ctx context.Context) error {
	_, err := pnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnu *PackageNodeUpdate) ExecX(ctx context.Context) {
	if err := pnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnu *PackageNodeUpdate) check() error {
	if v, ok := pnu.mutation.GetType(); ok {
		if err := packagenode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PackageNode.type": %w`, err)}
		}
	}
	return nil
}

func (pnu *PackageNodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(packagenode.Table, packagenode.Columns, sqlgraph.NewFieldSpec(packagenode.FieldID, field.TypeInt))
	if ps := pnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pnu.mutation.GetType(); ok {
		_spec.SetField(packagenode.FieldType, field.TypeString, value)
	}
	if pnu.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagenode.NamespacesTable,
			Columns: []string{packagenode.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.RemovedNamespacesIDs(); len(nodes) > 0 && !pnu.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagenode.NamespacesTable,
			Columns: []string{packagenode.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagenode.NamespacesTable,
			Columns: []string{packagenode.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packagenode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pnu.mutation.done = true
	return n, nil
}

// PackageNodeUpdateOne is the builder for updating a single PackageNode entity.
type PackageNodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackageNodeMutation
}

// SetType sets the "type" field.
func (pnuo *PackageNodeUpdateOne) SetType(s string) *PackageNodeUpdateOne {
	pnuo.mutation.SetType(s)
	return pnuo
}

// AddNamespaceIDs adds the "namespaces" edge to the PackageNamespace entity by IDs.
func (pnuo *PackageNodeUpdateOne) AddNamespaceIDs(ids ...int) *PackageNodeUpdateOne {
	pnuo.mutation.AddNamespaceIDs(ids...)
	return pnuo
}

// AddNamespaces adds the "namespaces" edges to the PackageNamespace entity.
func (pnuo *PackageNodeUpdateOne) AddNamespaces(p ...*PackageNamespace) *PackageNodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnuo.AddNamespaceIDs(ids...)
}

// Mutation returns the PackageNodeMutation object of the builder.
func (pnuo *PackageNodeUpdateOne) Mutation() *PackageNodeMutation {
	return pnuo.mutation
}

// ClearNamespaces clears all "namespaces" edges to the PackageNamespace entity.
func (pnuo *PackageNodeUpdateOne) ClearNamespaces() *PackageNodeUpdateOne {
	pnuo.mutation.ClearNamespaces()
	return pnuo
}

// RemoveNamespaceIDs removes the "namespaces" edge to PackageNamespace entities by IDs.
func (pnuo *PackageNodeUpdateOne) RemoveNamespaceIDs(ids ...int) *PackageNodeUpdateOne {
	pnuo.mutation.RemoveNamespaceIDs(ids...)
	return pnuo
}

// RemoveNamespaces removes "namespaces" edges to PackageNamespace entities.
func (pnuo *PackageNodeUpdateOne) RemoveNamespaces(p ...*PackageNamespace) *PackageNodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnuo.RemoveNamespaceIDs(ids...)
}

// Where appends a list predicates to the PackageNodeUpdate builder.
func (pnuo *PackageNodeUpdateOne) Where(ps ...predicate.PackageNode) *PackageNodeUpdateOne {
	pnuo.mutation.Where(ps...)
	return pnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pnuo *PackageNodeUpdateOne) Select(field string, fields ...string) *PackageNodeUpdateOne {
	pnuo.fields = append([]string{field}, fields...)
	return pnuo
}

// Save executes the query and returns the updated PackageNode entity.
func (pnuo *PackageNodeUpdateOne) Save(ctx context.Context) (*PackageNode, error) {
	return withHooks(ctx, pnuo.sqlSave, pnuo.mutation, pnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pnuo *PackageNodeUpdateOne) SaveX(ctx context.Context) *PackageNode {
	node, err := pnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pnuo *PackageNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := pnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnuo *PackageNodeUpdateOne) ExecX(ctx context.Context) {
	if err := pnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnuo *PackageNodeUpdateOne) check() error {
	if v, ok := pnuo.mutation.GetType(); ok {
		if err := packagenode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PackageNode.type": %w`, err)}
		}
	}
	return nil
}

func (pnuo *PackageNodeUpdateOne) sqlSave(ctx context.Context) (_node *PackageNode, err error) {
	if err := pnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(packagenode.Table, packagenode.Columns, sqlgraph.NewFieldSpec(packagenode.FieldID, field.TypeInt))
	id, ok := pnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PackageNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packagenode.FieldID)
		for _, f := range fields {
			if !packagenode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != packagenode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pnuo.mutation.GetType(); ok {
		_spec.SetField(packagenode.FieldType, field.TypeString, value)
	}
	if pnuo.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagenode.NamespacesTable,
			Columns: []string{packagenode.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.RemovedNamespacesIDs(); len(nodes) > 0 && !pnuo.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagenode.NamespacesTable,
			Columns: []string{packagenode.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagenode.NamespacesTable,
			Columns: []string{packagenode.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PackageNode{config: pnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packagenode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pnuo.mutation.done = true
	return _node, nil
}

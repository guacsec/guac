// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/securityadvisory"
)

// SecurityAdvisoryCreate is the builder for creating a SecurityAdvisory entity.
type SecurityAdvisoryCreate struct {
	config
	mutation *SecurityAdvisoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGhsaID sets the "ghsa_id" field.
func (sac *SecurityAdvisoryCreate) SetGhsaID(s string) *SecurityAdvisoryCreate {
	sac.mutation.SetGhsaID(s)
	return sac
}

// SetNillableGhsaID sets the "ghsa_id" field if the given value is not nil.
func (sac *SecurityAdvisoryCreate) SetNillableGhsaID(s *string) *SecurityAdvisoryCreate {
	if s != nil {
		sac.SetGhsaID(*s)
	}
	return sac
}

// SetCveID sets the "cve_id" field.
func (sac *SecurityAdvisoryCreate) SetCveID(s string) *SecurityAdvisoryCreate {
	sac.mutation.SetCveID(s)
	return sac
}

// SetNillableCveID sets the "cve_id" field if the given value is not nil.
func (sac *SecurityAdvisoryCreate) SetNillableCveID(s *string) *SecurityAdvisoryCreate {
	if s != nil {
		sac.SetCveID(*s)
	}
	return sac
}

// SetCveYear sets the "cve_year" field.
func (sac *SecurityAdvisoryCreate) SetCveYear(i int) *SecurityAdvisoryCreate {
	sac.mutation.SetCveYear(i)
	return sac
}

// SetNillableCveYear sets the "cve_year" field if the given value is not nil.
func (sac *SecurityAdvisoryCreate) SetNillableCveYear(i *int) *SecurityAdvisoryCreate {
	if i != nil {
		sac.SetCveYear(*i)
	}
	return sac
}

// Mutation returns the SecurityAdvisoryMutation object of the builder.
func (sac *SecurityAdvisoryCreate) Mutation() *SecurityAdvisoryMutation {
	return sac.mutation
}

// Save creates the SecurityAdvisory in the database.
func (sac *SecurityAdvisoryCreate) Save(ctx context.Context) (*SecurityAdvisory, error) {
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SecurityAdvisoryCreate) SaveX(ctx context.Context) *SecurityAdvisory {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SecurityAdvisoryCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SecurityAdvisoryCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *SecurityAdvisoryCreate) check() error {
	return nil
}

func (sac *SecurityAdvisoryCreate) sqlSave(ctx context.Context) (*SecurityAdvisory, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *SecurityAdvisoryCreate) createSpec() (*SecurityAdvisory, *sqlgraph.CreateSpec) {
	var (
		_node = &SecurityAdvisory{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(securityadvisory.Table, sqlgraph.NewFieldSpec(securityadvisory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sac.conflict
	if value, ok := sac.mutation.GhsaID(); ok {
		_spec.SetField(securityadvisory.FieldGhsaID, field.TypeString, value)
		_node.GhsaID = &value
	}
	if value, ok := sac.mutation.CveID(); ok {
		_spec.SetField(securityadvisory.FieldCveID, field.TypeString, value)
		_node.CveID = &value
	}
	if value, ok := sac.mutation.CveYear(); ok {
		_spec.SetField(securityadvisory.FieldCveYear, field.TypeInt, value)
		_node.CveYear = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SecurityAdvisory.Create().
//		SetGhsaID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SecurityAdvisoryUpsert) {
//			SetGhsaID(v+v).
//		}).
//		Exec(ctx)
func (sac *SecurityAdvisoryCreate) OnConflict(opts ...sql.ConflictOption) *SecurityAdvisoryUpsertOne {
	sac.conflict = opts
	return &SecurityAdvisoryUpsertOne{
		create: sac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SecurityAdvisory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sac *SecurityAdvisoryCreate) OnConflictColumns(columns ...string) *SecurityAdvisoryUpsertOne {
	sac.conflict = append(sac.conflict, sql.ConflictColumns(columns...))
	return &SecurityAdvisoryUpsertOne{
		create: sac,
	}
}

type (
	// SecurityAdvisoryUpsertOne is the builder for "upsert"-ing
	//  one SecurityAdvisory node.
	SecurityAdvisoryUpsertOne struct {
		create *SecurityAdvisoryCreate
	}

	// SecurityAdvisoryUpsert is the "OnConflict" setter.
	SecurityAdvisoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetGhsaID sets the "ghsa_id" field.
func (u *SecurityAdvisoryUpsert) SetGhsaID(v string) *SecurityAdvisoryUpsert {
	u.Set(securityadvisory.FieldGhsaID, v)
	return u
}

// UpdateGhsaID sets the "ghsa_id" field to the value that was provided on create.
func (u *SecurityAdvisoryUpsert) UpdateGhsaID() *SecurityAdvisoryUpsert {
	u.SetExcluded(securityadvisory.FieldGhsaID)
	return u
}

// ClearGhsaID clears the value of the "ghsa_id" field.
func (u *SecurityAdvisoryUpsert) ClearGhsaID() *SecurityAdvisoryUpsert {
	u.SetNull(securityadvisory.FieldGhsaID)
	return u
}

// SetCveID sets the "cve_id" field.
func (u *SecurityAdvisoryUpsert) SetCveID(v string) *SecurityAdvisoryUpsert {
	u.Set(securityadvisory.FieldCveID, v)
	return u
}

// UpdateCveID sets the "cve_id" field to the value that was provided on create.
func (u *SecurityAdvisoryUpsert) UpdateCveID() *SecurityAdvisoryUpsert {
	u.SetExcluded(securityadvisory.FieldCveID)
	return u
}

// ClearCveID clears the value of the "cve_id" field.
func (u *SecurityAdvisoryUpsert) ClearCveID() *SecurityAdvisoryUpsert {
	u.SetNull(securityadvisory.FieldCveID)
	return u
}

// SetCveYear sets the "cve_year" field.
func (u *SecurityAdvisoryUpsert) SetCveYear(v int) *SecurityAdvisoryUpsert {
	u.Set(securityadvisory.FieldCveYear, v)
	return u
}

// UpdateCveYear sets the "cve_year" field to the value that was provided on create.
func (u *SecurityAdvisoryUpsert) UpdateCveYear() *SecurityAdvisoryUpsert {
	u.SetExcluded(securityadvisory.FieldCveYear)
	return u
}

// AddCveYear adds v to the "cve_year" field.
func (u *SecurityAdvisoryUpsert) AddCveYear(v int) *SecurityAdvisoryUpsert {
	u.Add(securityadvisory.FieldCveYear, v)
	return u
}

// ClearCveYear clears the value of the "cve_year" field.
func (u *SecurityAdvisoryUpsert) ClearCveYear() *SecurityAdvisoryUpsert {
	u.SetNull(securityadvisory.FieldCveYear)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SecurityAdvisory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SecurityAdvisoryUpsertOne) UpdateNewValues() *SecurityAdvisoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SecurityAdvisory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SecurityAdvisoryUpsertOne) Ignore() *SecurityAdvisoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SecurityAdvisoryUpsertOne) DoNothing() *SecurityAdvisoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SecurityAdvisoryCreate.OnConflict
// documentation for more info.
func (u *SecurityAdvisoryUpsertOne) Update(set func(*SecurityAdvisoryUpsert)) *SecurityAdvisoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SecurityAdvisoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetGhsaID sets the "ghsa_id" field.
func (u *SecurityAdvisoryUpsertOne) SetGhsaID(v string) *SecurityAdvisoryUpsertOne {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.SetGhsaID(v)
	})
}

// UpdateGhsaID sets the "ghsa_id" field to the value that was provided on create.
func (u *SecurityAdvisoryUpsertOne) UpdateGhsaID() *SecurityAdvisoryUpsertOne {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.UpdateGhsaID()
	})
}

// ClearGhsaID clears the value of the "ghsa_id" field.
func (u *SecurityAdvisoryUpsertOne) ClearGhsaID() *SecurityAdvisoryUpsertOne {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.ClearGhsaID()
	})
}

// SetCveID sets the "cve_id" field.
func (u *SecurityAdvisoryUpsertOne) SetCveID(v string) *SecurityAdvisoryUpsertOne {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.SetCveID(v)
	})
}

// UpdateCveID sets the "cve_id" field to the value that was provided on create.
func (u *SecurityAdvisoryUpsertOne) UpdateCveID() *SecurityAdvisoryUpsertOne {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.UpdateCveID()
	})
}

// ClearCveID clears the value of the "cve_id" field.
func (u *SecurityAdvisoryUpsertOne) ClearCveID() *SecurityAdvisoryUpsertOne {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.ClearCveID()
	})
}

// SetCveYear sets the "cve_year" field.
func (u *SecurityAdvisoryUpsertOne) SetCveYear(v int) *SecurityAdvisoryUpsertOne {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.SetCveYear(v)
	})
}

// AddCveYear adds v to the "cve_year" field.
func (u *SecurityAdvisoryUpsertOne) AddCveYear(v int) *SecurityAdvisoryUpsertOne {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.AddCveYear(v)
	})
}

// UpdateCveYear sets the "cve_year" field to the value that was provided on create.
func (u *SecurityAdvisoryUpsertOne) UpdateCveYear() *SecurityAdvisoryUpsertOne {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.UpdateCveYear()
	})
}

// ClearCveYear clears the value of the "cve_year" field.
func (u *SecurityAdvisoryUpsertOne) ClearCveYear() *SecurityAdvisoryUpsertOne {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.ClearCveYear()
	})
}

// Exec executes the query.
func (u *SecurityAdvisoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SecurityAdvisoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SecurityAdvisoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SecurityAdvisoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SecurityAdvisoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SecurityAdvisoryCreateBulk is the builder for creating many SecurityAdvisory entities in bulk.
type SecurityAdvisoryCreateBulk struct {
	config
	builders []*SecurityAdvisoryCreate
	conflict []sql.ConflictOption
}

// Save creates the SecurityAdvisory entities in the database.
func (sacb *SecurityAdvisoryCreateBulk) Save(ctx context.Context) ([]*SecurityAdvisory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*SecurityAdvisory, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SecurityAdvisoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *SecurityAdvisoryCreateBulk) SaveX(ctx context.Context) []*SecurityAdvisory {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *SecurityAdvisoryCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *SecurityAdvisoryCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SecurityAdvisory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SecurityAdvisoryUpsert) {
//			SetGhsaID(v+v).
//		}).
//		Exec(ctx)
func (sacb *SecurityAdvisoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *SecurityAdvisoryUpsertBulk {
	sacb.conflict = opts
	return &SecurityAdvisoryUpsertBulk{
		create: sacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SecurityAdvisory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sacb *SecurityAdvisoryCreateBulk) OnConflictColumns(columns ...string) *SecurityAdvisoryUpsertBulk {
	sacb.conflict = append(sacb.conflict, sql.ConflictColumns(columns...))
	return &SecurityAdvisoryUpsertBulk{
		create: sacb,
	}
}

// SecurityAdvisoryUpsertBulk is the builder for "upsert"-ing
// a bulk of SecurityAdvisory nodes.
type SecurityAdvisoryUpsertBulk struct {
	create *SecurityAdvisoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SecurityAdvisory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SecurityAdvisoryUpsertBulk) UpdateNewValues() *SecurityAdvisoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SecurityAdvisory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SecurityAdvisoryUpsertBulk) Ignore() *SecurityAdvisoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SecurityAdvisoryUpsertBulk) DoNothing() *SecurityAdvisoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SecurityAdvisoryCreateBulk.OnConflict
// documentation for more info.
func (u *SecurityAdvisoryUpsertBulk) Update(set func(*SecurityAdvisoryUpsert)) *SecurityAdvisoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SecurityAdvisoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetGhsaID sets the "ghsa_id" field.
func (u *SecurityAdvisoryUpsertBulk) SetGhsaID(v string) *SecurityAdvisoryUpsertBulk {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.SetGhsaID(v)
	})
}

// UpdateGhsaID sets the "ghsa_id" field to the value that was provided on create.
func (u *SecurityAdvisoryUpsertBulk) UpdateGhsaID() *SecurityAdvisoryUpsertBulk {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.UpdateGhsaID()
	})
}

// ClearGhsaID clears the value of the "ghsa_id" field.
func (u *SecurityAdvisoryUpsertBulk) ClearGhsaID() *SecurityAdvisoryUpsertBulk {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.ClearGhsaID()
	})
}

// SetCveID sets the "cve_id" field.
func (u *SecurityAdvisoryUpsertBulk) SetCveID(v string) *SecurityAdvisoryUpsertBulk {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.SetCveID(v)
	})
}

// UpdateCveID sets the "cve_id" field to the value that was provided on create.
func (u *SecurityAdvisoryUpsertBulk) UpdateCveID() *SecurityAdvisoryUpsertBulk {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.UpdateCveID()
	})
}

// ClearCveID clears the value of the "cve_id" field.
func (u *SecurityAdvisoryUpsertBulk) ClearCveID() *SecurityAdvisoryUpsertBulk {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.ClearCveID()
	})
}

// SetCveYear sets the "cve_year" field.
func (u *SecurityAdvisoryUpsertBulk) SetCveYear(v int) *SecurityAdvisoryUpsertBulk {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.SetCveYear(v)
	})
}

// AddCveYear adds v to the "cve_year" field.
func (u *SecurityAdvisoryUpsertBulk) AddCveYear(v int) *SecurityAdvisoryUpsertBulk {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.AddCveYear(v)
	})
}

// UpdateCveYear sets the "cve_year" field to the value that was provided on create.
func (u *SecurityAdvisoryUpsertBulk) UpdateCveYear() *SecurityAdvisoryUpsertBulk {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.UpdateCveYear()
	})
}

// ClearCveYear clears the value of the "cve_year" field.
func (u *SecurityAdvisoryUpsertBulk) ClearCveYear() *SecurityAdvisoryUpsertBulk {
	return u.Update(func(s *SecurityAdvisoryUpsert) {
		s.ClearCveYear()
	})
}

// Exec executes the query.
func (u *SecurityAdvisoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SecurityAdvisoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SecurityAdvisoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SecurityAdvisoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package hashequal

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the hashequal type in the database.
	Label = "hash_equal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldArtID holds the string denoting the art_id field in the database.
	FieldArtID = "art_id"
	// FieldEqualArtID holds the string denoting the equal_art_id field in the database.
	FieldEqualArtID = "equal_art_id"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// FieldJustification holds the string denoting the justification field in the database.
	FieldJustification = "justification"
	// FieldDocumentRef holds the string denoting the document_ref field in the database.
	FieldDocumentRef = "document_ref"
	// FieldArtifactsHash holds the string denoting the artifacts_hash field in the database.
	FieldArtifactsHash = "artifacts_hash"
	// EdgeArtifactA holds the string denoting the artifact_a edge name in mutations.
	EdgeArtifactA = "artifact_a"
	// EdgeArtifactB holds the string denoting the artifact_b edge name in mutations.
	EdgeArtifactB = "artifact_b"
	// Table holds the table name of the hashequal in the database.
	Table = "hash_equals"
	// ArtifactATable is the table that holds the artifact_a relation/edge.
	ArtifactATable = "hash_equals"
	// ArtifactAInverseTable is the table name for the Artifact entity.
	// It exists in this package in order to avoid circular dependency with the "artifact" package.
	ArtifactAInverseTable = "artifacts"
	// ArtifactAColumn is the table column denoting the artifact_a relation/edge.
	ArtifactAColumn = "art_id"
	// ArtifactBTable is the table that holds the artifact_b relation/edge.
	ArtifactBTable = "hash_equals"
	// ArtifactBInverseTable is the table name for the Artifact entity.
	// It exists in this package in order to avoid circular dependency with the "artifact" package.
	ArtifactBInverseTable = "artifacts"
	// ArtifactBColumn is the table column denoting the artifact_b relation/edge.
	ArtifactBColumn = "equal_art_id"
)

// Columns holds all SQL columns for hashequal fields.
var Columns = []string{
	FieldID,
	FieldArtID,
	FieldEqualArtID,
	FieldOrigin,
	FieldCollector,
	FieldJustification,
	FieldDocumentRef,
	FieldArtifactsHash,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the HashEqual queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByArtID orders the results by the art_id field.
func ByArtID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtID, opts...).ToFunc()
}

// ByEqualArtID orders the results by the equal_art_id field.
func ByEqualArtID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEqualArtID, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByJustification orders the results by the justification field.
func ByJustification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJustification, opts...).ToFunc()
}

// ByDocumentRef orders the results by the document_ref field.
func ByDocumentRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentRef, opts...).ToFunc()
}

// ByArtifactsHash orders the results by the artifacts_hash field.
func ByArtifactsHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtifactsHash, opts...).ToFunc()
}

// ByArtifactAField orders the results by artifact_a field.
func ByArtifactAField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtifactAStep(), sql.OrderByField(field, opts...))
	}
}

// ByArtifactBField orders the results by artifact_b field.
func ByArtifactBField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtifactBStep(), sql.OrderByField(field, opts...))
	}
}
func newArtifactAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtifactAInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ArtifactATable, ArtifactAColumn),
	)
}
func newArtifactBStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtifactBInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ArtifactBTable, ArtifactBColumn),
	)
}

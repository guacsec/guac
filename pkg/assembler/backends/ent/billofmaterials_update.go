// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/dependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// BillOfMaterialsUpdate is the builder for updating BillOfMaterials entities.
type BillOfMaterialsUpdate struct {
	config
	hooks    []Hook
	mutation *BillOfMaterialsMutation
}

// Where appends a list predicates to the BillOfMaterialsUpdate builder.
func (bomu *BillOfMaterialsUpdate) Where(ps ...predicate.BillOfMaterials) *BillOfMaterialsUpdate {
	bomu.mutation.Where(ps...)
	return bomu
}

// SetPackageID sets the "package_id" field.
func (bomu *BillOfMaterialsUpdate) SetPackageID(u uuid.UUID) *BillOfMaterialsUpdate {
	bomu.mutation.SetPackageID(u)
	return bomu
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillablePackageID(u *uuid.UUID) *BillOfMaterialsUpdate {
	if u != nil {
		bomu.SetPackageID(*u)
	}
	return bomu
}

// ClearPackageID clears the value of the "package_id" field.
func (bomu *BillOfMaterialsUpdate) ClearPackageID() *BillOfMaterialsUpdate {
	bomu.mutation.ClearPackageID()
	return bomu
}

// SetArtifactID sets the "artifact_id" field.
func (bomu *BillOfMaterialsUpdate) SetArtifactID(u uuid.UUID) *BillOfMaterialsUpdate {
	bomu.mutation.SetArtifactID(u)
	return bomu
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableArtifactID(u *uuid.UUID) *BillOfMaterialsUpdate {
	if u != nil {
		bomu.SetArtifactID(*u)
	}
	return bomu
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (bomu *BillOfMaterialsUpdate) ClearArtifactID() *BillOfMaterialsUpdate {
	bomu.mutation.ClearArtifactID()
	return bomu
}

// SetURI sets the "uri" field.
func (bomu *BillOfMaterialsUpdate) SetURI(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetURI(s)
	return bomu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableURI(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetURI(*s)
	}
	return bomu
}

// SetAlgorithm sets the "algorithm" field.
func (bomu *BillOfMaterialsUpdate) SetAlgorithm(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetAlgorithm(s)
	return bomu
}

// SetNillableAlgorithm sets the "algorithm" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableAlgorithm(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetAlgorithm(*s)
	}
	return bomu
}

// SetDigest sets the "digest" field.
func (bomu *BillOfMaterialsUpdate) SetDigest(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetDigest(s)
	return bomu
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableDigest(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetDigest(*s)
	}
	return bomu
}

// SetDownloadLocation sets the "download_location" field.
func (bomu *BillOfMaterialsUpdate) SetDownloadLocation(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetDownloadLocation(s)
	return bomu
}

// SetNillableDownloadLocation sets the "download_location" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableDownloadLocation(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetDownloadLocation(*s)
	}
	return bomu
}

// SetOrigin sets the "origin" field.
func (bomu *BillOfMaterialsUpdate) SetOrigin(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetOrigin(s)
	return bomu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableOrigin(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetOrigin(*s)
	}
	return bomu
}

// SetCollector sets the "collector" field.
func (bomu *BillOfMaterialsUpdate) SetCollector(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetCollector(s)
	return bomu
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableCollector(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetCollector(*s)
	}
	return bomu
}

// SetDocumentRef sets the "document_ref" field.
func (bomu *BillOfMaterialsUpdate) SetDocumentRef(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetDocumentRef(s)
	return bomu
}

// SetNillableDocumentRef sets the "document_ref" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableDocumentRef(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetDocumentRef(*s)
	}
	return bomu
}

// SetKnownSince sets the "known_since" field.
func (bomu *BillOfMaterialsUpdate) SetKnownSince(t time.Time) *BillOfMaterialsUpdate {
	bomu.mutation.SetKnownSince(t)
	return bomu
}

// SetNillableKnownSince sets the "known_since" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableKnownSince(t *time.Time) *BillOfMaterialsUpdate {
	if t != nil {
		bomu.SetKnownSince(*t)
	}
	return bomu
}

// SetIncludedPackagesHash sets the "included_packages_hash" field.
func (bomu *BillOfMaterialsUpdate) SetIncludedPackagesHash(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetIncludedPackagesHash(s)
	return bomu
}

// SetNillableIncludedPackagesHash sets the "included_packages_hash" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableIncludedPackagesHash(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetIncludedPackagesHash(*s)
	}
	return bomu
}

// SetIncludedArtifactsHash sets the "included_artifacts_hash" field.
func (bomu *BillOfMaterialsUpdate) SetIncludedArtifactsHash(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetIncludedArtifactsHash(s)
	return bomu
}

// SetNillableIncludedArtifactsHash sets the "included_artifacts_hash" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableIncludedArtifactsHash(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetIncludedArtifactsHash(*s)
	}
	return bomu
}

// SetIncludedDependenciesHash sets the "included_dependencies_hash" field.
func (bomu *BillOfMaterialsUpdate) SetIncludedDependenciesHash(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetIncludedDependenciesHash(s)
	return bomu
}

// SetNillableIncludedDependenciesHash sets the "included_dependencies_hash" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableIncludedDependenciesHash(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetIncludedDependenciesHash(*s)
	}
	return bomu
}

// SetIncludedOccurrencesHash sets the "included_occurrences_hash" field.
func (bomu *BillOfMaterialsUpdate) SetIncludedOccurrencesHash(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetIncludedOccurrencesHash(s)
	return bomu
}

// SetNillableIncludedOccurrencesHash sets the "included_occurrences_hash" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableIncludedOccurrencesHash(s *string) *BillOfMaterialsUpdate {
	if s != nil {
		bomu.SetIncludedOccurrencesHash(*s)
	}
	return bomu
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (bomu *BillOfMaterialsUpdate) SetPackage(p *PackageVersion) *BillOfMaterialsUpdate {
	return bomu.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (bomu *BillOfMaterialsUpdate) SetArtifact(a *Artifact) *BillOfMaterialsUpdate {
	return bomu.SetArtifactID(a.ID)
}

// AddIncludedSoftwarePackageIDs adds the "included_software_packages" edge to the PackageVersion entity by IDs.
func (bomu *BillOfMaterialsUpdate) AddIncludedSoftwarePackageIDs(ids ...uuid.UUID) *BillOfMaterialsUpdate {
	bomu.mutation.AddIncludedSoftwarePackageIDs(ids...)
	return bomu
}

// AddIncludedSoftwarePackages adds the "included_software_packages" edges to the PackageVersion entity.
func (bomu *BillOfMaterialsUpdate) AddIncludedSoftwarePackages(p ...*PackageVersion) *BillOfMaterialsUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bomu.AddIncludedSoftwarePackageIDs(ids...)
}

// AddIncludedSoftwareArtifactIDs adds the "included_software_artifacts" edge to the Artifact entity by IDs.
func (bomu *BillOfMaterialsUpdate) AddIncludedSoftwareArtifactIDs(ids ...uuid.UUID) *BillOfMaterialsUpdate {
	bomu.mutation.AddIncludedSoftwareArtifactIDs(ids...)
	return bomu
}

// AddIncludedSoftwareArtifacts adds the "included_software_artifacts" edges to the Artifact entity.
func (bomu *BillOfMaterialsUpdate) AddIncludedSoftwareArtifacts(a ...*Artifact) *BillOfMaterialsUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bomu.AddIncludedSoftwareArtifactIDs(ids...)
}

// AddIncludedDependencyIDs adds the "included_dependencies" edge to the Dependency entity by IDs.
func (bomu *BillOfMaterialsUpdate) AddIncludedDependencyIDs(ids ...uuid.UUID) *BillOfMaterialsUpdate {
	bomu.mutation.AddIncludedDependencyIDs(ids...)
	return bomu
}

// AddIncludedDependencies adds the "included_dependencies" edges to the Dependency entity.
func (bomu *BillOfMaterialsUpdate) AddIncludedDependencies(d ...*Dependency) *BillOfMaterialsUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bomu.AddIncludedDependencyIDs(ids...)
}

// AddIncludedOccurrenceIDs adds the "included_occurrences" edge to the Occurrence entity by IDs.
func (bomu *BillOfMaterialsUpdate) AddIncludedOccurrenceIDs(ids ...uuid.UUID) *BillOfMaterialsUpdate {
	bomu.mutation.AddIncludedOccurrenceIDs(ids...)
	return bomu
}

// AddIncludedOccurrences adds the "included_occurrences" edges to the Occurrence entity.
func (bomu *BillOfMaterialsUpdate) AddIncludedOccurrences(o ...*Occurrence) *BillOfMaterialsUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bomu.AddIncludedOccurrenceIDs(ids...)
}

// Mutation returns the BillOfMaterialsMutation object of the builder.
func (bomu *BillOfMaterialsUpdate) Mutation() *BillOfMaterialsMutation {
	return bomu.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (bomu *BillOfMaterialsUpdate) ClearPackage() *BillOfMaterialsUpdate {
	bomu.mutation.ClearPackage()
	return bomu
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (bomu *BillOfMaterialsUpdate) ClearArtifact() *BillOfMaterialsUpdate {
	bomu.mutation.ClearArtifact()
	return bomu
}

// ClearIncludedSoftwarePackages clears all "included_software_packages" edges to the PackageVersion entity.
func (bomu *BillOfMaterialsUpdate) ClearIncludedSoftwarePackages() *BillOfMaterialsUpdate {
	bomu.mutation.ClearIncludedSoftwarePackages()
	return bomu
}

// RemoveIncludedSoftwarePackageIDs removes the "included_software_packages" edge to PackageVersion entities by IDs.
func (bomu *BillOfMaterialsUpdate) RemoveIncludedSoftwarePackageIDs(ids ...uuid.UUID) *BillOfMaterialsUpdate {
	bomu.mutation.RemoveIncludedSoftwarePackageIDs(ids...)
	return bomu
}

// RemoveIncludedSoftwarePackages removes "included_software_packages" edges to PackageVersion entities.
func (bomu *BillOfMaterialsUpdate) RemoveIncludedSoftwarePackages(p ...*PackageVersion) *BillOfMaterialsUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bomu.RemoveIncludedSoftwarePackageIDs(ids...)
}

// ClearIncludedSoftwareArtifacts clears all "included_software_artifacts" edges to the Artifact entity.
func (bomu *BillOfMaterialsUpdate) ClearIncludedSoftwareArtifacts() *BillOfMaterialsUpdate {
	bomu.mutation.ClearIncludedSoftwareArtifacts()
	return bomu
}

// RemoveIncludedSoftwareArtifactIDs removes the "included_software_artifacts" edge to Artifact entities by IDs.
func (bomu *BillOfMaterialsUpdate) RemoveIncludedSoftwareArtifactIDs(ids ...uuid.UUID) *BillOfMaterialsUpdate {
	bomu.mutation.RemoveIncludedSoftwareArtifactIDs(ids...)
	return bomu
}

// RemoveIncludedSoftwareArtifacts removes "included_software_artifacts" edges to Artifact entities.
func (bomu *BillOfMaterialsUpdate) RemoveIncludedSoftwareArtifacts(a ...*Artifact) *BillOfMaterialsUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bomu.RemoveIncludedSoftwareArtifactIDs(ids...)
}

// ClearIncludedDependencies clears all "included_dependencies" edges to the Dependency entity.
func (bomu *BillOfMaterialsUpdate) ClearIncludedDependencies() *BillOfMaterialsUpdate {
	bomu.mutation.ClearIncludedDependencies()
	return bomu
}

// RemoveIncludedDependencyIDs removes the "included_dependencies" edge to Dependency entities by IDs.
func (bomu *BillOfMaterialsUpdate) RemoveIncludedDependencyIDs(ids ...uuid.UUID) *BillOfMaterialsUpdate {
	bomu.mutation.RemoveIncludedDependencyIDs(ids...)
	return bomu
}

// RemoveIncludedDependencies removes "included_dependencies" edges to Dependency entities.
func (bomu *BillOfMaterialsUpdate) RemoveIncludedDependencies(d ...*Dependency) *BillOfMaterialsUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bomu.RemoveIncludedDependencyIDs(ids...)
}

// ClearIncludedOccurrences clears all "included_occurrences" edges to the Occurrence entity.
func (bomu *BillOfMaterialsUpdate) ClearIncludedOccurrences() *BillOfMaterialsUpdate {
	bomu.mutation.ClearIncludedOccurrences()
	return bomu
}

// RemoveIncludedOccurrenceIDs removes the "included_occurrences" edge to Occurrence entities by IDs.
func (bomu *BillOfMaterialsUpdate) RemoveIncludedOccurrenceIDs(ids ...uuid.UUID) *BillOfMaterialsUpdate {
	bomu.mutation.RemoveIncludedOccurrenceIDs(ids...)
	return bomu
}

// RemoveIncludedOccurrences removes "included_occurrences" edges to Occurrence entities.
func (bomu *BillOfMaterialsUpdate) RemoveIncludedOccurrences(o ...*Occurrence) *BillOfMaterialsUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bomu.RemoveIncludedOccurrenceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bomu *BillOfMaterialsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bomu.sqlSave, bomu.mutation, bomu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bomu *BillOfMaterialsUpdate) SaveX(ctx context.Context) int {
	affected, err := bomu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bomu *BillOfMaterialsUpdate) Exec(ctx context.Context) error {
	_, err := bomu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bomu *BillOfMaterialsUpdate) ExecX(ctx context.Context) {
	if err := bomu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bomu *BillOfMaterialsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(billofmaterials.Table, billofmaterials.Columns, sqlgraph.NewFieldSpec(billofmaterials.FieldID, field.TypeUUID))
	if ps := bomu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bomu.mutation.URI(); ok {
		_spec.SetField(billofmaterials.FieldURI, field.TypeString, value)
	}
	if value, ok := bomu.mutation.Algorithm(); ok {
		_spec.SetField(billofmaterials.FieldAlgorithm, field.TypeString, value)
	}
	if value, ok := bomu.mutation.Digest(); ok {
		_spec.SetField(billofmaterials.FieldDigest, field.TypeString, value)
	}
	if value, ok := bomu.mutation.DownloadLocation(); ok {
		_spec.SetField(billofmaterials.FieldDownloadLocation, field.TypeString, value)
	}
	if value, ok := bomu.mutation.Origin(); ok {
		_spec.SetField(billofmaterials.FieldOrigin, field.TypeString, value)
	}
	if value, ok := bomu.mutation.Collector(); ok {
		_spec.SetField(billofmaterials.FieldCollector, field.TypeString, value)
	}
	if value, ok := bomu.mutation.DocumentRef(); ok {
		_spec.SetField(billofmaterials.FieldDocumentRef, field.TypeString, value)
	}
	if value, ok := bomu.mutation.KnownSince(); ok {
		_spec.SetField(billofmaterials.FieldKnownSince, field.TypeTime, value)
	}
	if value, ok := bomu.mutation.IncludedPackagesHash(); ok {
		_spec.SetField(billofmaterials.FieldIncludedPackagesHash, field.TypeString, value)
	}
	if value, ok := bomu.mutation.IncludedArtifactsHash(); ok {
		_spec.SetField(billofmaterials.FieldIncludedArtifactsHash, field.TypeString, value)
	}
	if value, ok := bomu.mutation.IncludedDependenciesHash(); ok {
		_spec.SetField(billofmaterials.FieldIncludedDependenciesHash, field.TypeString, value)
	}
	if value, ok := bomu.mutation.IncludedOccurrencesHash(); ok {
		_spec.SetField(billofmaterials.FieldIncludedOccurrencesHash, field.TypeString, value)
	}
	if bomu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billofmaterials.PackageTable,
			Columns: []string{billofmaterials.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomu.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billofmaterials.PackageTable,
			Columns: []string{billofmaterials.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bomu.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billofmaterials.ArtifactTable,
			Columns: []string{billofmaterials.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomu.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billofmaterials.ArtifactTable,
			Columns: []string{billofmaterials.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bomu.mutation.IncludedSoftwarePackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwarePackagesTable,
			Columns: billofmaterials.IncludedSoftwarePackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomu.mutation.RemovedIncludedSoftwarePackagesIDs(); len(nodes) > 0 && !bomu.mutation.IncludedSoftwarePackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwarePackagesTable,
			Columns: billofmaterials.IncludedSoftwarePackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomu.mutation.IncludedSoftwarePackagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwarePackagesTable,
			Columns: billofmaterials.IncludedSoftwarePackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bomu.mutation.IncludedSoftwareArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwareArtifactsTable,
			Columns: billofmaterials.IncludedSoftwareArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomu.mutation.RemovedIncludedSoftwareArtifactsIDs(); len(nodes) > 0 && !bomu.mutation.IncludedSoftwareArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwareArtifactsTable,
			Columns: billofmaterials.IncludedSoftwareArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomu.mutation.IncludedSoftwareArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwareArtifactsTable,
			Columns: billofmaterials.IncludedSoftwareArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bomu.mutation.IncludedDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedDependenciesTable,
			Columns: billofmaterials.IncludedDependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dependency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomu.mutation.RemovedIncludedDependenciesIDs(); len(nodes) > 0 && !bomu.mutation.IncludedDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedDependenciesTable,
			Columns: billofmaterials.IncludedDependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dependency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomu.mutation.IncludedDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedDependenciesTable,
			Columns: billofmaterials.IncludedDependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dependency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bomu.mutation.IncludedOccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedOccurrencesTable,
			Columns: billofmaterials.IncludedOccurrencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomu.mutation.RemovedIncludedOccurrencesIDs(); len(nodes) > 0 && !bomu.mutation.IncludedOccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedOccurrencesTable,
			Columns: billofmaterials.IncludedOccurrencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomu.mutation.IncludedOccurrencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedOccurrencesTable,
			Columns: billofmaterials.IncludedOccurrencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bomu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billofmaterials.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bomu.mutation.done = true
	return n, nil
}

// BillOfMaterialsUpdateOne is the builder for updating a single BillOfMaterials entity.
type BillOfMaterialsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillOfMaterialsMutation
}

// SetPackageID sets the "package_id" field.
func (bomuo *BillOfMaterialsUpdateOne) SetPackageID(u uuid.UUID) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetPackageID(u)
	return bomuo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillablePackageID(u *uuid.UUID) *BillOfMaterialsUpdateOne {
	if u != nil {
		bomuo.SetPackageID(*u)
	}
	return bomuo
}

// ClearPackageID clears the value of the "package_id" field.
func (bomuo *BillOfMaterialsUpdateOne) ClearPackageID() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearPackageID()
	return bomuo
}

// SetArtifactID sets the "artifact_id" field.
func (bomuo *BillOfMaterialsUpdateOne) SetArtifactID(u uuid.UUID) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetArtifactID(u)
	return bomuo
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableArtifactID(u *uuid.UUID) *BillOfMaterialsUpdateOne {
	if u != nil {
		bomuo.SetArtifactID(*u)
	}
	return bomuo
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (bomuo *BillOfMaterialsUpdateOne) ClearArtifactID() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearArtifactID()
	return bomuo
}

// SetURI sets the "uri" field.
func (bomuo *BillOfMaterialsUpdateOne) SetURI(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetURI(s)
	return bomuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableURI(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetURI(*s)
	}
	return bomuo
}

// SetAlgorithm sets the "algorithm" field.
func (bomuo *BillOfMaterialsUpdateOne) SetAlgorithm(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetAlgorithm(s)
	return bomuo
}

// SetNillableAlgorithm sets the "algorithm" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableAlgorithm(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetAlgorithm(*s)
	}
	return bomuo
}

// SetDigest sets the "digest" field.
func (bomuo *BillOfMaterialsUpdateOne) SetDigest(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetDigest(s)
	return bomuo
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableDigest(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetDigest(*s)
	}
	return bomuo
}

// SetDownloadLocation sets the "download_location" field.
func (bomuo *BillOfMaterialsUpdateOne) SetDownloadLocation(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetDownloadLocation(s)
	return bomuo
}

// SetNillableDownloadLocation sets the "download_location" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableDownloadLocation(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetDownloadLocation(*s)
	}
	return bomuo
}

// SetOrigin sets the "origin" field.
func (bomuo *BillOfMaterialsUpdateOne) SetOrigin(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetOrigin(s)
	return bomuo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableOrigin(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetOrigin(*s)
	}
	return bomuo
}

// SetCollector sets the "collector" field.
func (bomuo *BillOfMaterialsUpdateOne) SetCollector(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetCollector(s)
	return bomuo
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableCollector(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetCollector(*s)
	}
	return bomuo
}

// SetDocumentRef sets the "document_ref" field.
func (bomuo *BillOfMaterialsUpdateOne) SetDocumentRef(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetDocumentRef(s)
	return bomuo
}

// SetNillableDocumentRef sets the "document_ref" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableDocumentRef(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetDocumentRef(*s)
	}
	return bomuo
}

// SetKnownSince sets the "known_since" field.
func (bomuo *BillOfMaterialsUpdateOne) SetKnownSince(t time.Time) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetKnownSince(t)
	return bomuo
}

// SetNillableKnownSince sets the "known_since" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableKnownSince(t *time.Time) *BillOfMaterialsUpdateOne {
	if t != nil {
		bomuo.SetKnownSince(*t)
	}
	return bomuo
}

// SetIncludedPackagesHash sets the "included_packages_hash" field.
func (bomuo *BillOfMaterialsUpdateOne) SetIncludedPackagesHash(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetIncludedPackagesHash(s)
	return bomuo
}

// SetNillableIncludedPackagesHash sets the "included_packages_hash" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableIncludedPackagesHash(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetIncludedPackagesHash(*s)
	}
	return bomuo
}

// SetIncludedArtifactsHash sets the "included_artifacts_hash" field.
func (bomuo *BillOfMaterialsUpdateOne) SetIncludedArtifactsHash(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetIncludedArtifactsHash(s)
	return bomuo
}

// SetNillableIncludedArtifactsHash sets the "included_artifacts_hash" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableIncludedArtifactsHash(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetIncludedArtifactsHash(*s)
	}
	return bomuo
}

// SetIncludedDependenciesHash sets the "included_dependencies_hash" field.
func (bomuo *BillOfMaterialsUpdateOne) SetIncludedDependenciesHash(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetIncludedDependenciesHash(s)
	return bomuo
}

// SetNillableIncludedDependenciesHash sets the "included_dependencies_hash" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableIncludedDependenciesHash(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetIncludedDependenciesHash(*s)
	}
	return bomuo
}

// SetIncludedOccurrencesHash sets the "included_occurrences_hash" field.
func (bomuo *BillOfMaterialsUpdateOne) SetIncludedOccurrencesHash(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetIncludedOccurrencesHash(s)
	return bomuo
}

// SetNillableIncludedOccurrencesHash sets the "included_occurrences_hash" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableIncludedOccurrencesHash(s *string) *BillOfMaterialsUpdateOne {
	if s != nil {
		bomuo.SetIncludedOccurrencesHash(*s)
	}
	return bomuo
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (bomuo *BillOfMaterialsUpdateOne) SetPackage(p *PackageVersion) *BillOfMaterialsUpdateOne {
	return bomuo.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (bomuo *BillOfMaterialsUpdateOne) SetArtifact(a *Artifact) *BillOfMaterialsUpdateOne {
	return bomuo.SetArtifactID(a.ID)
}

// AddIncludedSoftwarePackageIDs adds the "included_software_packages" edge to the PackageVersion entity by IDs.
func (bomuo *BillOfMaterialsUpdateOne) AddIncludedSoftwarePackageIDs(ids ...uuid.UUID) *BillOfMaterialsUpdateOne {
	bomuo.mutation.AddIncludedSoftwarePackageIDs(ids...)
	return bomuo
}

// AddIncludedSoftwarePackages adds the "included_software_packages" edges to the PackageVersion entity.
func (bomuo *BillOfMaterialsUpdateOne) AddIncludedSoftwarePackages(p ...*PackageVersion) *BillOfMaterialsUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bomuo.AddIncludedSoftwarePackageIDs(ids...)
}

// AddIncludedSoftwareArtifactIDs adds the "included_software_artifacts" edge to the Artifact entity by IDs.
func (bomuo *BillOfMaterialsUpdateOne) AddIncludedSoftwareArtifactIDs(ids ...uuid.UUID) *BillOfMaterialsUpdateOne {
	bomuo.mutation.AddIncludedSoftwareArtifactIDs(ids...)
	return bomuo
}

// AddIncludedSoftwareArtifacts adds the "included_software_artifacts" edges to the Artifact entity.
func (bomuo *BillOfMaterialsUpdateOne) AddIncludedSoftwareArtifacts(a ...*Artifact) *BillOfMaterialsUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bomuo.AddIncludedSoftwareArtifactIDs(ids...)
}

// AddIncludedDependencyIDs adds the "included_dependencies" edge to the Dependency entity by IDs.
func (bomuo *BillOfMaterialsUpdateOne) AddIncludedDependencyIDs(ids ...uuid.UUID) *BillOfMaterialsUpdateOne {
	bomuo.mutation.AddIncludedDependencyIDs(ids...)
	return bomuo
}

// AddIncludedDependencies adds the "included_dependencies" edges to the Dependency entity.
func (bomuo *BillOfMaterialsUpdateOne) AddIncludedDependencies(d ...*Dependency) *BillOfMaterialsUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bomuo.AddIncludedDependencyIDs(ids...)
}

// AddIncludedOccurrenceIDs adds the "included_occurrences" edge to the Occurrence entity by IDs.
func (bomuo *BillOfMaterialsUpdateOne) AddIncludedOccurrenceIDs(ids ...uuid.UUID) *BillOfMaterialsUpdateOne {
	bomuo.mutation.AddIncludedOccurrenceIDs(ids...)
	return bomuo
}

// AddIncludedOccurrences adds the "included_occurrences" edges to the Occurrence entity.
func (bomuo *BillOfMaterialsUpdateOne) AddIncludedOccurrences(o ...*Occurrence) *BillOfMaterialsUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bomuo.AddIncludedOccurrenceIDs(ids...)
}

// Mutation returns the BillOfMaterialsMutation object of the builder.
func (bomuo *BillOfMaterialsUpdateOne) Mutation() *BillOfMaterialsMutation {
	return bomuo.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (bomuo *BillOfMaterialsUpdateOne) ClearPackage() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearPackage()
	return bomuo
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (bomuo *BillOfMaterialsUpdateOne) ClearArtifact() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearArtifact()
	return bomuo
}

// ClearIncludedSoftwarePackages clears all "included_software_packages" edges to the PackageVersion entity.
func (bomuo *BillOfMaterialsUpdateOne) ClearIncludedSoftwarePackages() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearIncludedSoftwarePackages()
	return bomuo
}

// RemoveIncludedSoftwarePackageIDs removes the "included_software_packages" edge to PackageVersion entities by IDs.
func (bomuo *BillOfMaterialsUpdateOne) RemoveIncludedSoftwarePackageIDs(ids ...uuid.UUID) *BillOfMaterialsUpdateOne {
	bomuo.mutation.RemoveIncludedSoftwarePackageIDs(ids...)
	return bomuo
}

// RemoveIncludedSoftwarePackages removes "included_software_packages" edges to PackageVersion entities.
func (bomuo *BillOfMaterialsUpdateOne) RemoveIncludedSoftwarePackages(p ...*PackageVersion) *BillOfMaterialsUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bomuo.RemoveIncludedSoftwarePackageIDs(ids...)
}

// ClearIncludedSoftwareArtifacts clears all "included_software_artifacts" edges to the Artifact entity.
func (bomuo *BillOfMaterialsUpdateOne) ClearIncludedSoftwareArtifacts() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearIncludedSoftwareArtifacts()
	return bomuo
}

// RemoveIncludedSoftwareArtifactIDs removes the "included_software_artifacts" edge to Artifact entities by IDs.
func (bomuo *BillOfMaterialsUpdateOne) RemoveIncludedSoftwareArtifactIDs(ids ...uuid.UUID) *BillOfMaterialsUpdateOne {
	bomuo.mutation.RemoveIncludedSoftwareArtifactIDs(ids...)
	return bomuo
}

// RemoveIncludedSoftwareArtifacts removes "included_software_artifacts" edges to Artifact entities.
func (bomuo *BillOfMaterialsUpdateOne) RemoveIncludedSoftwareArtifacts(a ...*Artifact) *BillOfMaterialsUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bomuo.RemoveIncludedSoftwareArtifactIDs(ids...)
}

// ClearIncludedDependencies clears all "included_dependencies" edges to the Dependency entity.
func (bomuo *BillOfMaterialsUpdateOne) ClearIncludedDependencies() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearIncludedDependencies()
	return bomuo
}

// RemoveIncludedDependencyIDs removes the "included_dependencies" edge to Dependency entities by IDs.
func (bomuo *BillOfMaterialsUpdateOne) RemoveIncludedDependencyIDs(ids ...uuid.UUID) *BillOfMaterialsUpdateOne {
	bomuo.mutation.RemoveIncludedDependencyIDs(ids...)
	return bomuo
}

// RemoveIncludedDependencies removes "included_dependencies" edges to Dependency entities.
func (bomuo *BillOfMaterialsUpdateOne) RemoveIncludedDependencies(d ...*Dependency) *BillOfMaterialsUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bomuo.RemoveIncludedDependencyIDs(ids...)
}

// ClearIncludedOccurrences clears all "included_occurrences" edges to the Occurrence entity.
func (bomuo *BillOfMaterialsUpdateOne) ClearIncludedOccurrences() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearIncludedOccurrences()
	return bomuo
}

// RemoveIncludedOccurrenceIDs removes the "included_occurrences" edge to Occurrence entities by IDs.
func (bomuo *BillOfMaterialsUpdateOne) RemoveIncludedOccurrenceIDs(ids ...uuid.UUID) *BillOfMaterialsUpdateOne {
	bomuo.mutation.RemoveIncludedOccurrenceIDs(ids...)
	return bomuo
}

// RemoveIncludedOccurrences removes "included_occurrences" edges to Occurrence entities.
func (bomuo *BillOfMaterialsUpdateOne) RemoveIncludedOccurrences(o ...*Occurrence) *BillOfMaterialsUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bomuo.RemoveIncludedOccurrenceIDs(ids...)
}

// Where appends a list predicates to the BillOfMaterialsUpdate builder.
func (bomuo *BillOfMaterialsUpdateOne) Where(ps ...predicate.BillOfMaterials) *BillOfMaterialsUpdateOne {
	bomuo.mutation.Where(ps...)
	return bomuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bomuo *BillOfMaterialsUpdateOne) Select(field string, fields ...string) *BillOfMaterialsUpdateOne {
	bomuo.fields = append([]string{field}, fields...)
	return bomuo
}

// Save executes the query and returns the updated BillOfMaterials entity.
func (bomuo *BillOfMaterialsUpdateOne) Save(ctx context.Context) (*BillOfMaterials, error) {
	return withHooks(ctx, bomuo.sqlSave, bomuo.mutation, bomuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bomuo *BillOfMaterialsUpdateOne) SaveX(ctx context.Context) *BillOfMaterials {
	node, err := bomuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bomuo *BillOfMaterialsUpdateOne) Exec(ctx context.Context) error {
	_, err := bomuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bomuo *BillOfMaterialsUpdateOne) ExecX(ctx context.Context) {
	if err := bomuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bomuo *BillOfMaterialsUpdateOne) sqlSave(ctx context.Context) (_node *BillOfMaterials, err error) {
	_spec := sqlgraph.NewUpdateSpec(billofmaterials.Table, billofmaterials.Columns, sqlgraph.NewFieldSpec(billofmaterials.FieldID, field.TypeUUID))
	id, ok := bomuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BillOfMaterials.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bomuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billofmaterials.FieldID)
		for _, f := range fields {
			if !billofmaterials.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billofmaterials.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bomuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bomuo.mutation.URI(); ok {
		_spec.SetField(billofmaterials.FieldURI, field.TypeString, value)
	}
	if value, ok := bomuo.mutation.Algorithm(); ok {
		_spec.SetField(billofmaterials.FieldAlgorithm, field.TypeString, value)
	}
	if value, ok := bomuo.mutation.Digest(); ok {
		_spec.SetField(billofmaterials.FieldDigest, field.TypeString, value)
	}
	if value, ok := bomuo.mutation.DownloadLocation(); ok {
		_spec.SetField(billofmaterials.FieldDownloadLocation, field.TypeString, value)
	}
	if value, ok := bomuo.mutation.Origin(); ok {
		_spec.SetField(billofmaterials.FieldOrigin, field.TypeString, value)
	}
	if value, ok := bomuo.mutation.Collector(); ok {
		_spec.SetField(billofmaterials.FieldCollector, field.TypeString, value)
	}
	if value, ok := bomuo.mutation.DocumentRef(); ok {
		_spec.SetField(billofmaterials.FieldDocumentRef, field.TypeString, value)
	}
	if value, ok := bomuo.mutation.KnownSince(); ok {
		_spec.SetField(billofmaterials.FieldKnownSince, field.TypeTime, value)
	}
	if value, ok := bomuo.mutation.IncludedPackagesHash(); ok {
		_spec.SetField(billofmaterials.FieldIncludedPackagesHash, field.TypeString, value)
	}
	if value, ok := bomuo.mutation.IncludedArtifactsHash(); ok {
		_spec.SetField(billofmaterials.FieldIncludedArtifactsHash, field.TypeString, value)
	}
	if value, ok := bomuo.mutation.IncludedDependenciesHash(); ok {
		_spec.SetField(billofmaterials.FieldIncludedDependenciesHash, field.TypeString, value)
	}
	if value, ok := bomuo.mutation.IncludedOccurrencesHash(); ok {
		_spec.SetField(billofmaterials.FieldIncludedOccurrencesHash, field.TypeString, value)
	}
	if bomuo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billofmaterials.PackageTable,
			Columns: []string{billofmaterials.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomuo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billofmaterials.PackageTable,
			Columns: []string{billofmaterials.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bomuo.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billofmaterials.ArtifactTable,
			Columns: []string{billofmaterials.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomuo.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billofmaterials.ArtifactTable,
			Columns: []string{billofmaterials.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bomuo.mutation.IncludedSoftwarePackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwarePackagesTable,
			Columns: billofmaterials.IncludedSoftwarePackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomuo.mutation.RemovedIncludedSoftwarePackagesIDs(); len(nodes) > 0 && !bomuo.mutation.IncludedSoftwarePackagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwarePackagesTable,
			Columns: billofmaterials.IncludedSoftwarePackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomuo.mutation.IncludedSoftwarePackagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwarePackagesTable,
			Columns: billofmaterials.IncludedSoftwarePackagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bomuo.mutation.IncludedSoftwareArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwareArtifactsTable,
			Columns: billofmaterials.IncludedSoftwareArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomuo.mutation.RemovedIncludedSoftwareArtifactsIDs(); len(nodes) > 0 && !bomuo.mutation.IncludedSoftwareArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwareArtifactsTable,
			Columns: billofmaterials.IncludedSoftwareArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomuo.mutation.IncludedSoftwareArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedSoftwareArtifactsTable,
			Columns: billofmaterials.IncludedSoftwareArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bomuo.mutation.IncludedDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedDependenciesTable,
			Columns: billofmaterials.IncludedDependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dependency.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomuo.mutation.RemovedIncludedDependenciesIDs(); len(nodes) > 0 && !bomuo.mutation.IncludedDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedDependenciesTable,
			Columns: billofmaterials.IncludedDependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dependency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomuo.mutation.IncludedDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedDependenciesTable,
			Columns: billofmaterials.IncludedDependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dependency.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bomuo.mutation.IncludedOccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedOccurrencesTable,
			Columns: billofmaterials.IncludedOccurrencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomuo.mutation.RemovedIncludedOccurrencesIDs(); len(nodes) > 0 && !bomuo.mutation.IncludedOccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedOccurrencesTable,
			Columns: billofmaterials.IncludedOccurrencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bomuo.mutation.IncludedOccurrencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   billofmaterials.IncludedOccurrencesTable,
			Columns: billofmaterials.IncludedOccurrencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillOfMaterials{config: bomuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bomuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billofmaterials.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bomuo.mutation.done = true
	return _node, nil
}

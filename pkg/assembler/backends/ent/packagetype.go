// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagetype"
)

// PackageType is the model entity for the PackageType schema.
type PackageType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// This node matches a pkg:<type> partial pURL
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackageTypeQuery when eager-loading is set.
	Edges        PackageTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PackageTypeEdges holds the relations/edges for other nodes in the graph.
type PackageTypeEdges struct {
	// Namespaces holds the value of the namespaces edge.
	Namespaces []*PackageNamespace `json:"namespaces,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedNamespaces map[string][]*PackageNamespace
}

// NamespacesOrErr returns the Namespaces value or an error if the edge
// was not loaded in eager-loading.
func (e PackageTypeEdges) NamespacesOrErr() ([]*PackageNamespace, error) {
	if e.loadedTypes[0] {
		return e.Namespaces, nil
	}
	return nil, &NotLoadedError{edge: "namespaces"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PackageType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case packagetype.FieldID:
			values[i] = new(sql.NullInt64)
		case packagetype.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PackageType fields.
func (pt *PackageType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packagetype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int(value.Int64)
		case packagetype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pt.Type = value.String
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PackageType.
// This includes values selected through modifiers, order, etc.
func (pt *PackageType) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryNamespaces queries the "namespaces" edge of the PackageType entity.
func (pt *PackageType) QueryNamespaces() *PackageNamespaceQuery {
	return NewPackageTypeClient(pt.config).QueryNamespaces(pt)
}

// Update returns a builder for updating this PackageType.
// Note that you need to call PackageType.Unwrap() before calling this method if this PackageType
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PackageType) Update() *PackageTypeUpdateOne {
	return NewPackageTypeClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PackageType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PackageType) Unwrap() *PackageType {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PackageType is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PackageType) String() string {
	var builder strings.Builder
	builder.WriteString("PackageType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("type=")
	builder.WriteString(pt.Type)
	builder.WriteByte(')')
	return builder.String()
}

// NamedNamespaces returns the Namespaces named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pt *PackageType) NamedNamespaces(name string) ([]*PackageNamespace, error) {
	if pt.Edges.namedNamespaces == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pt.Edges.namedNamespaces[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pt *PackageType) appendNamedNamespaces(name string, edges ...*PackageNamespace) {
	if pt.Edges.namedNamespaces == nil {
		pt.Edges.namedNamespaces = make(map[string][]*PackageNamespace)
	}
	if len(edges) == 0 {
		pt.Edges.namedNamespaces[name] = []*PackageNamespace{}
	} else {
		pt.Edges.namedNamespaces[name] = append(pt.Edges.namedNamespaces[name], edges...)
	}
}

// PackageTypes is a parsable slice of PackageType.
type PackageTypes []*PackageType

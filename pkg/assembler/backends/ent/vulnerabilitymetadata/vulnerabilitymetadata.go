// Code generated by ent, DO NOT EDIT.

package vulnerabilitymetadata

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vulnerabilitymetadata type in the database.
	Label = "vulnerability_metadata"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVulnerabilityIDID holds the string denoting the vulnerability_id_id field in the database.
	FieldVulnerabilityIDID = "vulnerability_id_id"
	// FieldScoreType holds the string denoting the score_type field in the database.
	FieldScoreType = "score_type"
	// FieldScoreValue holds the string denoting the score_value field in the database.
	FieldScoreValue = "score_value"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// EdgeVulnerabilityID holds the string denoting the vulnerability_id edge name in mutations.
	EdgeVulnerabilityID = "vulnerability_id"
	// Table holds the table name of the vulnerabilitymetadata in the database.
	Table = "vulnerability_metadata"
	// VulnerabilityIDTable is the table that holds the vulnerability_id relation/edge.
	VulnerabilityIDTable = "vulnerability_metadata"
	// VulnerabilityIDInverseTable is the table name for the VulnerabilityID entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilityid" package.
	VulnerabilityIDInverseTable = "vulnerability_ids"
	// VulnerabilityIDColumn is the table column denoting the vulnerability_id relation/edge.
	VulnerabilityIDColumn = "vulnerability_id_id"
)

// Columns holds all SQL columns for vulnerabilitymetadata fields.
var Columns = []string{
	FieldID,
	FieldVulnerabilityIDID,
	FieldScoreType,
	FieldScoreValue,
	FieldTimestamp,
	FieldOrigin,
	FieldCollector,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// ScoreType defines the type for the "score_type" enum field.
type ScoreType string

// ScoreType values.
const (
	ScoreTypeCVSSv2  ScoreType = "CVSSv2"
	ScoreTypeCVSSv3  ScoreType = "CVSSv3"
	ScoreTypeEPSSv1  ScoreType = "EPSSv1"
	ScoreTypeEPSSv2  ScoreType = "EPSSv2"
	ScoreTypeCVSSv31 ScoreType = "CVSSv31"
	ScoreTypeCVSSv4  ScoreType = "CVSSv4"
	ScoreTypeOWASP   ScoreType = "OWASP"
	ScoreTypeSSVC    ScoreType = "SSVC"
)

func (st ScoreType) String() string {
	return string(st)
}

// ScoreTypeValidator is a validator for the "score_type" field enum values. It is called by the builders before save.
func ScoreTypeValidator(st ScoreType) error {
	switch st {
	case ScoreTypeCVSSv2, ScoreTypeCVSSv3, ScoreTypeEPSSv1, ScoreTypeEPSSv2, ScoreTypeCVSSv31, ScoreTypeCVSSv4, ScoreTypeOWASP, ScoreTypeSSVC:
		return nil
	default:
		return fmt.Errorf("vulnerabilitymetadata: invalid enum value for score_type field: %q", st)
	}
}

// OrderOption defines the ordering options for the VulnerabilityMetadata queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVulnerabilityIDID orders the results by the vulnerability_id_id field.
func ByVulnerabilityIDID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVulnerabilityIDID, opts...).ToFunc()
}

// ByScoreType orders the results by the score_type field.
func ByScoreType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScoreType, opts...).ToFunc()
}

// ByScoreValue orders the results by the score_value field.
func ByScoreValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScoreValue, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByVulnerabilityIDField orders the results by vulnerability_id field.
func ByVulnerabilityIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnerabilityIDStep(), sql.OrderByField(field, opts...))
	}
}
func newVulnerabilityIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnerabilityIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, VulnerabilityIDTable, VulnerabilityIDColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e ScoreType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *ScoreType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = ScoreType(str)
	if err := ScoreTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid ScoreType", str)
	}
	return nil
}

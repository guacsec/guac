// Code generated by ent, DO NOT EDIT.

package vulnerabilitymetadata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldLTE(FieldID, id))
}

// VulnerabilityIDID applies equality check predicate on the "vulnerability_id_id" field. It's identical to VulnerabilityIDIDEQ.
func VulnerabilityIDID(v int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldVulnerabilityIDID, v))
}

// ScoreValue applies equality check predicate on the "score_value" field. It's identical to ScoreValueEQ.
func ScoreValue(v float64) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldScoreValue, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldTimestamp, v))
}

// Origin applies equality check predicate on the "origin" field. It's identical to OriginEQ.
func Origin(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldOrigin, v))
}

// Collector applies equality check predicate on the "collector" field. It's identical to CollectorEQ.
func Collector(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldCollector, v))
}

// VulnerabilityIDIDEQ applies the EQ predicate on the "vulnerability_id_id" field.
func VulnerabilityIDIDEQ(v int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldVulnerabilityIDID, v))
}

// VulnerabilityIDIDNEQ applies the NEQ predicate on the "vulnerability_id_id" field.
func VulnerabilityIDIDNEQ(v int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNEQ(FieldVulnerabilityIDID, v))
}

// VulnerabilityIDIDIn applies the In predicate on the "vulnerability_id_id" field.
func VulnerabilityIDIDIn(vs ...int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldIn(FieldVulnerabilityIDID, vs...))
}

// VulnerabilityIDIDNotIn applies the NotIn predicate on the "vulnerability_id_id" field.
func VulnerabilityIDIDNotIn(vs ...int) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNotIn(FieldVulnerabilityIDID, vs...))
}

// ScoreTypeEQ applies the EQ predicate on the "score_type" field.
func ScoreTypeEQ(v ScoreType) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldScoreType, v))
}

// ScoreTypeNEQ applies the NEQ predicate on the "score_type" field.
func ScoreTypeNEQ(v ScoreType) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNEQ(FieldScoreType, v))
}

// ScoreTypeIn applies the In predicate on the "score_type" field.
func ScoreTypeIn(vs ...ScoreType) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldIn(FieldScoreType, vs...))
}

// ScoreTypeNotIn applies the NotIn predicate on the "score_type" field.
func ScoreTypeNotIn(vs ...ScoreType) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNotIn(FieldScoreType, vs...))
}

// ScoreValueEQ applies the EQ predicate on the "score_value" field.
func ScoreValueEQ(v float64) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldScoreValue, v))
}

// ScoreValueNEQ applies the NEQ predicate on the "score_value" field.
func ScoreValueNEQ(v float64) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNEQ(FieldScoreValue, v))
}

// ScoreValueIn applies the In predicate on the "score_value" field.
func ScoreValueIn(vs ...float64) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldIn(FieldScoreValue, vs...))
}

// ScoreValueNotIn applies the NotIn predicate on the "score_value" field.
func ScoreValueNotIn(vs ...float64) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNotIn(FieldScoreValue, vs...))
}

// ScoreValueGT applies the GT predicate on the "score_value" field.
func ScoreValueGT(v float64) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldGT(FieldScoreValue, v))
}

// ScoreValueGTE applies the GTE predicate on the "score_value" field.
func ScoreValueGTE(v float64) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldGTE(FieldScoreValue, v))
}

// ScoreValueLT applies the LT predicate on the "score_value" field.
func ScoreValueLT(v float64) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldLT(FieldScoreValue, v))
}

// ScoreValueLTE applies the LTE predicate on the "score_value" field.
func ScoreValueLTE(v float64) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldLTE(FieldScoreValue, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldLTE(FieldTimestamp, v))
}

// OriginEQ applies the EQ predicate on the "origin" field.
func OriginEQ(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldOrigin, v))
}

// OriginNEQ applies the NEQ predicate on the "origin" field.
func OriginNEQ(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNEQ(FieldOrigin, v))
}

// OriginIn applies the In predicate on the "origin" field.
func OriginIn(vs ...string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldIn(FieldOrigin, vs...))
}

// OriginNotIn applies the NotIn predicate on the "origin" field.
func OriginNotIn(vs ...string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNotIn(FieldOrigin, vs...))
}

// OriginGT applies the GT predicate on the "origin" field.
func OriginGT(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldGT(FieldOrigin, v))
}

// OriginGTE applies the GTE predicate on the "origin" field.
func OriginGTE(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldGTE(FieldOrigin, v))
}

// OriginLT applies the LT predicate on the "origin" field.
func OriginLT(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldLT(FieldOrigin, v))
}

// OriginLTE applies the LTE predicate on the "origin" field.
func OriginLTE(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldLTE(FieldOrigin, v))
}

// OriginContains applies the Contains predicate on the "origin" field.
func OriginContains(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldContains(FieldOrigin, v))
}

// OriginHasPrefix applies the HasPrefix predicate on the "origin" field.
func OriginHasPrefix(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldHasPrefix(FieldOrigin, v))
}

// OriginHasSuffix applies the HasSuffix predicate on the "origin" field.
func OriginHasSuffix(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldHasSuffix(FieldOrigin, v))
}

// OriginEqualFold applies the EqualFold predicate on the "origin" field.
func OriginEqualFold(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEqualFold(FieldOrigin, v))
}

// OriginContainsFold applies the ContainsFold predicate on the "origin" field.
func OriginContainsFold(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldContainsFold(FieldOrigin, v))
}

// CollectorEQ applies the EQ predicate on the "collector" field.
func CollectorEQ(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEQ(FieldCollector, v))
}

// CollectorNEQ applies the NEQ predicate on the "collector" field.
func CollectorNEQ(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNEQ(FieldCollector, v))
}

// CollectorIn applies the In predicate on the "collector" field.
func CollectorIn(vs ...string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldIn(FieldCollector, vs...))
}

// CollectorNotIn applies the NotIn predicate on the "collector" field.
func CollectorNotIn(vs ...string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldNotIn(FieldCollector, vs...))
}

// CollectorGT applies the GT predicate on the "collector" field.
func CollectorGT(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldGT(FieldCollector, v))
}

// CollectorGTE applies the GTE predicate on the "collector" field.
func CollectorGTE(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldGTE(FieldCollector, v))
}

// CollectorLT applies the LT predicate on the "collector" field.
func CollectorLT(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldLT(FieldCollector, v))
}

// CollectorLTE applies the LTE predicate on the "collector" field.
func CollectorLTE(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldLTE(FieldCollector, v))
}

// CollectorContains applies the Contains predicate on the "collector" field.
func CollectorContains(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldContains(FieldCollector, v))
}

// CollectorHasPrefix applies the HasPrefix predicate on the "collector" field.
func CollectorHasPrefix(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldHasPrefix(FieldCollector, v))
}

// CollectorHasSuffix applies the HasSuffix predicate on the "collector" field.
func CollectorHasSuffix(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldHasSuffix(FieldCollector, v))
}

// CollectorEqualFold applies the EqualFold predicate on the "collector" field.
func CollectorEqualFold(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldEqualFold(FieldCollector, v))
}

// CollectorContainsFold applies the ContainsFold predicate on the "collector" field.
func CollectorContainsFold(v string) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.FieldContainsFold(FieldCollector, v))
}

// HasVulnerabilityID applies the HasEdge predicate on the "vulnerability_id" edge.
func HasVulnerabilityID() predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VulnerabilityIDTable, VulnerabilityIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVulnerabilityIDWith applies the HasEdge predicate on the "vulnerability_id" edge with a given conditions (other predicates).
func HasVulnerabilityIDWith(preds ...predicate.VulnerabilityID) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(func(s *sql.Selector) {
		step := newVulnerabilityIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VulnerabilityMetadata) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VulnerabilityMetadata) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VulnerabilityMetadata) predicate.VulnerabilityMetadata {
	return predicate.VulnerabilityMetadata(sql.NotPredicates(p))
}

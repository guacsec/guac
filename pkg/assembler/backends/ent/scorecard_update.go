// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/scorecard"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// ScorecardUpdate is the builder for updating Scorecard entities.
type ScorecardUpdate struct {
	config
	hooks    []Hook
	mutation *ScorecardMutation
}

// Where appends a list predicates to the ScorecardUpdate builder.
func (su *ScorecardUpdate) Where(ps ...predicate.Scorecard) *ScorecardUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetChecks sets the "checks" field.
func (su *ScorecardUpdate) SetChecks(mc []*model.ScorecardCheck) *ScorecardUpdate {
	su.mutation.SetChecks(mc)
	return su
}

// AppendChecks appends mc to the "checks" field.
func (su *ScorecardUpdate) AppendChecks(mc []*model.ScorecardCheck) *ScorecardUpdate {
	su.mutation.AppendChecks(mc)
	return su
}

// SetAggregateScore sets the "aggregate_score" field.
func (su *ScorecardUpdate) SetAggregateScore(f float64) *ScorecardUpdate {
	su.mutation.ResetAggregateScore()
	su.mutation.SetAggregateScore(f)
	return su
}

// SetNillableAggregateScore sets the "aggregate_score" field if the given value is not nil.
func (su *ScorecardUpdate) SetNillableAggregateScore(f *float64) *ScorecardUpdate {
	if f != nil {
		su.SetAggregateScore(*f)
	}
	return su
}

// AddAggregateScore adds f to the "aggregate_score" field.
func (su *ScorecardUpdate) AddAggregateScore(f float64) *ScorecardUpdate {
	su.mutation.AddAggregateScore(f)
	return su
}

// SetTimeScanned sets the "time_scanned" field.
func (su *ScorecardUpdate) SetTimeScanned(t time.Time) *ScorecardUpdate {
	su.mutation.SetTimeScanned(t)
	return su
}

// SetNillableTimeScanned sets the "time_scanned" field if the given value is not nil.
func (su *ScorecardUpdate) SetNillableTimeScanned(t *time.Time) *ScorecardUpdate {
	if t != nil {
		su.SetTimeScanned(*t)
	}
	return su
}

// SetScorecardVersion sets the "scorecard_version" field.
func (su *ScorecardUpdate) SetScorecardVersion(s string) *ScorecardUpdate {
	su.mutation.SetScorecardVersion(s)
	return su
}

// SetNillableScorecardVersion sets the "scorecard_version" field if the given value is not nil.
func (su *ScorecardUpdate) SetNillableScorecardVersion(s *string) *ScorecardUpdate {
	if s != nil {
		su.SetScorecardVersion(*s)
	}
	return su
}

// SetScorecardCommit sets the "scorecard_commit" field.
func (su *ScorecardUpdate) SetScorecardCommit(s string) *ScorecardUpdate {
	su.mutation.SetScorecardCommit(s)
	return su
}

// SetNillableScorecardCommit sets the "scorecard_commit" field if the given value is not nil.
func (su *ScorecardUpdate) SetNillableScorecardCommit(s *string) *ScorecardUpdate {
	if s != nil {
		su.SetScorecardCommit(*s)
	}
	return su
}

// SetOrigin sets the "origin" field.
func (su *ScorecardUpdate) SetOrigin(s string) *ScorecardUpdate {
	su.mutation.SetOrigin(s)
	return su
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (su *ScorecardUpdate) SetNillableOrigin(s *string) *ScorecardUpdate {
	if s != nil {
		su.SetOrigin(*s)
	}
	return su
}

// SetCollector sets the "collector" field.
func (su *ScorecardUpdate) SetCollector(s string) *ScorecardUpdate {
	su.mutation.SetCollector(s)
	return su
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (su *ScorecardUpdate) SetNillableCollector(s *string) *ScorecardUpdate {
	if s != nil {
		su.SetCollector(*s)
	}
	return su
}

// AddCertificationIDs adds the "certifications" edge to the CertifyScorecard entity by IDs.
func (su *ScorecardUpdate) AddCertificationIDs(ids ...int) *ScorecardUpdate {
	su.mutation.AddCertificationIDs(ids...)
	return su
}

// AddCertifications adds the "certifications" edges to the CertifyScorecard entity.
func (su *ScorecardUpdate) AddCertifications(c ...*CertifyScorecard) *ScorecardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCertificationIDs(ids...)
}

// Mutation returns the ScorecardMutation object of the builder.
func (su *ScorecardUpdate) Mutation() *ScorecardMutation {
	return su.mutation
}

// ClearCertifications clears all "certifications" edges to the CertifyScorecard entity.
func (su *ScorecardUpdate) ClearCertifications() *ScorecardUpdate {
	su.mutation.ClearCertifications()
	return su
}

// RemoveCertificationIDs removes the "certifications" edge to CertifyScorecard entities by IDs.
func (su *ScorecardUpdate) RemoveCertificationIDs(ids ...int) *ScorecardUpdate {
	su.mutation.RemoveCertificationIDs(ids...)
	return su
}

// RemoveCertifications removes "certifications" edges to CertifyScorecard entities.
func (su *ScorecardUpdate) RemoveCertifications(c ...*CertifyScorecard) *ScorecardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCertificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScorecardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScorecardUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScorecardUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScorecardUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScorecardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scorecard.Table, scorecard.Columns, sqlgraph.NewFieldSpec(scorecard.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Checks(); ok {
		_spec.SetField(scorecard.FieldChecks, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedChecks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scorecard.FieldChecks, value)
		})
	}
	if value, ok := su.mutation.AggregateScore(); ok {
		_spec.SetField(scorecard.FieldAggregateScore, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedAggregateScore(); ok {
		_spec.AddField(scorecard.FieldAggregateScore, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.TimeScanned(); ok {
		_spec.SetField(scorecard.FieldTimeScanned, field.TypeTime, value)
	}
	if value, ok := su.mutation.ScorecardVersion(); ok {
		_spec.SetField(scorecard.FieldScorecardVersion, field.TypeString, value)
	}
	if value, ok := su.mutation.ScorecardCommit(); ok {
		_spec.SetField(scorecard.FieldScorecardCommit, field.TypeString, value)
	}
	if value, ok := su.mutation.Origin(); ok {
		_spec.SetField(scorecard.FieldOrigin, field.TypeString, value)
	}
	if value, ok := su.mutation.Collector(); ok {
		_spec.SetField(scorecard.FieldCollector, field.TypeString, value)
	}
	if su.mutation.CertificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scorecard.CertificationsTable,
			Columns: []string{scorecard.CertificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCertificationsIDs(); len(nodes) > 0 && !su.mutation.CertificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scorecard.CertificationsTable,
			Columns: []string{scorecard.CertificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CertificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scorecard.CertificationsTable,
			Columns: []string{scorecard.CertificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scorecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScorecardUpdateOne is the builder for updating a single Scorecard entity.
type ScorecardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScorecardMutation
}

// SetChecks sets the "checks" field.
func (suo *ScorecardUpdateOne) SetChecks(mc []*model.ScorecardCheck) *ScorecardUpdateOne {
	suo.mutation.SetChecks(mc)
	return suo
}

// AppendChecks appends mc to the "checks" field.
func (suo *ScorecardUpdateOne) AppendChecks(mc []*model.ScorecardCheck) *ScorecardUpdateOne {
	suo.mutation.AppendChecks(mc)
	return suo
}

// SetAggregateScore sets the "aggregate_score" field.
func (suo *ScorecardUpdateOne) SetAggregateScore(f float64) *ScorecardUpdateOne {
	suo.mutation.ResetAggregateScore()
	suo.mutation.SetAggregateScore(f)
	return suo
}

// SetNillableAggregateScore sets the "aggregate_score" field if the given value is not nil.
func (suo *ScorecardUpdateOne) SetNillableAggregateScore(f *float64) *ScorecardUpdateOne {
	if f != nil {
		suo.SetAggregateScore(*f)
	}
	return suo
}

// AddAggregateScore adds f to the "aggregate_score" field.
func (suo *ScorecardUpdateOne) AddAggregateScore(f float64) *ScorecardUpdateOne {
	suo.mutation.AddAggregateScore(f)
	return suo
}

// SetTimeScanned sets the "time_scanned" field.
func (suo *ScorecardUpdateOne) SetTimeScanned(t time.Time) *ScorecardUpdateOne {
	suo.mutation.SetTimeScanned(t)
	return suo
}

// SetNillableTimeScanned sets the "time_scanned" field if the given value is not nil.
func (suo *ScorecardUpdateOne) SetNillableTimeScanned(t *time.Time) *ScorecardUpdateOne {
	if t != nil {
		suo.SetTimeScanned(*t)
	}
	return suo
}

// SetScorecardVersion sets the "scorecard_version" field.
func (suo *ScorecardUpdateOne) SetScorecardVersion(s string) *ScorecardUpdateOne {
	suo.mutation.SetScorecardVersion(s)
	return suo
}

// SetNillableScorecardVersion sets the "scorecard_version" field if the given value is not nil.
func (suo *ScorecardUpdateOne) SetNillableScorecardVersion(s *string) *ScorecardUpdateOne {
	if s != nil {
		suo.SetScorecardVersion(*s)
	}
	return suo
}

// SetScorecardCommit sets the "scorecard_commit" field.
func (suo *ScorecardUpdateOne) SetScorecardCommit(s string) *ScorecardUpdateOne {
	suo.mutation.SetScorecardCommit(s)
	return suo
}

// SetNillableScorecardCommit sets the "scorecard_commit" field if the given value is not nil.
func (suo *ScorecardUpdateOne) SetNillableScorecardCommit(s *string) *ScorecardUpdateOne {
	if s != nil {
		suo.SetScorecardCommit(*s)
	}
	return suo
}

// SetOrigin sets the "origin" field.
func (suo *ScorecardUpdateOne) SetOrigin(s string) *ScorecardUpdateOne {
	suo.mutation.SetOrigin(s)
	return suo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (suo *ScorecardUpdateOne) SetNillableOrigin(s *string) *ScorecardUpdateOne {
	if s != nil {
		suo.SetOrigin(*s)
	}
	return suo
}

// SetCollector sets the "collector" field.
func (suo *ScorecardUpdateOne) SetCollector(s string) *ScorecardUpdateOne {
	suo.mutation.SetCollector(s)
	return suo
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (suo *ScorecardUpdateOne) SetNillableCollector(s *string) *ScorecardUpdateOne {
	if s != nil {
		suo.SetCollector(*s)
	}
	return suo
}

// AddCertificationIDs adds the "certifications" edge to the CertifyScorecard entity by IDs.
func (suo *ScorecardUpdateOne) AddCertificationIDs(ids ...int) *ScorecardUpdateOne {
	suo.mutation.AddCertificationIDs(ids...)
	return suo
}

// AddCertifications adds the "certifications" edges to the CertifyScorecard entity.
func (suo *ScorecardUpdateOne) AddCertifications(c ...*CertifyScorecard) *ScorecardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCertificationIDs(ids...)
}

// Mutation returns the ScorecardMutation object of the builder.
func (suo *ScorecardUpdateOne) Mutation() *ScorecardMutation {
	return suo.mutation
}

// ClearCertifications clears all "certifications" edges to the CertifyScorecard entity.
func (suo *ScorecardUpdateOne) ClearCertifications() *ScorecardUpdateOne {
	suo.mutation.ClearCertifications()
	return suo
}

// RemoveCertificationIDs removes the "certifications" edge to CertifyScorecard entities by IDs.
func (suo *ScorecardUpdateOne) RemoveCertificationIDs(ids ...int) *ScorecardUpdateOne {
	suo.mutation.RemoveCertificationIDs(ids...)
	return suo
}

// RemoveCertifications removes "certifications" edges to CertifyScorecard entities.
func (suo *ScorecardUpdateOne) RemoveCertifications(c ...*CertifyScorecard) *ScorecardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCertificationIDs(ids...)
}

// Where appends a list predicates to the ScorecardUpdate builder.
func (suo *ScorecardUpdateOne) Where(ps ...predicate.Scorecard) *ScorecardUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScorecardUpdateOne) Select(field string, fields ...string) *ScorecardUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Scorecard entity.
func (suo *ScorecardUpdateOne) Save(ctx context.Context) (*Scorecard, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScorecardUpdateOne) SaveX(ctx context.Context) *Scorecard {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScorecardUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScorecardUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScorecardUpdateOne) sqlSave(ctx context.Context) (_node *Scorecard, err error) {
	_spec := sqlgraph.NewUpdateSpec(scorecard.Table, scorecard.Columns, sqlgraph.NewFieldSpec(scorecard.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Scorecard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scorecard.FieldID)
		for _, f := range fields {
			if !scorecard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scorecard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Checks(); ok {
		_spec.SetField(scorecard.FieldChecks, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedChecks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scorecard.FieldChecks, value)
		})
	}
	if value, ok := suo.mutation.AggregateScore(); ok {
		_spec.SetField(scorecard.FieldAggregateScore, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedAggregateScore(); ok {
		_spec.AddField(scorecard.FieldAggregateScore, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.TimeScanned(); ok {
		_spec.SetField(scorecard.FieldTimeScanned, field.TypeTime, value)
	}
	if value, ok := suo.mutation.ScorecardVersion(); ok {
		_spec.SetField(scorecard.FieldScorecardVersion, field.TypeString, value)
	}
	if value, ok := suo.mutation.ScorecardCommit(); ok {
		_spec.SetField(scorecard.FieldScorecardCommit, field.TypeString, value)
	}
	if value, ok := suo.mutation.Origin(); ok {
		_spec.SetField(scorecard.FieldOrigin, field.TypeString, value)
	}
	if value, ok := suo.mutation.Collector(); ok {
		_spec.SetField(scorecard.FieldCollector, field.TypeString, value)
	}
	if suo.mutation.CertificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scorecard.CertificationsTable,
			Columns: []string{scorecard.CertificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCertificationsIDs(); len(nodes) > 0 && !suo.mutation.CertificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scorecard.CertificationsTable,
			Columns: []string{scorecard.CertificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CertificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scorecard.CertificationsTable,
			Columns: []string{scorecard.CertificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyscorecard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Scorecard{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scorecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

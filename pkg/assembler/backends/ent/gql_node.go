// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	"github.com/99designs/gqlgen/graphql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/builder"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifylegal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvuln"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/dependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hassourceat"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isvulnerability"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/license"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagetype"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pkgequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/scorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcetype"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
	"github.com/hashicorp/go-multierror"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	IsNode()
}

// IsNode implements the Node interface check for GQLGen.
func (n *Artifact) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *BillOfMaterials) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Builder) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Certification) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *CertifyLegal) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *CertifyScorecard) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *CertifyVex) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *CertifyVuln) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Dependency) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *HasSourceAt) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *HashEqual) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *IsVulnerability) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *License) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Occurrence) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PackageName) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PackageNamespace) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PackageType) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PackageVersion) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PkgEqual) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *SLSAAttestation) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Scorecard) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *SourceName) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *SourceNamespace) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *SourceType) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *VulnEqual) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *VulnerabilityID) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *VulnerabilityType) IsNode() {}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, int) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, int) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, int) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id int) (string, error) {
			return c.tables.nodeType(ctx, c.driver, id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id int, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id int) (Noder, error) {
	switch table {
	case artifact.Table:
		query := c.Artifact.Query().
			Where(artifact.ID(id))
		query, err := query.CollectFields(ctx, "Artifact")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case billofmaterials.Table:
		query := c.BillOfMaterials.Query().
			Where(billofmaterials.ID(id))
		query, err := query.CollectFields(ctx, "BillOfMaterials")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case builder.Table:
		query := c.Builder.Query().
			Where(builder.ID(id))
		query, err := query.CollectFields(ctx, "Builder")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case certification.Table:
		query := c.Certification.Query().
			Where(certification.ID(id))
		query, err := query.CollectFields(ctx, "Certification")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case certifylegal.Table:
		query := c.CertifyLegal.Query().
			Where(certifylegal.ID(id))
		query, err := query.CollectFields(ctx, "CertifyLegal")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case certifyscorecard.Table:
		query := c.CertifyScorecard.Query().
			Where(certifyscorecard.ID(id))
		query, err := query.CollectFields(ctx, "CertifyScorecard")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case certifyvex.Table:
		query := c.CertifyVex.Query().
			Where(certifyvex.ID(id))
		query, err := query.CollectFields(ctx, "CertifyVex")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case certifyvuln.Table:
		query := c.CertifyVuln.Query().
			Where(certifyvuln.ID(id))
		query, err := query.CollectFields(ctx, "CertifyVuln")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case dependency.Table:
		query := c.Dependency.Query().
			Where(dependency.ID(id))
		query, err := query.CollectFields(ctx, "Dependency")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case hassourceat.Table:
		query := c.HasSourceAt.Query().
			Where(hassourceat.ID(id))
		query, err := query.CollectFields(ctx, "HasSourceAt")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case hashequal.Table:
		query := c.HashEqual.Query().
			Where(hashequal.ID(id))
		query, err := query.CollectFields(ctx, "HashEqual")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case isvulnerability.Table:
		query := c.IsVulnerability.Query().
			Where(isvulnerability.ID(id))
		query, err := query.CollectFields(ctx, "IsVulnerability")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case license.Table:
		query := c.License.Query().
			Where(license.ID(id))
		query, err := query.CollectFields(ctx, "License")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case occurrence.Table:
		query := c.Occurrence.Query().
			Where(occurrence.ID(id))
		query, err := query.CollectFields(ctx, "Occurrence")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case packagename.Table:
		query := c.PackageName.Query().
			Where(packagename.ID(id))
		query, err := query.CollectFields(ctx, "PackageName")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case packagenamespace.Table:
		query := c.PackageNamespace.Query().
			Where(packagenamespace.ID(id))
		query, err := query.CollectFields(ctx, "PackageNamespace")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case packagetype.Table:
		query := c.PackageType.Query().
			Where(packagetype.ID(id))
		query, err := query.CollectFields(ctx, "PackageType")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case packageversion.Table:
		query := c.PackageVersion.Query().
			Where(packageversion.ID(id))
		query, err := query.CollectFields(ctx, "PackageVersion")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case pkgequal.Table:
		query := c.PkgEqual.Query().
			Where(pkgequal.ID(id))
		query, err := query.CollectFields(ctx, "PkgEqual")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case slsaattestation.Table:
		query := c.SLSAAttestation.Query().
			Where(slsaattestation.ID(id))
		query, err := query.CollectFields(ctx, "SLSAAttestation")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case scorecard.Table:
		query := c.Scorecard.Query().
			Where(scorecard.ID(id))
		query, err := query.CollectFields(ctx, "Scorecard")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case sourcename.Table:
		query := c.SourceName.Query().
			Where(sourcename.ID(id))
		query, err := query.CollectFields(ctx, "SourceName")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case sourcenamespace.Table:
		query := c.SourceNamespace.Query().
			Where(sourcenamespace.ID(id))
		query, err := query.CollectFields(ctx, "SourceNamespace")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case sourcetype.Table:
		query := c.SourceType.Query().
			Where(sourcetype.ID(id))
		query, err := query.CollectFields(ctx, "SourceType")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vulnequal.Table:
		query := c.VulnEqual.Query().
			Where(vulnequal.ID(id))
		query, err := query.CollectFields(ctx, "VulnEqual")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vulnerabilityid.Table:
		query := c.VulnerabilityID.Query().
			Where(vulnerabilityid.ID(id))
		query, err := query.CollectFields(ctx, "VulnerabilityID")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vulnerabilitytype.Table:
		query := c.VulnerabilityType.Query().
			Where(vulnerabilitytype.ID(id))
		query, err := query.CollectFields(ctx, "VulnerabilityType")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []int, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int)
	id2idx := make(map[int][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []int) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[int][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case artifact.Table:
		query := c.Artifact.Query().
			Where(artifact.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Artifact")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case billofmaterials.Table:
		query := c.BillOfMaterials.Query().
			Where(billofmaterials.IDIn(ids...))
		query, err := query.CollectFields(ctx, "BillOfMaterials")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case builder.Table:
		query := c.Builder.Query().
			Where(builder.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Builder")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case certification.Table:
		query := c.Certification.Query().
			Where(certification.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Certification")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case certifylegal.Table:
		query := c.CertifyLegal.Query().
			Where(certifylegal.IDIn(ids...))
		query, err := query.CollectFields(ctx, "CertifyLegal")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case certifyscorecard.Table:
		query := c.CertifyScorecard.Query().
			Where(certifyscorecard.IDIn(ids...))
		query, err := query.CollectFields(ctx, "CertifyScorecard")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case certifyvex.Table:
		query := c.CertifyVex.Query().
			Where(certifyvex.IDIn(ids...))
		query, err := query.CollectFields(ctx, "CertifyVex")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case certifyvuln.Table:
		query := c.CertifyVuln.Query().
			Where(certifyvuln.IDIn(ids...))
		query, err := query.CollectFields(ctx, "CertifyVuln")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case dependency.Table:
		query := c.Dependency.Query().
			Where(dependency.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Dependency")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case hassourceat.Table:
		query := c.HasSourceAt.Query().
			Where(hassourceat.IDIn(ids...))
		query, err := query.CollectFields(ctx, "HasSourceAt")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case hashequal.Table:
		query := c.HashEqual.Query().
			Where(hashequal.IDIn(ids...))
		query, err := query.CollectFields(ctx, "HashEqual")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case isvulnerability.Table:
		query := c.IsVulnerability.Query().
			Where(isvulnerability.IDIn(ids...))
		query, err := query.CollectFields(ctx, "IsVulnerability")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case license.Table:
		query := c.License.Query().
			Where(license.IDIn(ids...))
		query, err := query.CollectFields(ctx, "License")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case occurrence.Table:
		query := c.Occurrence.Query().
			Where(occurrence.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Occurrence")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case packagename.Table:
		query := c.PackageName.Query().
			Where(packagename.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PackageName")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case packagenamespace.Table:
		query := c.PackageNamespace.Query().
			Where(packagenamespace.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PackageNamespace")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case packagetype.Table:
		query := c.PackageType.Query().
			Where(packagetype.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PackageType")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case packageversion.Table:
		query := c.PackageVersion.Query().
			Where(packageversion.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PackageVersion")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case pkgequal.Table:
		query := c.PkgEqual.Query().
			Where(pkgequal.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PkgEqual")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case slsaattestation.Table:
		query := c.SLSAAttestation.Query().
			Where(slsaattestation.IDIn(ids...))
		query, err := query.CollectFields(ctx, "SLSAAttestation")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case scorecard.Table:
		query := c.Scorecard.Query().
			Where(scorecard.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Scorecard")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case sourcename.Table:
		query := c.SourceName.Query().
			Where(sourcename.IDIn(ids...))
		query, err := query.CollectFields(ctx, "SourceName")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case sourcenamespace.Table:
		query := c.SourceNamespace.Query().
			Where(sourcenamespace.IDIn(ids...))
		query, err := query.CollectFields(ctx, "SourceNamespace")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case sourcetype.Table:
		query := c.SourceType.Query().
			Where(sourcetype.IDIn(ids...))
		query, err := query.CollectFields(ctx, "SourceType")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vulnequal.Table:
		query := c.VulnEqual.Query().
			Where(vulnequal.IDIn(ids...))
		query, err := query.CollectFields(ctx, "VulnEqual")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vulnerabilityid.Table:
		query := c.VulnerabilityID.Query().
			Where(vulnerabilityid.IDIn(ids...))
		query, err := query.CollectFields(ctx, "VulnerabilityID")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vulnerabilitytype.Table:
		query := c.VulnerabilityType.Query().
			Where(vulnerabilitytype.IDIn(ids...))
		query, err := query.CollectFields(ctx, "VulnerabilityType")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (*tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}

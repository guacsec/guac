// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hasmetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// HasMetadata is the model entity for the HasMetadata schema.
type HasMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID *int `json:"source_id,omitempty"`
	// PackageVersionID holds the value of the "package_version_id" field.
	PackageVersionID *int `json:"package_version_id,omitempty"`
	// PackageNameID holds the value of the "package_name_id" field.
	PackageNameID *int `json:"package_name_id,omitempty"`
	// ArtifactID holds the value of the "artifact_id" field.
	ArtifactID *int `json:"artifact_id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HasMetadataQuery when eager-loading is set.
	Edges        HasMetadataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HasMetadataEdges holds the relations/edges for other nodes in the graph.
type HasMetadataEdges struct {
	// Source holds the value of the source edge.
	Source *SourceName `json:"source,omitempty"`
	// PackageVersion holds the value of the package_version edge.
	PackageVersion *PackageVersion `json:"package_version,omitempty"`
	// AllVersions holds the value of the all_versions edge.
	AllVersions *PackageName `json:"all_versions,omitempty"`
	// Artifact holds the value of the artifact edge.
	Artifact *Artifact `json:"artifact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HasMetadataEdges) SourceOrErr() (*SourceName, error) {
	if e.loadedTypes[0] {
		if e.Source == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sourcename.Label}
		}
		return e.Source, nil
	}
	return nil, &NotLoadedError{edge: "source"}
}

// PackageVersionOrErr returns the PackageVersion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HasMetadataEdges) PackageVersionOrErr() (*PackageVersion, error) {
	if e.loadedTypes[1] {
		if e.PackageVersion == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.PackageVersion, nil
	}
	return nil, &NotLoadedError{edge: "package_version"}
}

// AllVersionsOrErr returns the AllVersions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HasMetadataEdges) AllVersionsOrErr() (*PackageName, error) {
	if e.loadedTypes[2] {
		if e.AllVersions == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packagename.Label}
		}
		return e.AllVersions, nil
	}
	return nil, &NotLoadedError{edge: "all_versions"}
}

// ArtifactOrErr returns the Artifact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HasMetadataEdges) ArtifactOrErr() (*Artifact, error) {
	if e.loadedTypes[3] {
		if e.Artifact == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: artifact.Label}
		}
		return e.Artifact, nil
	}
	return nil, &NotLoadedError{edge: "artifact"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HasMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hasmetadata.FieldID, hasmetadata.FieldSourceID, hasmetadata.FieldPackageVersionID, hasmetadata.FieldPackageNameID, hasmetadata.FieldArtifactID:
			values[i] = new(sql.NullInt64)
		case hasmetadata.FieldKey, hasmetadata.FieldValue, hasmetadata.FieldJustification, hasmetadata.FieldOrigin, hasmetadata.FieldCollector:
			values[i] = new(sql.NullString)
		case hasmetadata.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HasMetadata fields.
func (hm *HasMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hasmetadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hm.ID = int(value.Int64)
		case hasmetadata.FieldSourceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_id", values[i])
			} else if value.Valid {
				hm.SourceID = new(int)
				*hm.SourceID = int(value.Int64)
			}
		case hasmetadata.FieldPackageVersionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_version_id", values[i])
			} else if value.Valid {
				hm.PackageVersionID = new(int)
				*hm.PackageVersionID = int(value.Int64)
			}
		case hasmetadata.FieldPackageNameID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_name_id", values[i])
			} else if value.Valid {
				hm.PackageNameID = new(int)
				*hm.PackageNameID = int(value.Int64)
			}
		case hasmetadata.FieldArtifactID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field artifact_id", values[i])
			} else if value.Valid {
				hm.ArtifactID = new(int)
				*hm.ArtifactID = int(value.Int64)
			}
		case hasmetadata.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				hm.Timestamp = value.Time
			}
		case hasmetadata.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				hm.Key = value.String
			}
		case hasmetadata.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				hm.Value = value.String
			}
		case hasmetadata.FieldJustification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field justification", values[i])
			} else if value.Valid {
				hm.Justification = value.String
			}
		case hasmetadata.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				hm.Origin = value.String
			}
		case hasmetadata.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				hm.Collector = value.String
			}
		default:
			hm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the HasMetadata.
// This includes values selected through modifiers, order, etc.
func (hm *HasMetadata) GetValue(name string) (ent.Value, error) {
	return hm.selectValues.Get(name)
}

// QuerySource queries the "source" edge of the HasMetadata entity.
func (hm *HasMetadata) QuerySource() *SourceNameQuery {
	return NewHasMetadataClient(hm.config).QuerySource(hm)
}

// QueryPackageVersion queries the "package_version" edge of the HasMetadata entity.
func (hm *HasMetadata) QueryPackageVersion() *PackageVersionQuery {
	return NewHasMetadataClient(hm.config).QueryPackageVersion(hm)
}

// QueryAllVersions queries the "all_versions" edge of the HasMetadata entity.
func (hm *HasMetadata) QueryAllVersions() *PackageNameQuery {
	return NewHasMetadataClient(hm.config).QueryAllVersions(hm)
}

// QueryArtifact queries the "artifact" edge of the HasMetadata entity.
func (hm *HasMetadata) QueryArtifact() *ArtifactQuery {
	return NewHasMetadataClient(hm.config).QueryArtifact(hm)
}

// Update returns a builder for updating this HasMetadata.
// Note that you need to call HasMetadata.Unwrap() before calling this method if this HasMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (hm *HasMetadata) Update() *HasMetadataUpdateOne {
	return NewHasMetadataClient(hm.config).UpdateOne(hm)
}

// Unwrap unwraps the HasMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hm *HasMetadata) Unwrap() *HasMetadata {
	_tx, ok := hm.config.driver.(*txDriver)
	if !ok {
		panic("ent: HasMetadata is not a transactional entity")
	}
	hm.config.driver = _tx.drv
	return hm
}

// String implements the fmt.Stringer.
func (hm *HasMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("HasMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hm.ID))
	if v := hm.SourceID; v != nil {
		builder.WriteString("source_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hm.PackageVersionID; v != nil {
		builder.WriteString("package_version_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hm.PackageNameID; v != nil {
		builder.WriteString("package_name_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hm.ArtifactID; v != nil {
		builder.WriteString("artifact_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(hm.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(hm.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(hm.Value)
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(hm.Justification)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(hm.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(hm.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// HasMetadataSlice is a parsable slice of HasMetadata.
type HasMetadataSlice []*HasMetadata

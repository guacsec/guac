// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
)

// SLSAAttestationDelete is the builder for deleting a SLSAAttestation entity.
type SLSAAttestationDelete struct {
	config
	hooks    []Hook
	mutation *SLSAAttestationMutation
}

// Where appends a list predicates to the SLSAAttestationDelete builder.
func (sad *SLSAAttestationDelete) Where(ps ...predicate.SLSAAttestation) *SLSAAttestationDelete {
	sad.mutation.Where(ps...)
	return sad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sad *SLSAAttestationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sad.sqlExec, sad.mutation, sad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sad *SLSAAttestationDelete) ExecX(ctx context.Context) int {
	n, err := sad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sad *SLSAAttestationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(slsaattestation.Table, sqlgraph.NewFieldSpec(slsaattestation.FieldID, field.TypeInt))
	if ps := sad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sad.mutation.done = true
	return affected, err
}

// SLSAAttestationDeleteOne is the builder for deleting a single SLSAAttestation entity.
type SLSAAttestationDeleteOne struct {
	sad *SLSAAttestationDelete
}

// Where appends a list predicates to the SLSAAttestationDelete builder.
func (sado *SLSAAttestationDeleteOne) Where(ps ...predicate.SLSAAttestation) *SLSAAttestationDeleteOne {
	sado.sad.mutation.Where(ps...)
	return sado
}

// Exec executes the deletion query.
func (sado *SLSAAttestationDeleteOne) Exec(ctx context.Context) error {
	n, err := sado.sad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{slsaattestation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sado *SLSAAttestationDeleteOne) ExecX(ctx context.Context) {
	if err := sado.Exec(ctx); err != nil {
		panic(err)
	}
}

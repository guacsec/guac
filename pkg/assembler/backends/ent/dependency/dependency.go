// Code generated by ent, DO NOT EDIT.

package dependency

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dependency type in the database.
	Label = "dependency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPackageID holds the string denoting the package_id field in the database.
	FieldPackageID = "package_id"
	// FieldDependentPackageNameID holds the string denoting the dependent_package_name_id field in the database.
	FieldDependentPackageNameID = "dependent_package_name_id"
	// FieldDependentPackageVersionID holds the string denoting the dependent_package_version_id field in the database.
	FieldDependentPackageVersionID = "dependent_package_version_id"
	// FieldVersionRange holds the string denoting the version_range field in the database.
	FieldVersionRange = "version_range"
	// FieldDependencyType holds the string denoting the dependency_type field in the database.
	FieldDependencyType = "dependency_type"
	// FieldJustification holds the string denoting the justification field in the database.
	FieldJustification = "justification"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// EdgePackage holds the string denoting the package edge name in mutations.
	EdgePackage = "package"
	// EdgeDependentPackageName holds the string denoting the dependent_package_name edge name in mutations.
	EdgeDependentPackageName = "dependent_package_name"
	// EdgeDependentPackageVersion holds the string denoting the dependent_package_version edge name in mutations.
	EdgeDependentPackageVersion = "dependent_package_version"
	// Table holds the table name of the dependency in the database.
	Table = "dependencies"
	// PackageTable is the table that holds the package relation/edge.
	PackageTable = "dependencies"
	// PackageInverseTable is the table name for the PackageVersion entity.
	// It exists in this package in order to avoid circular dependency with the "packageversion" package.
	PackageInverseTable = "package_versions"
	// PackageColumn is the table column denoting the package relation/edge.
	PackageColumn = "package_id"
	// DependentPackageNameTable is the table that holds the dependent_package_name relation/edge.
	DependentPackageNameTable = "dependencies"
	// DependentPackageNameInverseTable is the table name for the PackageName entity.
	// It exists in this package in order to avoid circular dependency with the "packagename" package.
	DependentPackageNameInverseTable = "package_names"
	// DependentPackageNameColumn is the table column denoting the dependent_package_name relation/edge.
	DependentPackageNameColumn = "dependent_package_name_id"
	// DependentPackageVersionTable is the table that holds the dependent_package_version relation/edge.
	DependentPackageVersionTable = "dependencies"
	// DependentPackageVersionInverseTable is the table name for the PackageVersion entity.
	// It exists in this package in order to avoid circular dependency with the "packageversion" package.
	DependentPackageVersionInverseTable = "package_versions"
	// DependentPackageVersionColumn is the table column denoting the dependent_package_version relation/edge.
	DependentPackageVersionColumn = "dependent_package_version_id"
)

// Columns holds all SQL columns for dependency fields.
var Columns = []string{
	FieldID,
	FieldPackageID,
	FieldDependentPackageNameID,
	FieldDependentPackageVersionID,
	FieldVersionRange,
	FieldDependencyType,
	FieldJustification,
	FieldOrigin,
	FieldCollector,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// DependencyType defines the type for the "dependency_type" enum field.
type DependencyType string

// DependencyType values.
const (
	DependencyTypeDIRECT   DependencyType = "DIRECT"
	DependencyTypeINDIRECT DependencyType = "INDIRECT"
	DependencyTypeUNKNOWN  DependencyType = "UNKNOWN"
)

func (dt DependencyType) String() string {
	return string(dt)
}

// DependencyTypeValidator is a validator for the "dependency_type" field enum values. It is called by the builders before save.
func DependencyTypeValidator(dt DependencyType) error {
	switch dt {
	case DependencyTypeDIRECT, DependencyTypeINDIRECT, DependencyTypeUNKNOWN:
		return nil
	default:
		return fmt.Errorf("dependency: invalid enum value for dependency_type field: %q", dt)
	}
}

// OrderOption defines the ordering options for the Dependency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPackageID orders the results by the package_id field.
func ByPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageID, opts...).ToFunc()
}

// ByDependentPackageNameID orders the results by the dependent_package_name_id field.
func ByDependentPackageNameID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependentPackageNameID, opts...).ToFunc()
}

// ByDependentPackageVersionID orders the results by the dependent_package_version_id field.
func ByDependentPackageVersionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependentPackageVersionID, opts...).ToFunc()
}

// ByVersionRange orders the results by the version_range field.
func ByVersionRange(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersionRange, opts...).ToFunc()
}

// ByDependencyType orders the results by the dependency_type field.
func ByDependencyType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependencyType, opts...).ToFunc()
}

// ByJustification orders the results by the justification field.
func ByJustification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJustification, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByPackageField orders the results by package field.
func ByPackageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackageStep(), sql.OrderByField(field, opts...))
	}
}

// ByDependentPackageNameField orders the results by dependent_package_name field.
func ByDependentPackageNameField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependentPackageNameStep(), sql.OrderByField(field, opts...))
	}
}

// ByDependentPackageVersionField orders the results by dependent_package_version field.
func ByDependentPackageVersionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependentPackageVersionStep(), sql.OrderByField(field, opts...))
	}
}
func newPackageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackageTable, PackageColumn),
	)
}
func newDependentPackageNameStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependentPackageNameInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DependentPackageNameTable, DependentPackageNameColumn),
	)
}
func newDependentPackageVersionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependentPackageVersionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DependentPackageVersionTable, DependentPackageVersionColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e DependencyType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *DependencyType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = DependencyType(str)
	if err := DependencyTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid DependencyType", str)
	}
	return nil
}

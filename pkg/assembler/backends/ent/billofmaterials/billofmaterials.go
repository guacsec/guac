// Code generated by ent, DO NOT EDIT.

package billofmaterials

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the billofmaterials type in the database.
	Label = "bill_of_materials"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPackageID holds the string denoting the package_id field in the database.
	FieldPackageID = "package_id"
	// FieldArtifactID holds the string denoting the artifact_id field in the database.
	FieldArtifactID = "artifact_id"
	// FieldURI holds the string denoting the uri field in the database.
	FieldURI = "uri"
	// FieldAlgorithm holds the string denoting the algorithm field in the database.
	FieldAlgorithm = "algorithm"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// FieldDownloadLocation holds the string denoting the download_location field in the database.
	FieldDownloadLocation = "download_location"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldCollector holds the string denoting the collector field in the database.
	FieldCollector = "collector"
	// FieldDocumentRef holds the string denoting the document_ref field in the database.
	FieldDocumentRef = "document_ref"
	// FieldKnownSince holds the string denoting the known_since field in the database.
	FieldKnownSince = "known_since"
	// FieldIncludedPackagesHash holds the string denoting the included_packages_hash field in the database.
	FieldIncludedPackagesHash = "included_packages_hash"
	// FieldIncludedArtifactsHash holds the string denoting the included_artifacts_hash field in the database.
	FieldIncludedArtifactsHash = "included_artifacts_hash"
	// FieldIncludedDependenciesHash holds the string denoting the included_dependencies_hash field in the database.
	FieldIncludedDependenciesHash = "included_dependencies_hash"
	// FieldIncludedOccurrencesHash holds the string denoting the included_occurrences_hash field in the database.
	FieldIncludedOccurrencesHash = "included_occurrences_hash"
	// EdgePackage holds the string denoting the package edge name in mutations.
	EdgePackage = "package"
	// EdgeArtifact holds the string denoting the artifact edge name in mutations.
	EdgeArtifact = "artifact"
	// EdgeIncludedSoftwarePackages holds the string denoting the included_software_packages edge name in mutations.
	EdgeIncludedSoftwarePackages = "included_software_packages"
	// EdgeIncludedSoftwareArtifacts holds the string denoting the included_software_artifacts edge name in mutations.
	EdgeIncludedSoftwareArtifacts = "included_software_artifacts"
	// EdgeIncludedDependencies holds the string denoting the included_dependencies edge name in mutations.
	EdgeIncludedDependencies = "included_dependencies"
	// EdgeIncludedOccurrences holds the string denoting the included_occurrences edge name in mutations.
	EdgeIncludedOccurrences = "included_occurrences"
	// Table holds the table name of the billofmaterials in the database.
	Table = "bill_of_materials"
	// PackageTable is the table that holds the package relation/edge.
	PackageTable = "bill_of_materials"
	// PackageInverseTable is the table name for the PackageVersion entity.
	// It exists in this package in order to avoid circular dependency with the "packageversion" package.
	PackageInverseTable = "package_versions"
	// PackageColumn is the table column denoting the package relation/edge.
	PackageColumn = "package_id"
	// ArtifactTable is the table that holds the artifact relation/edge.
	ArtifactTable = "bill_of_materials"
	// ArtifactInverseTable is the table name for the Artifact entity.
	// It exists in this package in order to avoid circular dependency with the "artifact" package.
	ArtifactInverseTable = "artifacts"
	// ArtifactColumn is the table column denoting the artifact relation/edge.
	ArtifactColumn = "artifact_id"
	// IncludedSoftwarePackagesTable is the table that holds the included_software_packages relation/edge. The primary key declared below.
	IncludedSoftwarePackagesTable = "bill_of_materials_included_software_packages"
	// IncludedSoftwarePackagesInverseTable is the table name for the PackageVersion entity.
	// It exists in this package in order to avoid circular dependency with the "packageversion" package.
	IncludedSoftwarePackagesInverseTable = "package_versions"
	// IncludedSoftwareArtifactsTable is the table that holds the included_software_artifacts relation/edge. The primary key declared below.
	IncludedSoftwareArtifactsTable = "bill_of_materials_included_software_artifacts"
	// IncludedSoftwareArtifactsInverseTable is the table name for the Artifact entity.
	// It exists in this package in order to avoid circular dependency with the "artifact" package.
	IncludedSoftwareArtifactsInverseTable = "artifacts"
	// IncludedDependenciesTable is the table that holds the included_dependencies relation/edge. The primary key declared below.
	IncludedDependenciesTable = "bill_of_materials_included_dependencies"
	// IncludedDependenciesInverseTable is the table name for the Dependency entity.
	// It exists in this package in order to avoid circular dependency with the "dependency" package.
	IncludedDependenciesInverseTable = "dependencies"
	// IncludedOccurrencesTable is the table that holds the included_occurrences relation/edge. The primary key declared below.
	IncludedOccurrencesTable = "bill_of_materials_included_occurrences"
	// IncludedOccurrencesInverseTable is the table name for the Occurrence entity.
	// It exists in this package in order to avoid circular dependency with the "occurrence" package.
	IncludedOccurrencesInverseTable = "occurrences"
)

// Columns holds all SQL columns for billofmaterials fields.
var Columns = []string{
	FieldID,
	FieldPackageID,
	FieldArtifactID,
	FieldURI,
	FieldAlgorithm,
	FieldDigest,
	FieldDownloadLocation,
	FieldOrigin,
	FieldCollector,
	FieldDocumentRef,
	FieldKnownSince,
	FieldIncludedPackagesHash,
	FieldIncludedArtifactsHash,
	FieldIncludedDependenciesHash,
	FieldIncludedOccurrencesHash,
}

var (
	// IncludedSoftwarePackagesPrimaryKey and IncludedSoftwarePackagesColumn2 are the table columns denoting the
	// primary key for the included_software_packages relation (M2M).
	IncludedSoftwarePackagesPrimaryKey = []string{"bill_of_materials_id", "package_version_id"}
	// IncludedSoftwareArtifactsPrimaryKey and IncludedSoftwareArtifactsColumn2 are the table columns denoting the
	// primary key for the included_software_artifacts relation (M2M).
	IncludedSoftwareArtifactsPrimaryKey = []string{"bill_of_materials_id", "artifact_id"}
	// IncludedDependenciesPrimaryKey and IncludedDependenciesColumn2 are the table columns denoting the
	// primary key for the included_dependencies relation (M2M).
	IncludedDependenciesPrimaryKey = []string{"bill_of_materials_id", "dependency_id"}
	// IncludedOccurrencesPrimaryKey and IncludedOccurrencesColumn2 are the table columns denoting the
	// primary key for the included_occurrences relation (M2M).
	IncludedOccurrencesPrimaryKey = []string{"bill_of_materials_id", "occurrence_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the BillOfMaterials queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPackageID orders the results by the package_id field.
func ByPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageID, opts...).ToFunc()
}

// ByArtifactID orders the results by the artifact_id field.
func ByArtifactID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtifactID, opts...).ToFunc()
}

// ByURI orders the results by the uri field.
func ByURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURI, opts...).ToFunc()
}

// ByAlgorithm orders the results by the algorithm field.
func ByAlgorithm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgorithm, opts...).ToFunc()
}

// ByDigest orders the results by the digest field.
func ByDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDigest, opts...).ToFunc()
}

// ByDownloadLocation orders the results by the download_location field.
func ByDownloadLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadLocation, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByCollector orders the results by the collector field.
func ByCollector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollector, opts...).ToFunc()
}

// ByDocumentRef orders the results by the document_ref field.
func ByDocumentRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentRef, opts...).ToFunc()
}

// ByKnownSince orders the results by the known_since field.
func ByKnownSince(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKnownSince, opts...).ToFunc()
}

// ByIncludedPackagesHash orders the results by the included_packages_hash field.
func ByIncludedPackagesHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncludedPackagesHash, opts...).ToFunc()
}

// ByIncludedArtifactsHash orders the results by the included_artifacts_hash field.
func ByIncludedArtifactsHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncludedArtifactsHash, opts...).ToFunc()
}

// ByIncludedDependenciesHash orders the results by the included_dependencies_hash field.
func ByIncludedDependenciesHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncludedDependenciesHash, opts...).ToFunc()
}

// ByIncludedOccurrencesHash orders the results by the included_occurrences_hash field.
func ByIncludedOccurrencesHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncludedOccurrencesHash, opts...).ToFunc()
}

// ByPackageField orders the results by package field.
func ByPackageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackageStep(), sql.OrderByField(field, opts...))
	}
}

// ByArtifactField orders the results by artifact field.
func ByArtifactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtifactStep(), sql.OrderByField(field, opts...))
	}
}

// ByIncludedSoftwarePackagesCount orders the results by included_software_packages count.
func ByIncludedSoftwarePackagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncludedSoftwarePackagesStep(), opts...)
	}
}

// ByIncludedSoftwarePackages orders the results by included_software_packages terms.
func ByIncludedSoftwarePackages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncludedSoftwarePackagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncludedSoftwareArtifactsCount orders the results by included_software_artifacts count.
func ByIncludedSoftwareArtifactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncludedSoftwareArtifactsStep(), opts...)
	}
}

// ByIncludedSoftwareArtifacts orders the results by included_software_artifacts terms.
func ByIncludedSoftwareArtifacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncludedSoftwareArtifactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncludedDependenciesCount orders the results by included_dependencies count.
func ByIncludedDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncludedDependenciesStep(), opts...)
	}
}

// ByIncludedDependencies orders the results by included_dependencies terms.
func ByIncludedDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncludedDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncludedOccurrencesCount orders the results by included_occurrences count.
func ByIncludedOccurrencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncludedOccurrencesStep(), opts...)
	}
}

// ByIncludedOccurrences orders the results by included_occurrences terms.
func ByIncludedOccurrences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncludedOccurrencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPackageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackageTable, PackageColumn),
	)
}
func newArtifactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtifactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ArtifactTable, ArtifactColumn),
	)
}
func newIncludedSoftwarePackagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncludedSoftwarePackagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IncludedSoftwarePackagesTable, IncludedSoftwarePackagesPrimaryKey...),
	)
}
func newIncludedSoftwareArtifactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncludedSoftwareArtifactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IncludedSoftwareArtifactsTable, IncludedSoftwareArtifactsPrimaryKey...),
	)
}
func newIncludedDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncludedDependenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IncludedDependenciesTable, IncludedDependenciesPrimaryKey...),
	)
}
func newIncludedOccurrencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncludedOccurrencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IncludedOccurrencesTable, IncludedOccurrencesPrimaryKey...),
	)
}

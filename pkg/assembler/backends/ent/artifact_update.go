// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
)

// ArtifactUpdate is the builder for updating Artifact entities.
type ArtifactUpdate struct {
	config
	hooks    []Hook
	mutation *ArtifactMutation
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (au *ArtifactUpdate) Where(ps ...predicate.Artifact) *ArtifactUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAlgorithm sets the "algorithm" field.
func (au *ArtifactUpdate) SetAlgorithm(s string) *ArtifactUpdate {
	au.mutation.SetAlgorithm(s)
	return au
}

// SetNillableAlgorithm sets the "algorithm" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableAlgorithm(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetAlgorithm(*s)
	}
	return au
}

// SetDigest sets the "digest" field.
func (au *ArtifactUpdate) SetDigest(s string) *ArtifactUpdate {
	au.mutation.SetDigest(s)
	return au
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDigest(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetDigest(*s)
	}
	return au
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (au *ArtifactUpdate) AddOccurrenceIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddOccurrenceIDs(ids...)
	return au
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (au *ArtifactUpdate) AddOccurrences(o ...*Occurrence) *ArtifactUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOccurrenceIDs(ids...)
}

// AddSbomIDs adds the "sbom" edge to the BillOfMaterials entity by IDs.
func (au *ArtifactUpdate) AddSbomIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddSbomIDs(ids...)
	return au
}

// AddSbom adds the "sbom" edges to the BillOfMaterials entity.
func (au *ArtifactUpdate) AddSbom(b ...*BillOfMaterials) *ArtifactUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.AddSbomIDs(ids...)
}

// AddAttestationIDs adds the "attestations" edge to the SLSAAttestation entity by IDs.
func (au *ArtifactUpdate) AddAttestationIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddAttestationIDs(ids...)
	return au
}

// AddAttestations adds the "attestations" edges to the SLSAAttestation entity.
func (au *ArtifactUpdate) AddAttestations(s ...*SLSAAttestation) *ArtifactUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddAttestationIDs(ids...)
}

// AddSameIDs adds the "same" edge to the HashEqual entity by IDs.
func (au *ArtifactUpdate) AddSameIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddSameIDs(ids...)
	return au
}

// AddSame adds the "same" edges to the HashEqual entity.
func (au *ArtifactUpdate) AddSame(h ...*HashEqual) *ArtifactUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return au.AddSameIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (au *ArtifactUpdate) Mutation() *ArtifactMutation {
	return au.mutation
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (au *ArtifactUpdate) ClearOccurrences() *ArtifactUpdate {
	au.mutation.ClearOccurrences()
	return au
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (au *ArtifactUpdate) RemoveOccurrenceIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveOccurrenceIDs(ids...)
	return au
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (au *ArtifactUpdate) RemoveOccurrences(o ...*Occurrence) *ArtifactUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOccurrenceIDs(ids...)
}

// ClearSbom clears all "sbom" edges to the BillOfMaterials entity.
func (au *ArtifactUpdate) ClearSbom() *ArtifactUpdate {
	au.mutation.ClearSbom()
	return au
}

// RemoveSbomIDs removes the "sbom" edge to BillOfMaterials entities by IDs.
func (au *ArtifactUpdate) RemoveSbomIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveSbomIDs(ids...)
	return au
}

// RemoveSbom removes "sbom" edges to BillOfMaterials entities.
func (au *ArtifactUpdate) RemoveSbom(b ...*BillOfMaterials) *ArtifactUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.RemoveSbomIDs(ids...)
}

// ClearAttestations clears all "attestations" edges to the SLSAAttestation entity.
func (au *ArtifactUpdate) ClearAttestations() *ArtifactUpdate {
	au.mutation.ClearAttestations()
	return au
}

// RemoveAttestationIDs removes the "attestations" edge to SLSAAttestation entities by IDs.
func (au *ArtifactUpdate) RemoveAttestationIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveAttestationIDs(ids...)
	return au
}

// RemoveAttestations removes "attestations" edges to SLSAAttestation entities.
func (au *ArtifactUpdate) RemoveAttestations(s ...*SLSAAttestation) *ArtifactUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveAttestationIDs(ids...)
}

// ClearSame clears all "same" edges to the HashEqual entity.
func (au *ArtifactUpdate) ClearSame() *ArtifactUpdate {
	au.mutation.ClearSame()
	return au
}

// RemoveSameIDs removes the "same" edge to HashEqual entities by IDs.
func (au *ArtifactUpdate) RemoveSameIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveSameIDs(ids...)
	return au
}

// RemoveSame removes "same" edges to HashEqual entities.
func (au *ArtifactUpdate) RemoveSame(h ...*HashEqual) *ArtifactUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return au.RemoveSameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArtifactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtifactUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtifactUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtifactUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ArtifactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(artifact.Table, artifact.Columns, sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Algorithm(); ok {
		_spec.SetField(artifact.FieldAlgorithm, field.TypeString, value)
	}
	if value, ok := au.mutation.Digest(); ok {
		_spec.SetField(artifact.FieldDigest, field.TypeString, value)
	}
	if au.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.OccurrencesTable,
			Columns: []string{artifact.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOccurrencesIDs(); len(nodes) > 0 && !au.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.OccurrencesTable,
			Columns: []string{artifact.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OccurrencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.OccurrencesTable,
			Columns: []string{artifact.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SbomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.SbomTable,
			Columns: []string{artifact.SbomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billofmaterials.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSbomIDs(); len(nodes) > 0 && !au.mutation.SbomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.SbomTable,
			Columns: []string{artifact.SbomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billofmaterials.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SbomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.SbomTable,
			Columns: []string{artifact.SbomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billofmaterials.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AttestationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AttestationsTable,
			Columns: artifact.AttestationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slsaattestation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAttestationsIDs(); len(nodes) > 0 && !au.mutation.AttestationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AttestationsTable,
			Columns: artifact.AttestationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slsaattestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AttestationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AttestationsTable,
			Columns: artifact.AttestationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slsaattestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.SameTable,
			Columns: artifact.SamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashequal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSameIDs(); len(nodes) > 0 && !au.mutation.SameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.SameTable,
			Columns: artifact.SamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashequal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.SameTable,
			Columns: artifact.SamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashequal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArtifactUpdateOne is the builder for updating a single Artifact entity.
type ArtifactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtifactMutation
}

// SetAlgorithm sets the "algorithm" field.
func (auo *ArtifactUpdateOne) SetAlgorithm(s string) *ArtifactUpdateOne {
	auo.mutation.SetAlgorithm(s)
	return auo
}

// SetNillableAlgorithm sets the "algorithm" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableAlgorithm(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetAlgorithm(*s)
	}
	return auo
}

// SetDigest sets the "digest" field.
func (auo *ArtifactUpdateOne) SetDigest(s string) *ArtifactUpdateOne {
	auo.mutation.SetDigest(s)
	return auo
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDigest(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetDigest(*s)
	}
	return auo
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (auo *ArtifactUpdateOne) AddOccurrenceIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddOccurrenceIDs(ids...)
	return auo
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (auo *ArtifactUpdateOne) AddOccurrences(o ...*Occurrence) *ArtifactUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOccurrenceIDs(ids...)
}

// AddSbomIDs adds the "sbom" edge to the BillOfMaterials entity by IDs.
func (auo *ArtifactUpdateOne) AddSbomIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddSbomIDs(ids...)
	return auo
}

// AddSbom adds the "sbom" edges to the BillOfMaterials entity.
func (auo *ArtifactUpdateOne) AddSbom(b ...*BillOfMaterials) *ArtifactUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.AddSbomIDs(ids...)
}

// AddAttestationIDs adds the "attestations" edge to the SLSAAttestation entity by IDs.
func (auo *ArtifactUpdateOne) AddAttestationIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddAttestationIDs(ids...)
	return auo
}

// AddAttestations adds the "attestations" edges to the SLSAAttestation entity.
func (auo *ArtifactUpdateOne) AddAttestations(s ...*SLSAAttestation) *ArtifactUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddAttestationIDs(ids...)
}

// AddSameIDs adds the "same" edge to the HashEqual entity by IDs.
func (auo *ArtifactUpdateOne) AddSameIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddSameIDs(ids...)
	return auo
}

// AddSame adds the "same" edges to the HashEqual entity.
func (auo *ArtifactUpdateOne) AddSame(h ...*HashEqual) *ArtifactUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return auo.AddSameIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (auo *ArtifactUpdateOne) Mutation() *ArtifactMutation {
	return auo.mutation
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (auo *ArtifactUpdateOne) ClearOccurrences() *ArtifactUpdateOne {
	auo.mutation.ClearOccurrences()
	return auo
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (auo *ArtifactUpdateOne) RemoveOccurrenceIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveOccurrenceIDs(ids...)
	return auo
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (auo *ArtifactUpdateOne) RemoveOccurrences(o ...*Occurrence) *ArtifactUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOccurrenceIDs(ids...)
}

// ClearSbom clears all "sbom" edges to the BillOfMaterials entity.
func (auo *ArtifactUpdateOne) ClearSbom() *ArtifactUpdateOne {
	auo.mutation.ClearSbom()
	return auo
}

// RemoveSbomIDs removes the "sbom" edge to BillOfMaterials entities by IDs.
func (auo *ArtifactUpdateOne) RemoveSbomIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveSbomIDs(ids...)
	return auo
}

// RemoveSbom removes "sbom" edges to BillOfMaterials entities.
func (auo *ArtifactUpdateOne) RemoveSbom(b ...*BillOfMaterials) *ArtifactUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.RemoveSbomIDs(ids...)
}

// ClearAttestations clears all "attestations" edges to the SLSAAttestation entity.
func (auo *ArtifactUpdateOne) ClearAttestations() *ArtifactUpdateOne {
	auo.mutation.ClearAttestations()
	return auo
}

// RemoveAttestationIDs removes the "attestations" edge to SLSAAttestation entities by IDs.
func (auo *ArtifactUpdateOne) RemoveAttestationIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveAttestationIDs(ids...)
	return auo
}

// RemoveAttestations removes "attestations" edges to SLSAAttestation entities.
func (auo *ArtifactUpdateOne) RemoveAttestations(s ...*SLSAAttestation) *ArtifactUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveAttestationIDs(ids...)
}

// ClearSame clears all "same" edges to the HashEqual entity.
func (auo *ArtifactUpdateOne) ClearSame() *ArtifactUpdateOne {
	auo.mutation.ClearSame()
	return auo
}

// RemoveSameIDs removes the "same" edge to HashEqual entities by IDs.
func (auo *ArtifactUpdateOne) RemoveSameIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveSameIDs(ids...)
	return auo
}

// RemoveSame removes "same" edges to HashEqual entities.
func (auo *ArtifactUpdateOne) RemoveSame(h ...*HashEqual) *ArtifactUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return auo.RemoveSameIDs(ids...)
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (auo *ArtifactUpdateOne) Where(ps ...predicate.Artifact) *ArtifactUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArtifactUpdateOne) Select(field string, fields ...string) *ArtifactUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Artifact entity.
func (auo *ArtifactUpdateOne) Save(ctx context.Context) (*Artifact, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtifactUpdateOne) SaveX(ctx context.Context) *Artifact {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArtifactUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtifactUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ArtifactUpdateOne) sqlSave(ctx context.Context) (_node *Artifact, err error) {
	_spec := sqlgraph.NewUpdateSpec(artifact.Table, artifact.Columns, sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Artifact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artifact.FieldID)
		for _, f := range fields {
			if !artifact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != artifact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Algorithm(); ok {
		_spec.SetField(artifact.FieldAlgorithm, field.TypeString, value)
	}
	if value, ok := auo.mutation.Digest(); ok {
		_spec.SetField(artifact.FieldDigest, field.TypeString, value)
	}
	if auo.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.OccurrencesTable,
			Columns: []string{artifact.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOccurrencesIDs(); len(nodes) > 0 && !auo.mutation.OccurrencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.OccurrencesTable,
			Columns: []string{artifact.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OccurrencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.OccurrencesTable,
			Columns: []string{artifact.OccurrencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(occurrence.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SbomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.SbomTable,
			Columns: []string{artifact.SbomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billofmaterials.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSbomIDs(); len(nodes) > 0 && !auo.mutation.SbomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.SbomTable,
			Columns: []string{artifact.SbomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billofmaterials.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SbomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   artifact.SbomTable,
			Columns: []string{artifact.SbomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billofmaterials.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AttestationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AttestationsTable,
			Columns: artifact.AttestationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slsaattestation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAttestationsIDs(); len(nodes) > 0 && !auo.mutation.AttestationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AttestationsTable,
			Columns: artifact.AttestationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slsaattestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AttestationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AttestationsTable,
			Columns: artifact.AttestationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slsaattestation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.SameTable,
			Columns: artifact.SamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashequal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSameIDs(); len(nodes) > 0 && !auo.mutation.SameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.SameTable,
			Columns: artifact.SamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashequal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.SameTable,
			Columns: artifact.SamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashequal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Artifact{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isoccurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// IsOccurrenceQuery is the builder for querying IsOccurrence entities.
type IsOccurrenceQuery struct {
	config
	ctx          *QueryContext
	order        []isoccurrence.OrderOption
	inters       []Interceptor
	predicates   []predicate.IsOccurrence
	withPackage  *PackageVersionQuery
	withArtifact *ArtifactQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IsOccurrenceQuery builder.
func (ioq *IsOccurrenceQuery) Where(ps ...predicate.IsOccurrence) *IsOccurrenceQuery {
	ioq.predicates = append(ioq.predicates, ps...)
	return ioq
}

// Limit the number of records to be returned by this query.
func (ioq *IsOccurrenceQuery) Limit(limit int) *IsOccurrenceQuery {
	ioq.ctx.Limit = &limit
	return ioq
}

// Offset to start from.
func (ioq *IsOccurrenceQuery) Offset(offset int) *IsOccurrenceQuery {
	ioq.ctx.Offset = &offset
	return ioq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ioq *IsOccurrenceQuery) Unique(unique bool) *IsOccurrenceQuery {
	ioq.ctx.Unique = &unique
	return ioq
}

// Order specifies how the records should be ordered.
func (ioq *IsOccurrenceQuery) Order(o ...isoccurrence.OrderOption) *IsOccurrenceQuery {
	ioq.order = append(ioq.order, o...)
	return ioq
}

// QueryPackage chains the current query on the "package" edge.
func (ioq *IsOccurrenceQuery) QueryPackage() *PackageVersionQuery {
	query := (&PackageVersionClient{config: ioq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ioq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ioq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(isoccurrence.Table, isoccurrence.FieldID, selector),
			sqlgraph.To(packageversion.Table, packageversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, isoccurrence.PackageTable, isoccurrence.PackageColumn),
		)
		fromU = sqlgraph.SetNeighbors(ioq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArtifact chains the current query on the "artifact" edge.
func (ioq *IsOccurrenceQuery) QueryArtifact() *ArtifactQuery {
	query := (&ArtifactClient{config: ioq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ioq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ioq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(isoccurrence.Table, isoccurrence.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, isoccurrence.ArtifactTable, isoccurrence.ArtifactColumn),
		)
		fromU = sqlgraph.SetNeighbors(ioq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IsOccurrence entity from the query.
// Returns a *NotFoundError when no IsOccurrence was found.
func (ioq *IsOccurrenceQuery) First(ctx context.Context) (*IsOccurrence, error) {
	nodes, err := ioq.Limit(1).All(setContextOp(ctx, ioq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{isoccurrence.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ioq *IsOccurrenceQuery) FirstX(ctx context.Context) *IsOccurrence {
	node, err := ioq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IsOccurrence ID from the query.
// Returns a *NotFoundError when no IsOccurrence ID was found.
func (ioq *IsOccurrenceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ioq.Limit(1).IDs(setContextOp(ctx, ioq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{isoccurrence.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ioq *IsOccurrenceQuery) FirstIDX(ctx context.Context) int {
	id, err := ioq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IsOccurrence entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IsOccurrence entity is found.
// Returns a *NotFoundError when no IsOccurrence entities are found.
func (ioq *IsOccurrenceQuery) Only(ctx context.Context) (*IsOccurrence, error) {
	nodes, err := ioq.Limit(2).All(setContextOp(ctx, ioq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{isoccurrence.Label}
	default:
		return nil, &NotSingularError{isoccurrence.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ioq *IsOccurrenceQuery) OnlyX(ctx context.Context) *IsOccurrence {
	node, err := ioq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IsOccurrence ID in the query.
// Returns a *NotSingularError when more than one IsOccurrence ID is found.
// Returns a *NotFoundError when no entities are found.
func (ioq *IsOccurrenceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ioq.Limit(2).IDs(setContextOp(ctx, ioq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{isoccurrence.Label}
	default:
		err = &NotSingularError{isoccurrence.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ioq *IsOccurrenceQuery) OnlyIDX(ctx context.Context) int {
	id, err := ioq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IsOccurrences.
func (ioq *IsOccurrenceQuery) All(ctx context.Context) ([]*IsOccurrence, error) {
	ctx = setContextOp(ctx, ioq.ctx, "All")
	if err := ioq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IsOccurrence, *IsOccurrenceQuery]()
	return withInterceptors[[]*IsOccurrence](ctx, ioq, qr, ioq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ioq *IsOccurrenceQuery) AllX(ctx context.Context) []*IsOccurrence {
	nodes, err := ioq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IsOccurrence IDs.
func (ioq *IsOccurrenceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ioq.ctx.Unique == nil && ioq.path != nil {
		ioq.Unique(true)
	}
	ctx = setContextOp(ctx, ioq.ctx, "IDs")
	if err = ioq.Select(isoccurrence.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ioq *IsOccurrenceQuery) IDsX(ctx context.Context) []int {
	ids, err := ioq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ioq *IsOccurrenceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ioq.ctx, "Count")
	if err := ioq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ioq, querierCount[*IsOccurrenceQuery](), ioq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ioq *IsOccurrenceQuery) CountX(ctx context.Context) int {
	count, err := ioq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ioq *IsOccurrenceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ioq.ctx, "Exist")
	switch _, err := ioq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ioq *IsOccurrenceQuery) ExistX(ctx context.Context) bool {
	exist, err := ioq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IsOccurrenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ioq *IsOccurrenceQuery) Clone() *IsOccurrenceQuery {
	if ioq == nil {
		return nil
	}
	return &IsOccurrenceQuery{
		config:       ioq.config,
		ctx:          ioq.ctx.Clone(),
		order:        append([]isoccurrence.OrderOption{}, ioq.order...),
		inters:       append([]Interceptor{}, ioq.inters...),
		predicates:   append([]predicate.IsOccurrence{}, ioq.predicates...),
		withPackage:  ioq.withPackage.Clone(),
		withArtifact: ioq.withArtifact.Clone(),
		// clone intermediate query.
		sql:  ioq.sql.Clone(),
		path: ioq.path,
	}
}

// WithPackage tells the query-builder to eager-load the nodes that are connected to
// the "package" edge. The optional arguments are used to configure the query builder of the edge.
func (ioq *IsOccurrenceQuery) WithPackage(opts ...func(*PackageVersionQuery)) *IsOccurrenceQuery {
	query := (&PackageVersionClient{config: ioq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ioq.withPackage = query
	return ioq
}

// WithArtifact tells the query-builder to eager-load the nodes that are connected to
// the "artifact" edge. The optional arguments are used to configure the query builder of the edge.
func (ioq *IsOccurrenceQuery) WithArtifact(opts ...func(*ArtifactQuery)) *IsOccurrenceQuery {
	query := (&ArtifactClient{config: ioq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ioq.withArtifact = query
	return ioq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PackageID int `json:"package_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IsOccurrence.Query().
//		GroupBy(isoccurrence.FieldPackageID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ioq *IsOccurrenceQuery) GroupBy(field string, fields ...string) *IsOccurrenceGroupBy {
	ioq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IsOccurrenceGroupBy{build: ioq}
	grbuild.flds = &ioq.ctx.Fields
	grbuild.label = isoccurrence.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PackageID int `json:"package_id,omitempty"`
//	}
//
//	client.IsOccurrence.Query().
//		Select(isoccurrence.FieldPackageID).
//		Scan(ctx, &v)
func (ioq *IsOccurrenceQuery) Select(fields ...string) *IsOccurrenceSelect {
	ioq.ctx.Fields = append(ioq.ctx.Fields, fields...)
	sbuild := &IsOccurrenceSelect{IsOccurrenceQuery: ioq}
	sbuild.label = isoccurrence.Label
	sbuild.flds, sbuild.scan = &ioq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IsOccurrenceSelect configured with the given aggregations.
func (ioq *IsOccurrenceQuery) Aggregate(fns ...AggregateFunc) *IsOccurrenceSelect {
	return ioq.Select().Aggregate(fns...)
}

func (ioq *IsOccurrenceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ioq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ioq); err != nil {
				return err
			}
		}
	}
	for _, f := range ioq.ctx.Fields {
		if !isoccurrence.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ioq.path != nil {
		prev, err := ioq.path(ctx)
		if err != nil {
			return err
		}
		ioq.sql = prev
	}
	return nil
}

func (ioq *IsOccurrenceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IsOccurrence, error) {
	var (
		nodes       = []*IsOccurrence{}
		_spec       = ioq.querySpec()
		loadedTypes = [2]bool{
			ioq.withPackage != nil,
			ioq.withArtifact != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IsOccurrence).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IsOccurrence{config: ioq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ioq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ioq.withPackage; query != nil {
		if err := ioq.loadPackage(ctx, query, nodes, nil,
			func(n *IsOccurrence, e *PackageVersion) { n.Edges.Package = e }); err != nil {
			return nil, err
		}
	}
	if query := ioq.withArtifact; query != nil {
		if err := ioq.loadArtifact(ctx, query, nodes, nil,
			func(n *IsOccurrence, e *Artifact) { n.Edges.Artifact = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ioq *IsOccurrenceQuery) loadPackage(ctx context.Context, query *PackageVersionQuery, nodes []*IsOccurrence, init func(*IsOccurrence), assign func(*IsOccurrence, *PackageVersion)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IsOccurrence)
	for i := range nodes {
		fk := nodes[i].PackageID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packageversion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "package_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ioq *IsOccurrenceQuery) loadArtifact(ctx context.Context, query *ArtifactQuery, nodes []*IsOccurrence, init func(*IsOccurrence), assign func(*IsOccurrence, *Artifact)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IsOccurrence)
	for i := range nodes {
		fk := nodes[i].ArtifactID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(artifact.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "artifact_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ioq *IsOccurrenceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ioq.querySpec()
	_spec.Node.Columns = ioq.ctx.Fields
	if len(ioq.ctx.Fields) > 0 {
		_spec.Unique = ioq.ctx.Unique != nil && *ioq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ioq.driver, _spec)
}

func (ioq *IsOccurrenceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(isoccurrence.Table, isoccurrence.Columns, sqlgraph.NewFieldSpec(isoccurrence.FieldID, field.TypeInt))
	_spec.From = ioq.sql
	if unique := ioq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ioq.path != nil {
		_spec.Unique = true
	}
	if fields := ioq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, isoccurrence.FieldID)
		for i := range fields {
			if fields[i] != isoccurrence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ioq.withPackage != nil {
			_spec.Node.AddColumnOnce(isoccurrence.FieldPackageID)
		}
		if ioq.withArtifact != nil {
			_spec.Node.AddColumnOnce(isoccurrence.FieldArtifactID)
		}
	}
	if ps := ioq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ioq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ioq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ioq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ioq *IsOccurrenceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ioq.driver.Dialect())
	t1 := builder.Table(isoccurrence.Table)
	columns := ioq.ctx.Fields
	if len(columns) == 0 {
		columns = isoccurrence.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ioq.sql != nil {
		selector = ioq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ioq.ctx.Unique != nil && *ioq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ioq.predicates {
		p(selector)
	}
	for _, p := range ioq.order {
		p(selector)
	}
	if offset := ioq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ioq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IsOccurrenceGroupBy is the group-by builder for IsOccurrence entities.
type IsOccurrenceGroupBy struct {
	selector
	build *IsOccurrenceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iogb *IsOccurrenceGroupBy) Aggregate(fns ...AggregateFunc) *IsOccurrenceGroupBy {
	iogb.fns = append(iogb.fns, fns...)
	return iogb
}

// Scan applies the selector query and scans the result into the given value.
func (iogb *IsOccurrenceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iogb.build.ctx, "GroupBy")
	if err := iogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IsOccurrenceQuery, *IsOccurrenceGroupBy](ctx, iogb.build, iogb, iogb.build.inters, v)
}

func (iogb *IsOccurrenceGroupBy) sqlScan(ctx context.Context, root *IsOccurrenceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iogb.fns))
	for _, fn := range iogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iogb.flds)+len(iogb.fns))
		for _, f := range *iogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IsOccurrenceSelect is the builder for selecting fields of IsOccurrence entities.
type IsOccurrenceSelect struct {
	*IsOccurrenceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ios *IsOccurrenceSelect) Aggregate(fns ...AggregateFunc) *IsOccurrenceSelect {
	ios.fns = append(ios.fns, fns...)
	return ios
}

// Scan applies the selector query and scans the result into the given value.
func (ios *IsOccurrenceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ios.ctx, "Select")
	if err := ios.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IsOccurrenceQuery, *IsOccurrenceSelect](ctx, ios.IsOccurrenceQuery, ios, ios.inters, v)
}

func (ios *IsOccurrenceSelect) sqlScan(ctx context.Context, root *IsOccurrenceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ios.fns))
	for _, fn := range ios.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ios.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ios.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitymetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
)

// VulnerabilityIDUpdate is the builder for updating VulnerabilityID entities.
type VulnerabilityIDUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityIDMutation
}

// Where appends a list predicates to the VulnerabilityIDUpdate builder.
func (viu *VulnerabilityIDUpdate) Where(ps ...predicate.VulnerabilityID) *VulnerabilityIDUpdate {
	viu.mutation.Where(ps...)
	return viu
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (viu *VulnerabilityIDUpdate) SetVulnerabilityID(s string) *VulnerabilityIDUpdate {
	viu.mutation.SetVulnerabilityID(s)
	return viu
}

// SetTypeID sets the "type_id" field.
func (viu *VulnerabilityIDUpdate) SetTypeID(i int) *VulnerabilityIDUpdate {
	viu.mutation.SetTypeID(i)
	return viu
}

// SetType sets the "type" edge to the VulnerabilityType entity.
func (viu *VulnerabilityIDUpdate) SetType(v *VulnerabilityType) *VulnerabilityIDUpdate {
	return viu.SetTypeID(v.ID)
}

// AddVulnEqualIDs adds the "vuln_equals" edge to the VulnEqual entity by IDs.
func (viu *VulnerabilityIDUpdate) AddVulnEqualIDs(ids ...int) *VulnerabilityIDUpdate {
	viu.mutation.AddVulnEqualIDs(ids...)
	return viu
}

// AddVulnEquals adds the "vuln_equals" edges to the VulnEqual entity.
func (viu *VulnerabilityIDUpdate) AddVulnEquals(v ...*VulnEqual) *VulnerabilityIDUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viu.AddVulnEqualIDs(ids...)
}

// AddVulnerabilityMetadatumIDs adds the "vulnerability_metadata" edge to the VulnerabilityMetadata entity by IDs.
func (viu *VulnerabilityIDUpdate) AddVulnerabilityMetadatumIDs(ids ...int) *VulnerabilityIDUpdate {
	viu.mutation.AddVulnerabilityMetadatumIDs(ids...)
	return viu
}

// AddVulnerabilityMetadata adds the "vulnerability_metadata" edges to the VulnerabilityMetadata entity.
func (viu *VulnerabilityIDUpdate) AddVulnerabilityMetadata(v ...*VulnerabilityMetadata) *VulnerabilityIDUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viu.AddVulnerabilityMetadatumIDs(ids...)
}

// Mutation returns the VulnerabilityIDMutation object of the builder.
func (viu *VulnerabilityIDUpdate) Mutation() *VulnerabilityIDMutation {
	return viu.mutation
}

// ClearType clears the "type" edge to the VulnerabilityType entity.
func (viu *VulnerabilityIDUpdate) ClearType() *VulnerabilityIDUpdate {
	viu.mutation.ClearType()
	return viu
}

// ClearVulnEquals clears all "vuln_equals" edges to the VulnEqual entity.
func (viu *VulnerabilityIDUpdate) ClearVulnEquals() *VulnerabilityIDUpdate {
	viu.mutation.ClearVulnEquals()
	return viu
}

// RemoveVulnEqualIDs removes the "vuln_equals" edge to VulnEqual entities by IDs.
func (viu *VulnerabilityIDUpdate) RemoveVulnEqualIDs(ids ...int) *VulnerabilityIDUpdate {
	viu.mutation.RemoveVulnEqualIDs(ids...)
	return viu
}

// RemoveVulnEquals removes "vuln_equals" edges to VulnEqual entities.
func (viu *VulnerabilityIDUpdate) RemoveVulnEquals(v ...*VulnEqual) *VulnerabilityIDUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viu.RemoveVulnEqualIDs(ids...)
}

// ClearVulnerabilityMetadata clears all "vulnerability_metadata" edges to the VulnerabilityMetadata entity.
func (viu *VulnerabilityIDUpdate) ClearVulnerabilityMetadata() *VulnerabilityIDUpdate {
	viu.mutation.ClearVulnerabilityMetadata()
	return viu
}

// RemoveVulnerabilityMetadatumIDs removes the "vulnerability_metadata" edge to VulnerabilityMetadata entities by IDs.
func (viu *VulnerabilityIDUpdate) RemoveVulnerabilityMetadatumIDs(ids ...int) *VulnerabilityIDUpdate {
	viu.mutation.RemoveVulnerabilityMetadatumIDs(ids...)
	return viu
}

// RemoveVulnerabilityMetadata removes "vulnerability_metadata" edges to VulnerabilityMetadata entities.
func (viu *VulnerabilityIDUpdate) RemoveVulnerabilityMetadata(v ...*VulnerabilityMetadata) *VulnerabilityIDUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viu.RemoveVulnerabilityMetadatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (viu *VulnerabilityIDUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, viu.sqlSave, viu.mutation, viu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (viu *VulnerabilityIDUpdate) SaveX(ctx context.Context) int {
	affected, err := viu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (viu *VulnerabilityIDUpdate) Exec(ctx context.Context) error {
	_, err := viu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (viu *VulnerabilityIDUpdate) ExecX(ctx context.Context) {
	if err := viu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (viu *VulnerabilityIDUpdate) check() error {
	if _, ok := viu.mutation.TypeID(); viu.mutation.TypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VulnerabilityID.type"`)
	}
	return nil
}

func (viu *VulnerabilityIDUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := viu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerabilityid.Table, vulnerabilityid.Columns, sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt))
	if ps := viu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := viu.mutation.VulnerabilityID(); ok {
		_spec.SetField(vulnerabilityid.FieldVulnerabilityID, field.TypeString, value)
	}
	if viu.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vulnerabilityid.TypeTable,
			Columns: []string{vulnerabilityid.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vulnerabilityid.TypeTable,
			Columns: []string{vulnerabilityid.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viu.mutation.VulnEqualsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualsTable,
			Columns: vulnerabilityid.VulnEqualsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.RemovedVulnEqualsIDs(); len(nodes) > 0 && !viu.mutation.VulnEqualsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualsTable,
			Columns: vulnerabilityid.VulnEqualsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.VulnEqualsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualsTable,
			Columns: vulnerabilityid.VulnEqualsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viu.mutation.VulnerabilityMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnerabilityMetadataTable,
			Columns: []string{vulnerabilityid.VulnerabilityMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.RemovedVulnerabilityMetadataIDs(); len(nodes) > 0 && !viu.mutation.VulnerabilityMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnerabilityMetadataTable,
			Columns: []string{vulnerabilityid.VulnerabilityMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.VulnerabilityMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnerabilityMetadataTable,
			Columns: []string{vulnerabilityid.VulnerabilityMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, viu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerabilityid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	viu.mutation.done = true
	return n, nil
}

// VulnerabilityIDUpdateOne is the builder for updating a single VulnerabilityID entity.
type VulnerabilityIDUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityIDMutation
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (viuo *VulnerabilityIDUpdateOne) SetVulnerabilityID(s string) *VulnerabilityIDUpdateOne {
	viuo.mutation.SetVulnerabilityID(s)
	return viuo
}

// SetTypeID sets the "type_id" field.
func (viuo *VulnerabilityIDUpdateOne) SetTypeID(i int) *VulnerabilityIDUpdateOne {
	viuo.mutation.SetTypeID(i)
	return viuo
}

// SetType sets the "type" edge to the VulnerabilityType entity.
func (viuo *VulnerabilityIDUpdateOne) SetType(v *VulnerabilityType) *VulnerabilityIDUpdateOne {
	return viuo.SetTypeID(v.ID)
}

// AddVulnEqualIDs adds the "vuln_equals" edge to the VulnEqual entity by IDs.
func (viuo *VulnerabilityIDUpdateOne) AddVulnEqualIDs(ids ...int) *VulnerabilityIDUpdateOne {
	viuo.mutation.AddVulnEqualIDs(ids...)
	return viuo
}

// AddVulnEquals adds the "vuln_equals" edges to the VulnEqual entity.
func (viuo *VulnerabilityIDUpdateOne) AddVulnEquals(v ...*VulnEqual) *VulnerabilityIDUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viuo.AddVulnEqualIDs(ids...)
}

// AddVulnerabilityMetadatumIDs adds the "vulnerability_metadata" edge to the VulnerabilityMetadata entity by IDs.
func (viuo *VulnerabilityIDUpdateOne) AddVulnerabilityMetadatumIDs(ids ...int) *VulnerabilityIDUpdateOne {
	viuo.mutation.AddVulnerabilityMetadatumIDs(ids...)
	return viuo
}

// AddVulnerabilityMetadata adds the "vulnerability_metadata" edges to the VulnerabilityMetadata entity.
func (viuo *VulnerabilityIDUpdateOne) AddVulnerabilityMetadata(v ...*VulnerabilityMetadata) *VulnerabilityIDUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viuo.AddVulnerabilityMetadatumIDs(ids...)
}

// Mutation returns the VulnerabilityIDMutation object of the builder.
func (viuo *VulnerabilityIDUpdateOne) Mutation() *VulnerabilityIDMutation {
	return viuo.mutation
}

// ClearType clears the "type" edge to the VulnerabilityType entity.
func (viuo *VulnerabilityIDUpdateOne) ClearType() *VulnerabilityIDUpdateOne {
	viuo.mutation.ClearType()
	return viuo
}

// ClearVulnEquals clears all "vuln_equals" edges to the VulnEqual entity.
func (viuo *VulnerabilityIDUpdateOne) ClearVulnEquals() *VulnerabilityIDUpdateOne {
	viuo.mutation.ClearVulnEquals()
	return viuo
}

// RemoveVulnEqualIDs removes the "vuln_equals" edge to VulnEqual entities by IDs.
func (viuo *VulnerabilityIDUpdateOne) RemoveVulnEqualIDs(ids ...int) *VulnerabilityIDUpdateOne {
	viuo.mutation.RemoveVulnEqualIDs(ids...)
	return viuo
}

// RemoveVulnEquals removes "vuln_equals" edges to VulnEqual entities.
func (viuo *VulnerabilityIDUpdateOne) RemoveVulnEquals(v ...*VulnEqual) *VulnerabilityIDUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viuo.RemoveVulnEqualIDs(ids...)
}

// ClearVulnerabilityMetadata clears all "vulnerability_metadata" edges to the VulnerabilityMetadata entity.
func (viuo *VulnerabilityIDUpdateOne) ClearVulnerabilityMetadata() *VulnerabilityIDUpdateOne {
	viuo.mutation.ClearVulnerabilityMetadata()
	return viuo
}

// RemoveVulnerabilityMetadatumIDs removes the "vulnerability_metadata" edge to VulnerabilityMetadata entities by IDs.
func (viuo *VulnerabilityIDUpdateOne) RemoveVulnerabilityMetadatumIDs(ids ...int) *VulnerabilityIDUpdateOne {
	viuo.mutation.RemoveVulnerabilityMetadatumIDs(ids...)
	return viuo
}

// RemoveVulnerabilityMetadata removes "vulnerability_metadata" edges to VulnerabilityMetadata entities.
func (viuo *VulnerabilityIDUpdateOne) RemoveVulnerabilityMetadata(v ...*VulnerabilityMetadata) *VulnerabilityIDUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viuo.RemoveVulnerabilityMetadatumIDs(ids...)
}

// Where appends a list predicates to the VulnerabilityIDUpdate builder.
func (viuo *VulnerabilityIDUpdateOne) Where(ps ...predicate.VulnerabilityID) *VulnerabilityIDUpdateOne {
	viuo.mutation.Where(ps...)
	return viuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (viuo *VulnerabilityIDUpdateOne) Select(field string, fields ...string) *VulnerabilityIDUpdateOne {
	viuo.fields = append([]string{field}, fields...)
	return viuo
}

// Save executes the query and returns the updated VulnerabilityID entity.
func (viuo *VulnerabilityIDUpdateOne) Save(ctx context.Context) (*VulnerabilityID, error) {
	return withHooks(ctx, viuo.sqlSave, viuo.mutation, viuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (viuo *VulnerabilityIDUpdateOne) SaveX(ctx context.Context) *VulnerabilityID {
	node, err := viuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (viuo *VulnerabilityIDUpdateOne) Exec(ctx context.Context) error {
	_, err := viuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (viuo *VulnerabilityIDUpdateOne) ExecX(ctx context.Context) {
	if err := viuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (viuo *VulnerabilityIDUpdateOne) check() error {
	if _, ok := viuo.mutation.TypeID(); viuo.mutation.TypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VulnerabilityID.type"`)
	}
	return nil
}

func (viuo *VulnerabilityIDUpdateOne) sqlSave(ctx context.Context) (_node *VulnerabilityID, err error) {
	if err := viuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerabilityid.Table, vulnerabilityid.Columns, sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt))
	id, ok := viuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VulnerabilityID.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := viuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerabilityid.FieldID)
		for _, f := range fields {
			if !vulnerabilityid.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerabilityid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := viuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := viuo.mutation.VulnerabilityID(); ok {
		_spec.SetField(vulnerabilityid.FieldVulnerabilityID, field.TypeString, value)
	}
	if viuo.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vulnerabilityid.TypeTable,
			Columns: []string{vulnerabilityid.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vulnerabilityid.TypeTable,
			Columns: []string{vulnerabilityid.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitytype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viuo.mutation.VulnEqualsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualsTable,
			Columns: vulnerabilityid.VulnEqualsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.RemovedVulnEqualsIDs(); len(nodes) > 0 && !viuo.mutation.VulnEqualsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualsTable,
			Columns: vulnerabilityid.VulnEqualsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.VulnEqualsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualsTable,
			Columns: vulnerabilityid.VulnEqualsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viuo.mutation.VulnerabilityMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnerabilityMetadataTable,
			Columns: []string{vulnerabilityid.VulnerabilityMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.RemovedVulnerabilityMetadataIDs(); len(nodes) > 0 && !viuo.mutation.VulnerabilityMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnerabilityMetadataTable,
			Columns: []string{vulnerabilityid.VulnerabilityMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.VulnerabilityMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnerabilityMetadataTable,
			Columns: []string{vulnerabilityid.VulnerabilityMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VulnerabilityID{config: viuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, viuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerabilityid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	viuo.mutation.done = true
	return _node, nil
}

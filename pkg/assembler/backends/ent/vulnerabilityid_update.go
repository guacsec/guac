// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvuln"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitymetadata"
)

// VulnerabilityIDUpdate is the builder for updating VulnerabilityID entities.
type VulnerabilityIDUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityIDMutation
}

// Where appends a list predicates to the VulnerabilityIDUpdate builder.
func (viu *VulnerabilityIDUpdate) Where(ps ...predicate.VulnerabilityID) *VulnerabilityIDUpdate {
	viu.mutation.Where(ps...)
	return viu
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (viu *VulnerabilityIDUpdate) SetVulnerabilityID(s string) *VulnerabilityIDUpdate {
	viu.mutation.SetVulnerabilityID(s)
	return viu
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (viu *VulnerabilityIDUpdate) SetNillableVulnerabilityID(s *string) *VulnerabilityIDUpdate {
	if s != nil {
		viu.SetVulnerabilityID(*s)
	}
	return viu
}

// SetType sets the "type" field.
func (viu *VulnerabilityIDUpdate) SetType(s string) *VulnerabilityIDUpdate {
	viu.mutation.SetType(s)
	return viu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (viu *VulnerabilityIDUpdate) SetNillableType(s *string) *VulnerabilityIDUpdate {
	if s != nil {
		viu.SetType(*s)
	}
	return viu
}

// AddVulnEqualVulnAIDs adds the "vuln_equal_vuln_a" edge to the VulnEqual entity by IDs.
func (viu *VulnerabilityIDUpdate) AddVulnEqualVulnAIDs(ids ...uuid.UUID) *VulnerabilityIDUpdate {
	viu.mutation.AddVulnEqualVulnAIDs(ids...)
	return viu
}

// AddVulnEqualVulnA adds the "vuln_equal_vuln_a" edges to the VulnEqual entity.
func (viu *VulnerabilityIDUpdate) AddVulnEqualVulnA(v ...*VulnEqual) *VulnerabilityIDUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viu.AddVulnEqualVulnAIDs(ids...)
}

// AddVulnEqualVulnBIDs adds the "vuln_equal_vuln_b" edge to the VulnEqual entity by IDs.
func (viu *VulnerabilityIDUpdate) AddVulnEqualVulnBIDs(ids ...uuid.UUID) *VulnerabilityIDUpdate {
	viu.mutation.AddVulnEqualVulnBIDs(ids...)
	return viu
}

// AddVulnEqualVulnB adds the "vuln_equal_vuln_b" edges to the VulnEqual entity.
func (viu *VulnerabilityIDUpdate) AddVulnEqualVulnB(v ...*VulnEqual) *VulnerabilityIDUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viu.AddVulnEqualVulnBIDs(ids...)
}

// AddMetadatumIDs adds the "metadata" edge to the VulnerabilityMetadata entity by IDs.
func (viu *VulnerabilityIDUpdate) AddMetadatumIDs(ids ...uuid.UUID) *VulnerabilityIDUpdate {
	viu.mutation.AddMetadatumIDs(ids...)
	return viu
}

// AddMetadata adds the "metadata" edges to the VulnerabilityMetadata entity.
func (viu *VulnerabilityIDUpdate) AddMetadata(v ...*VulnerabilityMetadata) *VulnerabilityIDUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viu.AddMetadatumIDs(ids...)
}

// AddCertifyVulnIDs adds the "certify_vuln" edge to the CertifyVuln entity by IDs.
func (viu *VulnerabilityIDUpdate) AddCertifyVulnIDs(ids ...uuid.UUID) *VulnerabilityIDUpdate {
	viu.mutation.AddCertifyVulnIDs(ids...)
	return viu
}

// AddCertifyVuln adds the "certify_vuln" edges to the CertifyVuln entity.
func (viu *VulnerabilityIDUpdate) AddCertifyVuln(c ...*CertifyVuln) *VulnerabilityIDUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return viu.AddCertifyVulnIDs(ids...)
}

// AddVexIDs adds the "vex" edge to the CertifyVex entity by IDs.
func (viu *VulnerabilityIDUpdate) AddVexIDs(ids ...uuid.UUID) *VulnerabilityIDUpdate {
	viu.mutation.AddVexIDs(ids...)
	return viu
}

// AddVex adds the "vex" edges to the CertifyVex entity.
func (viu *VulnerabilityIDUpdate) AddVex(c ...*CertifyVex) *VulnerabilityIDUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return viu.AddVexIDs(ids...)
}

// Mutation returns the VulnerabilityIDMutation object of the builder.
func (viu *VulnerabilityIDUpdate) Mutation() *VulnerabilityIDMutation {
	return viu.mutation
}

// ClearVulnEqualVulnA clears all "vuln_equal_vuln_a" edges to the VulnEqual entity.
func (viu *VulnerabilityIDUpdate) ClearVulnEqualVulnA() *VulnerabilityIDUpdate {
	viu.mutation.ClearVulnEqualVulnA()
	return viu
}

// RemoveVulnEqualVulnAIDs removes the "vuln_equal_vuln_a" edge to VulnEqual entities by IDs.
func (viu *VulnerabilityIDUpdate) RemoveVulnEqualVulnAIDs(ids ...uuid.UUID) *VulnerabilityIDUpdate {
	viu.mutation.RemoveVulnEqualVulnAIDs(ids...)
	return viu
}

// RemoveVulnEqualVulnA removes "vuln_equal_vuln_a" edges to VulnEqual entities.
func (viu *VulnerabilityIDUpdate) RemoveVulnEqualVulnA(v ...*VulnEqual) *VulnerabilityIDUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viu.RemoveVulnEqualVulnAIDs(ids...)
}

// ClearVulnEqualVulnB clears all "vuln_equal_vuln_b" edges to the VulnEqual entity.
func (viu *VulnerabilityIDUpdate) ClearVulnEqualVulnB() *VulnerabilityIDUpdate {
	viu.mutation.ClearVulnEqualVulnB()
	return viu
}

// RemoveVulnEqualVulnBIDs removes the "vuln_equal_vuln_b" edge to VulnEqual entities by IDs.
func (viu *VulnerabilityIDUpdate) RemoveVulnEqualVulnBIDs(ids ...uuid.UUID) *VulnerabilityIDUpdate {
	viu.mutation.RemoveVulnEqualVulnBIDs(ids...)
	return viu
}

// RemoveVulnEqualVulnB removes "vuln_equal_vuln_b" edges to VulnEqual entities.
func (viu *VulnerabilityIDUpdate) RemoveVulnEqualVulnB(v ...*VulnEqual) *VulnerabilityIDUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viu.RemoveVulnEqualVulnBIDs(ids...)
}

// ClearMetadata clears all "metadata" edges to the VulnerabilityMetadata entity.
func (viu *VulnerabilityIDUpdate) ClearMetadata() *VulnerabilityIDUpdate {
	viu.mutation.ClearMetadata()
	return viu
}

// RemoveMetadatumIDs removes the "metadata" edge to VulnerabilityMetadata entities by IDs.
func (viu *VulnerabilityIDUpdate) RemoveMetadatumIDs(ids ...uuid.UUID) *VulnerabilityIDUpdate {
	viu.mutation.RemoveMetadatumIDs(ids...)
	return viu
}

// RemoveMetadata removes "metadata" edges to VulnerabilityMetadata entities.
func (viu *VulnerabilityIDUpdate) RemoveMetadata(v ...*VulnerabilityMetadata) *VulnerabilityIDUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viu.RemoveMetadatumIDs(ids...)
}

// ClearCertifyVuln clears all "certify_vuln" edges to the CertifyVuln entity.
func (viu *VulnerabilityIDUpdate) ClearCertifyVuln() *VulnerabilityIDUpdate {
	viu.mutation.ClearCertifyVuln()
	return viu
}

// RemoveCertifyVulnIDs removes the "certify_vuln" edge to CertifyVuln entities by IDs.
func (viu *VulnerabilityIDUpdate) RemoveCertifyVulnIDs(ids ...uuid.UUID) *VulnerabilityIDUpdate {
	viu.mutation.RemoveCertifyVulnIDs(ids...)
	return viu
}

// RemoveCertifyVuln removes "certify_vuln" edges to CertifyVuln entities.
func (viu *VulnerabilityIDUpdate) RemoveCertifyVuln(c ...*CertifyVuln) *VulnerabilityIDUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return viu.RemoveCertifyVulnIDs(ids...)
}

// ClearVex clears all "vex" edges to the CertifyVex entity.
func (viu *VulnerabilityIDUpdate) ClearVex() *VulnerabilityIDUpdate {
	viu.mutation.ClearVex()
	return viu
}

// RemoveVexIDs removes the "vex" edge to CertifyVex entities by IDs.
func (viu *VulnerabilityIDUpdate) RemoveVexIDs(ids ...uuid.UUID) *VulnerabilityIDUpdate {
	viu.mutation.RemoveVexIDs(ids...)
	return viu
}

// RemoveVex removes "vex" edges to CertifyVex entities.
func (viu *VulnerabilityIDUpdate) RemoveVex(c ...*CertifyVex) *VulnerabilityIDUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return viu.RemoveVexIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (viu *VulnerabilityIDUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, viu.sqlSave, viu.mutation, viu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (viu *VulnerabilityIDUpdate) SaveX(ctx context.Context) int {
	affected, err := viu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (viu *VulnerabilityIDUpdate) Exec(ctx context.Context) error {
	_, err := viu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (viu *VulnerabilityIDUpdate) ExecX(ctx context.Context) {
	if err := viu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (viu *VulnerabilityIDUpdate) check() error {
	if v, ok := viu.mutation.GetType(); ok {
		if err := vulnerabilityid.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "VulnerabilityID.type": %w`, err)}
		}
	}
	return nil
}

func (viu *VulnerabilityIDUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := viu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerabilityid.Table, vulnerabilityid.Columns, sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID))
	if ps := viu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := viu.mutation.VulnerabilityID(); ok {
		_spec.SetField(vulnerabilityid.FieldVulnerabilityID, field.TypeString, value)
	}
	if value, ok := viu.mutation.GetType(); ok {
		_spec.SetField(vulnerabilityid.FieldType, field.TypeString, value)
	}
	if viu.mutation.VulnEqualVulnACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnATable,
			Columns: []string{vulnerabilityid.VulnEqualVulnAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.RemovedVulnEqualVulnAIDs(); len(nodes) > 0 && !viu.mutation.VulnEqualVulnACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnATable,
			Columns: []string{vulnerabilityid.VulnEqualVulnAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.VulnEqualVulnAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnATable,
			Columns: []string{vulnerabilityid.VulnEqualVulnAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viu.mutation.VulnEqualVulnBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnBTable,
			Columns: []string{vulnerabilityid.VulnEqualVulnBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.RemovedVulnEqualVulnBIDs(); len(nodes) > 0 && !viu.mutation.VulnEqualVulnBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnBTable,
			Columns: []string{vulnerabilityid.VulnEqualVulnBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.VulnEqualVulnBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnBTable,
			Columns: []string{vulnerabilityid.VulnEqualVulnBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.MetadataTable,
			Columns: []string{vulnerabilityid.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !viu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.MetadataTable,
			Columns: []string{vulnerabilityid.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.MetadataTable,
			Columns: []string{vulnerabilityid.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viu.mutation.CertifyVulnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.CertifyVulnTable,
			Columns: []string{vulnerabilityid.CertifyVulnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvuln.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.RemovedCertifyVulnIDs(); len(nodes) > 0 && !viu.mutation.CertifyVulnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.CertifyVulnTable,
			Columns: []string{vulnerabilityid.CertifyVulnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvuln.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.CertifyVulnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.CertifyVulnTable,
			Columns: []string{vulnerabilityid.CertifyVulnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvuln.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viu.mutation.VexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VexTable,
			Columns: []string{vulnerabilityid.VexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.RemovedVexIDs(); len(nodes) > 0 && !viu.mutation.VexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VexTable,
			Columns: []string{vulnerabilityid.VexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.VexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VexTable,
			Columns: []string{vulnerabilityid.VexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, viu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerabilityid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	viu.mutation.done = true
	return n, nil
}

// VulnerabilityIDUpdateOne is the builder for updating a single VulnerabilityID entity.
type VulnerabilityIDUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityIDMutation
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (viuo *VulnerabilityIDUpdateOne) SetVulnerabilityID(s string) *VulnerabilityIDUpdateOne {
	viuo.mutation.SetVulnerabilityID(s)
	return viuo
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (viuo *VulnerabilityIDUpdateOne) SetNillableVulnerabilityID(s *string) *VulnerabilityIDUpdateOne {
	if s != nil {
		viuo.SetVulnerabilityID(*s)
	}
	return viuo
}

// SetType sets the "type" field.
func (viuo *VulnerabilityIDUpdateOne) SetType(s string) *VulnerabilityIDUpdateOne {
	viuo.mutation.SetType(s)
	return viuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (viuo *VulnerabilityIDUpdateOne) SetNillableType(s *string) *VulnerabilityIDUpdateOne {
	if s != nil {
		viuo.SetType(*s)
	}
	return viuo
}

// AddVulnEqualVulnAIDs adds the "vuln_equal_vuln_a" edge to the VulnEqual entity by IDs.
func (viuo *VulnerabilityIDUpdateOne) AddVulnEqualVulnAIDs(ids ...uuid.UUID) *VulnerabilityIDUpdateOne {
	viuo.mutation.AddVulnEqualVulnAIDs(ids...)
	return viuo
}

// AddVulnEqualVulnA adds the "vuln_equal_vuln_a" edges to the VulnEqual entity.
func (viuo *VulnerabilityIDUpdateOne) AddVulnEqualVulnA(v ...*VulnEqual) *VulnerabilityIDUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viuo.AddVulnEqualVulnAIDs(ids...)
}

// AddVulnEqualVulnBIDs adds the "vuln_equal_vuln_b" edge to the VulnEqual entity by IDs.
func (viuo *VulnerabilityIDUpdateOne) AddVulnEqualVulnBIDs(ids ...uuid.UUID) *VulnerabilityIDUpdateOne {
	viuo.mutation.AddVulnEqualVulnBIDs(ids...)
	return viuo
}

// AddVulnEqualVulnB adds the "vuln_equal_vuln_b" edges to the VulnEqual entity.
func (viuo *VulnerabilityIDUpdateOne) AddVulnEqualVulnB(v ...*VulnEqual) *VulnerabilityIDUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viuo.AddVulnEqualVulnBIDs(ids...)
}

// AddMetadatumIDs adds the "metadata" edge to the VulnerabilityMetadata entity by IDs.
func (viuo *VulnerabilityIDUpdateOne) AddMetadatumIDs(ids ...uuid.UUID) *VulnerabilityIDUpdateOne {
	viuo.mutation.AddMetadatumIDs(ids...)
	return viuo
}

// AddMetadata adds the "metadata" edges to the VulnerabilityMetadata entity.
func (viuo *VulnerabilityIDUpdateOne) AddMetadata(v ...*VulnerabilityMetadata) *VulnerabilityIDUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viuo.AddMetadatumIDs(ids...)
}

// AddCertifyVulnIDs adds the "certify_vuln" edge to the CertifyVuln entity by IDs.
func (viuo *VulnerabilityIDUpdateOne) AddCertifyVulnIDs(ids ...uuid.UUID) *VulnerabilityIDUpdateOne {
	viuo.mutation.AddCertifyVulnIDs(ids...)
	return viuo
}

// AddCertifyVuln adds the "certify_vuln" edges to the CertifyVuln entity.
func (viuo *VulnerabilityIDUpdateOne) AddCertifyVuln(c ...*CertifyVuln) *VulnerabilityIDUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return viuo.AddCertifyVulnIDs(ids...)
}

// AddVexIDs adds the "vex" edge to the CertifyVex entity by IDs.
func (viuo *VulnerabilityIDUpdateOne) AddVexIDs(ids ...uuid.UUID) *VulnerabilityIDUpdateOne {
	viuo.mutation.AddVexIDs(ids...)
	return viuo
}

// AddVex adds the "vex" edges to the CertifyVex entity.
func (viuo *VulnerabilityIDUpdateOne) AddVex(c ...*CertifyVex) *VulnerabilityIDUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return viuo.AddVexIDs(ids...)
}

// Mutation returns the VulnerabilityIDMutation object of the builder.
func (viuo *VulnerabilityIDUpdateOne) Mutation() *VulnerabilityIDMutation {
	return viuo.mutation
}

// ClearVulnEqualVulnA clears all "vuln_equal_vuln_a" edges to the VulnEqual entity.
func (viuo *VulnerabilityIDUpdateOne) ClearVulnEqualVulnA() *VulnerabilityIDUpdateOne {
	viuo.mutation.ClearVulnEqualVulnA()
	return viuo
}

// RemoveVulnEqualVulnAIDs removes the "vuln_equal_vuln_a" edge to VulnEqual entities by IDs.
func (viuo *VulnerabilityIDUpdateOne) RemoveVulnEqualVulnAIDs(ids ...uuid.UUID) *VulnerabilityIDUpdateOne {
	viuo.mutation.RemoveVulnEqualVulnAIDs(ids...)
	return viuo
}

// RemoveVulnEqualVulnA removes "vuln_equal_vuln_a" edges to VulnEqual entities.
func (viuo *VulnerabilityIDUpdateOne) RemoveVulnEqualVulnA(v ...*VulnEqual) *VulnerabilityIDUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viuo.RemoveVulnEqualVulnAIDs(ids...)
}

// ClearVulnEqualVulnB clears all "vuln_equal_vuln_b" edges to the VulnEqual entity.
func (viuo *VulnerabilityIDUpdateOne) ClearVulnEqualVulnB() *VulnerabilityIDUpdateOne {
	viuo.mutation.ClearVulnEqualVulnB()
	return viuo
}

// RemoveVulnEqualVulnBIDs removes the "vuln_equal_vuln_b" edge to VulnEqual entities by IDs.
func (viuo *VulnerabilityIDUpdateOne) RemoveVulnEqualVulnBIDs(ids ...uuid.UUID) *VulnerabilityIDUpdateOne {
	viuo.mutation.RemoveVulnEqualVulnBIDs(ids...)
	return viuo
}

// RemoveVulnEqualVulnB removes "vuln_equal_vuln_b" edges to VulnEqual entities.
func (viuo *VulnerabilityIDUpdateOne) RemoveVulnEqualVulnB(v ...*VulnEqual) *VulnerabilityIDUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viuo.RemoveVulnEqualVulnBIDs(ids...)
}

// ClearMetadata clears all "metadata" edges to the VulnerabilityMetadata entity.
func (viuo *VulnerabilityIDUpdateOne) ClearMetadata() *VulnerabilityIDUpdateOne {
	viuo.mutation.ClearMetadata()
	return viuo
}

// RemoveMetadatumIDs removes the "metadata" edge to VulnerabilityMetadata entities by IDs.
func (viuo *VulnerabilityIDUpdateOne) RemoveMetadatumIDs(ids ...uuid.UUID) *VulnerabilityIDUpdateOne {
	viuo.mutation.RemoveMetadatumIDs(ids...)
	return viuo
}

// RemoveMetadata removes "metadata" edges to VulnerabilityMetadata entities.
func (viuo *VulnerabilityIDUpdateOne) RemoveMetadata(v ...*VulnerabilityMetadata) *VulnerabilityIDUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return viuo.RemoveMetadatumIDs(ids...)
}

// ClearCertifyVuln clears all "certify_vuln" edges to the CertifyVuln entity.
func (viuo *VulnerabilityIDUpdateOne) ClearCertifyVuln() *VulnerabilityIDUpdateOne {
	viuo.mutation.ClearCertifyVuln()
	return viuo
}

// RemoveCertifyVulnIDs removes the "certify_vuln" edge to CertifyVuln entities by IDs.
func (viuo *VulnerabilityIDUpdateOne) RemoveCertifyVulnIDs(ids ...uuid.UUID) *VulnerabilityIDUpdateOne {
	viuo.mutation.RemoveCertifyVulnIDs(ids...)
	return viuo
}

// RemoveCertifyVuln removes "certify_vuln" edges to CertifyVuln entities.
func (viuo *VulnerabilityIDUpdateOne) RemoveCertifyVuln(c ...*CertifyVuln) *VulnerabilityIDUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return viuo.RemoveCertifyVulnIDs(ids...)
}

// ClearVex clears all "vex" edges to the CertifyVex entity.
func (viuo *VulnerabilityIDUpdateOne) ClearVex() *VulnerabilityIDUpdateOne {
	viuo.mutation.ClearVex()
	return viuo
}

// RemoveVexIDs removes the "vex" edge to CertifyVex entities by IDs.
func (viuo *VulnerabilityIDUpdateOne) RemoveVexIDs(ids ...uuid.UUID) *VulnerabilityIDUpdateOne {
	viuo.mutation.RemoveVexIDs(ids...)
	return viuo
}

// RemoveVex removes "vex" edges to CertifyVex entities.
func (viuo *VulnerabilityIDUpdateOne) RemoveVex(c ...*CertifyVex) *VulnerabilityIDUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return viuo.RemoveVexIDs(ids...)
}

// Where appends a list predicates to the VulnerabilityIDUpdate builder.
func (viuo *VulnerabilityIDUpdateOne) Where(ps ...predicate.VulnerabilityID) *VulnerabilityIDUpdateOne {
	viuo.mutation.Where(ps...)
	return viuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (viuo *VulnerabilityIDUpdateOne) Select(field string, fields ...string) *VulnerabilityIDUpdateOne {
	viuo.fields = append([]string{field}, fields...)
	return viuo
}

// Save executes the query and returns the updated VulnerabilityID entity.
func (viuo *VulnerabilityIDUpdateOne) Save(ctx context.Context) (*VulnerabilityID, error) {
	return withHooks(ctx, viuo.sqlSave, viuo.mutation, viuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (viuo *VulnerabilityIDUpdateOne) SaveX(ctx context.Context) *VulnerabilityID {
	node, err := viuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (viuo *VulnerabilityIDUpdateOne) Exec(ctx context.Context) error {
	_, err := viuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (viuo *VulnerabilityIDUpdateOne) ExecX(ctx context.Context) {
	if err := viuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (viuo *VulnerabilityIDUpdateOne) check() error {
	if v, ok := viuo.mutation.GetType(); ok {
		if err := vulnerabilityid.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "VulnerabilityID.type": %w`, err)}
		}
	}
	return nil
}

func (viuo *VulnerabilityIDUpdateOne) sqlSave(ctx context.Context) (_node *VulnerabilityID, err error) {
	if err := viuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerabilityid.Table, vulnerabilityid.Columns, sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID))
	id, ok := viuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VulnerabilityID.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := viuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerabilityid.FieldID)
		for _, f := range fields {
			if !vulnerabilityid.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerabilityid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := viuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := viuo.mutation.VulnerabilityID(); ok {
		_spec.SetField(vulnerabilityid.FieldVulnerabilityID, field.TypeString, value)
	}
	if value, ok := viuo.mutation.GetType(); ok {
		_spec.SetField(vulnerabilityid.FieldType, field.TypeString, value)
	}
	if viuo.mutation.VulnEqualVulnACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnATable,
			Columns: []string{vulnerabilityid.VulnEqualVulnAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.RemovedVulnEqualVulnAIDs(); len(nodes) > 0 && !viuo.mutation.VulnEqualVulnACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnATable,
			Columns: []string{vulnerabilityid.VulnEqualVulnAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.VulnEqualVulnAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnATable,
			Columns: []string{vulnerabilityid.VulnEqualVulnAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viuo.mutation.VulnEqualVulnBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnBTable,
			Columns: []string{vulnerabilityid.VulnEqualVulnBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.RemovedVulnEqualVulnBIDs(); len(nodes) > 0 && !viuo.mutation.VulnEqualVulnBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnBTable,
			Columns: []string{vulnerabilityid.VulnEqualVulnBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.VulnEqualVulnBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VulnEqualVulnBTable,
			Columns: []string{vulnerabilityid.VulnEqualVulnBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.MetadataTable,
			Columns: []string{vulnerabilityid.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !viuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.MetadataTable,
			Columns: []string{vulnerabilityid.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.MetadataTable,
			Columns: []string{vulnerabilityid.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viuo.mutation.CertifyVulnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.CertifyVulnTable,
			Columns: []string{vulnerabilityid.CertifyVulnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvuln.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.RemovedCertifyVulnIDs(); len(nodes) > 0 && !viuo.mutation.CertifyVulnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.CertifyVulnTable,
			Columns: []string{vulnerabilityid.CertifyVulnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvuln.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.CertifyVulnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.CertifyVulnTable,
			Columns: []string{vulnerabilityid.CertifyVulnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvuln.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if viuo.mutation.VexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VexTable,
			Columns: []string{vulnerabilityid.VexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.RemovedVexIDs(); len(nodes) > 0 && !viuo.mutation.VexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VexTable,
			Columns: []string{vulnerabilityid.VexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.VexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vulnerabilityid.VexTable,
			Columns: []string{vulnerabilityid.VexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VulnerabilityID{config: viuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, viuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerabilityid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	viuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pkgequal"
)

// PkgEqual is the model entity for the PkgEqual schema.
type PkgEqual struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageVersionID holds the value of the "package_version_id" field.
	PackageVersionID int `json:"package_version_id,omitempty"`
	// SimilarID holds the value of the "similar_id" field.
	SimilarID int `json:"similar_id,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PkgEqualQuery when eager-loading is set.
	Edges        PkgEqualEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PkgEqualEdges holds the relations/edges for other nodes in the graph.
type PkgEqualEdges struct {
	// PackageA holds the value of the package_a edge.
	PackageA *PackageVersion `json:"package_a,omitempty"`
	// PackageB holds the value of the package_b edge.
	PackageB *PackageVersion `json:"package_b,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PackageAOrErr returns the PackageA value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PkgEqualEdges) PackageAOrErr() (*PackageVersion, error) {
	if e.loadedTypes[0] {
		if e.PackageA == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.PackageA, nil
	}
	return nil, &NotLoadedError{edge: "package_a"}
}

// PackageBOrErr returns the PackageB value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PkgEqualEdges) PackageBOrErr() (*PackageVersion, error) {
	if e.loadedTypes[1] {
		if e.PackageB == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.PackageB, nil
	}
	return nil, &NotLoadedError{edge: "package_b"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PkgEqual) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pkgequal.FieldID, pkgequal.FieldPackageVersionID, pkgequal.FieldSimilarID:
			values[i] = new(sql.NullInt64)
		case pkgequal.FieldOrigin, pkgequal.FieldCollector, pkgequal.FieldJustification:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PkgEqual fields.
func (pe *PkgEqual) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pkgequal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case pkgequal.FieldPackageVersionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_version_id", values[i])
			} else if value.Valid {
				pe.PackageVersionID = int(value.Int64)
			}
		case pkgequal.FieldSimilarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field similar_id", values[i])
			} else if value.Valid {
				pe.SimilarID = int(value.Int64)
			}
		case pkgequal.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				pe.Origin = value.String
			}
		case pkgequal.FieldCollector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector", values[i])
			} else if value.Valid {
				pe.Collector = value.String
			}
		case pkgequal.FieldJustification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field justification", values[i])
			} else if value.Valid {
				pe.Justification = value.String
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PkgEqual.
// This includes values selected through modifiers, order, etc.
func (pe *PkgEqual) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryPackageA queries the "package_a" edge of the PkgEqual entity.
func (pe *PkgEqual) QueryPackageA() *PackageVersionQuery {
	return NewPkgEqualClient(pe.config).QueryPackageA(pe)
}

// QueryPackageB queries the "package_b" edge of the PkgEqual entity.
func (pe *PkgEqual) QueryPackageB() *PackageVersionQuery {
	return NewPkgEqualClient(pe.config).QueryPackageB(pe)
}

// Update returns a builder for updating this PkgEqual.
// Note that you need to call PkgEqual.Unwrap() before calling this method if this PkgEqual
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *PkgEqual) Update() *PkgEqualUpdateOne {
	return NewPkgEqualClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the PkgEqual entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *PkgEqual) Unwrap() *PkgEqual {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: PkgEqual is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *PkgEqual) String() string {
	var builder strings.Builder
	builder.WriteString("PkgEqual(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("package_version_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.PackageVersionID))
	builder.WriteString(", ")
	builder.WriteString("similar_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.SimilarID))
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(pe.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(pe.Collector)
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(pe.Justification)
	builder.WriteByte(')')
	return builder.String()
}

// PkgEquals is a parsable slice of PkgEqual.
type PkgEquals []*PkgEqual

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
)

// VulnEqualUpdate is the builder for updating VulnEqual entities.
type VulnEqualUpdate struct {
	config
	hooks    []Hook
	mutation *VulnEqualMutation
}

// Where appends a list predicates to the VulnEqualUpdate builder.
func (veu *VulnEqualUpdate) Where(ps ...predicate.VulnEqual) *VulnEqualUpdate {
	veu.mutation.Where(ps...)
	return veu
}

// SetJustification sets the "justification" field.
func (veu *VulnEqualUpdate) SetJustification(s string) *VulnEqualUpdate {
	veu.mutation.SetJustification(s)
	return veu
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (veu *VulnEqualUpdate) SetNillableJustification(s *string) *VulnEqualUpdate {
	if s != nil {
		veu.SetJustification(*s)
	}
	return veu
}

// SetOrigin sets the "origin" field.
func (veu *VulnEqualUpdate) SetOrigin(s string) *VulnEqualUpdate {
	veu.mutation.SetOrigin(s)
	return veu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (veu *VulnEqualUpdate) SetNillableOrigin(s *string) *VulnEqualUpdate {
	if s != nil {
		veu.SetOrigin(*s)
	}
	return veu
}

// SetCollector sets the "collector" field.
func (veu *VulnEqualUpdate) SetCollector(s string) *VulnEqualUpdate {
	veu.mutation.SetCollector(s)
	return veu
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (veu *VulnEqualUpdate) SetNillableCollector(s *string) *VulnEqualUpdate {
	if s != nil {
		veu.SetCollector(*s)
	}
	return veu
}

// AddVulnerabilityIDIDs adds the "vulnerability_ids" edge to the VulnerabilityID entity by IDs.
func (veu *VulnEqualUpdate) AddVulnerabilityIDIDs(ids ...int) *VulnEqualUpdate {
	veu.mutation.AddVulnerabilityIDIDs(ids...)
	return veu
}

// AddVulnerabilityIds adds the "vulnerability_ids" edges to the VulnerabilityID entity.
func (veu *VulnEqualUpdate) AddVulnerabilityIds(v ...*VulnerabilityID) *VulnEqualUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return veu.AddVulnerabilityIDIDs(ids...)
}

// Mutation returns the VulnEqualMutation object of the builder.
func (veu *VulnEqualUpdate) Mutation() *VulnEqualMutation {
	return veu.mutation
}

// ClearVulnerabilityIds clears all "vulnerability_ids" edges to the VulnerabilityID entity.
func (veu *VulnEqualUpdate) ClearVulnerabilityIds() *VulnEqualUpdate {
	veu.mutation.ClearVulnerabilityIds()
	return veu
}

// RemoveVulnerabilityIDIDs removes the "vulnerability_ids" edge to VulnerabilityID entities by IDs.
func (veu *VulnEqualUpdate) RemoveVulnerabilityIDIDs(ids ...int) *VulnEqualUpdate {
	veu.mutation.RemoveVulnerabilityIDIDs(ids...)
	return veu
}

// RemoveVulnerabilityIds removes "vulnerability_ids" edges to VulnerabilityID entities.
func (veu *VulnEqualUpdate) RemoveVulnerabilityIds(v ...*VulnerabilityID) *VulnEqualUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return veu.RemoveVulnerabilityIDIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (veu *VulnEqualUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, veu.sqlSave, veu.mutation, veu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (veu *VulnEqualUpdate) SaveX(ctx context.Context) int {
	affected, err := veu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (veu *VulnEqualUpdate) Exec(ctx context.Context) error {
	_, err := veu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (veu *VulnEqualUpdate) ExecX(ctx context.Context) {
	if err := veu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (veu *VulnEqualUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vulnequal.Table, vulnequal.Columns, sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeInt))
	if ps := veu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := veu.mutation.Justification(); ok {
		_spec.SetField(vulnequal.FieldJustification, field.TypeString, value)
	}
	if value, ok := veu.mutation.Origin(); ok {
		_spec.SetField(vulnequal.FieldOrigin, field.TypeString, value)
	}
	if value, ok := veu.mutation.Collector(); ok {
		_spec.SetField(vulnequal.FieldCollector, field.TypeString, value)
	}
	if veu.mutation.VulnerabilityIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnequal.VulnerabilityIdsTable,
			Columns: vulnequal.VulnerabilityIdsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veu.mutation.RemovedVulnerabilityIdsIDs(); len(nodes) > 0 && !veu.mutation.VulnerabilityIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnequal.VulnerabilityIdsTable,
			Columns: vulnequal.VulnerabilityIdsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veu.mutation.VulnerabilityIdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnequal.VulnerabilityIdsTable,
			Columns: vulnequal.VulnerabilityIdsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, veu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnequal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	veu.mutation.done = true
	return n, nil
}

// VulnEqualUpdateOne is the builder for updating a single VulnEqual entity.
type VulnEqualUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnEqualMutation
}

// SetJustification sets the "justification" field.
func (veuo *VulnEqualUpdateOne) SetJustification(s string) *VulnEqualUpdateOne {
	veuo.mutation.SetJustification(s)
	return veuo
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (veuo *VulnEqualUpdateOne) SetNillableJustification(s *string) *VulnEqualUpdateOne {
	if s != nil {
		veuo.SetJustification(*s)
	}
	return veuo
}

// SetOrigin sets the "origin" field.
func (veuo *VulnEqualUpdateOne) SetOrigin(s string) *VulnEqualUpdateOne {
	veuo.mutation.SetOrigin(s)
	return veuo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (veuo *VulnEqualUpdateOne) SetNillableOrigin(s *string) *VulnEqualUpdateOne {
	if s != nil {
		veuo.SetOrigin(*s)
	}
	return veuo
}

// SetCollector sets the "collector" field.
func (veuo *VulnEqualUpdateOne) SetCollector(s string) *VulnEqualUpdateOne {
	veuo.mutation.SetCollector(s)
	return veuo
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (veuo *VulnEqualUpdateOne) SetNillableCollector(s *string) *VulnEqualUpdateOne {
	if s != nil {
		veuo.SetCollector(*s)
	}
	return veuo
}

// AddVulnerabilityIDIDs adds the "vulnerability_ids" edge to the VulnerabilityID entity by IDs.
func (veuo *VulnEqualUpdateOne) AddVulnerabilityIDIDs(ids ...int) *VulnEqualUpdateOne {
	veuo.mutation.AddVulnerabilityIDIDs(ids...)
	return veuo
}

// AddVulnerabilityIds adds the "vulnerability_ids" edges to the VulnerabilityID entity.
func (veuo *VulnEqualUpdateOne) AddVulnerabilityIds(v ...*VulnerabilityID) *VulnEqualUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return veuo.AddVulnerabilityIDIDs(ids...)
}

// Mutation returns the VulnEqualMutation object of the builder.
func (veuo *VulnEqualUpdateOne) Mutation() *VulnEqualMutation {
	return veuo.mutation
}

// ClearVulnerabilityIds clears all "vulnerability_ids" edges to the VulnerabilityID entity.
func (veuo *VulnEqualUpdateOne) ClearVulnerabilityIds() *VulnEqualUpdateOne {
	veuo.mutation.ClearVulnerabilityIds()
	return veuo
}

// RemoveVulnerabilityIDIDs removes the "vulnerability_ids" edge to VulnerabilityID entities by IDs.
func (veuo *VulnEqualUpdateOne) RemoveVulnerabilityIDIDs(ids ...int) *VulnEqualUpdateOne {
	veuo.mutation.RemoveVulnerabilityIDIDs(ids...)
	return veuo
}

// RemoveVulnerabilityIds removes "vulnerability_ids" edges to VulnerabilityID entities.
func (veuo *VulnEqualUpdateOne) RemoveVulnerabilityIds(v ...*VulnerabilityID) *VulnEqualUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return veuo.RemoveVulnerabilityIDIDs(ids...)
}

// Where appends a list predicates to the VulnEqualUpdate builder.
func (veuo *VulnEqualUpdateOne) Where(ps ...predicate.VulnEqual) *VulnEqualUpdateOne {
	veuo.mutation.Where(ps...)
	return veuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (veuo *VulnEqualUpdateOne) Select(field string, fields ...string) *VulnEqualUpdateOne {
	veuo.fields = append([]string{field}, fields...)
	return veuo
}

// Save executes the query and returns the updated VulnEqual entity.
func (veuo *VulnEqualUpdateOne) Save(ctx context.Context) (*VulnEqual, error) {
	return withHooks(ctx, veuo.sqlSave, veuo.mutation, veuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (veuo *VulnEqualUpdateOne) SaveX(ctx context.Context) *VulnEqual {
	node, err := veuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (veuo *VulnEqualUpdateOne) Exec(ctx context.Context) error {
	_, err := veuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (veuo *VulnEqualUpdateOne) ExecX(ctx context.Context) {
	if err := veuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (veuo *VulnEqualUpdateOne) sqlSave(ctx context.Context) (_node *VulnEqual, err error) {
	_spec := sqlgraph.NewUpdateSpec(vulnequal.Table, vulnequal.Columns, sqlgraph.NewFieldSpec(vulnequal.FieldID, field.TypeInt))
	id, ok := veuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VulnEqual.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := veuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnequal.FieldID)
		for _, f := range fields {
			if !vulnequal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnequal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := veuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := veuo.mutation.Justification(); ok {
		_spec.SetField(vulnequal.FieldJustification, field.TypeString, value)
	}
	if value, ok := veuo.mutation.Origin(); ok {
		_spec.SetField(vulnequal.FieldOrigin, field.TypeString, value)
	}
	if value, ok := veuo.mutation.Collector(); ok {
		_spec.SetField(vulnequal.FieldCollector, field.TypeString, value)
	}
	if veuo.mutation.VulnerabilityIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnequal.VulnerabilityIdsTable,
			Columns: vulnequal.VulnerabilityIdsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veuo.mutation.RemovedVulnerabilityIdsIDs(); len(nodes) > 0 && !veuo.mutation.VulnerabilityIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnequal.VulnerabilityIdsTable,
			Columns: vulnequal.VulnerabilityIdsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := veuo.mutation.VulnerabilityIdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnequal.VulnerabilityIdsTable,
			Columns: vulnequal.VulnerabilityIdsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VulnEqual{config: veuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, veuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnequal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	veuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sbom"
)

// SBOMUpdate is the builder for updating SBOM entities.
type SBOMUpdate struct {
	config
	hooks    []Hook
	mutation *SBOMMutation
}

// Where appends a list predicates to the SBOMUpdate builder.
func (su *SBOMUpdate) Where(ps ...predicate.SBOM) *SBOMUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetPackageID sets the "package_id" field.
func (su *SBOMUpdate) SetPackageID(i int) *SBOMUpdate {
	su.mutation.SetPackageID(i)
	return su
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (su *SBOMUpdate) SetNillablePackageID(i *int) *SBOMUpdate {
	if i != nil {
		su.SetPackageID(*i)
	}
	return su
}

// ClearPackageID clears the value of the "package_id" field.
func (su *SBOMUpdate) ClearPackageID() *SBOMUpdate {
	su.mutation.ClearPackageID()
	return su
}

// SetArtifactID sets the "artifact_id" field.
func (su *SBOMUpdate) SetArtifactID(i int) *SBOMUpdate {
	su.mutation.SetArtifactID(i)
	return su
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (su *SBOMUpdate) SetNillableArtifactID(i *int) *SBOMUpdate {
	if i != nil {
		su.SetArtifactID(*i)
	}
	return su
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (su *SBOMUpdate) ClearArtifactID() *SBOMUpdate {
	su.mutation.ClearArtifactID()
	return su
}

// SetURI sets the "uri" field.
func (su *SBOMUpdate) SetURI(s string) *SBOMUpdate {
	su.mutation.SetURI(s)
	return su
}

// SetAlgorithm sets the "algorithm" field.
func (su *SBOMUpdate) SetAlgorithm(s string) *SBOMUpdate {
	su.mutation.SetAlgorithm(s)
	return su
}

// SetDigest sets the "digest" field.
func (su *SBOMUpdate) SetDigest(s string) *SBOMUpdate {
	su.mutation.SetDigest(s)
	return su
}

// SetDownloadLocation sets the "downloadLocation" field.
func (su *SBOMUpdate) SetDownloadLocation(s string) *SBOMUpdate {
	su.mutation.SetDownloadLocation(s)
	return su
}

// SetOrigin sets the "origin" field.
func (su *SBOMUpdate) SetOrigin(s string) *SBOMUpdate {
	su.mutation.SetOrigin(s)
	return su
}

// SetCollector sets the "collector" field.
func (su *SBOMUpdate) SetCollector(s string) *SBOMUpdate {
	su.mutation.SetCollector(s)
	return su
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (su *SBOMUpdate) SetPackage(p *PackageVersion) *SBOMUpdate {
	return su.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (su *SBOMUpdate) SetArtifact(a *Artifact) *SBOMUpdate {
	return su.SetArtifactID(a.ID)
}

// Mutation returns the SBOMMutation object of the builder.
func (su *SBOMUpdate) Mutation() *SBOMMutation {
	return su.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (su *SBOMUpdate) ClearPackage() *SBOMUpdate {
	su.mutation.ClearPackage()
	return su
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (su *SBOMUpdate) ClearArtifact() *SBOMUpdate {
	su.mutation.ClearArtifact()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SBOMUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SBOMUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SBOMUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SBOMUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SBOMUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sbom.Table, sbom.Columns, sqlgraph.NewFieldSpec(sbom.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.URI(); ok {
		_spec.SetField(sbom.FieldURI, field.TypeString, value)
	}
	if value, ok := su.mutation.Algorithm(); ok {
		_spec.SetField(sbom.FieldAlgorithm, field.TypeString, value)
	}
	if value, ok := su.mutation.Digest(); ok {
		_spec.SetField(sbom.FieldDigest, field.TypeString, value)
	}
	if value, ok := su.mutation.DownloadLocation(); ok {
		_spec.SetField(sbom.FieldDownloadLocation, field.TypeString, value)
	}
	if value, ok := su.mutation.Origin(); ok {
		_spec.SetField(sbom.FieldOrigin, field.TypeString, value)
	}
	if value, ok := su.mutation.Collector(); ok {
		_spec.SetField(sbom.FieldCollector, field.TypeString, value)
	}
	if su.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sbom.PackageTable,
			Columns: []string{sbom.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sbom.PackageTable,
			Columns: []string{sbom.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sbom.ArtifactTable,
			Columns: []string{sbom.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sbom.ArtifactTable,
			Columns: []string{sbom.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sbom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SBOMUpdateOne is the builder for updating a single SBOM entity.
type SBOMUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SBOMMutation
}

// SetPackageID sets the "package_id" field.
func (suo *SBOMUpdateOne) SetPackageID(i int) *SBOMUpdateOne {
	suo.mutation.SetPackageID(i)
	return suo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (suo *SBOMUpdateOne) SetNillablePackageID(i *int) *SBOMUpdateOne {
	if i != nil {
		suo.SetPackageID(*i)
	}
	return suo
}

// ClearPackageID clears the value of the "package_id" field.
func (suo *SBOMUpdateOne) ClearPackageID() *SBOMUpdateOne {
	suo.mutation.ClearPackageID()
	return suo
}

// SetArtifactID sets the "artifact_id" field.
func (suo *SBOMUpdateOne) SetArtifactID(i int) *SBOMUpdateOne {
	suo.mutation.SetArtifactID(i)
	return suo
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (suo *SBOMUpdateOne) SetNillableArtifactID(i *int) *SBOMUpdateOne {
	if i != nil {
		suo.SetArtifactID(*i)
	}
	return suo
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (suo *SBOMUpdateOne) ClearArtifactID() *SBOMUpdateOne {
	suo.mutation.ClearArtifactID()
	return suo
}

// SetURI sets the "uri" field.
func (suo *SBOMUpdateOne) SetURI(s string) *SBOMUpdateOne {
	suo.mutation.SetURI(s)
	return suo
}

// SetAlgorithm sets the "algorithm" field.
func (suo *SBOMUpdateOne) SetAlgorithm(s string) *SBOMUpdateOne {
	suo.mutation.SetAlgorithm(s)
	return suo
}

// SetDigest sets the "digest" field.
func (suo *SBOMUpdateOne) SetDigest(s string) *SBOMUpdateOne {
	suo.mutation.SetDigest(s)
	return suo
}

// SetDownloadLocation sets the "downloadLocation" field.
func (suo *SBOMUpdateOne) SetDownloadLocation(s string) *SBOMUpdateOne {
	suo.mutation.SetDownloadLocation(s)
	return suo
}

// SetOrigin sets the "origin" field.
func (suo *SBOMUpdateOne) SetOrigin(s string) *SBOMUpdateOne {
	suo.mutation.SetOrigin(s)
	return suo
}

// SetCollector sets the "collector" field.
func (suo *SBOMUpdateOne) SetCollector(s string) *SBOMUpdateOne {
	suo.mutation.SetCollector(s)
	return suo
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (suo *SBOMUpdateOne) SetPackage(p *PackageVersion) *SBOMUpdateOne {
	return suo.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (suo *SBOMUpdateOne) SetArtifact(a *Artifact) *SBOMUpdateOne {
	return suo.SetArtifactID(a.ID)
}

// Mutation returns the SBOMMutation object of the builder.
func (suo *SBOMUpdateOne) Mutation() *SBOMMutation {
	return suo.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (suo *SBOMUpdateOne) ClearPackage() *SBOMUpdateOne {
	suo.mutation.ClearPackage()
	return suo
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (suo *SBOMUpdateOne) ClearArtifact() *SBOMUpdateOne {
	suo.mutation.ClearArtifact()
	return suo
}

// Where appends a list predicates to the SBOMUpdate builder.
func (suo *SBOMUpdateOne) Where(ps ...predicate.SBOM) *SBOMUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SBOMUpdateOne) Select(field string, fields ...string) *SBOMUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated SBOM entity.
func (suo *SBOMUpdateOne) Save(ctx context.Context) (*SBOM, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SBOMUpdateOne) SaveX(ctx context.Context) *SBOM {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SBOMUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SBOMUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SBOMUpdateOne) sqlSave(ctx context.Context) (_node *SBOM, err error) {
	_spec := sqlgraph.NewUpdateSpec(sbom.Table, sbom.Columns, sqlgraph.NewFieldSpec(sbom.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SBOM.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sbom.FieldID)
		for _, f := range fields {
			if !sbom.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sbom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.URI(); ok {
		_spec.SetField(sbom.FieldURI, field.TypeString, value)
	}
	if value, ok := suo.mutation.Algorithm(); ok {
		_spec.SetField(sbom.FieldAlgorithm, field.TypeString, value)
	}
	if value, ok := suo.mutation.Digest(); ok {
		_spec.SetField(sbom.FieldDigest, field.TypeString, value)
	}
	if value, ok := suo.mutation.DownloadLocation(); ok {
		_spec.SetField(sbom.FieldDownloadLocation, field.TypeString, value)
	}
	if value, ok := suo.mutation.Origin(); ok {
		_spec.SetField(sbom.FieldOrigin, field.TypeString, value)
	}
	if value, ok := suo.mutation.Collector(); ok {
		_spec.SetField(sbom.FieldCollector, field.TypeString, value)
	}
	if suo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sbom.PackageTable,
			Columns: []string{sbom.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sbom.PackageTable,
			Columns: []string{sbom.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sbom.ArtifactTable,
			Columns: []string{sbom.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sbom.ArtifactTable,
			Columns: []string{sbom.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SBOM{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sbom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

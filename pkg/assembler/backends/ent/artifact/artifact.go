// Code generated by ent, DO NOT EDIT.

package artifact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the artifact type in the database.
	Label = "artifact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAlgorithm holds the string denoting the algorithm field in the database.
	FieldAlgorithm = "algorithm"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// EdgeOccurrences holds the string denoting the occurrences edge name in mutations.
	EdgeOccurrences = "occurrences"
	// EdgeSbom holds the string denoting the sbom edge name in mutations.
	EdgeSbom = "sbom"
	// EdgeAttestations holds the string denoting the attestations edge name in mutations.
	EdgeAttestations = "attestations"
	// EdgeAttestationsSubject holds the string denoting the attestations_subject edge name in mutations.
	EdgeAttestationsSubject = "attestations_subject"
	// EdgeHashEqualArtA holds the string denoting the hash_equal_art_a edge name in mutations.
	EdgeHashEqualArtA = "hash_equal_art_a"
	// EdgeHashEqualArtB holds the string denoting the hash_equal_art_b edge name in mutations.
	EdgeHashEqualArtB = "hash_equal_art_b"
	// EdgeVex holds the string denoting the vex edge name in mutations.
	EdgeVex = "vex"
	// EdgeCertification holds the string denoting the certification edge name in mutations.
	EdgeCertification = "certification"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgePoc holds the string denoting the poc edge name in mutations.
	EdgePoc = "poc"
	// EdgeIncludedInSboms holds the string denoting the included_in_sboms edge name in mutations.
	EdgeIncludedInSboms = "included_in_sboms"
	// Table holds the table name of the artifact in the database.
	Table = "artifacts"
	// OccurrencesTable is the table that holds the occurrences relation/edge.
	OccurrencesTable = "occurrences"
	// OccurrencesInverseTable is the table name for the Occurrence entity.
	// It exists in this package in order to avoid circular dependency with the "occurrence" package.
	OccurrencesInverseTable = "occurrences"
	// OccurrencesColumn is the table column denoting the occurrences relation/edge.
	OccurrencesColumn = "artifact_id"
	// SbomTable is the table that holds the sbom relation/edge.
	SbomTable = "bill_of_materials"
	// SbomInverseTable is the table name for the BillOfMaterials entity.
	// It exists in this package in order to avoid circular dependency with the "billofmaterials" package.
	SbomInverseTable = "bill_of_materials"
	// SbomColumn is the table column denoting the sbom relation/edge.
	SbomColumn = "artifact_id"
	// AttestationsTable is the table that holds the attestations relation/edge. The primary key declared below.
	AttestationsTable = "slsa_attestation_built_from"
	// AttestationsInverseTable is the table name for the SLSAAttestation entity.
	// It exists in this package in order to avoid circular dependency with the "slsaattestation" package.
	AttestationsInverseTable = "slsa_attestations"
	// AttestationsSubjectTable is the table that holds the attestations_subject relation/edge.
	AttestationsSubjectTable = "slsa_attestations"
	// AttestationsSubjectInverseTable is the table name for the SLSAAttestation entity.
	// It exists in this package in order to avoid circular dependency with the "slsaattestation" package.
	AttestationsSubjectInverseTable = "slsa_attestations"
	// AttestationsSubjectColumn is the table column denoting the attestations_subject relation/edge.
	AttestationsSubjectColumn = "subject_id"
	// HashEqualArtATable is the table that holds the hash_equal_art_a relation/edge.
	HashEqualArtATable = "hash_equals"
	// HashEqualArtAInverseTable is the table name for the HashEqual entity.
	// It exists in this package in order to avoid circular dependency with the "hashequal" package.
	HashEqualArtAInverseTable = "hash_equals"
	// HashEqualArtAColumn is the table column denoting the hash_equal_art_a relation/edge.
	HashEqualArtAColumn = "art_id"
	// HashEqualArtBTable is the table that holds the hash_equal_art_b relation/edge.
	HashEqualArtBTable = "hash_equals"
	// HashEqualArtBInverseTable is the table name for the HashEqual entity.
	// It exists in this package in order to avoid circular dependency with the "hashequal" package.
	HashEqualArtBInverseTable = "hash_equals"
	// HashEqualArtBColumn is the table column denoting the hash_equal_art_b relation/edge.
	HashEqualArtBColumn = "equal_art_id"
	// VexTable is the table that holds the vex relation/edge.
	VexTable = "certify_vexes"
	// VexInverseTable is the table name for the CertifyVex entity.
	// It exists in this package in order to avoid circular dependency with the "certifyvex" package.
	VexInverseTable = "certify_vexes"
	// VexColumn is the table column denoting the vex relation/edge.
	VexColumn = "artifact_id"
	// CertificationTable is the table that holds the certification relation/edge.
	CertificationTable = "certifications"
	// CertificationInverseTable is the table name for the Certification entity.
	// It exists in this package in order to avoid circular dependency with the "certification" package.
	CertificationInverseTable = "certifications"
	// CertificationColumn is the table column denoting the certification relation/edge.
	CertificationColumn = "artifact_id"
	// MetadataTable is the table that holds the metadata relation/edge.
	MetadataTable = "has_metadata"
	// MetadataInverseTable is the table name for the HasMetadata entity.
	// It exists in this package in order to avoid circular dependency with the "hasmetadata" package.
	MetadataInverseTable = "has_metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "artifact_id"
	// PocTable is the table that holds the poc relation/edge.
	PocTable = "point_of_contacts"
	// PocInverseTable is the table name for the PointOfContact entity.
	// It exists in this package in order to avoid circular dependency with the "pointofcontact" package.
	PocInverseTable = "point_of_contacts"
	// PocColumn is the table column denoting the poc relation/edge.
	PocColumn = "artifact_id"
	// IncludedInSbomsTable is the table that holds the included_in_sboms relation/edge. The primary key declared below.
	IncludedInSbomsTable = "bill_of_materials_included_software_artifacts"
	// IncludedInSbomsInverseTable is the table name for the BillOfMaterials entity.
	// It exists in this package in order to avoid circular dependency with the "billofmaterials" package.
	IncludedInSbomsInverseTable = "bill_of_materials"
)

// Columns holds all SQL columns for artifact fields.
var Columns = []string{
	FieldID,
	FieldAlgorithm,
	FieldDigest,
}

var (
	// AttestationsPrimaryKey and AttestationsColumn2 are the table columns denoting the
	// primary key for the attestations relation (M2M).
	AttestationsPrimaryKey = []string{"slsa_attestation_id", "artifact_id"}
	// IncludedInSbomsPrimaryKey and IncludedInSbomsColumn2 are the table columns denoting the
	// primary key for the included_in_sboms relation (M2M).
	IncludedInSbomsPrimaryKey = []string{"bill_of_materials_id", "artifact_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Artifact queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAlgorithm orders the results by the algorithm field.
func ByAlgorithm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgorithm, opts...).ToFunc()
}

// ByDigest orders the results by the digest field.
func ByDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDigest, opts...).ToFunc()
}

// ByOccurrencesCount orders the results by occurrences count.
func ByOccurrencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOccurrencesStep(), opts...)
	}
}

// ByOccurrences orders the results by occurrences terms.
func ByOccurrences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOccurrencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySbomCount orders the results by sbom count.
func BySbomCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSbomStep(), opts...)
	}
}

// BySbom orders the results by sbom terms.
func BySbom(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSbomStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAttestationsCount orders the results by attestations count.
func ByAttestationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttestationsStep(), opts...)
	}
}

// ByAttestations orders the results by attestations terms.
func ByAttestations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttestationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAttestationsSubjectCount orders the results by attestations_subject count.
func ByAttestationsSubjectCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttestationsSubjectStep(), opts...)
	}
}

// ByAttestationsSubject orders the results by attestations_subject terms.
func ByAttestationsSubject(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttestationsSubjectStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHashEqualArtACount orders the results by hash_equal_art_a count.
func ByHashEqualArtACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHashEqualArtAStep(), opts...)
	}
}

// ByHashEqualArtA orders the results by hash_equal_art_a terms.
func ByHashEqualArtA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHashEqualArtAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHashEqualArtBCount orders the results by hash_equal_art_b count.
func ByHashEqualArtBCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHashEqualArtBStep(), opts...)
	}
}

// ByHashEqualArtB orders the results by hash_equal_art_b terms.
func ByHashEqualArtB(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHashEqualArtBStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVexCount orders the results by vex count.
func ByVexCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVexStep(), opts...)
	}
}

// ByVex orders the results by vex terms.
func ByVex(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVexStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCertificationCount orders the results by certification count.
func ByCertificationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCertificationStep(), opts...)
	}
}

// ByCertification orders the results by certification terms.
func ByCertification(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCertificationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMetadataCount orders the results by metadata count.
func ByMetadataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetadataStep(), opts...)
	}
}

// ByMetadata orders the results by metadata terms.
func ByMetadata(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetadataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPocCount orders the results by poc count.
func ByPocCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPocStep(), opts...)
	}
}

// ByPoc orders the results by poc terms.
func ByPoc(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPocStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncludedInSbomsCount orders the results by included_in_sboms count.
func ByIncludedInSbomsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncludedInSbomsStep(), opts...)
	}
}

// ByIncludedInSboms orders the results by included_in_sboms terms.
func ByIncludedInSboms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncludedInSbomsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOccurrencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OccurrencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OccurrencesTable, OccurrencesColumn),
	)
}
func newSbomStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SbomInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SbomTable, SbomColumn),
	)
}
func newAttestationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttestationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AttestationsTable, AttestationsPrimaryKey...),
	)
}
func newAttestationsSubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttestationsSubjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AttestationsSubjectTable, AttestationsSubjectColumn),
	)
}
func newHashEqualArtAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HashEqualArtAInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HashEqualArtATable, HashEqualArtAColumn),
	)
}
func newHashEqualArtBStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HashEqualArtBInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HashEqualArtBTable, HashEqualArtBColumn),
	)
}
func newVexStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VexInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, VexTable, VexColumn),
	)
}
func newCertificationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CertificationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CertificationTable, CertificationColumn),
	)
}
func newMetadataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetadataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MetadataTable, MetadataColumn),
	)
}
func newPocStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PocInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PocTable, PocColumn),
	)
}
func newIncludedInSbomsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncludedInSbomsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, IncludedInSbomsTable, IncludedInSbomsPrimaryKey...),
	)
}

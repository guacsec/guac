// Code generated by ent, DO NOT EDIT.

package artifact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the artifact type in the database.
	Label = "artifact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAlgorithm holds the string denoting the algorithm field in the database.
	FieldAlgorithm = "algorithm"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// EdgeOccurrences holds the string denoting the occurrences edge name in mutations.
	EdgeOccurrences = "occurrences"
	// EdgeSbom holds the string denoting the sbom edge name in mutations.
	EdgeSbom = "sbom"
	// EdgeAttestations holds the string denoting the attestations edge name in mutations.
	EdgeAttestations = "attestations"
	// EdgeSame holds the string denoting the same edge name in mutations.
	EdgeSame = "same"
	// Table holds the table name of the artifact in the database.
	Table = "artifacts"
	// OccurrencesTable is the table that holds the occurrences relation/edge.
	OccurrencesTable = "occurrences"
	// OccurrencesInverseTable is the table name for the Occurrence entity.
	// It exists in this package in order to avoid circular dependency with the "occurrence" package.
	OccurrencesInverseTable = "occurrences"
	// OccurrencesColumn is the table column denoting the occurrences relation/edge.
	OccurrencesColumn = "artifact_id"
	// SbomTable is the table that holds the sbom relation/edge.
	SbomTable = "bill_of_materials"
	// SbomInverseTable is the table name for the BillOfMaterials entity.
	// It exists in this package in order to avoid circular dependency with the "billofmaterials" package.
	SbomInverseTable = "bill_of_materials"
	// SbomColumn is the table column denoting the sbom relation/edge.
	SbomColumn = "artifact_id"
	// AttestationsTable is the table that holds the attestations relation/edge. The primary key declared below.
	AttestationsTable = "slsa_attestation_built_from"
	// AttestationsInverseTable is the table name for the SLSAAttestation entity.
	// It exists in this package in order to avoid circular dependency with the "slsaattestation" package.
	AttestationsInverseTable = "slsa_attestations"
	// SameTable is the table that holds the same relation/edge. The primary key declared below.
	SameTable = "hash_equal_artifacts"
	// SameInverseTable is the table name for the HashEqual entity.
	// It exists in this package in order to avoid circular dependency with the "hashequal" package.
	SameInverseTable = "hash_equals"
)

// Columns holds all SQL columns for artifact fields.
var Columns = []string{
	FieldID,
	FieldAlgorithm,
	FieldDigest,
}

var (
	// AttestationsPrimaryKey and AttestationsColumn2 are the table columns denoting the
	// primary key for the attestations relation (M2M).
	AttestationsPrimaryKey = []string{"slsa_attestation_id", "artifact_id"}
	// SamePrimaryKey and SameColumn2 are the table columns denoting the
	// primary key for the same relation (M2M).
	SamePrimaryKey = []string{"hash_equal_id", "artifact_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Artifact queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAlgorithm orders the results by the algorithm field.
func ByAlgorithm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgorithm, opts...).ToFunc()
}

// ByDigest orders the results by the digest field.
func ByDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDigest, opts...).ToFunc()
}

// ByOccurrencesCount orders the results by occurrences count.
func ByOccurrencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOccurrencesStep(), opts...)
	}
}

// ByOccurrences orders the results by occurrences terms.
func ByOccurrences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOccurrencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySbomCount orders the results by sbom count.
func BySbomCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSbomStep(), opts...)
	}
}

// BySbom orders the results by sbom terms.
func BySbom(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSbomStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAttestationsCount orders the results by attestations count.
func ByAttestationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttestationsStep(), opts...)
	}
}

// ByAttestations orders the results by attestations terms.
func ByAttestations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttestationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySameCount orders the results by same count.
func BySameCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSameStep(), opts...)
	}
}

// BySame orders the results by same terms.
func BySame(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSameStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOccurrencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OccurrencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OccurrencesTable, OccurrencesColumn),
	)
}
func newSbomStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SbomInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SbomTable, SbomColumn),
	)
}
func newAttestationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttestationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AttestationsTable, AttestationsPrimaryKey...),
	)
}
func newSameStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SameInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SameTable, SamePrimaryKey...),
	)
}

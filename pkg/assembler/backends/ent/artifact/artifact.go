// Code generated by ent, DO NOT EDIT.

package artifact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the artifact type in the database.
	Label = "artifact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAlgorithm holds the string denoting the algorithm field in the database.
	FieldAlgorithm = "algorithm"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// EdgeOccurrences holds the string denoting the occurrences edge name in mutations.
	EdgeOccurrences = "occurrences"
	// Table holds the table name of the artifact in the database.
	Table = "artifacts"
	// OccurrencesTable is the table that holds the occurrences relation/edge.
	OccurrencesTable = "is_occurrences"
	// OccurrencesInverseTable is the table name for the IsOccurrence entity.
	// It exists in this package in order to avoid circular dependency with the "isoccurrence" package.
	OccurrencesInverseTable = "is_occurrences"
	// OccurrencesColumn is the table column denoting the occurrences relation/edge.
	OccurrencesColumn = "artifact_id"
)

// Columns holds all SQL columns for artifact fields.
var Columns = []string{
	FieldID,
	FieldAlgorithm,
	FieldDigest,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Artifact queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAlgorithm orders the results by the algorithm field.
func ByAlgorithm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlgorithm, opts...).ToFunc()
}

// ByDigest orders the results by the digest field.
func ByDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDigest, opts...).ToFunc()
}

// ByOccurrencesCount orders the results by occurrences count.
func ByOccurrencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOccurrencesStep(), opts...)
	}
}

// ByOccurrences orders the results by occurrences terms.
func ByOccurrences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOccurrencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOccurrencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OccurrencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OccurrencesTable, OccurrencesColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/securityadvisory"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerability"
)

// VulnerabilityUpdate is the builder for updating Vulnerability entities.
type VulnerabilityUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// Where appends a list predicates to the VulnerabilityUpdate builder.
func (vu *VulnerabilityUpdate) Where(ps ...predicate.Vulnerability) *VulnerabilityUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (vu *VulnerabilityUpdate) SetVulnerabilityID(i int) *VulnerabilityUpdate {
	vu.mutation.SetVulnerabilityID(i)
	return vu
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableVulnerabilityID(i *int) *VulnerabilityUpdate {
	if i != nil {
		vu.SetVulnerabilityID(*i)
	}
	return vu
}

// ClearVulnerabilityID clears the value of the "vulnerability_id" field.
func (vu *VulnerabilityUpdate) ClearVulnerabilityID() *VulnerabilityUpdate {
	vu.mutation.ClearVulnerabilityID()
	return vu
}

// SetPackageID sets the "package_id" field.
func (vu *VulnerabilityUpdate) SetPackageID(i int) *VulnerabilityUpdate {
	vu.mutation.SetPackageID(i)
	return vu
}

// SetTimeScanned sets the "time_scanned" field.
func (vu *VulnerabilityUpdate) SetTimeScanned(t time.Time) *VulnerabilityUpdate {
	vu.mutation.SetTimeScanned(t)
	return vu
}

// SetDbURI sets the "db_uri" field.
func (vu *VulnerabilityUpdate) SetDbURI(s string) *VulnerabilityUpdate {
	vu.mutation.SetDbURI(s)
	return vu
}

// SetDbVersion sets the "db_version" field.
func (vu *VulnerabilityUpdate) SetDbVersion(s string) *VulnerabilityUpdate {
	vu.mutation.SetDbVersion(s)
	return vu
}

// SetScannerURI sets the "scanner_uri" field.
func (vu *VulnerabilityUpdate) SetScannerURI(s string) *VulnerabilityUpdate {
	vu.mutation.SetScannerURI(s)
	return vu
}

// SetScannerVersion sets the "scanner_version" field.
func (vu *VulnerabilityUpdate) SetScannerVersion(s string) *VulnerabilityUpdate {
	vu.mutation.SetScannerVersion(s)
	return vu
}

// SetOrigin sets the "origin" field.
func (vu *VulnerabilityUpdate) SetOrigin(s string) *VulnerabilityUpdate {
	vu.mutation.SetOrigin(s)
	return vu
}

// SetCollector sets the "collector" field.
func (vu *VulnerabilityUpdate) SetCollector(s string) *VulnerabilityUpdate {
	vu.mutation.SetCollector(s)
	return vu
}

// SetVulnerability sets the "vulnerability" edge to the SecurityAdvisory entity.
func (vu *VulnerabilityUpdate) SetVulnerability(s *SecurityAdvisory) *VulnerabilityUpdate {
	return vu.SetVulnerabilityID(s.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (vu *VulnerabilityUpdate) SetPackage(p *PackageVersion) *VulnerabilityUpdate {
	return vu.SetPackageID(p.ID)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vu *VulnerabilityUpdate) Mutation() *VulnerabilityMutation {
	return vu.mutation
}

// ClearVulnerability clears the "vulnerability" edge to the SecurityAdvisory entity.
func (vu *VulnerabilityUpdate) ClearVulnerability() *VulnerabilityUpdate {
	vu.mutation.ClearVulnerability()
	return vu
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (vu *VulnerabilityUpdate) ClearPackage() *VulnerabilityUpdate {
	vu.mutation.ClearPackage()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VulnerabilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VulnerabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VulnerabilityUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VulnerabilityUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VulnerabilityUpdate) check() error {
	if _, ok := vu.mutation.PackageID(); vu.mutation.PackageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Vulnerability.package"`)
	}
	return nil
}

func (vu *VulnerabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerability.Table, vulnerability.Columns, sqlgraph.NewFieldSpec(vulnerability.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.TimeScanned(); ok {
		_spec.SetField(vulnerability.FieldTimeScanned, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DbURI(); ok {
		_spec.SetField(vulnerability.FieldDbURI, field.TypeString, value)
	}
	if value, ok := vu.mutation.DbVersion(); ok {
		_spec.SetField(vulnerability.FieldDbVersion, field.TypeString, value)
	}
	if value, ok := vu.mutation.ScannerURI(); ok {
		_spec.SetField(vulnerability.FieldScannerURI, field.TypeString, value)
	}
	if value, ok := vu.mutation.ScannerVersion(); ok {
		_spec.SetField(vulnerability.FieldScannerVersion, field.TypeString, value)
	}
	if value, ok := vu.mutation.Origin(); ok {
		_spec.SetField(vulnerability.FieldOrigin, field.TypeString, value)
	}
	if value, ok := vu.mutation.Collector(); ok {
		_spec.SetField(vulnerability.FieldCollector, field.TypeString, value)
	}
	if vu.mutation.VulnerabilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.VulnerabilityTable,
			Columns: []string{vulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(securityadvisory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.VulnerabilityTable,
			Columns: []string{vulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(securityadvisory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.PackageTable,
			Columns: []string{vulnerability.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.PackageTable,
			Columns: []string{vulnerability.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VulnerabilityUpdateOne is the builder for updating a single Vulnerability entity.
type VulnerabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (vuo *VulnerabilityUpdateOne) SetVulnerabilityID(i int) *VulnerabilityUpdateOne {
	vuo.mutation.SetVulnerabilityID(i)
	return vuo
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableVulnerabilityID(i *int) *VulnerabilityUpdateOne {
	if i != nil {
		vuo.SetVulnerabilityID(*i)
	}
	return vuo
}

// ClearVulnerabilityID clears the value of the "vulnerability_id" field.
func (vuo *VulnerabilityUpdateOne) ClearVulnerabilityID() *VulnerabilityUpdateOne {
	vuo.mutation.ClearVulnerabilityID()
	return vuo
}

// SetPackageID sets the "package_id" field.
func (vuo *VulnerabilityUpdateOne) SetPackageID(i int) *VulnerabilityUpdateOne {
	vuo.mutation.SetPackageID(i)
	return vuo
}

// SetTimeScanned sets the "time_scanned" field.
func (vuo *VulnerabilityUpdateOne) SetTimeScanned(t time.Time) *VulnerabilityUpdateOne {
	vuo.mutation.SetTimeScanned(t)
	return vuo
}

// SetDbURI sets the "db_uri" field.
func (vuo *VulnerabilityUpdateOne) SetDbURI(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetDbURI(s)
	return vuo
}

// SetDbVersion sets the "db_version" field.
func (vuo *VulnerabilityUpdateOne) SetDbVersion(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetDbVersion(s)
	return vuo
}

// SetScannerURI sets the "scanner_uri" field.
func (vuo *VulnerabilityUpdateOne) SetScannerURI(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetScannerURI(s)
	return vuo
}

// SetScannerVersion sets the "scanner_version" field.
func (vuo *VulnerabilityUpdateOne) SetScannerVersion(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetScannerVersion(s)
	return vuo
}

// SetOrigin sets the "origin" field.
func (vuo *VulnerabilityUpdateOne) SetOrigin(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetOrigin(s)
	return vuo
}

// SetCollector sets the "collector" field.
func (vuo *VulnerabilityUpdateOne) SetCollector(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetCollector(s)
	return vuo
}

// SetVulnerability sets the "vulnerability" edge to the SecurityAdvisory entity.
func (vuo *VulnerabilityUpdateOne) SetVulnerability(s *SecurityAdvisory) *VulnerabilityUpdateOne {
	return vuo.SetVulnerabilityID(s.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (vuo *VulnerabilityUpdateOne) SetPackage(p *PackageVersion) *VulnerabilityUpdateOne {
	return vuo.SetPackageID(p.ID)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vuo *VulnerabilityUpdateOne) Mutation() *VulnerabilityMutation {
	return vuo.mutation
}

// ClearVulnerability clears the "vulnerability" edge to the SecurityAdvisory entity.
func (vuo *VulnerabilityUpdateOne) ClearVulnerability() *VulnerabilityUpdateOne {
	vuo.mutation.ClearVulnerability()
	return vuo
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (vuo *VulnerabilityUpdateOne) ClearPackage() *VulnerabilityUpdateOne {
	vuo.mutation.ClearPackage()
	return vuo
}

// Where appends a list predicates to the VulnerabilityUpdate builder.
func (vuo *VulnerabilityUpdateOne) Where(ps ...predicate.Vulnerability) *VulnerabilityUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VulnerabilityUpdateOne) Select(field string, fields ...string) *VulnerabilityUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vulnerability entity.
func (vuo *VulnerabilityUpdateOne) Save(ctx context.Context) (*Vulnerability, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) SaveX(ctx context.Context) *Vulnerability {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VulnerabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VulnerabilityUpdateOne) check() error {
	if _, ok := vuo.mutation.PackageID(); vuo.mutation.PackageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Vulnerability.package"`)
	}
	return nil
}

func (vuo *VulnerabilityUpdateOne) sqlSave(ctx context.Context) (_node *Vulnerability, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerability.Table, vulnerability.Columns, sqlgraph.NewFieldSpec(vulnerability.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vulnerability.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerability.FieldID)
		for _, f := range fields {
			if !vulnerability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.TimeScanned(); ok {
		_spec.SetField(vulnerability.FieldTimeScanned, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DbURI(); ok {
		_spec.SetField(vulnerability.FieldDbURI, field.TypeString, value)
	}
	if value, ok := vuo.mutation.DbVersion(); ok {
		_spec.SetField(vulnerability.FieldDbVersion, field.TypeString, value)
	}
	if value, ok := vuo.mutation.ScannerURI(); ok {
		_spec.SetField(vulnerability.FieldScannerURI, field.TypeString, value)
	}
	if value, ok := vuo.mutation.ScannerVersion(); ok {
		_spec.SetField(vulnerability.FieldScannerVersion, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Origin(); ok {
		_spec.SetField(vulnerability.FieldOrigin, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Collector(); ok {
		_spec.SetField(vulnerability.FieldCollector, field.TypeString, value)
	}
	if vuo.mutation.VulnerabilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.VulnerabilityTable,
			Columns: []string{vulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(securityadvisory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.VulnerabilityTable,
			Columns: []string{vulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(securityadvisory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.PackageTable,
			Columns: []string{vulnerability.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.PackageTable,
			Columns: []string{vulnerability.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vulnerability{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}

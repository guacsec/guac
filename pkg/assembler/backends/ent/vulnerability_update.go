// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerability"
)

// VulnerabilityUpdate is the builder for updating Vulnerability entities.
type VulnerabilityUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// Where appends a list predicates to the VulnerabilityUpdate builder.
func (vu *VulnerabilityUpdate) Where(ps ...predicate.Vulnerability) *VulnerabilityUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetGhsaID sets the "ghsa_id" field.
func (vu *VulnerabilityUpdate) SetGhsaID(s string) *VulnerabilityUpdate {
	vu.mutation.SetGhsaID(s)
	return vu
}

// SetNillableGhsaID sets the "ghsa_id" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableGhsaID(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetGhsaID(*s)
	}
	return vu
}

// ClearGhsaID clears the value of the "ghsa_id" field.
func (vu *VulnerabilityUpdate) ClearGhsaID() *VulnerabilityUpdate {
	vu.mutation.ClearGhsaID()
	return vu
}

// SetCveID sets the "cve_id" field.
func (vu *VulnerabilityUpdate) SetCveID(s string) *VulnerabilityUpdate {
	vu.mutation.SetCveID(s)
	return vu
}

// SetNillableCveID sets the "cve_id" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableCveID(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetCveID(*s)
	}
	return vu
}

// ClearCveID clears the value of the "cve_id" field.
func (vu *VulnerabilityUpdate) ClearCveID() *VulnerabilityUpdate {
	vu.mutation.ClearCveID()
	return vu
}

// SetCveYear sets the "cve_year" field.
func (vu *VulnerabilityUpdate) SetCveYear(i int) *VulnerabilityUpdate {
	vu.mutation.ResetCveYear()
	vu.mutation.SetCveYear(i)
	return vu
}

// SetNillableCveYear sets the "cve_year" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableCveYear(i *int) *VulnerabilityUpdate {
	if i != nil {
		vu.SetCveYear(*i)
	}
	return vu
}

// AddCveYear adds i to the "cve_year" field.
func (vu *VulnerabilityUpdate) AddCveYear(i int) *VulnerabilityUpdate {
	vu.mutation.AddCveYear(i)
	return vu
}

// ClearCveYear clears the value of the "cve_year" field.
func (vu *VulnerabilityUpdate) ClearCveYear() *VulnerabilityUpdate {
	vu.mutation.ClearCveYear()
	return vu
}

// SetOsvID sets the "osv_id" field.
func (vu *VulnerabilityUpdate) SetOsvID(s string) *VulnerabilityUpdate {
	vu.mutation.SetOsvID(s)
	return vu
}

// SetNillableOsvID sets the "osv_id" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableOsvID(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetOsvID(*s)
	}
	return vu
}

// ClearOsvID clears the value of the "osv_id" field.
func (vu *VulnerabilityUpdate) ClearOsvID() *VulnerabilityUpdate {
	vu.mutation.ClearOsvID()
	return vu
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vu *VulnerabilityUpdate) Mutation() *VulnerabilityMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VulnerabilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VulnerabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VulnerabilityUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VulnerabilityUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VulnerabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vulnerability.Table, vulnerability.Columns, sqlgraph.NewFieldSpec(vulnerability.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.GhsaID(); ok {
		_spec.SetField(vulnerability.FieldGhsaID, field.TypeString, value)
	}
	if vu.mutation.GhsaIDCleared() {
		_spec.ClearField(vulnerability.FieldGhsaID, field.TypeString)
	}
	if value, ok := vu.mutation.CveID(); ok {
		_spec.SetField(vulnerability.FieldCveID, field.TypeString, value)
	}
	if vu.mutation.CveIDCleared() {
		_spec.ClearField(vulnerability.FieldCveID, field.TypeString)
	}
	if value, ok := vu.mutation.CveYear(); ok {
		_spec.SetField(vulnerability.FieldCveYear, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedCveYear(); ok {
		_spec.AddField(vulnerability.FieldCveYear, field.TypeInt, value)
	}
	if vu.mutation.CveYearCleared() {
		_spec.ClearField(vulnerability.FieldCveYear, field.TypeInt)
	}
	if value, ok := vu.mutation.OsvID(); ok {
		_spec.SetField(vulnerability.FieldOsvID, field.TypeString, value)
	}
	if vu.mutation.OsvIDCleared() {
		_spec.ClearField(vulnerability.FieldOsvID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VulnerabilityUpdateOne is the builder for updating a single Vulnerability entity.
type VulnerabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// SetGhsaID sets the "ghsa_id" field.
func (vuo *VulnerabilityUpdateOne) SetGhsaID(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetGhsaID(s)
	return vuo
}

// SetNillableGhsaID sets the "ghsa_id" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableGhsaID(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetGhsaID(*s)
	}
	return vuo
}

// ClearGhsaID clears the value of the "ghsa_id" field.
func (vuo *VulnerabilityUpdateOne) ClearGhsaID() *VulnerabilityUpdateOne {
	vuo.mutation.ClearGhsaID()
	return vuo
}

// SetCveID sets the "cve_id" field.
func (vuo *VulnerabilityUpdateOne) SetCveID(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetCveID(s)
	return vuo
}

// SetNillableCveID sets the "cve_id" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableCveID(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetCveID(*s)
	}
	return vuo
}

// ClearCveID clears the value of the "cve_id" field.
func (vuo *VulnerabilityUpdateOne) ClearCveID() *VulnerabilityUpdateOne {
	vuo.mutation.ClearCveID()
	return vuo
}

// SetCveYear sets the "cve_year" field.
func (vuo *VulnerabilityUpdateOne) SetCveYear(i int) *VulnerabilityUpdateOne {
	vuo.mutation.ResetCveYear()
	vuo.mutation.SetCveYear(i)
	return vuo
}

// SetNillableCveYear sets the "cve_year" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableCveYear(i *int) *VulnerabilityUpdateOne {
	if i != nil {
		vuo.SetCveYear(*i)
	}
	return vuo
}

// AddCveYear adds i to the "cve_year" field.
func (vuo *VulnerabilityUpdateOne) AddCveYear(i int) *VulnerabilityUpdateOne {
	vuo.mutation.AddCveYear(i)
	return vuo
}

// ClearCveYear clears the value of the "cve_year" field.
func (vuo *VulnerabilityUpdateOne) ClearCveYear() *VulnerabilityUpdateOne {
	vuo.mutation.ClearCveYear()
	return vuo
}

// SetOsvID sets the "osv_id" field.
func (vuo *VulnerabilityUpdateOne) SetOsvID(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetOsvID(s)
	return vuo
}

// SetNillableOsvID sets the "osv_id" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableOsvID(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetOsvID(*s)
	}
	return vuo
}

// ClearOsvID clears the value of the "osv_id" field.
func (vuo *VulnerabilityUpdateOne) ClearOsvID() *VulnerabilityUpdateOne {
	vuo.mutation.ClearOsvID()
	return vuo
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vuo *VulnerabilityUpdateOne) Mutation() *VulnerabilityMutation {
	return vuo.mutation
}

// Where appends a list predicates to the VulnerabilityUpdate builder.
func (vuo *VulnerabilityUpdateOne) Where(ps ...predicate.Vulnerability) *VulnerabilityUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VulnerabilityUpdateOne) Select(field string, fields ...string) *VulnerabilityUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vulnerability entity.
func (vuo *VulnerabilityUpdateOne) Save(ctx context.Context) (*Vulnerability, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) SaveX(ctx context.Context) *Vulnerability {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VulnerabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VulnerabilityUpdateOne) sqlSave(ctx context.Context) (_node *Vulnerability, err error) {
	_spec := sqlgraph.NewUpdateSpec(vulnerability.Table, vulnerability.Columns, sqlgraph.NewFieldSpec(vulnerability.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vulnerability.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerability.FieldID)
		for _, f := range fields {
			if !vulnerability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.GhsaID(); ok {
		_spec.SetField(vulnerability.FieldGhsaID, field.TypeString, value)
	}
	if vuo.mutation.GhsaIDCleared() {
		_spec.ClearField(vulnerability.FieldGhsaID, field.TypeString)
	}
	if value, ok := vuo.mutation.CveID(); ok {
		_spec.SetField(vulnerability.FieldCveID, field.TypeString, value)
	}
	if vuo.mutation.CveIDCleared() {
		_spec.ClearField(vulnerability.FieldCveID, field.TypeString)
	}
	if value, ok := vuo.mutation.CveYear(); ok {
		_spec.SetField(vulnerability.FieldCveYear, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedCveYear(); ok {
		_spec.AddField(vulnerability.FieldCveYear, field.TypeInt, value)
	}
	if vuo.mutation.CveYearCleared() {
		_spec.ClearField(vulnerability.FieldCveYear, field.TypeInt)
	}
	if value, ok := vuo.mutation.OsvID(); ok {
		_spec.SetField(vulnerability.FieldOsvID, field.TypeString, value)
	}
	if vuo.mutation.OsvIDCleared() {
		_spec.ClearField(vulnerability.FieldOsvID, field.TypeString)
	}
	_node = &Vulnerability{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}

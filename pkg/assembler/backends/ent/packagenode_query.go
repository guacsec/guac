// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PackageNodeQuery is the builder for querying PackageNode entities.
type PackageNodeQuery struct {
	config
	ctx            *QueryContext
	order          []packagenode.OrderOption
	inters         []Interceptor
	predicates     []predicate.PackageNode
	withNamespaces *PackageNamespaceQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PackageNodeQuery builder.
func (pnq *PackageNodeQuery) Where(ps ...predicate.PackageNode) *PackageNodeQuery {
	pnq.predicates = append(pnq.predicates, ps...)
	return pnq
}

// Limit the number of records to be returned by this query.
func (pnq *PackageNodeQuery) Limit(limit int) *PackageNodeQuery {
	pnq.ctx.Limit = &limit
	return pnq
}

// Offset to start from.
func (pnq *PackageNodeQuery) Offset(offset int) *PackageNodeQuery {
	pnq.ctx.Offset = &offset
	return pnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pnq *PackageNodeQuery) Unique(unique bool) *PackageNodeQuery {
	pnq.ctx.Unique = &unique
	return pnq
}

// Order specifies how the records should be ordered.
func (pnq *PackageNodeQuery) Order(o ...packagenode.OrderOption) *PackageNodeQuery {
	pnq.order = append(pnq.order, o...)
	return pnq
}

// QueryNamespaces chains the current query on the "namespaces" edge.
func (pnq *PackageNodeQuery) QueryNamespaces() *PackageNamespaceQuery {
	query := (&PackageNamespaceClient{config: pnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packagenode.Table, packagenode.FieldID, selector),
			sqlgraph.To(packagenamespace.Table, packagenamespace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, packagenode.NamespacesTable, packagenode.NamespacesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PackageNode entity from the query.
// Returns a *NotFoundError when no PackageNode was found.
func (pnq *PackageNodeQuery) First(ctx context.Context) (*PackageNode, error) {
	nodes, err := pnq.Limit(1).All(setContextOp(ctx, pnq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{packagenode.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pnq *PackageNodeQuery) FirstX(ctx context.Context) *PackageNode {
	node, err := pnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PackageNode ID from the query.
// Returns a *NotFoundError when no PackageNode ID was found.
func (pnq *PackageNodeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pnq.Limit(1).IDs(setContextOp(ctx, pnq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{packagenode.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pnq *PackageNodeQuery) FirstIDX(ctx context.Context) int {
	id, err := pnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PackageNode entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PackageNode entity is found.
// Returns a *NotFoundError when no PackageNode entities are found.
func (pnq *PackageNodeQuery) Only(ctx context.Context) (*PackageNode, error) {
	nodes, err := pnq.Limit(2).All(setContextOp(ctx, pnq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{packagenode.Label}
	default:
		return nil, &NotSingularError{packagenode.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pnq *PackageNodeQuery) OnlyX(ctx context.Context) *PackageNode {
	node, err := pnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PackageNode ID in the query.
// Returns a *NotSingularError when more than one PackageNode ID is found.
// Returns a *NotFoundError when no entities are found.
func (pnq *PackageNodeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pnq.Limit(2).IDs(setContextOp(ctx, pnq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{packagenode.Label}
	default:
		err = &NotSingularError{packagenode.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pnq *PackageNodeQuery) OnlyIDX(ctx context.Context) int {
	id, err := pnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PackageNodes.
func (pnq *PackageNodeQuery) All(ctx context.Context) ([]*PackageNode, error) {
	ctx = setContextOp(ctx, pnq.ctx, "All")
	if err := pnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PackageNode, *PackageNodeQuery]()
	return withInterceptors[[]*PackageNode](ctx, pnq, qr, pnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pnq *PackageNodeQuery) AllX(ctx context.Context) []*PackageNode {
	nodes, err := pnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PackageNode IDs.
func (pnq *PackageNodeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pnq.ctx.Unique == nil && pnq.path != nil {
		pnq.Unique(true)
	}
	ctx = setContextOp(ctx, pnq.ctx, "IDs")
	if err = pnq.Select(packagenode.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pnq *PackageNodeQuery) IDsX(ctx context.Context) []int {
	ids, err := pnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pnq *PackageNodeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pnq.ctx, "Count")
	if err := pnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pnq, querierCount[*PackageNodeQuery](), pnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pnq *PackageNodeQuery) CountX(ctx context.Context) int {
	count, err := pnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pnq *PackageNodeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pnq.ctx, "Exist")
	switch _, err := pnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pnq *PackageNodeQuery) ExistX(ctx context.Context) bool {
	exist, err := pnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PackageNodeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pnq *PackageNodeQuery) Clone() *PackageNodeQuery {
	if pnq == nil {
		return nil
	}
	return &PackageNodeQuery{
		config:         pnq.config,
		ctx:            pnq.ctx.Clone(),
		order:          append([]packagenode.OrderOption{}, pnq.order...),
		inters:         append([]Interceptor{}, pnq.inters...),
		predicates:     append([]predicate.PackageNode{}, pnq.predicates...),
		withNamespaces: pnq.withNamespaces.Clone(),
		// clone intermediate query.
		sql:  pnq.sql.Clone(),
		path: pnq.path,
	}
}

// WithNamespaces tells the query-builder to eager-load the nodes that are connected to
// the "namespaces" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *PackageNodeQuery) WithNamespaces(opts ...func(*PackageNamespaceQuery)) *PackageNodeQuery {
	query := (&PackageNamespaceClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pnq.withNamespaces = query
	return pnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PackageNode.Query().
//		GroupBy(packagenode.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pnq *PackageNodeQuery) GroupBy(field string, fields ...string) *PackageNodeGroupBy {
	pnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PackageNodeGroupBy{build: pnq}
	grbuild.flds = &pnq.ctx.Fields
	grbuild.label = packagenode.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//	}
//
//	client.PackageNode.Query().
//		Select(packagenode.FieldType).
//		Scan(ctx, &v)
func (pnq *PackageNodeQuery) Select(fields ...string) *PackageNodeSelect {
	pnq.ctx.Fields = append(pnq.ctx.Fields, fields...)
	sbuild := &PackageNodeSelect{PackageNodeQuery: pnq}
	sbuild.label = packagenode.Label
	sbuild.flds, sbuild.scan = &pnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PackageNodeSelect configured with the given aggregations.
func (pnq *PackageNodeQuery) Aggregate(fns ...AggregateFunc) *PackageNodeSelect {
	return pnq.Select().Aggregate(fns...)
}

func (pnq *PackageNodeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pnq); err != nil {
				return err
			}
		}
	}
	for _, f := range pnq.ctx.Fields {
		if !packagenode.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pnq.path != nil {
		prev, err := pnq.path(ctx)
		if err != nil {
			return err
		}
		pnq.sql = prev
	}
	return nil
}

func (pnq *PackageNodeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PackageNode, error) {
	var (
		nodes       = []*PackageNode{}
		_spec       = pnq.querySpec()
		loadedTypes = [1]bool{
			pnq.withNamespaces != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PackageNode).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PackageNode{config: pnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pnq.withNamespaces; query != nil {
		if err := pnq.loadNamespaces(ctx, query, nodes,
			func(n *PackageNode) { n.Edges.Namespaces = []*PackageNamespace{} },
			func(n *PackageNode, e *PackageNamespace) { n.Edges.Namespaces = append(n.Edges.Namespaces, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pnq *PackageNodeQuery) loadNamespaces(ctx context.Context, query *PackageNamespaceQuery, nodes []*PackageNode, init func(*PackageNode), assign func(*PackageNode, *PackageNamespace)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PackageNode)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(packagenamespace.FieldPackageID)
	}
	query.Where(predicate.PackageNamespace(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packagenode.NamespacesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PackageID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "package_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pnq *PackageNodeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pnq.querySpec()
	_spec.Node.Columns = pnq.ctx.Fields
	if len(pnq.ctx.Fields) > 0 {
		_spec.Unique = pnq.ctx.Unique != nil && *pnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pnq.driver, _spec)
}

func (pnq *PackageNodeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(packagenode.Table, packagenode.Columns, sqlgraph.NewFieldSpec(packagenode.FieldID, field.TypeInt))
	_spec.From = pnq.sql
	if unique := pnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pnq.path != nil {
		_spec.Unique = true
	}
	if fields := pnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packagenode.FieldID)
		for i := range fields {
			if fields[i] != packagenode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pnq *PackageNodeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pnq.driver.Dialect())
	t1 := builder.Table(packagenode.Table)
	columns := pnq.ctx.Fields
	if len(columns) == 0 {
		columns = packagenode.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pnq.sql != nil {
		selector = pnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pnq.ctx.Unique != nil && *pnq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pnq.predicates {
		p(selector)
	}
	for _, p := range pnq.order {
		p(selector)
	}
	if offset := pnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PackageNodeGroupBy is the group-by builder for PackageNode entities.
type PackageNodeGroupBy struct {
	selector
	build *PackageNodeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pngb *PackageNodeGroupBy) Aggregate(fns ...AggregateFunc) *PackageNodeGroupBy {
	pngb.fns = append(pngb.fns, fns...)
	return pngb
}

// Scan applies the selector query and scans the result into the given value.
func (pngb *PackageNodeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pngb.build.ctx, "GroupBy")
	if err := pngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackageNodeQuery, *PackageNodeGroupBy](ctx, pngb.build, pngb, pngb.build.inters, v)
}

func (pngb *PackageNodeGroupBy) sqlScan(ctx context.Context, root *PackageNodeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pngb.fns))
	for _, fn := range pngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pngb.flds)+len(pngb.fns))
		for _, f := range *pngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PackageNodeSelect is the builder for selecting fields of PackageNode entities.
type PackageNodeSelect struct {
	*PackageNodeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pns *PackageNodeSelect) Aggregate(fns ...AggregateFunc) *PackageNodeSelect {
	pns.fns = append(pns.fns, fns...)
	return pns
}

// Scan applies the selector query and scans the result into the given value.
func (pns *PackageNodeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pns.ctx, "Select")
	if err := pns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackageNodeQuery, *PackageNodeSelect](ctx, pns.PackageNodeQuery, pns, pns.inters, v)
}

func (pns *PackageNodeSelect) sqlScan(ctx context.Context, root *PackageNodeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pns.fns))
	for _, fn := range pns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

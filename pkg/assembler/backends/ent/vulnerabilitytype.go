// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitytype"
)

// VulnerabilityType is the model entity for the VulnerabilityType schema.
type VulnerabilityType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type of vulnerability, one of OSV, GHSA, CVE, or custom
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VulnerabilityTypeQuery when eager-loading is set.
	Edges        VulnerabilityTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VulnerabilityTypeEdges holds the relations/edges for other nodes in the graph.
type VulnerabilityTypeEdges struct {
	// VulnerabilityIds holds the value of the vulnerability_ids edge.
	VulnerabilityIds []*VulnerabilityID `json:"vulnerability_ids,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedVulnerabilityIds map[string][]*VulnerabilityID
}

// VulnerabilityIdsOrErr returns the VulnerabilityIds value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityTypeEdges) VulnerabilityIdsOrErr() ([]*VulnerabilityID, error) {
	if e.loadedTypes[0] {
		return e.VulnerabilityIds, nil
	}
	return nil, &NotLoadedError{edge: "vulnerability_ids"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VulnerabilityType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vulnerabilitytype.FieldID:
			values[i] = new(sql.NullInt64)
		case vulnerabilitytype.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VulnerabilityType fields.
func (vt *VulnerabilityType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vulnerabilitytype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vt.ID = int(value.Int64)
		case vulnerabilitytype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				vt.Type = value.String
			}
		default:
			vt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VulnerabilityType.
// This includes values selected through modifiers, order, etc.
func (vt *VulnerabilityType) Value(name string) (ent.Value, error) {
	return vt.selectValues.Get(name)
}

// QueryVulnerabilityIds queries the "vulnerability_ids" edge of the VulnerabilityType entity.
func (vt *VulnerabilityType) QueryVulnerabilityIds() *VulnerabilityIDQuery {
	return NewVulnerabilityTypeClient(vt.config).QueryVulnerabilityIds(vt)
}

// Update returns a builder for updating this VulnerabilityType.
// Note that you need to call VulnerabilityType.Unwrap() before calling this method if this VulnerabilityType
// was returned from a transaction, and the transaction was committed or rolled back.
func (vt *VulnerabilityType) Update() *VulnerabilityTypeUpdateOne {
	return NewVulnerabilityTypeClient(vt.config).UpdateOne(vt)
}

// Unwrap unwraps the VulnerabilityType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vt *VulnerabilityType) Unwrap() *VulnerabilityType {
	_tx, ok := vt.config.driver.(*txDriver)
	if !ok {
		panic("ent: VulnerabilityType is not a transactional entity")
	}
	vt.config.driver = _tx.drv
	return vt
}

// String implements the fmt.Stringer.
func (vt *VulnerabilityType) String() string {
	var builder strings.Builder
	builder.WriteString("VulnerabilityType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vt.ID))
	builder.WriteString("type=")
	builder.WriteString(vt.Type)
	builder.WriteByte(')')
	return builder.String()
}

// NamedVulnerabilityIds returns the VulnerabilityIds named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vt *VulnerabilityType) NamedVulnerabilityIds(name string) ([]*VulnerabilityID, error) {
	if vt.Edges.namedVulnerabilityIds == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vt.Edges.namedVulnerabilityIds[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vt *VulnerabilityType) appendNamedVulnerabilityIds(name string, edges ...*VulnerabilityID) {
	if vt.Edges.namedVulnerabilityIds == nil {
		vt.Edges.namedVulnerabilityIds = make(map[string][]*VulnerabilityID)
	}
	if len(edges) == 0 {
		vt.Edges.namedVulnerabilityIds[name] = []*VulnerabilityID{}
	} else {
		vt.Edges.namedVulnerabilityIds[name] = append(vt.Edges.namedVulnerabilityIds[name], edges...)
	}
}

// VulnerabilityTypes is a parsable slice of VulnerabilityType.
type VulnerabilityTypes []*VulnerabilityType

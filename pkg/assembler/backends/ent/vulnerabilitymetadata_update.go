// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitymetadata"
)

// VulnerabilityMetadataUpdate is the builder for updating VulnerabilityMetadata entities.
type VulnerabilityMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityMetadataMutation
}

// Where appends a list predicates to the VulnerabilityMetadataUpdate builder.
func (vmu *VulnerabilityMetadataUpdate) Where(ps ...predicate.VulnerabilityMetadata) *VulnerabilityMetadataUpdate {
	vmu.mutation.Where(ps...)
	return vmu
}

// SetVulnerabilityIDID sets the "vulnerability_id_id" field.
func (vmu *VulnerabilityMetadataUpdate) SetVulnerabilityIDID(u uuid.UUID) *VulnerabilityMetadataUpdate {
	vmu.mutation.SetVulnerabilityIDID(u)
	return vmu
}

// SetNillableVulnerabilityIDID sets the "vulnerability_id_id" field if the given value is not nil.
func (vmu *VulnerabilityMetadataUpdate) SetNillableVulnerabilityIDID(u *uuid.UUID) *VulnerabilityMetadataUpdate {
	if u != nil {
		vmu.SetVulnerabilityIDID(*u)
	}
	return vmu
}

// SetScoreType sets the "score_type" field.
func (vmu *VulnerabilityMetadataUpdate) SetScoreType(vt vulnerabilitymetadata.ScoreType) *VulnerabilityMetadataUpdate {
	vmu.mutation.SetScoreType(vt)
	return vmu
}

// SetNillableScoreType sets the "score_type" field if the given value is not nil.
func (vmu *VulnerabilityMetadataUpdate) SetNillableScoreType(vt *vulnerabilitymetadata.ScoreType) *VulnerabilityMetadataUpdate {
	if vt != nil {
		vmu.SetScoreType(*vt)
	}
	return vmu
}

// SetScoreValue sets the "score_value" field.
func (vmu *VulnerabilityMetadataUpdate) SetScoreValue(f float64) *VulnerabilityMetadataUpdate {
	vmu.mutation.ResetScoreValue()
	vmu.mutation.SetScoreValue(f)
	return vmu
}

// SetNillableScoreValue sets the "score_value" field if the given value is not nil.
func (vmu *VulnerabilityMetadataUpdate) SetNillableScoreValue(f *float64) *VulnerabilityMetadataUpdate {
	if f != nil {
		vmu.SetScoreValue(*f)
	}
	return vmu
}

// AddScoreValue adds f to the "score_value" field.
func (vmu *VulnerabilityMetadataUpdate) AddScoreValue(f float64) *VulnerabilityMetadataUpdate {
	vmu.mutation.AddScoreValue(f)
	return vmu
}

// SetTimestamp sets the "timestamp" field.
func (vmu *VulnerabilityMetadataUpdate) SetTimestamp(t time.Time) *VulnerabilityMetadataUpdate {
	vmu.mutation.SetTimestamp(t)
	return vmu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (vmu *VulnerabilityMetadataUpdate) SetNillableTimestamp(t *time.Time) *VulnerabilityMetadataUpdate {
	if t != nil {
		vmu.SetTimestamp(*t)
	}
	return vmu
}

// SetOrigin sets the "origin" field.
func (vmu *VulnerabilityMetadataUpdate) SetOrigin(s string) *VulnerabilityMetadataUpdate {
	vmu.mutation.SetOrigin(s)
	return vmu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (vmu *VulnerabilityMetadataUpdate) SetNillableOrigin(s *string) *VulnerabilityMetadataUpdate {
	if s != nil {
		vmu.SetOrigin(*s)
	}
	return vmu
}

// SetCollector sets the "collector" field.
func (vmu *VulnerabilityMetadataUpdate) SetCollector(s string) *VulnerabilityMetadataUpdate {
	vmu.mutation.SetCollector(s)
	return vmu
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (vmu *VulnerabilityMetadataUpdate) SetNillableCollector(s *string) *VulnerabilityMetadataUpdate {
	if s != nil {
		vmu.SetCollector(*s)
	}
	return vmu
}

// SetDocumentRef sets the "document_ref" field.
func (vmu *VulnerabilityMetadataUpdate) SetDocumentRef(s string) *VulnerabilityMetadataUpdate {
	vmu.mutation.SetDocumentRef(s)
	return vmu
}

// SetNillableDocumentRef sets the "document_ref" field if the given value is not nil.
func (vmu *VulnerabilityMetadataUpdate) SetNillableDocumentRef(s *string) *VulnerabilityMetadataUpdate {
	if s != nil {
		vmu.SetDocumentRef(*s)
	}
	return vmu
}

// SetVulnerabilityID sets the "vulnerability_id" edge to the VulnerabilityID entity.
func (vmu *VulnerabilityMetadataUpdate) SetVulnerabilityID(v *VulnerabilityID) *VulnerabilityMetadataUpdate {
	return vmu.SetVulnerabilityIDID(v.ID)
}

// Mutation returns the VulnerabilityMetadataMutation object of the builder.
func (vmu *VulnerabilityMetadataUpdate) Mutation() *VulnerabilityMetadataMutation {
	return vmu.mutation
}

// ClearVulnerabilityID clears the "vulnerability_id" edge to the VulnerabilityID entity.
func (vmu *VulnerabilityMetadataUpdate) ClearVulnerabilityID() *VulnerabilityMetadataUpdate {
	vmu.mutation.ClearVulnerabilityID()
	return vmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vmu *VulnerabilityMetadataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vmu.sqlSave, vmu.mutation, vmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmu *VulnerabilityMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := vmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vmu *VulnerabilityMetadataUpdate) Exec(ctx context.Context) error {
	_, err := vmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmu *VulnerabilityMetadataUpdate) ExecX(ctx context.Context) {
	if err := vmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmu *VulnerabilityMetadataUpdate) check() error {
	if v, ok := vmu.mutation.ScoreType(); ok {
		if err := vulnerabilitymetadata.ScoreTypeValidator(v); err != nil {
			return &ValidationError{Name: "score_type", err: fmt.Errorf(`ent: validator failed for field "VulnerabilityMetadata.score_type": %w`, err)}
		}
	}
	if _, ok := vmu.mutation.VulnerabilityIDID(); vmu.mutation.VulnerabilityIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VulnerabilityMetadata.vulnerability_id"`)
	}
	return nil
}

func (vmu *VulnerabilityMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerabilitymetadata.Table, vulnerabilitymetadata.Columns, sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeUUID))
	if ps := vmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmu.mutation.ScoreType(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldScoreType, field.TypeEnum, value)
	}
	if value, ok := vmu.mutation.ScoreValue(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldScoreValue, field.TypeFloat64, value)
	}
	if value, ok := vmu.mutation.AddedScoreValue(); ok {
		_spec.AddField(vulnerabilitymetadata.FieldScoreValue, field.TypeFloat64, value)
	}
	if value, ok := vmu.mutation.Timestamp(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := vmu.mutation.Origin(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldOrigin, field.TypeString, value)
	}
	if value, ok := vmu.mutation.Collector(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldCollector, field.TypeString, value)
	}
	if value, ok := vmu.mutation.DocumentRef(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldDocumentRef, field.TypeString, value)
	}
	if vmu.mutation.VulnerabilityIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerabilitymetadata.VulnerabilityIDTable,
			Columns: []string{vulnerabilitymetadata.VulnerabilityIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmu.mutation.VulnerabilityIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerabilitymetadata.VulnerabilityIDTable,
			Columns: []string{vulnerabilitymetadata.VulnerabilityIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerabilitymetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vmu.mutation.done = true
	return n, nil
}

// VulnerabilityMetadataUpdateOne is the builder for updating a single VulnerabilityMetadata entity.
type VulnerabilityMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityMetadataMutation
}

// SetVulnerabilityIDID sets the "vulnerability_id_id" field.
func (vmuo *VulnerabilityMetadataUpdateOne) SetVulnerabilityIDID(u uuid.UUID) *VulnerabilityMetadataUpdateOne {
	vmuo.mutation.SetVulnerabilityIDID(u)
	return vmuo
}

// SetNillableVulnerabilityIDID sets the "vulnerability_id_id" field if the given value is not nil.
func (vmuo *VulnerabilityMetadataUpdateOne) SetNillableVulnerabilityIDID(u *uuid.UUID) *VulnerabilityMetadataUpdateOne {
	if u != nil {
		vmuo.SetVulnerabilityIDID(*u)
	}
	return vmuo
}

// SetScoreType sets the "score_type" field.
func (vmuo *VulnerabilityMetadataUpdateOne) SetScoreType(vt vulnerabilitymetadata.ScoreType) *VulnerabilityMetadataUpdateOne {
	vmuo.mutation.SetScoreType(vt)
	return vmuo
}

// SetNillableScoreType sets the "score_type" field if the given value is not nil.
func (vmuo *VulnerabilityMetadataUpdateOne) SetNillableScoreType(vt *vulnerabilitymetadata.ScoreType) *VulnerabilityMetadataUpdateOne {
	if vt != nil {
		vmuo.SetScoreType(*vt)
	}
	return vmuo
}

// SetScoreValue sets the "score_value" field.
func (vmuo *VulnerabilityMetadataUpdateOne) SetScoreValue(f float64) *VulnerabilityMetadataUpdateOne {
	vmuo.mutation.ResetScoreValue()
	vmuo.mutation.SetScoreValue(f)
	return vmuo
}

// SetNillableScoreValue sets the "score_value" field if the given value is not nil.
func (vmuo *VulnerabilityMetadataUpdateOne) SetNillableScoreValue(f *float64) *VulnerabilityMetadataUpdateOne {
	if f != nil {
		vmuo.SetScoreValue(*f)
	}
	return vmuo
}

// AddScoreValue adds f to the "score_value" field.
func (vmuo *VulnerabilityMetadataUpdateOne) AddScoreValue(f float64) *VulnerabilityMetadataUpdateOne {
	vmuo.mutation.AddScoreValue(f)
	return vmuo
}

// SetTimestamp sets the "timestamp" field.
func (vmuo *VulnerabilityMetadataUpdateOne) SetTimestamp(t time.Time) *VulnerabilityMetadataUpdateOne {
	vmuo.mutation.SetTimestamp(t)
	return vmuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (vmuo *VulnerabilityMetadataUpdateOne) SetNillableTimestamp(t *time.Time) *VulnerabilityMetadataUpdateOne {
	if t != nil {
		vmuo.SetTimestamp(*t)
	}
	return vmuo
}

// SetOrigin sets the "origin" field.
func (vmuo *VulnerabilityMetadataUpdateOne) SetOrigin(s string) *VulnerabilityMetadataUpdateOne {
	vmuo.mutation.SetOrigin(s)
	return vmuo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (vmuo *VulnerabilityMetadataUpdateOne) SetNillableOrigin(s *string) *VulnerabilityMetadataUpdateOne {
	if s != nil {
		vmuo.SetOrigin(*s)
	}
	return vmuo
}

// SetCollector sets the "collector" field.
func (vmuo *VulnerabilityMetadataUpdateOne) SetCollector(s string) *VulnerabilityMetadataUpdateOne {
	vmuo.mutation.SetCollector(s)
	return vmuo
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (vmuo *VulnerabilityMetadataUpdateOne) SetNillableCollector(s *string) *VulnerabilityMetadataUpdateOne {
	if s != nil {
		vmuo.SetCollector(*s)
	}
	return vmuo
}

// SetDocumentRef sets the "document_ref" field.
func (vmuo *VulnerabilityMetadataUpdateOne) SetDocumentRef(s string) *VulnerabilityMetadataUpdateOne {
	vmuo.mutation.SetDocumentRef(s)
	return vmuo
}

// SetNillableDocumentRef sets the "document_ref" field if the given value is not nil.
func (vmuo *VulnerabilityMetadataUpdateOne) SetNillableDocumentRef(s *string) *VulnerabilityMetadataUpdateOne {
	if s != nil {
		vmuo.SetDocumentRef(*s)
	}
	return vmuo
}

// SetVulnerabilityID sets the "vulnerability_id" edge to the VulnerabilityID entity.
func (vmuo *VulnerabilityMetadataUpdateOne) SetVulnerabilityID(v *VulnerabilityID) *VulnerabilityMetadataUpdateOne {
	return vmuo.SetVulnerabilityIDID(v.ID)
}

// Mutation returns the VulnerabilityMetadataMutation object of the builder.
func (vmuo *VulnerabilityMetadataUpdateOne) Mutation() *VulnerabilityMetadataMutation {
	return vmuo.mutation
}

// ClearVulnerabilityID clears the "vulnerability_id" edge to the VulnerabilityID entity.
func (vmuo *VulnerabilityMetadataUpdateOne) ClearVulnerabilityID() *VulnerabilityMetadataUpdateOne {
	vmuo.mutation.ClearVulnerabilityID()
	return vmuo
}

// Where appends a list predicates to the VulnerabilityMetadataUpdate builder.
func (vmuo *VulnerabilityMetadataUpdateOne) Where(ps ...predicate.VulnerabilityMetadata) *VulnerabilityMetadataUpdateOne {
	vmuo.mutation.Where(ps...)
	return vmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vmuo *VulnerabilityMetadataUpdateOne) Select(field string, fields ...string) *VulnerabilityMetadataUpdateOne {
	vmuo.fields = append([]string{field}, fields...)
	return vmuo
}

// Save executes the query and returns the updated VulnerabilityMetadata entity.
func (vmuo *VulnerabilityMetadataUpdateOne) Save(ctx context.Context) (*VulnerabilityMetadata, error) {
	return withHooks(ctx, vmuo.sqlSave, vmuo.mutation, vmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmuo *VulnerabilityMetadataUpdateOne) SaveX(ctx context.Context) *VulnerabilityMetadata {
	node, err := vmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vmuo *VulnerabilityMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := vmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmuo *VulnerabilityMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := vmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmuo *VulnerabilityMetadataUpdateOne) check() error {
	if v, ok := vmuo.mutation.ScoreType(); ok {
		if err := vulnerabilitymetadata.ScoreTypeValidator(v); err != nil {
			return &ValidationError{Name: "score_type", err: fmt.Errorf(`ent: validator failed for field "VulnerabilityMetadata.score_type": %w`, err)}
		}
	}
	if _, ok := vmuo.mutation.VulnerabilityIDID(); vmuo.mutation.VulnerabilityIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VulnerabilityMetadata.vulnerability_id"`)
	}
	return nil
}

func (vmuo *VulnerabilityMetadataUpdateOne) sqlSave(ctx context.Context) (_node *VulnerabilityMetadata, err error) {
	if err := vmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerabilitymetadata.Table, vulnerabilitymetadata.Columns, sqlgraph.NewFieldSpec(vulnerabilitymetadata.FieldID, field.TypeUUID))
	id, ok := vmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VulnerabilityMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerabilitymetadata.FieldID)
		for _, f := range fields {
			if !vulnerabilitymetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerabilitymetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmuo.mutation.ScoreType(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldScoreType, field.TypeEnum, value)
	}
	if value, ok := vmuo.mutation.ScoreValue(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldScoreValue, field.TypeFloat64, value)
	}
	if value, ok := vmuo.mutation.AddedScoreValue(); ok {
		_spec.AddField(vulnerabilitymetadata.FieldScoreValue, field.TypeFloat64, value)
	}
	if value, ok := vmuo.mutation.Timestamp(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := vmuo.mutation.Origin(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldOrigin, field.TypeString, value)
	}
	if value, ok := vmuo.mutation.Collector(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldCollector, field.TypeString, value)
	}
	if value, ok := vmuo.mutation.DocumentRef(); ok {
		_spec.SetField(vulnerabilitymetadata.FieldDocumentRef, field.TypeString, value)
	}
	if vmuo.mutation.VulnerabilityIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerabilitymetadata.VulnerabilityIDTable,
			Columns: []string{vulnerabilitymetadata.VulnerabilityIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmuo.mutation.VulnerabilityIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerabilitymetadata.VulnerabilityIDTable,
			Columns: []string{vulnerabilitymetadata.VulnerabilityIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VulnerabilityMetadata{config: vmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerabilitymetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vmuo.mutation.done = true
	return _node, nil
}

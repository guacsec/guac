// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// HashEqualDelete is the builder for deleting a HashEqual entity.
type HashEqualDelete struct {
	config
	hooks    []Hook
	mutation *HashEqualMutation
}

// Where appends a list predicates to the HashEqualDelete builder.
func (hed *HashEqualDelete) Where(ps ...predicate.HashEqual) *HashEqualDelete {
	hed.mutation.Where(ps...)
	return hed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hed *HashEqualDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hed.sqlExec, hed.mutation, hed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hed *HashEqualDelete) ExecX(ctx context.Context) int {
	n, err := hed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hed *HashEqualDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hashequal.Table, sqlgraph.NewFieldSpec(hashequal.FieldID, field.TypeInt))
	if ps := hed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hed.mutation.done = true
	return affected, err
}

// HashEqualDeleteOne is the builder for deleting a single HashEqual entity.
type HashEqualDeleteOne struct {
	hed *HashEqualDelete
}

// Where appends a list predicates to the HashEqualDelete builder.
func (hedo *HashEqualDeleteOne) Where(ps ...predicate.HashEqual) *HashEqualDeleteOne {
	hedo.hed.mutation.Where(ps...)
	return hedo
}

// Exec executes the deletion query.
func (hedo *HashEqualDeleteOne) Exec(ctx context.Context) error {
	n, err := hedo.hed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hashequal.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hedo *HashEqualDeleteOne) ExecX(ctx context.Context) {
	if err := hedo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// PackageVersion is the model entity for the PackageVersion schema.
type PackageVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// NameID holds the value of the "name_id" field.
	NameID uuid.UUID `json:"name_id,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Subpath holds the value of the "subpath" field.
	Subpath string `json:"subpath,omitempty"`
	// Qualifiers holds the value of the "qualifiers" field.
	Qualifiers []model.PackageQualifier `json:"qualifiers,omitempty"`
	// A SHA1 of the qualifiers, subpath, version fields after sorting keys, used to ensure uniqueness of version records.
	Hash string `json:"hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackageVersionQuery when eager-loading is set.
	Edges        PackageVersionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PackageVersionEdges holds the relations/edges for other nodes in the graph.
type PackageVersionEdges struct {
	// Name holds the value of the name edge.
	Name *PackageName `json:"name,omitempty"`
	// Occurrences holds the value of the occurrences edge.
	Occurrences []*Occurrence `json:"occurrences,omitempty"`
	// Sbom holds the value of the sbom edge.
	Sbom []*BillOfMaterials `json:"sbom,omitempty"`
	// Vuln holds the value of the vuln edge.
	Vuln []*CertifyVuln `json:"vuln,omitempty"`
	// Vex holds the value of the vex edge.
	Vex []*CertifyVex `json:"vex,omitempty"`
	// HasSourceAt holds the value of the has_source_at edge.
	HasSourceAt []*HasSourceAt `json:"has_source_at,omitempty"`
	// Certification holds the value of the certification edge.
	Certification []*Certification `json:"certification,omitempty"`
	// Metadata holds the value of the metadata edge.
	Metadata []*HasMetadata `json:"metadata,omitempty"`
	// Dependency holds the value of the dependency edge.
	Dependency []*Dependency `json:"dependency,omitempty"`
	// DependencySubject holds the value of the dependency_subject edge.
	DependencySubject []*Dependency `json:"dependency_subject,omitempty"`
	// IncludedInSboms holds the value of the included_in_sboms edge.
	IncludedInSboms []*BillOfMaterials `json:"included_in_sboms,omitempty"`
	// PkgEqualPkgA holds the value of the pkg_equal_pkg_a edge.
	PkgEqualPkgA []*PkgEqual `json:"pkg_equal_pkg_a,omitempty"`
	// PkgEqualPkgB holds the value of the pkg_equal_pkg_b edge.
	PkgEqualPkgB []*PkgEqual `json:"pkg_equal_pkg_b,omitempty"`
	// Poc holds the value of the poc edge.
	Poc []*PointOfContact `json:"poc,omitempty"`
	// CertifyLegal holds the value of the certify_legal edge.
	CertifyLegal []*CertifyLegal `json:"certify_legal,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [15]bool
	// totalCount holds the count of the edges above.
	totalCount [15]map[string]int

	namedOccurrences       map[string][]*Occurrence
	namedSbom              map[string][]*BillOfMaterials
	namedVuln              map[string][]*CertifyVuln
	namedVex               map[string][]*CertifyVex
	namedHasSourceAt       map[string][]*HasSourceAt
	namedCertification     map[string][]*Certification
	namedMetadata          map[string][]*HasMetadata
	namedDependency        map[string][]*Dependency
	namedDependencySubject map[string][]*Dependency
	namedIncludedInSboms   map[string][]*BillOfMaterials
	namedPkgEqualPkgA      map[string][]*PkgEqual
	namedPkgEqualPkgB      map[string][]*PkgEqual
	namedPoc               map[string][]*PointOfContact
	namedCertifyLegal      map[string][]*CertifyLegal
}

// NameOrErr returns the Name value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackageVersionEdges) NameOrErr() (*PackageName, error) {
	if e.Name != nil {
		return e.Name, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: packagename.Label}
	}
	return nil, &NotLoadedError{edge: "name"}
}

// OccurrencesOrErr returns the Occurrences value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) OccurrencesOrErr() ([]*Occurrence, error) {
	if e.loadedTypes[1] {
		return e.Occurrences, nil
	}
	return nil, &NotLoadedError{edge: "occurrences"}
}

// SbomOrErr returns the Sbom value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) SbomOrErr() ([]*BillOfMaterials, error) {
	if e.loadedTypes[2] {
		return e.Sbom, nil
	}
	return nil, &NotLoadedError{edge: "sbom"}
}

// VulnOrErr returns the Vuln value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) VulnOrErr() ([]*CertifyVuln, error) {
	if e.loadedTypes[3] {
		return e.Vuln, nil
	}
	return nil, &NotLoadedError{edge: "vuln"}
}

// VexOrErr returns the Vex value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) VexOrErr() ([]*CertifyVex, error) {
	if e.loadedTypes[4] {
		return e.Vex, nil
	}
	return nil, &NotLoadedError{edge: "vex"}
}

// HasSourceAtOrErr returns the HasSourceAt value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) HasSourceAtOrErr() ([]*HasSourceAt, error) {
	if e.loadedTypes[5] {
		return e.HasSourceAt, nil
	}
	return nil, &NotLoadedError{edge: "has_source_at"}
}

// CertificationOrErr returns the Certification value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) CertificationOrErr() ([]*Certification, error) {
	if e.loadedTypes[6] {
		return e.Certification, nil
	}
	return nil, &NotLoadedError{edge: "certification"}
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) MetadataOrErr() ([]*HasMetadata, error) {
	if e.loadedTypes[7] {
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// DependencyOrErr returns the Dependency value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) DependencyOrErr() ([]*Dependency, error) {
	if e.loadedTypes[8] {
		return e.Dependency, nil
	}
	return nil, &NotLoadedError{edge: "dependency"}
}

// DependencySubjectOrErr returns the DependencySubject value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) DependencySubjectOrErr() ([]*Dependency, error) {
	if e.loadedTypes[9] {
		return e.DependencySubject, nil
	}
	return nil, &NotLoadedError{edge: "dependency_subject"}
}

// IncludedInSbomsOrErr returns the IncludedInSboms value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) IncludedInSbomsOrErr() ([]*BillOfMaterials, error) {
	if e.loadedTypes[10] {
		return e.IncludedInSboms, nil
	}
	return nil, &NotLoadedError{edge: "included_in_sboms"}
}

// PkgEqualPkgAOrErr returns the PkgEqualPkgA value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) PkgEqualPkgAOrErr() ([]*PkgEqual, error) {
	if e.loadedTypes[11] {
		return e.PkgEqualPkgA, nil
	}
	return nil, &NotLoadedError{edge: "pkg_equal_pkg_a"}
}

// PkgEqualPkgBOrErr returns the PkgEqualPkgB value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) PkgEqualPkgBOrErr() ([]*PkgEqual, error) {
	if e.loadedTypes[12] {
		return e.PkgEqualPkgB, nil
	}
	return nil, &NotLoadedError{edge: "pkg_equal_pkg_b"}
}

// PocOrErr returns the Poc value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) PocOrErr() ([]*PointOfContact, error) {
	if e.loadedTypes[13] {
		return e.Poc, nil
	}
	return nil, &NotLoadedError{edge: "poc"}
}

// CertifyLegalOrErr returns the CertifyLegal value or an error if the edge
// was not loaded in eager-loading.
func (e PackageVersionEdges) CertifyLegalOrErr() ([]*CertifyLegal, error) {
	if e.loadedTypes[14] {
		return e.CertifyLegal, nil
	}
	return nil, &NotLoadedError{edge: "certify_legal"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PackageVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case packageversion.FieldQualifiers:
			values[i] = new([]byte)
		case packageversion.FieldVersion, packageversion.FieldSubpath, packageversion.FieldHash:
			values[i] = new(sql.NullString)
		case packageversion.FieldID, packageversion.FieldNameID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PackageVersion fields.
func (pv *PackageVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packageversion.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pv.ID = *value
			}
		case packageversion.FieldNameID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field name_id", values[i])
			} else if value != nil {
				pv.NameID = *value
			}
		case packageversion.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pv.Version = value.String
			}
		case packageversion.FieldSubpath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subpath", values[i])
			} else if value.Valid {
				pv.Subpath = value.String
			}
		case packageversion.FieldQualifiers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field qualifiers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pv.Qualifiers); err != nil {
					return fmt.Errorf("unmarshal field qualifiers: %w", err)
				}
			}
		case packageversion.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				pv.Hash = value.String
			}
		default:
			pv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PackageVersion.
// This includes values selected through modifiers, order, etc.
func (pv *PackageVersion) Value(name string) (ent.Value, error) {
	return pv.selectValues.Get(name)
}

// QueryName queries the "name" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryName() *PackageNameQuery {
	return NewPackageVersionClient(pv.config).QueryName(pv)
}

// QueryOccurrences queries the "occurrences" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryOccurrences() *OccurrenceQuery {
	return NewPackageVersionClient(pv.config).QueryOccurrences(pv)
}

// QuerySbom queries the "sbom" edge of the PackageVersion entity.
func (pv *PackageVersion) QuerySbom() *BillOfMaterialsQuery {
	return NewPackageVersionClient(pv.config).QuerySbom(pv)
}

// QueryVuln queries the "vuln" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryVuln() *CertifyVulnQuery {
	return NewPackageVersionClient(pv.config).QueryVuln(pv)
}

// QueryVex queries the "vex" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryVex() *CertifyVexQuery {
	return NewPackageVersionClient(pv.config).QueryVex(pv)
}

// QueryHasSourceAt queries the "has_source_at" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryHasSourceAt() *HasSourceAtQuery {
	return NewPackageVersionClient(pv.config).QueryHasSourceAt(pv)
}

// QueryCertification queries the "certification" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryCertification() *CertificationQuery {
	return NewPackageVersionClient(pv.config).QueryCertification(pv)
}

// QueryMetadata queries the "metadata" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryMetadata() *HasMetadataQuery {
	return NewPackageVersionClient(pv.config).QueryMetadata(pv)
}

// QueryDependency queries the "dependency" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryDependency() *DependencyQuery {
	return NewPackageVersionClient(pv.config).QueryDependency(pv)
}

// QueryDependencySubject queries the "dependency_subject" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryDependencySubject() *DependencyQuery {
	return NewPackageVersionClient(pv.config).QueryDependencySubject(pv)
}

// QueryIncludedInSboms queries the "included_in_sboms" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryIncludedInSboms() *BillOfMaterialsQuery {
	return NewPackageVersionClient(pv.config).QueryIncludedInSboms(pv)
}

// QueryPkgEqualPkgA queries the "pkg_equal_pkg_a" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryPkgEqualPkgA() *PkgEqualQuery {
	return NewPackageVersionClient(pv.config).QueryPkgEqualPkgA(pv)
}

// QueryPkgEqualPkgB queries the "pkg_equal_pkg_b" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryPkgEqualPkgB() *PkgEqualQuery {
	return NewPackageVersionClient(pv.config).QueryPkgEqualPkgB(pv)
}

// QueryPoc queries the "poc" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryPoc() *PointOfContactQuery {
	return NewPackageVersionClient(pv.config).QueryPoc(pv)
}

// QueryCertifyLegal queries the "certify_legal" edge of the PackageVersion entity.
func (pv *PackageVersion) QueryCertifyLegal() *CertifyLegalQuery {
	return NewPackageVersionClient(pv.config).QueryCertifyLegal(pv)
}

// Update returns a builder for updating this PackageVersion.
// Note that you need to call PackageVersion.Unwrap() before calling this method if this PackageVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *PackageVersion) Update() *PackageVersionUpdateOne {
	return NewPackageVersionClient(pv.config).UpdateOne(pv)
}

// Unwrap unwraps the PackageVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pv *PackageVersion) Unwrap() *PackageVersion {
	_tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: PackageVersion is not a transactional entity")
	}
	pv.config.driver = _tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *PackageVersion) String() string {
	var builder strings.Builder
	builder.WriteString("PackageVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pv.ID))
	builder.WriteString("name_id=")
	builder.WriteString(fmt.Sprintf("%v", pv.NameID))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(pv.Version)
	builder.WriteString(", ")
	builder.WriteString("subpath=")
	builder.WriteString(pv.Subpath)
	builder.WriteString(", ")
	builder.WriteString("qualifiers=")
	builder.WriteString(fmt.Sprintf("%v", pv.Qualifiers))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(pv.Hash)
	builder.WriteByte(')')
	return builder.String()
}

// NamedOccurrences returns the Occurrences named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedOccurrences(name string) ([]*Occurrence, error) {
	if pv.Edges.namedOccurrences == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedOccurrences[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedOccurrences(name string, edges ...*Occurrence) {
	if pv.Edges.namedOccurrences == nil {
		pv.Edges.namedOccurrences = make(map[string][]*Occurrence)
	}
	if len(edges) == 0 {
		pv.Edges.namedOccurrences[name] = []*Occurrence{}
	} else {
		pv.Edges.namedOccurrences[name] = append(pv.Edges.namedOccurrences[name], edges...)
	}
}

// NamedSbom returns the Sbom named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedSbom(name string) ([]*BillOfMaterials, error) {
	if pv.Edges.namedSbom == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedSbom[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedSbom(name string, edges ...*BillOfMaterials) {
	if pv.Edges.namedSbom == nil {
		pv.Edges.namedSbom = make(map[string][]*BillOfMaterials)
	}
	if len(edges) == 0 {
		pv.Edges.namedSbom[name] = []*BillOfMaterials{}
	} else {
		pv.Edges.namedSbom[name] = append(pv.Edges.namedSbom[name], edges...)
	}
}

// NamedVuln returns the Vuln named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedVuln(name string) ([]*CertifyVuln, error) {
	if pv.Edges.namedVuln == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedVuln[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedVuln(name string, edges ...*CertifyVuln) {
	if pv.Edges.namedVuln == nil {
		pv.Edges.namedVuln = make(map[string][]*CertifyVuln)
	}
	if len(edges) == 0 {
		pv.Edges.namedVuln[name] = []*CertifyVuln{}
	} else {
		pv.Edges.namedVuln[name] = append(pv.Edges.namedVuln[name], edges...)
	}
}

// NamedVex returns the Vex named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedVex(name string) ([]*CertifyVex, error) {
	if pv.Edges.namedVex == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedVex[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedVex(name string, edges ...*CertifyVex) {
	if pv.Edges.namedVex == nil {
		pv.Edges.namedVex = make(map[string][]*CertifyVex)
	}
	if len(edges) == 0 {
		pv.Edges.namedVex[name] = []*CertifyVex{}
	} else {
		pv.Edges.namedVex[name] = append(pv.Edges.namedVex[name], edges...)
	}
}

// NamedHasSourceAt returns the HasSourceAt named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedHasSourceAt(name string) ([]*HasSourceAt, error) {
	if pv.Edges.namedHasSourceAt == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedHasSourceAt[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedHasSourceAt(name string, edges ...*HasSourceAt) {
	if pv.Edges.namedHasSourceAt == nil {
		pv.Edges.namedHasSourceAt = make(map[string][]*HasSourceAt)
	}
	if len(edges) == 0 {
		pv.Edges.namedHasSourceAt[name] = []*HasSourceAt{}
	} else {
		pv.Edges.namedHasSourceAt[name] = append(pv.Edges.namedHasSourceAt[name], edges...)
	}
}

// NamedCertification returns the Certification named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedCertification(name string) ([]*Certification, error) {
	if pv.Edges.namedCertification == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedCertification[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedCertification(name string, edges ...*Certification) {
	if pv.Edges.namedCertification == nil {
		pv.Edges.namedCertification = make(map[string][]*Certification)
	}
	if len(edges) == 0 {
		pv.Edges.namedCertification[name] = []*Certification{}
	} else {
		pv.Edges.namedCertification[name] = append(pv.Edges.namedCertification[name], edges...)
	}
}

// NamedMetadata returns the Metadata named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedMetadata(name string) ([]*HasMetadata, error) {
	if pv.Edges.namedMetadata == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedMetadata[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedMetadata(name string, edges ...*HasMetadata) {
	if pv.Edges.namedMetadata == nil {
		pv.Edges.namedMetadata = make(map[string][]*HasMetadata)
	}
	if len(edges) == 0 {
		pv.Edges.namedMetadata[name] = []*HasMetadata{}
	} else {
		pv.Edges.namedMetadata[name] = append(pv.Edges.namedMetadata[name], edges...)
	}
}

// NamedDependency returns the Dependency named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedDependency(name string) ([]*Dependency, error) {
	if pv.Edges.namedDependency == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedDependency[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedDependency(name string, edges ...*Dependency) {
	if pv.Edges.namedDependency == nil {
		pv.Edges.namedDependency = make(map[string][]*Dependency)
	}
	if len(edges) == 0 {
		pv.Edges.namedDependency[name] = []*Dependency{}
	} else {
		pv.Edges.namedDependency[name] = append(pv.Edges.namedDependency[name], edges...)
	}
}

// NamedDependencySubject returns the DependencySubject named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedDependencySubject(name string) ([]*Dependency, error) {
	if pv.Edges.namedDependencySubject == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedDependencySubject[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedDependencySubject(name string, edges ...*Dependency) {
	if pv.Edges.namedDependencySubject == nil {
		pv.Edges.namedDependencySubject = make(map[string][]*Dependency)
	}
	if len(edges) == 0 {
		pv.Edges.namedDependencySubject[name] = []*Dependency{}
	} else {
		pv.Edges.namedDependencySubject[name] = append(pv.Edges.namedDependencySubject[name], edges...)
	}
}

// NamedIncludedInSboms returns the IncludedInSboms named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedIncludedInSboms(name string) ([]*BillOfMaterials, error) {
	if pv.Edges.namedIncludedInSboms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedIncludedInSboms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedIncludedInSboms(name string, edges ...*BillOfMaterials) {
	if pv.Edges.namedIncludedInSboms == nil {
		pv.Edges.namedIncludedInSboms = make(map[string][]*BillOfMaterials)
	}
	if len(edges) == 0 {
		pv.Edges.namedIncludedInSboms[name] = []*BillOfMaterials{}
	} else {
		pv.Edges.namedIncludedInSboms[name] = append(pv.Edges.namedIncludedInSboms[name], edges...)
	}
}

// NamedPkgEqualPkgA returns the PkgEqualPkgA named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedPkgEqualPkgA(name string) ([]*PkgEqual, error) {
	if pv.Edges.namedPkgEqualPkgA == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedPkgEqualPkgA[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedPkgEqualPkgA(name string, edges ...*PkgEqual) {
	if pv.Edges.namedPkgEqualPkgA == nil {
		pv.Edges.namedPkgEqualPkgA = make(map[string][]*PkgEqual)
	}
	if len(edges) == 0 {
		pv.Edges.namedPkgEqualPkgA[name] = []*PkgEqual{}
	} else {
		pv.Edges.namedPkgEqualPkgA[name] = append(pv.Edges.namedPkgEqualPkgA[name], edges...)
	}
}

// NamedPkgEqualPkgB returns the PkgEqualPkgB named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedPkgEqualPkgB(name string) ([]*PkgEqual, error) {
	if pv.Edges.namedPkgEqualPkgB == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedPkgEqualPkgB[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedPkgEqualPkgB(name string, edges ...*PkgEqual) {
	if pv.Edges.namedPkgEqualPkgB == nil {
		pv.Edges.namedPkgEqualPkgB = make(map[string][]*PkgEqual)
	}
	if len(edges) == 0 {
		pv.Edges.namedPkgEqualPkgB[name] = []*PkgEqual{}
	} else {
		pv.Edges.namedPkgEqualPkgB[name] = append(pv.Edges.namedPkgEqualPkgB[name], edges...)
	}
}

// NamedPoc returns the Poc named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedPoc(name string) ([]*PointOfContact, error) {
	if pv.Edges.namedPoc == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedPoc[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedPoc(name string, edges ...*PointOfContact) {
	if pv.Edges.namedPoc == nil {
		pv.Edges.namedPoc = make(map[string][]*PointOfContact)
	}
	if len(edges) == 0 {
		pv.Edges.namedPoc[name] = []*PointOfContact{}
	} else {
		pv.Edges.namedPoc[name] = append(pv.Edges.namedPoc[name], edges...)
	}
}

// NamedCertifyLegal returns the CertifyLegal named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *PackageVersion) NamedCertifyLegal(name string) ([]*CertifyLegal, error) {
	if pv.Edges.namedCertifyLegal == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedCertifyLegal[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *PackageVersion) appendNamedCertifyLegal(name string, edges ...*CertifyLegal) {
	if pv.Edges.namedCertifyLegal == nil {
		pv.Edges.namedCertifyLegal = make(map[string][]*CertifyLegal)
	}
	if len(edges) == 0 {
		pv.Edges.namedCertifyLegal[name] = []*CertifyLegal{}
	} else {
		pv.Edges.namedCertifyLegal[name] = append(pv.Edges.namedCertifyLegal[name], edges...)
	}
}

// PackageVersions is a parsable slice of PackageVersion.
type PackageVersions []*PackageVersion

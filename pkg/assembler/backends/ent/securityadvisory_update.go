// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/securityadvisory"
)

// SecurityAdvisoryUpdate is the builder for updating SecurityAdvisory entities.
type SecurityAdvisoryUpdate struct {
	config
	hooks    []Hook
	mutation *SecurityAdvisoryMutation
}

// Where appends a list predicates to the SecurityAdvisoryUpdate builder.
func (sau *SecurityAdvisoryUpdate) Where(ps ...predicate.SecurityAdvisory) *SecurityAdvisoryUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetGhsaID sets the "ghsa_id" field.
func (sau *SecurityAdvisoryUpdate) SetGhsaID(s string) *SecurityAdvisoryUpdate {
	sau.mutation.SetGhsaID(s)
	return sau
}

// SetNillableGhsaID sets the "ghsa_id" field if the given value is not nil.
func (sau *SecurityAdvisoryUpdate) SetNillableGhsaID(s *string) *SecurityAdvisoryUpdate {
	if s != nil {
		sau.SetGhsaID(*s)
	}
	return sau
}

// ClearGhsaID clears the value of the "ghsa_id" field.
func (sau *SecurityAdvisoryUpdate) ClearGhsaID() *SecurityAdvisoryUpdate {
	sau.mutation.ClearGhsaID()
	return sau
}

// SetCveID sets the "cve_id" field.
func (sau *SecurityAdvisoryUpdate) SetCveID(s string) *SecurityAdvisoryUpdate {
	sau.mutation.SetCveID(s)
	return sau
}

// SetNillableCveID sets the "cve_id" field if the given value is not nil.
func (sau *SecurityAdvisoryUpdate) SetNillableCveID(s *string) *SecurityAdvisoryUpdate {
	if s != nil {
		sau.SetCveID(*s)
	}
	return sau
}

// ClearCveID clears the value of the "cve_id" field.
func (sau *SecurityAdvisoryUpdate) ClearCveID() *SecurityAdvisoryUpdate {
	sau.mutation.ClearCveID()
	return sau
}

// SetCveYear sets the "cve_year" field.
func (sau *SecurityAdvisoryUpdate) SetCveYear(i int) *SecurityAdvisoryUpdate {
	sau.mutation.ResetCveYear()
	sau.mutation.SetCveYear(i)
	return sau
}

// SetNillableCveYear sets the "cve_year" field if the given value is not nil.
func (sau *SecurityAdvisoryUpdate) SetNillableCveYear(i *int) *SecurityAdvisoryUpdate {
	if i != nil {
		sau.SetCveYear(*i)
	}
	return sau
}

// AddCveYear adds i to the "cve_year" field.
func (sau *SecurityAdvisoryUpdate) AddCveYear(i int) *SecurityAdvisoryUpdate {
	sau.mutation.AddCveYear(i)
	return sau
}

// ClearCveYear clears the value of the "cve_year" field.
func (sau *SecurityAdvisoryUpdate) ClearCveYear() *SecurityAdvisoryUpdate {
	sau.mutation.ClearCveYear()
	return sau
}

// Mutation returns the SecurityAdvisoryMutation object of the builder.
func (sau *SecurityAdvisoryUpdate) Mutation() *SecurityAdvisoryMutation {
	return sau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SecurityAdvisoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SecurityAdvisoryUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SecurityAdvisoryUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SecurityAdvisoryUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sau *SecurityAdvisoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(securityadvisory.Table, securityadvisory.Columns, sqlgraph.NewFieldSpec(securityadvisory.FieldID, field.TypeInt))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.GhsaID(); ok {
		_spec.SetField(securityadvisory.FieldGhsaID, field.TypeString, value)
	}
	if sau.mutation.GhsaIDCleared() {
		_spec.ClearField(securityadvisory.FieldGhsaID, field.TypeString)
	}
	if value, ok := sau.mutation.CveID(); ok {
		_spec.SetField(securityadvisory.FieldCveID, field.TypeString, value)
	}
	if sau.mutation.CveIDCleared() {
		_spec.ClearField(securityadvisory.FieldCveID, field.TypeString)
	}
	if value, ok := sau.mutation.CveYear(); ok {
		_spec.SetField(securityadvisory.FieldCveYear, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedCveYear(); ok {
		_spec.AddField(securityadvisory.FieldCveYear, field.TypeInt, value)
	}
	if sau.mutation.CveYearCleared() {
		_spec.ClearField(securityadvisory.FieldCveYear, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{securityadvisory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// SecurityAdvisoryUpdateOne is the builder for updating a single SecurityAdvisory entity.
type SecurityAdvisoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SecurityAdvisoryMutation
}

// SetGhsaID sets the "ghsa_id" field.
func (sauo *SecurityAdvisoryUpdateOne) SetGhsaID(s string) *SecurityAdvisoryUpdateOne {
	sauo.mutation.SetGhsaID(s)
	return sauo
}

// SetNillableGhsaID sets the "ghsa_id" field if the given value is not nil.
func (sauo *SecurityAdvisoryUpdateOne) SetNillableGhsaID(s *string) *SecurityAdvisoryUpdateOne {
	if s != nil {
		sauo.SetGhsaID(*s)
	}
	return sauo
}

// ClearGhsaID clears the value of the "ghsa_id" field.
func (sauo *SecurityAdvisoryUpdateOne) ClearGhsaID() *SecurityAdvisoryUpdateOne {
	sauo.mutation.ClearGhsaID()
	return sauo
}

// SetCveID sets the "cve_id" field.
func (sauo *SecurityAdvisoryUpdateOne) SetCveID(s string) *SecurityAdvisoryUpdateOne {
	sauo.mutation.SetCveID(s)
	return sauo
}

// SetNillableCveID sets the "cve_id" field if the given value is not nil.
func (sauo *SecurityAdvisoryUpdateOne) SetNillableCveID(s *string) *SecurityAdvisoryUpdateOne {
	if s != nil {
		sauo.SetCveID(*s)
	}
	return sauo
}

// ClearCveID clears the value of the "cve_id" field.
func (sauo *SecurityAdvisoryUpdateOne) ClearCveID() *SecurityAdvisoryUpdateOne {
	sauo.mutation.ClearCveID()
	return sauo
}

// SetCveYear sets the "cve_year" field.
func (sauo *SecurityAdvisoryUpdateOne) SetCveYear(i int) *SecurityAdvisoryUpdateOne {
	sauo.mutation.ResetCveYear()
	sauo.mutation.SetCveYear(i)
	return sauo
}

// SetNillableCveYear sets the "cve_year" field if the given value is not nil.
func (sauo *SecurityAdvisoryUpdateOne) SetNillableCveYear(i *int) *SecurityAdvisoryUpdateOne {
	if i != nil {
		sauo.SetCveYear(*i)
	}
	return sauo
}

// AddCveYear adds i to the "cve_year" field.
func (sauo *SecurityAdvisoryUpdateOne) AddCveYear(i int) *SecurityAdvisoryUpdateOne {
	sauo.mutation.AddCveYear(i)
	return sauo
}

// ClearCveYear clears the value of the "cve_year" field.
func (sauo *SecurityAdvisoryUpdateOne) ClearCveYear() *SecurityAdvisoryUpdateOne {
	sauo.mutation.ClearCveYear()
	return sauo
}

// Mutation returns the SecurityAdvisoryMutation object of the builder.
func (sauo *SecurityAdvisoryUpdateOne) Mutation() *SecurityAdvisoryMutation {
	return sauo.mutation
}

// Where appends a list predicates to the SecurityAdvisoryUpdate builder.
func (sauo *SecurityAdvisoryUpdateOne) Where(ps ...predicate.SecurityAdvisory) *SecurityAdvisoryUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SecurityAdvisoryUpdateOne) Select(field string, fields ...string) *SecurityAdvisoryUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SecurityAdvisory entity.
func (sauo *SecurityAdvisoryUpdateOne) Save(ctx context.Context) (*SecurityAdvisory, error) {
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SecurityAdvisoryUpdateOne) SaveX(ctx context.Context) *SecurityAdvisory {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SecurityAdvisoryUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SecurityAdvisoryUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sauo *SecurityAdvisoryUpdateOne) sqlSave(ctx context.Context) (_node *SecurityAdvisory, err error) {
	_spec := sqlgraph.NewUpdateSpec(securityadvisory.Table, securityadvisory.Columns, sqlgraph.NewFieldSpec(securityadvisory.FieldID, field.TypeInt))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SecurityAdvisory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, securityadvisory.FieldID)
		for _, f := range fields {
			if !securityadvisory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != securityadvisory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.GhsaID(); ok {
		_spec.SetField(securityadvisory.FieldGhsaID, field.TypeString, value)
	}
	if sauo.mutation.GhsaIDCleared() {
		_spec.ClearField(securityadvisory.FieldGhsaID, field.TypeString)
	}
	if value, ok := sauo.mutation.CveID(); ok {
		_spec.SetField(securityadvisory.FieldCveID, field.TypeString, value)
	}
	if sauo.mutation.CveIDCleared() {
		_spec.ClearField(securityadvisory.FieldCveID, field.TypeString)
	}
	if value, ok := sauo.mutation.CveYear(); ok {
		_spec.SetField(securityadvisory.FieldCveYear, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedCveYear(); ok {
		_spec.AddField(securityadvisory.FieldCveYear, field.TypeInt, value)
	}
	if sauo.mutation.CveYearCleared() {
		_spec.ClearField(securityadvisory.FieldCveYear, field.TypeInt)
	}
	_node = &SecurityAdvisory{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{securityadvisory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}

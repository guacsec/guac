// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvuln"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
)

// CertifyVulnCreate is the builder for creating a CertifyVuln entity.
type CertifyVulnCreate struct {
	config
	mutation *CertifyVulnMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (cvc *CertifyVulnCreate) SetVulnerabilityID(i int) *CertifyVulnCreate {
	cvc.mutation.SetVulnerabilityID(i)
	return cvc
}

// SetPackageID sets the "package_id" field.
func (cvc *CertifyVulnCreate) SetPackageID(i int) *CertifyVulnCreate {
	cvc.mutation.SetPackageID(i)
	return cvc
}

// SetTimeScanned sets the "time_scanned" field.
func (cvc *CertifyVulnCreate) SetTimeScanned(t time.Time) *CertifyVulnCreate {
	cvc.mutation.SetTimeScanned(t)
	return cvc
}

// SetDbURI sets the "db_uri" field.
func (cvc *CertifyVulnCreate) SetDbURI(s string) *CertifyVulnCreate {
	cvc.mutation.SetDbURI(s)
	return cvc
}

// SetDbVersion sets the "db_version" field.
func (cvc *CertifyVulnCreate) SetDbVersion(s string) *CertifyVulnCreate {
	cvc.mutation.SetDbVersion(s)
	return cvc
}

// SetScannerURI sets the "scanner_uri" field.
func (cvc *CertifyVulnCreate) SetScannerURI(s string) *CertifyVulnCreate {
	cvc.mutation.SetScannerURI(s)
	return cvc
}

// SetScannerVersion sets the "scanner_version" field.
func (cvc *CertifyVulnCreate) SetScannerVersion(s string) *CertifyVulnCreate {
	cvc.mutation.SetScannerVersion(s)
	return cvc
}

// SetOrigin sets the "origin" field.
func (cvc *CertifyVulnCreate) SetOrigin(s string) *CertifyVulnCreate {
	cvc.mutation.SetOrigin(s)
	return cvc
}

// SetCollector sets the "collector" field.
func (cvc *CertifyVulnCreate) SetCollector(s string) *CertifyVulnCreate {
	cvc.mutation.SetCollector(s)
	return cvc
}

// SetVulnerability sets the "vulnerability" edge to the VulnerabilityID entity.
func (cvc *CertifyVulnCreate) SetVulnerability(v *VulnerabilityID) *CertifyVulnCreate {
	return cvc.SetVulnerabilityID(v.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (cvc *CertifyVulnCreate) SetPackage(p *PackageVersion) *CertifyVulnCreate {
	return cvc.SetPackageID(p.ID)
}

// Mutation returns the CertifyVulnMutation object of the builder.
func (cvc *CertifyVulnCreate) Mutation() *CertifyVulnMutation {
	return cvc.mutation
}

// Save creates the CertifyVuln in the database.
func (cvc *CertifyVulnCreate) Save(ctx context.Context) (*CertifyVuln, error) {
	return withHooks(ctx, cvc.sqlSave, cvc.mutation, cvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cvc *CertifyVulnCreate) SaveX(ctx context.Context) *CertifyVuln {
	v, err := cvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvc *CertifyVulnCreate) Exec(ctx context.Context) error {
	_, err := cvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvc *CertifyVulnCreate) ExecX(ctx context.Context) {
	if err := cvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvc *CertifyVulnCreate) check() error {
	if _, ok := cvc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability_id", err: errors.New(`ent: missing required field "CertifyVuln.vulnerability_id"`)}
	}
	if _, ok := cvc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package_id", err: errors.New(`ent: missing required field "CertifyVuln.package_id"`)}
	}
	if _, ok := cvc.mutation.TimeScanned(); !ok {
		return &ValidationError{Name: "time_scanned", err: errors.New(`ent: missing required field "CertifyVuln.time_scanned"`)}
	}
	if _, ok := cvc.mutation.DbURI(); !ok {
		return &ValidationError{Name: "db_uri", err: errors.New(`ent: missing required field "CertifyVuln.db_uri"`)}
	}
	if _, ok := cvc.mutation.DbVersion(); !ok {
		return &ValidationError{Name: "db_version", err: errors.New(`ent: missing required field "CertifyVuln.db_version"`)}
	}
	if _, ok := cvc.mutation.ScannerURI(); !ok {
		return &ValidationError{Name: "scanner_uri", err: errors.New(`ent: missing required field "CertifyVuln.scanner_uri"`)}
	}
	if _, ok := cvc.mutation.ScannerVersion(); !ok {
		return &ValidationError{Name: "scanner_version", err: errors.New(`ent: missing required field "CertifyVuln.scanner_version"`)}
	}
	if _, ok := cvc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "CertifyVuln.origin"`)}
	}
	if _, ok := cvc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "CertifyVuln.collector"`)}
	}
	if _, ok := cvc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability", err: errors.New(`ent: missing required edge "CertifyVuln.vulnerability"`)}
	}
	if _, ok := cvc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package", err: errors.New(`ent: missing required edge "CertifyVuln.package"`)}
	}
	return nil
}

func (cvc *CertifyVulnCreate) sqlSave(ctx context.Context) (*CertifyVuln, error) {
	if err := cvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cvc.mutation.id = &_node.ID
	cvc.mutation.done = true
	return _node, nil
}

func (cvc *CertifyVulnCreate) createSpec() (*CertifyVuln, *sqlgraph.CreateSpec) {
	var (
		_node = &CertifyVuln{config: cvc.config}
		_spec = sqlgraph.NewCreateSpec(certifyvuln.Table, sqlgraph.NewFieldSpec(certifyvuln.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cvc.conflict
	if value, ok := cvc.mutation.TimeScanned(); ok {
		_spec.SetField(certifyvuln.FieldTimeScanned, field.TypeTime, value)
		_node.TimeScanned = value
	}
	if value, ok := cvc.mutation.DbURI(); ok {
		_spec.SetField(certifyvuln.FieldDbURI, field.TypeString, value)
		_node.DbURI = value
	}
	if value, ok := cvc.mutation.DbVersion(); ok {
		_spec.SetField(certifyvuln.FieldDbVersion, field.TypeString, value)
		_node.DbVersion = value
	}
	if value, ok := cvc.mutation.ScannerURI(); ok {
		_spec.SetField(certifyvuln.FieldScannerURI, field.TypeString, value)
		_node.ScannerURI = value
	}
	if value, ok := cvc.mutation.ScannerVersion(); ok {
		_spec.SetField(certifyvuln.FieldScannerVersion, field.TypeString, value)
		_node.ScannerVersion = value
	}
	if value, ok := cvc.mutation.Origin(); ok {
		_spec.SetField(certifyvuln.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := cvc.mutation.Collector(); ok {
		_spec.SetField(certifyvuln.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if nodes := cvc.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvuln.VulnerabilityTable,
			Columns: []string{certifyvuln.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VulnerabilityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cvc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvuln.PackageTable,
			Columns: []string{certifyvuln.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CertifyVuln.Create().
//		SetVulnerabilityID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertifyVulnUpsert) {
//			SetVulnerabilityID(v+v).
//		}).
//		Exec(ctx)
func (cvc *CertifyVulnCreate) OnConflict(opts ...sql.ConflictOption) *CertifyVulnUpsertOne {
	cvc.conflict = opts
	return &CertifyVulnUpsertOne{
		create: cvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CertifyVuln.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cvc *CertifyVulnCreate) OnConflictColumns(columns ...string) *CertifyVulnUpsertOne {
	cvc.conflict = append(cvc.conflict, sql.ConflictColumns(columns...))
	return &CertifyVulnUpsertOne{
		create: cvc,
	}
}

type (
	// CertifyVulnUpsertOne is the builder for "upsert"-ing
	//  one CertifyVuln node.
	CertifyVulnUpsertOne struct {
		create *CertifyVulnCreate
	}

	// CertifyVulnUpsert is the "OnConflict" setter.
	CertifyVulnUpsert struct {
		*sql.UpdateSet
	}
)

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *CertifyVulnUpsert) SetVulnerabilityID(v int) *CertifyVulnUpsert {
	u.Set(certifyvuln.FieldVulnerabilityID, v)
	return u
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *CertifyVulnUpsert) UpdateVulnerabilityID() *CertifyVulnUpsert {
	u.SetExcluded(certifyvuln.FieldVulnerabilityID)
	return u
}

// SetPackageID sets the "package_id" field.
func (u *CertifyVulnUpsert) SetPackageID(v int) *CertifyVulnUpsert {
	u.Set(certifyvuln.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *CertifyVulnUpsert) UpdatePackageID() *CertifyVulnUpsert {
	u.SetExcluded(certifyvuln.FieldPackageID)
	return u
}

// SetTimeScanned sets the "time_scanned" field.
func (u *CertifyVulnUpsert) SetTimeScanned(v time.Time) *CertifyVulnUpsert {
	u.Set(certifyvuln.FieldTimeScanned, v)
	return u
}

// UpdateTimeScanned sets the "time_scanned" field to the value that was provided on create.
func (u *CertifyVulnUpsert) UpdateTimeScanned() *CertifyVulnUpsert {
	u.SetExcluded(certifyvuln.FieldTimeScanned)
	return u
}

// SetDbURI sets the "db_uri" field.
func (u *CertifyVulnUpsert) SetDbURI(v string) *CertifyVulnUpsert {
	u.Set(certifyvuln.FieldDbURI, v)
	return u
}

// UpdateDbURI sets the "db_uri" field to the value that was provided on create.
func (u *CertifyVulnUpsert) UpdateDbURI() *CertifyVulnUpsert {
	u.SetExcluded(certifyvuln.FieldDbURI)
	return u
}

// SetDbVersion sets the "db_version" field.
func (u *CertifyVulnUpsert) SetDbVersion(v string) *CertifyVulnUpsert {
	u.Set(certifyvuln.FieldDbVersion, v)
	return u
}

// UpdateDbVersion sets the "db_version" field to the value that was provided on create.
func (u *CertifyVulnUpsert) UpdateDbVersion() *CertifyVulnUpsert {
	u.SetExcluded(certifyvuln.FieldDbVersion)
	return u
}

// SetScannerURI sets the "scanner_uri" field.
func (u *CertifyVulnUpsert) SetScannerURI(v string) *CertifyVulnUpsert {
	u.Set(certifyvuln.FieldScannerURI, v)
	return u
}

// UpdateScannerURI sets the "scanner_uri" field to the value that was provided on create.
func (u *CertifyVulnUpsert) UpdateScannerURI() *CertifyVulnUpsert {
	u.SetExcluded(certifyvuln.FieldScannerURI)
	return u
}

// SetScannerVersion sets the "scanner_version" field.
func (u *CertifyVulnUpsert) SetScannerVersion(v string) *CertifyVulnUpsert {
	u.Set(certifyvuln.FieldScannerVersion, v)
	return u
}

// UpdateScannerVersion sets the "scanner_version" field to the value that was provided on create.
func (u *CertifyVulnUpsert) UpdateScannerVersion() *CertifyVulnUpsert {
	u.SetExcluded(certifyvuln.FieldScannerVersion)
	return u
}

// SetOrigin sets the "origin" field.
func (u *CertifyVulnUpsert) SetOrigin(v string) *CertifyVulnUpsert {
	u.Set(certifyvuln.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *CertifyVulnUpsert) UpdateOrigin() *CertifyVulnUpsert {
	u.SetExcluded(certifyvuln.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *CertifyVulnUpsert) SetCollector(v string) *CertifyVulnUpsert {
	u.Set(certifyvuln.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *CertifyVulnUpsert) UpdateCollector() *CertifyVulnUpsert {
	u.SetExcluded(certifyvuln.FieldCollector)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CertifyVuln.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CertifyVulnUpsertOne) UpdateNewValues() *CertifyVulnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CertifyVuln.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CertifyVulnUpsertOne) Ignore() *CertifyVulnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertifyVulnUpsertOne) DoNothing() *CertifyVulnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertifyVulnCreate.OnConflict
// documentation for more info.
func (u *CertifyVulnUpsertOne) Update(set func(*CertifyVulnUpsert)) *CertifyVulnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertifyVulnUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *CertifyVulnUpsertOne) SetVulnerabilityID(v int) *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *CertifyVulnUpsertOne) UpdateVulnerabilityID() *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// SetPackageID sets the "package_id" field.
func (u *CertifyVulnUpsertOne) SetPackageID(v int) *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *CertifyVulnUpsertOne) UpdatePackageID() *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdatePackageID()
	})
}

// SetTimeScanned sets the "time_scanned" field.
func (u *CertifyVulnUpsertOne) SetTimeScanned(v time.Time) *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetTimeScanned(v)
	})
}

// UpdateTimeScanned sets the "time_scanned" field to the value that was provided on create.
func (u *CertifyVulnUpsertOne) UpdateTimeScanned() *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateTimeScanned()
	})
}

// SetDbURI sets the "db_uri" field.
func (u *CertifyVulnUpsertOne) SetDbURI(v string) *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetDbURI(v)
	})
}

// UpdateDbURI sets the "db_uri" field to the value that was provided on create.
func (u *CertifyVulnUpsertOne) UpdateDbURI() *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateDbURI()
	})
}

// SetDbVersion sets the "db_version" field.
func (u *CertifyVulnUpsertOne) SetDbVersion(v string) *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetDbVersion(v)
	})
}

// UpdateDbVersion sets the "db_version" field to the value that was provided on create.
func (u *CertifyVulnUpsertOne) UpdateDbVersion() *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateDbVersion()
	})
}

// SetScannerURI sets the "scanner_uri" field.
func (u *CertifyVulnUpsertOne) SetScannerURI(v string) *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetScannerURI(v)
	})
}

// UpdateScannerURI sets the "scanner_uri" field to the value that was provided on create.
func (u *CertifyVulnUpsertOne) UpdateScannerURI() *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateScannerURI()
	})
}

// SetScannerVersion sets the "scanner_version" field.
func (u *CertifyVulnUpsertOne) SetScannerVersion(v string) *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetScannerVersion(v)
	})
}

// UpdateScannerVersion sets the "scanner_version" field to the value that was provided on create.
func (u *CertifyVulnUpsertOne) UpdateScannerVersion() *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateScannerVersion()
	})
}

// SetOrigin sets the "origin" field.
func (u *CertifyVulnUpsertOne) SetOrigin(v string) *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *CertifyVulnUpsertOne) UpdateOrigin() *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *CertifyVulnUpsertOne) SetCollector(v string) *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *CertifyVulnUpsertOne) UpdateCollector() *CertifyVulnUpsertOne {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *CertifyVulnUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CertifyVulnCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertifyVulnUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CertifyVulnUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CertifyVulnUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CertifyVulnCreateBulk is the builder for creating many CertifyVuln entities in bulk.
type CertifyVulnCreateBulk struct {
	config
	err      error
	builders []*CertifyVulnCreate
	conflict []sql.ConflictOption
}

// Save creates the CertifyVuln entities in the database.
func (cvcb *CertifyVulnCreateBulk) Save(ctx context.Context) ([]*CertifyVuln, error) {
	if cvcb.err != nil {
		return nil, cvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cvcb.builders))
	nodes := make([]*CertifyVuln, len(cvcb.builders))
	mutators := make([]Mutator, len(cvcb.builders))
	for i := range cvcb.builders {
		func(i int, root context.Context) {
			builder := cvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertifyVulnMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cvcb *CertifyVulnCreateBulk) SaveX(ctx context.Context) []*CertifyVuln {
	v, err := cvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvcb *CertifyVulnCreateBulk) Exec(ctx context.Context) error {
	_, err := cvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvcb *CertifyVulnCreateBulk) ExecX(ctx context.Context) {
	if err := cvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CertifyVuln.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertifyVulnUpsert) {
//			SetVulnerabilityID(v+v).
//		}).
//		Exec(ctx)
func (cvcb *CertifyVulnCreateBulk) OnConflict(opts ...sql.ConflictOption) *CertifyVulnUpsertBulk {
	cvcb.conflict = opts
	return &CertifyVulnUpsertBulk{
		create: cvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CertifyVuln.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cvcb *CertifyVulnCreateBulk) OnConflictColumns(columns ...string) *CertifyVulnUpsertBulk {
	cvcb.conflict = append(cvcb.conflict, sql.ConflictColumns(columns...))
	return &CertifyVulnUpsertBulk{
		create: cvcb,
	}
}

// CertifyVulnUpsertBulk is the builder for "upsert"-ing
// a bulk of CertifyVuln nodes.
type CertifyVulnUpsertBulk struct {
	create *CertifyVulnCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CertifyVuln.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CertifyVulnUpsertBulk) UpdateNewValues() *CertifyVulnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CertifyVuln.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CertifyVulnUpsertBulk) Ignore() *CertifyVulnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertifyVulnUpsertBulk) DoNothing() *CertifyVulnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertifyVulnCreateBulk.OnConflict
// documentation for more info.
func (u *CertifyVulnUpsertBulk) Update(set func(*CertifyVulnUpsert)) *CertifyVulnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertifyVulnUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *CertifyVulnUpsertBulk) SetVulnerabilityID(v int) *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *CertifyVulnUpsertBulk) UpdateVulnerabilityID() *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// SetPackageID sets the "package_id" field.
func (u *CertifyVulnUpsertBulk) SetPackageID(v int) *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *CertifyVulnUpsertBulk) UpdatePackageID() *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdatePackageID()
	})
}

// SetTimeScanned sets the "time_scanned" field.
func (u *CertifyVulnUpsertBulk) SetTimeScanned(v time.Time) *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetTimeScanned(v)
	})
}

// UpdateTimeScanned sets the "time_scanned" field to the value that was provided on create.
func (u *CertifyVulnUpsertBulk) UpdateTimeScanned() *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateTimeScanned()
	})
}

// SetDbURI sets the "db_uri" field.
func (u *CertifyVulnUpsertBulk) SetDbURI(v string) *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetDbURI(v)
	})
}

// UpdateDbURI sets the "db_uri" field to the value that was provided on create.
func (u *CertifyVulnUpsertBulk) UpdateDbURI() *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateDbURI()
	})
}

// SetDbVersion sets the "db_version" field.
func (u *CertifyVulnUpsertBulk) SetDbVersion(v string) *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetDbVersion(v)
	})
}

// UpdateDbVersion sets the "db_version" field to the value that was provided on create.
func (u *CertifyVulnUpsertBulk) UpdateDbVersion() *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateDbVersion()
	})
}

// SetScannerURI sets the "scanner_uri" field.
func (u *CertifyVulnUpsertBulk) SetScannerURI(v string) *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetScannerURI(v)
	})
}

// UpdateScannerURI sets the "scanner_uri" field to the value that was provided on create.
func (u *CertifyVulnUpsertBulk) UpdateScannerURI() *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateScannerURI()
	})
}

// SetScannerVersion sets the "scanner_version" field.
func (u *CertifyVulnUpsertBulk) SetScannerVersion(v string) *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetScannerVersion(v)
	})
}

// UpdateScannerVersion sets the "scanner_version" field to the value that was provided on create.
func (u *CertifyVulnUpsertBulk) UpdateScannerVersion() *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateScannerVersion()
	})
}

// SetOrigin sets the "origin" field.
func (u *CertifyVulnUpsertBulk) SetOrigin(v string) *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *CertifyVulnUpsertBulk) UpdateOrigin() *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *CertifyVulnUpsertBulk) SetCollector(v string) *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *CertifyVulnUpsertBulk) UpdateCollector() *CertifyVulnUpsertBulk {
	return u.Update(func(s *CertifyVulnUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *CertifyVulnUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CertifyVulnCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CertifyVulnCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertifyVulnUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

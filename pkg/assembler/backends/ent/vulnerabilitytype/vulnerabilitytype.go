// Code generated by ent, DO NOT EDIT.

package vulnerabilitytype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vulnerabilitytype type in the database.
	Label = "vulnerability_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeVulnerabilityIds holds the string denoting the vulnerability_ids edge name in mutations.
	EdgeVulnerabilityIds = "vulnerability_ids"
	// Table holds the table name of the vulnerabilitytype in the database.
	Table = "vulnerability_types"
	// VulnerabilityIdsTable is the table that holds the vulnerability_ids relation/edge.
	VulnerabilityIdsTable = "vulnerability_ids"
	// VulnerabilityIdsInverseTable is the table name for the VulnerabilityID entity.
	// It exists in this package in order to avoid circular dependency with the "vulnerabilityid" package.
	VulnerabilityIdsInverseTable = "vulnerability_ids"
	// VulnerabilityIdsColumn is the table column denoting the vulnerability_ids relation/edge.
	VulnerabilityIdsColumn = "type_id"
)

// Columns holds all SQL columns for vulnerabilitytype fields.
var Columns = []string{
	FieldID,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
)

// OrderOption defines the ordering options for the VulnerabilityType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVulnerabilityIdsCount orders the results by vulnerability_ids count.
func ByVulnerabilityIdsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVulnerabilityIdsStep(), opts...)
	}
}

// ByVulnerabilityIds orders the results by vulnerability_ids terms.
func ByVulnerabilityIds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVulnerabilityIdsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVulnerabilityIdsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VulnerabilityIdsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VulnerabilityIdsTable, VulnerabilityIdsColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
)

// PackageVersionCreate is the builder for creating a PackageVersion entity.
type PackageVersionCreate struct {
	config
	mutation *PackageVersionMutation
	hooks    []Hook
}

// SetNameID sets the "name_id" field.
func (pvc *PackageVersionCreate) SetNameID(i int) *PackageVersionCreate {
	pvc.mutation.SetNameID(i)
	return pvc
}

// SetVersion sets the "version" field.
func (pvc *PackageVersionCreate) SetVersion(s string) *PackageVersionCreate {
	pvc.mutation.SetVersion(s)
	return pvc
}

// SetName sets the "name" edge to the PackageName entity.
func (pvc *PackageVersionCreate) SetName(p *PackageName) *PackageVersionCreate {
	return pvc.SetNameID(p.ID)
}

// Mutation returns the PackageVersionMutation object of the builder.
func (pvc *PackageVersionCreate) Mutation() *PackageVersionMutation {
	return pvc.mutation
}

// Save creates the PackageVersion in the database.
func (pvc *PackageVersionCreate) Save(ctx context.Context) (*PackageVersion, error) {
	return withHooks(ctx, pvc.sqlSave, pvc.mutation, pvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *PackageVersionCreate) SaveX(ctx context.Context) *PackageVersion {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *PackageVersionCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *PackageVersionCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *PackageVersionCreate) check() error {
	if _, ok := pvc.mutation.NameID(); !ok {
		return &ValidationError{Name: "name_id", err: errors.New(`ent: missing required field "PackageVersion.name_id"`)}
	}
	if _, ok := pvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "PackageVersion.version"`)}
	}
	if v, ok := pvc.mutation.Version(); ok {
		if err := packageversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "PackageVersion.version": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.NameID(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required edge "PackageVersion.name"`)}
	}
	return nil
}

func (pvc *PackageVersionCreate) sqlSave(ctx context.Context) (*PackageVersion, error) {
	if err := pvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pvc.mutation.id = &_node.ID
	pvc.mutation.done = true
	return _node, nil
}

func (pvc *PackageVersionCreate) createSpec() (*PackageVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &PackageVersion{config: pvc.config}
		_spec = sqlgraph.NewCreateSpec(packageversion.Table, sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt))
	)
	if value, ok := pvc.mutation.Version(); ok {
		_spec.SetField(packageversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if nodes := pvc.mutation.NameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   packageversion.NameTable,
			Columns: []string{packageversion.NameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NameID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PackageVersionCreateBulk is the builder for creating many PackageVersion entities in bulk.
type PackageVersionCreateBulk struct {
	config
	builders []*PackageVersionCreate
}

// Save creates the PackageVersion entities in the database.
func (pvcb *PackageVersionCreateBulk) Save(ctx context.Context) ([]*PackageVersion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*PackageVersion, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PackageVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *PackageVersionCreateBulk) SaveX(ctx context.Context) []*PackageVersion {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *PackageVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *PackageVersionCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

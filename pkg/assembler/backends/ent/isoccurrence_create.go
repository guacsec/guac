// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isoccurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
)

// IsOccurrenceCreate is the builder for creating a IsOccurrence entity.
type IsOccurrenceCreate struct {
	config
	mutation *IsOccurrenceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPackageID sets the "package_id" field.
func (ioc *IsOccurrenceCreate) SetPackageID(i int) *IsOccurrenceCreate {
	ioc.mutation.SetPackageID(i)
	return ioc
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (ioc *IsOccurrenceCreate) SetNillablePackageID(i *int) *IsOccurrenceCreate {
	if i != nil {
		ioc.SetPackageID(*i)
	}
	return ioc
}

// SetSourceID sets the "source_id" field.
func (ioc *IsOccurrenceCreate) SetSourceID(i int) *IsOccurrenceCreate {
	ioc.mutation.SetSourceID(i)
	return ioc
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (ioc *IsOccurrenceCreate) SetNillableSourceID(i *int) *IsOccurrenceCreate {
	if i != nil {
		ioc.SetSourceID(*i)
	}
	return ioc
}

// SetArtifactID sets the "artifact_id" field.
func (ioc *IsOccurrenceCreate) SetArtifactID(i int) *IsOccurrenceCreate {
	ioc.mutation.SetArtifactID(i)
	return ioc
}

// SetJustification sets the "justification" field.
func (ioc *IsOccurrenceCreate) SetJustification(s string) *IsOccurrenceCreate {
	ioc.mutation.SetJustification(s)
	return ioc
}

// SetOrigin sets the "origin" field.
func (ioc *IsOccurrenceCreate) SetOrigin(s string) *IsOccurrenceCreate {
	ioc.mutation.SetOrigin(s)
	return ioc
}

// SetCollector sets the "collector" field.
func (ioc *IsOccurrenceCreate) SetCollector(s string) *IsOccurrenceCreate {
	ioc.mutation.SetCollector(s)
	return ioc
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (ioc *IsOccurrenceCreate) SetPackage(p *PackageVersion) *IsOccurrenceCreate {
	return ioc.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (ioc *IsOccurrenceCreate) SetArtifact(a *Artifact) *IsOccurrenceCreate {
	return ioc.SetArtifactID(a.ID)
}

// Mutation returns the IsOccurrenceMutation object of the builder.
func (ioc *IsOccurrenceCreate) Mutation() *IsOccurrenceMutation {
	return ioc.mutation
}

// Save creates the IsOccurrence in the database.
func (ioc *IsOccurrenceCreate) Save(ctx context.Context) (*IsOccurrence, error) {
	return withHooks(ctx, ioc.sqlSave, ioc.mutation, ioc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ioc *IsOccurrenceCreate) SaveX(ctx context.Context) *IsOccurrence {
	v, err := ioc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ioc *IsOccurrenceCreate) Exec(ctx context.Context) error {
	_, err := ioc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ioc *IsOccurrenceCreate) ExecX(ctx context.Context) {
	if err := ioc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ioc *IsOccurrenceCreate) check() error {
	if _, ok := ioc.mutation.ArtifactID(); !ok {
		return &ValidationError{Name: "artifact_id", err: errors.New(`ent: missing required field "IsOccurrence.artifact_id"`)}
	}
	if _, ok := ioc.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "IsOccurrence.justification"`)}
	}
	if _, ok := ioc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "IsOccurrence.origin"`)}
	}
	if _, ok := ioc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "IsOccurrence.collector"`)}
	}
	if _, ok := ioc.mutation.ArtifactID(); !ok {
		return &ValidationError{Name: "artifact", err: errors.New(`ent: missing required edge "IsOccurrence.artifact"`)}
	}
	return nil
}

func (ioc *IsOccurrenceCreate) sqlSave(ctx context.Context) (*IsOccurrence, error) {
	if err := ioc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ioc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ioc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ioc.mutation.id = &_node.ID
	ioc.mutation.done = true
	return _node, nil
}

func (ioc *IsOccurrenceCreate) createSpec() (*IsOccurrence, *sqlgraph.CreateSpec) {
	var (
		_node = &IsOccurrence{config: ioc.config}
		_spec = sqlgraph.NewCreateSpec(isoccurrence.Table, sqlgraph.NewFieldSpec(isoccurrence.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ioc.conflict
	if value, ok := ioc.mutation.SourceID(); ok {
		_spec.SetField(isoccurrence.FieldSourceID, field.TypeInt, value)
		_node.SourceID = value
	}
	if value, ok := ioc.mutation.Justification(); ok {
		_spec.SetField(isoccurrence.FieldJustification, field.TypeString, value)
		_node.Justification = value
	}
	if value, ok := ioc.mutation.Origin(); ok {
		_spec.SetField(isoccurrence.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := ioc.mutation.Collector(); ok {
		_spec.SetField(isoccurrence.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if nodes := ioc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isoccurrence.PackageTable,
			Columns: []string{isoccurrence.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ioc.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   isoccurrence.ArtifactTable,
			Columns: []string{isoccurrence.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArtifactID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IsOccurrence.Create().
//		SetPackageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IsOccurrenceUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (ioc *IsOccurrenceCreate) OnConflict(opts ...sql.ConflictOption) *IsOccurrenceUpsertOne {
	ioc.conflict = opts
	return &IsOccurrenceUpsertOne{
		create: ioc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IsOccurrence.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ioc *IsOccurrenceCreate) OnConflictColumns(columns ...string) *IsOccurrenceUpsertOne {
	ioc.conflict = append(ioc.conflict, sql.ConflictColumns(columns...))
	return &IsOccurrenceUpsertOne{
		create: ioc,
	}
}

type (
	// IsOccurrenceUpsertOne is the builder for "upsert"-ing
	//  one IsOccurrence node.
	IsOccurrenceUpsertOne struct {
		create *IsOccurrenceCreate
	}

	// IsOccurrenceUpsert is the "OnConflict" setter.
	IsOccurrenceUpsert struct {
		*sql.UpdateSet
	}
)

// SetPackageID sets the "package_id" field.
func (u *IsOccurrenceUpsert) SetPackageID(v int) *IsOccurrenceUpsert {
	u.Set(isoccurrence.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *IsOccurrenceUpsert) UpdatePackageID() *IsOccurrenceUpsert {
	u.SetExcluded(isoccurrence.FieldPackageID)
	return u
}

// ClearPackageID clears the value of the "package_id" field.
func (u *IsOccurrenceUpsert) ClearPackageID() *IsOccurrenceUpsert {
	u.SetNull(isoccurrence.FieldPackageID)
	return u
}

// SetSourceID sets the "source_id" field.
func (u *IsOccurrenceUpsert) SetSourceID(v int) *IsOccurrenceUpsert {
	u.Set(isoccurrence.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *IsOccurrenceUpsert) UpdateSourceID() *IsOccurrenceUpsert {
	u.SetExcluded(isoccurrence.FieldSourceID)
	return u
}

// AddSourceID adds v to the "source_id" field.
func (u *IsOccurrenceUpsert) AddSourceID(v int) *IsOccurrenceUpsert {
	u.Add(isoccurrence.FieldSourceID, v)
	return u
}

// ClearSourceID clears the value of the "source_id" field.
func (u *IsOccurrenceUpsert) ClearSourceID() *IsOccurrenceUpsert {
	u.SetNull(isoccurrence.FieldSourceID)
	return u
}

// SetArtifactID sets the "artifact_id" field.
func (u *IsOccurrenceUpsert) SetArtifactID(v int) *IsOccurrenceUpsert {
	u.Set(isoccurrence.FieldArtifactID, v)
	return u
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *IsOccurrenceUpsert) UpdateArtifactID() *IsOccurrenceUpsert {
	u.SetExcluded(isoccurrence.FieldArtifactID)
	return u
}

// SetJustification sets the "justification" field.
func (u *IsOccurrenceUpsert) SetJustification(v string) *IsOccurrenceUpsert {
	u.Set(isoccurrence.FieldJustification, v)
	return u
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *IsOccurrenceUpsert) UpdateJustification() *IsOccurrenceUpsert {
	u.SetExcluded(isoccurrence.FieldJustification)
	return u
}

// SetOrigin sets the "origin" field.
func (u *IsOccurrenceUpsert) SetOrigin(v string) *IsOccurrenceUpsert {
	u.Set(isoccurrence.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsOccurrenceUpsert) UpdateOrigin() *IsOccurrenceUpsert {
	u.SetExcluded(isoccurrence.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *IsOccurrenceUpsert) SetCollector(v string) *IsOccurrenceUpsert {
	u.Set(isoccurrence.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsOccurrenceUpsert) UpdateCollector() *IsOccurrenceUpsert {
	u.SetExcluded(isoccurrence.FieldCollector)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IsOccurrence.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IsOccurrenceUpsertOne) UpdateNewValues() *IsOccurrenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IsOccurrence.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IsOccurrenceUpsertOne) Ignore() *IsOccurrenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IsOccurrenceUpsertOne) DoNothing() *IsOccurrenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IsOccurrenceCreate.OnConflict
// documentation for more info.
func (u *IsOccurrenceUpsertOne) Update(set func(*IsOccurrenceUpsert)) *IsOccurrenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IsOccurrenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *IsOccurrenceUpsertOne) SetPackageID(v int) *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *IsOccurrenceUpsertOne) UpdatePackageID() *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *IsOccurrenceUpsertOne) ClearPackageID() *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.ClearPackageID()
	})
}

// SetSourceID sets the "source_id" field.
func (u *IsOccurrenceUpsertOne) SetSourceID(v int) *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetSourceID(v)
	})
}

// AddSourceID adds v to the "source_id" field.
func (u *IsOccurrenceUpsertOne) AddSourceID(v int) *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.AddSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *IsOccurrenceUpsertOne) UpdateSourceID() *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdateSourceID()
	})
}

// ClearSourceID clears the value of the "source_id" field.
func (u *IsOccurrenceUpsertOne) ClearSourceID() *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.ClearSourceID()
	})
}

// SetArtifactID sets the "artifact_id" field.
func (u *IsOccurrenceUpsertOne) SetArtifactID(v int) *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetArtifactID(v)
	})
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *IsOccurrenceUpsertOne) UpdateArtifactID() *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdateArtifactID()
	})
}

// SetJustification sets the "justification" field.
func (u *IsOccurrenceUpsertOne) SetJustification(v string) *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *IsOccurrenceUpsertOne) UpdateJustification() *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *IsOccurrenceUpsertOne) SetOrigin(v string) *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsOccurrenceUpsertOne) UpdateOrigin() *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *IsOccurrenceUpsertOne) SetCollector(v string) *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsOccurrenceUpsertOne) UpdateCollector() *IsOccurrenceUpsertOne {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *IsOccurrenceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IsOccurrenceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IsOccurrenceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IsOccurrenceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IsOccurrenceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IsOccurrenceCreateBulk is the builder for creating many IsOccurrence entities in bulk.
type IsOccurrenceCreateBulk struct {
	config
	builders []*IsOccurrenceCreate
	conflict []sql.ConflictOption
}

// Save creates the IsOccurrence entities in the database.
func (iocb *IsOccurrenceCreateBulk) Save(ctx context.Context) ([]*IsOccurrence, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iocb.builders))
	nodes := make([]*IsOccurrence, len(iocb.builders))
	mutators := make([]Mutator, len(iocb.builders))
	for i := range iocb.builders {
		func(i int, root context.Context) {
			builder := iocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IsOccurrenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iocb *IsOccurrenceCreateBulk) SaveX(ctx context.Context) []*IsOccurrence {
	v, err := iocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iocb *IsOccurrenceCreateBulk) Exec(ctx context.Context) error {
	_, err := iocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iocb *IsOccurrenceCreateBulk) ExecX(ctx context.Context) {
	if err := iocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IsOccurrence.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IsOccurrenceUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (iocb *IsOccurrenceCreateBulk) OnConflict(opts ...sql.ConflictOption) *IsOccurrenceUpsertBulk {
	iocb.conflict = opts
	return &IsOccurrenceUpsertBulk{
		create: iocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IsOccurrence.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iocb *IsOccurrenceCreateBulk) OnConflictColumns(columns ...string) *IsOccurrenceUpsertBulk {
	iocb.conflict = append(iocb.conflict, sql.ConflictColumns(columns...))
	return &IsOccurrenceUpsertBulk{
		create: iocb,
	}
}

// IsOccurrenceUpsertBulk is the builder for "upsert"-ing
// a bulk of IsOccurrence nodes.
type IsOccurrenceUpsertBulk struct {
	create *IsOccurrenceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IsOccurrence.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IsOccurrenceUpsertBulk) UpdateNewValues() *IsOccurrenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IsOccurrence.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IsOccurrenceUpsertBulk) Ignore() *IsOccurrenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IsOccurrenceUpsertBulk) DoNothing() *IsOccurrenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IsOccurrenceCreateBulk.OnConflict
// documentation for more info.
func (u *IsOccurrenceUpsertBulk) Update(set func(*IsOccurrenceUpsert)) *IsOccurrenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IsOccurrenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *IsOccurrenceUpsertBulk) SetPackageID(v int) *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *IsOccurrenceUpsertBulk) UpdatePackageID() *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *IsOccurrenceUpsertBulk) ClearPackageID() *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.ClearPackageID()
	})
}

// SetSourceID sets the "source_id" field.
func (u *IsOccurrenceUpsertBulk) SetSourceID(v int) *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetSourceID(v)
	})
}

// AddSourceID adds v to the "source_id" field.
func (u *IsOccurrenceUpsertBulk) AddSourceID(v int) *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.AddSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *IsOccurrenceUpsertBulk) UpdateSourceID() *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdateSourceID()
	})
}

// ClearSourceID clears the value of the "source_id" field.
func (u *IsOccurrenceUpsertBulk) ClearSourceID() *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.ClearSourceID()
	})
}

// SetArtifactID sets the "artifact_id" field.
func (u *IsOccurrenceUpsertBulk) SetArtifactID(v int) *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetArtifactID(v)
	})
}

// UpdateArtifactID sets the "artifact_id" field to the value that was provided on create.
func (u *IsOccurrenceUpsertBulk) UpdateArtifactID() *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdateArtifactID()
	})
}

// SetJustification sets the "justification" field.
func (u *IsOccurrenceUpsertBulk) SetJustification(v string) *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetJustification(v)
	})
}

// UpdateJustification sets the "justification" field to the value that was provided on create.
func (u *IsOccurrenceUpsertBulk) UpdateJustification() *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdateJustification()
	})
}

// SetOrigin sets the "origin" field.
func (u *IsOccurrenceUpsertBulk) SetOrigin(v string) *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *IsOccurrenceUpsertBulk) UpdateOrigin() *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *IsOccurrenceUpsertBulk) SetCollector(v string) *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *IsOccurrenceUpsertBulk) UpdateCollector() *IsOccurrenceUpsertBulk {
	return u.Update(func(s *IsOccurrenceUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *IsOccurrenceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IsOccurrenceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IsOccurrenceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IsOccurrenceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

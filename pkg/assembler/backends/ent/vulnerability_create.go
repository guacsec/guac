// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/securityadvisory"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerability"
)

// VulnerabilityCreate is the builder for creating a Vulnerability entity.
type VulnerabilityCreate struct {
	config
	mutation *VulnerabilityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (vc *VulnerabilityCreate) SetVulnerabilityID(i int) *VulnerabilityCreate {
	vc.mutation.SetVulnerabilityID(i)
	return vc
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (vc *VulnerabilityCreate) SetNillableVulnerabilityID(i *int) *VulnerabilityCreate {
	if i != nil {
		vc.SetVulnerabilityID(*i)
	}
	return vc
}

// SetPackageID sets the "package_id" field.
func (vc *VulnerabilityCreate) SetPackageID(i int) *VulnerabilityCreate {
	vc.mutation.SetPackageID(i)
	return vc
}

// SetTimeScanned sets the "time_scanned" field.
func (vc *VulnerabilityCreate) SetTimeScanned(t time.Time) *VulnerabilityCreate {
	vc.mutation.SetTimeScanned(t)
	return vc
}

// SetDbURI sets the "db_uri" field.
func (vc *VulnerabilityCreate) SetDbURI(s string) *VulnerabilityCreate {
	vc.mutation.SetDbURI(s)
	return vc
}

// SetDbVersion sets the "db_version" field.
func (vc *VulnerabilityCreate) SetDbVersion(s string) *VulnerabilityCreate {
	vc.mutation.SetDbVersion(s)
	return vc
}

// SetScannerURI sets the "scanner_uri" field.
func (vc *VulnerabilityCreate) SetScannerURI(s string) *VulnerabilityCreate {
	vc.mutation.SetScannerURI(s)
	return vc
}

// SetScannerVersion sets the "scanner_version" field.
func (vc *VulnerabilityCreate) SetScannerVersion(s string) *VulnerabilityCreate {
	vc.mutation.SetScannerVersion(s)
	return vc
}

// SetOrigin sets the "origin" field.
func (vc *VulnerabilityCreate) SetOrigin(s string) *VulnerabilityCreate {
	vc.mutation.SetOrigin(s)
	return vc
}

// SetCollector sets the "collector" field.
func (vc *VulnerabilityCreate) SetCollector(s string) *VulnerabilityCreate {
	vc.mutation.SetCollector(s)
	return vc
}

// SetVulnerability sets the "vulnerability" edge to the SecurityAdvisory entity.
func (vc *VulnerabilityCreate) SetVulnerability(s *SecurityAdvisory) *VulnerabilityCreate {
	return vc.SetVulnerabilityID(s.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (vc *VulnerabilityCreate) SetPackage(p *PackageVersion) *VulnerabilityCreate {
	return vc.SetPackageID(p.ID)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vc *VulnerabilityCreate) Mutation() *VulnerabilityMutation {
	return vc.mutation
}

// Save creates the Vulnerability in the database.
func (vc *VulnerabilityCreate) Save(ctx context.Context) (*Vulnerability, error) {
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VulnerabilityCreate) SaveX(ctx context.Context) *Vulnerability {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VulnerabilityCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VulnerabilityCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VulnerabilityCreate) check() error {
	if _, ok := vc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package_id", err: errors.New(`ent: missing required field "Vulnerability.package_id"`)}
	}
	if _, ok := vc.mutation.TimeScanned(); !ok {
		return &ValidationError{Name: "time_scanned", err: errors.New(`ent: missing required field "Vulnerability.time_scanned"`)}
	}
	if _, ok := vc.mutation.DbURI(); !ok {
		return &ValidationError{Name: "db_uri", err: errors.New(`ent: missing required field "Vulnerability.db_uri"`)}
	}
	if _, ok := vc.mutation.DbVersion(); !ok {
		return &ValidationError{Name: "db_version", err: errors.New(`ent: missing required field "Vulnerability.db_version"`)}
	}
	if _, ok := vc.mutation.ScannerURI(); !ok {
		return &ValidationError{Name: "scanner_uri", err: errors.New(`ent: missing required field "Vulnerability.scanner_uri"`)}
	}
	if _, ok := vc.mutation.ScannerVersion(); !ok {
		return &ValidationError{Name: "scanner_version", err: errors.New(`ent: missing required field "Vulnerability.scanner_version"`)}
	}
	if _, ok := vc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "Vulnerability.origin"`)}
	}
	if _, ok := vc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "Vulnerability.collector"`)}
	}
	if _, ok := vc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package", err: errors.New(`ent: missing required edge "Vulnerability.package"`)}
	}
	return nil
}

func (vc *VulnerabilityCreate) sqlSave(ctx context.Context) (*Vulnerability, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VulnerabilityCreate) createSpec() (*Vulnerability, *sqlgraph.CreateSpec) {
	var (
		_node = &Vulnerability{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(vulnerability.Table, sqlgraph.NewFieldSpec(vulnerability.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vc.conflict
	if value, ok := vc.mutation.TimeScanned(); ok {
		_spec.SetField(vulnerability.FieldTimeScanned, field.TypeTime, value)
		_node.TimeScanned = value
	}
	if value, ok := vc.mutation.DbURI(); ok {
		_spec.SetField(vulnerability.FieldDbURI, field.TypeString, value)
		_node.DbURI = value
	}
	if value, ok := vc.mutation.DbVersion(); ok {
		_spec.SetField(vulnerability.FieldDbVersion, field.TypeString, value)
		_node.DbVersion = value
	}
	if value, ok := vc.mutation.ScannerURI(); ok {
		_spec.SetField(vulnerability.FieldScannerURI, field.TypeString, value)
		_node.ScannerURI = value
	}
	if value, ok := vc.mutation.ScannerVersion(); ok {
		_spec.SetField(vulnerability.FieldScannerVersion, field.TypeString, value)
		_node.ScannerVersion = value
	}
	if value, ok := vc.mutation.Origin(); ok {
		_spec.SetField(vulnerability.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := vc.mutation.Collector(); ok {
		_spec.SetField(vulnerability.FieldCollector, field.TypeString, value)
		_node.Collector = value
	}
	if nodes := vc.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.VulnerabilityTable,
			Columns: []string{vulnerability.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(securityadvisory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VulnerabilityID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vulnerability.PackageTable,
			Columns: []string{vulnerability.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PackageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vulnerability.Create().
//		SetVulnerabilityID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityUpsert) {
//			SetVulnerabilityID(v+v).
//		}).
//		Exec(ctx)
func (vc *VulnerabilityCreate) OnConflict(opts ...sql.ConflictOption) *VulnerabilityUpsertOne {
	vc.conflict = opts
	return &VulnerabilityUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vc *VulnerabilityCreate) OnConflictColumns(columns ...string) *VulnerabilityUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityUpsertOne{
		create: vc,
	}
}

type (
	// VulnerabilityUpsertOne is the builder for "upsert"-ing
	//  one Vulnerability node.
	VulnerabilityUpsertOne struct {
		create *VulnerabilityCreate
	}

	// VulnerabilityUpsert is the "OnConflict" setter.
	VulnerabilityUpsert struct {
		*sql.UpdateSet
	}
)

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *VulnerabilityUpsert) SetVulnerabilityID(v int) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldVulnerabilityID, v)
	return u
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateVulnerabilityID() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldVulnerabilityID)
	return u
}

// ClearVulnerabilityID clears the value of the "vulnerability_id" field.
func (u *VulnerabilityUpsert) ClearVulnerabilityID() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldVulnerabilityID)
	return u
}

// SetPackageID sets the "package_id" field.
func (u *VulnerabilityUpsert) SetPackageID(v int) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdatePackageID() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldPackageID)
	return u
}

// SetTimeScanned sets the "time_scanned" field.
func (u *VulnerabilityUpsert) SetTimeScanned(v time.Time) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldTimeScanned, v)
	return u
}

// UpdateTimeScanned sets the "time_scanned" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateTimeScanned() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldTimeScanned)
	return u
}

// SetDbURI sets the "db_uri" field.
func (u *VulnerabilityUpsert) SetDbURI(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldDbURI, v)
	return u
}

// UpdateDbURI sets the "db_uri" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateDbURI() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldDbURI)
	return u
}

// SetDbVersion sets the "db_version" field.
func (u *VulnerabilityUpsert) SetDbVersion(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldDbVersion, v)
	return u
}

// UpdateDbVersion sets the "db_version" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateDbVersion() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldDbVersion)
	return u
}

// SetScannerURI sets the "scanner_uri" field.
func (u *VulnerabilityUpsert) SetScannerURI(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldScannerURI, v)
	return u
}

// UpdateScannerURI sets the "scanner_uri" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateScannerURI() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldScannerURI)
	return u
}

// SetScannerVersion sets the "scanner_version" field.
func (u *VulnerabilityUpsert) SetScannerVersion(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldScannerVersion, v)
	return u
}

// UpdateScannerVersion sets the "scanner_version" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateScannerVersion() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldScannerVersion)
	return u
}

// SetOrigin sets the "origin" field.
func (u *VulnerabilityUpsert) SetOrigin(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldOrigin, v)
	return u
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateOrigin() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldOrigin)
	return u
}

// SetCollector sets the "collector" field.
func (u *VulnerabilityUpsert) SetCollector(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldCollector, v)
	return u
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateCollector() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldCollector)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VulnerabilityUpsertOne) UpdateNewValues() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VulnerabilityUpsertOne) Ignore() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityUpsertOne) DoNothing() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityCreate.OnConflict
// documentation for more info.
func (u *VulnerabilityUpsertOne) Update(set func(*VulnerabilityUpsert)) *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *VulnerabilityUpsertOne) SetVulnerabilityID(v int) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateVulnerabilityID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// ClearVulnerabilityID clears the value of the "vulnerability_id" field.
func (u *VulnerabilityUpsertOne) ClearVulnerabilityID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearVulnerabilityID()
	})
}

// SetPackageID sets the "package_id" field.
func (u *VulnerabilityUpsertOne) SetPackageID(v int) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdatePackageID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdatePackageID()
	})
}

// SetTimeScanned sets the "time_scanned" field.
func (u *VulnerabilityUpsertOne) SetTimeScanned(v time.Time) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetTimeScanned(v)
	})
}

// UpdateTimeScanned sets the "time_scanned" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateTimeScanned() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateTimeScanned()
	})
}

// SetDbURI sets the "db_uri" field.
func (u *VulnerabilityUpsertOne) SetDbURI(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetDbURI(v)
	})
}

// UpdateDbURI sets the "db_uri" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateDbURI() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateDbURI()
	})
}

// SetDbVersion sets the "db_version" field.
func (u *VulnerabilityUpsertOne) SetDbVersion(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetDbVersion(v)
	})
}

// UpdateDbVersion sets the "db_version" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateDbVersion() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateDbVersion()
	})
}

// SetScannerURI sets the "scanner_uri" field.
func (u *VulnerabilityUpsertOne) SetScannerURI(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetScannerURI(v)
	})
}

// UpdateScannerURI sets the "scanner_uri" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateScannerURI() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateScannerURI()
	})
}

// SetScannerVersion sets the "scanner_version" field.
func (u *VulnerabilityUpsertOne) SetScannerVersion(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetScannerVersion(v)
	})
}

// UpdateScannerVersion sets the "scanner_version" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateScannerVersion() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateScannerVersion()
	})
}

// SetOrigin sets the "origin" field.
func (u *VulnerabilityUpsertOne) SetOrigin(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateOrigin() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *VulnerabilityUpsertOne) SetCollector(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateCollector() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *VulnerabilityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VulnerabilityUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VulnerabilityUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VulnerabilityCreateBulk is the builder for creating many Vulnerability entities in bulk.
type VulnerabilityCreateBulk struct {
	config
	builders []*VulnerabilityCreate
	conflict []sql.ConflictOption
}

// Save creates the Vulnerability entities in the database.
func (vcb *VulnerabilityCreateBulk) Save(ctx context.Context) ([]*Vulnerability, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vulnerability, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VulnerabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VulnerabilityCreateBulk) SaveX(ctx context.Context) []*Vulnerability {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VulnerabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VulnerabilityCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vulnerability.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityUpsert) {
//			SetVulnerabilityID(v+v).
//		}).
//		Exec(ctx)
func (vcb *VulnerabilityCreateBulk) OnConflict(opts ...sql.ConflictOption) *VulnerabilityUpsertBulk {
	vcb.conflict = opts
	return &VulnerabilityUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vcb *VulnerabilityCreateBulk) OnConflictColumns(columns ...string) *VulnerabilityUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityUpsertBulk{
		create: vcb,
	}
}

// VulnerabilityUpsertBulk is the builder for "upsert"-ing
// a bulk of Vulnerability nodes.
type VulnerabilityUpsertBulk struct {
	create *VulnerabilityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VulnerabilityUpsertBulk) UpdateNewValues() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VulnerabilityUpsertBulk) Ignore() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityUpsertBulk) DoNothing() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityCreateBulk.OnConflict
// documentation for more info.
func (u *VulnerabilityUpsertBulk) Update(set func(*VulnerabilityUpsert)) *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *VulnerabilityUpsertBulk) SetVulnerabilityID(v int) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateVulnerabilityID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// ClearVulnerabilityID clears the value of the "vulnerability_id" field.
func (u *VulnerabilityUpsertBulk) ClearVulnerabilityID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearVulnerabilityID()
	})
}

// SetPackageID sets the "package_id" field.
func (u *VulnerabilityUpsertBulk) SetPackageID(v int) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdatePackageID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdatePackageID()
	})
}

// SetTimeScanned sets the "time_scanned" field.
func (u *VulnerabilityUpsertBulk) SetTimeScanned(v time.Time) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetTimeScanned(v)
	})
}

// UpdateTimeScanned sets the "time_scanned" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateTimeScanned() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateTimeScanned()
	})
}

// SetDbURI sets the "db_uri" field.
func (u *VulnerabilityUpsertBulk) SetDbURI(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetDbURI(v)
	})
}

// UpdateDbURI sets the "db_uri" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateDbURI() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateDbURI()
	})
}

// SetDbVersion sets the "db_version" field.
func (u *VulnerabilityUpsertBulk) SetDbVersion(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetDbVersion(v)
	})
}

// UpdateDbVersion sets the "db_version" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateDbVersion() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateDbVersion()
	})
}

// SetScannerURI sets the "scanner_uri" field.
func (u *VulnerabilityUpsertBulk) SetScannerURI(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetScannerURI(v)
	})
}

// UpdateScannerURI sets the "scanner_uri" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateScannerURI() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateScannerURI()
	})
}

// SetScannerVersion sets the "scanner_version" field.
func (u *VulnerabilityUpsertBulk) SetScannerVersion(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetScannerVersion(v)
	})
}

// UpdateScannerVersion sets the "scanner_version" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateScannerVersion() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateScannerVersion()
	})
}

// SetOrigin sets the "origin" field.
func (u *VulnerabilityUpsertBulk) SetOrigin(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetOrigin(v)
	})
}

// UpdateOrigin sets the "origin" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateOrigin() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateOrigin()
	})
}

// SetCollector sets the "collector" field.
func (u *VulnerabilityUpsertBulk) SetCollector(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetCollector(v)
	})
}

// UpdateCollector sets the "collector" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateCollector() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateCollector()
	})
}

// Exec executes the query.
func (u *VulnerabilityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VulnerabilityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerability"
)

// VulnerabilityCreate is the builder for creating a Vulnerability entity.
type VulnerabilityCreate struct {
	config
	mutation *VulnerabilityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGhsaID sets the "ghsa_id" field.
func (vc *VulnerabilityCreate) SetGhsaID(s string) *VulnerabilityCreate {
	vc.mutation.SetGhsaID(s)
	return vc
}

// SetNillableGhsaID sets the "ghsa_id" field if the given value is not nil.
func (vc *VulnerabilityCreate) SetNillableGhsaID(s *string) *VulnerabilityCreate {
	if s != nil {
		vc.SetGhsaID(*s)
	}
	return vc
}

// SetCveID sets the "cve_id" field.
func (vc *VulnerabilityCreate) SetCveID(s string) *VulnerabilityCreate {
	vc.mutation.SetCveID(s)
	return vc
}

// SetNillableCveID sets the "cve_id" field if the given value is not nil.
func (vc *VulnerabilityCreate) SetNillableCveID(s *string) *VulnerabilityCreate {
	if s != nil {
		vc.SetCveID(*s)
	}
	return vc
}

// SetCveYear sets the "cve_year" field.
func (vc *VulnerabilityCreate) SetCveYear(i int) *VulnerabilityCreate {
	vc.mutation.SetCveYear(i)
	return vc
}

// SetNillableCveYear sets the "cve_year" field if the given value is not nil.
func (vc *VulnerabilityCreate) SetNillableCveYear(i *int) *VulnerabilityCreate {
	if i != nil {
		vc.SetCveYear(*i)
	}
	return vc
}

// SetOsvID sets the "osv_id" field.
func (vc *VulnerabilityCreate) SetOsvID(s string) *VulnerabilityCreate {
	vc.mutation.SetOsvID(s)
	return vc
}

// SetNillableOsvID sets the "osv_id" field if the given value is not nil.
func (vc *VulnerabilityCreate) SetNillableOsvID(s *string) *VulnerabilityCreate {
	if s != nil {
		vc.SetOsvID(*s)
	}
	return vc
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vc *VulnerabilityCreate) Mutation() *VulnerabilityMutation {
	return vc.mutation
}

// Save creates the Vulnerability in the database.
func (vc *VulnerabilityCreate) Save(ctx context.Context) (*Vulnerability, error) {
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VulnerabilityCreate) SaveX(ctx context.Context) *Vulnerability {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VulnerabilityCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VulnerabilityCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VulnerabilityCreate) check() error {
	return nil
}

func (vc *VulnerabilityCreate) sqlSave(ctx context.Context) (*Vulnerability, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VulnerabilityCreate) createSpec() (*Vulnerability, *sqlgraph.CreateSpec) {
	var (
		_node = &Vulnerability{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(vulnerability.Table, sqlgraph.NewFieldSpec(vulnerability.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vc.conflict
	if value, ok := vc.mutation.GhsaID(); ok {
		_spec.SetField(vulnerability.FieldGhsaID, field.TypeString, value)
		_node.GhsaID = &value
	}
	if value, ok := vc.mutation.CveID(); ok {
		_spec.SetField(vulnerability.FieldCveID, field.TypeString, value)
		_node.CveID = &value
	}
	if value, ok := vc.mutation.CveYear(); ok {
		_spec.SetField(vulnerability.FieldCveYear, field.TypeInt, value)
		_node.CveYear = &value
	}
	if value, ok := vc.mutation.OsvID(); ok {
		_spec.SetField(vulnerability.FieldOsvID, field.TypeString, value)
		_node.OsvID = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vulnerability.Create().
//		SetGhsaID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityUpsert) {
//			SetGhsaID(v+v).
//		}).
//		Exec(ctx)
func (vc *VulnerabilityCreate) OnConflict(opts ...sql.ConflictOption) *VulnerabilityUpsertOne {
	vc.conflict = opts
	return &VulnerabilityUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vc *VulnerabilityCreate) OnConflictColumns(columns ...string) *VulnerabilityUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityUpsertOne{
		create: vc,
	}
}

type (
	// VulnerabilityUpsertOne is the builder for "upsert"-ing
	//  one Vulnerability node.
	VulnerabilityUpsertOne struct {
		create *VulnerabilityCreate
	}

	// VulnerabilityUpsert is the "OnConflict" setter.
	VulnerabilityUpsert struct {
		*sql.UpdateSet
	}
)

// SetGhsaID sets the "ghsa_id" field.
func (u *VulnerabilityUpsert) SetGhsaID(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldGhsaID, v)
	return u
}

// UpdateGhsaID sets the "ghsa_id" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateGhsaID() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldGhsaID)
	return u
}

// ClearGhsaID clears the value of the "ghsa_id" field.
func (u *VulnerabilityUpsert) ClearGhsaID() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldGhsaID)
	return u
}

// SetCveID sets the "cve_id" field.
func (u *VulnerabilityUpsert) SetCveID(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldCveID, v)
	return u
}

// UpdateCveID sets the "cve_id" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateCveID() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldCveID)
	return u
}

// ClearCveID clears the value of the "cve_id" field.
func (u *VulnerabilityUpsert) ClearCveID() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldCveID)
	return u
}

// SetCveYear sets the "cve_year" field.
func (u *VulnerabilityUpsert) SetCveYear(v int) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldCveYear, v)
	return u
}

// UpdateCveYear sets the "cve_year" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateCveYear() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldCveYear)
	return u
}

// AddCveYear adds v to the "cve_year" field.
func (u *VulnerabilityUpsert) AddCveYear(v int) *VulnerabilityUpsert {
	u.Add(vulnerability.FieldCveYear, v)
	return u
}

// ClearCveYear clears the value of the "cve_year" field.
func (u *VulnerabilityUpsert) ClearCveYear() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldCveYear)
	return u
}

// SetOsvID sets the "osv_id" field.
func (u *VulnerabilityUpsert) SetOsvID(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldOsvID, v)
	return u
}

// UpdateOsvID sets the "osv_id" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateOsvID() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldOsvID)
	return u
}

// ClearOsvID clears the value of the "osv_id" field.
func (u *VulnerabilityUpsert) ClearOsvID() *VulnerabilityUpsert {
	u.SetNull(vulnerability.FieldOsvID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VulnerabilityUpsertOne) UpdateNewValues() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VulnerabilityUpsertOne) Ignore() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityUpsertOne) DoNothing() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityCreate.OnConflict
// documentation for more info.
func (u *VulnerabilityUpsertOne) Update(set func(*VulnerabilityUpsert)) *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetGhsaID sets the "ghsa_id" field.
func (u *VulnerabilityUpsertOne) SetGhsaID(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetGhsaID(v)
	})
}

// UpdateGhsaID sets the "ghsa_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateGhsaID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateGhsaID()
	})
}

// ClearGhsaID clears the value of the "ghsa_id" field.
func (u *VulnerabilityUpsertOne) ClearGhsaID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearGhsaID()
	})
}

// SetCveID sets the "cve_id" field.
func (u *VulnerabilityUpsertOne) SetCveID(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetCveID(v)
	})
}

// UpdateCveID sets the "cve_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateCveID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateCveID()
	})
}

// ClearCveID clears the value of the "cve_id" field.
func (u *VulnerabilityUpsertOne) ClearCveID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearCveID()
	})
}

// SetCveYear sets the "cve_year" field.
func (u *VulnerabilityUpsertOne) SetCveYear(v int) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetCveYear(v)
	})
}

// AddCveYear adds v to the "cve_year" field.
func (u *VulnerabilityUpsertOne) AddCveYear(v int) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.AddCveYear(v)
	})
}

// UpdateCveYear sets the "cve_year" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateCveYear() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateCveYear()
	})
}

// ClearCveYear clears the value of the "cve_year" field.
func (u *VulnerabilityUpsertOne) ClearCveYear() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearCveYear()
	})
}

// SetOsvID sets the "osv_id" field.
func (u *VulnerabilityUpsertOne) SetOsvID(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetOsvID(v)
	})
}

// UpdateOsvID sets the "osv_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateOsvID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateOsvID()
	})
}

// ClearOsvID clears the value of the "osv_id" field.
func (u *VulnerabilityUpsertOne) ClearOsvID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearOsvID()
	})
}

// Exec executes the query.
func (u *VulnerabilityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VulnerabilityUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VulnerabilityUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VulnerabilityCreateBulk is the builder for creating many Vulnerability entities in bulk.
type VulnerabilityCreateBulk struct {
	config
	builders []*VulnerabilityCreate
	conflict []sql.ConflictOption
}

// Save creates the Vulnerability entities in the database.
func (vcb *VulnerabilityCreateBulk) Save(ctx context.Context) ([]*Vulnerability, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vulnerability, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VulnerabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VulnerabilityCreateBulk) SaveX(ctx context.Context) []*Vulnerability {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VulnerabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VulnerabilityCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vulnerability.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityUpsert) {
//			SetGhsaID(v+v).
//		}).
//		Exec(ctx)
func (vcb *VulnerabilityCreateBulk) OnConflict(opts ...sql.ConflictOption) *VulnerabilityUpsertBulk {
	vcb.conflict = opts
	return &VulnerabilityUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vcb *VulnerabilityCreateBulk) OnConflictColumns(columns ...string) *VulnerabilityUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityUpsertBulk{
		create: vcb,
	}
}

// VulnerabilityUpsertBulk is the builder for "upsert"-ing
// a bulk of Vulnerability nodes.
type VulnerabilityUpsertBulk struct {
	create *VulnerabilityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VulnerabilityUpsertBulk) UpdateNewValues() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VulnerabilityUpsertBulk) Ignore() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityUpsertBulk) DoNothing() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityCreateBulk.OnConflict
// documentation for more info.
func (u *VulnerabilityUpsertBulk) Update(set func(*VulnerabilityUpsert)) *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetGhsaID sets the "ghsa_id" field.
func (u *VulnerabilityUpsertBulk) SetGhsaID(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetGhsaID(v)
	})
}

// UpdateGhsaID sets the "ghsa_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateGhsaID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateGhsaID()
	})
}

// ClearGhsaID clears the value of the "ghsa_id" field.
func (u *VulnerabilityUpsertBulk) ClearGhsaID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearGhsaID()
	})
}

// SetCveID sets the "cve_id" field.
func (u *VulnerabilityUpsertBulk) SetCveID(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetCveID(v)
	})
}

// UpdateCveID sets the "cve_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateCveID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateCveID()
	})
}

// ClearCveID clears the value of the "cve_id" field.
func (u *VulnerabilityUpsertBulk) ClearCveID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearCveID()
	})
}

// SetCveYear sets the "cve_year" field.
func (u *VulnerabilityUpsertBulk) SetCveYear(v int) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetCveYear(v)
	})
}

// AddCveYear adds v to the "cve_year" field.
func (u *VulnerabilityUpsertBulk) AddCveYear(v int) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.AddCveYear(v)
	})
}

// UpdateCveYear sets the "cve_year" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateCveYear() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateCveYear()
	})
}

// ClearCveYear clears the value of the "cve_year" field.
func (u *VulnerabilityUpsertBulk) ClearCveYear() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearCveYear()
	})
}

// SetOsvID sets the "osv_id" field.
func (u *VulnerabilityUpsertBulk) SetOsvID(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetOsvID(v)
	})
}

// UpdateOsvID sets the "osv_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateOsvID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateOsvID()
	})
}

// ClearOsvID clears the value of the "osv_id" field.
func (u *VulnerabilityUpsertBulk) ClearOsvID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.ClearOsvID()
	})
}

// Exec executes the query.
func (u *VulnerabilityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VulnerabilityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

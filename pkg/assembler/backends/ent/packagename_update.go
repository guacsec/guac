// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PackageNameUpdate is the builder for updating PackageName entities.
type PackageNameUpdate struct {
	config
	hooks    []Hook
	mutation *PackageNameMutation
}

// Where appends a list predicates to the PackageNameUpdate builder.
func (pnu *PackageNameUpdate) Where(ps ...predicate.PackageName) *PackageNameUpdate {
	pnu.mutation.Where(ps...)
	return pnu
}

// SetNamespaceID sets the "namespace_id" field.
func (pnu *PackageNameUpdate) SetNamespaceID(i int) *PackageNameUpdate {
	pnu.mutation.SetNamespaceID(i)
	return pnu
}

// SetNillableNamespaceID sets the "namespace_id" field if the given value is not nil.
func (pnu *PackageNameUpdate) SetNillableNamespaceID(i *int) *PackageNameUpdate {
	if i != nil {
		pnu.SetNamespaceID(*i)
	}
	return pnu
}

// SetName sets the "name" field.
func (pnu *PackageNameUpdate) SetName(s string) *PackageNameUpdate {
	pnu.mutation.SetName(s)
	return pnu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pnu *PackageNameUpdate) SetNillableName(s *string) *PackageNameUpdate {
	if s != nil {
		pnu.SetName(*s)
	}
	return pnu
}

// SetNamespace sets the "namespace" edge to the PackageNamespace entity.
func (pnu *PackageNameUpdate) SetNamespace(p *PackageNamespace) *PackageNameUpdate {
	return pnu.SetNamespaceID(p.ID)
}

// AddVersionIDs adds the "versions" edge to the PackageVersion entity by IDs.
func (pnu *PackageNameUpdate) AddVersionIDs(ids ...int) *PackageNameUpdate {
	pnu.mutation.AddVersionIDs(ids...)
	return pnu
}

// AddVersions adds the "versions" edges to the PackageVersion entity.
func (pnu *PackageNameUpdate) AddVersions(p ...*PackageVersion) *PackageNameUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnu.AddVersionIDs(ids...)
}

// Mutation returns the PackageNameMutation object of the builder.
func (pnu *PackageNameUpdate) Mutation() *PackageNameMutation {
	return pnu.mutation
}

// ClearNamespace clears the "namespace" edge to the PackageNamespace entity.
func (pnu *PackageNameUpdate) ClearNamespace() *PackageNameUpdate {
	pnu.mutation.ClearNamespace()
	return pnu
}

// ClearVersions clears all "versions" edges to the PackageVersion entity.
func (pnu *PackageNameUpdate) ClearVersions() *PackageNameUpdate {
	pnu.mutation.ClearVersions()
	return pnu
}

// RemoveVersionIDs removes the "versions" edge to PackageVersion entities by IDs.
func (pnu *PackageNameUpdate) RemoveVersionIDs(ids ...int) *PackageNameUpdate {
	pnu.mutation.RemoveVersionIDs(ids...)
	return pnu
}

// RemoveVersions removes "versions" edges to PackageVersion entities.
func (pnu *PackageNameUpdate) RemoveVersions(p ...*PackageVersion) *PackageNameUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnu.RemoveVersionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pnu *PackageNameUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pnu.sqlSave, pnu.mutation, pnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pnu *PackageNameUpdate) SaveX(ctx context.Context) int {
	affected, err := pnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pnu *PackageNameUpdate) Exec(ctx context.Context) error {
	_, err := pnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnu *PackageNameUpdate) ExecX(ctx context.Context) {
	if err := pnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnu *PackageNameUpdate) check() error {
	if v, ok := pnu.mutation.Name(); ok {
		if err := packagename.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PackageName.name": %w`, err)}
		}
	}
	if _, ok := pnu.mutation.NamespaceID(); pnu.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PackageName.namespace"`)
	}
	return nil
}

func (pnu *PackageNameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(packagename.Table, packagename.Columns, sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt))
	if ps := pnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pnu.mutation.Name(); ok {
		_spec.SetField(packagename.FieldName, field.TypeString, value)
	}
	if pnu.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   packagename.NamespaceTable,
			Columns: []string{packagename.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   packagename.NamespaceTable,
			Columns: []string{packagename.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnu.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagename.VersionsTable,
			Columns: []string{packagename.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !pnu.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagename.VersionsTable,
			Columns: []string{packagename.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagename.VersionsTable,
			Columns: []string{packagename.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packagename.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pnu.mutation.done = true
	return n, nil
}

// PackageNameUpdateOne is the builder for updating a single PackageName entity.
type PackageNameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackageNameMutation
}

// SetNamespaceID sets the "namespace_id" field.
func (pnuo *PackageNameUpdateOne) SetNamespaceID(i int) *PackageNameUpdateOne {
	pnuo.mutation.SetNamespaceID(i)
	return pnuo
}

// SetNillableNamespaceID sets the "namespace_id" field if the given value is not nil.
func (pnuo *PackageNameUpdateOne) SetNillableNamespaceID(i *int) *PackageNameUpdateOne {
	if i != nil {
		pnuo.SetNamespaceID(*i)
	}
	return pnuo
}

// SetName sets the "name" field.
func (pnuo *PackageNameUpdateOne) SetName(s string) *PackageNameUpdateOne {
	pnuo.mutation.SetName(s)
	return pnuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pnuo *PackageNameUpdateOne) SetNillableName(s *string) *PackageNameUpdateOne {
	if s != nil {
		pnuo.SetName(*s)
	}
	return pnuo
}

// SetNamespace sets the "namespace" edge to the PackageNamespace entity.
func (pnuo *PackageNameUpdateOne) SetNamespace(p *PackageNamespace) *PackageNameUpdateOne {
	return pnuo.SetNamespaceID(p.ID)
}

// AddVersionIDs adds the "versions" edge to the PackageVersion entity by IDs.
func (pnuo *PackageNameUpdateOne) AddVersionIDs(ids ...int) *PackageNameUpdateOne {
	pnuo.mutation.AddVersionIDs(ids...)
	return pnuo
}

// AddVersions adds the "versions" edges to the PackageVersion entity.
func (pnuo *PackageNameUpdateOne) AddVersions(p ...*PackageVersion) *PackageNameUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnuo.AddVersionIDs(ids...)
}

// Mutation returns the PackageNameMutation object of the builder.
func (pnuo *PackageNameUpdateOne) Mutation() *PackageNameMutation {
	return pnuo.mutation
}

// ClearNamespace clears the "namespace" edge to the PackageNamespace entity.
func (pnuo *PackageNameUpdateOne) ClearNamespace() *PackageNameUpdateOne {
	pnuo.mutation.ClearNamespace()
	return pnuo
}

// ClearVersions clears all "versions" edges to the PackageVersion entity.
func (pnuo *PackageNameUpdateOne) ClearVersions() *PackageNameUpdateOne {
	pnuo.mutation.ClearVersions()
	return pnuo
}

// RemoveVersionIDs removes the "versions" edge to PackageVersion entities by IDs.
func (pnuo *PackageNameUpdateOne) RemoveVersionIDs(ids ...int) *PackageNameUpdateOne {
	pnuo.mutation.RemoveVersionIDs(ids...)
	return pnuo
}

// RemoveVersions removes "versions" edges to PackageVersion entities.
func (pnuo *PackageNameUpdateOne) RemoveVersions(p ...*PackageVersion) *PackageNameUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnuo.RemoveVersionIDs(ids...)
}

// Where appends a list predicates to the PackageNameUpdate builder.
func (pnuo *PackageNameUpdateOne) Where(ps ...predicate.PackageName) *PackageNameUpdateOne {
	pnuo.mutation.Where(ps...)
	return pnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pnuo *PackageNameUpdateOne) Select(field string, fields ...string) *PackageNameUpdateOne {
	pnuo.fields = append([]string{field}, fields...)
	return pnuo
}

// Save executes the query and returns the updated PackageName entity.
func (pnuo *PackageNameUpdateOne) Save(ctx context.Context) (*PackageName, error) {
	return withHooks(ctx, pnuo.sqlSave, pnuo.mutation, pnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pnuo *PackageNameUpdateOne) SaveX(ctx context.Context) *PackageName {
	node, err := pnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pnuo *PackageNameUpdateOne) Exec(ctx context.Context) error {
	_, err := pnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnuo *PackageNameUpdateOne) ExecX(ctx context.Context) {
	if err := pnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnuo *PackageNameUpdateOne) check() error {
	if v, ok := pnuo.mutation.Name(); ok {
		if err := packagename.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PackageName.name": %w`, err)}
		}
	}
	if _, ok := pnuo.mutation.NamespaceID(); pnuo.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PackageName.namespace"`)
	}
	return nil
}

func (pnuo *PackageNameUpdateOne) sqlSave(ctx context.Context) (_node *PackageName, err error) {
	if err := pnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(packagename.Table, packagename.Columns, sqlgraph.NewFieldSpec(packagename.FieldID, field.TypeInt))
	id, ok := pnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PackageName.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packagename.FieldID)
		for _, f := range fields {
			if !packagename.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != packagename.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pnuo.mutation.Name(); ok {
		_spec.SetField(packagename.FieldName, field.TypeString, value)
	}
	if pnuo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   packagename.NamespaceTable,
			Columns: []string{packagename.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   packagename.NamespaceTable,
			Columns: []string{packagename.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagenamespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnuo.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagename.VersionsTable,
			Columns: []string{packagename.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !pnuo.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagename.VersionsTable,
			Columns: []string{packagename.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   packagename.VersionsTable,
			Columns: []string{packagename.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PackageName{config: pnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packagename.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pnuo.mutation.done = true
	return _node, nil
}

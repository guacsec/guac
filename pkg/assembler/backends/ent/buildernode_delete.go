// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/buildernode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// BuilderNodeDelete is the builder for deleting a BuilderNode entity.
type BuilderNodeDelete struct {
	config
	hooks    []Hook
	mutation *BuilderNodeMutation
}

// Where appends a list predicates to the BuilderNodeDelete builder.
func (bnd *BuilderNodeDelete) Where(ps ...predicate.BuilderNode) *BuilderNodeDelete {
	bnd.mutation.Where(ps...)
	return bnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bnd *BuilderNodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bnd.sqlExec, bnd.mutation, bnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bnd *BuilderNodeDelete) ExecX(ctx context.Context) int {
	n, err := bnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bnd *BuilderNodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(buildernode.Table, sqlgraph.NewFieldSpec(buildernode.FieldID, field.TypeInt))
	if ps := bnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bnd.mutation.done = true
	return affected, err
}

// BuilderNodeDeleteOne is the builder for deleting a single BuilderNode entity.
type BuilderNodeDeleteOne struct {
	bnd *BuilderNodeDelete
}

// Where appends a list predicates to the BuilderNodeDelete builder.
func (bndo *BuilderNodeDeleteOne) Where(ps ...predicate.BuilderNode) *BuilderNodeDeleteOne {
	bndo.bnd.mutation.Where(ps...)
	return bndo
}

// Exec executes the deletion query.
func (bndo *BuilderNodeDeleteOne) Exec(ctx context.Context) error {
	n, err := bndo.bnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{buildernode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bndo *BuilderNodeDeleteOne) ExecX(ctx context.Context) {
	if err := bndo.Exec(ctx); err != nil {
		panic(err)
	}
}

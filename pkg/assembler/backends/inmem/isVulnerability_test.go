//
// Copyright 2023 The GUAC Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package inmem_test

import (
	"context"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/guacsec/guac/internal/testing/ptrfrom"
	"github.com/guacsec/guac/pkg/assembler/backends/inmem"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"golang.org/x/exp/slices"
)

func TestVulnerability(t *testing.T) {
	type call struct {
		Osv  *model.OSVInputSpec
		Vuln model.CveOrGhsaInput
		In   *model.IsVulnerabilityInputSpec
	}
	tests := []struct {
		Name         string
		InOsv        []*model.OSVInputSpec
		InCve        []*model.CVEInputSpec
		InGhsa       []*model.GHSAInputSpec
		Calls        []call
		Query        *model.IsVulnerabilitySpec
		ExpOcc       []*model.IsVulnerability
		ExpIngestErr bool
		ExpQueryErr  bool
	}{
		{
			Name:  "HappyPath",
			InOsv: []*model.OSVInputSpec{o1},
			InCve: []*model.CVEInputSpec{c1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			Query: &model.IsVulnerabilitySpec{
				Justification: ptrfrom.String("test justification"),
			},
			ExpOcc: []*model.IsVulnerability{
				&model.IsVulnerability{
					Osv:           o1out,
					Vulnerability: c1out,
					Justification: "test justification",
				},
			},
		},
		{
			Name:  "Igest same twice",
			InOsv: []*model.OSVInputSpec{o1},
			InCve: []*model.CVEInputSpec{c1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			Query: &model.IsVulnerabilitySpec{
				Justification: ptrfrom.String("test justification"),
			},
			ExpOcc: []*model.IsVulnerability{
				&model.IsVulnerability{
					Osv:           o1out,
					Vulnerability: c1out,
					Justification: "test justification",
				},
			},
		},
		{
			Name:  "Query on Justification",
			InOsv: []*model.OSVInputSpec{o1},
			InCve: []*model.CVEInputSpec{c1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification one",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification two",
					},
				},
			},
			Query: &model.IsVulnerabilitySpec{
				Justification: ptrfrom.String("test justification one"),
			},
			ExpOcc: []*model.IsVulnerability{
				&model.IsVulnerability{
					Osv:           o1out,
					Vulnerability: c1out,
					Justification: "test justification one",
				},
			},
		},
		{
			Name:  "Query on OSV",
			InOsv: []*model.OSVInputSpec{o1, o2},
			InCve: []*model.CVEInputSpec{c1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o2,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			Query: &model.IsVulnerabilitySpec{
				Osv: &model.OSVSpec{
					OsvID: ptrfrom.String("CVE-2022-26499"),
				},
			},
			ExpOcc: []*model.IsVulnerability{
				&model.IsVulnerability{
					Osv:           o2out,
					Vulnerability: c1out,
					Justification: "test justification",
				},
			},
		},
		{
			Name:   "Query on GHSA",
			InOsv:  []*model.OSVInputSpec{o1},
			InCve:  []*model.CVEInputSpec{c1, c2},
			InGhsa: []*model.GHSAInputSpec{g1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c2,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Ghsa: g1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			Query: &model.IsVulnerabilitySpec{
				Vulnerability: &model.CveOrGhsaSpec{
					Ghsa: &model.GHSASpec{},
				},
			},
			ExpOcc: []*model.IsVulnerability{
				&model.IsVulnerability{
					Osv:           o1out,
					Vulnerability: g1out,
					Justification: "test justification",
				},
			},
		},
		{
			Name:   "Query none",
			InOsv:  []*model.OSVInputSpec{o1},
			InCve:  []*model.CVEInputSpec{c1, c2},
			InGhsa: []*model.GHSAInputSpec{g1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c2,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Ghsa: g1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			Query: &model.IsVulnerabilitySpec{
				Vulnerability: &model.CveOrGhsaSpec{
					Ghsa: &model.GHSASpec{
						GhsaID: ptrfrom.String("asdf"),
					},
				},
			},
			ExpOcc: nil,
		},
		{
			Name:   "Query multiple",
			InOsv:  []*model.OSVInputSpec{o1},
			InCve:  []*model.CVEInputSpec{c1, c2},
			InGhsa: []*model.GHSAInputSpec{g1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c2,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Ghsa: g1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			Query: &model.IsVulnerabilitySpec{
				Vulnerability: &model.CveOrGhsaSpec{
					Cve: &model.CVESpec{},
				},
			},
			ExpOcc: []*model.IsVulnerability{
				&model.IsVulnerability{
					Osv:           o1out,
					Vulnerability: c1out,
					Justification: "test justification",
				},
				&model.IsVulnerability{
					Osv:           o1out,
					Vulnerability: c2out,
					Justification: "test justification",
				},
			},
		},
		{
			Name:   "Query ID",
			InOsv:  []*model.OSVInputSpec{o1},
			InCve:  []*model.CVEInputSpec{c1, c2},
			InGhsa: []*model.GHSAInputSpec{g1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c2,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Ghsa: g1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			Query: &model.IsVulnerabilitySpec{
				ID: ptrfrom.String("6"),
			},
			ExpOcc: []*model.IsVulnerability{
				&model.IsVulnerability{
					Osv:           o1out,
					Vulnerability: c1out,
					Justification: "test justification",
				},
			},
		},
		{
			Name:   "Query ID not found",
			InOsv:  []*model.OSVInputSpec{o1},
			InCve:  []*model.CVEInputSpec{c1, c2},
			InGhsa: []*model.GHSAInputSpec{g1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c2,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Ghsa: g1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			Query: &model.IsVulnerabilitySpec{
				ID: ptrfrom.String("123456"),
			},
			ExpOcc: nil,
		},
		{
			Name:  "Ingest without Osv",
			InCve: []*model.CVEInputSpec{c1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			ExpIngestErr: true,
		},
		{
			Name:  "Ingest without GHSA",
			InOsv: []*model.OSVInputSpec{o1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Ghsa: g1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			ExpIngestErr: true,
		},
		{
			Name: "Query Error",
			Query: &model.IsVulnerabilitySpec{
				Vulnerability: &model.CveOrGhsaSpec{
					Cve:  &model.CVESpec{},
					Ghsa: &model.GHSASpec{},
				},
			},
			ExpQueryErr: true,
		},
		{
			Name: "Query Bad ID",
			Query: &model.IsVulnerabilitySpec{
				ID: ptrfrom.String("-123"),
			},
			ExpQueryErr: true,
		},
	}
	ignoreID := cmp.FilterPath(func(p cmp.Path) bool {
		return strings.Compare(".ID", p[len(p)-1].String()) == 0
	}, cmp.Ignore())
	ctx := context.Background()
	for _, test := range tests {
		t.Run(test.Name, func(t *testing.T) {
			b, err := inmem.GetBackend(nil)
			if err != nil {
				t.Fatalf("Could not instantiate testing backend: %v", err)
			}
			for _, o := range test.InOsv {
				if _, err := b.IngestOsv(ctx, o); err != nil {
					t.Fatalf("Could not ingest osv: %v", err)
				}
			}
			for _, c := range test.InCve {
				if _, err := b.IngestCve(ctx, c); err != nil {
					t.Fatalf("Could not ingest cve: %v", err)
				}
			}
			for _, g := range test.InGhsa {
				if _, err := b.IngestGhsa(ctx, g); err != nil {
					t.Fatalf("Could not ingest ghsa: %a", err)
				}
			}
			for _, o := range test.Calls {
				_, err := b.IngestIsVulnerability(ctx, *o.Osv, o.Vuln, *o.In)
				if (err != nil) != test.ExpIngestErr {
					t.Fatalf("did not get expected ingest error, want: %v, got: %v", test.ExpIngestErr, err)
				}
				if err != nil {
					return
				}
			}
			got, err := b.IsVulnerability(ctx, test.Query)
			if (err != nil) != test.ExpQueryErr {
				t.Fatalf("did not get expected query error, want: %v, got: %v", test.ExpQueryErr, err)
			}
			if err != nil {
				return
			}
			if diff := cmp.Diff(test.ExpOcc, got, ignoreID); diff != "" {
				t.Errorf("Unexpected results. (-want +got):\n%s", diff)
			}
		})
	}
}

func TestVulnerabilityNeighbors(t *testing.T) {
	type call struct {
		Osv  *model.OSVInputSpec
		Vuln model.CveOrGhsaInput
		In   *model.IsVulnerabilityInputSpec
	}
	tests := []struct {
		Name         string
		InOsv        []*model.OSVInputSpec
		InCve        []*model.CVEInputSpec
		InGhsa       []*model.GHSAInputSpec
		Calls        []call
		ExpNeighbors map[string][]string
	}{
		{
			Name:  "HappyPath",
			InOsv: []*model.OSVInputSpec{o1},
			InCve: []*model.CVEInputSpec{c1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			ExpNeighbors: map[string][]string{
				"2": []string{"4"},      // osv to isVuln
				"3": []string{"4"},      // cve to isVuln
				"4": []string{"2", "3"}, // isVuln to osv and cve
			},
		},
		{
			Name:   "Two IsVuln",
			InOsv:  []*model.OSVInputSpec{o1},
			InCve:  []*model.CVEInputSpec{c1},
			InGhsa: []*model.GHSAInputSpec{g1},
			Calls: []call{
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Cve: c1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
				call{
					Osv: o1,
					Vuln: model.CveOrGhsaInput{
						Ghsa: g1,
					},
					In: &model.IsVulnerabilityInputSpec{
						Justification: "test justification",
					},
				},
			},
			ExpNeighbors: map[string][]string{
				"2": []string{"5", "6"}, // osv to both isVuln
				"3": []string{"5"},
				"4": []string{"6"},
				"5": []string{"2", "3"},
				"6": []string{"2", "4"},
			},
		},
	}
	ctx := context.Background()
	for _, test := range tests {
		t.Run(test.Name, func(t *testing.T) {
			b, err := inmem.GetBackend(nil)
			if err != nil {
				t.Fatalf("Could not instantiate testing backend: %v", err)
			}
			for _, o := range test.InOsv {
				if _, err := b.IngestOsv(ctx, o); err != nil {
					t.Fatalf("Could not ingest osv: %v", err)
				}
			}
			for _, c := range test.InCve {
				if _, err := b.IngestCve(ctx, c); err != nil {
					t.Fatalf("Could not ingest cve: %v", err)
				}
			}
			for _, g := range test.InGhsa {
				if _, err := b.IngestGhsa(ctx, g); err != nil {
					t.Fatalf("Could not ingest ghsa: %s", err)
				}
			}
			for _, o := range test.Calls {
				if _, err := b.IngestIsVulnerability(ctx, *o.Osv, o.Vuln, *o.In); err != nil {
					t.Fatalf("Could not ingest isVulnerability: %s", err)
				}
			}
			for q, r := range test.ExpNeighbors {
				got, err := b.Neighbors(ctx, q, nil)
				if err != nil {
					t.Fatalf("Could not query neighbors: %s", err)
				}
				gotIDs := convNodes(got)
				slices.Sort(r)
				slices.Sort(gotIDs)
				if diff := cmp.Diff(r, gotIDs); diff != "" {
					t.Errorf("Unexpected results. (-want +got):\n%s", diff)
				}
			}
		})
	}
}

//
// Copyright 2023 The GUAC Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package inmem_test

import (
	"context"
	"slices"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/guacsec/guac/internal/testing/ptrfrom"
	"github.com/guacsec/guac/pkg/assembler/backends"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

var c1 = &model.VulnerabilityInputSpec{
	Type:            "cve",
	VulnerabilityID: "CVE-2019-13110",
}

var c1out = &model.VulnerabilityID{
	VulnerabilityID: "cve-2019-13110",
}

var c2 = &model.VulnerabilityInputSpec{
	Type:            "cve",
	VulnerabilityID: "CVE-2014-8139",
}

var c2out = &model.VulnerabilityID{
	VulnerabilityID: "cve-2014-8139",
}

var c3 = &model.VulnerabilityInputSpec{
	Type:            "CVE",
	VulnerabilityID: "cVe-2014-8140",
}

var c3out = &model.VulnerabilityID{
	VulnerabilityID: "cve-2014-8140",
}

var g1 = &model.VulnerabilityInputSpec{
	Type:            "GHSA",
	VulnerabilityID: "GHSA-h45f-rjvw-2rv2",
}

var g1out = &model.VulnerabilityID{
	VulnerabilityID: "ghsa-h45f-rjvw-2rv2",
}

var g2 = &model.VulnerabilityInputSpec{
	Type:            "ghsa",
	VulnerabilityID: "GHSA-xrw3-wqph-3fxg",
}

var g2out = &model.VulnerabilityID{
	VulnerabilityID: "ghsa-xrw3-wqph-3fxg",
}

var g3 = &model.VulnerabilityInputSpec{
	Type:            "ghsa",
	VulnerabilityID: "GHSA-8v4j-7jgf-5rg9",
}

var g3out = &model.VulnerabilityID{
	VulnerabilityID: "ghsa-8v4j-7jgf-5rg9",
}

var o1 = &model.VulnerabilityInputSpec{
	Type:            "OSV",
	VulnerabilityID: "CVE-2014-8140",
}

var o1out = &model.VulnerabilityID{
	VulnerabilityID: "cve-2014-8140",
}

var o2 = &model.VulnerabilityInputSpec{
	Type:            "osv",
	VulnerabilityID: "CVE-2022-26499",
}

var o2out = &model.VulnerabilityID{
	VulnerabilityID: "cve-2022-26499",
}

var o3 = &model.VulnerabilityInputSpec{
	Type:            "osv",
	VulnerabilityID: "GHSA-h45f-rjvw-2rv2",
}

var o3out = &model.VulnerabilityID{
	VulnerabilityID: "ghsa-h45f-rjvw-2rv2",
}

var noVulnInput = &model.VulnerabilityInputSpec{
	Type:            "noVuln",
	VulnerabilityID: "",
}

var noVulnOut = &model.VulnerabilityID{
	VulnerabilityID: "",
}

func lessCve(a, b *model.Vulnerability) int {
	return strings.Compare(a.VulnerabilityIDs[0].VulnerabilityID,
		b.VulnerabilityIDs[0].VulnerabilityID)
}

func TestVulnerability(t *testing.T) {
	tests := []struct {
		Name         string
		Ingests      []*model.VulnerabilityInputSpec
		ExpIngestErr bool
		Query        *model.VulnerabilitySpec
		Exp          []*model.Vulnerability
		ExpQueryErr  bool
	}{
		{
			Name:    "HappyPath",
			Ingests: []*model.VulnerabilityInputSpec{c1},
			Query:   &model.VulnerabilitySpec{},
			Exp: []*model.Vulnerability{
				{
					Type:             "cve",
					VulnerabilityIDs: []*model.VulnerabilityID{c1out},
				},
			},
		},
		{
			Name:    "Multiple",
			Ingests: []*model.VulnerabilityInputSpec{c1, c2},
			Query:   &model.VulnerabilitySpec{},
			Exp: []*model.Vulnerability{
				{
					Type:             "cve",
					VulnerabilityIDs: []*model.VulnerabilityID{c1out, c2out},
				},
			},
		},
		{
			Name:    "Duplicates",
			Ingests: []*model.VulnerabilityInputSpec{c1, c1, c1},
			Query:   &model.VulnerabilitySpec{},
			Exp: []*model.Vulnerability{
				{
					Type:             "cve",
					VulnerabilityIDs: []*model.VulnerabilityID{c1out},
				},
			},
		},
		{
			Name:    "Query by type - cve",
			Ingests: []*model.VulnerabilityInputSpec{c1, c2, c3, g1, o1},
			Query: &model.VulnerabilitySpec{
				Type: ptrfrom.String("cve"),
			},
			Exp: []*model.Vulnerability{
				{
					Type:             "cve",
					VulnerabilityIDs: []*model.VulnerabilityID{c1out, c2out, c3out},
				},
			},
		},
		{
			Name:    "Query by type - ghsa",
			Ingests: []*model.VulnerabilityInputSpec{c1, c2, c3, g2, g3, o1},
			Query: &model.VulnerabilitySpec{
				Type: ptrfrom.String("ghsa"),
			},
			Exp: []*model.Vulnerability{
				{
					Type:             "ghsa",
					VulnerabilityIDs: []*model.VulnerabilityID{g2out, g3out},
				},
			},
		},
		{
			Name:    "Query by type - osv",
			Ingests: []*model.VulnerabilityInputSpec{c1, c2, c3, g3, o1, o2, o3},
			Query: &model.VulnerabilitySpec{
				Type: ptrfrom.String("osv"),
			},
			Exp: []*model.Vulnerability{
				{
					Type:             "osv",
					VulnerabilityIDs: []*model.VulnerabilityID{o1out, o2out, o3out},
				},
			},
		},
		{
			Name:    "Query by type - noVuln",
			Ingests: []*model.VulnerabilityInputSpec{noVulnInput},
			Query: &model.VulnerabilitySpec{
				Type: ptrfrom.String("noVuln"),
			},
			Exp: []*model.Vulnerability{
				{
					Type:             "novuln",
					VulnerabilityIDs: []*model.VulnerabilityID{noVulnOut},
				},
			},
		},
		{
			Name:    "Query by type - noVuln with boolean",
			Ingests: []*model.VulnerabilityInputSpec{noVulnInput},
			Query: &model.VulnerabilitySpec{
				NoVuln: ptrfrom.Bool(true),
			},
			Exp: []*model.Vulnerability{
				{
					Type:             "novuln",
					VulnerabilityIDs: []*model.VulnerabilityID{noVulnOut},
				},
			},
		},
		{
			Name:    "Query by vulnID",
			Ingests: []*model.VulnerabilityInputSpec{c1, c2, c3},
			Query: &model.VulnerabilitySpec{
				VulnerabilityID: ptrfrom.String("CVE-2014-8140"),
			},
			Exp: []*model.Vulnerability{
				{
					Type:             "cve",
					VulnerabilityIDs: []*model.VulnerabilityID{c3out},
				},
			},
		},
		{
			Name:    "Query by vulnID - noVuln",
			Ingests: []*model.VulnerabilityInputSpec{c1, c2, c3, noVulnInput},
			Query: &model.VulnerabilitySpec{
				Type: ptrfrom.String("noVuln"),
			},
			Exp: []*model.Vulnerability{
				{
					Type:             "novuln",
					VulnerabilityIDs: []*model.VulnerabilityID{noVulnOut},
				},
			},
		},
		{
			Name:    "Query by ID",
			Ingests: []*model.VulnerabilityInputSpec{c1},
			Query: &model.VulnerabilitySpec{
				ID: ptrfrom.String("2"),
			},
			Exp: []*model.Vulnerability{
				{
					Type:             "cve",
					VulnerabilityIDs: []*model.VulnerabilityID{c1out},
				},
			},
		},
		{
			Name:    "Query none",
			Ingests: []*model.VulnerabilityInputSpec{c1, c2, c3},
			Query: &model.VulnerabilitySpec{
				Type: ptrfrom.String("ghsa"),
			},
			Exp: []*model.Vulnerability{},
		},
		{
			Name:    "Query none ID",
			Ingests: []*model.VulnerabilityInputSpec{c1, c2, c3},
			Query: &model.VulnerabilitySpec{
				ID: ptrfrom.String("12345"),
			},
			Exp: nil,
		},
		{
			Name:    "Query invalid ID",
			Ingests: []*model.VulnerabilityInputSpec{c1, c2, c3},
			Query: &model.VulnerabilitySpec{
				ID: ptrfrom.String("asdf"),
			},
			ExpQueryErr: true,
		},
	}
	ignoreID := cmp.FilterPath(func(p cmp.Path) bool {
		return strings.Compare(".ID", p[len(p)-1].String()) == 0
	}, cmp.Ignore())
	ctx := context.Background()
	for _, test := range tests {
		t.Run(test.Name, func(t *testing.T) {
			b, err := backends.Get("inmem", nil, nil)
			if err != nil {
				t.Fatalf("Could not instantiate testing backend: %v", err)
			}
			for _, i := range test.Ingests {
				_, err := b.IngestVulnerability(ctx, *i)
				if (err != nil) != test.ExpIngestErr {
					t.Fatalf("did not get expected ingest error, want: %v, got: %v", test.ExpIngestErr, err)
				}
				if err != nil {
					return
				}
			}
			got, err := b.Vulnerabilities(ctx, test.Query)
			if (err != nil) != test.ExpQueryErr {
				t.Fatalf("did not get expected query error, want: %v, got: %v", test.ExpQueryErr, err)
			}
			if err != nil {
				return
			}
			slices.SortFunc(got, lessCve)
			if diff := cmp.Diff(test.Exp, got, ignoreID); diff != "" {
				t.Errorf("Unexpected results. (-want +got):\n%s", diff)
			}
		})
	}
}

func TestIngestVulnerabilities(t *testing.T) {
	tests := []struct {
		name    string
		ingests []*model.VulnerabilityInputSpec
		exp     []*model.Vulnerability
	}{{
		name:    "Multiple",
		ingests: []*model.VulnerabilityInputSpec{c1, c2, c3},
		exp: []*model.Vulnerability{
			{
				Type:             "cve",
				VulnerabilityIDs: []*model.VulnerabilityID{c1out},
			},
			{
				Type:             "cve",
				VulnerabilityIDs: []*model.VulnerabilityID{c2out},
			},
			{
				Type:             "cve",
				VulnerabilityIDs: []*model.VulnerabilityID{c3out},
			},
		},
	}}
	ignoreID := cmp.FilterPath(func(p cmp.Path) bool {
		return strings.Compare(".ID", p[len(p)-1].String()) == 0
	}, cmp.Ignore())
	ctx := context.Background()
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			b, err := backends.Get("inmem", nil, nil)
			if err != nil {
				t.Fatalf("Could not instantiate testing backend: %v", err)
			}
			got, err := b.IngestVulnerabilities(ctx, test.ingests)
			if err != nil {
				t.Fatalf("ingest error: %v", err)
				return
			}
			if diff := cmp.Diff(test.exp, got, ignoreID); diff != "" {
				t.Errorf("Unexpected results. (-want +got):\n%s", diff)
			}
		})
	}
}

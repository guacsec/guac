//
// Copyright 2023 The GUAC Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package testing

import (
	"context"

	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

func registerAllIsVulnerability(client *demoClient) error {

	selectedOsvID := "CVE-2019-13110"
	selectedOsvSpec := &model.OSVSpec{OsvID: &selectedOsvID}
	selectedOsv, err := client.Osv(context.TODO(), selectedOsvSpec)
	if err != nil {
		return err
	}

	selectedYear := "2019"
	selectedCveID := "CVE-2019-13110"
	selectedCVESpec := &model.CVESpec{Year: &selectedYear, CveID: &selectedCveID}
	selectedCve, err := client.Cve(context.TODO(), selectedCVESpec)
	if err != nil {
		return err
	}
	client.registerIsVulnerability(selectedOsv[0], selectedCve[0], nil, "OSV maps to CVE")

	selectedOsvID = "GHSA-h45f-rjvw-2rv2"
	selectedOsvSpec = &model.OSVSpec{OsvID: &selectedOsvID}
	selectedOsv, err = client.Osv(context.TODO(), selectedOsvSpec)
	if err != nil {
		return err
	}

	selectedGhsaID := "GHSA-h45f-rjvw-2rv2"
	selectedGhsaSpec := &model.GHSASpec{GhsaID: &selectedGhsaID}
	selectedGhsa, err := client.Ghsa(context.TODO(), selectedGhsaSpec)
	if err != nil {
		return err
	}
	client.registerIsVulnerability(selectedOsv[0], nil, selectedGhsa[0], "OSV maps to GHSA")

	return nil
}

// Ingest CertifyPkg

func (c *demoClient) registerIsVulnerability(selectedOsv *model.Osv, selectedCve *model.Cve, selectedGhsa *model.Ghsa, justification string) {

	for _, vuln := range c.isVulnerability {
		if vuln.Justification == justification && vuln.Osv == selectedOsv {
			if val, ok := vuln.Vulnerability.(model.Cve); ok {
				if &val == selectedCve {
					return
				}
			} else if val, ok := vuln.Vulnerability.(model.Ghsa); ok {
				if &val == selectedGhsa {
					return
				}
			}
		}
	}

	newIsVuln := &model.IsVulnerability{
		Osv:           selectedOsv,
		Justification: justification,
		Origin:        "testing backend",
		Collector:     "testing backend",
	}
	if selectedCve != nil {
		newIsVuln.Vulnerability = selectedCve
	} else {
		newIsVuln.Vulnerability = selectedGhsa
	}

	c.isVulnerability = append(c.isVulnerability, newIsVuln)
}

// Query CertifyPkg

func (c *demoClient) IsVulnerability(ctx context.Context, isVulnerabilitySpec *model.IsVulnerabilitySpec) ([]*model.IsVulnerability, error) {

	if isVulnerabilitySpec.Cve != nil && isVulnerabilitySpec.Ghsa != nil {
		return nil, gqlerror.Errorf("cannot specify cve and ghsa together for IsVulnerability")
	}

	var foundIsVulnerability []*model.IsVulnerability

	for _, h := range c.isVulnerability {
		matchOrSkip := true

		if isVulnerabilitySpec.Justification != nil && h.Justification != *isVulnerabilitySpec.Justification {
			matchOrSkip = false
		}
		if isVulnerabilitySpec.Collector != nil && h.Collector != *isVulnerabilitySpec.Collector {
			matchOrSkip = false
		}
		if isVulnerabilitySpec.Origin != nil && h.Origin != *isVulnerabilitySpec.Origin {
			matchOrSkip = false
		}

		if isVulnerabilitySpec.Osv != nil && h.Osv != nil {
			newOSV, err := filterOSVID(h.Osv, isVulnerabilitySpec.Osv)
			if err != nil {
				return nil, err
			}
			if newOSV == nil {
				matchOrSkip = false
			}
		}

		if isVulnerabilitySpec.Cve != nil {
			if val, ok := h.Vulnerability.(*model.Cve); ok {
				if isVulnerabilitySpec.Cve.Year == nil || val.Year == *isVulnerabilitySpec.Cve.Year {
					newCve, err := filterCVEID(val, isVulnerabilitySpec.Cve)
					if err != nil {
						return nil, err
					}
					if newCve == nil {
						matchOrSkip = false
					}
				}
			} else {
				matchOrSkip = false
			}
		}

		if isVulnerabilitySpec.Ghsa != nil {
			if val, ok := h.Vulnerability.(*model.Ghsa); ok {
				newGhsa, err := filterGHSAID(val, isVulnerabilitySpec.Ghsa)
				if err != nil {
					return nil, err
				}
				if newGhsa == nil {
					matchOrSkip = false
				}
			} else {
				matchOrSkip = false
			}
		}

		if matchOrSkip {
			foundIsVulnerability = append(foundIsVulnerability, h)
		}
	}

	return foundIsVulnerability, nil
}

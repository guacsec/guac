//
// Copyright 2023 The GUAC Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package neo4jBackend

import (
	"context"
	"strings"

	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/neo4j/neo4j-go-driver/v4/neo4j"
	"github.com/neo4j/neo4j-go-driver/v4/neo4j/dbtype"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

func (c *neo4jClient) IsVulnerability(ctx context.Context, isVulnerabilitySpec *model.IsVulnerabilitySpec) ([]*model.IsVulnerability, error) {

	queryAll := false
	if isVulnerabilitySpec.Cve != nil && isVulnerabilitySpec.Ghsa != nil {
		return nil, gqlerror.Errorf("cannot specify cve and ghsa together for IsVulnerability")
	} else if isVulnerabilitySpec.Cve == nil && isVulnerabilitySpec.Ghsa == nil {
		queryAll = true
	}

	session := c.driver.NewSession(neo4j.SessionConfig{AccessMode: neo4j.AccessModeRead})
	defer session.Close()

	aggregateIsVulnerability := []*model.IsVulnerability{}

	if queryAll || isVulnerabilitySpec.Cve != nil {
		var sb strings.Builder
		var firstMatch bool = true
		queryValues := map[string]any{}

		// query CVE
		query := "MATCH (root:Osv)-[:OsvHasID]->(osvID:OsvID)" +
			"-[:subject]-(isVulnerability:IsVulnerability)-[:alias]-(cveID:CveID)<-[:CveHasID]" +
			"-(cveYear:CveYear)<-[:CveIsYear]-(rootCve:Cve)"
		sb.WriteString(query)

		returnValue := " RETURN osvID.id, isVulnerability, cveYear.year, cveID.id"

		setOSVMatchValues(&sb, isVulnerabilitySpec.Osv, &firstMatch, queryValues)
		setCveMatchValues(&sb, isVulnerabilitySpec.Cve, &firstMatch, queryValues)
		setIsVulnerabilityValues(&sb, isVulnerabilitySpec, &firstMatch, queryValues)
		sb.WriteString(returnValue)

		result, err := session.ReadTransaction(
			func(tx neo4j.Transaction) (interface{}, error) {

				result, err := tx.Run(sb.String(), queryValues)
				if err != nil {
					return nil, err
				}

				collectedIsVulnerability := []*model.IsVulnerability{}

				for result.Next() {
					osvId := &model.OSVId{
						ID: result.Record().Values[0].(string),
					}
					osv := &model.Osv{
						OsvID: []*model.OSVId{osvId},
					}

					cveID := &model.CVEId{
						ID: result.Record().Values[3].(string),
					}
					cve := &model.Cve{
						Year:  result.Record().Values[2].(string),
						CveID: []*model.CVEId{cveID},
					}

					isVulnerabilityNode := dbtype.Node{}
					if result.Record().Values[1] != nil {
						isVulnerabilityNode = result.Record().Values[6].(dbtype.Node)
					} else {
						return nil, gqlerror.Errorf("isVulnerability Node not found in neo4j")
					}

					isVulnerability := &model.IsVulnerability{
						Osv:           osv,
						Vulnerability: cve,
						Justification: isVulnerabilityNode.Props[justification].(string),
						Origin:        isVulnerabilityNode.Props[origin].(string),
						Collector:     isVulnerabilityNode.Props[collector].(string),
					}
					collectedIsVulnerability = append(collectedIsVulnerability, isVulnerability)
				}
				if err = result.Err(); err != nil {
					return nil, err
				}

				return collectedIsVulnerability, nil
			})
		if err != nil {
			return nil, err
		}
		aggregateIsVulnerability = append(aggregateIsVulnerability, result.([]*model.IsVulnerability)...)
	}

	if queryAll || isVulnerabilitySpec.Ghsa != nil {
		var sb strings.Builder
		var firstMatch bool = true
		queryValues := map[string]any{}

		// query GHSA
		query := "MATCH (root:Osv)-[:OsvHasID]->(osvID:OsvID)" +
			"-[:subject]-(isVulnerability:IsVulnerability)-[:alias]-(ghsaID:GhsaID)<-[:GhsaHasID]" +
			"-(rootGhsa:Ghsa)"
		sb.WriteString(query)

		returnValue := " RETURN osvID.id, isVulnerability, ghsaID.id"

		setOSVMatchValues(&sb, isVulnerabilitySpec.Osv, &firstMatch, queryValues)
		setGhsaMatchValues(&sb, isVulnerabilitySpec.Ghsa, &firstMatch, queryValues)
		setIsVulnerabilityValues(&sb, isVulnerabilitySpec, &firstMatch, queryValues)
		sb.WriteString(returnValue)

		result, err := session.ReadTransaction(
			func(tx neo4j.Transaction) (interface{}, error) {

				result, err := tx.Run(sb.String(), queryValues)
				if err != nil {
					return nil, err
				}

				collectedIsVulnerability := []*model.IsVulnerability{}

				for result.Next() {
					osvId := &model.OSVId{
						ID: result.Record().Values[0].(string),
					}
					osv := &model.Osv{
						OsvID: []*model.OSVId{osvId},
					}

					ghsaId := &model.GHSAId{
						ID: result.Record().Values[2].(string),
					}
					ghsa := &model.Ghsa{
						GhsaID: []*model.GHSAId{ghsaId},
					}

					isVulnerabilityNode := dbtype.Node{}
					if result.Record().Values[6] != nil {
						isVulnerabilityNode = result.Record().Values[1].(dbtype.Node)
					} else {
						return nil, gqlerror.Errorf("isVulnerability Node not found in neo4j")
					}

					isVulnerability := &model.IsVulnerability{
						Osv:           osv,
						Vulnerability: ghsa,
						Justification: isVulnerabilityNode.Props[justification].(string),
						Origin:        isVulnerabilityNode.Props[origin].(string),
						Collector:     isVulnerabilityNode.Props[collector].(string),
					}
					collectedIsVulnerability = append(collectedIsVulnerability, isVulnerability)
				}
				if err = result.Err(); err != nil {
					return nil, err
				}

				return collectedIsVulnerability, nil
			})
		if err != nil {
			return nil, err
		}
		aggregateIsVulnerability = append(aggregateIsVulnerability, result.([]*model.IsVulnerability)...)
	}
	return aggregateIsVulnerability, nil
}

func setIsVulnerabilityValues(sb *strings.Builder, isVulnerabilitySpec *model.IsVulnerabilitySpec, firstMatch *bool, queryValues map[string]any) {
	if isVulnerabilitySpec.Justification != nil {
		matchProperties(sb, *firstMatch, "isVulnerability", justification, "$"+justification)
		*firstMatch = false
		queryValues["justification"] = isVulnerabilitySpec.Justification
	}
	if isVulnerabilitySpec.Origin != nil {
		matchProperties(sb, *firstMatch, "isVulnerability", origin, "$"+origin)
		*firstMatch = false
		queryValues[origin] = isVulnerabilitySpec.Origin
	}
	if isVulnerabilitySpec.Collector != nil {
		matchProperties(sb, *firstMatch, "isVulnerability", collector, "$"+collector)
		*firstMatch = false
		queryValues[collector] = isVulnerabilitySpec.Collector
	}
}

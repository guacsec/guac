#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the HasSLSA. It contains the Subject which can be of type package, source or artifact,
# buliltFrom which can also be of type package, source or artifact, builtby (builder object), build type,  predicate (key value pair of
# the predicate values), slsa version, started on, finished on, origin and collector.
"""
HasSLSA is an attestation represents that the subject has a SLSA attestation associated with it.

subject - an union type that consists of package, source or artifact
builtFrom (object) - list of union types that consists of the package, source or artifact that the subject was build from
builtBy (object) - represents the builder that was used to build the subject
buildType (property) - individual scorecard check scores (Branch-Protection, Code-Review...etc)
slsaPredicate (property) - a list of key value pair that consist of the keys and values of the SLSA predicate
slsaVersion (property) - version of the SLSA predicate
startedOn (property) - timestamp when the SLSA predicate was recorded during the build time of the subject
finishedOn (property) - timestamp when the SLSA predicate was completed during the build time of the subject
origin (property) - where this attestation was generated from (based on which document)
collector (property) - the GUAC collector that collected the document that generated this attestation
"""
type HasSLSA {
  subject: PkgSrcArtObject!
  builtFrom: [PkgSrcArtObject!]!
  builtBy: Builder!
  buildType: String!
  slsaPredicate: [SLSAPredicate!]!
  slsaVersion: String!
  startedOn: String!
  finishedOn: String!
  origin: String!
  collector: String!
}

"""
SLSAPredicate are the values from the SLSA predicate in key-value pair form.
// Predicate:
"predicateType": "https://slsa.dev/provenance/v1",
"predicate": {
    "buildDefinition": {
        "buildType": string,
        "externalParameters": object,
        "systemParameters": object,
        "resolvedDependencies": [ ...#ArtifactReference ],
    },
    "runDetails": {
        "builder": {
            "id": string,
            "version": string,
            "builderDependencies": [ ...#ArtifactReference ],
        },
        "metadata": {
            "invocationId": string,
            "startedOn": #Timestamp,
            "finishedOn": #Timestamp,
        },
        "byproducts": [ ...#ArtifactReference ],
    }
}
where
"externalParameters": {
    "repository": "https://github.com/octocat/hello-world",
    "ref": "refs/heads/main"
},

For example: key = "buildDefinition.externalParameters.repository" value = "https://github.com/octocat/hello-world"
This node cannot be directly referred by other parts of GUAC.
"""
type SLSAPredicate {
  key: String!
  value: String!
}

"""
HasSLSASpec allows filtering the list of HasSLSA to return.
"""
input HasSLSASpec {
  package: PkgSpec
  source: SourceSpec
  artifact: ArtifactSpec
  builtFromPackages: [PkgSpec]
  builtFromSource: [SourceSpec]
  builtFromArtifact: [ArtifactSpec]
  builtBy: BuilderSpec
  buildType: String
  predicate: [SLSAPredicateSpec!] = []
  slsaVersion: String
  startedOn: String
  finishedOn: String
  origin: String
  collector: String
}

"""
SLSAPredicateSpec is the same as SLSAPredicateSpec, but usable as query
input.
"""
input SLSAPredicateSpec {
  key: String!
  value: String!
}

extend type Query {
  "Returns all HasSLSA"
  HasSLSA(hasSLSASpec: HasSLSASpec): [HasSLSA!]!
}

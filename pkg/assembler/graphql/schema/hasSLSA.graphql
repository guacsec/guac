#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for specifiying SLSA provenance

"HasSLSA records that a subject node has a SLSA attestation."
type HasSLSA {
  id: ID!
  "The subject of SLSA attestation"
  subject: Artifact!
  "The SLSA attestation"
  slsa: SLSA!
}

"""
SLSA contains all of the fields present in a SLSA attestation.

The materials and builders are objects of the HasSLSA predicate, everything
else are properties extracted from the attestation.

We also include fields to specify under what conditions the check was performed
(time of scan, version of scanners, etc.) as well as how this information got
included into GUAC (origin document and the collector for that document).
"""
type SLSA {
  "Materials of the build resulting in subject"
  builtFrom: [Artifact!]!
  "Builder performing the build"
  builtBy: Builder!
  "Type of the builder"
  buildType: String!
  "Individual predicates found in the attestation"
  slsaPredicate: [SLSAPredicate!]!
  "Version of the SLSA predicate"
  slsaVersion: String!
  "Timestamp (RFC3339Nano format) of build start time"
  startedOn: Time
  "Timestamp (RFC3339Nano format) of build end time"
  finishedOn: Time
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
  "Reference location of the document in the persistent blob store (if that is configured)"
  documentRef: String!
}

"""
SLSAPredicate are the values from the SLSA predicate in key-value pair form.

For example, given the following predicate

```
"predicate": {
  "buildDefinition": {
    "externalParameters": {
      "repository": "https://github.com/octocat/hello-world",
      ...
    },
    ...
  },
  ...
}
```

we have

```
key   = "buildDefinition.externalParameters.repository"
value = "https://github.com/octocat/hello-world"
```

This node cannot be directly referred by other parts of GUAC.
"""
type SLSAPredicate {
  key: String!
  value: String!
}

"HasSLSASpec allows filtering the list of HasSLSA to return."
input HasSLSASpec {
  id: ID
  subject: ArtifactSpec
  builtFrom: [ArtifactSpec!]
  builtBy: BuilderSpec
  buildType: String
  predicate: [SLSAPredicateSpec!] = []
  slsaVersion: String
  startedOn: Time
  finishedOn: Time
  origin: String
  collector: String
  documentRef: String
}

"SLSAPredicateSpec is the same as SLSAPredicate, but usable as query input."
input SLSAPredicateSpec {
  key: String!
  value: String!
}

"SLSAInputSpec is the same as SLSA but for mutation input."
input SLSAInputSpec {
  buildType: String!
  slsaPredicate: [SLSAPredicateInputSpec!]!
  slsaVersion: String!
  startedOn: Time
  finishedOn: Time
  origin: String!
  collector: String!
  documentRef: String!
}

"SLSAPredicateInputSpec allows ingesting SLSAPredicateSpec."
input SLSAPredicateInputSpec {
  key: String!
  value: String!
}

"""
HasSLSAConnection returns the paginated results for HasSLSA.

totalCount is the total number of results returned.

pageInfo provides information to the client if there is
a next page of results and the starting and
ending cursor for the current set.

edges contains the HasSLSAEdge which contains the current cursor
and the HasSLSA node itself
"""
type HasSLSAConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [HasSLSAEdge!]!
}

"""
HasSLSAEdge contains the cursor for the resulting node and
the HasSLSA node itself.
"""
type HasSLSAEdge {
  cursor: ID!
  node: HasSLSA!
}

extend type Query {
  "Returns all SLSA attestations matching the filter."
  HasSLSA(hasSLSASpec: HasSLSASpec!): [HasSLSA!]!
  "Returns a paginated results via HasSLSAConnection"
  HasSLSAList(hasSLSASpec: HasSLSASpec!, after: ID, first: Int): HasSLSAConnection
}

extend type Mutation {
  "Ingests a SLSA attestation. The returned ID can be empty string."
  ingestSLSA(
    subject: IDorArtifactInput!
    builtFrom: [IDorArtifactInput!]!
    builtBy: IDorBuilderInput!
    slsa: SLSAInputSpec!
  ): ID!
  "Bulk Ingest SLSA attestations. The returned array of IDs can be a an array of empty string."
  ingestSLSAs(
    subjects: [IDorArtifactInput!]!
    builtFromList: [[IDorArtifactInput!]!]!
    builtByList: [IDorBuilderInput!]!
    slsaList: [SLSAInputSpec!]!
  ): [ID!]!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the package trie/tree

"""
Package represents the root of the package trie/tree.

We map package information to a trie, closely matching the pURL specification
(https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
but deviating from it where GUAC heuristics allow for better representation of
package information. Each path in the trie fully represents a package; we split
the trie based on the pURL components.

This node matches a pkg:<type> partial pURL. The type field matches the
pURL types but we might also use "guac" for the cases where the pURL
representation is not complete or when we have custom rules.

Since this node is at the root of the package trie, it is named Package, not
PackageType.
"""
type Package {
  id: ID!
  type: String!
  namespaces: [PackageNamespace!]!
}

"""
PackageNamespace is a namespace for packages.

In the pURL representation, each PackageNamespace matches the
pkg:<type>/<namespace>/ partial pURL.

Namespaces are optional and type specific. Because they are optional, we use
empty string to denote missing namespaces.
"""
type PackageNamespace {
  id: ID!
  namespace: String!
  names: [PackageName!]!
}

"""
PackageName is a name for packages.

In the pURL representation, each PackageName matches the
pkg:<type>/<namespace>/<name> pURL.

Names are always mandatory.

This is the first node in the trie that can be referred to by other parts of
GUAC.
"""
type PackageName {
  id: ID!
  name: String!
  versions: [PackageVersion!]!
}

"""
PackageVersion is a package version.

In the pURL representation, each PackageName matches the
pkg:<type>/<namespace>/<name>@<version> pURL.

Versions are optional and each Package type defines own rules for handling
them. For this level of GUAC, these are just opaque strings.

NOTE: The handling of versions might change before this schema becomes stable.

This node can be referred to by other parts of GUAC.

Subpath and qualifiers are optional. Lack of qualifiers is represented by an
empty list and lack of subpath by empty string (to be consistent with
optionality of namespace and version). Two nodes that have different qualifiers
and/or subpath but the same version mean two different packages in the trie
(they are different). Two nodes that have same version but qualifiers of one
are a subset of the qualifier of the other also mean two different packages in
the trie.
"""
type PackageVersion {
  id: ID!
  version: String!
  qualifiers: [PackageQualifier!]!
  subpath: String!
}

"""
PackageQualifier is a qualifier for a package, a key-value pair.

In the pURL representation, it is a part of the <qualifiers> part of the
pkg:<type>/<namespace>/<name>@<version>?<qualifiers> pURL.

Qualifiers are optional, each Package type defines own rules for handling them,
and multiple qualifiers could be attached to the same package.

This node cannot be directly referred by other parts of GUAC.
"""
type PackageQualifier {
  key: String!
  value: String!
}

"""
The IDs of the ingested package
"""
type PackageIDs {
  packageTypeID: ID!
  packageNamespaceID: ID!
  packageNameID: ID!
  packageVersionID: ID!
}

"""
PkgSpec allows filtering the list of sources to return in a query.

Each field matches a qualifier from pURL. Use null to match on all values at
that level. For example, to get all packages in GUAC backend, use a PkgSpec
where every field is null.

Empty string at a field means matching with the empty string. If passing in
qualifiers, all of the values in the list must match. Since we want to return
nodes with any number of qualifiers if no qualifiers are passed in the input,
we must also return the same set of nodes it the qualifiers list is empty. To
match on nodes that don't contain any qualifier, set matchOnlyEmptyQualifiers
to true. If this field is true, then the qualifiers argument is ignored.
"""
input PkgSpec {
  id: ID
  type: String
  namespace: String
  name: String
  version: String
  qualifiers: [PackageQualifierSpec!] = []
  matchOnlyEmptyQualifiers: Boolean = false
  subpath: String
}

"""
PackageQualifierSpec allows filtering package qualifiers in a query.

Keys are mandatory, but values could also be null if we want to match all
values for a specific key.

NOTE: Before the schema becomes stable, we might change the nulability
requirements of these fields.
"""
input PackageQualifierSpec {
  key: String!
  value: String
}

"""
PkgInputSpec specifies a package for mutations.

This is different than PkgSpec because we want to encode mandatory fields:
type and name. All optional fields are given empty default values.
"""
input PkgInputSpec {
  type: String!
  namespace: String = ""
  name: String!
  version: String = ""
  qualifiers: [PackageQualifierInputSpec!] = []
  subpath: String = ""
}

"PackageQualifierInputSpec allows specifying package qualifiers in mutations."
input PackageQualifierInputSpec {
  key: String!
  value: String!
}

extend type Query {
  "Returns all packages matching a filter."
  packages(pkgSpec: PkgSpec!): [Package!]!
}

extend type Mutation {
  "Ingests a new package and returns a corresponding package hierarchy containing only the IDs. The returned ID can be empty string."
  ingestPackage(pkg: PkgInputSpec!): PackageIDs!
  "Bulk ingests packages and returns the list of corresponding package hierarchies containing only the IDs. The returned array of IDs can be empty strings."
  ingestPackages(pkgs: [PkgInputSpec!]!): [PackageIDs!]!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the CVE trie/tree. It contains the year
# along with the ID associated with vulnerability (CVE ID).

"""
CVE represents common vulnerabilities and exposures. It contains the year along
with the CVE ID.

The year is mandatory.

This node is a singleton: backends guarantee that there is exactly one node
with the same `year` value.
"""
type CVE {
  year: String!
  cveId: [CVEId!]!
}

"""
CVEId is the actual ID that is given to a specific vulnerability

The `id` field is mandatory and canonicalized to be lowercase.

This node can be referred to by other parts of GUAC.
"""
type CVEId {
  id: String!
}

"""
CVESpec allows filtering the list of cves to return.
"""
input CVESpec {
  year: String
  cveId: String
}

"""
CVEInputSpec is the same as CVESpec, but used for mutation ingestion.
"""
input CVEInputSpec {
  year: String!
  cveId: String!
}

extend type Query {
  "Returns all CVEs"
  cve(cveSpec: CVESpec): [CVE!]!
}

extend type Mutation {
  "Ingest a new CVE. Returns the ingested object"
  ingestCVE(cve: CVEInputSpec): CVE!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema to link CVE/GHSA to the OSV data

"CveOrGhsa is a union of CVE and GHSA."
union CveOrGhsa = CVE | GHSA

"""
CveOrGhsaSpec allows using CveOrGhsa union as input type for queries.

Exactly one field must be specified.
"""
input CveOrGhsaSpec {
  cve: CVESpec
  ghsa: GHSASpec
}

"""
CveOrGhsaInput allows using CveOrGhsa union as input type for mutations.

Exactly one field must be specified.
"""
input CveOrGhsaInput {
  cve: CVEInputSpec
  ghsa: GHSAInputSpec
}

"IsVulnerability is an attestation to link CVE/GHSA with data in OSV."
type IsVulnerability {
  id: ID!
  "The OSV that encapsulates the vulnerability"
  osv: OSV!
  "The upstream vulnerability information"
  vulnerability: CveOrGhsa!
  "Justification for the attested relationship"
  justification: String!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
}

"""
IsVulnerabilitySpec allows filtering the list of vulnerability links to return
in a query.
"""
input IsVulnerabilitySpec {
  id: ID
  osv: OSVSpec
  vulnerability: CveOrGhsaSpec
  justification: String
  origin: String
  collector: String
}

"IsVulnerabilityInputSpec represents the input to link CVE/GHSA with OSV data."
input IsVulnerabilityInputSpec {
  justification: String!
  origin: String!
  collector: String!
}

extend type Query {
  "Returns all OSV-CVE/GHSA vulnerability mappings that match a filter."
  IsVulnerability(isVulnerabilitySpec: IsVulnerabilitySpec): [IsVulnerability!]!
}

extend type Mutation {
  "Ingest a mapping between an OSV entry and a CVE/GHSA vulnerability."
  ingestIsVulnerability(osv: OSVInputSpec!, vulnerability: CveOrGhsaInput!, isVulnerability: IsVulnerabilityInputSpec!): IsVulnerability!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the CertifyGood

"""
CertifyGood is an attestation that a package, source, or artifact is considered
good.

All evidence trees record a justification for the property they represent as
well as the document that contains the attestation (origin) and the collector
that collected the document (collector).

The certification applies to a subject which is a package, source, or artifact.
If the attestation targets a package, it must target a PackageName or a
PackageVersion. If the attestation targets a source, it must target a
SourceName.
"""
type CertifyGood {
  id: ID!
  subject: PackageSourceOrArtifact!
  justification: String!
  origin: String!
  collector: String!
  knownSince: Time!
}

"""
CertifyBadSpec allows filtering the list of CertifyBad evidence to return in a
query.

If a package is specified in the subject filter, then it must be specified up
to PackageName or PackageVersion. That is, user must specify package name, or
name and one of version, qualifiers, or subpath.

If a source is specified in the subject filter, then it must specify a name,
and optionally a tag and a commit.

If KnownSince is specified, the returned value will be after or equal to the specified time.
Any nodes time that is before KnownSince is excluded.
"""
input CertifyGoodSpec {
  id: ID
  subject: PackageSourceOrArtifactSpec
  justification: String
  origin: String
  collector: String
  knownSince: Time
}

"""
CertifyGoodInputSpec represents the mutation input to ingest a CertifyGood evidence.
"""
input CertifyGoodInputSpec {
  justification: String!
  origin: String!
  collector: String!
  knownSince: Time!
}

extend type Query {
  "Returns all CertifyGood attestations matching a filter."
  CertifyGood(certifyGoodSpec: CertifyGoodSpec!): [CertifyGood!]!
}

extend type Mutation {
  "Adds a certification that a package, source or artifact is considered good. The returned ID can be empty string."
  ingestCertifyGood(
    subject: PackageSourceOrArtifactInput!
    pkgMatchType: MatchFlags!
    certifyGood: CertifyGoodInputSpec!
  ): ID!
  "Adds bulk certifications that a package, source or artifact is considered good. The returned array of IDs can be a an array of empty string."
  ingestCertifyGoods(
    subjects: PackageSourceOrArtifactInputs!
    pkgMatchType: MatchFlags!
    certifyGoods: [CertifyGoodInputSpec!]!
  ): [ID!]!
}

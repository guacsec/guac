#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the CertifyGood. It contains the subject (which
#  can be either a package, source or artifact), justification, origin of the
#  attestation, and collector

"""
CertifyGood is an attestation represents when a package, source or artifact is considered good

subject - union type that can be either a package, source or artifact object type
justification (property) - string value representing why the subject is considered good
origin (property) - where this attestation was generated from (based on which document)
collector (property) - the GUAC collector that collected the document that generated this attestation

Note: Attestation must occur at the PackageName or the PackageVersion or at the SourceName.
"""
type CertifyGood {
  id: ID!
  subject: PackageSourceOrArtifact!
  justification: String!
  origin: String!
  collector: String!
}

"""
CertifyGoodSpec allows filtering the list of CertifyGood to return.
Note: Package, Source or artifact must be specified but not at the same time
For package - a PackageName or PackageVersion must be specified (name or name, version, qualifiers and subpath)
For source - a SourceName must be specified (name, tag or commit)
"""
input CertifyGoodSpec {
  id: ID
  subject: PackageSourceOrArtifactSpec
  justification: String
  origin: String
  collector: String
}

"""
CertifyGoodInputSpec is the same as CertifyGood but for mutation input.

All fields are required.
"""
input CertifyGoodInputSpec {
  justification: String!
  origin: String!
  collector: String!
}

extend type Query {
  "Returns all CertifyGood"
  CertifyGood(certifyGoodSpec: CertifyGoodSpec): [CertifyGood!]!
}

extend type Mutation {
  "Adds a certification that a package, source or artifact is considered good"
  ingestCertifyGood(subject: PackageSourceOrArtifactInput!, pkgMatchType: MatchFlags, certifyGood: CertifyGoodInputSpec!): CertifyGood!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the CertifyBad

"PackageSourceOrArtifact is a union of Package, Source, and Artifact."
union PackageSourceOrArtifact = Package | Source | Artifact

"""
PackageSourceOrArtifactSpec allows using PackageSourceOrArtifact union as
input type to be used in read queries.

Exactly one of the value must be set to non-nil.
"""
input PackageSourceOrArtifactSpec {
  package: PkgSpec
  source: SourceSpec
  artifact: ArtifactSpec
}

"""
PackageSourceOrArtifactInput allows using PackageSourceOrArtifact union as
input type to be used in mutations.

Exactly one of the value must be set to non-nil.
"""
input PackageSourceOrArtifactInput {
  package: IDorPkgInput
  source: IDorSourceInput
  artifact: IDorArtifactInput
}

"""
PackageSourceOrArtifactInputs allows using PackageSourceOrArtifact union as
input type to be used in bulk mutations.

Exactly one list must be specified.
"""
input PackageSourceOrArtifactInputs {
  packages: [IDorPkgInput!]
  sources: [IDorSourceInput!]
  artifacts: [IDorArtifactInput!]
}

"""
CertifyBad is an attestation that a package, source, or artifact is considered
bad.

All evidence trees record a justification for the property they represent as
well as the document that contains the attestation (origin) and the collector
that collected the document (collector).

The certification applies to a subject which is a package, source, or artifact.
If the attestation targets a package, it must target a PackageName or a
PackageVersion. If the attestation targets a source, it must target a
SourceName.
"""
type CertifyBad {
  id: ID!
  "The package, source or artifact that is attested"
  subject: PackageSourceOrArtifact!
  "The justification for the subject being certified bad"
  justification: String!
  "Timestamp when the certification was created (in RFC 3339 format)"
  knownSince: Time!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
  "Reference location of the document in the persistent blob store (if that is configured)"
  documentRef: String
}

"""
CertifyBadSpec allows filtering the list of CertifyBad evidence to return in a
query.

If a package is specified in the subject filter, then it must be specified up
to PackageName or PackageVersion. That is, user must specify package name, or
name and one of version, qualifiers, or subpath.

If a source is specified in the subject filter, then it must specify a name,
and optionally a tag and a commit.

If KnownSince is specified, the returned value will be after or equal to the specified time.
Any nodes time that is before KnownSince is excluded.
"""
input CertifyBadSpec {
  id: ID
  subject: PackageSourceOrArtifactSpec
  justification: String
  knownSince: Time
  origin: String
  collector: String
  documentRef: String
}

"""
CertifyBadInputSpec represents the mutation input to ingest a CertifyBad
evidence.
"""
input CertifyBadInputSpec {
  justification: String!
  knownSince: Time!
  origin: String!
  collector: String!
  documentRef: String
}

"""
PkgMatchType is an enum to determine if the attestation should be done at the
specific version or package name.
"""
enum PkgMatchType {
  ALL_VERSIONS
  SPECIFIC_VERSION
}

"MatchFlags is used to input the PkgMatchType enum."
input MatchFlags {
  pkg: PkgMatchType!
}

extend type Query {
  "Returns all CertifyBad attestations matching a filter."
  CertifyBad(certifyBadSpec: CertifyBadSpec!): [CertifyBad!]!
}

extend type Mutation {
  "Adds a certification that a package, source or artifact is considered bad. The returned ID can be empty string."
  ingestCertifyBad(
    subject: PackageSourceOrArtifactInput!
    pkgMatchType: MatchFlags!
    certifyBad: CertifyBadInputSpec!
  ): ID!
  "Adds bulk certifications that a package, source or artifact is considered bad. The returned array of IDs can be a an array of empty string."
  ingestCertifyBads(
    subjects: PackageSourceOrArtifactInputs!
    pkgMatchType: MatchFlags!
    certifyBads: [CertifyBadInputSpec!]!
  ): [ID!]!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


"""
FindSoftwareConnection returns the paginated results for FindSoftware.

totalCount is the total number of results returned.

pageInfo provides information to the client if there is
a next page of results and the starting and
ending cursor for the current set.

edges contains the SoftwareEdge which contains the current cursor
and the PackageSourceOrArtifact node itself
"""
type FindSoftwareConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [SoftwareEdge!]!
}

"""
SoftwareEdge contains the cursor for the resulting node and
the PackageSourceOrArtifact node itself.
"""
type SoftwareEdge {
  cursor: ID!
  node: PackageSourceOrArtifact!
}

"""
QueryType is used in conjunction with queryPackagesListForScan to
specify if the last time scanned is checked for either certifyVuln
or certifyLegal.
"""
enum QueryType {
  "direct dependency"
  VULNERABILITY
  "indirect dependency"
  LICENSE
}

extend type Query {
  """
  findSoftware takes in a searchText string and looks for software
  that may be relevant for the input text. This can be seen as fuzzy search
  function for Packages, Sources and Artifacts. findSoftware returns a list
  of Packages, Sources and Artifacts that it determines to be relevant to
  the input searchText.

  Due to the nature of full text search being implemented differently on
  different db platforms, the behavior of findSoftware is not guaranteed
  to be the same. In addition, their statistical nature may result in
  results being different per call and not reproducible.

  All that is asked in the implementation of this API is that it follows
  the spirit of helping to retrieve the right nodes with best effort.

  Warning: This is an EXPERIMENTAL feature. This is subject to change.
  Warning: This is an OPTIONAL feature. Backends are not required to
  implement this API.
  """
  findSoftware(searchText: String!): [PackageSourceOrArtifact!]!
  "Returns a paginated results via CertifyBadConnection"
  findSoftwareList(searchText: String!, after: ID, first: Int): FindSoftwareConnection
  """
  queryPackagesListForScan returns a paginated results via PackageConnection 
  for all packages that need to be re-scanned based on the list of PkgIDs that
  are found from findPackagesThatNeedScanning
  """
  queryPackagesListForScan(pkgIDs: [ID!]!, after: ID, first: Int): PackageConnection
  """
  findPackagesThatNeedScanning returns a list of package IDs
  for all packages that need to be re-scanned (based on the last scan in hours)
  or have never been scanned. By default it will filter out all packages that have
  the type "GUAC" as those are internal packages and will not be found
  by external service providers.

  queryType is used to specify if the last time scanned is checked for either
  certifyVuln or certifyLegal.
  """
  findPackagesThatNeedScanning(queryType: QueryType!, lastScan: Int): [ID!]!
}

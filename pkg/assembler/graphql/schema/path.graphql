#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for advanced queries over all GUAC nodes

"""
Node is a union type of all the possible nodes.

It encapsulates the software tree nodes along with the evidence nodes. In a
path query, all connecting evidence nodes along with their intermediate subject
nodes need to be returned in order to create a complete graph.
"""
union Node =
    Package
  | Source
  | Artifact
  | Builder
  | Vulnerability
  | IsOccurrence
  | IsDependency
  | VulnEqual
  | CertifyVEXStatement
  | HashEqual
  | CertifyBad
  | CertifyGood
  | PkgEqual
  | CertifyScorecard
  | CertifyVuln
  | HasSourceAt
  | HasSBOM
  | HasSLSA
  | HasMetadata
  | PointOfContact
  | VulnerabilityMetadata
  | License
  | CertifyLegal

"""
Edge allows filtering path/neighbors output to only contain a subset of all
possible GUAC links.

Each member of the enum is formed by merging two Node names with _. Each name
is converted from CamelCase to CAPITALS_WITH_UNDERSCORES. Only valid edges
(pairs from Node to Node) are included.

The only exception to the above rule is for links out of HasSLSA. The names are
HAS_SLSA_SUBJECT, HAS_SLSA_BUILT_BY, and HAS_SLSA_MATERIALS. This is because
ARTIFACT_HAS_SLSA is only from subject Artifact to HasSLSA.
"""
enum Edge {
  ARTIFACT_CERTIFY_BAD
  ARTIFACT_CERTIFY_GOOD
  ARTIFACT_CERTIFY_VEX_STATEMENT
  ARTIFACT_HASH_EQUAL
  ARTIFACT_HAS_METADATA
  ARTIFACT_HAS_SBOM
  ARTIFACT_HAS_SLSA
  ARTIFACT_IS_OCCURRENCE
  ARTIFACT_POINT_OF_CONTACT
  BUILDER_HAS_SLSA
  LICENSE_CERTIFY_LEGAL
  PACKAGE_CERTIFY_BAD
  PACKAGE_CERTIFY_GOOD
  PACKAGE_CERTIFY_LEGAL
  PACKAGE_CERTIFY_VEX_STATEMENT
  PACKAGE_CERTIFY_VULN
  PACKAGE_HAS_METADATA
  PACKAGE_HAS_SBOM
  PACKAGE_HAS_SOURCE_AT
  PACKAGE_IS_DEPENDENCY
  PACKAGE_IS_OCCURRENCE
  PACKAGE_NAME_PACKAGE_NAMESPACE
  PACKAGE_NAME_PACKAGE_VERSION
  PACKAGE_NAMESPACE_PACKAGE_NAME
  PACKAGE_NAMESPACE_PACKAGE_TYPE
  PACKAGE_PKG_EQUAL
  PACKAGE_POINT_OF_CONTACT
  PACKAGE_TYPE_PACKAGE_NAMESPACE
  PACKAGE_VERSION_PACKAGE_NAME
  SOURCE_CERTIFY_BAD
  SOURCE_CERTIFY_GOOD
  SOURCE_CERTIFY_LEGAL
  SOURCE_CERTIFY_SCORECARD
  SOURCE_HAS_METADATA
  SOURCE_HAS_SOURCE_AT
  SOURCE_IS_OCCURRENCE
  SOURCE_NAME_SOURCE_NAMESPACE
  SOURCE_NAMESPACE_SOURCE_NAME
  SOURCE_NAMESPACE_SOURCE_TYPE
  SOURCE_POINT_OF_CONTACT
  SOURCE_TYPE_SOURCE_NAMESPACE
  VULNERABILITY_CERTIFY_VEX_STATEMENT
  VULNERABILITY_CERTIFY_VULN
  VULNERABILITY_ID_VULNERABILITY_TYPE
  VULNERABILITY_TYPE_VULNERABILITY_ID
  VULNERABILITY_VULN_EQUAL
  VULNERABILITY_VULN_METADATA

  CERTIFY_BAD_ARTIFACT
  CERTIFY_BAD_PACKAGE
  CERTIFY_BAD_SOURCE
  CERTIFY_GOOD_ARTIFACT
  CERTIFY_GOOD_PACKAGE
  CERTIFY_GOOD_SOURCE
  CERTIFY_LEGAL_LICENSE
  CERTIFY_LEGAL_PACKAGE
  CERTIFY_LEGAL_SOURCE
  CERTIFY_SCORECARD_SOURCE
  CERTIFY_VEX_STATEMENT_ARTIFACT
  CERTIFY_VEX_STATEMENT_PACKAGE
  CERTIFY_VEX_STATEMENT_VULNERABILITY
  CERTIFY_VULN_PACKAGE
  CERTIFY_VULN_VULNERABILITY
  HASH_EQUAL_ARTIFACT
  HAS_METADATA_ARTIFACT
  HAS_METADATA_PACKAGE
  HAS_METADATA_SOURCE
  HAS_SBOM_ARTIFACT
  HAS_SBOM_PACKAGE
  HAS_SBOM_INCLUDED_SOFTWARE
  HAS_SBOM_INCLUDED_DEPENDENCIES
  HAS_SBOM_INCLUDED_OCCURRENCES
  HAS_SLSA_BUILT_BY
  HAS_SLSA_MATERIALS
  HAS_SLSA_SUBJECT
  HAS_SOURCE_AT_PACKAGE
  HAS_SOURCE_AT_SOURCE
  IS_DEPENDENCY_PACKAGE
  IS_OCCURRENCE_ARTIFACT
  IS_OCCURRENCE_PACKAGE
  IS_OCCURRENCE_SOURCE
  PKG_EQUAL_PACKAGE
  POINT_OF_CONTACT_ARTIFACT
  POINT_OF_CONTACT_PACKAGE
  POINT_OF_CONTACT_SOURCE
  VULN_EQUAL_VULNERABILITY
  VULN_METADATA_VULNERABILITY
}

extend type Query {
  """
  path query returns a path between subject and target, of a maximum length.

  Since we want to uniquely identify endpoints, nodes must be specified by
  valid IDs only (instead of using filters/input spec structs).

  Specifying any Edge value in `usingOnly` will make the path only contain the
  corresponding GUAC evidence trees (GUAC verbs).
  """
  path(
    subject: ID!
    target: ID!
    maxPathLength: Int!
    usingOnly: [Edge!]!
  ): [Node!]!

  """
  neighbors returns all the direct neighbors of a node.

  Similarly, the input is only specified by its ID.

  Specifying any Edge value in `usingOnly` will make the neighbors list only
  contain the corresponding GUAC evidence trees (GUAC verbs).
  """
  neighbors(node: ID!, usingOnly: [Edge!]!): [Node!]!

  """
  node returns a single node, regardless of type.

  The input is only specified by its ID.
  """
  node(node: ID!): Node!

  """
  nodes returns an array of nodes, regardless of type.

  The input is an array of IDs to retrieve.
  """
  nodes(nodes: [ID!]!): [Node!]!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for advanced queries over all GUAC nodes

"""
Node is a union type of all the possible nodes.

It encapsulates the software tree nodes along with the evidence nodes. In a
path query, all connecting evidence nodes along with their intermediate subject
nodes need to be returned in order to create a complete graph.
"""
union Node
  = Package
  | Source
  | Artifact
  | Builder
  | OSV
  | CVE
  | GHSA
  | NoVuln
  | IsOccurrence
  | IsDependency
  | IsVulnerability
  | CertifyVEXStatement
  | HashEqual
  | CertifyBad
  | CertifyGood
  | PkgEqual
  | CertifyScorecard
  | CertifyVuln
  | HasSourceAt
  | HasSBOM
  | HasSLSA

"""
Edge allows filtering path/neighbors output to only contain a subset of all
possible GUAC verbs.

Each member of the enum matches with one of the verbs. The naming scheme is
converting the CamelCase name to CAPITALS_WITH_UNDERSCORES and appending noun
node in CAPITALS.

Note that each GUAC verb is at the same time both an Edge and a Node. We need
to return it as a Node to have it show up in the return type of the queries and
we need it to be an edge to allow filtering paths to only consider certain
predicates.
"""
enum Edge {
  ARTIFACT_CERTIFY_BAD
  ARTIFACT_CERTIFY_GOOD
  ARTIFACT_CERTIFY_VEX_STATEMENT
  ARTIFACT_HASH_EQUAL
  ARTIFACT_HAS_SLSA
  ARTIFACT_IS_OCCURRENCE
  BUILDER_HAS_SLSA
  CVE_CERTIFY_VEX_STATEMENT
  CVE_CERTIFY_VULN
  CVE_IS_VULNERABILITY
  GHSA_CERTIFY_VEX_STATEMENT
  GHSA_CERTIFY_VULN
  GHSA_IS_VULNERABILITY
  NO_VULN_CERTIFY_VULN
  OSV_CERTIFY_VEX_STATEMENT
  OSV_CERTIFY_VULN
  OSV_IS_VULNERABILITY
  PACKAGE_CERTIFY_BAD
  PACKAGE_CERTIFY_GOOD
  PACKAGE_CERTIFY_VEX_STATEMENT
  PACKAGE_CERTIFY_VULN
  PACKAGE_HAS_SBOM
  PACKAGE_HAS_SOURCE_AT
  PACKAGE_IS_DEPENDENCY
  PACKAGE_IS_OCCURRENCE
  PACKAGE_PKG_EQUAL
  SOURCE_CERTIFY_BAD
  SOURCE_CERTIFY_GOOD
  SOURCE_CERTIFY_SCORECARD
  SOURCE_HAS_SBOM
  SOURCE_HAS_SOURCE_AT
  SOURCE_IS_OCCURRENCE
}

extend type Query {
  """
  path query returns a path between subject and target, of a maximum length

  Since we want to uniquely identify endpoints, nodes must be specified by
  valid IDs only (instead of using filters/input spec structs).

  Specifying any Edge value in `usingOnly` will make the path only contain the
  corresponding GUAC evidence trees (GUAC verbs).
  """
  path(subject: ID!, target: ID!, maxPathLength: Int!, usingOnly: [Edge!]!): [Node!]!

  """
  neighbors returns all the direct neighbors of a node

  Similarly, the input is only specified by its ID.

  Specifying any Edge value in `usingOnly` will make the neighbors list only
  contain the corresponding GUAC evidence trees (GUAC verbs).
  """
  neighbors(node: ID!, usingOnly: [Edge!]!): [Node!]!

  """
  node returns a single node, regardless of type

  The input is only specified by its ID.
  """
  node(node: ID!): Node!
}

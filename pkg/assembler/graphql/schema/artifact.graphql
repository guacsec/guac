#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the artifact

"""
Artifact represents an artifact identified by a checksum hash.

The checksum is split into the digest value and the algorithm used to generate
it. Both fields are mandatory and canonicalized to be lowercase.

If having a checksum Go object, algorithm can be
strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
"""
type Artifact {
  id: ID!
  algorithm: String!
  digest: String!
}

"""
ArtifactSpec allows filtering the list of artifacts to return in a query.

The checksum fields are canonicalized to be lowercase.
"""
input ArtifactSpec {
  id: ID
  algorithm: String
  digest: String
}

"""
ArtifactInputSpec specifies an artifact for mutations.

The checksum fields are canonicalized to be lowercase.
"""
input ArtifactInputSpec {
  algorithm: String!
  digest: String!
}

"""
IDorArtifactInput allows for specifying either the artifact ID or the ArtifactInputSpec.

Either the ID or the ArtifactInputSpec must be specified. Both cannot be nil.

If the ID is specified, the ArtifactInputSpec is not used.
"""
input IDorArtifactInput {
  artifactID: ID
  artifactInput: ArtifactInputSpec
}

"""
ArtifactConnection returns the paginated results for artifact.

totalCount is the total number of results returned.

pageInfo provides information to the client if there is
a next page of results and the starting and
ending cursor for the current set.

edges contains the ArtifactEdge which contains the current cursor
and the artifact node itself
"""
type ArtifactConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [ArtifactEdge!]!
}

"""
ArtifactEdge contains the cursor for the resulting node and
the artifact node itself.
"""
type ArtifactEdge {
  cursor: ID!
  node: Artifact!
}

extend type Query {
  "Returns all artifacts matching a filter."
  artifacts(artifactSpec: ArtifactSpec!): [Artifact!]!
  "Returns a paginated results via ArtifactConnection"
  artifactsList(artifactSpec: ArtifactSpec!, after: ID, first: Int): ArtifactConnection
}

extend type Mutation {
  "Ingests a new artifact and returns it."
  ingestArtifact(artifact: IDorArtifactInput): ID!
  "Bulk ingests new artifacts and returns a list of them. The returned array of IDs must be in the same order as the inputs."
  ingestArtifacts(artifacts: [IDorArtifactInput!]!): [ID!]!
}

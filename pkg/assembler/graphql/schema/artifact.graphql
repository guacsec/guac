#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the artifact. It contains the algorithm and
# digest fields

"""
Artifact represents the artifact and contains a digest field

Both field are mandatory and canonicalized to be lowercase.

If having a `checksum` Go object, `algorithm` can be
`strings.ToLower(string(checksum.Algorithm))` and `digest` can be
`checksum.Value`.
"""
type Artifact {
  algorithm: String!
  digest: String!
}

"""
ArtifactSpec allows filtering the list of artifacts to return.

Both arguments will be canonicalized to lowercase.
"""
input ArtifactSpec {
  algorithm: String
  digest: String
}

"""
ArtifactInputSpec is the same as Artifact, but used as mutation input.

Both arguments will be canonicalized to lowercase.
"""
input ArtifactInputSpec {
  algorithm: String!
  digest: String!
}

extend type Query {
  "Returns all artifacts"
  artifacts(artifactSpec: ArtifactSpec): [Artifact!]!
}

extend type Mutation {
  "Ingest a new artifact. Returns the ingested artifact"
  ingestArtifact(artifact: ArtifactInputSpec): Artifact!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the source trie/tree. This tree is a derivative of
# the pURL specification where it has a type, namespace, name and finally a qualifier that
# contain the tag or commit. 

"""
Source represents a source.

This can be the version control system that is being used.

This node is a singleton: backends guarantee that there is exactly one node with
the same `type` value.

Also note that this is named `Source`, not `SourceType`. This is only to make
queries more readable.
"""
type Source {
  type: String!
  namespaces: [SourceNamespace!]!
}

"""
SourceNamespace is a namespace for sources.

This can be represented as the location of the repo (such as github/gitlab/bitbucket)

Namespaces are optional and type specific. Because they are optional, we use
empty string to denote missing namespaces.
"""
type SourceNamespace {
  namespace: String!
  names: [SourceName!]!
}

"""
SourceName is a url of the repository and its tag or commit.

SourceName is mandatory. Either a tag or commit needs to be specified.

This is the first node in the trie that can be referred to by other parts of
GUAC.
"""
type SourceName {
  name: String!
  tag: String
  commit: String
}

"""
SourceSpec allows filtering the list of sources to return.

Empty string at a field means matching with the empty string.
"""
input SourceSpec {
  type: String
  namespace: String
  name: String
  qualifier: SourceQualifierInput
}

"""
SourceQualifierInput is the same as SourceQualifier, but usable as query
input.
"""
input SourceQualifierInput {
  tag: String
  commit: String
}

extend type Query {
  "Returns all sources"
  sources(sourceSpec: SourceSpec): [Source!]!
}

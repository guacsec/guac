#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the source trie/tree. This tree is a derivative
# of the pURL specification where it has a type, namespace, name and finally a
# qualifier that contain the tag or commit.

"""
Source represents a source.

This can be the version control system that is being used.

This node is a singleton: backends guarantee that there is exactly one node
with the same `type` value.

Also note that this is named `Source`, not `SourceType`. This is only to make
queries more readable.
"""
type Source {
  type: String!
  namespaces: [SourceNamespace!]!
}

"""
SourceNamespace is a namespace for sources.

This is the location of the repository (such as github/gitlab/bitbucket).

The `namespace` field is mandatory.
"""
type SourceNamespace {
  namespace: String!
  names: [SourceName!]!
}

"""
SourceName is a url of the repository and its tag or commit.

The `name` field is mandatory. The `tag` and `commit` fields are optional, but
it is an error to specify both.

This is the only source trie node that can be referenced by other parts of
GUAC.
"""
type SourceName {
  name: String!
  tag: String
  commit: String
}

"""
SourceSpec allows filtering the list of sources to return.

Empty string at a field means matching with the empty string. Missing field
means retrieving all possible matches.

It is an error to specify both `tag` and `commit` fields, except it both are
set as empty string (in which case the returned sources are only those for
which there is no tag/commit information).
"""
input SourceSpec {
  type: String
  namespace: String
  name: String
  tag: String
  commit: String
}

"""
SourceInputSpec specifies a source for a mutation.

This is different than SourceSpec because we want to encode that all fields
except tag and commit are mandatory fields. All optional fields are given
empty default values.

It is an error to set both `tag` and `commit` fields to values different than
the default.
"""
input SourceInputSpec {
  type: String!
  namespace: String!
  name: String!
  tag: String = ""
  commit: String = ""
}

extend type Query {
  "Returns all sources"
  sources(sourceSpec: SourceSpec): [Source!]!
}

extend type Mutation {
  "Ingest a new source. Returns the ingested source trie"
  ingestSource(source: SourceInputSpec): Source!
}

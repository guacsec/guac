#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the source trie/tree

"""
Source represents the root of the source trie/tree.

We map source information to a trie, as a derivative of the pURL specification:
each path in the trie represents a type, namespace, name and an optional
qualifier that stands for tag/commit information.

This node represents the type part of the trie path. It is used to represent
the version control system that is being used.

Since this node is at the root of the source trie, it is named Source, not
SourceType.
"""
type Source {
  id: ID!
  type: String!
  namespaces: [SourceNamespace!]!
}

"""
SourceNamespace is a namespace for sources.

This is the location of the repository (such as github/gitlab/bitbucket).

The namespace field is mandatory.
"""
type SourceNamespace {
  id: ID!
  namespace: String!
  names: [SourceName!]!
}

"""
SourceName represents the url of the repository.

The name field is mandatory. The tag and commit fields are optional, but it is
an error to specify both.

This is the only source trie node that can be referenced by other parts of GUAC.
"""
type SourceName {
  id: ID!
  name: String!
  tag: String
  commit: String
}

"""
The IDs of the ingested pacsourcekage
"""
type SourceIDs {
  sourceTypeID: ID!
  sourceNamespaceID: ID!
  sourceNameID: ID!
}

"""
SourceSpec allows filtering the list of sources to return in a query.

Empty string at a field means matching with the empty string. Missing field
means retrieving all possible matches.

It is an error to specify both tag and commit fields, except it both are set as
empty string (in which case the returned sources are only those for which there
is no tag/commit information).
"""
input SourceSpec {
  id: ID
  type: String
  namespace: String
  name: String
  tag: String
  commit: String
}

"""
SourceInputSpec specifies a source for mutations.

This is different than SourceSpec because we want to encode that all fields
except tag and commit are mandatory fields. All optional fields are given empty
default values.

It is an error to set both tag and commit fields to values different than the
default.
"""
input SourceInputSpec {
  type: String!
  namespace: String!
  name: String!
  tag: String = ""
  commit: String = ""
}

extend type Query {
  "Returns all sources matching a filter."
  sources(sourceSpec: SourceSpec!): [Source!]!
}

extend type Mutation {
  "Ingests a new source and returns the corresponding source trie path. The returned ID can be empty string."
  ingestSource(source: SourceInputSpec!): SourceIDs!
  "Bulk ingests sources and returns the list of corresponding source trie path. The returned array of IDs can be a an array of empty string."
  ingestSources(sources: [SourceInputSpec!]!): [SourceIDs!]!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for recording presence of SBOMs

type HasSBOM {
  id: ID!
  "SBOM subject"
  subject: PackageOrArtifact!
  "Identifier for the SBOM document"
  uri: String!
  "Algorithm by which SBOMs digest was computed"
  algorithm: String!
  "Digest of SBOM"
  digest: String!
  "Location from which the SBOM can be downloaded"
  downloadLocation: String!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
  "Timestamp for SBOM creation"
  knownSince: Time!
  "Included packages and artifacts"
  includedSoftware: [PackageOrArtifact!]!
  "Included dependencies"
  includedDependencies: [IsDependency!]!
  "Included occurrences"
  includedOccurrences: [IsOccurrence!]!
}

"""
HasSBOMSpec allows filtering the list of HasSBOM to return.

Only the package or artifact can be added, not both.

If KnownSince is specified, the returned value will be after or equal to the specified time.
Any nodes time that is before KnownSince is excluded.
"""
input HasSBOMSpec {
  id: ID
  subject: PackageOrArtifactSpec
  uri: String
  algorithm: String
  digest: String
  downloadLocation: String
  origin: String
  collector: String
  knownSince: Time
  includedSoftware: [PackageOrArtifactSpec]!
  includedDependencies: [IsDependencySpec]!
  includedOccurrences: [IsOccurrenceSpec]!
}

input HasSBOMIncludesInputSpec {
  software: [ID!]!
  dependencies: [ID!]!
  occurrences: [ID!]!
}

"HasSBOMInputSpec is similar to HasSBOM but for mutation input."
input HasSBOMInputSpec {
  uri: String!
  algorithm: String!
  digest: String!
  downloadLocation: String!
  origin: String!
  collector: String!
  knownSince: Time!
}

extend type Query {
  "Returns all SBOM certifications."
  HasSBOM(hasSBOMSpec: HasSBOMSpec!): [HasSBOM!]!
}

extend type Mutation {
  "Certifies that a package or artifact has an SBOM. The returned ID can be empty string."
  ingestHasSBOM(
    subject: PackageOrArtifactInput!
    hasSBOM: HasSBOMInputSpec!
    includes: HasSBOMIncludesInputSpec!
  ): ID!
  "Bulk ingest that package or artifact has an SBOM. The returned array of IDs can be a an array of empty string."
  ingestHasSBOMs(
    subjects: PackageOrArtifactInputs!
    hasSBOMs: [HasSBOMInputSpec!]!
    includes: [HasSBOMIncludesInputSpec!]!
  ): [ID!]!
}

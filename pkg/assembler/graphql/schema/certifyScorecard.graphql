#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema to certify Scorecard for a source repository

"""
Define the Time scalar, to be used across GUAC. It follows RFC3339Nano format.

This is implicit via https://gqlgen.com/reference/scalars/#time

For GUAC, we assume that all times are stored in UTC format.
"""
scalar Time

"""
CertifyScorecard is an attestation to attach a Scorecard analysis to a
particular source repository.
"""
type CertifyScorecard {
  id: ID!
  "The source repository that is being scanned (attestation subject)"
  source: Source!
  "The Scorecard attached to the repository (attestation object)"
  scorecard: Scorecard!
}

"""
Scorecard contains all of the fields present in a Scorecard attestation.

We also include fields to specify under what conditions the check was performed
(time of scan, version of scanners, etc.) as well as how this information got
included into GUAC (origin document and the collector for that document).
"""
type Scorecard {
  "Individual Scorecard check scores (Branch-Protection, Code-Review, ...)"
  checks: [ScorecardCheck!]!
  "Overall Scorecard score for the source"
  aggregateScore: Float!
  "Exact timestamp when the source was last scanned (in RFC 3339 format)"
  timeScanned: Time!
  "Version of the Scorecard scanner used to analyze the source"
  scorecardVersion: String!
  "Commit of the Scorecards repository at the time of scanning the source"
  scorecardCommit: String!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
}

"""
ScorecardCheck are the individual checks from scorecard and their values as a
key-value pair.

For example:  Branch-Protection, Code-Review...etc

Based off scorecard's:
type jsonCheckResultV2 struct {
  Details []string                 `json:"details"`
  Score   int                      `json:"score"`
  Reason  string                   `json:"reason"`
  Name    string                   `json:"name"`
  Doc     jsonCheckDocumentationV2 `json:"documentation"`
}
This node cannot be directly referred by other parts of GUAC.
"""
type ScorecardCheck {
  check: String!
  score: Int!
}

"CertifyScorecardSpec allows filtering the list of Scorecards to return."
input CertifyScorecardSpec {
  id: ID
  source: SourceSpec
  timeScanned: Time
  aggregateScore: Float
  checks: [ScorecardCheckSpec!] = []
  scorecardVersion: String
  scorecardCommit: String
  origin: String
  collector: String
}

"ScorecardCheckSpec is the same as ScorecardCheck, but usable as query input."
input ScorecardCheckSpec {
  check: String!
  score: Int!
}

"ScorecardInputSpec represents the mutation input to ingest a Scorecard."
input ScorecardInputSpec {
  checks: [ScorecardCheckInputSpec!]!
  aggregateScore: Float!
  timeScanned: Time!
  scorecardVersion: String!
  scorecardCommit: String!
  origin: String!
  collector: String!
}

"ScorecardCheckInputSpec represents the mutation input for a Scorecard check."
input ScorecardCheckInputSpec {
  check: String!
  score: Int!
}

extend type Query {
  "Returns all Scorecard certifications matching the filter."
  scorecards(scorecardSpec: CertifyScorecardSpec!): [CertifyScorecard!]!
}

extend type Mutation {
  "Adds a certification that a source repository has a Scorecard. The returned ID can be empty string."
  ingestScorecard(source: SourceInputSpec!, scorecard: ScorecardInputSpec!): ID!
  "Adds bulk certifications that a source repository has a Scorecard. The returned array of IDs can be a an array of empty string."
  ingestScorecards(
    sources: [SourceInputSpec!]!
    scorecards: [ScorecardInputSpec!]!
  ): [ID!]!
}

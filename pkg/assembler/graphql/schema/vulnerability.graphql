#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the vulnerability trie/tree

"""
Vulnerability represents the root of the vulnerability trie/tree.

We map vulnerability information to a trie, as a derivative of the pURL specification:
each path in the trie represents a type and a vulnerability ID. This allows for generic
representation of the various vulnerabilities and does not limit to just cve, ghsa or osv. 
This would be in the general format: vuln://<general-type>/<vuln-id>

Examples:

CVE, using path separator: vuln://cve/cve-2023-20753
OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
Random vendor: vuln://snyk/sn-whatever
NoVuln: vuln://novuln/


This node represents the type part of the trie path. It is used to represent
the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific

Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
VulnerabilityType.

NoVuln is a special vulnerability node to attest that no vulnerability has been
found during a vulnerability scan. It will have the type "novuln" and contain an empty string 
for vulnerabilityID

The resolvers will enforce that both the type and vulnerability IDs are lower case.
"""
type Vulnerability {
  id: ID!
  type: String!
  vulnerabilityIDs: [VulnerabilityID!]!
}

"""
VulnerabilityID is a specific vulnerability ID associated with the type of the vulnerability.

This will be enforced to be all lowercase.

The namespace field is mandatory.
"""
type VulnerabilityID {
  id: ID!
  vulnerabilityID: String!
}

"""
VulnerabilitySpec allows filtering the list of vulnerabilities to return in a query.

Use null to match on all values at that level. 
For example, to get all vulnerabilities in GUAC backend, use a VulnSpec
where every field is null.

"""
input VulnerabilitySpec {
  id: ID
  type: String
  vulnerabilityID: String
}

"""
VulnInputSpec specifies a vulnerability for mutations.

This is different than VulnSpec because we want to encode mandatory fields:
type and vulnerabilityID.
"""
input VulnerabilityInputSpec {
  type: String!
  vulnerabilityID: String!
}

extend type Query {
  "Returns all vulnerabilities matching a filter."
  vulnerabilities(vulnSpec: VulnerabilitySpec!): [Vulnerability!]!
}

extend type Mutation {
  "Ingests a new vulnerability and returns the corresponding vulnerability trie path."
  ingestVulnerability(vuln: VulnerabilityInputSpec!): Vulnerability!
  "Bulk ingests vulnerabilities and returns the list of corresponding vulnerability trie path."
  ingestVulnerabilities(vulns: [VulnerabilityInputSpec!]!): [Vulnerability!]!
}

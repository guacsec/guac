#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the vulnerability trie/tree

"""
Vulnerability represents the root of the vulnerability trie/tree.

We map vulnerability information to a trie, as a derivative of the pURL specification:
each path in the trie represents a type and a vulnerability ID. This allows for generic
representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
This would be in the general format: vuln://<general-type>/<vuln-id>

Examples:

CVE, using path separator: vuln://cve/cve-2023-20753
OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
Random vendor: vuln://snyk/sn-whatever
NoVuln: vuln://novuln/


This node represents the type part of the trie path. It is used to represent
the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific

Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
VulnerabilityType.

NoVuln is a special vulnerability node to attest that no vulnerability has been
found during a vulnerability scan. It will have the type "novuln" and contain an empty string
for vulnerabilityID

The resolvers will enforce that both the type and vulnerability IDs are lower case.
"""
type Vulnerability {
  id: ID!
  type: String!
  vulnerabilityIDs: [VulnerabilityID!]!
}

"""
VulnerabilityID is a specific vulnerability ID associated with the type of the vulnerability.

This will be enforced to be all lowercase.

The namespace field is mandatory.
"""
type VulnerabilityID {
  id: ID!
  vulnerabilityID: String!
}

"""
VulnerabilitySpec allows filtering the list of vulnerabilities to return in a query.

Use null to match on all values at that level.
For example, to get all vulnerabilities in GUAC backend, use a VulnSpec
where every field is null.

Setting the noVuln boolean true will ignore the other inputs for type and vulnerabilityID.
Setting noVuln to true means retrieving only nodes where the type of the vulnerability is "novuln"
and the it has an empty string for vulnerabilityID. Setting it to false filters out all results that are "novuln".
Setting one of the other fields and omitting the noVuln means retrieving vulnerabilities for the corresponding
type and vulnerabilityID. Omission of noVuln field will return all vulnerabilities and novuln.
"""
input VulnerabilitySpec {
  id: ID
  type: String
  vulnerabilityID: String
  noVuln: Boolean
}

"""
VulnInputSpec specifies a vulnerability for mutations.

This is different than VulnSpec because we want to encode mandatory fields:
type and vulnerabilityID.
"""
input VulnerabilityInputSpec {
  type: String!
  vulnerabilityID: String!
}

"""
The IDs of the ingested vulnerability
"""
type VulnerabilityIDs {
  vulnerabilityTypeID: ID!
  vulnerabilityNodeID: ID!
}

"""
IDorVulnerabilityInput allows for specifying either the vulnerability IDs or the VulnerabilityInputSpec.

Either the IDs or the VulnerabilityInputSpec must be specified. Both cannot be nil.

If the IDs are specified, the VulnerabilityInputSpec is not used.
"""
input IDorVulnerabilityInput {
  vulnerabilityTypeID: ID
  vulnerabilityNodeID: ID
  vulnerabilityInput: VulnerabilityInputSpec
}

"""
VulnerabilityConnection returns the paginated results for Vulnerability.

totalCount is the total number of results returned.

pageInfo provides information to the client if there is
a next page of results and the starting and
ending cursor for the current set.

edges contains the VulnerabilityEdge which contains the current cursor
and the Vulnerability node itself
"""
type VulnerabilityConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [VulnerabilityEdge!]!
}

"""
VulnerabilityEdge contains the cursor for the resulting node and
the Vulnerability node itself.
"""
type VulnerabilityEdge {
  cursor: ID!
  node: Vulnerability!
}

extend type Query {
  "Returns all vulnerabilities matching a filter."
  vulnerabilities(vulnSpec: VulnerabilitySpec!): [Vulnerability!]!
  "Returns a paginated results via VulnerabilityConnection"
  vulnerabilityList(vulnSpec: VulnerabilitySpec!, after: ID, first: Int): VulnerabilityConnection
}

extend type Mutation {
  "Ingests a new vulnerability and returns the corresponding vulnerability trie path."
  ingestVulnerability(vuln: IDorVulnerabilityInput!): VulnerabilityIDs!
  "Bulk ingests vulnerabilities and returns the list of corresponding vulnerability trie path. The returned array of IDs must be in the same order as the inputs"
  ingestVulnerabilities(vulns: [IDorVulnerabilityInput!]!): [VulnerabilityIDs!]!
}

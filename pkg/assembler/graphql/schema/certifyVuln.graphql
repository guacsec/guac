#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the CertifyVuln. It contains a package, vulnerability that can be of type
# cve, ghsa or osv, time scanned, db uri, db version, scanner uri, scanner version, origin and collector
"""
CertifyVuln is an attestation that represents when a package has a vulnerability

"""
type CertifyVuln {
  "package (subject) - the package object type that represents the package"
  package: Package!
  "vulnerability (object) - union type that consists of osv, cve or ghsa"
  vulnerability: OsvCveOrGhsa!
  "metadata (property) - contains all the vulnerability metadata "
  metadata: VulnerabilityMetaData!
}

type VulnerabilityMetaData {
  "timeScanned (property) - timestamp of when the package was last scanned"
  timeScanned: Time!
  "dbUri (property) - scanner vulnerability database uri"
  dbUri: String!
  "dbVersion (property) - scanner vulnerability database version"
  dbVersion: String!
  "scannerUri (property) - vulnerability scanner's uri"
  scannerUri: String!
  "scannerVersion (property) - vulnerability scanner version"
  scannerVersion: String!
  "origin (property) - where this attestation was generated from (based on which document)"
  origin: String!
  "collector (property) - the GUAC collector that collected the document that generated this attestation"
  collector: String!
}

"""
OsvCveGhsaObject is a union of OSV, CVE and GHSA. Any of these objects can be specified for vulnerability
"""
union OsvCveOrGhsa = OSV | CVE | GHSA

"""
OsvCveOrGhsaSpec allows using OsvCveOrGhsa union as
input type to be used in read queries.
Exactly one of the value must be set to non-nil.
"""
input OsvCveOrGhsaSpec {
  osv: OSVSpec
  cve: CVESpec
  ghsa: GHSASpec
}

"""
CertifyVulnSpec allows filtering the list of CertifyVuln to return.

Specifying just the package allows to query for all vulnerabilities associated with the package.
Only OSV, CVE or GHSA can be specified at once
"""
input CertifyVulnSpec {
  package: PkgSpec
  vulnerability: OsvCveOrGhsaSpec
  timeScanned: Time
  dbUri: String
  dbVersion: String
  scannerUri: String
  scannerVersion: String
  origin: String
  collector: String
}

"""
VulnerabilityInputSpec is the same as VulnerabilityMetaData but for mutation input.

All fields are required.
"""
input VulnerabilityMetaDataInput {
  timeScanned: Time!
  dbUri: String!
  dbVersion: String!
  scannerUri: String!
  scannerVersion: String!
  origin: String!
  collector: String!
}

"""
OsvCveOrGhsaInput allows using OsvCveOrGhsa union as
input type to be used in mutations.
Exactly one of the value must be set to non-nil.
"""
input OsvCveOrGhsaInput {
  osv: OSVInputSpec
  cve: CVEInputSpec
  ghsa: GHSAInputSpec
}

extend type Query {
  "Returns all CertifyVuln"
  CertifyVuln(certifyVulnSpec: CertifyVulnSpec): [CertifyVuln!]!
}

extend type Mutation {
  "certify that a package is vulnerable to a vulnerability (OSV, CVE or GHSA)"
  ingestVulnerability(pkg: PkgInputSpec!, vulnerability: OsvCveOrGhsaInput, certifyVuln: VulnerabilityMetaDataInput!): CertifyVuln!
}

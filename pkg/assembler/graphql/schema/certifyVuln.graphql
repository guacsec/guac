#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the vulnerability certifications

"Vulnerability is a union of a generic vulnerability  or the NoVuln node."
union VulnerabilityObj = Vulnerability | NoVuln

"""
VulnerabilityObjSpec allows using VulnerabilityObj union as input type to be used in
read queries.

Either noVuln must be set or vulnerability
must be set to non-nil. Setting noVuln to true means retrieving only nodes where
there is no vulnerability attached. Setting it to false means retrieving only nodes
with identified vulnerabilities. Setting vulnerability fields means retrieving
certifications for the corresponding vulnerability.
"""
input VulnerabilityObjSpec {
  vulnerability: VulnerabilitySpec
  noVuln: Boolean
}

"""
VulnerabilityObjInput allows using Vulnerability union as
input type to be used in mutations.

Either noVuln must be set to true or vulnerability must be
set to non-nil. If noVuln is set then this is an ingestion of a known lack of
vulnerabilities, so the special NoVuln node will be used by the backend.
Otherwise, the specific vulnerability will be linked to this attestation.
"""
input VulnerabilityObjInput {
  vulnerability: VulnerabilityInputSpec
  noVuln: Boolean
}

"""
CertifyVuln is an attestation to attach vulnerability information to a package.

This information is obtained via a scanner. If there is no vulnerability
detected, we attach the special NoVuln node.
"""
type CertifyVuln {
  id: ID!
  "The package that is attested"
  package: Package!
  "The vulnerability object. Can be an vulnerability or the special NoVuln node."
  vulnerability: VulnerabilityObj!
  "Metadata attached to the certification"
  metadata: VulnerabilityMetaData!
}

"""
VulnerabilityMetaData is the metadata attached to vulnerability certification.

It contains metadata about the scanner process that created the certification.
"""
type VulnerabilityMetaData {
  "Time of scan (in RFC 3339 format)"
  timeScanned: Time!
  "URI of the vulnerability database used by the scanner"
  dbUri: String!
  "Version of the vulnerability database used by the scanner"
  dbVersion: String!
  "URI of the scanner"
  scannerUri: String!
  "Version of the scanner"
  scannerVersion: String!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
}

"""
CertifyVulnSpec allows filtering the list of vulnerability certifications to
return in a query.

Specifying just the package allows to query for all vulnerabilities associated
with the package.

Only one vulnerability (or special NoVuln) may be
specified.
"""
input CertifyVulnSpec {
  id: ID
  package: PkgSpec
  vulnerability: VulnerabilityObjSpec
  timeScanned: Time
  dbUri: String
  dbVersion: String
  scannerUri: String
  scannerVersion: String
  origin: String
  collector: String
}

"""
VulnerabilityMetaDataInput represents the input for certifying vulnerability
scans in mutations.
"""
input VulnerabilityMetaDataInput {
  timeScanned: Time!
  dbUri: String!
  dbVersion: String!
  scannerUri: String!
  scannerVersion: String!
  origin: String!
  collector: String!
}

extend type Query {
  "Returns all vulnerability certifications matching the input filter."
  CertifyVuln(certifyVulnSpec: CertifyVulnSpec!): [CertifyVuln!]!
}

extend type Mutation {
  "Adds a certification that a package has been scanned for vulnerabilities."
  ingestCertifyVuln(pkg: PkgInputSpec!, vulnerability: VulnerabilityObjInput!, certifyVuln: VulnerabilityMetaDataInput!): CertifyVuln!
}

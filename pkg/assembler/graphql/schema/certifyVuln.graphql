#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the vulnerability certifications

"""
CertifyVuln is an attestation to attach vulnerability information to a package.

This information is obtained via a scanner. If there is no vulnerability
detected, we attach the a vulnerability with "NoVuln" type and an empty string 
for the vulnerability ID.
"""
type CertifyVuln {
  id: ID!
  "The package that is attested"
  package: Package!
  "The vulnerability can be an be a specific vulnerability or NoVuln type."
  vulnerability: Vulnerability!
  "Metadata attached to the certification"
  metadata: ScanMetadata!
}

"""
ScanMetadata is the metadata attached to vulnerability certification.

It contains metadata about the scanner process that created the certification.
"""
type ScanMetadata {
  "Time of scan (in RFC 3339 format)"
  timeScanned: Time!
  "URI of the vulnerability database used by the scanner"
  dbUri: String!
  "Version of the vulnerability database used by the scanner"
  dbVersion: String!
  "URI of the scanner"
  scannerUri: String!
  "Version of the scanner"
  scannerVersion: String!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
}

"""
CertifyVulnSpec allows filtering the list of vulnerability certifications to
return in a query.

Specifying just the package allows to query for all vulnerabilities associated
with the package.

Only one vulnerability (or NoVuln vulnerability type) may be
specified.
"""
input CertifyVulnSpec {
  id: ID
  package: PkgSpec
  vulnerability: VulnerabilitySpec
  timeScanned: Time
  dbUri: String
  dbVersion: String
  scannerUri: String
  scannerVersion: String
  origin: String
  collector: String
}

"""
ScanMetadataInput represents the input for certifying vulnerability
scans in mutations.
"""
input ScanMetadataInput {
  timeScanned: Time!
  dbUri: String!
  dbVersion: String!
  scannerUri: String!
  scannerVersion: String!
  origin: String!
  collector: String!
}

extend type Query {
  "Returns all vulnerability certifications matching the input filter."
  CertifyVuln(certifyVulnSpec: CertifyVulnSpec!): [CertifyVuln!]!
}

extend type Mutation {
  "Adds a certification that a package has been scanned for vulnerabilities."
  ingestCertifyVuln(pkg: PkgInputSpec!, vulnerability: VulnerabilityInputSpec!, certifyVuln: ScanMetadataInput!): CertifyVuln!
}

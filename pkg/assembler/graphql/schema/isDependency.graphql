#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for specifying dependencies

"DependencyType determines the type of the dependency."
enum DependencyType {
  "direct dependency"
  DIRECT
  "indirect dependency"
  INDIRECT
  "type not known/not specified"
  UNKNOWN
}

"IsDependency is an attestation to record that a package depends on another. "
type IsDependency {
  id: ID!
  "Package that has the dependency"
  package: Package!
  "Package for the dependency; MUST be PackageName or PackageVersion "
  dependencyPackage: Package!
  "Version range for the dependency link, required if depedentPackage points to PackageName"
  versionRange: String!
  "Type of dependency"
  dependencyType: DependencyType!
  "Justification for the attested relationship"
  justification: String!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
  "Reference location of the document in the persistent blob store (if that is configured)"
  documentRef: String!
}

"""
IsDependencySpec allows filtering the list of dependencies to return.

To obtain the list of dependency packages, caller must fill in the package
field.

Dependency packages must be defined at PackageName, not PackageVersion.
"""
input IsDependencySpec {
  id: ID
  package: PkgSpec
  dependencyPackage: PkgSpec
  versionRange: String
  dependencyType: DependencyType
  justification: String
  origin: String
  collector: String
  documentRef: String
}

"IsDependencyInputSpec is the input to record a new dependency."
input IsDependencyInputSpec {
  "versionRange should be specified for depedentPackages that point to PackageName"
  versionRange: String!
  dependencyType: DependencyType!
  justification: String!
  origin: String!
  collector: String!
  documentRef: String!
}

"""
IsDependencyConnection returns the paginated results for IsDependency.

totalCount is the total number of results returned.

pageInfo provides information to the client if there is
a next page of results and the starting and
ending cursor for the current set.

edges contains the IsDependencyEdge which contains the current cursor
and the IsDependency node itself
"""
type IsDependencyConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [IsDependencyEdge!]!
}

"""
IsDependencyEdge contains the cursor for the resulting node and
the IsDependency node itself.
"""
type IsDependencyEdge {
  cursor: ID!
  node: IsDependency!
}

extend type Query {
  "Returns all package dependencies that match the filter."
  IsDependency(isDependencySpec: IsDependencySpec!): [IsDependency!]!
  "Returns a paginated results via IsDependencyConnection"
  IsDependencyList(isDependencySpec: IsDependencySpec!, after: ID, first: Int): IsDependencyConnection
}

extend type Mutation {
  "Adds a dependency between two packages. The returned ID cannot be empty string as its used by hasSBOM."
  ingestDependency(
    pkg: IDorPkgInput!
    depPkg: IDorPkgInput!
    depPkgMatchType: MatchFlags!
    dependency: IsDependencyInputSpec!
  ): ID!
  "Bulk adds a dependency between two packages. The returned array of IDs cannot be an empty string as its used by hasSBOM."
  ingestDependencies(
    pkgs: [IDorPkgInput!]!
    depPkgs: [IDorPkgInput!]!
    depPkgMatchType: MatchFlags!
    dependencies: [IsDependencyInputSpec!]!
  ): [ID!]!
}

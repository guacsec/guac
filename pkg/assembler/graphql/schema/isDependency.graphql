#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for specifying dependencies

"DependencyType determines the type of the dependency."
enum DependencyType {
  "direct dependency"
  DIRECT
  "indirect dependency"
  INDIRECT
  "type not known/not specified"
  UNKNOWN
}

"IsDependency is an attestation to record that a package depends on another."
type IsDependency {
  id: ID!
  "Package that has the dependency"
  package: Package!
  "Package for the dependency; MUST BE PackageName, not PackageVersion"
  dependentPackage: Package!
  "Version range for the dependency link"
  versionRange: String!
  "Type of dependency"
  dependencyType: DependencyType!
  "Justification for the attested relationship"
  justification: String!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
}

"""
IsDependencySpec allows filtering the list of dependencies to return.

To obtain the list of dependency packages, caller must fill in the package
field.

Dependent packages must be defined at PackageName, not PackageVersion.
"""
input IsDependencySpec {
  id: ID
  package: PkgSpec
  dependentPackage: PkgNameSpec
  versionRange: String
  dependencyType: DependencyType
  justification: String
  origin: String
  collector: String
}

"""
PkgNameSpec is used to query for dependent packages.

This is different from PkgSpec as the IsDependency attestation should only be
allowed to be made to the packageName node and not the packageVersion node.
Versions will be handled by the version_range in the IsDependency attestation
node.
"""
input PkgNameSpec {
  id: ID
  type: String
  namespace: String
  name: String
}

"IsDependencyInputSpec is the input to record a new dependency."
input IsDependencyInputSpec {
  versionRange: String!
  dependencyType: DependencyType!
  justification: String!
  origin: String!
  collector: String!
}

extend type Query {
  "Returns all package dependencies that match the filter."
  IsDependency(isDependencySpec: IsDependencySpec): [IsDependency!]!
}

extend type Mutation {
  "Adds a dependency between two packages"
  ingestDependency(pkg: PkgInputSpec!, depPkg: PkgInputSpec!, dependency: IsDependencyInputSpec!): IsDependency!
}

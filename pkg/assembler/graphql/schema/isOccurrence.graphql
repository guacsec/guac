#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the IsOccurrence. It contains the subject (which can be either a package or source),
#  occurrenceArtifact, justification,  origin of the attestation, and collector

"""
PackageOrSource is a union of Package and Source. Any of these objects can be specified
"""
union PackageOrSource = Package | Source

"""
IsOccurrence is an attestation represents when either a package or source is represented by an artifact

Note: Package or Source must be specified but not both at the same time.
Attestation must occur at the PackageVersion or at the SourceName.
"""
type IsOccurrence {
  "subject - union type that can be either a package or source object type"
  subject: PackageOrSource!
  "artifact (object) - artifact that represent the the package or source"
  artifact: Artifact!
  "justification (property) - string value representing why the package or source is represented by the specified artifact"
  justification: String!
  "origin (property) - where this attestation was generated from (based on which document)"
  origin: String!
  "collector (property) - the GUAC collector that collected the document that generated this attestation"
  collector: String!
}

"""
IsOccurrenceSpec allows filtering the list of IsOccurrence to return.
Note: Package or Source must be specified but not both at the same time
For package - PackageVersion must be specified (version, qualifiers and subpath)
or it defaults to empty string for version, subpath and empty list for qualifiers
For source - a SourceName must be specified (name, tag or commit)
"""
input IsOccurrenceSpec {
  subject: PackageOrSourceSpec
  artifact: ArtifactSpec
  justification: String
  origin: String
  collector: String
}

"""
PackageOrSourceSpec allows using PackageOrSource union as
input type to be used in read queries.
Exactly one of the value must be set to non-nil.
"""
input PackageOrSourceSpec {
  package: PkgSpec
  source: SourceSpec
}

"""
PackageOrSourceInput allows using PackageOrSource union as
input type to be used in mutations.
Exactly one of the value must be set to non-nil.
"""
input PackageOrSourceInput {
  package: PkgInputSpec
  source: SourceInputSpec
}


"""
IsOccurrenceInputSpec is the same as IsOccurrence but for mutation input.

All fields are required.
"""
input IsOccurrenceInputSpec {
  justification: String!
  origin: String!
  collector: String!
}

extend type Query {
  "Returns all IsOccurrence"
  IsOccurrence(isOccurrenceSpec: IsOccurrenceSpec): [IsOccurrence!]!
}

extend type Mutation {
  "Adds an artifact as an occurrence for either a package or a source"
  ingestOccurrence(subject: PackageOrSourceInput!, artifact: ArtifactInputSpec!, occurrence: IsOccurrenceInputSpec!): IsOccurrence!
}

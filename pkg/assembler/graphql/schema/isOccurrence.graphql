#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for occurence certifications

"PackageOrSource is a union of Package and Source."
union PackageOrSource = Package | Source

"""
PackageOrSourceSpec allows using PackageOrSource union as input for queries.

Exactly one field must be specified.
"""
input PackageOrSourceSpec {
  package: PkgSpec
  source: SourceSpec
}

"""
PackageOrSourceInput allows using PackageOrSource union as input for mutations.

Exactly one field must be specified.
"""
input PackageOrSourceInput {
  package: PkgInputSpec
  source: SourceInputSpec
}

"""
PackageOrSourceInputs allows using packages and sources as input for batch mutations.
Exactly one list must be specified.
"""
input PackageOrSourceInputs {
  packages: [PkgInputSpec!]
  sources: [SourceInputSpec!]
}

"""
IsOccurrence is an attestation to link an artifact to a package or source.

Attestation must occur at the PackageVersion or at the SourceName.
"""
type IsOccurrence {
  id: ID!
  "Package or source from which the artifact originates"
  subject: PackageOrSource!
  "The artifact in the relationship"
  artifact: Artifact!
  "Justification for the attested relationship"
  justification: String!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
}

"""
IsOccurrenceSpec allows filtering the list of artifact occurences to return in
a query.
"""
input IsOccurrenceSpec {
  id: ID
  subject: PackageOrSourceSpec
  artifact: ArtifactSpec
  justification: String
  origin: String
  collector: String
}

"IsOccurrenceInputSpec represents the input to record an artifact's origin."
input IsOccurrenceInputSpec {
  justification: String!
  origin: String!
  collector: String!
}

extend type Query {
  "Returns all artifacts-source/package mappings that match a filter."
  IsOccurrence(isOccurrenceSpec: IsOccurrenceSpec!): [IsOccurrence!]!
}

extend type Mutation {
  "Ingest that an artifact is produced from a package or source. The returned ID can be empty string."
  ingestOccurrence(
    subject: PackageOrSourceInput!
    artifact: ArtifactInputSpec!
    occurrence: IsOccurrenceInputSpec!
  ): ID!
  "Bulk ingest that an artifact is produced from a package or source. The returned array of IDs can be a an array of empty string."
  ingestOccurrences(
    subjects: PackageOrSourceInputs!
    artifacts: [ArtifactInputSpec!]!
    occurrences: [IsOccurrenceInputSpec!]!
  ): [ID!]!
}

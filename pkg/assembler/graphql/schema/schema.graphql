#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and will change in the near future.

"""
NodeInfo contains fields that are common for any GUAC node. These are metadata
information that allows identifying the collector details from which a node
gets created after parsing a document.
"""
interface NodeInfo {
  """
  sourceInfo is the file location for the document from which the node was
  created.
  """
  sourceInfo: String
  """
  collectorInfo is the collector from which the file that created the node came
  from
  """
  collectorInfo: String
}

"""
Artifact nodes represent artifacts. These are files on disk (cf. Package).
There could be artifacts not included in any package.
"""
type Artifact implements NodeInfo {
  """
  digest is the identifier of an artifact. It is in the format
  `algorithm:value` where `algorithm` is the hashing algorithm (e.g. "sha1")
  and `value` is the digest obtained by using this algorithm.

  Note: in the future we might change this to contain a collection of hashes,
  at which point we will need other ways to resolve an artifact given a digest.
  """
  digest: String!
  "name of the artifact"
  name: String
  "tags associated with the artifact"
  tags: [String!]!

  # Inherited fields from NodeInfo
  sourceInfo: String
  collectorInfo: String

  # Links to other nodes
  builtBy: [Builder!]!
  dependsOn: [ArtifactOrPackage!]!
}

"""
Package nodes represent packages. These are packages from a package repository
(cf. Artifact). Upon installing a package one or multiple artifacts could be
generated.
"""
type Package implements NodeInfo {
  """
  purl is the Package identifier, in purl format. Uniquely identifies the package.
  """
  purl: String!
  "name of the package"
  name: String
  "version of the package"
  version: String
  "digests for the package"
  digest: [String!]!
  "CPEs represent CPEs for the package"
  CPEs: [String!]!
  "tags associated with the artifact"
  tags: [String!]!

  # Inherited fields from NodeInfo
  sourceInfo: String
  collectorInfo: String

  # Links to other nodes
  contains: [Artifact!]!
  dependsOn: [ArtifactOrPackage!]!
}

"""
Currently artifacts and packages can depend on each other. Hence, we need a union for this edge.
"""
union ArtifactOrPackage = Artifact | Package

"""
Builder nodes represent builders of artifacts (from provenance documents).
"""
type Builder implements NodeInfo {
  "type is type of builder. Coupled with id, it uniquely identifies the builder."
  type: String!
  "id is the id of builder. Coupled with type, it uniquely identifies the builder."
  id: String!  # Note: not ID! at this time

  # Inherited fields from NodeInfo
  sourceInfo: String
  collectorInfo: String
}

"""
Attestation nodes represent attestations about artifacts and packages.
"""
type Attestation implements NodeInfo {
  """
  digest is the identifier of an attestation, uniquely identifying it.

  Note: in the future we might change this to contain a collection of hashes,
  at which point we will need other ways to resolve an identity given a digest.
  """
  digest: String!
  # TODO: filePath and sourceInfo are the same?
  "filePath is the path to the attestation, during ingestion"
  filePath: String
  "type is the attestation type (SLSA/VEX/...?)"
  type: String

  # payloads
  "payload is additional payload on the attestation, depending on type"
  payload: AttestationPayload

  # Inherited fields from NodeInfo
  sourceInfo: String
  collectorInfo: String

  # Links to other nodes
  attestedObjects: [ArtifactOrPackage!]!
  # TODO: merge?
  vulnerabilities: [Vulnerability!]!
}

# Right now we only support VEXPayload as attestation payloads.
union AttestationPayload = VEXPayload

"""
Metadata nodes represent metadata about an artifact. These are extracted from attestations.
"""
type Metadata implements NodeInfo {
  "type is type of metadata. Coupled with id, it uniquely identifies the metadata."
  type: String!
  "id is the id of metadata. Coupled with type, it uniquely identifies the metadata."
  id: String!  # Note: not ID! at this time

  # payloads
  "payload is additional payload on the attestation, depending on type"
  payload: MetadataPayload

  # Inherited fields from NodeInfo
  sourceInfo: String
  collectorInfo: String

  # Links to other nodes
  attachedTo: [ArtifactOrPackage!]!
}

# Right now we only support ScorecardPayload as metadata payloads.
union MetadataPayload = ScorecardPayload

"""
Identity nodes are ....
"""
type Identity implements NodeInfo {
  """
  digest is the identifier of an identity, uniquely identifying it.

  Note: in the future we might change this to contain a collection of hashes,
  at which point we will need other ways to resolve an identity given a digest.
  """
  digest: String!
  "id is the id of an identity."
  id: String!  # Note: not ID! at this time
  "key ..."
  key: String
  "keyType ..."
  keyType: String
  "keyScheme ..."
  keyScheme: String

  # Inherited fields from NodeInfo
  sourceInfo: String
  collectorInfo: String

  # Links to other nodes
  attestations: [Attestation!]!
}

# TODO: maybe move to separate schema?
"""
ScorecardPayload are payloads of Scorecards metadata.
"""
type ScorecardPayload {
  repo: String!
  commit: String!
  scorecard_version: String!
  scorecard_commit: String!
  aggregate_score: Float!
  # TODO: need to add individual scores but need to think on how to keep them up to date
}

# TODO: maybe move to separate schema?
"""
Vulnerability nodes represent vulnerability information
"""
type Vulnerability implements NodeInfo {
  "id is the id of a vulnerability (cve??)"
  id: String!  # Note: not ID! at this time

  # Inherited fields from NodeInfo
  sourceInfo: String
  collectorInfo: String
}

# TODO: maybe move to separate schema?
"""
VEXPayload are payloads commonly found in VEX attestations.
"""
type VEXPayload {
  "invocation represents data about the VEX scanner invocation"
  invocation: VEXInvocation!
  "scanner represents data about the VEX scanner process"
  scanner: VEXScanner!
  "vulnerability represents data about vulnerabilities found by VEX scanning"
  vulnerabilities: [VEXVulnerability!]!
}

# TODO: maybe move to separate schema?
"""
VEXInvocation contains details about a VEX scan invocation
"""
type VEXInvocation {
  parameters: [String!]!
  uri: String!
  eventID: String!
  producerID: String!
  scannedOn: String! # TODO: should be a date field but not supported by default
}

# TODO: maybe move to separate schema?
"""
VEXScanner contains details about a scanner used by a VEX scan invocation
"""
type VEXScanner {
  uri: String!
  version: String!
  db_uri: String!
  db_version: String!
}

# TODO: maybe move to separate schema?
# TODO: merge with Vulnerability?
"""
VEXVulnerability is a vulnerability found by a VEX scan invocation
"""
type VEXVulnerability {
  id: String!  # CVE?
  aliases: [String!]!
}

"""
The queries that we support.

Subject to frequent changes
"""
type Query {
  artifacts: [Artifact!]!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for certifying VEX statements.

"PackageOrArtifact is a union of Package and Artifact."
union PackageOrArtifact = Package | Artifact

"""
PackageOrArtifactSpec allows using PackageOrArtifact union as
input type to be used in read queries.

Exactly one of the value must be set to non-nil.
"""
input PackageOrArtifactSpec {
  package: PkgSpec
  artifact: ArtifactSpec
}

"""
PackageOrArtifactInput allows using PackageOrArtifact union as
input type to be used in mutations.

Exactly one of the value must be set to non-nil.
"""
input PackageOrArtifactInput {
  package: PkgInputSpec
  artifact: ArtifactInputSpec
}

"""
CertifyVEXStatement is an attestation that represents when a package or
artifact has a VEX about a specific vulnerability (CVE, GHSA or OSV).
"""
type CertifyVEXStatement {
  id: ID!
  "Subject of attestation"
  subject: PackageOrArtifact!
  "Attested vulnerability"
  vulnerability: Vulnerability!
  "Justification for VEX"
  justification: String!
  "Timestamp (exact time in RFC 3339 format) for the VEX statement"
  knownSince: Time!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
}

"""
CertifyVEXStatementSpec allows filtering the list of CertifyVEXStatement to
return.

Only one subject type (package or artifact) and one vulnerability type (CVE,
GHSA or OSV) may be specified.

Note that setting `noVuln` in VulnerabilitySpec is invalid for VEX statements!
"""
input CertifyVEXStatementSpec {
  id: ID
  subject: PackageOrArtifactSpec
  vulnerability: VulnerabilitySpec
  justification: String
  knownSince: Time
  origin: String
  collector: String
}

"""
VexStatementInputSpec is the same as CertifyVEXStatement but for mutation input.

All fields are required.
"""
input VexStatementInputSpec {
  justification: String!
  knownSince: Time!
  origin: String!
  collector: String!
}

extend type Query {
  "Returns all CertifyVEXStatement."
  CertifyVEXStatement(certifyVEXStatementSpec: CertifyVEXStatementSpec): [CertifyVEXStatement!]!
}

extend type Mutation {
  """
  Certify that a package or an artifact has an associated VEX for a vulnerability.

  Note that setting `noVuln` in VulnerabilityInput is invalid for VEX statements!
  """
  ingestVEXStatement(subject: PackageOrArtifactInput!, vulnerability: VulnerabilityInput!, vexStatement: VexStatementInputSpec!): CertifyVEXStatement!
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for certifying VEX statements

"PackageOrArtifact is a union of Package and Artifact."
union PackageOrArtifact = Package | Artifact

"""
PackageOrArtifactSpec allows using PackageOrArtifact union as
input type to be used in read queries.

Exactly one of the value must be set to non-nil.
"""
input PackageOrArtifactSpec {
  package: PkgSpec
  artifact: ArtifactSpec
}

"""
PackageOrArtifactInput allows using PackageOrArtifact union as
input type to be used in mutations.

Exactly one of the value must be set to non-nil.
"""
input PackageOrArtifactInput {
  package: PkgInputSpec
  artifact: ArtifactInputSpec
}

"""
PackageOrArtifactInputs allows using packages and artifacts as input for batch mutations.
Exactly one list must be specified.
"""
input PackageOrArtifactInputs {
  packages: [PkgInputSpec!]
  artifacts: [ArtifactInputSpec!]
}

"Records the status of a VEX statement subject."
enum VexStatus {
  NOT_AFFECTED
  AFFECTED
  FIXED
  UNDER_INVESTIGATION
}

"Records the justification included in the VEX statement."
enum VexJustification {
  COMPONENT_NOT_PRESENT
  VULNERABLE_CODE_NOT_PRESENT
  VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
  VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
  INLINE_MITIGATIONS_ALREADY_EXIST
  NOT_PROVIDED
}

"""
CertifyVEXStatement is an attestation to attach VEX statements to a package or
artifact to clarify the impact of a specific vulnerability.
"""
type CertifyVEXStatement {
  id: ID!
  "Subject of attestation"
  subject: PackageOrArtifact!
  "Attested vulnerability"
  vulnerability: Vulnerability!
  "Status of the vulnerabilities with respect to the subject"
  status: VexStatus!
  "Justification from VEX statement"
  vexJustification: VexJustification!
  "VEX statement: impact_statement or action_statement depending on status"
  statement: String!
  "statusNotes may convey information about how status was determined"
  statusNotes: String!
  "Timestamp (exact time in RFC 3339 format) for the VEX statement"
  knownSince: Time!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
}

"""
CertifyVEXStatementSpec allows filtering the list of VEX statements to
return in a query.

Only one subject type (package or artifact) and one vulnerability may be specified.

Note that setting noVuln vulnerability type is invalid for VEX statements!
"""
input CertifyVEXStatementSpec {
  id: ID
  subject: PackageOrArtifactSpec
  vulnerability: VulnerabilitySpec
  status: VexStatus
  vexJustification: VexJustification
  statement: String
  statusNotes: String
  knownSince: Time
  origin: String
  collector: String
}

"VexStatementInputSpec represents the input to ingest VEX statements."
input VexStatementInputSpec {
  status: VexStatus!
  vexJustification: VexJustification!
  statement: String!
  statusNotes: String!
  knownSince: Time!
  origin: String!
  collector: String!
}

extend type Query {
  "Returns all VEX certifications matching the input filter."
  CertifyVEXStatement(certifyVEXStatementSpec: CertifyVEXStatementSpec!): [CertifyVEXStatement!]!
}

extend type Mutation {
  "Adds a VEX certification for a package."
  ingestVEXStatement(subject: PackageOrArtifactInput!, vulnerability: VulnerabilityInputSpec!, vexStatement: VexStatementInputSpec!): CertifyVEXStatement!
}

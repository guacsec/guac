#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for the OSV trie/tree. It contains the OSV ID
# associated with the vulnerability.

"""
OSV represents an Open Source Vulnerability.

We create a separate node to allow retrieving all OSVs.
"""
type OSV {
  osvId: [OSVId!]!
}

"""
OSVId is the actual ID that is given to a specific vulnerability.

The `id` field is mandatory and canonicalized to be lowercase.

This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
CVE ID).

This node can be referred to by other parts of GUAC.
"""
type OSVId {
  id: String!
}

"""
OSVSpec allows filtering the list of OSV to return.
"""
input OSVSpec {
  osvId: String
}

"""
OSVInputSpec is the same as OSVSpec, but used for mutation ingestion.
"""
input OSVInputSpec {
  osvId: String!
}

extend type Query {
  "Returns all OSV"
  osv(osvSpec: OSVSpec): [OSV!]!
}

extend type Mutation {
  "Ingest a new OSV. Returns the ingested object"
  ingestOSV(osv: OSVInputSpec): OSV!
}

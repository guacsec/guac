// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _EvidenceTrees_subject(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_subject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PackageSourceArtifactOsvCveOrGhsa)
	fc.Result = res
	return ec.marshalNPackageSourceArtifactOsvCveOrGhsa2githubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐPackageSourceArtifactOsvCveOrGhsa(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_subject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PackageSourceArtifactOsvCveOrGhsa does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_isOccurrence(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_isOccurrence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOccurrence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.IsOccurrence)
	fc.Result = res
	return ec.marshalOIsOccurrence2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐIsOccurrence(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_isOccurrence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "subject":
				return ec.fieldContext_IsOccurrence_subject(ctx, field)
			case "artifact":
				return ec.fieldContext_IsOccurrence_artifact(ctx, field)
			case "justification":
				return ec.fieldContext_IsOccurrence_justification(ctx, field)
			case "origin":
				return ec.fieldContext_IsOccurrence_origin(ctx, field)
			case "collector":
				return ec.fieldContext_IsOccurrence_collector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IsOccurrence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_isDependency(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_isDependency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDependency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.IsDependency)
	fc.Result = res
	return ec.marshalOIsDependency2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐIsDependency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_isDependency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "package":
				return ec.fieldContext_IsDependency_package(ctx, field)
			case "dependentPackage":
				return ec.fieldContext_IsDependency_dependentPackage(ctx, field)
			case "versionRange":
				return ec.fieldContext_IsDependency_versionRange(ctx, field)
			case "justification":
				return ec.fieldContext_IsDependency_justification(ctx, field)
			case "origin":
				return ec.fieldContext_IsDependency_origin(ctx, field)
			case "collector":
				return ec.fieldContext_IsDependency_collector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IsDependency", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_isVulnerability(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_isVulnerability(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVulnerability, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.IsVulnerability)
	fc.Result = res
	return ec.marshalOIsVulnerability2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐIsVulnerability(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_isVulnerability(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "osv":
				return ec.fieldContext_IsVulnerability_osv(ctx, field)
			case "vulnerability":
				return ec.fieldContext_IsVulnerability_vulnerability(ctx, field)
			case "justification":
				return ec.fieldContext_IsVulnerability_justification(ctx, field)
			case "origin":
				return ec.fieldContext_IsVulnerability_origin(ctx, field)
			case "collector":
				return ec.fieldContext_IsVulnerability_collector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IsVulnerability", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_vexStatement(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_vexStatement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VexStatement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertifyVEXStatement)
	fc.Result = res
	return ec.marshalOCertifyVEXStatement2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐCertifyVEXStatement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_vexStatement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "subject":
				return ec.fieldContext_CertifyVEXStatement_subject(ctx, field)
			case "vulnerability":
				return ec.fieldContext_CertifyVEXStatement_vulnerability(ctx, field)
			case "justification":
				return ec.fieldContext_CertifyVEXStatement_justification(ctx, field)
			case "knownSince":
				return ec.fieldContext_CertifyVEXStatement_knownSince(ctx, field)
			case "origin":
				return ec.fieldContext_CertifyVEXStatement_origin(ctx, field)
			case "collector":
				return ec.fieldContext_CertifyVEXStatement_collector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CertifyVEXStatement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_hashEqual(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_hashEqual(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HashEqual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.HashEqual)
	fc.Result = res
	return ec.marshalOHashEqual2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐHashEqual(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_hashEqual(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "artifacts":
				return ec.fieldContext_HashEqual_artifacts(ctx, field)
			case "justification":
				return ec.fieldContext_HashEqual_justification(ctx, field)
			case "origin":
				return ec.fieldContext_HashEqual_origin(ctx, field)
			case "collector":
				return ec.fieldContext_HashEqual_collector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HashEqual", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_certifyBad(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_certifyBad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertifyBad, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertifyBad)
	fc.Result = res
	return ec.marshalOCertifyBad2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐCertifyBad(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_certifyBad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "subject":
				return ec.fieldContext_CertifyBad_subject(ctx, field)
			case "justification":
				return ec.fieldContext_CertifyBad_justification(ctx, field)
			case "origin":
				return ec.fieldContext_CertifyBad_origin(ctx, field)
			case "collector":
				return ec.fieldContext_CertifyBad_collector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CertifyBad", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_certifyPkg(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_certifyPkg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertifyPkg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertifyPkg)
	fc.Result = res
	return ec.marshalOCertifyPkg2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐCertifyPkg(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_certifyPkg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "packages":
				return ec.fieldContext_CertifyPkg_packages(ctx, field)
			case "justification":
				return ec.fieldContext_CertifyPkg_justification(ctx, field)
			case "origin":
				return ec.fieldContext_CertifyPkg_origin(ctx, field)
			case "collector":
				return ec.fieldContext_CertifyPkg_collector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CertifyPkg", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_certifyScorecard(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_certifyScorecard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertifyScorecard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertifyScorecard)
	fc.Result = res
	return ec.marshalOCertifyScorecard2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐCertifyScorecard(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_certifyScorecard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "source":
				return ec.fieldContext_CertifyScorecard_source(ctx, field)
			case "scorecard":
				return ec.fieldContext_CertifyScorecard_scorecard(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CertifyScorecard", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_certifyVuln(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_certifyVuln(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertifyVuln, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CertifyVuln)
	fc.Result = res
	return ec.marshalOCertifyVuln2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐCertifyVuln(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_certifyVuln(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "package":
				return ec.fieldContext_CertifyVuln_package(ctx, field)
			case "vulnerability":
				return ec.fieldContext_CertifyVuln_vulnerability(ctx, field)
			case "metadata":
				return ec.fieldContext_CertifyVuln_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CertifyVuln", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_hasSourceAt(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_hasSourceAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSourceAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.HasSourceAt)
	fc.Result = res
	return ec.marshalOHasSourceAt2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐHasSourceAt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_hasSourceAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "package":
				return ec.fieldContext_HasSourceAt_package(ctx, field)
			case "source":
				return ec.fieldContext_HasSourceAt_source(ctx, field)
			case "knownSince":
				return ec.fieldContext_HasSourceAt_knownSince(ctx, field)
			case "justification":
				return ec.fieldContext_HasSourceAt_justification(ctx, field)
			case "origin":
				return ec.fieldContext_HasSourceAt_origin(ctx, field)
			case "collector":
				return ec.fieldContext_HasSourceAt_collector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HasSourceAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_hasSBOM(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_hasSBOM(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSbom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.HasSbom)
	fc.Result = res
	return ec.marshalOHasSBOM2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐHasSbom(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_hasSBOM(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "subject":
				return ec.fieldContext_HasSBOM_subject(ctx, field)
			case "uri":
				return ec.fieldContext_HasSBOM_uri(ctx, field)
			case "origin":
				return ec.fieldContext_HasSBOM_origin(ctx, field)
			case "collector":
				return ec.fieldContext_HasSBOM_collector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HasSBOM", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvidenceTrees_hasSLSA(ctx context.Context, field graphql.CollectedField, obj *model.EvidenceTrees) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvidenceTrees_hasSLSA(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSlsa, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.HasSlsa)
	fc.Result = res
	return ec.marshalOHasSLSA2ᚕᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐHasSlsa(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvidenceTrees_hasSLSA(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvidenceTrees",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "subject":
				return ec.fieldContext_HasSLSA_subject(ctx, field)
			case "slsa":
				return ec.fieldContext_HasSLSA_slsa(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HasSLSA", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputPackageSourceArtifactOsvCveOrGhsaFilter(ctx context.Context, obj interface{}) (model.PackageSourceArtifactOsvCveOrGhsaFilter, error) {
	var it model.PackageSourceArtifactOsvCveOrGhsaFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"package", "source", "artifact", "osv", "cve", "ghsa"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "package":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package"))
			it.Package, err = ec.unmarshalOPkgSpec2ᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐPkgSpec(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalOSourceSpec2ᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐSourceSpec(ctx, v)
			if err != nil {
				return it, err
			}
		case "artifact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("artifact"))
			it.Artifact, err = ec.unmarshalOArtifactSpec2ᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐArtifactSpec(ctx, v)
			if err != nil {
				return it, err
			}
		case "osv":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("osv"))
			it.Osv, err = ec.unmarshalOOSVSpec2ᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐOSVSpec(ctx, v)
			if err != nil {
				return it, err
			}
		case "cve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cve"))
			it.Cve, err = ec.unmarshalOCVESpec2ᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐCVESpec(ctx, v)
			if err != nil {
				return it, err
			}
		case "ghsa":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ghsa"))
			it.Ghsa, err = ec.unmarshalOGHSASpec2ᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐGHSASpec(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _PackageSourceArtifactOsvCveOrGhsa(ctx context.Context, sel ast.SelectionSet, obj model.PackageSourceArtifactOsvCveOrGhsa) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Package:
		return ec._Package(ctx, sel, &obj)
	case *model.Package:
		if obj == nil {
			return graphql.Null
		}
		return ec._Package(ctx, sel, obj)
	case model.Source:
		return ec._Source(ctx, sel, &obj)
	case *model.Source:
		if obj == nil {
			return graphql.Null
		}
		return ec._Source(ctx, sel, obj)
	case model.Artifact:
		return ec._Artifact(ctx, sel, &obj)
	case *model.Artifact:
		if obj == nil {
			return graphql.Null
		}
		return ec._Artifact(ctx, sel, obj)
	case model.Osv:
		return ec._OSV(ctx, sel, &obj)
	case *model.Osv:
		if obj == nil {
			return graphql.Null
		}
		return ec._OSV(ctx, sel, obj)
	case model.Cve:
		return ec._CVE(ctx, sel, &obj)
	case *model.Cve:
		if obj == nil {
			return graphql.Null
		}
		return ec._CVE(ctx, sel, obj)
	case model.Ghsa:
		return ec._GHSA(ctx, sel, &obj)
	case *model.Ghsa:
		if obj == nil {
			return graphql.Null
		}
		return ec._GHSA(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var evidenceTreesImplementors = []string{"EvidenceTrees"}

func (ec *executionContext) _EvidenceTrees(ctx context.Context, sel ast.SelectionSet, obj *model.EvidenceTrees) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evidenceTreesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvidenceTrees")
		case "subject":

			out.Values[i] = ec._EvidenceTrees_subject(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isOccurrence":

			out.Values[i] = ec._EvidenceTrees_isOccurrence(ctx, field, obj)

		case "isDependency":

			out.Values[i] = ec._EvidenceTrees_isDependency(ctx, field, obj)

		case "isVulnerability":

			out.Values[i] = ec._EvidenceTrees_isVulnerability(ctx, field, obj)

		case "vexStatement":

			out.Values[i] = ec._EvidenceTrees_vexStatement(ctx, field, obj)

		case "hashEqual":

			out.Values[i] = ec._EvidenceTrees_hashEqual(ctx, field, obj)

		case "certifyBad":

			out.Values[i] = ec._EvidenceTrees_certifyBad(ctx, field, obj)

		case "certifyPkg":

			out.Values[i] = ec._EvidenceTrees_certifyPkg(ctx, field, obj)

		case "certifyScorecard":

			out.Values[i] = ec._EvidenceTrees_certifyScorecard(ctx, field, obj)

		case "certifyVuln":

			out.Values[i] = ec._EvidenceTrees_certifyVuln(ctx, field, obj)

		case "hasSourceAt":

			out.Values[i] = ec._EvidenceTrees_hasSourceAt(ctx, field, obj)

		case "hasSBOM":

			out.Values[i] = ec._EvidenceTrees_hasSBOM(ctx, field, obj)

		case "hasSLSA":

			out.Values[i] = ec._EvidenceTrees_hasSLSA(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNEvidenceTrees2githubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐEvidenceTrees(ctx context.Context, sel ast.SelectionSet, v model.EvidenceTrees) graphql.Marshaler {
	return ec._EvidenceTrees(ctx, sel, &v)
}

func (ec *executionContext) marshalNEvidenceTrees2ᚖgithubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐEvidenceTrees(ctx context.Context, sel ast.SelectionSet, v *model.EvidenceTrees) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EvidenceTrees(ctx, sel, v)
}

func (ec *executionContext) marshalNPackageSourceArtifactOsvCveOrGhsa2githubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐPackageSourceArtifactOsvCveOrGhsa(ctx context.Context, sel ast.SelectionSet, v model.PackageSourceArtifactOsvCveOrGhsa) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PackageSourceArtifactOsvCveOrGhsa(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPackageSourceArtifactOsvCveOrGhsaFilter2githubᚗcomᚋguacsecᚋguacᚋpkgᚋassemblerᚋgraphqlᚋmodelᚐPackageSourceArtifactOsvCveOrGhsaFilter(ctx context.Context, v interface{}) (model.PackageSourceArtifactOsvCveOrGhsaFilter, error) {
	res, err := ec.unmarshalInputPackageSourceArtifactOsvCveOrGhsaFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************

package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"strings"

	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// IngestVulnEqual is the resolver for the ingestVulnEqual field.
func (r *mutationResolver) IngestVulnEqual(ctx context.Context, vulnerability model.IDorVulnerabilityInput, otherVulnerability model.IDorVulnerabilityInput, vulnEqual model.VulnEqualInputSpec) (string, error) {
	funcName := "IngestVulnEqual"
	var vulnLowerCase model.IDorVulnerabilityInput
	if vulnerability.VulnerabilityInput != nil {
		if err := validateNoVul(*vulnerability.VulnerabilityInput); err != nil {
			return "", gqlerror.Errorf("%v ::  %s", funcName, err)
		}

		if err := validateVulnerabilityIDInputSpec(*vulnerability.VulnerabilityInput); err != nil {
			return "", gqlerror.Errorf("%v ::  %s", funcName, err)
		}

		vulnLowerCase = model.IDorVulnerabilityInput{
			VulnerabilityTypeID: otherVulnerability.VulnerabilityTypeID,
			VulnerabilityNodeID: otherVulnerability.VulnerabilityNodeID,
			VulnerabilityInput:  &model.VulnerabilityInputSpec{Type: strings.ToLower(vulnerability.VulnerabilityInput.Type), VulnerabilityID: strings.ToLower(vulnerability.VulnerabilityInput.VulnerabilityID)},
		}
	} else {
		vulnLowerCase = vulnerability
	}

	var otherVulnLowerCase model.IDorVulnerabilityInput
	if otherVulnerability.VulnerabilityInput != nil {
		if err := validateNoVul(*otherVulnerability.VulnerabilityInput); err != nil {
			return "", gqlerror.Errorf("%v ::  %s", funcName, err)
		}

		if err := validateVulnerabilityIDInputSpec(*otherVulnerability.VulnerabilityInput); err != nil {
			return "", gqlerror.Errorf("%v ::  %s", funcName, err)
		}
		otherVulnLowerCase = model.IDorVulnerabilityInput{
			VulnerabilityTypeID: otherVulnerability.VulnerabilityTypeID,
			VulnerabilityNodeID: otherVulnerability.VulnerabilityNodeID,
			VulnerabilityInput:  &model.VulnerabilityInputSpec{Type: strings.ToLower(otherVulnerability.VulnerabilityInput.Type), VulnerabilityID: strings.ToLower(otherVulnerability.VulnerabilityInput.VulnerabilityID)},
		}
	} else {
		otherVulnLowerCase = vulnerability
	}

	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase
	return r.Backend.IngestVulnEqual(ctx, vulnLowerCase,
		otherVulnLowerCase,
		vulnEqual)
}

// IngestVulnEquals is the resolver for the ingestVulnEquals field.
func (r *mutationResolver) IngestVulnEquals(ctx context.Context, vulnerabilities []*model.IDorVulnerabilityInput, otherVulnerabilities []*model.IDorVulnerabilityInput, vulnEquals []*model.VulnEqualInputSpec) ([]string, error) {
	funcName := "IngestVulnEquals"

	if len(vulnerabilities) != len(otherVulnerabilities) {
		return []string{}, gqlerror.Errorf("%v :: uneven vulnerabilities and other vulnerabilities for ingestion", funcName)
	} else if len(vulnerabilities) != len(vulnEquals) {
		return []string{}, gqlerror.Errorf("%v :: uneven artifacts and hashEquals for ingestion", funcName)
	}

	var lowercaseVulnList []*model.IDorVulnerabilityInput
	var lowercaseOtherVulnList []*model.IDorVulnerabilityInput
	for i := range vulnEquals {
		if vulnerabilities[i].VulnerabilityInput == nil {
			lowercaseVulnList = append(lowercaseVulnList, vulnerabilities[i])
		} else {
			if err := validateNoVul(*vulnerabilities[i].VulnerabilityInput); err != nil {
				return []string{}, gqlerror.Errorf("%v ::  %s", funcName, err)
			}

			if err := validateVulnerabilityIDInputSpec(*vulnerabilities[i].VulnerabilityInput); err != nil {
				return []string{}, gqlerror.Errorf("%v ::  %s", funcName, err)
			}

			lowercaseVulnInput := model.VulnerabilityInputSpec{
				Type:            strings.ToLower(vulnerabilities[i].VulnerabilityInput.Type),
				VulnerabilityID: strings.ToLower(vulnerabilities[i].VulnerabilityInput.VulnerabilityID),
			}

			lowercaseVulnList = append(lowercaseVulnList, &model.IDorVulnerabilityInput{
				VulnerabilityTypeID: vulnerabilities[i].VulnerabilityTypeID,
				VulnerabilityNodeID: vulnerabilities[i].VulnerabilityNodeID,
				VulnerabilityInput:  &lowercaseVulnInput,
			})
		}

		if otherVulnerabilities[i].VulnerabilityInput == nil {
			lowercaseOtherVulnList = append(lowercaseOtherVulnList, otherVulnerabilities[i])
		} else {
			if err := validateNoVul(*otherVulnerabilities[i].VulnerabilityInput); err != nil {
				return []string{}, gqlerror.Errorf("%v ::  %s", funcName, err)
			}

			if err := validateVulnerabilityIDInputSpec(*otherVulnerabilities[i].VulnerabilityInput); err != nil {
				return []string{}, gqlerror.Errorf("%v ::  %s", funcName, err)
			}

			lowercaseOtherVulnInput := model.VulnerabilityInputSpec{
				Type:            strings.ToLower(otherVulnerabilities[i].VulnerabilityInput.Type),
				VulnerabilityID: strings.ToLower(otherVulnerabilities[i].VulnerabilityInput.VulnerabilityID),
			}

			lowercaseOtherVulnList = append(lowercaseOtherVulnList, &model.IDorVulnerabilityInput{
				VulnerabilityTypeID: otherVulnerabilities[i].VulnerabilityTypeID,
				VulnerabilityNodeID: otherVulnerabilities[i].VulnerabilityNodeID,
				VulnerabilityInput:  &lowercaseOtherVulnInput,
			})
		}
	}

	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase
	return r.Backend.IngestVulnEquals(ctx, lowercaseVulnList, lowercaseOtherVulnList, vulnEquals)
}

// VulnEqual is the resolver for the vulnEqual field.
func (r *queryResolver) VulnEqual(ctx context.Context, vulnEqualSpec model.VulnEqualSpec) ([]*model.VulnEqual, error) {
	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase

	if vulnEqualSpec.Vulnerabilities != nil && len(vulnEqualSpec.Vulnerabilities) > 2 {
		return nil, gqlerror.Errorf("VulnEqual :: cannot specify more than 2 vulnerabilities in VulnEqual")
	}

	if len(vulnEqualSpec.Vulnerabilities) > 0 {
		var lowercaseVulnFilterList []*model.VulnerabilitySpec
		for _, v := range vulnEqualSpec.Vulnerabilities {
			var typeLowerCase *string = nil
			var vulnIDLowerCase *string = nil
			if v.Type != nil {
				lower := strings.ToLower(*v.Type)
				typeLowerCase = &lower
			}
			if v.VulnerabilityID != nil {
				lower := strings.ToLower(*v.VulnerabilityID)
				vulnIDLowerCase = &lower
			}

			lowercaseVulnFilter := model.VulnerabilitySpec{
				ID:              v.ID,
				Type:            typeLowerCase,
				VulnerabilityID: vulnIDLowerCase,
				NoVuln:          v.NoVuln,
			}
			lowercaseVulnFilterList = append(lowercaseVulnFilterList, &lowercaseVulnFilter)
		}

		lowercaseVulnEqualFilter := model.VulnEqualSpec{
			ID:              vulnEqualSpec.ID,
			Vulnerabilities: lowercaseVulnFilterList,
			Justification:   vulnEqualSpec.Justification,
			Origin:          vulnEqualSpec.Origin,
			Collector:       vulnEqualSpec.Collector,
		}
		return r.Backend.VulnEqual(ctx, &lowercaseVulnEqualFilter)
	} else {
		return r.Backend.VulnEqual(ctx, &vulnEqualSpec)
	}
}

// VulnEqualList is the resolver for the vulnEqualList field.
func (r *queryResolver) VulnEqualList(ctx context.Context, vulnEqualSpec model.VulnEqualSpec, after *string, first *int) (*model.VulnEqualConnection, error) {
	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase

	if vulnEqualSpec.Vulnerabilities != nil && len(vulnEqualSpec.Vulnerabilities) > 2 {
		return nil, gqlerror.Errorf("VulnEqual :: cannot specify more than 2 vulnerabilities in VulnEqual")
	}

	if len(vulnEqualSpec.Vulnerabilities) > 0 {
		var lowercaseVulnFilterList []*model.VulnerabilitySpec
		for _, v := range vulnEqualSpec.Vulnerabilities {
			var typeLowerCase *string = nil
			var vulnIDLowerCase *string = nil
			if v.Type != nil {
				lower := strings.ToLower(*v.Type)
				typeLowerCase = &lower
			}
			if v.VulnerabilityID != nil {
				lower := strings.ToLower(*v.VulnerabilityID)
				vulnIDLowerCase = &lower
			}

			lowercaseVulnFilter := model.VulnerabilitySpec{
				ID:              v.ID,
				Type:            typeLowerCase,
				VulnerabilityID: vulnIDLowerCase,
				NoVuln:          v.NoVuln,
			}
			lowercaseVulnFilterList = append(lowercaseVulnFilterList, &lowercaseVulnFilter)
		}

		lowercaseVulnEqualFilter := model.VulnEqualSpec{
			ID:              vulnEqualSpec.ID,
			Vulnerabilities: lowercaseVulnFilterList,
			Justification:   vulnEqualSpec.Justification,
			Origin:          vulnEqualSpec.Origin,
			Collector:       vulnEqualSpec.Collector,
		}
		return r.Backend.VulnEqualList(ctx, lowercaseVulnEqualFilter, after, first)
	} else {
		return r.Backend.VulnEqualList(ctx, vulnEqualSpec, after, first)
	}
}

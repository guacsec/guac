package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"

	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// IngestHasSourceAt is the resolver for the ingestHasSourceAt field.
func (r *mutationResolver) IngestHasSourceAt(ctx context.Context, pkg model.IDorPkgInput, pkgMatchType model.MatchFlags, source model.IDorSourceInput, hasSourceAt model.HasSourceAtInputSpec) (string, error) {
	return r.Backend.IngestHasSourceAt(ctx, pkg, pkgMatchType, source, hasSourceAt)
}

// IngestHasSourceAts is the resolver for the ingestHasSourceAts field.
func (r *mutationResolver) IngestHasSourceAts(ctx context.Context, pkgs []*model.IDorPkgInput, pkgMatchType model.MatchFlags, sources []*model.IDorSourceInput, hasSourceAts []*model.HasSourceAtInputSpec) ([]string, error) {
	funcName := "IngestHasSourceAts"
	if len(pkgs) != len(sources) {
		return []string{}, gqlerror.Errorf("%v :: uneven packages and sources for ingestion", funcName)
	}
	if len(pkgs) != len(hasSourceAts) {
		return []string{}, gqlerror.Errorf("%v :: uneven packages and hasSourceAt for ingestion", funcName)
	}
	return r.Backend.IngestHasSourceAts(ctx, pkgs, &pkgMatchType, sources, hasSourceAts)
}

// HasSourceAt is the resolver for the HasSourceAt field.
func (r *queryResolver) HasSourceAt(ctx context.Context, hasSourceAtSpec model.HasSourceAtSpec) ([]*model.HasSourceAt, error) {
	return r.Backend.HasSourceAt(ctx, &hasSourceAtSpec)
}

// HasSourceAtList is the resolver for the HasSourceAtList field.
func (r *queryResolver) HasSourceAtList(ctx context.Context, hasSourceAtSpec model.HasSourceAtSpec, after *string, first *int) (*model.HasSourceAtConnection, error) {
	return r.Backend.HasSourceAtList(ctx, hasSourceAtSpec, after, first)
}

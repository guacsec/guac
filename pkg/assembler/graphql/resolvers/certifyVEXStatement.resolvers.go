package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"strings"

	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// IngestVEXStatement is the resolver for the ingestVEXStatement field.
func (r *mutationResolver) IngestVEXStatement(ctx context.Context, subject model.PackageOrArtifactInput, vulnerability model.VulnerabilityInputSpec, vexStatement model.VexStatementInputSpec) (*model.CertifyVEXStatement, error) {
	if strings.ToLower(vulnerability.Type) == "novuln" {
		return nil, gqlerror.Errorf("novuln type cannot be used for VEX")
	}

	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase
	return r.Backend.IngestVEXStatement(ctx, subject,
		model.VulnerabilityInputSpec{Type: strings.ToLower(vulnerability.Type), VulnerabilityID: strings.ToLower(vulnerability.VulnerabilityID)},
		vexStatement)
}

// CertifyVEXStatement is the resolver for the CertifyVEXStatement field.
func (r *queryResolver) CertifyVEXStatement(ctx context.Context, certifyVEXStatementSpec model.CertifyVEXStatementSpec) ([]*model.CertifyVEXStatement, error) {
	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase

	if certifyVEXStatementSpec.Vulnerability != nil {
		var typeLowerCase *string = nil
		var vulnIDLowerCase *string = nil
		if certifyVEXStatementSpec.Vulnerability.Type != nil {
			lower := strings.ToLower(*certifyVEXStatementSpec.Vulnerability.Type)
			typeLowerCase = &lower
		}
		if certifyVEXStatementSpec.Vulnerability.VulnerabilityID != nil {
			lower := strings.ToLower(*certifyVEXStatementSpec.Vulnerability.VulnerabilityID)
			vulnIDLowerCase = &lower
		}

		lowercaseVulnFilter := model.VulnerabilitySpec{
			ID:              certifyVEXStatementSpec.Vulnerability.ID,
			Type:            typeLowerCase,
			VulnerabilityID: vulnIDLowerCase,
			NoVuln:          certifyVEXStatementSpec.Vulnerability.NoVuln,
		}

		lowercaseCertifyVexFilter := model.CertifyVEXStatementSpec{
			ID:               certifyVEXStatementSpec.ID,
			Subject:          certifyVEXStatementSpec.Subject,
			Vulnerability:    &lowercaseVulnFilter,
			Status:           certifyVEXStatementSpec.Status,
			VexJustification: certifyVEXStatementSpec.VexJustification,
			Statement:        certifyVEXStatementSpec.Statement,
			StatusNotes:      certifyVEXStatementSpec.StatusNotes,
			KnownSince:       certifyVEXStatementSpec.KnownSince,
			Origin:           certifyVEXStatementSpec.Origin,
			Collector:        certifyVEXStatementSpec.Collector,
		}
		return r.Backend.CertifyVEXStatement(ctx, &lowercaseCertifyVexFilter)
	} else {
		return r.Backend.CertifyVEXStatement(ctx, &certifyVEXStatementSpec)
	}
}

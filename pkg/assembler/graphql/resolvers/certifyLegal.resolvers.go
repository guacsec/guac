package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"

	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// IngestCertifyLegal is the resolver for the ingestCertifyLegal field.
func (r *mutationResolver) IngestCertifyLegal(ctx context.Context, subject model.PackageOrSourceInput, declaredLicenses []*model.LicenseInputSpec, discoveredLicenses []*model.LicenseInputSpec, certifyLegal model.CertifyLegalInputSpec) (string, error) {
	// TODO validate subjects are pkg or source
	cl, err := r.Backend.IngestCertifyLegal(ctx, subject, declaredLicenses, discoveredLicenses, &certifyLegal)
	if err != nil {
		return "", err
	}
	return cl.ID, nil
}

// IngestCertifyLegals is the resolver for the ingestCertifyLegals field.
func (r *mutationResolver) IngestCertifyLegals(ctx context.Context, subjects model.PackageOrSourceInputs, declaredLicensesList [][]*model.LicenseInputSpec, discoveredLicensesList [][]*model.LicenseInputSpec, certifyLegals []*model.CertifyLegalInputSpec) ([]string, error) {
	// TODO validate subjects are pkg or source
	cls, err := r.Backend.IngestCertifyLegals(ctx, subjects, declaredLicensesList, discoveredLicensesList, certifyLegals)
	if err != nil {
		return nil, err
	}
	var ids []string
	for _, cl := range cls {
		ids = append(ids, cl.ID)
	}
	return ids, nil
}

// CertifyLegal is the resolver for the CertifyLegal field.
func (r *queryResolver) CertifyLegal(ctx context.Context, certifyLegalSpec model.CertifyLegalSpec) ([]*model.CertifyLegal, error) {
	return r.Backend.CertifyLegal(ctx, &certifyLegalSpec)
}

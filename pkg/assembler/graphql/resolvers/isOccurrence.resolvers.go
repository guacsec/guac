package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// IngestOccurrence is the resolver for the ingestOccurrence field.
func (r *mutationResolver) IngestOccurrence(ctx context.Context, subject model.PackageOrSourceInput, artifact model.ArtifactInputSpec, occurrence model.IsOccurrenceInputSpec) (string, error) {
	ingestedOccurrence, err := r.Backend.IngestOccurrence(ctx, subject, artifact, occurrence)
	if err != nil {
		return "", err
	}
	return ingestedOccurrence.ID, err
}

// IngestOccurrences is the resolver for the ingestOccurrences field.
func (r *mutationResolver) IngestOccurrences(ctx context.Context, subjects model.PackageOrSourceInputs, artifacts []*model.ArtifactInputSpec, occurrences []*model.IsOccurrenceInputSpec) ([]string, error) {
	ingestedOccurences, err := r.Backend.IngestOccurrences(ctx, subjects, artifacts, occurrences)
	ingestedOccurencesIDs := []string{}
	if err == nil {
		for _, occurence := range ingestedOccurences {
			ingestedOccurencesIDs = append(ingestedOccurencesIDs, occurence.ID)
		}
	}
	return ingestedOccurencesIDs, err
}

// IsOccurrence is the resolver for the IsOccurrence field.
func (r *queryResolver) IsOccurrence(ctx context.Context, isOccurrenceSpec model.IsOccurrenceSpec) ([]*model.IsOccurrence, error) {
	return r.Backend.IsOccurrence(ctx, &isOccurrenceSpec)
}

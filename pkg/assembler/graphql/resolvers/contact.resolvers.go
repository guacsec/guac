package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"

	"github.com/guacsec/guac/pkg/assembler/backends/helper"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// IngestPointOfContact is the resolver for the ingestPointOfContact field.
func (r *mutationResolver) IngestPointOfContact(ctx context.Context, subject model.PackageSourceOrArtifactInput, pkgMatchType model.MatchFlags, pointOfContact model.PointOfContactInputSpec) (string, error) {
	funcName := "IngestPointOfContact"
	if err := helper.ValidatePackageSourceOrArtifactInput(&subject, funcName); err != nil {
		return "", gqlerror.Errorf("%v :: %s", funcName, err)
	}
	ingestedPOC, err := r.Backend.IngestPointOfContact(ctx, subject, &pkgMatchType, pointOfContact)
	if err != nil {
		return "", err
	}
	return ingestedPOC.ID, err
}

// PointOfContact is the resolver for the PointOfContact field.
func (r *queryResolver) PointOfContact(ctx context.Context, pointOfContactSpec model.PointOfContactSpec) ([]*model.PointOfContact, error) {
	if err := helper.ValidatePackageSourceOrArtifactQueryFilter(pointOfContactSpec.Subject); err != nil {
		return nil, gqlerror.Errorf("PointOfContact :: %s", err)
	}
	return r.Backend.PointOfContact(ctx, &pointOfContactSpec)
}

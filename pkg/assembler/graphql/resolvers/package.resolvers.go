package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/guacsec/guac/pkg/assembler/graphql/helpers"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// IngestPackage is the resolver for the ingestPackage field.
func (r *mutationResolver) IngestPackage(ctx context.Context, pkg model.PkgInputSpec) (*model.PackageIDs, error) {
	// Return the ids of the package which has been ingested

	ingestedPackage, err := r.Backend.IngestPackage(ctx, pkg)
	if err != nil {
		return nil, err
	}
	results := helpers.GetPackageAsIds([]*model.Package{ingestedPackage})
	if len(results) != 1 {
		return nil, fmt.Errorf("could no derive correct package ID information for ingested packages, expected to return 1 but have %d", len(results))
	}
	return results[0], nil
}

// IngestPackages is the resolver for the ingestPackages field.
func (r *mutationResolver) IngestPackages(ctx context.Context, pkgs []*model.PkgInputSpec) ([]*model.PackageIDs, error) {
	ingestedPackages, err := r.Backend.IngestPackages(ctx, pkgs)
	if err == nil {
		results := helpers.GetPackageAsIds(ingestedPackages)
		if len(results) != len(ingestedPackages) {
			return nil, fmt.Errorf("could no derive correct package ID information for ingested packages, expected to return %d but have %d", len(ingestedPackages), len(results))
		}
		return results, nil
	}
	return nil, err
}

// Packages is the resolver for the packages field.
func (r *queryResolver) Packages(ctx context.Context, pkgSpec model.PkgSpec) ([]*model.Package, error) {
	return r.Backend.Packages(ctx, &pkgSpec)
}

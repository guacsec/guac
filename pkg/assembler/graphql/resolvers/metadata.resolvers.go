package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"

	"github.com/guacsec/guac/pkg/assembler/backends/helper"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// IngestHasMetadata is the resolver for the ingestHasMetadata field.
func (r *mutationResolver) IngestHasMetadata(ctx context.Context, subject model.PackageSourceOrArtifactInput, pkgMatchType model.MatchFlags, hasMetadata model.HasMetadataInputSpec) (string, error) {
	funcName := "IngestHasMetadata"
	if err := helper.ValidatePackageSourceOrArtifactInput(&subject, funcName); err != nil {
		return "", gqlerror.Errorf("%v ::  %s", funcName, err)
	}

	ingestedHasMetadata, err := r.Backend.IngestHasMetadata(ctx, subject, &pkgMatchType, hasMetadata)
	if err != nil {
		return "", err
	}
	return ingestedHasMetadata.ID, err
}

// HasMetadata is the resolver for the HasMetadata field.
func (r *queryResolver) HasMetadata(ctx context.Context, hasMetadataSpec model.HasMetadataSpec) ([]*model.HasMetadata, error) {
	if err := helper.ValidatePackageSourceOrArtifactQueryFilter(hasMetadataSpec.Subject); err != nil {
		return nil, gqlerror.Errorf("HasMetadata ::  %s", err)
	}
	return r.Backend.HasMetadata(ctx, &hasMetadataSpec)
}

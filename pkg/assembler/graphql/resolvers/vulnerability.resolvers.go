package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"strings"

	"github.com/guacsec/guac/pkg/assembler/backends/helper"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// IngestVulnerability is the resolver for the ingestVulnerability field.
func (r *mutationResolver) IngestVulnerability(ctx context.Context, vuln model.VulnerabilityInputSpec) (string, error) {
	funcName := "IngestVulnerability"
	err := helper.ValidateVulnerabilityIDInputSpec(vuln)
	if err != nil {
		return "", gqlerror.Errorf("%v ::  %s", funcName, err)
	}

	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase
	ingestedVulnerability, err := r.Backend.IngestVulnerability(ctx, model.VulnerabilityInputSpec{Type: strings.ToLower(vuln.Type), VulnerabilityID: strings.ToLower(vuln.VulnerabilityID)})
	if err != nil {
		return "", err
	}
	return ingestedVulnerability.ID, err
}

// IngestVulnerabilities is the resolver for the ingestVulnerabilities field.
func (r *mutationResolver) IngestVulnerabilities(ctx context.Context, vulns []*model.VulnerabilityInputSpec) ([]string, error) {
	funcName := "IngestVulnerabilities"

	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase
	var lowercaseVulnInputList []*model.VulnerabilityInputSpec
	for _, v := range vulns {

		err := helper.ValidateVulnerabilityIDInputSpec(*v)
		if err != nil {
			return []string{}, gqlerror.Errorf("%v ::  %s", funcName, err)
		}

		lowercaseVulnInput := model.VulnerabilityInputSpec{
			Type:            strings.ToLower(v.Type),
			VulnerabilityID: strings.ToLower(v.VulnerabilityID),
		}
		lowercaseVulnInputList = append(lowercaseVulnInputList, &lowercaseVulnInput)
	}
	ingestedVulnerabilities, err := r.Backend.IngestVulnerabilities(ctx, lowercaseVulnInputList)
	ingestedVulnerabilitiesIDS := []string{}
	if err == nil {
		for _, vulnerability := range ingestedVulnerabilities {
			ingestedVulnerabilitiesIDS = append(ingestedVulnerabilitiesIDS, vulnerability.ID)
		}
	}
	return ingestedVulnerabilitiesIDS, err
}

// Vulnerabilities is the resolver for the vulnerabilities field.
func (r *queryResolver) Vulnerabilities(ctx context.Context, vulnSpec model.VulnerabilitySpec) ([]*model.Vulnerability, error) {
	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase

	var typeLowerCase *string = nil
	var vulnIDLowerCase *string = nil
	if vulnSpec.Type != nil {
		lower := strings.ToLower(*vulnSpec.Type)
		typeLowerCase = &lower
	}
	if vulnSpec.VulnerabilityID != nil {
		lower := strings.ToLower(*vulnSpec.VulnerabilityID)
		vulnIDLowerCase = &lower
	}

	err := helper.ValidateVulnerabilitySpec(vulnSpec)
	if err != nil {
		return []*model.Vulnerability{}, gqlerror.Errorf("IngestVulnerabilityMetadata ::  %s", err)
	}

	return r.Backend.Vulnerabilities(ctx, &model.VulnerabilitySpec{ID: vulnSpec.ID, Type: typeLowerCase,
		VulnerabilityID: vulnIDLowerCase, NoVuln: vulnSpec.NoVuln})
}

package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"strings"

	"github.com/guacsec/guac/pkg/assembler/backends/helper"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// IngestVulnerability is the resolver for the ingestVulnerability field.
func (r *mutationResolver) IngestVulnerability(ctx context.Context, vuln model.IDorVulnerabilityInput) (*model.VulnerabilityIDs, error) {
	funcName := "IngestVulnerability"
	if vuln.VulnerabilityInput != nil {
		err := helper.ValidateVulnerabilityIDInputSpec(*vuln.VulnerabilityInput)
		if err != nil {
			return nil, gqlerror.Errorf("%v ::  %s", funcName, err)
		}
		// vulnerability input (type and vulnerability ID) will be enforced to be lowercase
		return r.Backend.IngestVulnerability(ctx, model.IDorVulnerabilityInput{
			VulnerabilityTypeID: vuln.VulnerabilityTypeID,
			VulnerabilityNodeID: vuln.VulnerabilityNodeID,
			VulnerabilityInput:  &model.VulnerabilityInputSpec{Type: strings.ToLower(vuln.VulnerabilityInput.Type), VulnerabilityID: strings.ToLower(vuln.VulnerabilityInput.VulnerabilityID)}})
	} else {
		return r.Backend.IngestVulnerability(ctx, vuln)
	}
}

// IngestVulnerabilities is the resolver for the ingestVulnerabilities field.
func (r *mutationResolver) IngestVulnerabilities(ctx context.Context, vulns []*model.IDorVulnerabilityInput) ([]*model.VulnerabilityIDs, error) {
	funcName := "IngestVulnerabilities"

	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase
	var lowercaseVulnInputList []*model.IDorVulnerabilityInput
	for _, v := range vulns {
		if v.VulnerabilityInput == nil {
			lowercaseVulnInputList = append(lowercaseVulnInputList, v)
			continue
		}
		err := helper.ValidateVulnerabilityIDInputSpec(*v.VulnerabilityInput)
		if err != nil {
			return []*model.VulnerabilityIDs{}, gqlerror.Errorf("%v ::  %s", funcName, err)
		}

		lowercaseVulnInput := model.VulnerabilityInputSpec{
			Type:            strings.ToLower(v.VulnerabilityInput.Type),
			VulnerabilityID: strings.ToLower(v.VulnerabilityInput.VulnerabilityID),
		}
		lowercaseVulnInputList = append(lowercaseVulnInputList, &model.IDorVulnerabilityInput{
			VulnerabilityTypeID: v.VulnerabilityTypeID,
			VulnerabilityNodeID: v.VulnerabilityNodeID,
			VulnerabilityInput:  &lowercaseVulnInput,
		})
	}

	return r.Backend.IngestVulnerabilities(ctx, lowercaseVulnInputList)
}

// Vulnerabilities is the resolver for the vulnerabilities field.
func (r *queryResolver) Vulnerabilities(ctx context.Context, vulnSpec model.VulnerabilitySpec) ([]*model.Vulnerability, error) {
	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase

	var typeLowerCase *string = nil
	var vulnIDLowerCase *string = nil
	if vulnSpec.Type != nil {
		lower := strings.ToLower(*vulnSpec.Type)
		typeLowerCase = &lower
	}
	if vulnSpec.VulnerabilityID != nil {
		lower := strings.ToLower(*vulnSpec.VulnerabilityID)
		vulnIDLowerCase = &lower
	}

	err := helper.ValidateVulnerabilitySpec(vulnSpec)
	if err != nil {
		return []*model.Vulnerability{}, gqlerror.Errorf("IngestVulnerabilityMetadata ::  %s", err)
	}

	return r.Backend.Vulnerabilities(ctx, &model.VulnerabilitySpec{ID: vulnSpec.ID, Type: typeLowerCase,
		VulnerabilityID: vulnIDLowerCase, NoVuln: vulnSpec.NoVuln})
}

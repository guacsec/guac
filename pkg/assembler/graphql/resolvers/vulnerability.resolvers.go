package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"strings"

	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// IngestVulnerability is the resolver for the ingestVulnerability field.
func (r *mutationResolver) IngestVulnerability(ctx context.Context, vuln model.VulnerabilityInputSpec) (*model.Vulnerability, error) {
	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase
	return r.Backend.IngestVulnerability(ctx, model.VulnerabilityInputSpec{Type: strings.ToLower(vuln.Type), VulnerabilityID: strings.ToLower(vuln.VulnerabilityID)})
}

// IngestVulnerabilities is the resolver for the ingestVulnerabilities field.
func (r *mutationResolver) IngestVulnerabilities(ctx context.Context, vulns []*model.VulnerabilityInputSpec) ([]*model.Vulnerability, error) {
	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase
	var lowercaseVulnInputList []*model.VulnerabilityInputSpec
	for _, v := range vulns {
		lowercaseVulnInput := model.VulnerabilityInputSpec{
			Type:            strings.ToLower(v.Type),
			VulnerabilityID: strings.ToLower(v.VulnerabilityID),
		}
		lowercaseVulnInputList = append(lowercaseVulnInputList, &lowercaseVulnInput)
	}
	return r.Backend.IngestVulnerabilities(ctx, lowercaseVulnInputList)
}

// Vulnerabilities is the resolver for the vulnerabilities field.
func (r *queryResolver) Vulnerabilities(ctx context.Context, vulnSpec model.VulnerabilitySpec) ([]*model.Vulnerability, error) {
	// vulnerability input (type and vulnerability ID) will be enforced to be lowercase
	return r.Backend.Vulnerabilities(ctx, &model.VulnerabilitySpec{Type: toLower(vulnSpec.Type), VulnerabilityID: toLower(vulnSpec.VulnerabilityID)})
}

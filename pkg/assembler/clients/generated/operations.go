// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// AllArtifactTree includes the GraphQL fields of Artifact requested by the fragment AllArtifactTree.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllArtifactTree struct {
	Id        string `json:"id"`
	Algorithm string `json:"algorithm"`
	Digest    string `json:"digest"`
}

// GetId returns AllArtifactTree.Id, and is useful for accessing the field via an interface.
func (v *AllArtifactTree) GetId() string { return v.Id }

// GetAlgorithm returns AllArtifactTree.Algorithm, and is useful for accessing the field via an interface.
func (v *AllArtifactTree) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns AllArtifactTree.Digest, and is useful for accessing the field via an interface.
func (v *AllArtifactTree) GetDigest() string { return v.Digest }

// AllBuilderTree includes the GraphQL fields of Builder requested by the fragment AllBuilderTree.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type AllBuilderTree struct {
	Id  string `json:"id"`
	Uri string `json:"uri"`
}

// GetId returns AllBuilderTree.Id, and is useful for accessing the field via an interface.
func (v *AllBuilderTree) GetId() string { return v.Id }

// GetUri returns AllBuilderTree.Uri, and is useful for accessing the field via an interface.
func (v *AllBuilderTree) GetUri() string { return v.Uri }

// AllCertifyBad includes the GraphQL fields of CertifyBad requested by the fragment AllCertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type AllCertifyBad struct {
	Id            string                                      `json:"id"`
	Justification string                                      `json:"justification"`
	Subject       AllCertifyBadSubjectPackageSourceOrArtifact `json:"-"`
	Origin        string                                      `json:"origin"`
	Collector     string                                      `json:"collector"`
}

// GetId returns AllCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetId() string { return v.Id }

// GetJustification returns AllCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetJustification() string { return v.Justification }

// GetSubject returns AllCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact { return v.Subject }

// GetOrigin returns AllCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetCollector() string { return v.Collector }

func (v *AllCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBad
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyBadSubjectPackageSourceOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllCertifyBad.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBad) __premarshalJSON() (*__premarshalAllCertifyBad, error) {
	var retval __premarshalAllCertifyBad

	retval.Id = v.Id
	retval.Justification = v.Justification
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllCertifyBadSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllCertifyBadSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllCertifyBadSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyBadSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllCertifyBadSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllCertifyBadSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllCertifyBadSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBadSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBadSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyBadSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllCertifyBadSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBadSubjectArtifact) __premarshalJSON() (*__premarshalAllCertifyBadSubjectArtifact, error) {
	var retval __premarshalAllCertifyBadSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllCertifyBadSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyBadSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllCertifyBadSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyBadSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyBadSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyBadSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyBadSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBadSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBadSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyBadSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyBadSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBadSubjectPackage) __premarshalJSON() (*__premarshalAllCertifyBadSubjectPackage, error) {
	var retval __premarshalAllCertifyBadSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyBadSubjectPackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// AllCertifyBadSubjectPackageSourceOrArtifact is implemented by the following types:
// AllCertifyBadSubjectArtifact
// AllCertifyBadSubjectPackage
// AllCertifyBadSubjectSource
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type AllCertifyBadSubjectPackageSourceOrArtifact interface {
	implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyBadSubjectArtifact) implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact() {
}
func (v *AllCertifyBadSubjectPackage) implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact() {
}
func (v *AllCertifyBadSubjectSource) implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact() {
}

func __unmarshalAllCertifyBadSubjectPackageSourceOrArtifact(b []byte, v *AllCertifyBadSubjectPackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllCertifyBadSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllCertifyBadSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllCertifyBadSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyBadSubjectPackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyBadSubjectPackageSourceOrArtifact(v *AllCertifyBadSubjectPackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyBadSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyBadSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyBadSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyBadSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyBadSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyBadSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyBadSubjectPackageSourceOrArtifact: "%T"`, v)
	}
}

// AllCertifyBadSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllCertifyBadSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllCertifyBadSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyBadSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllCertifyBadSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllCertifyBadSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllCertifyBadSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBadSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBadSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyBadSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllCertifyBadSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBadSubjectSource) __premarshalJSON() (*__premarshalAllCertifyBadSubjectSource, error) {
	var retval __premarshalAllCertifyBadSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllCertifyGood includes the GraphQL fields of CertifyGood requested by the fragment AllCertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type AllCertifyGood struct {
	Id            string                                       `json:"id"`
	Justification string                                       `json:"justification"`
	Subject       AllCertifyGoodSubjectPackageSourceOrArtifact `json:"-"`
	Origin        string                                       `json:"origin"`
	Collector     string                                       `json:"collector"`
}

// GetId returns AllCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetId() string { return v.Id }

// GetJustification returns AllCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetJustification() string { return v.Justification }

// GetSubject returns AllCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact { return v.Subject }

// GetOrigin returns AllCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetCollector() string { return v.Collector }

func (v *AllCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyGood
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyGoodSubjectPackageSourceOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllCertifyGood.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyGood) __premarshalJSON() (*__premarshalAllCertifyGood, error) {
	var retval __premarshalAllCertifyGood

	retval.Id = v.Id
	retval.Justification = v.Justification
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllCertifyGoodSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllCertifyGoodSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllCertifyGoodSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyGoodSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllCertifyGoodSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllCertifyGoodSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllCertifyGoodSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyGoodSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyGoodSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyGoodSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllCertifyGoodSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyGoodSubjectArtifact) __premarshalJSON() (*__premarshalAllCertifyGoodSubjectArtifact, error) {
	var retval __premarshalAllCertifyGoodSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllCertifyGoodSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyGoodSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllCertifyGoodSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyGoodSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyGoodSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyGoodSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyGoodSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyGoodSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyGoodSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyGoodSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyGoodSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyGoodSubjectPackage) __premarshalJSON() (*__premarshalAllCertifyGoodSubjectPackage, error) {
	var retval __premarshalAllCertifyGoodSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyGoodSubjectPackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// AllCertifyGoodSubjectPackageSourceOrArtifact is implemented by the following types:
// AllCertifyGoodSubjectArtifact
// AllCertifyGoodSubjectPackage
// AllCertifyGoodSubjectSource
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type AllCertifyGoodSubjectPackageSourceOrArtifact interface {
	implementsGraphQLInterfaceAllCertifyGoodSubjectPackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyGoodSubjectArtifact) implementsGraphQLInterfaceAllCertifyGoodSubjectPackageSourceOrArtifact() {
}
func (v *AllCertifyGoodSubjectPackage) implementsGraphQLInterfaceAllCertifyGoodSubjectPackageSourceOrArtifact() {
}
func (v *AllCertifyGoodSubjectSource) implementsGraphQLInterfaceAllCertifyGoodSubjectPackageSourceOrArtifact() {
}

func __unmarshalAllCertifyGoodSubjectPackageSourceOrArtifact(b []byte, v *AllCertifyGoodSubjectPackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllCertifyGoodSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllCertifyGoodSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllCertifyGoodSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyGoodSubjectPackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(v *AllCertifyGoodSubjectPackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyGoodSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyGoodSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyGoodSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyGoodSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyGoodSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyGoodSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyGoodSubjectPackageSourceOrArtifact: "%T"`, v)
	}
}

// AllCertifyGoodSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllCertifyGoodSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllCertifyGoodSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyGoodSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllCertifyGoodSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllCertifyGoodSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllCertifyGoodSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyGoodSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyGoodSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyGoodSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllCertifyGoodSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyGoodSubjectSource) __premarshalJSON() (*__premarshalAllCertifyGoodSubjectSource, error) {
	var retval __premarshalAllCertifyGoodSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllCertifyScorecard includes the GraphQL fields of CertifyScorecard requested by the fragment AllCertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type AllCertifyScorecard struct {
	Id string `json:"id"`
	// The source repository that is being scanned (attestation subject)
	Source AllCertifyScorecardSource `json:"source"`
	// The Scorecard attached to the repository (attestation object)
	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

// GetId returns AllCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecard) GetId() string { return v.Id }

// GetSource returns AllCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecard) GetSource() AllCertifyScorecardSource { return v.Source }

// GetScorecard returns AllCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard { return v.Scorecard }

// AllCertifyScorecardScorecard includes the requested fields of the GraphQL type Scorecard.
// The GraphQL type's documentation follows.
//
// Scorecard contains all of the fields present in a Scorecard attestation.
//
// We also include fields to specify under what conditions the check was performed
// (time of scan, version of scanners, etc.) as well as how this information got
// included into GUAC (origin document and the collector for that document).
type AllCertifyScorecardScorecard struct {
	// Exact timestamp when the source was last scanned (in RFC 3339 format)
	TimeScanned time.Time `json:"timeScanned"`
	// Overall Scorecard score for the source
	AggregateScore float64 `json:"aggregateScore"`
	// Individual Scorecard check scores (Branch-Protection, Code-Review, ...)
	Checks []AllCertifyScorecardScorecardChecksScorecardCheck `json:"checks"`
	// Version of the Scorecard scanner used to analyze the source
	ScorecardVersion string `json:"scorecardVersion"`
	// Commit of the Scorecards repository at the time of scanning the source
	ScorecardCommit string `json:"scorecardCommit"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetTimeScanned returns AllCertifyScorecardScorecard.TimeScanned, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetTimeScanned() time.Time { return v.TimeScanned }

// GetAggregateScore returns AllCertifyScorecardScorecard.AggregateScore, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetAggregateScore() float64 { return v.AggregateScore }

// GetChecks returns AllCertifyScorecardScorecard.Checks, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetChecks() []AllCertifyScorecardScorecardChecksScorecardCheck {
	return v.Checks
}

// GetScorecardVersion returns AllCertifyScorecardScorecard.ScorecardVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetScorecardVersion() string { return v.ScorecardVersion }

// GetScorecardCommit returns AllCertifyScorecardScorecard.ScorecardCommit, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetScorecardCommit() string { return v.ScorecardCommit }

// GetOrigin returns AllCertifyScorecardScorecard.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyScorecardScorecard.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetCollector() string { return v.Collector }

// AllCertifyScorecardScorecardChecksScorecardCheck includes the requested fields of the GraphQL type ScorecardCheck.
// The GraphQL type's documentation follows.
//
// ScorecardCheck are the individual checks from scorecard and their values as a
// key-value pair.
//
// For example:  Branch-Protection, Code-Review...etc
//
// Based off scorecard's:
// type jsonCheckResultV2 struct {
// Details []string                 `json:"details"`
// Score   int                      `json:"score"`
// Reason  string                   `json:"reason"`
// Name    string                   `json:"name"`
// Doc     jsonCheckDocumentationV2 `json:"documentation"`
// }
// This node cannot be directly referred by other parts of GUAC.
type AllCertifyScorecardScorecardChecksScorecardCheck struct {
	Check string `json:"check"`
	Score int    `json:"score"`
}

// GetCheck returns AllCertifyScorecardScorecardChecksScorecardCheck.Check, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecardChecksScorecardCheck) GetCheck() string { return v.Check }

// GetScore returns AllCertifyScorecardScorecardChecksScorecardCheck.Score, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecardChecksScorecardCheck) GetScore() int { return v.Score }

// AllCertifyScorecardSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllCertifyScorecardSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns AllCertifyScorecardSource.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllCertifyScorecardSource.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllCertifyScorecardSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllCertifyScorecardSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyScorecardSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyScorecardSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyScorecardSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllCertifyScorecardSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyScorecardSource) __premarshalJSON() (*__premarshalAllCertifyScorecardSource, error) {
	var retval __premarshalAllCertifyScorecardSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllCertifyVEXStatement includes the GraphQL fields of CertifyVEXStatement requested by the fragment AllCertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type AllCertifyVEXStatement struct {
	Id string `json:"id"`
	// Subject of attestation
	Subject AllCertifyVEXStatementSubjectPackageOrArtifact `json:"-"`
	// Attested vulnerability
	Vulnerability AllCertifyVEXStatementVulnerability `json:"-"`
	// Status of the vulnerabilities with respect to the subject
	Status VexStatus `json:"status"`
	// Justification from VEX statement
	VexJustification VexJustification `json:"vexJustification"`
	// VEX statement: impact_statement or action_statement depending on status
	Statement string `json:"statement"`
	// statusNotes may convey information about how status was determined
	StatusNotes string `json:"statusNotes"`
	// Timestamp (exact time in RFC 3339 format) for the VEX statement
	KnownSince time.Time `json:"knownSince"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetId() string { return v.Id }

// GetSubject returns AllCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.Subject
}

// GetVulnerability returns AllCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.Vulnerability
}

// GetStatus returns AllCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetStatus() VexStatus { return v.Status }

// GetVexJustification returns AllCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetVexJustification() VexJustification { return v.VexJustification }

// GetStatement returns AllCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetStatement() string { return v.Statement }

// GetStatusNotes returns AllCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetStatusNotes() string { return v.StatusNotes }

// GetKnownSince returns AllCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetKnownSince() time.Time { return v.KnownSince }

// GetOrigin returns AllCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetCollector() string { return v.Collector }

func (v *AllCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVEXStatement
		Subject       json.RawMessage `json:"subject"`
		Vulnerability json.RawMessage `json:"vulnerability"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyVEXStatementSubjectPackageOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllCertifyVEXStatement.Subject: %w", err)
			}
		}
	}

	{
		dst := &v.Vulnerability
		src := firstPass.Vulnerability
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyVEXStatementVulnerability(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllCertifyVEXStatement.Vulnerability: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVEXStatement) __premarshalJSON() (*__premarshalAllCertifyVEXStatement, error) {
	var retval __premarshalAllCertifyVEXStatement

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.Status
	retval.VexJustification = v.VexJustification
	retval.Statement = v.Statement
	retval.StatusNotes = v.StatusNotes
	retval.KnownSince = v.KnownSince
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllCertifyVEXStatementSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllCertifyVEXStatementSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllCertifyVEXStatementSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVEXStatementSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllCertifyVEXStatementSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns AllCertifyVEXStatementSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllCertifyVEXStatementSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVEXStatementSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVEXStatementSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVEXStatementSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllCertifyVEXStatementSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVEXStatementSubjectArtifact) __premarshalJSON() (*__premarshalAllCertifyVEXStatementSubjectArtifact, error) {
	var retval __premarshalAllCertifyVEXStatementSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllCertifyVEXStatementSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyVEXStatementSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllCertifyVEXStatementSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVEXStatementSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyVEXStatementSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyVEXStatementSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyVEXStatementSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVEXStatementSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVEXStatementSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVEXStatementSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyVEXStatementSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVEXStatementSubjectPackage) __premarshalJSON() (*__premarshalAllCertifyVEXStatementSubjectPackage, error) {
	var retval __premarshalAllCertifyVEXStatementSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyVEXStatementSubjectPackageOrArtifact includes the requested fields of the GraphQL interface PackageOrArtifact.
//
// AllCertifyVEXStatementSubjectPackageOrArtifact is implemented by the following types:
// AllCertifyVEXStatementSubjectArtifact
// AllCertifyVEXStatementSubjectPackage
// The GraphQL type's documentation follows.
//
// PackageOrArtifact is a union of Package and Artifact.
type AllCertifyVEXStatementSubjectPackageOrArtifact interface {
	implementsGraphQLInterfaceAllCertifyVEXStatementSubjectPackageOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyVEXStatementSubjectArtifact) implementsGraphQLInterfaceAllCertifyVEXStatementSubjectPackageOrArtifact() {
}
func (v *AllCertifyVEXStatementSubjectPackage) implementsGraphQLInterfaceAllCertifyVEXStatementSubjectPackageOrArtifact() {
}

func __unmarshalAllCertifyVEXStatementSubjectPackageOrArtifact(b []byte, v *AllCertifyVEXStatementSubjectPackageOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllCertifyVEXStatementSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllCertifyVEXStatementSubjectPackage)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyVEXStatementSubjectPackageOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(v *AllCertifyVEXStatementSubjectPackageOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyVEXStatementSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVEXStatementSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyVEXStatementSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVEXStatementSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyVEXStatementSubjectPackageOrArtifact: "%T"`, v)
	}
}

// AllCertifyVEXStatementVulnerability includes the requested fields of the GraphQL interface Vulnerability.
//
// AllCertifyVEXStatementVulnerability is implemented by the following types:
// AllCertifyVEXStatementVulnerabilityCVE
// AllCertifyVEXStatementVulnerabilityGHSA
// AllCertifyVEXStatementVulnerabilityNoVuln
// AllCertifyVEXStatementVulnerabilityOSV
// The GraphQL type's documentation follows.
//
// Vulnerability is a union of OSV, CVE, GHSA or the NoVuln node.
type AllCertifyVEXStatementVulnerability interface {
	implementsGraphQLInterfaceAllCertifyVEXStatementVulnerability()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyVEXStatementVulnerabilityCVE) implementsGraphQLInterfaceAllCertifyVEXStatementVulnerability() {
}
func (v *AllCertifyVEXStatementVulnerabilityGHSA) implementsGraphQLInterfaceAllCertifyVEXStatementVulnerability() {
}
func (v *AllCertifyVEXStatementVulnerabilityNoVuln) implementsGraphQLInterfaceAllCertifyVEXStatementVulnerability() {
}
func (v *AllCertifyVEXStatementVulnerabilityOSV) implementsGraphQLInterfaceAllCertifyVEXStatementVulnerability() {
}

func __unmarshalAllCertifyVEXStatementVulnerability(b []byte, v *AllCertifyVEXStatementVulnerability) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CVE":
		*v = new(AllCertifyVEXStatementVulnerabilityCVE)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(AllCertifyVEXStatementVulnerabilityGHSA)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(AllCertifyVEXStatementVulnerabilityNoVuln)
		return json.Unmarshal(b, *v)
	case "OSV":
		*v = new(AllCertifyVEXStatementVulnerabilityOSV)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Vulnerability.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyVEXStatementVulnerability: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyVEXStatementVulnerability(v *AllCertifyVEXStatementVulnerability) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyVEXStatementVulnerabilityCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVEXStatementVulnerabilityCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyVEXStatementVulnerabilityGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVEXStatementVulnerabilityGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyVEXStatementVulnerabilityNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*AllCertifyVEXStatementVulnerabilityNoVuln
		}{typename, v}
		return json.Marshal(result)
	case *AllCertifyVEXStatementVulnerabilityOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVEXStatementVulnerabilityOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyVEXStatementVulnerability: "%T"`, v)
	}
}

// AllCertifyVEXStatementVulnerabilityCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllCertifyVEXStatementVulnerabilityCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns AllCertifyVEXStatementVulnerabilityCVE.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityCVE) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVEXStatementVulnerabilityCVE.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns AllCertifyVEXStatementVulnerabilityCVE.Year, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns AllCertifyVEXStatementVulnerabilityCVE.CveId, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *AllCertifyVEXStatementVulnerabilityCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVEXStatementVulnerabilityCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVEXStatementVulnerabilityCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVEXStatementVulnerabilityCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *AllCertifyVEXStatementVulnerabilityCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVEXStatementVulnerabilityCVE) __premarshalJSON() (*__premarshalAllCertifyVEXStatementVulnerabilityCVE, error) {
	var retval __premarshalAllCertifyVEXStatementVulnerabilityCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// AllCertifyVEXStatementVulnerabilityGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllCertifyVEXStatementVulnerabilityGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns AllCertifyVEXStatementVulnerabilityGHSA.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityGHSA) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVEXStatementVulnerabilityGHSA.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns AllCertifyVEXStatementVulnerabilityGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *AllCertifyVEXStatementVulnerabilityGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVEXStatementVulnerabilityGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVEXStatementVulnerabilityGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVEXStatementVulnerabilityGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *AllCertifyVEXStatementVulnerabilityGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVEXStatementVulnerabilityGHSA) __premarshalJSON() (*__premarshalAllCertifyVEXStatementVulnerabilityGHSA, error) {
	var retval __premarshalAllCertifyVEXStatementVulnerabilityGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// AllCertifyVEXStatementVulnerabilityNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type AllCertifyVEXStatementVulnerabilityNoVuln struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AllCertifyVEXStatementVulnerabilityNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityNoVuln) GetTypename() *string { return v.Typename }

// AllCertifyVEXStatementVulnerabilityOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type AllCertifyVEXStatementVulnerabilityOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns AllCertifyVEXStatementVulnerabilityOSV.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityOSV) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVEXStatementVulnerabilityOSV.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns AllCertifyVEXStatementVulnerabilityOSV.OsvId, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerabilityOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *AllCertifyVEXStatementVulnerabilityOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVEXStatementVulnerabilityOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVEXStatementVulnerabilityOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVEXStatementVulnerabilityOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *AllCertifyVEXStatementVulnerabilityOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVEXStatementVulnerabilityOSV) __premarshalJSON() (*__premarshalAllCertifyVEXStatementVulnerabilityOSV, error) {
	var retval __premarshalAllCertifyVEXStatementVulnerabilityOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// AllCertifyVuln includes the GraphQL fields of CertifyVuln requested by the fragment AllCertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type AllCertifyVuln struct {
	Id string `json:"id"`
	// The package that is attested
	Package AllCertifyVulnPackage `json:"package"`
	// The vulnerability object. Can be an OSV, CVE, or GHSA or the special NoVuln node.
	Vulnerability AllCertifyVulnVulnerability `json:"-"`
	// Metadata attached to the certification
	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

// GetId returns AllCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetId() string { return v.Id }

// GetPackage returns AllCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.Package }

// GetVulnerability returns AllCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability { return v.Vulnerability }

// GetMetadata returns AllCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData { return v.Metadata }

func (v *AllCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVuln
		Vulnerability json.RawMessage `json:"vulnerability"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Vulnerability
		src := firstPass.Vulnerability
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyVulnVulnerability(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllCertifyVuln.Vulnerability: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *AllCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVuln) __premarshalJSON() (*__premarshalAllCertifyVuln, error) {
	var retval __premarshalAllCertifyVuln

	retval.Id = v.Id
	retval.Package = v.Package
	{

		dst := &retval.Vulnerability
		src := v.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.Metadata
	return &retval, nil
}

// AllCertifyVulnMetadataVulnerabilityMetaData includes the requested fields of the GraphQL type VulnerabilityMetaData.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetaData is the metadata attached to vulnerability certification.
//
// It contains metadata about the scanner process that created the certification.
type AllCertifyVulnMetadataVulnerabilityMetaData struct {
	// URI of the vulnerability database used by the scanner
	DbUri string `json:"dbUri"`
	// Version of the vulnerability database used by the scanner
	DbVersion string `json:"dbVersion"`
	// URI of the scanner
	ScannerUri string `json:"scannerUri"`
	// Version of the scanner
	ScannerVersion string `json:"scannerVersion"`
	// Time of scan (in RFC 3339 format)
	TimeScanned time.Time `json:"timeScanned"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetDbUri returns AllCertifyVulnMetadataVulnerabilityMetaData.DbUri, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetDbUri() string { return v.DbUri }

// GetDbVersion returns AllCertifyVulnMetadataVulnerabilityMetaData.DbVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetDbVersion() string { return v.DbVersion }

// GetScannerUri returns AllCertifyVulnMetadataVulnerabilityMetaData.ScannerUri, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetScannerUri() string { return v.ScannerUri }

// GetScannerVersion returns AllCertifyVulnMetadataVulnerabilityMetaData.ScannerVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetScannerVersion() string {
	return v.ScannerVersion
}

// GetTimeScanned returns AllCertifyVulnMetadataVulnerabilityMetaData.TimeScanned, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetTimeScanned() time.Time {
	return v.TimeScanned
}

// GetOrigin returns AllCertifyVulnMetadataVulnerabilityMetaData.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyVulnMetadataVulnerabilityMetaData.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetCollector() string { return v.Collector }

// AllCertifyVulnPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyVulnPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllCertifyVulnPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyVulnPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyVulnPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyVulnPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVulnPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVulnPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVulnPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyVulnPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVulnPackage) __premarshalJSON() (*__premarshalAllCertifyVulnPackage, error) {
	var retval __premarshalAllCertifyVulnPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyVulnVulnerability includes the requested fields of the GraphQL interface Vulnerability.
//
// AllCertifyVulnVulnerability is implemented by the following types:
// AllCertifyVulnVulnerabilityCVE
// AllCertifyVulnVulnerabilityGHSA
// AllCertifyVulnVulnerabilityNoVuln
// AllCertifyVulnVulnerabilityOSV
// The GraphQL type's documentation follows.
//
// Vulnerability is a union of OSV, CVE, GHSA or the NoVuln node.
type AllCertifyVulnVulnerability interface {
	implementsGraphQLInterfaceAllCertifyVulnVulnerability()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyVulnVulnerabilityCVE) implementsGraphQLInterfaceAllCertifyVulnVulnerability()    {}
func (v *AllCertifyVulnVulnerabilityGHSA) implementsGraphQLInterfaceAllCertifyVulnVulnerability()   {}
func (v *AllCertifyVulnVulnerabilityNoVuln) implementsGraphQLInterfaceAllCertifyVulnVulnerability() {}
func (v *AllCertifyVulnVulnerabilityOSV) implementsGraphQLInterfaceAllCertifyVulnVulnerability()    {}

func __unmarshalAllCertifyVulnVulnerability(b []byte, v *AllCertifyVulnVulnerability) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CVE":
		*v = new(AllCertifyVulnVulnerabilityCVE)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(AllCertifyVulnVulnerabilityGHSA)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(AllCertifyVulnVulnerabilityNoVuln)
		return json.Unmarshal(b, *v)
	case "OSV":
		*v = new(AllCertifyVulnVulnerabilityOSV)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Vulnerability.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyVulnVulnerability: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyVulnVulnerability(v *AllCertifyVulnVulnerability) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyVulnVulnerabilityCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVulnVulnerabilityCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyVulnVulnerabilityGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVulnVulnerabilityGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyVulnVulnerabilityNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*AllCertifyVulnVulnerabilityNoVuln
		}{typename, v}
		return json.Marshal(result)
	case *AllCertifyVulnVulnerabilityOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVulnVulnerabilityOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyVulnVulnerability: "%T"`, v)
	}
}

// AllCertifyVulnVulnerabilityCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllCertifyVulnVulnerabilityCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns AllCertifyVulnVulnerabilityCVE.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityCVE) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVulnVulnerabilityCVE.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns AllCertifyVulnVulnerabilityCVE.Year, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns AllCertifyVulnVulnerabilityCVE.CveId, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *AllCertifyVulnVulnerabilityCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVulnVulnerabilityCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVulnVulnerabilityCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVulnVulnerabilityCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *AllCertifyVulnVulnerabilityCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVulnVulnerabilityCVE) __premarshalJSON() (*__premarshalAllCertifyVulnVulnerabilityCVE, error) {
	var retval __premarshalAllCertifyVulnVulnerabilityCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// AllCertifyVulnVulnerabilityGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllCertifyVulnVulnerabilityGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns AllCertifyVulnVulnerabilityGHSA.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityGHSA) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVulnVulnerabilityGHSA.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns AllCertifyVulnVulnerabilityGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *AllCertifyVulnVulnerabilityGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVulnVulnerabilityGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVulnVulnerabilityGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVulnVulnerabilityGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *AllCertifyVulnVulnerabilityGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVulnVulnerabilityGHSA) __premarshalJSON() (*__premarshalAllCertifyVulnVulnerabilityGHSA, error) {
	var retval __premarshalAllCertifyVulnVulnerabilityGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// AllCertifyVulnVulnerabilityNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type AllCertifyVulnVulnerabilityNoVuln struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns AllCertifyVulnVulnerabilityNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityNoVuln) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVulnVulnerabilityNoVuln.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityNoVuln) GetId() string { return v.Id }

// AllCertifyVulnVulnerabilityOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type AllCertifyVulnVulnerabilityOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns AllCertifyVulnVulnerabilityOSV.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityOSV) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVulnVulnerabilityOSV.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns AllCertifyVulnVulnerabilityOSV.OsvId, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *AllCertifyVulnVulnerabilityOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVulnVulnerabilityOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVulnVulnerabilityOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVulnVulnerabilityOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *AllCertifyVulnVulnerabilityOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVulnVulnerabilityOSV) __premarshalJSON() (*__premarshalAllCertifyVulnVulnerabilityOSV, error) {
	var retval __premarshalAllCertifyVulnVulnerabilityOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// AllCveTree includes the GraphQL fields of CVE requested by the fragment AllCveTree.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllCveTree struct {
	Id    string `json:"id"`
	Year  int    `json:"year"`
	CveId string `json:"cveId"`
}

// GetId returns AllCveTree.Id, and is useful for accessing the field via an interface.
func (v *AllCveTree) GetId() string { return v.Id }

// GetYear returns AllCveTree.Year, and is useful for accessing the field via an interface.
func (v *AllCveTree) GetYear() int { return v.Year }

// GetCveId returns AllCveTree.CveId, and is useful for accessing the field via an interface.
func (v *AllCveTree) GetCveId() string { return v.CveId }

// AllGHSATree includes the GraphQL fields of GHSA requested by the fragment AllGHSATree.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllGHSATree struct {
	Id     string `json:"id"`
	GhsaId string `json:"ghsaId"`
}

// GetId returns AllGHSATree.Id, and is useful for accessing the field via an interface.
func (v *AllGHSATree) GetId() string { return v.Id }

// GetGhsaId returns AllGHSATree.GhsaId, and is useful for accessing the field via an interface.
func (v *AllGHSATree) GetGhsaId() string { return v.GhsaId }

// AllHasMetadata includes the GraphQL fields of HasMetadata requested by the fragment AllHasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type AllHasMetadata struct {
	Id            string                                       `json:"id"`
	Subject       AllHasMetadataSubjectPackageSourceOrArtifact `json:"-"`
	Key           string                                       `json:"key"`
	Value         string                                       `json:"value"`
	Timestamp     time.Time                                    `json:"timestamp"`
	Justification string                                       `json:"justification"`
	Origin        string                                       `json:"origin"`
	Collector     string                                       `json:"collector"`
}

// GetId returns AllHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetId() string { return v.Id }

// GetSubject returns AllHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact { return v.Subject }

// GetKey returns AllHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetKey() string { return v.Key }

// GetValue returns AllHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetValue() string { return v.Value }

// GetTimestamp returns AllHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetTimestamp() time.Time { return v.Timestamp }

// GetJustification returns AllHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetJustification() string { return v.Justification }

// GetOrigin returns AllHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetOrigin() string { return v.Origin }

// GetCollector returns AllHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetCollector() string { return v.Collector }

func (v *AllHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasMetadata
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllHasMetadataSubjectPackageSourceOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllHasMetadata.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllHasMetadata struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasMetadata) __premarshalJSON() (*__premarshalAllHasMetadata, error) {
	var retval __premarshalAllHasMetadata

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.Key
	retval.Value = v.Value
	retval.Timestamp = v.Timestamp
	retval.Justification = v.Justification
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllHasMetadataSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllHasMetadataSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllHasMetadataSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllHasMetadataSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllHasMetadataSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllHasMetadataSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllHasMetadataSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasMetadataSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasMetadataSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasMetadataSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllHasMetadataSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasMetadataSubjectArtifact) __premarshalJSON() (*__premarshalAllHasMetadataSubjectArtifact, error) {
	var retval __premarshalAllHasMetadataSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllHasMetadataSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllHasMetadataSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllHasMetadataSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllHasMetadataSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllHasMetadataSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllHasMetadataSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllHasMetadataSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasMetadataSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasMetadataSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasMetadataSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllHasMetadataSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasMetadataSubjectPackage) __premarshalJSON() (*__premarshalAllHasMetadataSubjectPackage, error) {
	var retval __premarshalAllHasMetadataSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllHasMetadataSubjectPackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// AllHasMetadataSubjectPackageSourceOrArtifact is implemented by the following types:
// AllHasMetadataSubjectArtifact
// AllHasMetadataSubjectPackage
// AllHasMetadataSubjectSource
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type AllHasMetadataSubjectPackageSourceOrArtifact interface {
	implementsGraphQLInterfaceAllHasMetadataSubjectPackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllHasMetadataSubjectArtifact) implementsGraphQLInterfaceAllHasMetadataSubjectPackageSourceOrArtifact() {
}
func (v *AllHasMetadataSubjectPackage) implementsGraphQLInterfaceAllHasMetadataSubjectPackageSourceOrArtifact() {
}
func (v *AllHasMetadataSubjectSource) implementsGraphQLInterfaceAllHasMetadataSubjectPackageSourceOrArtifact() {
}

func __unmarshalAllHasMetadataSubjectPackageSourceOrArtifact(b []byte, v *AllHasMetadataSubjectPackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllHasMetadataSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllHasMetadataSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllHasMetadataSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllHasMetadataSubjectPackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllHasMetadataSubjectPackageSourceOrArtifact(v *AllHasMetadataSubjectPackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllHasMetadataSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasMetadataSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllHasMetadataSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasMetadataSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllHasMetadataSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasMetadataSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllHasMetadataSubjectPackageSourceOrArtifact: "%T"`, v)
	}
}

// AllHasMetadataSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllHasMetadataSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllHasMetadataSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllHasMetadataSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllHasMetadataSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllHasMetadataSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllHasMetadataSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasMetadataSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasMetadataSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasMetadataSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllHasMetadataSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasMetadataSubjectSource) __premarshalJSON() (*__premarshalAllHasMetadataSubjectSource, error) {
	var retval __premarshalAllHasMetadataSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllHasSBOMTree includes the GraphQL fields of HasSBOM requested by the fragment AllHasSBOMTree.
type AllHasSBOMTree struct {
	Id string `json:"id"`
	// SBOM subject
	Subject AllHasSBOMTreeSubjectPackageOrArtifact `json:"-"`
	// Identifier for the SBOM document
	Uri string `json:"uri"`
	// Algorithm by which SBOMs digest was computed
	Algorithm string `json:"algorithm"`
	// Digest of SBOM
	Digest string `json:"digest"`
	// Location from which the SBOM can be downloaded
	DownloadLocation string `json:"downloadLocation"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllHasSBOMTree.Id, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetId() string { return v.Id }

// GetSubject returns AllHasSBOMTree.Subject, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact { return v.Subject }

// GetUri returns AllHasSBOMTree.Uri, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetUri() string { return v.Uri }

// GetAlgorithm returns AllHasSBOMTree.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns AllHasSBOMTree.Digest, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetDigest() string { return v.Digest }

// GetDownloadLocation returns AllHasSBOMTree.DownloadLocation, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetDownloadLocation() string { return v.DownloadLocation }

// GetOrigin returns AllHasSBOMTree.Origin, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllHasSBOMTree.Collector, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetCollector() string { return v.Collector }

func (v *AllHasSBOMTree) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSBOMTree
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSBOMTree = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllHasSBOMTreeSubjectPackageOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllHasSBOMTree.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllHasSBOMTree struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllHasSBOMTree) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSBOMTree) __premarshalJSON() (*__premarshalAllHasSBOMTree, error) {
	var retval __premarshalAllHasSBOMTree

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.Uri
	retval.Algorithm = v.Algorithm
	retval.Digest = v.Digest
	retval.DownloadLocation = v.DownloadLocation
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllHasSBOMTreeSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllHasSBOMTreeSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllHasSBOMTreeSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllHasSBOMTreeSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllHasSBOMTreeSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllHasSBOMTreeSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllHasSBOMTreeSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSBOMTreeSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSBOMTreeSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSBOMTreeSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllHasSBOMTreeSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSBOMTreeSubjectArtifact) __premarshalJSON() (*__premarshalAllHasSBOMTreeSubjectArtifact, error) {
	var retval __premarshalAllHasSBOMTreeSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllHasSBOMTreeSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllHasSBOMTreeSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllHasSBOMTreeSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllHasSBOMTreeSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllHasSBOMTreeSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllHasSBOMTreeSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllHasSBOMTreeSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSBOMTreeSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSBOMTreeSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSBOMTreeSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllHasSBOMTreeSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSBOMTreeSubjectPackage) __premarshalJSON() (*__premarshalAllHasSBOMTreeSubjectPackage, error) {
	var retval __premarshalAllHasSBOMTreeSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllHasSBOMTreeSubjectPackageOrArtifact includes the requested fields of the GraphQL interface PackageOrArtifact.
//
// AllHasSBOMTreeSubjectPackageOrArtifact is implemented by the following types:
// AllHasSBOMTreeSubjectArtifact
// AllHasSBOMTreeSubjectPackage
// The GraphQL type's documentation follows.
//
// PackageOrArtifact is a union of Package and Artifact.
type AllHasSBOMTreeSubjectPackageOrArtifact interface {
	implementsGraphQLInterfaceAllHasSBOMTreeSubjectPackageOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllHasSBOMTreeSubjectArtifact) implementsGraphQLInterfaceAllHasSBOMTreeSubjectPackageOrArtifact() {
}
func (v *AllHasSBOMTreeSubjectPackage) implementsGraphQLInterfaceAllHasSBOMTreeSubjectPackageOrArtifact() {
}

func __unmarshalAllHasSBOMTreeSubjectPackageOrArtifact(b []byte, v *AllHasSBOMTreeSubjectPackageOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllHasSBOMTreeSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllHasSBOMTreeSubjectPackage)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllHasSBOMTreeSubjectPackageOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllHasSBOMTreeSubjectPackageOrArtifact(v *AllHasSBOMTreeSubjectPackageOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllHasSBOMTreeSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasSBOMTreeSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllHasSBOMTreeSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasSBOMTreeSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllHasSBOMTreeSubjectPackageOrArtifact: "%T"`, v)
	}
}

// AllHasSourceAt includes the GraphQL fields of HasSourceAt requested by the fragment AllHasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type AllHasSourceAt struct {
	Id string `json:"id"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Timestamp since this link between package and source was certified
	KnownSince time.Time `json:"knownSince"`
	// The subject of the attestation: can be a PackageName or a PackageVersion
	Package AllHasSourceAtPackage `json:"package"`
	// Source repository from which the package is built
	Source AllHasSourceAtSource `json:"source"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetId() string { return v.Id }

// GetJustification returns AllHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetJustification() string { return v.Justification }

// GetKnownSince returns AllHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetKnownSince() time.Time { return v.KnownSince }

// GetPackage returns AllHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetPackage() AllHasSourceAtPackage { return v.Package }

// GetSource returns AllHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetSource() AllHasSourceAtSource { return v.Source }

// GetOrigin returns AllHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetOrigin() string { return v.Origin }

// GetCollector returns AllHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetCollector() string { return v.Collector }

// AllHasSourceAtPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllHasSourceAtPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllHasSourceAtPackage.Id, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllHasSourceAtPackage.Type, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllHasSourceAtPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllHasSourceAtPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSourceAtPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSourceAtPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSourceAtPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllHasSourceAtPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSourceAtPackage) __premarshalJSON() (*__premarshalAllHasSourceAtPackage, error) {
	var retval __premarshalAllHasSourceAtPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllHasSourceAtSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllHasSourceAtSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns AllHasSourceAtSource.Id, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllHasSourceAtSource.Type, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllHasSourceAtSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllHasSourceAtSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSourceAtSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSourceAtSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSourceAtSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllHasSourceAtSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSourceAtSource) __premarshalJSON() (*__premarshalAllHasSourceAtSource, error) {
	var retval __premarshalAllHasSourceAtSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllHashEqualTree includes the GraphQL fields of HashEqual requested by the fragment AllHashEqualTree.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type AllHashEqualTree struct {
	Id string `json:"id"`
	// Justification for the claim that the artifacts are similar
	Justification string `json:"justification"`
	// Collection of artifacts that are similar
	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllHashEqualTree.Id, and is useful for accessing the field via an interface.
func (v *AllHashEqualTree) GetId() string { return v.Id }

// GetJustification returns AllHashEqualTree.Justification, and is useful for accessing the field via an interface.
func (v *AllHashEqualTree) GetJustification() string { return v.Justification }

// GetArtifacts returns AllHashEqualTree.Artifacts, and is useful for accessing the field via an interface.
func (v *AllHashEqualTree) GetArtifacts() []AllHashEqualTreeArtifactsArtifact { return v.Artifacts }

// GetOrigin returns AllHashEqualTree.Origin, and is useful for accessing the field via an interface.
func (v *AllHashEqualTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllHashEqualTree.Collector, and is useful for accessing the field via an interface.
func (v *AllHashEqualTree) GetCollector() string { return v.Collector }

// AllHashEqualTreeArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllHashEqualTreeArtifactsArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllHashEqualTreeArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllHashEqualTreeArtifactsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllHashEqualTreeArtifactsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHashEqualTreeArtifactsArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllHashEqualTreeArtifactsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllHashEqualTreeArtifactsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllHashEqualTreeArtifactsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHashEqualTreeArtifactsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHashEqualTreeArtifactsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHashEqualTreeArtifactsArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllHashEqualTreeArtifactsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHashEqualTreeArtifactsArtifact) __premarshalJSON() (*__premarshalAllHashEqualTreeArtifactsArtifact, error) {
	var retval __premarshalAllHashEqualTreeArtifactsArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllIsDependencyTree includes the GraphQL fields of IsDependency requested by the fragment AllIsDependencyTree.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type AllIsDependencyTree struct {
	Id string `json:"id"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Package that has the dependency
	Package AllIsDependencyTreePackage `json:"package"`
	// Package for the dependency; MUST BE PackageName, not PackageVersion
	DependentPackage AllIsDependencyTreeDependentPackage `json:"dependentPackage"`
	// Type of dependency
	DependencyType DependencyType `json:"dependencyType"`
	// Version range for the dependency link
	VersionRange string `json:"versionRange"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllIsDependencyTree.Id, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetId() string { return v.Id }

// GetJustification returns AllIsDependencyTree.Justification, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetJustification() string { return v.Justification }

// GetPackage returns AllIsDependencyTree.Package, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetPackage() AllIsDependencyTreePackage { return v.Package }

// GetDependentPackage returns AllIsDependencyTree.DependentPackage, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetDependentPackage() AllIsDependencyTreeDependentPackage {
	return v.DependentPackage
}

// GetDependencyType returns AllIsDependencyTree.DependencyType, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetDependencyType() DependencyType { return v.DependencyType }

// GetVersionRange returns AllIsDependencyTree.VersionRange, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetVersionRange() string { return v.VersionRange }

// GetOrigin returns AllIsDependencyTree.Origin, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllIsDependencyTree.Collector, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetCollector() string { return v.Collector }

// AllIsDependencyTreeDependentPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllIsDependencyTreeDependentPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllIsDependencyTreeDependentPackage.Id, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreeDependentPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllIsDependencyTreeDependentPackage.Type, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreeDependentPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllIsDependencyTreeDependentPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreeDependentPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllIsDependencyTreeDependentPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsDependencyTreeDependentPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsDependencyTreeDependentPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsDependencyTreeDependentPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllIsDependencyTreeDependentPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsDependencyTreeDependentPackage) __premarshalJSON() (*__premarshalAllIsDependencyTreeDependentPackage, error) {
	var retval __premarshalAllIsDependencyTreeDependentPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllIsDependencyTreePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllIsDependencyTreePackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllIsDependencyTreePackage.Id, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreePackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllIsDependencyTreePackage.Type, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreePackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllIsDependencyTreePackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreePackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllIsDependencyTreePackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsDependencyTreePackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsDependencyTreePackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsDependencyTreePackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllIsDependencyTreePackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsDependencyTreePackage) __premarshalJSON() (*__premarshalAllIsDependencyTreePackage, error) {
	var retval __premarshalAllIsDependencyTreePackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllIsOccurrencesTree includes the GraphQL fields of IsOccurrence requested by the fragment AllIsOccurrencesTree.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type AllIsOccurrencesTree struct {
	Id string `json:"id"`
	// Package or source from which the artifact originates
	Subject AllIsOccurrencesTreeSubjectPackageOrSource `json:"-"`
	// The artifact in the relationship
	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllIsOccurrencesTree.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetId() string { return v.Id }

// GetSubject returns AllIsOccurrencesTree.Subject, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.Subject
}

// GetArtifact returns AllIsOccurrencesTree.Artifact, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetArtifact() AllIsOccurrencesTreeArtifact { return v.Artifact }

// GetJustification returns AllIsOccurrencesTree.Justification, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetJustification() string { return v.Justification }

// GetOrigin returns AllIsOccurrencesTree.Origin, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllIsOccurrencesTree.Collector, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetCollector() string { return v.Collector }

func (v *AllIsOccurrencesTree) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTree
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTree = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllIsOccurrencesTreeSubjectPackageOrSource(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllIsOccurrencesTree.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllIsOccurrencesTree struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllIsOccurrencesTree) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTree) __premarshalJSON() (*__premarshalAllIsOccurrencesTree, error) {
	var retval __premarshalAllIsOccurrencesTree

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.Artifact
	retval.Justification = v.Justification
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllIsOccurrencesTreeArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllIsOccurrencesTreeArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllIsOccurrencesTreeArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllIsOccurrencesTreeArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllIsOccurrencesTreeArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllIsOccurrencesTreeArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTreeArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTreeArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsOccurrencesTreeArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllIsOccurrencesTreeArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTreeArtifact) __premarshalJSON() (*__premarshalAllIsOccurrencesTreeArtifact, error) {
	var retval __premarshalAllIsOccurrencesTreeArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllIsOccurrencesTreeSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllIsOccurrencesTreeSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllIsOccurrencesTreeSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllIsOccurrencesTreeSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllIsOccurrencesTreeSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllIsOccurrencesTreeSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllIsOccurrencesTreeSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTreeSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTreeSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsOccurrencesTreeSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllIsOccurrencesTreeSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTreeSubjectPackage) __premarshalJSON() (*__premarshalAllIsOccurrencesTreeSubjectPackage, error) {
	var retval __premarshalAllIsOccurrencesTreeSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllIsOccurrencesTreeSubjectPackageOrSource includes the requested fields of the GraphQL interface PackageOrSource.
//
// AllIsOccurrencesTreeSubjectPackageOrSource is implemented by the following types:
// AllIsOccurrencesTreeSubjectPackage
// AllIsOccurrencesTreeSubjectSource
// The GraphQL type's documentation follows.
//
// PackageOrSource is a union of Package and Source.
type AllIsOccurrencesTreeSubjectPackageOrSource interface {
	implementsGraphQLInterfaceAllIsOccurrencesTreeSubjectPackageOrSource()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllIsOccurrencesTreeSubjectPackage) implementsGraphQLInterfaceAllIsOccurrencesTreeSubjectPackageOrSource() {
}
func (v *AllIsOccurrencesTreeSubjectSource) implementsGraphQLInterfaceAllIsOccurrencesTreeSubjectPackageOrSource() {
}

func __unmarshalAllIsOccurrencesTreeSubjectPackageOrSource(b []byte, v *AllIsOccurrencesTreeSubjectPackageOrSource) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(AllIsOccurrencesTreeSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllIsOccurrencesTreeSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrSource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllIsOccurrencesTreeSubjectPackageOrSource: "%v"`, tn.TypeName)
	}
}

func __marshalAllIsOccurrencesTreeSubjectPackageOrSource(v *AllIsOccurrencesTreeSubjectPackageOrSource) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllIsOccurrencesTreeSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllIsOccurrencesTreeSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllIsOccurrencesTreeSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllIsOccurrencesTreeSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllIsOccurrencesTreeSubjectPackageOrSource: "%T"`, v)
	}
}

// AllIsOccurrencesTreeSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllIsOccurrencesTreeSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllIsOccurrencesTreeSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllIsOccurrencesTreeSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllIsOccurrencesTreeSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllIsOccurrencesTreeSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllIsOccurrencesTreeSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTreeSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTreeSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsOccurrencesTreeSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllIsOccurrencesTreeSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTreeSubjectSource) __premarshalJSON() (*__premarshalAllIsOccurrencesTreeSubjectSource, error) {
	var retval __premarshalAllIsOccurrencesTreeSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllIsVulnerability includes the GraphQL fields of IsVulnerability requested by the fragment AllIsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type AllIsVulnerability struct {
	Id string `json:"id"`
	// The OSV that encapsulates the vulnerability
	Osv AllIsVulnerabilityOsvOSV `json:"osv"`
	// The upstream vulnerability information
	Vulnerability AllIsVulnerabilityVulnerabilityCveOrGhsa `json:"-"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *AllIsVulnerability) GetId() string { return v.Id }

// GetOsv returns AllIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *AllIsVulnerability) GetOsv() AllIsVulnerabilityOsvOSV { return v.Osv }

// GetVulnerability returns AllIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *AllIsVulnerability) GetVulnerability() AllIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.Vulnerability
}

// GetJustification returns AllIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *AllIsVulnerability) GetJustification() string { return v.Justification }

// GetOrigin returns AllIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *AllIsVulnerability) GetOrigin() string { return v.Origin }

// GetCollector returns AllIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *AllIsVulnerability) GetCollector() string { return v.Collector }

func (v *AllIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsVulnerability
		Vulnerability json.RawMessage `json:"vulnerability"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Vulnerability
		src := firstPass.Vulnerability
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllIsVulnerabilityVulnerabilityCveOrGhsa(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllIsVulnerability.Vulnerability: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllIsVulnerability struct {
	Id string `json:"id"`

	Osv AllIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsVulnerability) __premarshalJSON() (*__premarshalAllIsVulnerability, error) {
	var retval __premarshalAllIsVulnerability

	retval.Id = v.Id
	retval.Osv = v.Osv
	{

		dst := &retval.Vulnerability
		src := v.Vulnerability
		var err error
		*dst, err = __marshalAllIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.Justification
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllIsVulnerabilityOsvOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type AllIsVulnerabilityOsvOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns AllIsVulnerabilityOsvOSV.Id, and is useful for accessing the field via an interface.
func (v *AllIsVulnerabilityOsvOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns AllIsVulnerabilityOsvOSV.OsvId, and is useful for accessing the field via an interface.
func (v *AllIsVulnerabilityOsvOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *AllIsVulnerabilityOsvOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsVulnerabilityOsvOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsVulnerabilityOsvOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsVulnerabilityOsvOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *AllIsVulnerabilityOsvOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsVulnerabilityOsvOSV) __premarshalJSON() (*__premarshalAllIsVulnerabilityOsvOSV, error) {
	var retval __premarshalAllIsVulnerabilityOsvOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// AllIsVulnerabilityVulnerabilityCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllIsVulnerabilityVulnerabilityCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns AllIsVulnerabilityVulnerabilityCVE.Typename, and is useful for accessing the field via an interface.
func (v *AllIsVulnerabilityVulnerabilityCVE) GetTypename() *string { return v.Typename }

// GetId returns AllIsVulnerabilityVulnerabilityCVE.Id, and is useful for accessing the field via an interface.
func (v *AllIsVulnerabilityVulnerabilityCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns AllIsVulnerabilityVulnerabilityCVE.Year, and is useful for accessing the field via an interface.
func (v *AllIsVulnerabilityVulnerabilityCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns AllIsVulnerabilityVulnerabilityCVE.CveId, and is useful for accessing the field via an interface.
func (v *AllIsVulnerabilityVulnerabilityCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *AllIsVulnerabilityVulnerabilityCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsVulnerabilityVulnerabilityCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsVulnerabilityVulnerabilityCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsVulnerabilityVulnerabilityCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *AllIsVulnerabilityVulnerabilityCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsVulnerabilityVulnerabilityCVE) __premarshalJSON() (*__premarshalAllIsVulnerabilityVulnerabilityCVE, error) {
	var retval __premarshalAllIsVulnerabilityVulnerabilityCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// AllIsVulnerabilityVulnerabilityCveOrGhsa includes the requested fields of the GraphQL interface CveOrGhsa.
//
// AllIsVulnerabilityVulnerabilityCveOrGhsa is implemented by the following types:
// AllIsVulnerabilityVulnerabilityCVE
// AllIsVulnerabilityVulnerabilityGHSA
// The GraphQL type's documentation follows.
//
// CveOrGhsa is a union of CVE and GHSA.
type AllIsVulnerabilityVulnerabilityCveOrGhsa interface {
	implementsGraphQLInterfaceAllIsVulnerabilityVulnerabilityCveOrGhsa()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllIsVulnerabilityVulnerabilityCVE) implementsGraphQLInterfaceAllIsVulnerabilityVulnerabilityCveOrGhsa() {
}
func (v *AllIsVulnerabilityVulnerabilityGHSA) implementsGraphQLInterfaceAllIsVulnerabilityVulnerabilityCveOrGhsa() {
}

func __unmarshalAllIsVulnerabilityVulnerabilityCveOrGhsa(b []byte, v *AllIsVulnerabilityVulnerabilityCveOrGhsa) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CVE":
		*v = new(AllIsVulnerabilityVulnerabilityCVE)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(AllIsVulnerabilityVulnerabilityGHSA)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CveOrGhsa.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllIsVulnerabilityVulnerabilityCveOrGhsa: "%v"`, tn.TypeName)
	}
}

func __marshalAllIsVulnerabilityVulnerabilityCveOrGhsa(v *AllIsVulnerabilityVulnerabilityCveOrGhsa) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllIsVulnerabilityVulnerabilityCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllIsVulnerabilityVulnerabilityCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllIsVulnerabilityVulnerabilityGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllIsVulnerabilityVulnerabilityGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllIsVulnerabilityVulnerabilityCveOrGhsa: "%T"`, v)
	}
}

// AllIsVulnerabilityVulnerabilityGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllIsVulnerabilityVulnerabilityGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns AllIsVulnerabilityVulnerabilityGHSA.Typename, and is useful for accessing the field via an interface.
func (v *AllIsVulnerabilityVulnerabilityGHSA) GetTypename() *string { return v.Typename }

// GetId returns AllIsVulnerabilityVulnerabilityGHSA.Id, and is useful for accessing the field via an interface.
func (v *AllIsVulnerabilityVulnerabilityGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns AllIsVulnerabilityVulnerabilityGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *AllIsVulnerabilityVulnerabilityGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *AllIsVulnerabilityVulnerabilityGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsVulnerabilityVulnerabilityGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsVulnerabilityVulnerabilityGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsVulnerabilityVulnerabilityGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *AllIsVulnerabilityVulnerabilityGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsVulnerabilityVulnerabilityGHSA) __premarshalJSON() (*__premarshalAllIsVulnerabilityVulnerabilityGHSA, error) {
	var retval __premarshalAllIsVulnerabilityVulnerabilityGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// AllOSVTree includes the GraphQL fields of OSV requested by the fragment AllOSVTree.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type AllOSVTree struct {
	Id    string `json:"id"`
	OsvId string `json:"osvId"`
}

// GetId returns AllOSVTree.Id, and is useful for accessing the field via an interface.
func (v *AllOSVTree) GetId() string { return v.Id }

// GetOsvId returns AllOSVTree.OsvId, and is useful for accessing the field via an interface.
func (v *AllOSVTree) GetOsvId() string { return v.OsvId }

// AllPkgEqual includes the GraphQL fields of PkgEqual requested by the fragment AllPkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type AllPkgEqual struct {
	Id string `json:"id"`
	// Justification for the claim that the packages are similar
	Justification string `json:"justification"`
	// Collection of packages that are similar
	Packages []AllPkgEqualPackagesPackage `json:"packages"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *AllPkgEqual) GetId() string { return v.Id }

// GetJustification returns AllPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *AllPkgEqual) GetJustification() string { return v.Justification }

// GetPackages returns AllPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *AllPkgEqual) GetPackages() []AllPkgEqualPackagesPackage { return v.Packages }

// GetOrigin returns AllPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *AllPkgEqual) GetOrigin() string { return v.Origin }

// GetCollector returns AllPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *AllPkgEqual) GetCollector() string { return v.Collector }

// AllPkgEqualPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllPkgEqualPackagesPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllPkgEqualPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *AllPkgEqualPackagesPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllPkgEqualPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *AllPkgEqualPackagesPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllPkgEqualPackagesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllPkgEqualPackagesPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllPkgEqualPackagesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllPkgEqualPackagesPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllPkgEqualPackagesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllPkgEqualPackagesPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllPkgEqualPackagesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllPkgEqualPackagesPackage) __premarshalJSON() (*__premarshalAllPkgEqualPackagesPackage, error) {
	var retval __premarshalAllPkgEqualPackagesPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllPkgTree includes the GraphQL fields of Package requested by the fragment AllPkgTree.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllPkgTree struct {
	Id         string                                 `json:"id"`
	Type       string                                 `json:"type"`
	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

// GetId returns AllPkgTree.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTree) GetId() string { return v.Id }

// GetType returns AllPkgTree.Type, and is useful for accessing the field via an interface.
func (v *AllPkgTree) GetType() string { return v.Type }

// GetNamespaces returns AllPkgTree.Namespaces, and is useful for accessing the field via an interface.
func (v *AllPkgTree) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace { return v.Namespaces }

// AllPkgTreeNamespacesPackageNamespace includes the requested fields of the GraphQL type PackageNamespace.
// The GraphQL type's documentation follows.
//
// PackageNamespace is a namespace for packages.
//
// In the pURL representation, each PackageNamespace matches the
// pkg:<type>/<namespace>/ partial pURL.
//
// Namespaces are optional and type specific. Because they are optional, we use
// empty string to denote missing namespaces.
type AllPkgTreeNamespacesPackageNamespace struct {
	Id        string                                                 `json:"id"`
	Namespace string                                                 `json:"namespace"`
	Names     []AllPkgTreeNamespacesPackageNamespaceNamesPackageName `json:"names"`
}

// GetId returns AllPkgTreeNamespacesPackageNamespace.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespace) GetId() string { return v.Id }

// GetNamespace returns AllPkgTreeNamespacesPackageNamespace.Namespace, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespace) GetNamespace() string { return v.Namespace }

// GetNames returns AllPkgTreeNamespacesPackageNamespace.Names, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespace) GetNames() []AllPkgTreeNamespacesPackageNamespaceNamesPackageName {
	return v.Names
}

// AllPkgTreeNamespacesPackageNamespaceNamesPackageName includes the requested fields of the GraphQL type PackageName.
// The GraphQL type's documentation follows.
//
// PackageName is a name for packages.
//
// In the pURL representation, each PackageName matches the
// pkg:<type>/<namespace>/<name> pURL.
//
// Names are always mandatory.
//
// This is the first node in the trie that can be referred to by other parts of
// GUAC.
type AllPkgTreeNamespacesPackageNamespaceNamesPackageName struct {
	Id       string                                                                       `json:"id"`
	Name     string                                                                       `json:"name"`
	Versions []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion `json:"versions"`
}

// GetId returns AllPkgTreeNamespacesPackageNamespaceNamesPackageName.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageName) GetId() string { return v.Id }

// GetName returns AllPkgTreeNamespacesPackageNamespaceNamesPackageName.Name, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageName) GetName() string { return v.Name }

// GetVersions returns AllPkgTreeNamespacesPackageNamespaceNamesPackageName.Versions, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageName) GetVersions() []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion {
	return v.Versions
}

// AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion includes the requested fields of the GraphQL type PackageVersion.
// The GraphQL type's documentation follows.
//
// PackageVersion is a package version.
//
// In the pURL representation, each PackageName matches the
// pkg:<type>/<namespace>/<name>@<version> pURL.
//
// Versions are optional and each Package type defines own rules for handling
// them. For this level of GUAC, these are just opaque strings.
//
// NOTE: The handling of versions might change before this schema becomes stable.
//
// This node can be referred to by other parts of GUAC.
//
// Subpath and qualifiers are optional. Lack of qualifiers is represented by an
// empty list and lack of subpath by empty string (to be consistent with
// optionality of namespace and version). Two nodes that have different qualifiers
// and/or subpath but the same version mean two different packages in the trie
// (they are different). Two nodes that have same version but qualifiers of one
// are a subset of the qualifier of the other also mean two different packages in
// the trie.
type AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion struct {
	Id         string                                                                                                 `json:"id"`
	Version    string                                                                                                 `json:"version"`
	Qualifiers []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier `json:"qualifiers"`
	Subpath    string                                                                                                 `json:"subpath"`
}

// GetId returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetId() string {
	return v.Id
}

// GetVersion returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Version, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetVersion() string {
	return v.Version
}

// GetQualifiers returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Qualifiers, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetQualifiers() []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier {
	return v.Qualifiers
}

// GetSubpath returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Subpath, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetSubpath() string {
	return v.Subpath
}

// AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier includes the requested fields of the GraphQL type PackageQualifier.
// The GraphQL type's documentation follows.
//
// PackageQualifier is a qualifier for a package, a key-value pair.
//
// In the pURL representation, it is a part of the <qualifiers> part of the
// pkg:<type>/<namespace>/<name>@<version>?<qualifiers> pURL.
//
// Qualifiers are optional, each Package type defines own rules for handling them,
// and multiple qualifiers could be attached to the same package.
//
// This node cannot be directly referred by other parts of GUAC.
type AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier.Key, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier) GetKey() string {
	return v.Key
}

// GetValue returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier.Value, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier) GetValue() string {
	return v.Value
}

// AllPointOfContact includes the GraphQL fields of PointOfContact requested by the fragment AllPointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type AllPointOfContact struct {
	Id            string                                          `json:"id"`
	Subject       AllPointOfContactSubjectPackageSourceOrArtifact `json:"-"`
	Email         string                                          `json:"email"`
	Info          string                                          `json:"info"`
	Since         time.Time                                       `json:"since"`
	Justification string                                          `json:"justification"`
	Origin        string                                          `json:"origin"`
	Collector     string                                          `json:"collector"`
}

// GetId returns AllPointOfContact.Id, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetId() string { return v.Id }

// GetSubject returns AllPointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.Subject
}

// GetEmail returns AllPointOfContact.Email, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetEmail() string { return v.Email }

// GetInfo returns AllPointOfContact.Info, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetInfo() string { return v.Info }

// GetSince returns AllPointOfContact.Since, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetSince() time.Time { return v.Since }

// GetJustification returns AllPointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetJustification() string { return v.Justification }

// GetOrigin returns AllPointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetOrigin() string { return v.Origin }

// GetCollector returns AllPointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetCollector() string { return v.Collector }

func (v *AllPointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllPointOfContact
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllPointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllPointOfContactSubjectPackageSourceOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllPointOfContact.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllPointOfContact struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllPointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllPointOfContact) __premarshalJSON() (*__premarshalAllPointOfContact, error) {
	var retval __premarshalAllPointOfContact

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.Email
	retval.Info = v.Info
	retval.Since = v.Since
	retval.Justification = v.Justification
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllPointOfContactSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllPointOfContactSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllPointOfContactSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllPointOfContactSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllPointOfContactSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllPointOfContactSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllPointOfContactSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllPointOfContactSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllPointOfContactSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllPointOfContactSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllPointOfContactSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllPointOfContactSubjectArtifact) __premarshalJSON() (*__premarshalAllPointOfContactSubjectArtifact, error) {
	var retval __premarshalAllPointOfContactSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllPointOfContactSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllPointOfContactSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllPointOfContactSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllPointOfContactSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllPointOfContactSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllPointOfContactSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllPointOfContactSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllPointOfContactSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllPointOfContactSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllPointOfContactSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllPointOfContactSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllPointOfContactSubjectPackage) __premarshalJSON() (*__premarshalAllPointOfContactSubjectPackage, error) {
	var retval __premarshalAllPointOfContactSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllPointOfContactSubjectPackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// AllPointOfContactSubjectPackageSourceOrArtifact is implemented by the following types:
// AllPointOfContactSubjectArtifact
// AllPointOfContactSubjectPackage
// AllPointOfContactSubjectSource
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type AllPointOfContactSubjectPackageSourceOrArtifact interface {
	implementsGraphQLInterfaceAllPointOfContactSubjectPackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllPointOfContactSubjectArtifact) implementsGraphQLInterfaceAllPointOfContactSubjectPackageSourceOrArtifact() {
}
func (v *AllPointOfContactSubjectPackage) implementsGraphQLInterfaceAllPointOfContactSubjectPackageSourceOrArtifact() {
}
func (v *AllPointOfContactSubjectSource) implementsGraphQLInterfaceAllPointOfContactSubjectPackageSourceOrArtifact() {
}

func __unmarshalAllPointOfContactSubjectPackageSourceOrArtifact(b []byte, v *AllPointOfContactSubjectPackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllPointOfContactSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllPointOfContactSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllPointOfContactSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllPointOfContactSubjectPackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllPointOfContactSubjectPackageSourceOrArtifact(v *AllPointOfContactSubjectPackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllPointOfContactSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllPointOfContactSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllPointOfContactSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllPointOfContactSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllPointOfContactSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllPointOfContactSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllPointOfContactSubjectPackageSourceOrArtifact: "%T"`, v)
	}
}

// AllPointOfContactSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllPointOfContactSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllPointOfContactSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllPointOfContactSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllPointOfContactSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllPointOfContactSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllPointOfContactSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllPointOfContactSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllPointOfContactSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllPointOfContactSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllPointOfContactSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllPointOfContactSubjectSource) __premarshalJSON() (*__premarshalAllPointOfContactSubjectSource, error) {
	var retval __premarshalAllPointOfContactSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllSLSATree includes the GraphQL fields of HasSLSA requested by the fragment AllSLSATree.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type AllSLSATree struct {
	Id string `json:"id"`
	// The subject of SLSA attestation
	Subject AllSLSATreeSubjectArtifact `json:"subject"`
	// The SLSA attestation
	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

// GetId returns AllSLSATree.Id, and is useful for accessing the field via an interface.
func (v *AllSLSATree) GetId() string { return v.Id }

// GetSubject returns AllSLSATree.Subject, and is useful for accessing the field via an interface.
func (v *AllSLSATree) GetSubject() AllSLSATreeSubjectArtifact { return v.Subject }

// GetSlsa returns AllSLSATree.Slsa, and is useful for accessing the field via an interface.
func (v *AllSLSATree) GetSlsa() AllSLSATreeSlsaSLSA { return v.Slsa }

// AllSLSATreeSlsaSLSA includes the requested fields of the GraphQL type SLSA.
// The GraphQL type's documentation follows.
//
// SLSA contains all of the fields present in a SLSA attestation.
//
// The materials and builders are objects of the HasSLSA predicate, everything
// else are properties extracted from the attestation.
//
// We also include fields to specify under what conditions the check was performed
// (time of scan, version of scanners, etc.) as well as how this information got
// included into GUAC (origin document and the collector for that document).
type AllSLSATreeSlsaSLSA struct {
	// Materials of the build resulting in subject
	BuiltFrom []AllSLSATreeSlsaSLSABuiltFromArtifact `json:"builtFrom"`
	// Builder performing the build
	BuiltBy AllSLSATreeSlsaSLSABuiltByBuilder `json:"builtBy"`
	// Type of the builder
	BuildType string `json:"buildType"`
	// Individual predicates found in the attestation
	SlsaPredicate []AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate `json:"slsaPredicate"`
	// Version of the SLSA predicate
	SlsaVersion string `json:"slsaVersion"`
	// Timestamp (RFC3339Nano format) of build start time
	StartedOn *time.Time `json:"startedOn"`
	// Timestamp (RFC3339Nano format) of build end time
	FinishedOn *time.Time `json:"finishedOn"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetBuiltFrom returns AllSLSATreeSlsaSLSA.BuiltFrom, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetBuiltFrom() []AllSLSATreeSlsaSLSABuiltFromArtifact {
	return v.BuiltFrom
}

// GetBuiltBy returns AllSLSATreeSlsaSLSA.BuiltBy, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetBuiltBy() AllSLSATreeSlsaSLSABuiltByBuilder { return v.BuiltBy }

// GetBuildType returns AllSLSATreeSlsaSLSA.BuildType, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetBuildType() string { return v.BuildType }

// GetSlsaPredicate returns AllSLSATreeSlsaSLSA.SlsaPredicate, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetSlsaPredicate() []AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate {
	return v.SlsaPredicate
}

// GetSlsaVersion returns AllSLSATreeSlsaSLSA.SlsaVersion, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetSlsaVersion() string { return v.SlsaVersion }

// GetStartedOn returns AllSLSATreeSlsaSLSA.StartedOn, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetStartedOn() *time.Time { return v.StartedOn }

// GetFinishedOn returns AllSLSATreeSlsaSLSA.FinishedOn, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetFinishedOn() *time.Time { return v.FinishedOn }

// GetOrigin returns AllSLSATreeSlsaSLSA.Origin, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetOrigin() string { return v.Origin }

// GetCollector returns AllSLSATreeSlsaSLSA.Collector, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetCollector() string { return v.Collector }

// AllSLSATreeSlsaSLSABuiltByBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type AllSLSATreeSlsaSLSABuiltByBuilder struct {
	Id  string `json:"id"`
	Uri string `json:"uri"`
}

// GetId returns AllSLSATreeSlsaSLSABuiltByBuilder.Id, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSABuiltByBuilder) GetId() string { return v.Id }

// GetUri returns AllSLSATreeSlsaSLSABuiltByBuilder.Uri, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSABuiltByBuilder) GetUri() string { return v.Uri }

// AllSLSATreeSlsaSLSABuiltFromArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllSLSATreeSlsaSLSABuiltFromArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllSLSATreeSlsaSLSABuiltFromArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllSLSATreeSlsaSLSABuiltFromArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns AllSLSATreeSlsaSLSABuiltFromArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllSLSATreeSlsaSLSABuiltFromArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllSLSATreeSlsaSLSABuiltFromArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllSLSATreeSlsaSLSABuiltFromArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) __premarshalJSON() (*__premarshalAllSLSATreeSlsaSLSABuiltFromArtifact, error) {
	var retval __premarshalAllSLSATreeSlsaSLSABuiltFromArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate includes the requested fields of the GraphQL type SLSAPredicate.
// The GraphQL type's documentation follows.
//
// SLSAPredicate are the values from the SLSA predicate in key-value pair form.
//
// # For example, given the following predicate
//
// ```
// "predicate": {
// "buildDefinition": {
// "externalParameters": {
// "repository": "https://github.com/octocat/hello-world",
// ...
// },
// ...
// },
// ...
// }
// ```
//
// we have
//
// ```
// key   = "buildDefinition.externalParameters.repository"
// value = "https://github.com/octocat/hello-world"
// ```
//
// This node cannot be directly referred by other parts of GUAC.
type AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate.Key, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate) GetKey() string { return v.Key }

// GetValue returns AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate.Value, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate) GetValue() string { return v.Value }

// AllSLSATreeSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllSLSATreeSubjectArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllSLSATreeSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllSLSATreeSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllSLSATreeSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllSLSATreeSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllSLSATreeSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllSLSATreeSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllSLSATreeSubjectArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllSLSATreeSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllSLSATreeSubjectArtifact) __premarshalJSON() (*__premarshalAllSLSATreeSubjectArtifact, error) {
	var retval __premarshalAllSLSATreeSubjectArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllSourceTree includes the GraphQL fields of Source requested by the fragment AllSourceTree.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllSourceTree struct {
	Id         string                                   `json:"id"`
	Type       string                                   `json:"type"`
	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

// GetId returns AllSourceTree.Id, and is useful for accessing the field via an interface.
func (v *AllSourceTree) GetId() string { return v.Id }

// GetType returns AllSourceTree.Type, and is useful for accessing the field via an interface.
func (v *AllSourceTree) GetType() string { return v.Type }

// GetNamespaces returns AllSourceTree.Namespaces, and is useful for accessing the field via an interface.
func (v *AllSourceTree) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace { return v.Namespaces }

// AllSourceTreeNamespacesSourceNamespace includes the requested fields of the GraphQL type SourceNamespace.
// The GraphQL type's documentation follows.
//
// SourceNamespace is a namespace for sources.
//
// This is the location of the repository (such as github/gitlab/bitbucket).
//
// The namespace field is mandatory.
type AllSourceTreeNamespacesSourceNamespace struct {
	Id        string                                                  `json:"id"`
	Namespace string                                                  `json:"namespace"`
	Names     []AllSourceTreeNamespacesSourceNamespaceNamesSourceName `json:"names"`
}

// GetId returns AllSourceTreeNamespacesSourceNamespace.Id, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespace) GetId() string { return v.Id }

// GetNamespace returns AllSourceTreeNamespacesSourceNamespace.Namespace, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespace) GetNamespace() string { return v.Namespace }

// GetNames returns AllSourceTreeNamespacesSourceNamespace.Names, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespace) GetNames() []AllSourceTreeNamespacesSourceNamespaceNamesSourceName {
	return v.Names
}

// AllSourceTreeNamespacesSourceNamespaceNamesSourceName includes the requested fields of the GraphQL type SourceName.
// The GraphQL type's documentation follows.
//
// SourceName represents the url of the repository.
//
// The name field is mandatory. The tag and commit fields are optional, but it is
// an error to specify both.
//
// This is the only source trie node that can be referenced by other parts of GUAC.
type AllSourceTreeNamespacesSourceNamespaceNamesSourceName struct {
	Id     string  `json:"id"`
	Name   string  `json:"name"`
	Tag    *string `json:"tag"`
	Commit *string `json:"commit"`
}

// GetId returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Id, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetId() string { return v.Id }

// GetName returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Name, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetName() string { return v.Name }

// GetTag returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Tag, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetTag() *string { return v.Tag }

// GetCommit returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Commit, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetCommit() *string { return v.Commit }

// ArtifactInputSpec specifies an artifact for mutations.
//
// The checksum fields are canonicalized to be lowercase.
type ArtifactInputSpec struct {
	Algorithm string `json:"algorithm"`
	Digest    string `json:"digest"`
}

// GetAlgorithm returns ArtifactInputSpec.Algorithm, and is useful for accessing the field via an interface.
func (v *ArtifactInputSpec) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns ArtifactInputSpec.Digest, and is useful for accessing the field via an interface.
func (v *ArtifactInputSpec) GetDigest() string { return v.Digest }

// ArtifactSpec allows filtering the list of artifacts to return in a query.
//
// The checksum fields are canonicalized to be lowercase.
type ArtifactSpec struct {
	Id        *string `json:"id"`
	Algorithm *string `json:"algorithm"`
	Digest    *string `json:"digest"`
}

// GetId returns ArtifactSpec.Id, and is useful for accessing the field via an interface.
func (v *ArtifactSpec) GetId() *string { return v.Id }

// GetAlgorithm returns ArtifactSpec.Algorithm, and is useful for accessing the field via an interface.
func (v *ArtifactSpec) GetAlgorithm() *string { return v.Algorithm }

// GetDigest returns ArtifactSpec.Digest, and is useful for accessing the field via an interface.
func (v *ArtifactSpec) GetDigest() *string { return v.Digest }

// ArtifactsArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type ArtifactsArtifactsArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns ArtifactsArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *ArtifactsArtifactsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns ArtifactsArtifactsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *ArtifactsArtifactsArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns ArtifactsArtifactsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *ArtifactsArtifactsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *ArtifactsArtifactsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ArtifactsArtifactsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.ArtifactsArtifactsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalArtifactsArtifactsArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *ArtifactsArtifactsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ArtifactsArtifactsArtifact) __premarshalJSON() (*__premarshalArtifactsArtifactsArtifact, error) {
	var retval __premarshalArtifactsArtifactsArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// ArtifactsResponse is returned by Artifacts on success.
type ArtifactsResponse struct {
	// Returns all artifacts matching a filter.
	Artifacts []ArtifactsArtifactsArtifact `json:"artifacts"`
}

// GetArtifacts returns ArtifactsResponse.Artifacts, and is useful for accessing the field via an interface.
func (v *ArtifactsResponse) GetArtifacts() []ArtifactsArtifactsArtifact { return v.Artifacts }

// BuilderInputSpec specifies a builder for mutations.
type BuilderInputSpec struct {
	Uri string `json:"uri"`
}

// GetUri returns BuilderInputSpec.Uri, and is useful for accessing the field via an interface.
func (v *BuilderInputSpec) GetUri() string { return v.Uri }

// CVEInputSpec specifies a CVE vulnerability for mutations.
type CVEInputSpec struct {
	Year  int    `json:"year"`
	CveId string `json:"cveId"`
}

// GetYear returns CVEInputSpec.Year, and is useful for accessing the field via an interface.
func (v *CVEInputSpec) GetYear() int { return v.Year }

// GetCveId returns CVEInputSpec.CveId, and is useful for accessing the field via an interface.
func (v *CVEInputSpec) GetCveId() string { return v.CveId }

// CVESpec allows filtering the list of advisories to return in a query.
type CVESpec struct {
	Id    *string `json:"id"`
	Year  *int    `json:"year"`
	CveId *string `json:"cveId"`
}

// GetId returns CVESpec.Id, and is useful for accessing the field via an interface.
func (v *CVESpec) GetId() *string { return v.Id }

// GetYear returns CVESpec.Year, and is useful for accessing the field via an interface.
func (v *CVESpec) GetYear() *int { return v.Year }

// GetCveId returns CVESpec.CveId, and is useful for accessing the field via an interface.
func (v *CVESpec) GetCveId() *string { return v.CveId }

// CVEsCveCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type CVEsCveCVE struct {
	AllCveTree `json:"-"`
}

// GetId returns CVEsCveCVE.Id, and is useful for accessing the field via an interface.
func (v *CVEsCveCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns CVEsCveCVE.Year, and is useful for accessing the field via an interface.
func (v *CVEsCveCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns CVEsCveCVE.CveId, and is useful for accessing the field via an interface.
func (v *CVEsCveCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *CVEsCveCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CVEsCveCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.CVEsCveCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCVEsCveCVE struct {
	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *CVEsCveCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CVEsCveCVE) __premarshalJSON() (*__premarshalCVEsCveCVE, error) {
	var retval __premarshalCVEsCveCVE

	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// CVEsResponse is returned by CVEs on success.
type CVEsResponse struct {
	// Returns all CVEs matching a filter.
	Cve []CVEsCveCVE `json:"cve"`
}

// GetCve returns CVEsResponse.Cve, and is useful for accessing the field via an interface.
func (v *CVEsResponse) GetCve() []CVEsCveCVE { return v.Cve }

// CertifyBadArtifactIngestCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyBadArtifactIngestCertifyBad struct {
	AllCertifyBad `json:"-"`
}

// GetId returns CertifyBadArtifactIngestCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns CertifyBadArtifactIngestCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestCertifyBad) GetJustification() string {
	return v.AllCertifyBad.Justification
}

// GetSubject returns CertifyBadArtifactIngestCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns CertifyBadArtifactIngestCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns CertifyBadArtifactIngestCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *CertifyBadArtifactIngestCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadArtifactIngestCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadArtifactIngestCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadArtifactIngestCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyBadArtifactIngestCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadArtifactIngestCertifyBad) __premarshalJSON() (*__premarshalCertifyBadArtifactIngestCertifyBad, error) {
	var retval __premarshalCertifyBadArtifactIngestCertifyBad

	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyBadArtifactIngestCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// CertifyBadArtifactResponse is returned by CertifyBadArtifact on success.
type CertifyBadArtifactResponse struct {
	// Adds a certification that a package, source or artifact is considered bad.
	IngestCertifyBad CertifyBadArtifactIngestCertifyBad `json:"ingestCertifyBad"`
}

// GetIngestCertifyBad returns CertifyBadArtifactResponse.IngestCertifyBad, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactResponse) GetIngestCertifyBad() CertifyBadArtifactIngestCertifyBad {
	return v.IngestCertifyBad
}

// CertifyBadInputSpec represents the mutation input to ingest a CertifyBad
// evidence.
type CertifyBadInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns CertifyBadInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns CertifyBadInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns CertifyBadInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetCollector() string { return v.Collector }

// CertifyBadPkgIngestCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyBadPkgIngestCertifyBad struct {
	AllCertifyBad `json:"-"`
}

// GetId returns CertifyBadPkgIngestCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns CertifyBadPkgIngestCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestCertifyBad) GetJustification() string {
	return v.AllCertifyBad.Justification
}

// GetSubject returns CertifyBadPkgIngestCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns CertifyBadPkgIngestCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns CertifyBadPkgIngestCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *CertifyBadPkgIngestCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadPkgIngestCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadPkgIngestCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadPkgIngestCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyBadPkgIngestCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadPkgIngestCertifyBad) __premarshalJSON() (*__premarshalCertifyBadPkgIngestCertifyBad, error) {
	var retval __premarshalCertifyBadPkgIngestCertifyBad

	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyBadPkgIngestCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// CertifyBadPkgResponse is returned by CertifyBadPkg on success.
type CertifyBadPkgResponse struct {
	// Adds a certification that a package, source or artifact is considered bad.
	IngestCertifyBad CertifyBadPkgIngestCertifyBad `json:"ingestCertifyBad"`
}

// GetIngestCertifyBad returns CertifyBadPkgResponse.IngestCertifyBad, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgResponse) GetIngestCertifyBad() CertifyBadPkgIngestCertifyBad {
	return v.IngestCertifyBad
}

// CertifyBadSpec allows filtering the list of CertifyBad evidence to return in a
// query.
//
// If a package is specified in the subject filter, then it must be specified up
// to PackageName or PackageVersion. That is, user must specify package name, or
// name and one of version, qualifiers, or subpath.
//
// If a source is specified in the subject filter, then it must specify a name,
// and optionally a tag and a commit.
type CertifyBadSpec struct {
	Id            *string                      `json:"id"`
	Subject       *PackageSourceOrArtifactSpec `json:"subject"`
	Justification *string                      `json:"justification"`
	Origin        *string                      `json:"origin"`
	Collector     *string                      `json:"collector"`
}

// GetId returns CertifyBadSpec.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetId() *string { return v.Id }

// GetSubject returns CertifyBadSpec.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetSubject() *PackageSourceOrArtifactSpec { return v.Subject }

// GetJustification returns CertifyBadSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetJustification() *string { return v.Justification }

// GetOrigin returns CertifyBadSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns CertifyBadSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetCollector() *string { return v.Collector }

// CertifyBadSrcIngestCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyBadSrcIngestCertifyBad struct {
	AllCertifyBad `json:"-"`
}

// GetId returns CertifyBadSrcIngestCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns CertifyBadSrcIngestCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestCertifyBad) GetJustification() string {
	return v.AllCertifyBad.Justification
}

// GetSubject returns CertifyBadSrcIngestCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns CertifyBadSrcIngestCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns CertifyBadSrcIngestCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *CertifyBadSrcIngestCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadSrcIngestCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadSrcIngestCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadSrcIngestCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyBadSrcIngestCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadSrcIngestCertifyBad) __premarshalJSON() (*__premarshalCertifyBadSrcIngestCertifyBad, error) {
	var retval __premarshalCertifyBadSrcIngestCertifyBad

	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyBadSrcIngestCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// CertifyBadSrcResponse is returned by CertifyBadSrc on success.
type CertifyBadSrcResponse struct {
	// Adds a certification that a package, source or artifact is considered bad.
	IngestCertifyBad CertifyBadSrcIngestCertifyBad `json:"ingestCertifyBad"`
}

// GetIngestCertifyBad returns CertifyBadSrcResponse.IngestCertifyBad, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcResponse) GetIngestCertifyBad() CertifyBadSrcIngestCertifyBad {
	return v.IngestCertifyBad
}

// CertifyBadsCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyBadsCertifyBad struct {
	AllCertifyBad `json:"-"`
}

// GetId returns CertifyBadsCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadsCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns CertifyBadsCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadsCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetSubject returns CertifyBadsCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadsCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns CertifyBadsCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadsCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns CertifyBadsCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadsCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *CertifyBadsCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadsCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadsCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadsCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyBadsCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadsCertifyBad) __premarshalJSON() (*__premarshalCertifyBadsCertifyBad, error) {
	var retval __premarshalCertifyBadsCertifyBad

	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyBadsCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// CertifyBadsResponse is returned by CertifyBads on success.
type CertifyBadsResponse struct {
	// Returns all CertifyBad attestations matching a filter.
	CertifyBad []CertifyBadsCertifyBad `json:"CertifyBad"`
}

// GetCertifyBad returns CertifyBadsResponse.CertifyBad, and is useful for accessing the field via an interface.
func (v *CertifyBadsResponse) GetCertifyBad() []CertifyBadsCertifyBad { return v.CertifyBad }

// CertifyCVEIngestVulnerabilityCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type CertifyCVEIngestVulnerabilityCertifyVuln struct {
	AllCertifyVuln `json:"-"`
}

// GetId returns CertifyCVEIngestVulnerabilityCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestVulnerabilityCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns CertifyCVEIngestVulnerabilityCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestVulnerabilityCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns CertifyCVEIngestVulnerabilityCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestVulnerabilityCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns CertifyCVEIngestVulnerabilityCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestVulnerabilityCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *CertifyCVEIngestVulnerabilityCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyCVEIngestVulnerabilityCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyCVEIngestVulnerabilityCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyCVEIngestVulnerabilityCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *CertifyCVEIngestVulnerabilityCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyCVEIngestVulnerabilityCertifyVuln) __premarshalJSON() (*__premarshalCertifyCVEIngestVulnerabilityCertifyVuln, error) {
	var retval __premarshalCertifyCVEIngestVulnerabilityCertifyVuln

	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyCVEIngestVulnerabilityCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// CertifyCVEResponse is returned by CertifyCVE on success.
type CertifyCVEResponse struct {
	// Adds a certification that a package has been scanned for vulnerabilities.
	IngestVulnerability CertifyCVEIngestVulnerabilityCertifyVuln `json:"ingestVulnerability"`
}

// GetIngestVulnerability returns CertifyCVEResponse.IngestVulnerability, and is useful for accessing the field via an interface.
func (v *CertifyCVEResponse) GetIngestVulnerability() CertifyCVEIngestVulnerabilityCertifyVuln {
	return v.IngestVulnerability
}

// CertifyGHSAIngestVulnerabilityCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type CertifyGHSAIngestVulnerabilityCertifyVuln struct {
	AllCertifyVuln `json:"-"`
}

// GetId returns CertifyGHSAIngestVulnerabilityCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns CertifyGHSAIngestVulnerabilityCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns CertifyGHSAIngestVulnerabilityCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns CertifyGHSAIngestVulnerabilityCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGHSAIngestVulnerabilityCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGHSAIngestVulnerabilityCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGHSAIngestVulnerabilityCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) __premarshalJSON() (*__premarshalCertifyGHSAIngestVulnerabilityCertifyVuln, error) {
	var retval __premarshalCertifyGHSAIngestVulnerabilityCertifyVuln

	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyGHSAIngestVulnerabilityCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// CertifyGHSAResponse is returned by CertifyGHSA on success.
type CertifyGHSAResponse struct {
	// Adds a certification that a package has been scanned for vulnerabilities.
	IngestVulnerability CertifyGHSAIngestVulnerabilityCertifyVuln `json:"ingestVulnerability"`
}

// GetIngestVulnerability returns CertifyGHSAResponse.IngestVulnerability, and is useful for accessing the field via an interface.
func (v *CertifyGHSAResponse) GetIngestVulnerability() CertifyGHSAIngestVulnerabilityCertifyVuln {
	return v.IngestVulnerability
}

// CertifyGoodArtifactIngestCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyGoodArtifactIngestCertifyGood struct {
	AllCertifyGood `json:"-"`
}

// GetId returns CertifyGoodArtifactIngestCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns CertifyGoodArtifactIngestCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestCertifyGood) GetJustification() string {
	return v.AllCertifyGood.Justification
}

// GetSubject returns CertifyGoodArtifactIngestCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns CertifyGoodArtifactIngestCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns CertifyGoodArtifactIngestCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestCertifyGood) GetCollector() string {
	return v.AllCertifyGood.Collector
}

func (v *CertifyGoodArtifactIngestCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodArtifactIngestCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodArtifactIngestCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodArtifactIngestCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyGoodArtifactIngestCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodArtifactIngestCertifyGood) __premarshalJSON() (*__premarshalCertifyGoodArtifactIngestCertifyGood, error) {
	var retval __premarshalCertifyGoodArtifactIngestCertifyGood

	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyGoodArtifactIngestCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// CertifyGoodArtifactResponse is returned by CertifyGoodArtifact on success.
type CertifyGoodArtifactResponse struct {
	// Adds a certification that a package, source or artifact is considered good.
	IngestCertifyGood CertifyGoodArtifactIngestCertifyGood `json:"ingestCertifyGood"`
}

// GetIngestCertifyGood returns CertifyGoodArtifactResponse.IngestCertifyGood, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactResponse) GetIngestCertifyGood() CertifyGoodArtifactIngestCertifyGood {
	return v.IngestCertifyGood
}

// CertifyGoodInputSpec represents the mutation input to ingest a CertifyGood evidence.
type CertifyGoodInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns CertifyGoodInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns CertifyGoodInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns CertifyGoodInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetCollector() string { return v.Collector }

// CertifyGoodPkgIngestCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyGoodPkgIngestCertifyGood struct {
	AllCertifyGood `json:"-"`
}

// GetId returns CertifyGoodPkgIngestCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns CertifyGoodPkgIngestCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestCertifyGood) GetJustification() string {
	return v.AllCertifyGood.Justification
}

// GetSubject returns CertifyGoodPkgIngestCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns CertifyGoodPkgIngestCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns CertifyGoodPkgIngestCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *CertifyGoodPkgIngestCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodPkgIngestCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodPkgIngestCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodPkgIngestCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyGoodPkgIngestCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodPkgIngestCertifyGood) __premarshalJSON() (*__premarshalCertifyGoodPkgIngestCertifyGood, error) {
	var retval __premarshalCertifyGoodPkgIngestCertifyGood

	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyGoodPkgIngestCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// CertifyGoodPkgResponse is returned by CertifyGoodPkg on success.
type CertifyGoodPkgResponse struct {
	// Adds a certification that a package, source or artifact is considered good.
	IngestCertifyGood CertifyGoodPkgIngestCertifyGood `json:"ingestCertifyGood"`
}

// GetIngestCertifyGood returns CertifyGoodPkgResponse.IngestCertifyGood, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgResponse) GetIngestCertifyGood() CertifyGoodPkgIngestCertifyGood {
	return v.IngestCertifyGood
}

// CertifyGoodSrcIngestCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyGoodSrcIngestCertifyGood struct {
	AllCertifyGood `json:"-"`
}

// GetId returns CertifyGoodSrcIngestCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns CertifyGoodSrcIngestCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestCertifyGood) GetJustification() string {
	return v.AllCertifyGood.Justification
}

// GetSubject returns CertifyGoodSrcIngestCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns CertifyGoodSrcIngestCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns CertifyGoodSrcIngestCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *CertifyGoodSrcIngestCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodSrcIngestCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodSrcIngestCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodSrcIngestCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyGoodSrcIngestCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodSrcIngestCertifyGood) __premarshalJSON() (*__premarshalCertifyGoodSrcIngestCertifyGood, error) {
	var retval __premarshalCertifyGoodSrcIngestCertifyGood

	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyGoodSrcIngestCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// CertifyGoodSrcResponse is returned by CertifyGoodSrc on success.
type CertifyGoodSrcResponse struct {
	// Adds a certification that a package, source or artifact is considered good.
	IngestCertifyGood CertifyGoodSrcIngestCertifyGood `json:"ingestCertifyGood"`
}

// GetIngestCertifyGood returns CertifyGoodSrcResponse.IngestCertifyGood, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcResponse) GetIngestCertifyGood() CertifyGoodSrcIngestCertifyGood {
	return v.IngestCertifyGood
}

// CertifyNoKnownVulnIngestVulnerabilityCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type CertifyNoKnownVulnIngestVulnerabilityCertifyVuln struct {
	AllCertifyVuln `json:"-"`
}

// GetId returns CertifyNoKnownVulnIngestVulnerabilityCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns CertifyNoKnownVulnIngestVulnerabilityCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns CertifyNoKnownVulnIngestVulnerabilityCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns CertifyNoKnownVulnIngestVulnerabilityCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyNoKnownVulnIngestVulnerabilityCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyNoKnownVulnIngestVulnerabilityCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyNoKnownVulnIngestVulnerabilityCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) __premarshalJSON() (*__premarshalCertifyNoKnownVulnIngestVulnerabilityCertifyVuln, error) {
	var retval __premarshalCertifyNoKnownVulnIngestVulnerabilityCertifyVuln

	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyNoKnownVulnIngestVulnerabilityCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// CertifyNoKnownVulnResponse is returned by CertifyNoKnownVuln on success.
type CertifyNoKnownVulnResponse struct {
	// Adds a certification that a package has been scanned for vulnerabilities.
	IngestVulnerability CertifyNoKnownVulnIngestVulnerabilityCertifyVuln `json:"ingestVulnerability"`
}

// GetIngestVulnerability returns CertifyNoKnownVulnResponse.IngestVulnerability, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnResponse) GetIngestVulnerability() CertifyNoKnownVulnIngestVulnerabilityCertifyVuln {
	return v.IngestVulnerability
}

// CertifyOSVIngestVulnerabilityCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type CertifyOSVIngestVulnerabilityCertifyVuln struct {
	AllCertifyVuln `json:"-"`
}

// GetId returns CertifyOSVIngestVulnerabilityCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestVulnerabilityCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns CertifyOSVIngestVulnerabilityCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestVulnerabilityCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns CertifyOSVIngestVulnerabilityCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestVulnerabilityCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns CertifyOSVIngestVulnerabilityCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestVulnerabilityCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *CertifyOSVIngestVulnerabilityCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyOSVIngestVulnerabilityCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyOSVIngestVulnerabilityCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyOSVIngestVulnerabilityCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *CertifyOSVIngestVulnerabilityCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyOSVIngestVulnerabilityCertifyVuln) __premarshalJSON() (*__premarshalCertifyOSVIngestVulnerabilityCertifyVuln, error) {
	var retval __premarshalCertifyOSVIngestVulnerabilityCertifyVuln

	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyOSVIngestVulnerabilityCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// CertifyOSVResponse is returned by CertifyOSV on success.
type CertifyOSVResponse struct {
	// Adds a certification that a package has been scanned for vulnerabilities.
	IngestVulnerability CertifyOSVIngestVulnerabilityCertifyVuln `json:"ingestVulnerability"`
}

// GetIngestVulnerability returns CertifyOSVResponse.IngestVulnerability, and is useful for accessing the field via an interface.
func (v *CertifyOSVResponse) GetIngestVulnerability() CertifyOSVIngestVulnerabilityCertifyVuln {
	return v.IngestVulnerability
}

// CertifyScorecardIngestScorecardCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type CertifyScorecardIngestScorecardCertifyScorecard struct {
	AllCertifyScorecard `json:"-"`
}

// GetId returns CertifyScorecardIngestScorecardCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *CertifyScorecardIngestScorecardCertifyScorecard) GetId() string {
	return v.AllCertifyScorecard.Id
}

// GetSource returns CertifyScorecardIngestScorecardCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *CertifyScorecardIngestScorecardCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns CertifyScorecardIngestScorecardCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *CertifyScorecardIngestScorecardCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *CertifyScorecardIngestScorecardCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyScorecardIngestScorecardCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyScorecardIngestScorecardCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyScorecardIngestScorecardCertifyScorecard struct {
	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *CertifyScorecardIngestScorecardCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyScorecardIngestScorecardCertifyScorecard) __premarshalJSON() (*__premarshalCertifyScorecardIngestScorecardCertifyScorecard, error) {
	var retval __premarshalCertifyScorecardIngestScorecardCertifyScorecard

	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// CertifyScorecardResponse is returned by CertifyScorecard on success.
type CertifyScorecardResponse struct {
	// Adds a certification that a source repository has a Scorecard.
	IngestScorecard CertifyScorecardIngestScorecardCertifyScorecard `json:"ingestScorecard"`
}

// GetIngestScorecard returns CertifyScorecardResponse.IngestScorecard, and is useful for accessing the field via an interface.
func (v *CertifyScorecardResponse) GetIngestScorecard() CertifyScorecardIngestScorecardCertifyScorecard {
	return v.IngestScorecard
}

// CertifyScorecardsIngestScorecardsCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type CertifyScorecardsIngestScorecardsCertifyScorecard struct {
	AllCertifyScorecard `json:"-"`
}

// GetId returns CertifyScorecardsIngestScorecardsCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *CertifyScorecardsIngestScorecardsCertifyScorecard) GetId() string {
	return v.AllCertifyScorecard.Id
}

// GetSource returns CertifyScorecardsIngestScorecardsCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *CertifyScorecardsIngestScorecardsCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns CertifyScorecardsIngestScorecardsCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *CertifyScorecardsIngestScorecardsCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *CertifyScorecardsIngestScorecardsCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyScorecardsIngestScorecardsCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyScorecardsIngestScorecardsCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyScorecardsIngestScorecardsCertifyScorecard struct {
	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *CertifyScorecardsIngestScorecardsCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyScorecardsIngestScorecardsCertifyScorecard) __premarshalJSON() (*__premarshalCertifyScorecardsIngestScorecardsCertifyScorecard, error) {
	var retval __premarshalCertifyScorecardsIngestScorecardsCertifyScorecard

	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// CertifyScorecardsResponse is returned by CertifyScorecards on success.
type CertifyScorecardsResponse struct {
	// Adds bulk certifications that a source repository has a Scorecard.
	IngestScorecards []CertifyScorecardsIngestScorecardsCertifyScorecard `json:"ingestScorecards"`
}

// GetIngestScorecards returns CertifyScorecardsResponse.IngestScorecards, and is useful for accessing the field via an interface.
func (v *CertifyScorecardsResponse) GetIngestScorecards() []CertifyScorecardsIngestScorecardsCertifyScorecard {
	return v.IngestScorecards
}

// DependencyType determines the type of the dependency.
type DependencyType string

const (
	// direct dependency
	DependencyTypeDirect DependencyType = "DIRECT"
	// indirect dependency
	DependencyTypeIndirect DependencyType = "INDIRECT"
	// type not known/not specified
	DependencyTypeUnknown DependencyType = "UNKNOWN"
)

// Edge allows filtering path/neighbors output to only contain a subset of all
// possible GUAC links.
//
// Each member of the enum is formed by merging two Node names with _. Each name
// is converted from CamelCase to CAPITALS_WITH_UNDERSCORES. Only valid edges
// (pairs from Node to Node) are included.
//
// The only exception to the above rule is for links out of HasSLSA. The names are
// HAS_SLSA_SUBJECT, HAS_SLSA_BUILT_BY, and HAS_SLSA_MATERIALS. This is because
// ARTIFACT_HAS_SLSA is only from subject Artifact to HasSLSA.
type Edge string

const (
	EdgeArtifactCertifyBad          Edge = "ARTIFACT_CERTIFY_BAD"
	EdgeArtifactCertifyGood         Edge = "ARTIFACT_CERTIFY_GOOD"
	EdgeArtifactCertifyVexStatement Edge = "ARTIFACT_CERTIFY_VEX_STATEMENT"
	EdgeArtifactHashEqual           Edge = "ARTIFACT_HASH_EQUAL"
	EdgeArtifactHasSbom             Edge = "ARTIFACT_HAS_SBOM"
	EdgeArtifactHasSlsa             Edge = "ARTIFACT_HAS_SLSA"
	EdgeArtifactIsOccurrence        Edge = "ARTIFACT_IS_OCCURRENCE"
	EdgeArtifactHasMetadata         Edge = "ARTIFACT_HAS_METADATA"
	EdgeArtifactPointOfContact      Edge = "ARTIFACT_POINT_OF_CONTACT"
	EdgeBuilderHasSlsa              Edge = "BUILDER_HAS_SLSA"
	EdgeCveCertifyVexStatement      Edge = "CVE_CERTIFY_VEX_STATEMENT"
	EdgeCveCertifyVuln              Edge = "CVE_CERTIFY_VULN"
	EdgeCveIsVulnerability          Edge = "CVE_IS_VULNERABILITY"
	EdgeGhsaCertifyVexStatement     Edge = "GHSA_CERTIFY_VEX_STATEMENT"
	EdgeGhsaCertifyVuln             Edge = "GHSA_CERTIFY_VULN"
	EdgeGhsaIsVulnerability         Edge = "GHSA_IS_VULNERABILITY"
	EdgeNoVulnCertifyVuln           Edge = "NO_VULN_CERTIFY_VULN"
	EdgeOsvCertifyVexStatement      Edge = "OSV_CERTIFY_VEX_STATEMENT"
	EdgeOsvCertifyVuln              Edge = "OSV_CERTIFY_VULN"
	EdgeOsvIsVulnerability          Edge = "OSV_IS_VULNERABILITY"
	EdgePackageCertifyBad           Edge = "PACKAGE_CERTIFY_BAD"
	EdgePackageCertifyGood          Edge = "PACKAGE_CERTIFY_GOOD"
	EdgePackageCertifyVexStatement  Edge = "PACKAGE_CERTIFY_VEX_STATEMENT"
	EdgePackageCertifyVuln          Edge = "PACKAGE_CERTIFY_VULN"
	EdgePackageHasSbom              Edge = "PACKAGE_HAS_SBOM"
	EdgePackageHasSourceAt          Edge = "PACKAGE_HAS_SOURCE_AT"
	EdgePackageIsDependency         Edge = "PACKAGE_IS_DEPENDENCY"
	EdgePackageIsOccurrence         Edge = "PACKAGE_IS_OCCURRENCE"
	EdgePackagePkgEqual             Edge = "PACKAGE_PKG_EQUAL"
	EdgePackageHasMetadata          Edge = "PACKAGE_HAS_METADATA"
	EdgePackagePointOfContact       Edge = "PACKAGE_POINT_OF_CONTACT"
	EdgeSourceCertifyBad            Edge = "SOURCE_CERTIFY_BAD"
	EdgeSourceCertifyGood           Edge = "SOURCE_CERTIFY_GOOD"
	EdgeSourceCertifyScorecard      Edge = "SOURCE_CERTIFY_SCORECARD"
	EdgeSourceHasSourceAt           Edge = "SOURCE_HAS_SOURCE_AT"
	EdgeSourceIsOccurrence          Edge = "SOURCE_IS_OCCURRENCE"
	EdgeSourceHasMetadata           Edge = "SOURCE_HAS_METADATA"
	EdgeSourcePointOfContact        Edge = "SOURCE_POINT_OF_CONTACT"
	EdgeCertifyBadArtifact          Edge = "CERTIFY_BAD_ARTIFACT"
	EdgeCertifyBadPackage           Edge = "CERTIFY_BAD_PACKAGE"
	EdgeCertifyBadSource            Edge = "CERTIFY_BAD_SOURCE"
	EdgeCertifyGoodArtifact         Edge = "CERTIFY_GOOD_ARTIFACT"
	EdgeCertifyGoodPackage          Edge = "CERTIFY_GOOD_PACKAGE"
	EdgeCertifyGoodSource           Edge = "CERTIFY_GOOD_SOURCE"
	EdgeCertifyScorecardSource      Edge = "CERTIFY_SCORECARD_SOURCE"
	EdgeCertifyVexStatementArtifact Edge = "CERTIFY_VEX_STATEMENT_ARTIFACT"
	EdgeCertifyVexStatementCve      Edge = "CERTIFY_VEX_STATEMENT_CVE"
	EdgeCertifyVexStatementGhsa     Edge = "CERTIFY_VEX_STATEMENT_GHSA"
	EdgeCertifyVexStatementOsv      Edge = "CERTIFY_VEX_STATEMENT_OSV"
	EdgeCertifyVexStatementPackage  Edge = "CERTIFY_VEX_STATEMENT_PACKAGE"
	EdgeCertifyVulnCve              Edge = "CERTIFY_VULN_CVE"
	EdgeCertifyVulnGhsa             Edge = "CERTIFY_VULN_GHSA"
	EdgeCertifyVulnNoVuln           Edge = "CERTIFY_VULN_NO_VULN"
	EdgeCertifyVulnOsv              Edge = "CERTIFY_VULN_OSV"
	EdgeCertifyVulnPackage          Edge = "CERTIFY_VULN_PACKAGE"
	EdgeHashEqualArtifact           Edge = "HASH_EQUAL_ARTIFACT"
	EdgeHasSbomArtifact             Edge = "HAS_SBOM_ARTIFACT"
	EdgeHasSbomPackage              Edge = "HAS_SBOM_PACKAGE"
	EdgeHasSlsaBuiltBy              Edge = "HAS_SLSA_BUILT_BY"
	EdgeHasSlsaMaterials            Edge = "HAS_SLSA_MATERIALS"
	EdgeHasSlsaSubject              Edge = "HAS_SLSA_SUBJECT"
	EdgeHasSourceAtPackage          Edge = "HAS_SOURCE_AT_PACKAGE"
	EdgeHasSourceAtSource           Edge = "HAS_SOURCE_AT_SOURCE"
	EdgeIsDependencyPackage         Edge = "IS_DEPENDENCY_PACKAGE"
	EdgeIsOccurrenceArtifact        Edge = "IS_OCCURRENCE_ARTIFACT"
	EdgeIsOccurrencePackage         Edge = "IS_OCCURRENCE_PACKAGE"
	EdgeIsOccurrenceSource          Edge = "IS_OCCURRENCE_SOURCE"
	EdgeIsVulnerabilityCve          Edge = "IS_VULNERABILITY_CVE"
	EdgeIsVulnerabilityGhsa         Edge = "IS_VULNERABILITY_GHSA"
	EdgeIsVulnerabilityOsv          Edge = "IS_VULNERABILITY_OSV"
	EdgePkgEqualPackage             Edge = "PKG_EQUAL_PACKAGE"
	EdgeHasMetadataPackage          Edge = "HAS_METADATA_PACKAGE"
	EdgeHasMetadataArtifact         Edge = "HAS_METADATA_ARTIFACT"
	EdgeHasMetadataSource           Edge = "HAS_METADATA_SOURCE"
	EdgePointOfContactPackage       Edge = "POINT_OF_CONTACT_PACKAGE"
	EdgePointOfContactArtifact      Edge = "POINT_OF_CONTACT_ARTIFACT"
	EdgePointOfContactSource        Edge = "POINT_OF_CONTACT_SOURCE"
)

// FindSoftwareFindSoftwareArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type FindSoftwareFindSoftwareArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns FindSoftwareFindSoftwareArtifact.Typename, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareArtifact) GetTypename() *string { return v.Typename }

// GetId returns FindSoftwareFindSoftwareArtifact.Id, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns FindSoftwareFindSoftwareArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns FindSoftwareFindSoftwareArtifact.Digest, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *FindSoftwareFindSoftwareArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSoftwareFindSoftwareArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSoftwareFindSoftwareArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindSoftwareFindSoftwareArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *FindSoftwareFindSoftwareArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSoftwareFindSoftwareArtifact) __premarshalJSON() (*__premarshalFindSoftwareFindSoftwareArtifact, error) {
	var retval __premarshalFindSoftwareFindSoftwareArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// FindSoftwareFindSoftwarePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type FindSoftwareFindSoftwarePackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns FindSoftwareFindSoftwarePackage.Typename, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwarePackage) GetTypename() *string { return v.Typename }

// GetId returns FindSoftwareFindSoftwarePackage.Id, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwarePackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns FindSoftwareFindSoftwarePackage.Type, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwarePackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns FindSoftwareFindSoftwarePackage.Namespaces, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwarePackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *FindSoftwareFindSoftwarePackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSoftwareFindSoftwarePackage
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSoftwareFindSoftwarePackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindSoftwareFindSoftwarePackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *FindSoftwareFindSoftwarePackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSoftwareFindSoftwarePackage) __premarshalJSON() (*__premarshalFindSoftwareFindSoftwarePackage, error) {
	var retval __premarshalFindSoftwareFindSoftwarePackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// FindSoftwareFindSoftwarePackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// FindSoftwareFindSoftwarePackageSourceOrArtifact is implemented by the following types:
// FindSoftwareFindSoftwareArtifact
// FindSoftwareFindSoftwarePackage
// FindSoftwareFindSoftwareSource
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type FindSoftwareFindSoftwarePackageSourceOrArtifact interface {
	implementsGraphQLInterfaceFindSoftwareFindSoftwarePackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *FindSoftwareFindSoftwareArtifact) implementsGraphQLInterfaceFindSoftwareFindSoftwarePackageSourceOrArtifact() {
}
func (v *FindSoftwareFindSoftwarePackage) implementsGraphQLInterfaceFindSoftwareFindSoftwarePackageSourceOrArtifact() {
}
func (v *FindSoftwareFindSoftwareSource) implementsGraphQLInterfaceFindSoftwareFindSoftwarePackageSourceOrArtifact() {
}

func __unmarshalFindSoftwareFindSoftwarePackageSourceOrArtifact(b []byte, v *FindSoftwareFindSoftwarePackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(FindSoftwareFindSoftwareArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(FindSoftwareFindSoftwarePackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(FindSoftwareFindSoftwareSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for FindSoftwareFindSoftwarePackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalFindSoftwareFindSoftwarePackageSourceOrArtifact(v *FindSoftwareFindSoftwarePackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *FindSoftwareFindSoftwareArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalFindSoftwareFindSoftwareArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *FindSoftwareFindSoftwarePackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalFindSoftwareFindSoftwarePackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *FindSoftwareFindSoftwareSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalFindSoftwareFindSoftwareSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for FindSoftwareFindSoftwarePackageSourceOrArtifact: "%T"`, v)
	}
}

// FindSoftwareFindSoftwareSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type FindSoftwareFindSoftwareSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns FindSoftwareFindSoftwareSource.Typename, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareSource) GetTypename() *string { return v.Typename }

// GetId returns FindSoftwareFindSoftwareSource.Id, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns FindSoftwareFindSoftwareSource.Type, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns FindSoftwareFindSoftwareSource.Namespaces, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *FindSoftwareFindSoftwareSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSoftwareFindSoftwareSource
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSoftwareFindSoftwareSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindSoftwareFindSoftwareSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *FindSoftwareFindSoftwareSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSoftwareFindSoftwareSource) __premarshalJSON() (*__premarshalFindSoftwareFindSoftwareSource, error) {
	var retval __premarshalFindSoftwareFindSoftwareSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// FindSoftwareResponse is returned by FindSoftware on success.
type FindSoftwareResponse struct {
	// findSoftware takes in a searchText string and looks for software
	// that may be relevant for the input text. This can be seen as fuzzy search
	// function for Packages, Sources and Artifacts. findSoftware returns a list
	// of Packages, Sources and Artifacts that it determines to be relevant to
	// the input searchText.
	//
	// Due to the nature of full text search being implemented differently on
	// different db platforms, the behavior of findSoftware is not guaranteed
	// to be the same. In addition, their statistical nature may result in
	// results being different per call and not reproducible.
	//
	// All that is asked in the implementation of this API is that it follows
	// the spirit of helping to retrieve the right nodes with best effort.
	//
	// Warning: This is an EXPERIMENTAL feature. This is subject to change.
	// Warning: This is an OPTIONAL feature. Backends are not required to
	// implement this API.
	FindSoftware []FindSoftwareFindSoftwarePackageSourceOrArtifact `json:"-"`
}

// GetFindSoftware returns FindSoftwareResponse.FindSoftware, and is useful for accessing the field via an interface.
func (v *FindSoftwareResponse) GetFindSoftware() []FindSoftwareFindSoftwarePackageSourceOrArtifact {
	return v.FindSoftware
}

func (v *FindSoftwareResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSoftwareResponse
		FindSoftware []json.RawMessage `json:"findSoftware"`
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSoftwareResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.FindSoftware
		src := firstPass.FindSoftware
		*dst = make(
			[]FindSoftwareFindSoftwarePackageSourceOrArtifact,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalFindSoftwareFindSoftwarePackageSourceOrArtifact(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal FindSoftwareResponse.FindSoftware: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalFindSoftwareResponse struct {
	FindSoftware []json.RawMessage `json:"findSoftware"`
}

func (v *FindSoftwareResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSoftwareResponse) __premarshalJSON() (*__premarshalFindSoftwareResponse, error) {
	var retval __premarshalFindSoftwareResponse

	{

		dst := &retval.FindSoftware
		src := v.FindSoftware
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalFindSoftwareFindSoftwarePackageSourceOrArtifact(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal FindSoftwareResponse.FindSoftware: %w", err)
			}
		}
	}
	return &retval, nil
}

// GHSAInputSpec specifies a GitHub Security Advisory for mutations.
type GHSAInputSpec struct {
	GhsaId string `json:"ghsaId"`
}

// GetGhsaId returns GHSAInputSpec.GhsaId, and is useful for accessing the field via an interface.
func (v *GHSAInputSpec) GetGhsaId() string { return v.GhsaId }

// GHSASpec allows filtering the list of advisories to return in a query.
type GHSASpec struct {
	Id     *string `json:"id"`
	GhsaId *string `json:"ghsaId"`
}

// GetId returns GHSASpec.Id, and is useful for accessing the field via an interface.
func (v *GHSASpec) GetId() *string { return v.Id }

// GetGhsaId returns GHSASpec.GhsaId, and is useful for accessing the field via an interface.
func (v *GHSASpec) GetGhsaId() *string { return v.GhsaId }

// GHSAsGhsaGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type GHSAsGhsaGHSA struct {
	AllGHSATree `json:"-"`
}

// GetId returns GHSAsGhsaGHSA.Id, and is useful for accessing the field via an interface.
func (v *GHSAsGhsaGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns GHSAsGhsaGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *GHSAsGhsaGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *GHSAsGhsaGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GHSAsGhsaGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.GHSAsGhsaGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGHSAsGhsaGHSA struct {
	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *GHSAsGhsaGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GHSAsGhsaGHSA) __premarshalJSON() (*__premarshalGHSAsGhsaGHSA, error) {
	var retval __premarshalGHSAsGhsaGHSA

	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// GHSAsResponse is returned by GHSAs on success.
type GHSAsResponse struct {
	// Returns all GitHub Security Advisories matching a filter.
	Ghsa []GHSAsGhsaGHSA `json:"ghsa"`
}

// GetGhsa returns GHSAsResponse.Ghsa, and is useful for accessing the field via an interface.
func (v *GHSAsResponse) GetGhsa() []GHSAsGhsaGHSA { return v.Ghsa }

// HasMetadataArtifactIngestHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type HasMetadataArtifactIngestHasMetadata struct {
	AllHasMetadata `json:"-"`
}

// GetId returns HasMetadataArtifactIngestHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *HasMetadataArtifactIngestHasMetadata) GetId() string { return v.AllHasMetadata.Id }

// GetSubject returns HasMetadataArtifactIngestHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *HasMetadataArtifactIngestHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact {
	return v.AllHasMetadata.Subject
}

// GetKey returns HasMetadataArtifactIngestHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *HasMetadataArtifactIngestHasMetadata) GetKey() string { return v.AllHasMetadata.Key }

// GetValue returns HasMetadataArtifactIngestHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *HasMetadataArtifactIngestHasMetadata) GetValue() string { return v.AllHasMetadata.Value }

// GetTimestamp returns HasMetadataArtifactIngestHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *HasMetadataArtifactIngestHasMetadata) GetTimestamp() time.Time {
	return v.AllHasMetadata.Timestamp
}

// GetJustification returns HasMetadataArtifactIngestHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *HasMetadataArtifactIngestHasMetadata) GetJustification() string {
	return v.AllHasMetadata.Justification
}

// GetOrigin returns HasMetadataArtifactIngestHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *HasMetadataArtifactIngestHasMetadata) GetOrigin() string { return v.AllHasMetadata.Origin }

// GetCollector returns HasMetadataArtifactIngestHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *HasMetadataArtifactIngestHasMetadata) GetCollector() string {
	return v.AllHasMetadata.Collector
}

func (v *HasMetadataArtifactIngestHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasMetadataArtifactIngestHasMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.HasMetadataArtifactIngestHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasMetadataArtifactIngestHasMetadata struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasMetadataArtifactIngestHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasMetadataArtifactIngestHasMetadata) __premarshalJSON() (*__premarshalHasMetadataArtifactIngestHasMetadata, error) {
	var retval __premarshalHasMetadataArtifactIngestHasMetadata

	retval.Id = v.AllHasMetadata.Id
	{

		dst := &retval.Subject
		src := v.AllHasMetadata.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal HasMetadataArtifactIngestHasMetadata.AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.AllHasMetadata.Key
	retval.Value = v.AllHasMetadata.Value
	retval.Timestamp = v.AllHasMetadata.Timestamp
	retval.Justification = v.AllHasMetadata.Justification
	retval.Origin = v.AllHasMetadata.Origin
	retval.Collector = v.AllHasMetadata.Collector
	return &retval, nil
}

// HasMetadataArtifactResponse is returned by HasMetadataArtifact on success.
type HasMetadataArtifactResponse struct {
	// Adds metadata about a package, source or artifact.
	IngestHasMetadata HasMetadataArtifactIngestHasMetadata `json:"ingestHasMetadata"`
}

// GetIngestHasMetadata returns HasMetadataArtifactResponse.IngestHasMetadata, and is useful for accessing the field via an interface.
func (v *HasMetadataArtifactResponse) GetIngestHasMetadata() HasMetadataArtifactIngestHasMetadata {
	return v.IngestHasMetadata
}

// HasMetadataInputSpec represents the mutation input to ingest a CertifyGood evidence.
type HasMetadataInputSpec struct {
	Key           string    `json:"key"`
	Value         string    `json:"value"`
	Timestamp     time.Time `json:"timestamp"`
	Justification string    `json:"justification"`
	Origin        string    `json:"origin"`
	Collector     string    `json:"collector"`
}

// GetKey returns HasMetadataInputSpec.Key, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetKey() string { return v.Key }

// GetValue returns HasMetadataInputSpec.Value, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetValue() string { return v.Value }

// GetTimestamp returns HasMetadataInputSpec.Timestamp, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetTimestamp() time.Time { return v.Timestamp }

// GetJustification returns HasMetadataInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns HasMetadataInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HasMetadataInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetCollector() string { return v.Collector }

// HasMetadataPkgIngestHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type HasMetadataPkgIngestHasMetadata struct {
	AllHasMetadata `json:"-"`
}

// GetId returns HasMetadataPkgIngestHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *HasMetadataPkgIngestHasMetadata) GetId() string { return v.AllHasMetadata.Id }

// GetSubject returns HasMetadataPkgIngestHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *HasMetadataPkgIngestHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact {
	return v.AllHasMetadata.Subject
}

// GetKey returns HasMetadataPkgIngestHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *HasMetadataPkgIngestHasMetadata) GetKey() string { return v.AllHasMetadata.Key }

// GetValue returns HasMetadataPkgIngestHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *HasMetadataPkgIngestHasMetadata) GetValue() string { return v.AllHasMetadata.Value }

// GetTimestamp returns HasMetadataPkgIngestHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *HasMetadataPkgIngestHasMetadata) GetTimestamp() time.Time { return v.AllHasMetadata.Timestamp }

// GetJustification returns HasMetadataPkgIngestHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *HasMetadataPkgIngestHasMetadata) GetJustification() string {
	return v.AllHasMetadata.Justification
}

// GetOrigin returns HasMetadataPkgIngestHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *HasMetadataPkgIngestHasMetadata) GetOrigin() string { return v.AllHasMetadata.Origin }

// GetCollector returns HasMetadataPkgIngestHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *HasMetadataPkgIngestHasMetadata) GetCollector() string { return v.AllHasMetadata.Collector }

func (v *HasMetadataPkgIngestHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasMetadataPkgIngestHasMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.HasMetadataPkgIngestHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasMetadataPkgIngestHasMetadata struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasMetadataPkgIngestHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasMetadataPkgIngestHasMetadata) __premarshalJSON() (*__premarshalHasMetadataPkgIngestHasMetadata, error) {
	var retval __premarshalHasMetadataPkgIngestHasMetadata

	retval.Id = v.AllHasMetadata.Id
	{

		dst := &retval.Subject
		src := v.AllHasMetadata.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal HasMetadataPkgIngestHasMetadata.AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.AllHasMetadata.Key
	retval.Value = v.AllHasMetadata.Value
	retval.Timestamp = v.AllHasMetadata.Timestamp
	retval.Justification = v.AllHasMetadata.Justification
	retval.Origin = v.AllHasMetadata.Origin
	retval.Collector = v.AllHasMetadata.Collector
	return &retval, nil
}

// HasMetadataPkgResponse is returned by HasMetadataPkg on success.
type HasMetadataPkgResponse struct {
	// Adds metadata about a package, source or artifact.
	IngestHasMetadata HasMetadataPkgIngestHasMetadata `json:"ingestHasMetadata"`
}

// GetIngestHasMetadata returns HasMetadataPkgResponse.IngestHasMetadata, and is useful for accessing the field via an interface.
func (v *HasMetadataPkgResponse) GetIngestHasMetadata() HasMetadataPkgIngestHasMetadata {
	return v.IngestHasMetadata
}

// HasMetadataSrcIngestHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type HasMetadataSrcIngestHasMetadata struct {
	AllHasMetadata `json:"-"`
}

// GetId returns HasMetadataSrcIngestHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *HasMetadataSrcIngestHasMetadata) GetId() string { return v.AllHasMetadata.Id }

// GetSubject returns HasMetadataSrcIngestHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *HasMetadataSrcIngestHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact {
	return v.AllHasMetadata.Subject
}

// GetKey returns HasMetadataSrcIngestHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *HasMetadataSrcIngestHasMetadata) GetKey() string { return v.AllHasMetadata.Key }

// GetValue returns HasMetadataSrcIngestHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *HasMetadataSrcIngestHasMetadata) GetValue() string { return v.AllHasMetadata.Value }

// GetTimestamp returns HasMetadataSrcIngestHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *HasMetadataSrcIngestHasMetadata) GetTimestamp() time.Time { return v.AllHasMetadata.Timestamp }

// GetJustification returns HasMetadataSrcIngestHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *HasMetadataSrcIngestHasMetadata) GetJustification() string {
	return v.AllHasMetadata.Justification
}

// GetOrigin returns HasMetadataSrcIngestHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *HasMetadataSrcIngestHasMetadata) GetOrigin() string { return v.AllHasMetadata.Origin }

// GetCollector returns HasMetadataSrcIngestHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *HasMetadataSrcIngestHasMetadata) GetCollector() string { return v.AllHasMetadata.Collector }

func (v *HasMetadataSrcIngestHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasMetadataSrcIngestHasMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.HasMetadataSrcIngestHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasMetadataSrcIngestHasMetadata struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasMetadataSrcIngestHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasMetadataSrcIngestHasMetadata) __premarshalJSON() (*__premarshalHasMetadataSrcIngestHasMetadata, error) {
	var retval __premarshalHasMetadataSrcIngestHasMetadata

	retval.Id = v.AllHasMetadata.Id
	{

		dst := &retval.Subject
		src := v.AllHasMetadata.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal HasMetadataSrcIngestHasMetadata.AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.AllHasMetadata.Key
	retval.Value = v.AllHasMetadata.Value
	retval.Timestamp = v.AllHasMetadata.Timestamp
	retval.Justification = v.AllHasMetadata.Justification
	retval.Origin = v.AllHasMetadata.Origin
	retval.Collector = v.AllHasMetadata.Collector
	return &retval, nil
}

// HasMetadataSrcResponse is returned by HasMetadataSrc on success.
type HasMetadataSrcResponse struct {
	// Adds metadata about a package, source or artifact.
	IngestHasMetadata HasMetadataSrcIngestHasMetadata `json:"ingestHasMetadata"`
}

// GetIngestHasMetadata returns HasMetadataSrcResponse.IngestHasMetadata, and is useful for accessing the field via an interface.
func (v *HasMetadataSrcResponse) GetIngestHasMetadata() HasMetadataSrcIngestHasMetadata {
	return v.IngestHasMetadata
}

// HasSBOMArtifactIngestHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type HasSBOMArtifactIngestHasSBOM struct {
	AllHasSBOMTree `json:"-"`
}

// GetId returns HasSBOMArtifactIngestHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns HasSBOMArtifactIngestHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns HasSBOMArtifactIngestHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns HasSBOMArtifactIngestHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns HasSBOMArtifactIngestHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns HasSBOMArtifactIngestHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetDownloadLocation() string {
	return v.AllHasSBOMTree.DownloadLocation
}

// GetOrigin returns HasSBOMArtifactIngestHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns HasSBOMArtifactIngestHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

func (v *HasSBOMArtifactIngestHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSBOMArtifactIngestHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSBOMArtifactIngestHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSBOMArtifactIngestHasSBOM struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasSBOMArtifactIngestHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSBOMArtifactIngestHasSBOM) __premarshalJSON() (*__premarshalHasSBOMArtifactIngestHasSBOM, error) {
	var retval __premarshalHasSBOMArtifactIngestHasSBOM

	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal HasSBOMArtifactIngestHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	return &retval, nil
}

// HasSBOMArtifactResponse is returned by HasSBOMArtifact on success.
type HasSBOMArtifactResponse struct {
	// Certifies that a package or artifact has an SBOM.
	IngestHasSBOM HasSBOMArtifactIngestHasSBOM `json:"ingestHasSBOM"`
}

// GetIngestHasSBOM returns HasSBOMArtifactResponse.IngestHasSBOM, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactResponse) GetIngestHasSBOM() HasSBOMArtifactIngestHasSBOM {
	return v.IngestHasSBOM
}

// HasSBOMInputSpec is the same as HasSBOM but for mutation input.
type HasSBOMInputSpec struct {
	Uri              string `json:"uri"`
	Algorithm        string `json:"algorithm"`
	Digest           string `json:"digest"`
	DownloadLocation string `json:"downloadLocation"`
	Origin           string `json:"origin"`
	Collector        string `json:"collector"`
}

// GetUri returns HasSBOMInputSpec.Uri, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetUri() string { return v.Uri }

// GetAlgorithm returns HasSBOMInputSpec.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns HasSBOMInputSpec.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetDigest() string { return v.Digest }

// GetDownloadLocation returns HasSBOMInputSpec.DownloadLocation, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetDownloadLocation() string { return v.DownloadLocation }

// GetOrigin returns HasSBOMInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HasSBOMInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetCollector() string { return v.Collector }

// HasSBOMPkgIngestHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type HasSBOMPkgIngestHasSBOM struct {
	AllHasSBOMTree `json:"-"`
}

// GetId returns HasSBOMPkgIngestHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns HasSBOMPkgIngestHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns HasSBOMPkgIngestHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns HasSBOMPkgIngestHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns HasSBOMPkgIngestHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns HasSBOMPkgIngestHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetDownloadLocation() string {
	return v.AllHasSBOMTree.DownloadLocation
}

// GetOrigin returns HasSBOMPkgIngestHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns HasSBOMPkgIngestHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

func (v *HasSBOMPkgIngestHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSBOMPkgIngestHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSBOMPkgIngestHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSBOMPkgIngestHasSBOM struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasSBOMPkgIngestHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSBOMPkgIngestHasSBOM) __premarshalJSON() (*__premarshalHasSBOMPkgIngestHasSBOM, error) {
	var retval __premarshalHasSBOMPkgIngestHasSBOM

	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal HasSBOMPkgIngestHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	return &retval, nil
}

// HasSBOMPkgResponse is returned by HasSBOMPkg on success.
type HasSBOMPkgResponse struct {
	// Certifies that a package or artifact has an SBOM.
	IngestHasSBOM HasSBOMPkgIngestHasSBOM `json:"ingestHasSBOM"`
}

// GetIngestHasSBOM returns HasSBOMPkgResponse.IngestHasSBOM, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgResponse) GetIngestHasSBOM() HasSBOMPkgIngestHasSBOM { return v.IngestHasSBOM }

// HasSourceAtIngestHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type HasSourceAtIngestHasSourceAt struct {
	AllHasSourceAt `json:"-"`
}

// GetId returns HasSourceAtIngestHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetId() string { return v.AllHasSourceAt.Id }

// GetJustification returns HasSourceAtIngestHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetJustification() string {
	return v.AllHasSourceAt.Justification
}

// GetKnownSince returns HasSourceAtIngestHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetKnownSince() time.Time { return v.AllHasSourceAt.KnownSince }

// GetPackage returns HasSourceAtIngestHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetPackage() AllHasSourceAtPackage {
	return v.AllHasSourceAt.Package
}

// GetSource returns HasSourceAtIngestHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetSource() AllHasSourceAtSource {
	return v.AllHasSourceAt.Source
}

// GetOrigin returns HasSourceAtIngestHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetOrigin() string { return v.AllHasSourceAt.Origin }

// GetCollector returns HasSourceAtIngestHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetCollector() string { return v.AllHasSourceAt.Collector }

func (v *HasSourceAtIngestHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSourceAtIngestHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSourceAtIngestHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSourceAtIngestHasSourceAt struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasSourceAtIngestHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSourceAtIngestHasSourceAt) __premarshalJSON() (*__premarshalHasSourceAtIngestHasSourceAt, error) {
	var retval __premarshalHasSourceAtIngestHasSourceAt

	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// HasSourceAtInputSpec is the same as HasSourceAt but for mutation input.
type HasSourceAtInputSpec struct {
	KnownSince    time.Time `json:"knownSince"`
	Justification string    `json:"justification"`
	Origin        string    `json:"origin"`
	Collector     string    `json:"collector"`
}

// GetKnownSince returns HasSourceAtInputSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetKnownSince() time.Time { return v.KnownSince }

// GetJustification returns HasSourceAtInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns HasSourceAtInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HasSourceAtInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetCollector() string { return v.Collector }

// HasSourceAtResponse is returned by HasSourceAt on success.
type HasSourceAtResponse struct {
	// Adds a certification that a package (PackageName or PackageVersion) is built from the source.
	IngestHasSourceAt HasSourceAtIngestHasSourceAt `json:"ingestHasSourceAt"`
}

// GetIngestHasSourceAt returns HasSourceAtResponse.IngestHasSourceAt, and is useful for accessing the field via an interface.
func (v *HasSourceAtResponse) GetIngestHasSourceAt() HasSourceAtIngestHasSourceAt {
	return v.IngestHasSourceAt
}

// HashEqualIngestHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type HashEqualIngestHashEqual struct {
	AllHashEqualTree `json:"-"`
}

// GetId returns HashEqualIngestHashEqual.Id, and is useful for accessing the field via an interface.
func (v *HashEqualIngestHashEqual) GetId() string { return v.AllHashEqualTree.Id }

// GetJustification returns HashEqualIngestHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *HashEqualIngestHashEqual) GetJustification() string { return v.AllHashEqualTree.Justification }

// GetArtifacts returns HashEqualIngestHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *HashEqualIngestHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns HashEqualIngestHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *HashEqualIngestHashEqual) GetOrigin() string { return v.AllHashEqualTree.Origin }

// GetCollector returns HashEqualIngestHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *HashEqualIngestHashEqual) GetCollector() string { return v.AllHashEqualTree.Collector }

func (v *HashEqualIngestHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HashEqualIngestHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.HashEqualIngestHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHashEqualIngestHashEqual struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HashEqualIngestHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HashEqualIngestHashEqual) __premarshalJSON() (*__premarshalHashEqualIngestHashEqual, error) {
	var retval __premarshalHashEqualIngestHashEqual

	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// HashEqualInputSpec represents the input to certify that packages are similar.
type HashEqualInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns HashEqualInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *HashEqualInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns HashEqualInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HashEqualInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HashEqualInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HashEqualInputSpec) GetCollector() string { return v.Collector }

// HashEqualResponse is returned by HashEqual on success.
type HashEqualResponse struct {
	// Adds a certification that two artifacts are similar.
	IngestHashEqual HashEqualIngestHashEqual `json:"ingestHashEqual"`
}

// GetIngestHashEqual returns HashEqualResponse.IngestHashEqual, and is useful for accessing the field via an interface.
func (v *HashEqualResponse) GetIngestHashEqual() HashEqualIngestHashEqual { return v.IngestHashEqual }

// IngestArtifactIngestArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type IngestArtifactIngestArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns IngestArtifactIngestArtifact.Id, and is useful for accessing the field via an interface.
func (v *IngestArtifactIngestArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns IngestArtifactIngestArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *IngestArtifactIngestArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns IngestArtifactIngestArtifact.Digest, and is useful for accessing the field via an interface.
func (v *IngestArtifactIngestArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *IngestArtifactIngestArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestArtifactIngestArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestArtifactIngestArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestArtifactIngestArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *IngestArtifactIngestArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestArtifactIngestArtifact) __premarshalJSON() (*__premarshalIngestArtifactIngestArtifact, error) {
	var retval __premarshalIngestArtifactIngestArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// IngestArtifactResponse is returned by IngestArtifact on success.
type IngestArtifactResponse struct {
	// Ingests a new artifact and returns it.
	IngestArtifact IngestArtifactIngestArtifact `json:"ingestArtifact"`
}

// GetIngestArtifact returns IngestArtifactResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *IngestArtifactResponse) GetIngestArtifact() IngestArtifactIngestArtifact {
	return v.IngestArtifact
}

// IngestArtifactsIngestArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type IngestArtifactsIngestArtifactsArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns IngestArtifactsIngestArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *IngestArtifactsIngestArtifactsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns IngestArtifactsIngestArtifactsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *IngestArtifactsIngestArtifactsArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns IngestArtifactsIngestArtifactsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *IngestArtifactsIngestArtifactsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *IngestArtifactsIngestArtifactsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestArtifactsIngestArtifactsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestArtifactsIngestArtifactsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestArtifactsIngestArtifactsArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *IngestArtifactsIngestArtifactsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestArtifactsIngestArtifactsArtifact) __premarshalJSON() (*__premarshalIngestArtifactsIngestArtifactsArtifact, error) {
	var retval __premarshalIngestArtifactsIngestArtifactsArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// IngestArtifactsResponse is returned by IngestArtifacts on success.
type IngestArtifactsResponse struct {
	// Bulk ingests new artifacts and returns a list of them.
	IngestArtifacts []IngestArtifactsIngestArtifactsArtifact `json:"ingestArtifacts"`
}

// GetIngestArtifacts returns IngestArtifactsResponse.IngestArtifacts, and is useful for accessing the field via an interface.
func (v *IngestArtifactsResponse) GetIngestArtifacts() []IngestArtifactsIngestArtifactsArtifact {
	return v.IngestArtifacts
}

// IngestBuilderIngestBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type IngestBuilderIngestBuilder struct {
	Uri string `json:"uri"`
}

// GetUri returns IngestBuilderIngestBuilder.Uri, and is useful for accessing the field via an interface.
func (v *IngestBuilderIngestBuilder) GetUri() string { return v.Uri }

// IngestBuilderResponse is returned by IngestBuilder on success.
type IngestBuilderResponse struct {
	// Ingests a new builder and returns it.
	IngestBuilder IngestBuilderIngestBuilder `json:"ingestBuilder"`
}

// GetIngestBuilder returns IngestBuilderResponse.IngestBuilder, and is useful for accessing the field via an interface.
func (v *IngestBuilderResponse) GetIngestBuilder() IngestBuilderIngestBuilder { return v.IngestBuilder }

// IngestBuildersIngestBuildersBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type IngestBuildersIngestBuildersBuilder struct {
	Uri string `json:"uri"`
}

// GetUri returns IngestBuildersIngestBuildersBuilder.Uri, and is useful for accessing the field via an interface.
func (v *IngestBuildersIngestBuildersBuilder) GetUri() string { return v.Uri }

// IngestBuildersResponse is returned by IngestBuilders on success.
type IngestBuildersResponse struct {
	// Bulk ingests new builders and returns a list of them.
	IngestBuilders []IngestBuildersIngestBuildersBuilder `json:"ingestBuilders"`
}

// GetIngestBuilders returns IngestBuildersResponse.IngestBuilders, and is useful for accessing the field via an interface.
func (v *IngestBuildersResponse) GetIngestBuilders() []IngestBuildersIngestBuildersBuilder {
	return v.IngestBuilders
}

// IngestCVEIngestCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type IngestCVEIngestCVE struct {
	AllCveTree `json:"-"`
}

// GetId returns IngestCVEIngestCVE.Id, and is useful for accessing the field via an interface.
func (v *IngestCVEIngestCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns IngestCVEIngestCVE.Year, and is useful for accessing the field via an interface.
func (v *IngestCVEIngestCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns IngestCVEIngestCVE.CveId, and is useful for accessing the field via an interface.
func (v *IngestCVEIngestCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *IngestCVEIngestCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestCVEIngestCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestCVEIngestCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestCVEIngestCVE struct {
	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *IngestCVEIngestCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestCVEIngestCVE) __premarshalJSON() (*__premarshalIngestCVEIngestCVE, error) {
	var retval __premarshalIngestCVEIngestCVE

	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// IngestCVEResponse is returned by IngestCVE on success.
type IngestCVEResponse struct {
	// Ingests new CVE and returns it.
	IngestCVE IngestCVEIngestCVE `json:"ingestCVE"`
}

// GetIngestCVE returns IngestCVEResponse.IngestCVE, and is useful for accessing the field via an interface.
func (v *IngestCVEResponse) GetIngestCVE() IngestCVEIngestCVE { return v.IngestCVE }

// IngestCVEsIngestCVEsCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type IngestCVEsIngestCVEsCVE struct {
	AllCveTree `json:"-"`
}

// GetId returns IngestCVEsIngestCVEsCVE.Id, and is useful for accessing the field via an interface.
func (v *IngestCVEsIngestCVEsCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns IngestCVEsIngestCVEsCVE.Year, and is useful for accessing the field via an interface.
func (v *IngestCVEsIngestCVEsCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns IngestCVEsIngestCVEsCVE.CveId, and is useful for accessing the field via an interface.
func (v *IngestCVEsIngestCVEsCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *IngestCVEsIngestCVEsCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestCVEsIngestCVEsCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestCVEsIngestCVEsCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestCVEsIngestCVEsCVE struct {
	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *IngestCVEsIngestCVEsCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestCVEsIngestCVEsCVE) __premarshalJSON() (*__premarshalIngestCVEsIngestCVEsCVE, error) {
	var retval __premarshalIngestCVEsIngestCVEsCVE

	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// IngestCVEsResponse is returned by IngestCVEs on success.
type IngestCVEsResponse struct {
	// Bulk ingests new CVEs and returns a list of them.
	IngestCVEs []IngestCVEsIngestCVEsCVE `json:"ingestCVEs"`
}

// GetIngestCVEs returns IngestCVEsResponse.IngestCVEs, and is useful for accessing the field via an interface.
func (v *IngestCVEsResponse) GetIngestCVEs() []IngestCVEsIngestCVEsCVE { return v.IngestCVEs }

// IngestGHSAIngestGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type IngestGHSAIngestGHSA struct {
	AllGHSATree `json:"-"`
}

// GetId returns IngestGHSAIngestGHSA.Id, and is useful for accessing the field via an interface.
func (v *IngestGHSAIngestGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns IngestGHSAIngestGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *IngestGHSAIngestGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *IngestGHSAIngestGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestGHSAIngestGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestGHSAIngestGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestGHSAIngestGHSA struct {
	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *IngestGHSAIngestGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestGHSAIngestGHSA) __premarshalJSON() (*__premarshalIngestGHSAIngestGHSA, error) {
	var retval __premarshalIngestGHSAIngestGHSA

	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// IngestGHSAResponse is returned by IngestGHSA on success.
type IngestGHSAResponse struct {
	// Ingests a new GitHub Security Advisory and returns it.
	IngestGHSA IngestGHSAIngestGHSA `json:"ingestGHSA"`
}

// GetIngestGHSA returns IngestGHSAResponse.IngestGHSA, and is useful for accessing the field via an interface.
func (v *IngestGHSAResponse) GetIngestGHSA() IngestGHSAIngestGHSA { return v.IngestGHSA }

// IngestGHSAsIngestGHSAsGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type IngestGHSAsIngestGHSAsGHSA struct {
	AllGHSATree `json:"-"`
}

// GetId returns IngestGHSAsIngestGHSAsGHSA.Id, and is useful for accessing the field via an interface.
func (v *IngestGHSAsIngestGHSAsGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns IngestGHSAsIngestGHSAsGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *IngestGHSAsIngestGHSAsGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *IngestGHSAsIngestGHSAsGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestGHSAsIngestGHSAsGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestGHSAsIngestGHSAsGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestGHSAsIngestGHSAsGHSA struct {
	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *IngestGHSAsIngestGHSAsGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestGHSAsIngestGHSAsGHSA) __premarshalJSON() (*__premarshalIngestGHSAsIngestGHSAsGHSA, error) {
	var retval __premarshalIngestGHSAsIngestGHSAsGHSA

	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// IngestGHSAsResponse is returned by IngestGHSAs on success.
type IngestGHSAsResponse struct {
	// Bulk ingests new GHSAs and returns a list of them.
	IngestGHSAs []IngestGHSAsIngestGHSAsGHSA `json:"ingestGHSAs"`
}

// GetIngestGHSAs returns IngestGHSAsResponse.IngestGHSAs, and is useful for accessing the field via an interface.
func (v *IngestGHSAsResponse) GetIngestGHSAs() []IngestGHSAsIngestGHSAsGHSA { return v.IngestGHSAs }

// IngestOSVIngestOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type IngestOSVIngestOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns IngestOSVIngestOSV.Id, and is useful for accessing the field via an interface.
func (v *IngestOSVIngestOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns IngestOSVIngestOSV.OsvId, and is useful for accessing the field via an interface.
func (v *IngestOSVIngestOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *IngestOSVIngestOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestOSVIngestOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestOSVIngestOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestOSVIngestOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *IngestOSVIngestOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestOSVIngestOSV) __premarshalJSON() (*__premarshalIngestOSVIngestOSV, error) {
	var retval __premarshalIngestOSVIngestOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// IngestOSVResponse is returned by IngestOSV on success.
type IngestOSVResponse struct {
	// Ingests a new OSV vulnerability and returns it.
	IngestOSV IngestOSVIngestOSV `json:"ingestOSV"`
}

// GetIngestOSV returns IngestOSVResponse.IngestOSV, and is useful for accessing the field via an interface.
func (v *IngestOSVResponse) GetIngestOSV() IngestOSVIngestOSV { return v.IngestOSV }

// IngestOSVsIngestOSVsOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type IngestOSVsIngestOSVsOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns IngestOSVsIngestOSVsOSV.Id, and is useful for accessing the field via an interface.
func (v *IngestOSVsIngestOSVsOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns IngestOSVsIngestOSVsOSV.OsvId, and is useful for accessing the field via an interface.
func (v *IngestOSVsIngestOSVsOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *IngestOSVsIngestOSVsOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestOSVsIngestOSVsOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestOSVsIngestOSVsOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestOSVsIngestOSVsOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *IngestOSVsIngestOSVsOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestOSVsIngestOSVsOSV) __premarshalJSON() (*__premarshalIngestOSVsIngestOSVsOSV, error) {
	var retval __premarshalIngestOSVsIngestOSVsOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// IngestOSVsResponse is returned by IngestOSVs on success.
type IngestOSVsResponse struct {
	// Bulk ingests new OSVs and returns a list of them.
	IngestOSVs []IngestOSVsIngestOSVsOSV `json:"ingestOSVs"`
}

// GetIngestOSVs returns IngestOSVsResponse.IngestOSVs, and is useful for accessing the field via an interface.
func (v *IngestOSVsResponse) GetIngestOSVs() []IngestOSVsIngestOSVsOSV { return v.IngestOSVs }

// IngestPackageIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type IngestPackageIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns IngestPackageIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *IngestPackageIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns IngestPackageIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *IngestPackageIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns IngestPackageIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *IngestPackageIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *IngestPackageIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestPackageIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestPackageIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestPackageIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *IngestPackageIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestPackageIngestPackage) __premarshalJSON() (*__premarshalIngestPackageIngestPackage, error) {
	var retval __premarshalIngestPackageIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// IngestPackageResponse is returned by IngestPackage on success.
type IngestPackageResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage IngestPackageIngestPackage `json:"ingestPackage"`
}

// GetIngestPackage returns IngestPackageResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *IngestPackageResponse) GetIngestPackage() IngestPackageIngestPackage { return v.IngestPackage }

// IngestPackagesIngestPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type IngestPackagesIngestPackagesPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns IngestPackagesIngestPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *IngestPackagesIngestPackagesPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns IngestPackagesIngestPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *IngestPackagesIngestPackagesPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns IngestPackagesIngestPackagesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *IngestPackagesIngestPackagesPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *IngestPackagesIngestPackagesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestPackagesIngestPackagesPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestPackagesIngestPackagesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestPackagesIngestPackagesPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *IngestPackagesIngestPackagesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestPackagesIngestPackagesPackage) __premarshalJSON() (*__premarshalIngestPackagesIngestPackagesPackage, error) {
	var retval __premarshalIngestPackagesIngestPackagesPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// IngestPackagesResponse is returned by IngestPackages on success.
type IngestPackagesResponse struct {
	// Bulk ingests packages and returns the list of corresponding package trie path.
	IngestPackages []IngestPackagesIngestPackagesPackage `json:"ingestPackages"`
}

// GetIngestPackages returns IngestPackagesResponse.IngestPackages, and is useful for accessing the field via an interface.
func (v *IngestPackagesResponse) GetIngestPackages() []IngestPackagesIngestPackagesPackage {
	return v.IngestPackages
}

// IngestSourceIngestSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type IngestSourceIngestSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns IngestSourceIngestSource.Id, and is useful for accessing the field via an interface.
func (v *IngestSourceIngestSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns IngestSourceIngestSource.Type, and is useful for accessing the field via an interface.
func (v *IngestSourceIngestSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns IngestSourceIngestSource.Namespaces, and is useful for accessing the field via an interface.
func (v *IngestSourceIngestSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *IngestSourceIngestSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestSourceIngestSource
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestSourceIngestSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestSourceIngestSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *IngestSourceIngestSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestSourceIngestSource) __premarshalJSON() (*__premarshalIngestSourceIngestSource, error) {
	var retval __premarshalIngestSourceIngestSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// IngestSourceResponse is returned by IngestSource on success.
type IngestSourceResponse struct {
	// Ingests a new source and returns the corresponding source trie path.
	IngestSource IngestSourceIngestSource `json:"ingestSource"`
}

// GetIngestSource returns IngestSourceResponse.IngestSource, and is useful for accessing the field via an interface.
func (v *IngestSourceResponse) GetIngestSource() IngestSourceIngestSource { return v.IngestSource }

// IngestSourcesIngestSourcesSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type IngestSourcesIngestSourcesSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns IngestSourcesIngestSourcesSource.Id, and is useful for accessing the field via an interface.
func (v *IngestSourcesIngestSourcesSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns IngestSourcesIngestSourcesSource.Type, and is useful for accessing the field via an interface.
func (v *IngestSourcesIngestSourcesSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns IngestSourcesIngestSourcesSource.Namespaces, and is useful for accessing the field via an interface.
func (v *IngestSourcesIngestSourcesSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *IngestSourcesIngestSourcesSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IngestSourcesIngestSourcesSource
		graphql.NoUnmarshalJSON
	}
	firstPass.IngestSourcesIngestSourcesSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIngestSourcesIngestSourcesSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *IngestSourcesIngestSourcesSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IngestSourcesIngestSourcesSource) __premarshalJSON() (*__premarshalIngestSourcesIngestSourcesSource, error) {
	var retval __premarshalIngestSourcesIngestSourcesSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// IngestSourcesResponse is returned by IngestSources on success.
type IngestSourcesResponse struct {
	// Bulk ingests sources and returns the list of corresponding source trie path.
	IngestSources []IngestSourcesIngestSourcesSource `json:"ingestSources"`
}

// GetIngestSources returns IngestSourcesResponse.IngestSources, and is useful for accessing the field via an interface.
func (v *IngestSourcesResponse) GetIngestSources() []IngestSourcesIngestSourcesSource {
	return v.IngestSources
}

// IsDependenciesIngestDependenciesIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type IsDependenciesIngestDependenciesIsDependency struct {
	AllIsDependencyTree `json:"-"`
}

// GetId returns IsDependenciesIngestDependenciesIsDependency.Id, and is useful for accessing the field via an interface.
func (v *IsDependenciesIngestDependenciesIsDependency) GetId() string {
	return v.AllIsDependencyTree.Id
}

// GetJustification returns IsDependenciesIngestDependenciesIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *IsDependenciesIngestDependenciesIsDependency) GetJustification() string {
	return v.AllIsDependencyTree.Justification
}

// GetPackage returns IsDependenciesIngestDependenciesIsDependency.Package, and is useful for accessing the field via an interface.
func (v *IsDependenciesIngestDependenciesIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependentPackage returns IsDependenciesIngestDependenciesIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *IsDependenciesIngestDependenciesIsDependency) GetDependentPackage() AllIsDependencyTreeDependentPackage {
	return v.AllIsDependencyTree.DependentPackage
}

// GetDependencyType returns IsDependenciesIngestDependenciesIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *IsDependenciesIngestDependenciesIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns IsDependenciesIngestDependenciesIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *IsDependenciesIngestDependenciesIsDependency) GetVersionRange() string {
	return v.AllIsDependencyTree.VersionRange
}

// GetOrigin returns IsDependenciesIngestDependenciesIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *IsDependenciesIngestDependenciesIsDependency) GetOrigin() string {
	return v.AllIsDependencyTree.Origin
}

// GetCollector returns IsDependenciesIngestDependenciesIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *IsDependenciesIngestDependenciesIsDependency) GetCollector() string {
	return v.AllIsDependencyTree.Collector
}

func (v *IsDependenciesIngestDependenciesIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsDependenciesIngestDependenciesIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.IsDependenciesIngestDependenciesIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsDependenciesIngestDependenciesIsDependency struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependentPackage AllIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsDependenciesIngestDependenciesIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsDependenciesIngestDependenciesIsDependency) __premarshalJSON() (*__premarshalIsDependenciesIngestDependenciesIsDependency, error) {
	var retval __premarshalIsDependenciesIngestDependenciesIsDependency

	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependentPackage = v.AllIsDependencyTree.DependentPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// IsDependenciesResponse is returned by IsDependencies on success.
type IsDependenciesResponse struct {
	// Bulk adds a dependency between two packages
	IngestDependencies []IsDependenciesIngestDependenciesIsDependency `json:"ingestDependencies"`
}

// GetIngestDependencies returns IsDependenciesResponse.IngestDependencies, and is useful for accessing the field via an interface.
func (v *IsDependenciesResponse) GetIngestDependencies() []IsDependenciesIngestDependenciesIsDependency {
	return v.IngestDependencies
}

// IsDependencyIngestDependencyIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type IsDependencyIngestDependencyIsDependency struct {
	AllIsDependencyTree `json:"-"`
}

// GetId returns IsDependencyIngestDependencyIsDependency.Id, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetId() string { return v.AllIsDependencyTree.Id }

// GetJustification returns IsDependencyIngestDependencyIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetJustification() string {
	return v.AllIsDependencyTree.Justification
}

// GetPackage returns IsDependencyIngestDependencyIsDependency.Package, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependentPackage returns IsDependencyIngestDependencyIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetDependentPackage() AllIsDependencyTreeDependentPackage {
	return v.AllIsDependencyTree.DependentPackage
}

// GetDependencyType returns IsDependencyIngestDependencyIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns IsDependencyIngestDependencyIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetVersionRange() string {
	return v.AllIsDependencyTree.VersionRange
}

// GetOrigin returns IsDependencyIngestDependencyIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetOrigin() string {
	return v.AllIsDependencyTree.Origin
}

// GetCollector returns IsDependencyIngestDependencyIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetCollector() string {
	return v.AllIsDependencyTree.Collector
}

func (v *IsDependencyIngestDependencyIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsDependencyIngestDependencyIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.IsDependencyIngestDependencyIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsDependencyIngestDependencyIsDependency struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependentPackage AllIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsDependencyIngestDependencyIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsDependencyIngestDependencyIsDependency) __premarshalJSON() (*__premarshalIsDependencyIngestDependencyIsDependency, error) {
	var retval __premarshalIsDependencyIngestDependencyIsDependency

	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependentPackage = v.AllIsDependencyTree.DependentPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// IsDependencyInputSpec is the input to record a new dependency.
type IsDependencyInputSpec struct {
	VersionRange   string         `json:"versionRange"`
	DependencyType DependencyType `json:"dependencyType"`
	Justification  string         `json:"justification"`
	Origin         string         `json:"origin"`
	Collector      string         `json:"collector"`
}

// GetVersionRange returns IsDependencyInputSpec.VersionRange, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetVersionRange() string { return v.VersionRange }

// GetDependencyType returns IsDependencyInputSpec.DependencyType, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetDependencyType() DependencyType { return v.DependencyType }

// GetJustification returns IsDependencyInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns IsDependencyInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns IsDependencyInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetCollector() string { return v.Collector }

// IsDependencyResponse is returned by IsDependency on success.
type IsDependencyResponse struct {
	// Adds a dependency between two packages
	IngestDependency IsDependencyIngestDependencyIsDependency `json:"ingestDependency"`
}

// GetIngestDependency returns IsDependencyResponse.IngestDependency, and is useful for accessing the field via an interface.
func (v *IsDependencyResponse) GetIngestDependency() IsDependencyIngestDependencyIsDependency {
	return v.IngestDependency
}

// IsOccurrenceInputSpec represents the input to record an artifact's origin.
type IsOccurrenceInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns IsOccurrenceInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *IsOccurrenceInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns IsOccurrenceInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *IsOccurrenceInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns IsOccurrenceInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *IsOccurrenceInputSpec) GetCollector() string { return v.Collector }

// IsOccurrencePkgIngestOccurrenceIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type IsOccurrencePkgIngestOccurrenceIsOccurrence struct {
	AllIsOccurrencesTree `json:"-"`
}

// GetId returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetId() string {
	return v.AllIsOccurrencesTree.Id
}

// GetSubject returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetOrigin() string {
	return v.AllIsOccurrencesTree.Origin
}

// GetCollector returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsOccurrencePkgIngestOccurrenceIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.IsOccurrencePkgIngestOccurrenceIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsOccurrencePkgIngestOccurrenceIsOccurrence struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) __premarshalJSON() (*__premarshalIsOccurrencePkgIngestOccurrenceIsOccurrence, error) {
	var retval __premarshalIsOccurrencePkgIngestOccurrenceIsOccurrence

	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal IsOccurrencePkgIngestOccurrenceIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// IsOccurrencePkgResponse is returned by IsOccurrencePkg on success.
type IsOccurrencePkgResponse struct {
	// Ingest that an artifact is produced from a package or source.
	IngestOccurrence IsOccurrencePkgIngestOccurrenceIsOccurrence `json:"ingestOccurrence"`
}

// GetIngestOccurrence returns IsOccurrencePkgResponse.IngestOccurrence, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgResponse) GetIngestOccurrence() IsOccurrencePkgIngestOccurrenceIsOccurrence {
	return v.IngestOccurrence
}

// IsOccurrenceSrcIngestOccurrenceIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type IsOccurrenceSrcIngestOccurrenceIsOccurrence struct {
	AllIsOccurrencesTree `json:"-"`
}

// GetId returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetId() string {
	return v.AllIsOccurrencesTree.Id
}

// GetSubject returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetOrigin() string {
	return v.AllIsOccurrencesTree.Origin
}

// GetCollector returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsOccurrenceSrcIngestOccurrenceIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.IsOccurrenceSrcIngestOccurrenceIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsOccurrenceSrcIngestOccurrenceIsOccurrence struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) __premarshalJSON() (*__premarshalIsOccurrenceSrcIngestOccurrenceIsOccurrence, error) {
	var retval __premarshalIsOccurrenceSrcIngestOccurrenceIsOccurrence

	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal IsOccurrenceSrcIngestOccurrenceIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// IsOccurrenceSrcResponse is returned by IsOccurrenceSrc on success.
type IsOccurrenceSrcResponse struct {
	// Ingest that an artifact is produced from a package or source.
	IngestOccurrence IsOccurrenceSrcIngestOccurrenceIsOccurrence `json:"ingestOccurrence"`
}

// GetIngestOccurrence returns IsOccurrenceSrcResponse.IngestOccurrence, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcResponse) GetIngestOccurrence() IsOccurrenceSrcIngestOccurrenceIsOccurrence {
	return v.IngestOccurrence
}

// IsOccurrencesPkgIngestOccurrencesIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type IsOccurrencesPkgIngestOccurrencesIsOccurrence struct {
	AllIsOccurrencesTree `json:"-"`
}

// GetId returns IsOccurrencesPkgIngestOccurrencesIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrencesPkgIngestOccurrencesIsOccurrence) GetId() string {
	return v.AllIsOccurrencesTree.Id
}

// GetSubject returns IsOccurrencesPkgIngestOccurrencesIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *IsOccurrencesPkgIngestOccurrencesIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns IsOccurrencesPkgIngestOccurrencesIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *IsOccurrencesPkgIngestOccurrencesIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns IsOccurrencesPkgIngestOccurrencesIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *IsOccurrencesPkgIngestOccurrencesIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns IsOccurrencesPkgIngestOccurrencesIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *IsOccurrencesPkgIngestOccurrencesIsOccurrence) GetOrigin() string {
	return v.AllIsOccurrencesTree.Origin
}

// GetCollector returns IsOccurrencesPkgIngestOccurrencesIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *IsOccurrencesPkgIngestOccurrencesIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *IsOccurrencesPkgIngestOccurrencesIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsOccurrencesPkgIngestOccurrencesIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.IsOccurrencesPkgIngestOccurrencesIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsOccurrencesPkgIngestOccurrencesIsOccurrence struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsOccurrencesPkgIngestOccurrencesIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsOccurrencesPkgIngestOccurrencesIsOccurrence) __premarshalJSON() (*__premarshalIsOccurrencesPkgIngestOccurrencesIsOccurrence, error) {
	var retval __premarshalIsOccurrencesPkgIngestOccurrencesIsOccurrence

	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal IsOccurrencesPkgIngestOccurrencesIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// IsOccurrencesPkgResponse is returned by IsOccurrencesPkg on success.
type IsOccurrencesPkgResponse struct {
	// Bulk ingest that an artifact is produced from a package or source.
	IngestOccurrences []IsOccurrencesPkgIngestOccurrencesIsOccurrence `json:"ingestOccurrences"`
}

// GetIngestOccurrences returns IsOccurrencesPkgResponse.IngestOccurrences, and is useful for accessing the field via an interface.
func (v *IsOccurrencesPkgResponse) GetIngestOccurrences() []IsOccurrencesPkgIngestOccurrencesIsOccurrence {
	return v.IngestOccurrences
}

// IsOccurrencesSrcIngestOccurrencesIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type IsOccurrencesSrcIngestOccurrencesIsOccurrence struct {
	AllIsOccurrencesTree `json:"-"`
}

// GetId returns IsOccurrencesSrcIngestOccurrencesIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrencesSrcIngestOccurrencesIsOccurrence) GetId() string {
	return v.AllIsOccurrencesTree.Id
}

// GetSubject returns IsOccurrencesSrcIngestOccurrencesIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *IsOccurrencesSrcIngestOccurrencesIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns IsOccurrencesSrcIngestOccurrencesIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *IsOccurrencesSrcIngestOccurrencesIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns IsOccurrencesSrcIngestOccurrencesIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *IsOccurrencesSrcIngestOccurrencesIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns IsOccurrencesSrcIngestOccurrencesIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *IsOccurrencesSrcIngestOccurrencesIsOccurrence) GetOrigin() string {
	return v.AllIsOccurrencesTree.Origin
}

// GetCollector returns IsOccurrencesSrcIngestOccurrencesIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *IsOccurrencesSrcIngestOccurrencesIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *IsOccurrencesSrcIngestOccurrencesIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsOccurrencesSrcIngestOccurrencesIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.IsOccurrencesSrcIngestOccurrencesIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsOccurrencesSrcIngestOccurrencesIsOccurrence struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsOccurrencesSrcIngestOccurrencesIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsOccurrencesSrcIngestOccurrencesIsOccurrence) __premarshalJSON() (*__premarshalIsOccurrencesSrcIngestOccurrencesIsOccurrence, error) {
	var retval __premarshalIsOccurrencesSrcIngestOccurrencesIsOccurrence

	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal IsOccurrencesSrcIngestOccurrencesIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// IsOccurrencesSrcResponse is returned by IsOccurrencesSrc on success.
type IsOccurrencesSrcResponse struct {
	// Bulk ingest that an artifact is produced from a package or source.
	IngestOccurrences []IsOccurrencesSrcIngestOccurrencesIsOccurrence `json:"ingestOccurrences"`
}

// GetIngestOccurrences returns IsOccurrencesSrcResponse.IngestOccurrences, and is useful for accessing the field via an interface.
func (v *IsOccurrencesSrcResponse) GetIngestOccurrences() []IsOccurrencesSrcIngestOccurrencesIsOccurrence {
	return v.IngestOccurrences
}

// IsVulnerabilityCVEIngestIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type IsVulnerabilityCVEIngestIsVulnerability struct {
	AllIsVulnerability `json:"-"`
}

// GetId returns IsVulnerabilityCVEIngestIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetId() string { return v.AllIsVulnerability.Id }

// GetOsv returns IsVulnerabilityCVEIngestIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetOsv() AllIsVulnerabilityOsvOSV {
	return v.AllIsVulnerability.Osv
}

// GetVulnerability returns IsVulnerabilityCVEIngestIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetVulnerability() AllIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.AllIsVulnerability.Vulnerability
}

// GetJustification returns IsVulnerabilityCVEIngestIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetJustification() string {
	return v.AllIsVulnerability.Justification
}

// GetOrigin returns IsVulnerabilityCVEIngestIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetOrigin() string {
	return v.AllIsVulnerability.Origin
}

// GetCollector returns IsVulnerabilityCVEIngestIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetCollector() string {
	return v.AllIsVulnerability.Collector
}

func (v *IsVulnerabilityCVEIngestIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsVulnerabilityCVEIngestIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.IsVulnerabilityCVEIngestIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsVulnerabilityCVEIngestIsVulnerability struct {
	Id string `json:"id"`

	Osv AllIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsVulnerabilityCVEIngestIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsVulnerabilityCVEIngestIsVulnerability) __premarshalJSON() (*__premarshalIsVulnerabilityCVEIngestIsVulnerability, error) {
	var retval __premarshalIsVulnerabilityCVEIngestIsVulnerability

	retval.Id = v.AllIsVulnerability.Id
	retval.Osv = v.AllIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.AllIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalAllIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal IsVulnerabilityCVEIngestIsVulnerability.AllIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.AllIsVulnerability.Justification
	retval.Origin = v.AllIsVulnerability.Origin
	retval.Collector = v.AllIsVulnerability.Collector
	return &retval, nil
}

// IsVulnerabilityCVEResponse is returned by IsVulnerabilityCVE on success.
type IsVulnerabilityCVEResponse struct {
	// Ingest a mapping between an OSV entry and a CVE/GHSA vulnerability.
	IngestIsVulnerability IsVulnerabilityCVEIngestIsVulnerability `json:"ingestIsVulnerability"`
}

// GetIngestIsVulnerability returns IsVulnerabilityCVEResponse.IngestIsVulnerability, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEResponse) GetIngestIsVulnerability() IsVulnerabilityCVEIngestIsVulnerability {
	return v.IngestIsVulnerability
}

// IsVulnerabilityGHSAIngestIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type IsVulnerabilityGHSAIngestIsVulnerability struct {
	AllIsVulnerability `json:"-"`
}

// GetId returns IsVulnerabilityGHSAIngestIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetId() string { return v.AllIsVulnerability.Id }

// GetOsv returns IsVulnerabilityGHSAIngestIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetOsv() AllIsVulnerabilityOsvOSV {
	return v.AllIsVulnerability.Osv
}

// GetVulnerability returns IsVulnerabilityGHSAIngestIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetVulnerability() AllIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.AllIsVulnerability.Vulnerability
}

// GetJustification returns IsVulnerabilityGHSAIngestIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetJustification() string {
	return v.AllIsVulnerability.Justification
}

// GetOrigin returns IsVulnerabilityGHSAIngestIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetOrigin() string {
	return v.AllIsVulnerability.Origin
}

// GetCollector returns IsVulnerabilityGHSAIngestIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetCollector() string {
	return v.AllIsVulnerability.Collector
}

func (v *IsVulnerabilityGHSAIngestIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsVulnerabilityGHSAIngestIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.IsVulnerabilityGHSAIngestIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsVulnerabilityGHSAIngestIsVulnerability struct {
	Id string `json:"id"`

	Osv AllIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsVulnerabilityGHSAIngestIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsVulnerabilityGHSAIngestIsVulnerability) __premarshalJSON() (*__premarshalIsVulnerabilityGHSAIngestIsVulnerability, error) {
	var retval __premarshalIsVulnerabilityGHSAIngestIsVulnerability

	retval.Id = v.AllIsVulnerability.Id
	retval.Osv = v.AllIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.AllIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalAllIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal IsVulnerabilityGHSAIngestIsVulnerability.AllIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.AllIsVulnerability.Justification
	retval.Origin = v.AllIsVulnerability.Origin
	retval.Collector = v.AllIsVulnerability.Collector
	return &retval, nil
}

// IsVulnerabilityGHSAResponse is returned by IsVulnerabilityGHSA on success.
type IsVulnerabilityGHSAResponse struct {
	// Ingest a mapping between an OSV entry and a CVE/GHSA vulnerability.
	IngestIsVulnerability IsVulnerabilityGHSAIngestIsVulnerability `json:"ingestIsVulnerability"`
}

// GetIngestIsVulnerability returns IsVulnerabilityGHSAResponse.IngestIsVulnerability, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAResponse) GetIngestIsVulnerability() IsVulnerabilityGHSAIngestIsVulnerability {
	return v.IngestIsVulnerability
}

// IsVulnerabilityInputSpec represents the input to link CVE/GHSA with OSV data.
type IsVulnerabilityInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns IsVulnerabilityInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns IsVulnerabilityInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns IsVulnerabilityInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityInputSpec) GetCollector() string { return v.Collector }

// MatchFlags is used to input the PkgMatchType enum.
type MatchFlags struct {
	Pkg PkgMatchType `json:"pkg"`
}

// GetPkg returns MatchFlags.Pkg, and is useful for accessing the field via an interface.
func (v *MatchFlags) GetPkg() PkgMatchType { return v.Pkg }

// NeighborsNeighborsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type NeighborsNeighborsArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsArtifact.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsArtifact.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns NeighborsNeighborsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns NeighborsNeighborsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *NeighborsNeighborsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *NeighborsNeighborsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsArtifact) __premarshalJSON() (*__premarshalNeighborsNeighborsArtifact, error) {
	var retval __premarshalNeighborsNeighborsArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// NeighborsNeighborsBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type NeighborsNeighborsBuilder struct {
	Typename       *string `json:"__typename"`
	AllBuilderTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsBuilder.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsBuilder) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsBuilder.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsBuilder) GetId() string { return v.AllBuilderTree.Id }

// GetUri returns NeighborsNeighborsBuilder.Uri, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsBuilder) GetUri() string { return v.AllBuilderTree.Uri }

func (v *NeighborsNeighborsBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *NeighborsNeighborsBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsBuilder) __premarshalJSON() (*__premarshalNeighborsNeighborsBuilder, error) {
	var retval __premarshalNeighborsNeighborsBuilder

	retval.Typename = v.Typename
	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// NeighborsNeighborsCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type NeighborsNeighborsCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsCVE.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCVE) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCVE.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns NeighborsNeighborsCVE.Year, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns NeighborsNeighborsCVE.CveId, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *NeighborsNeighborsCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *NeighborsNeighborsCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCVE) __premarshalJSON() (*__premarshalNeighborsNeighborsCVE, error) {
	var retval __premarshalNeighborsNeighborsCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// NeighborsNeighborsCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NeighborsNeighborsCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns NeighborsNeighborsCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetJustification() string {
	return v.AllCertifyBad.Justification
}

// GetSubject returns NeighborsNeighborsCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns NeighborsNeighborsCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns NeighborsNeighborsCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *NeighborsNeighborsCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyBad) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyBad, error) {
	var retval __premarshalNeighborsNeighborsCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// NeighborsNeighborsCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NeighborsNeighborsCertifyGood struct {
	Typename       *string `json:"__typename"`
	AllCertifyGood `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns NeighborsNeighborsCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetJustification() string {
	return v.AllCertifyGood.Justification
}

// GetSubject returns NeighborsNeighborsCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns NeighborsNeighborsCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns NeighborsNeighborsCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *NeighborsNeighborsCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyGood) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyGood, error) {
	var retval __premarshalNeighborsNeighborsCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// NeighborsNeighborsCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type NeighborsNeighborsCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns NeighborsNeighborsCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns NeighborsNeighborsCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *NeighborsNeighborsCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *NeighborsNeighborsCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyScorecard) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyScorecard, error) {
	var retval __premarshalNeighborsNeighborsCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// NeighborsNeighborsCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type NeighborsNeighborsCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	AllCertifyVEXStatement `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetId() string { return v.AllCertifyVEXStatement.Id }

// GetSubject returns NeighborsNeighborsCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns NeighborsNeighborsCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns NeighborsNeighborsCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetStatus() VexStatus {
	return v.AllCertifyVEXStatement.Status
}

// GetVexJustification returns NeighborsNeighborsCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns NeighborsNeighborsCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns NeighborsNeighborsCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns NeighborsNeighborsCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns NeighborsNeighborsCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetOrigin() string {
	return v.AllCertifyVEXStatement.Origin
}

// GetCollector returns NeighborsNeighborsCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *NeighborsNeighborsCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyVEXStatement) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyVEXStatement, error) {
	var retval __premarshalNeighborsNeighborsCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsCertifyVEXStatement.AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// NeighborsNeighborsCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type NeighborsNeighborsCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns NeighborsNeighborsCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns NeighborsNeighborsCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns NeighborsNeighborsCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *NeighborsNeighborsCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *NeighborsNeighborsCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyVuln) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyVuln, error) {
	var retval __premarshalNeighborsNeighborsCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// NeighborsNeighborsGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type NeighborsNeighborsGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns NeighborsNeighborsGHSA.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsGHSA) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsGHSA.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns NeighborsNeighborsGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *NeighborsNeighborsGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *NeighborsNeighborsGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsGHSA) __premarshalJSON() (*__premarshalNeighborsNeighborsGHSA, error) {
	var retval __premarshalNeighborsNeighborsGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// NeighborsNeighborsHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NeighborsNeighborsHasMetadata struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns NeighborsNeighborsHasMetadata.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasMetadata) GetTypename() *string { return v.Typename }

// NeighborsNeighborsHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type NeighborsNeighborsHasSBOM struct {
	Typename       *string `json:"__typename"`
	AllHasSBOMTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns NeighborsNeighborsHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns NeighborsNeighborsHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns NeighborsNeighborsHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns NeighborsNeighborsHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns NeighborsNeighborsHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetDownloadLocation() string {
	return v.AllHasSBOMTree.DownloadLocation
}

// GetOrigin returns NeighborsNeighborsHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns NeighborsNeighborsHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

func (v *NeighborsNeighborsHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHasSBOM) __premarshalJSON() (*__premarshalNeighborsNeighborsHasSBOM, error) {
	var retval __premarshalNeighborsNeighborsHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	return &retval, nil
}

// NeighborsNeighborsHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type NeighborsNeighborsHasSLSA struct {
	Typename    *string `json:"__typename"`
	AllSLSATree `json:"-"`
}

// GetTypename returns NeighborsNeighborsHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetId() string { return v.AllSLSATree.Id }

// GetSubject returns NeighborsNeighborsHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetSubject() AllSLSATreeSubjectArtifact {
	return v.AllSLSATree.Subject
}

// GetSlsa returns NeighborsNeighborsHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetSlsa() AllSLSATreeSlsaSLSA { return v.AllSLSATree.Slsa }

func (v *NeighborsNeighborsHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject AllSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *NeighborsNeighborsHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHasSLSA) __premarshalJSON() (*__premarshalNeighborsNeighborsHasSLSA, error) {
	var retval __premarshalNeighborsNeighborsHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.AllSLSATree.Id
	retval.Subject = v.AllSLSATree.Subject
	retval.Slsa = v.AllSLSATree.Slsa
	return &retval, nil
}

// NeighborsNeighborsHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type NeighborsNeighborsHasSourceAt struct {
	Typename       *string `json:"__typename"`
	AllHasSourceAt `json:"-"`
}

// GetTypename returns NeighborsNeighborsHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetId() string { return v.AllHasSourceAt.Id }

// GetJustification returns NeighborsNeighborsHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetJustification() string {
	return v.AllHasSourceAt.Justification
}

// GetKnownSince returns NeighborsNeighborsHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetKnownSince() time.Time { return v.AllHasSourceAt.KnownSince }

// GetPackage returns NeighborsNeighborsHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetPackage() AllHasSourceAtPackage {
	return v.AllHasSourceAt.Package
}

// GetSource returns NeighborsNeighborsHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetSource() AllHasSourceAtSource {
	return v.AllHasSourceAt.Source
}

// GetOrigin returns NeighborsNeighborsHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetOrigin() string { return v.AllHasSourceAt.Origin }

// GetCollector returns NeighborsNeighborsHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetCollector() string { return v.AllHasSourceAt.Collector }

func (v *NeighborsNeighborsHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHasSourceAt) __premarshalJSON() (*__premarshalNeighborsNeighborsHasSourceAt, error) {
	var retval __premarshalNeighborsNeighborsHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// NeighborsNeighborsHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type NeighborsNeighborsHashEqual struct {
	Typename         *string `json:"__typename"`
	AllHashEqualTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHashEqual.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetId() string { return v.AllHashEqualTree.Id }

// GetJustification returns NeighborsNeighborsHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetJustification() string {
	return v.AllHashEqualTree.Justification
}

// GetArtifacts returns NeighborsNeighborsHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns NeighborsNeighborsHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetOrigin() string { return v.AllHashEqualTree.Origin }

// GetCollector returns NeighborsNeighborsHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetCollector() string { return v.AllHashEqualTree.Collector }

func (v *NeighborsNeighborsHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHashEqual) __premarshalJSON() (*__premarshalNeighborsNeighborsHashEqual, error) {
	var retval __premarshalNeighborsNeighborsHashEqual

	retval.Typename = v.Typename
	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// NeighborsNeighborsIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type NeighborsNeighborsIsDependency struct {
	Typename            *string `json:"__typename"`
	AllIsDependencyTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsIsDependency.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetId() string { return v.AllIsDependencyTree.Id }

// GetJustification returns NeighborsNeighborsIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetJustification() string {
	return v.AllIsDependencyTree.Justification
}

// GetPackage returns NeighborsNeighborsIsDependency.Package, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependentPackage returns NeighborsNeighborsIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetDependentPackage() AllIsDependencyTreeDependentPackage {
	return v.AllIsDependencyTree.DependentPackage
}

// GetDependencyType returns NeighborsNeighborsIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns NeighborsNeighborsIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetVersionRange() string {
	return v.AllIsDependencyTree.VersionRange
}

// GetOrigin returns NeighborsNeighborsIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetOrigin() string { return v.AllIsDependencyTree.Origin }

// GetCollector returns NeighborsNeighborsIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetCollector() string {
	return v.AllIsDependencyTree.Collector
}

func (v *NeighborsNeighborsIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependentPackage AllIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsIsDependency) __premarshalJSON() (*__premarshalNeighborsNeighborsIsDependency, error) {
	var retval __premarshalNeighborsNeighborsIsDependency

	retval.Typename = v.Typename
	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependentPackage = v.AllIsDependencyTree.DependentPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// NeighborsNeighborsIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type NeighborsNeighborsIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns NeighborsNeighborsIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns NeighborsNeighborsIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns NeighborsNeighborsIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns NeighborsNeighborsIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns NeighborsNeighborsIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *NeighborsNeighborsIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsIsOccurrence) __premarshalJSON() (*__premarshalNeighborsNeighborsIsOccurrence, error) {
	var retval __premarshalNeighborsNeighborsIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// NeighborsNeighborsIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type NeighborsNeighborsIsVulnerability struct {
	Typename           *string `json:"__typename"`
	AllIsVulnerability `json:"-"`
}

// GetTypename returns NeighborsNeighborsIsVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetId() string { return v.AllIsVulnerability.Id }

// GetOsv returns NeighborsNeighborsIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetOsv() AllIsVulnerabilityOsvOSV {
	return v.AllIsVulnerability.Osv
}

// GetVulnerability returns NeighborsNeighborsIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetVulnerability() AllIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.AllIsVulnerability.Vulnerability
}

// GetJustification returns NeighborsNeighborsIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetJustification() string {
	return v.AllIsVulnerability.Justification
}

// GetOrigin returns NeighborsNeighborsIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetOrigin() string { return v.AllIsVulnerability.Origin }

// GetCollector returns NeighborsNeighborsIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetCollector() string {
	return v.AllIsVulnerability.Collector
}

func (v *NeighborsNeighborsIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsIsVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Osv AllIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsIsVulnerability) __premarshalJSON() (*__premarshalNeighborsNeighborsIsVulnerability, error) {
	var retval __premarshalNeighborsNeighborsIsVulnerability

	retval.Typename = v.Typename
	retval.Id = v.AllIsVulnerability.Id
	retval.Osv = v.AllIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.AllIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalAllIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsIsVulnerability.AllIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.AllIsVulnerability.Justification
	retval.Origin = v.AllIsVulnerability.Origin
	retval.Collector = v.AllIsVulnerability.Collector
	return &retval, nil
}

// NeighborsNeighborsNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type NeighborsNeighborsNoVuln struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns NeighborsNeighborsNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsNoVuln) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsNoVuln.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsNoVuln) GetId() string { return v.Id }

// NeighborsNeighborsNode includes the requested fields of the GraphQL interface Node.
//
// NeighborsNeighborsNode is implemented by the following types:
// NeighborsNeighborsArtifact
// NeighborsNeighborsBuilder
// NeighborsNeighborsCVE
// NeighborsNeighborsCertifyBad
// NeighborsNeighborsCertifyGood
// NeighborsNeighborsCertifyScorecard
// NeighborsNeighborsCertifyVEXStatement
// NeighborsNeighborsCertifyVuln
// NeighborsNeighborsGHSA
// NeighborsNeighborsHasMetadata
// NeighborsNeighborsHasSBOM
// NeighborsNeighborsHasSLSA
// NeighborsNeighborsHasSourceAt
// NeighborsNeighborsHashEqual
// NeighborsNeighborsIsDependency
// NeighborsNeighborsIsOccurrence
// NeighborsNeighborsIsVulnerability
// NeighborsNeighborsNoVuln
// NeighborsNeighborsOSV
// NeighborsNeighborsPackage
// NeighborsNeighborsPkgEqual
// NeighborsNeighborsPointOfContact
// NeighborsNeighborsSource
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type NeighborsNeighborsNode interface {
	implementsGraphQLInterfaceNeighborsNeighborsNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *NeighborsNeighborsArtifact) implementsGraphQLInterfaceNeighborsNeighborsNode()            {}
func (v *NeighborsNeighborsBuilder) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsCVE) implementsGraphQLInterfaceNeighborsNeighborsNode()                 {}
func (v *NeighborsNeighborsCertifyBad) implementsGraphQLInterfaceNeighborsNeighborsNode()          {}
func (v *NeighborsNeighborsCertifyGood) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsCertifyScorecard) implementsGraphQLInterfaceNeighborsNeighborsNode()    {}
func (v *NeighborsNeighborsCertifyVEXStatement) implementsGraphQLInterfaceNeighborsNeighborsNode() {}
func (v *NeighborsNeighborsCertifyVuln) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsGHSA) implementsGraphQLInterfaceNeighborsNeighborsNode()                {}
func (v *NeighborsNeighborsHasMetadata) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsHasSBOM) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsHasSLSA) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsHasSourceAt) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsHashEqual) implementsGraphQLInterfaceNeighborsNeighborsNode()           {}
func (v *NeighborsNeighborsIsDependency) implementsGraphQLInterfaceNeighborsNeighborsNode()        {}
func (v *NeighborsNeighborsIsOccurrence) implementsGraphQLInterfaceNeighborsNeighborsNode()        {}
func (v *NeighborsNeighborsIsVulnerability) implementsGraphQLInterfaceNeighborsNeighborsNode()     {}
func (v *NeighborsNeighborsNoVuln) implementsGraphQLInterfaceNeighborsNeighborsNode()              {}
func (v *NeighborsNeighborsOSV) implementsGraphQLInterfaceNeighborsNeighborsNode()                 {}
func (v *NeighborsNeighborsPackage) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsPkgEqual) implementsGraphQLInterfaceNeighborsNeighborsNode()            {}
func (v *NeighborsNeighborsPointOfContact) implementsGraphQLInterfaceNeighborsNeighborsNode()      {}
func (v *NeighborsNeighborsSource) implementsGraphQLInterfaceNeighborsNeighborsNode()              {}

func __unmarshalNeighborsNeighborsNode(b []byte, v *NeighborsNeighborsNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(NeighborsNeighborsArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(NeighborsNeighborsBuilder)
		return json.Unmarshal(b, *v)
	case "CVE":
		*v = new(NeighborsNeighborsCVE)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(NeighborsNeighborsCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(NeighborsNeighborsCertifyGood)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(NeighborsNeighborsCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(NeighborsNeighborsCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(NeighborsNeighborsCertifyVuln)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(NeighborsNeighborsGHSA)
		return json.Unmarshal(b, *v)
	case "HasMetadata":
		*v = new(NeighborsNeighborsHasMetadata)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(NeighborsNeighborsHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(NeighborsNeighborsHasSLSA)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(NeighborsNeighborsHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(NeighborsNeighborsHashEqual)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(NeighborsNeighborsIsDependency)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(NeighborsNeighborsIsOccurrence)
		return json.Unmarshal(b, *v)
	case "IsVulnerability":
		*v = new(NeighborsNeighborsIsVulnerability)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(NeighborsNeighborsNoVuln)
		return json.Unmarshal(b, *v)
	case "OSV":
		*v = new(NeighborsNeighborsOSV)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(NeighborsNeighborsPackage)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(NeighborsNeighborsPkgEqual)
		return json.Unmarshal(b, *v)
	case "PointOfContact":
		*v = new(NeighborsNeighborsPointOfContact)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(NeighborsNeighborsSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NeighborsNeighborsNode: "%v"`, tn.TypeName)
	}
}

func __marshalNeighborsNeighborsNode(v *NeighborsNeighborsNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NeighborsNeighborsArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHasMetadata:
		typename = "HasMetadata"

		result := struct {
			TypeName string `json:"__typename"`
			*NeighborsNeighborsHasMetadata
		}{typename, v}
		return json.Marshal(result)
	case *NeighborsNeighborsHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsIsVulnerability:
		typename = "IsVulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsIsVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*NeighborsNeighborsNoVuln
		}{typename, v}
		return json.Marshal(result)
	case *NeighborsNeighborsOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsPkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsPkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsPointOfContact:
		typename = "PointOfContact"

		result := struct {
			TypeName string `json:"__typename"`
			*NeighborsNeighborsPointOfContact
		}{typename, v}
		return json.Marshal(result)
	case *NeighborsNeighborsSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NeighborsNeighborsNode: "%T"`, v)
	}
}

// NeighborsNeighborsOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type NeighborsNeighborsOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsOSV.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsOSV) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsOSV.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns NeighborsNeighborsOSV.OsvId, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *NeighborsNeighborsOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *NeighborsNeighborsOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsOSV) __premarshalJSON() (*__premarshalNeighborsNeighborsOSV, error) {
	var retval __premarshalNeighborsNeighborsOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// NeighborsNeighborsPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type NeighborsNeighborsPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsPackage.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsPackage.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns NeighborsNeighborsPackage.Type, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns NeighborsNeighborsPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *NeighborsNeighborsPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *NeighborsNeighborsPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsPackage) __premarshalJSON() (*__premarshalNeighborsNeighborsPackage, error) {
	var retval __premarshalNeighborsNeighborsPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// NeighborsNeighborsPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type NeighborsNeighborsPkgEqual struct {
	Typename    *string `json:"__typename"`
	AllPkgEqual `json:"-"`
}

// GetTypename returns NeighborsNeighborsPkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetId() string { return v.AllPkgEqual.Id }

// GetJustification returns NeighborsNeighborsPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetJustification() string { return v.AllPkgEqual.Justification }

// GetPackages returns NeighborsNeighborsPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetPackages() []AllPkgEqualPackagesPackage {
	return v.AllPkgEqual.Packages
}

// GetOrigin returns NeighborsNeighborsPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetOrigin() string { return v.AllPkgEqual.Origin }

// GetCollector returns NeighborsNeighborsPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetCollector() string { return v.AllPkgEqual.Collector }

func (v *NeighborsNeighborsPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsPkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsPkgEqual) __premarshalJSON() (*__premarshalNeighborsNeighborsPkgEqual, error) {
	var retval __premarshalNeighborsNeighborsPkgEqual

	retval.Typename = v.Typename
	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// NeighborsNeighborsPointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type NeighborsNeighborsPointOfContact struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns NeighborsNeighborsPointOfContact.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPointOfContact) GetTypename() *string { return v.Typename }

// NeighborsNeighborsSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type NeighborsNeighborsSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsSource.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsSource.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns NeighborsNeighborsSource.Type, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns NeighborsNeighborsSource.Namespaces, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *NeighborsNeighborsSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsSource
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *NeighborsNeighborsSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsSource) __premarshalJSON() (*__premarshalNeighborsNeighborsSource, error) {
	var retval __premarshalNeighborsNeighborsSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// NeighborsResponse is returned by Neighbors on success.
type NeighborsResponse struct {
	// neighbors returns all the direct neighbors of a node.
	//
	// Similarly, the input is only specified by its ID.
	//
	// Specifying any Edge value in `usingOnly` will make the neighbors list only
	// contain the corresponding GUAC evidence trees (GUAC verbs).
	Neighbors []NeighborsNeighborsNode `json:"-"`
}

// GetNeighbors returns NeighborsResponse.Neighbors, and is useful for accessing the field via an interface.
func (v *NeighborsResponse) GetNeighbors() []NeighborsNeighborsNode { return v.Neighbors }

func (v *NeighborsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsResponse
		Neighbors []json.RawMessage `json:"neighbors"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Neighbors
		src := firstPass.Neighbors
		*dst = make(
			[]NeighborsNeighborsNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalNeighborsNeighborsNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal NeighborsResponse.Neighbors: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalNeighborsResponse struct {
	Neighbors []json.RawMessage `json:"neighbors"`
}

func (v *NeighborsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsResponse) __premarshalJSON() (*__premarshalNeighborsResponse, error) {
	var retval __premarshalNeighborsResponse

	{

		dst := &retval.Neighbors
		src := v.Neighbors
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalNeighborsNeighborsNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal NeighborsResponse.Neighbors: %w", err)
			}
		}
	}
	return &retval, nil
}

// NodeNode includes the requested fields of the GraphQL interface Node.
//
// NodeNode is implemented by the following types:
// NodeNodeArtifact
// NodeNodeBuilder
// NodeNodeCVE
// NodeNodeCertifyBad
// NodeNodeCertifyGood
// NodeNodeCertifyScorecard
// NodeNodeCertifyVEXStatement
// NodeNodeCertifyVuln
// NodeNodeGHSA
// NodeNodeHasMetadata
// NodeNodeHasSBOM
// NodeNodeHasSLSA
// NodeNodeHasSourceAt
// NodeNodeHashEqual
// NodeNodeIsDependency
// NodeNodeIsOccurrence
// NodeNodeIsVulnerability
// NodeNodeNoVuln
// NodeNodeOSV
// NodeNodePackage
// NodeNodePkgEqual
// NodeNodePointOfContact
// NodeNodeSource
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type NodeNode interface {
	implementsGraphQLInterfaceNodeNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *NodeNodeArtifact) implementsGraphQLInterfaceNodeNode()            {}
func (v *NodeNodeBuilder) implementsGraphQLInterfaceNodeNode()             {}
func (v *NodeNodeCVE) implementsGraphQLInterfaceNodeNode()                 {}
func (v *NodeNodeCertifyBad) implementsGraphQLInterfaceNodeNode()          {}
func (v *NodeNodeCertifyGood) implementsGraphQLInterfaceNodeNode()         {}
func (v *NodeNodeCertifyScorecard) implementsGraphQLInterfaceNodeNode()    {}
func (v *NodeNodeCertifyVEXStatement) implementsGraphQLInterfaceNodeNode() {}
func (v *NodeNodeCertifyVuln) implementsGraphQLInterfaceNodeNode()         {}
func (v *NodeNodeGHSA) implementsGraphQLInterfaceNodeNode()                {}
func (v *NodeNodeHasMetadata) implementsGraphQLInterfaceNodeNode()         {}
func (v *NodeNodeHasSBOM) implementsGraphQLInterfaceNodeNode()             {}
func (v *NodeNodeHasSLSA) implementsGraphQLInterfaceNodeNode()             {}
func (v *NodeNodeHasSourceAt) implementsGraphQLInterfaceNodeNode()         {}
func (v *NodeNodeHashEqual) implementsGraphQLInterfaceNodeNode()           {}
func (v *NodeNodeIsDependency) implementsGraphQLInterfaceNodeNode()        {}
func (v *NodeNodeIsOccurrence) implementsGraphQLInterfaceNodeNode()        {}
func (v *NodeNodeIsVulnerability) implementsGraphQLInterfaceNodeNode()     {}
func (v *NodeNodeNoVuln) implementsGraphQLInterfaceNodeNode()              {}
func (v *NodeNodeOSV) implementsGraphQLInterfaceNodeNode()                 {}
func (v *NodeNodePackage) implementsGraphQLInterfaceNodeNode()             {}
func (v *NodeNodePkgEqual) implementsGraphQLInterfaceNodeNode()            {}
func (v *NodeNodePointOfContact) implementsGraphQLInterfaceNodeNode()      {}
func (v *NodeNodeSource) implementsGraphQLInterfaceNodeNode()              {}

func __unmarshalNodeNode(b []byte, v *NodeNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(NodeNodeArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(NodeNodeBuilder)
		return json.Unmarshal(b, *v)
	case "CVE":
		*v = new(NodeNodeCVE)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(NodeNodeCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(NodeNodeCertifyGood)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(NodeNodeCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(NodeNodeCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(NodeNodeCertifyVuln)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(NodeNodeGHSA)
		return json.Unmarshal(b, *v)
	case "HasMetadata":
		*v = new(NodeNodeHasMetadata)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(NodeNodeHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(NodeNodeHasSLSA)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(NodeNodeHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(NodeNodeHashEqual)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(NodeNodeIsDependency)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(NodeNodeIsOccurrence)
		return json.Unmarshal(b, *v)
	case "IsVulnerability":
		*v = new(NodeNodeIsVulnerability)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(NodeNodeNoVuln)
		return json.Unmarshal(b, *v)
	case "OSV":
		*v = new(NodeNodeOSV)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(NodeNodePackage)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(NodeNodePkgEqual)
		return json.Unmarshal(b, *v)
	case "PointOfContact":
		*v = new(NodeNodePointOfContact)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(NodeNodeSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NodeNode: "%v"`, tn.TypeName)
	}
}

func __marshalNodeNode(v *NodeNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NodeNodeArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHasMetadata:
		typename = "HasMetadata"

		result := struct {
			TypeName string `json:"__typename"`
			*NodeNodeHasMetadata
		}{typename, v}
		return json.Marshal(result)
	case *NodeNodeHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeIsVulnerability:
		typename = "IsVulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeIsVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*NodeNodeNoVuln
		}{typename, v}
		return json.Marshal(result)
	case *NodeNodeOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodePackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodePackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodePkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodePkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodePointOfContact:
		typename = "PointOfContact"

		result := struct {
			TypeName string `json:"__typename"`
			*NodeNodePointOfContact
		}{typename, v}
		return json.Marshal(result)
	case *NodeNodeSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NodeNode: "%T"`, v)
	}
}

// NodeNodeArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type NodeNodeArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns NodeNodeArtifact.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeArtifact.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns NodeNodeArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns NodeNodeArtifact.Digest, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *NodeNodeArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *NodeNodeArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeArtifact) __premarshalJSON() (*__premarshalNodeNodeArtifact, error) {
	var retval __premarshalNodeNodeArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// NodeNodeBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type NodeNodeBuilder struct {
	Typename       *string `json:"__typename"`
	AllBuilderTree `json:"-"`
}

// GetTypename returns NodeNodeBuilder.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeBuilder) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeBuilder.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeBuilder) GetId() string { return v.AllBuilderTree.Id }

// GetUri returns NodeNodeBuilder.Uri, and is useful for accessing the field via an interface.
func (v *NodeNodeBuilder) GetUri() string { return v.AllBuilderTree.Uri }

func (v *NodeNodeBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *NodeNodeBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeBuilder) __premarshalJSON() (*__premarshalNodeNodeBuilder, error) {
	var retval __premarshalNodeNodeBuilder

	retval.Typename = v.Typename
	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// NodeNodeCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type NodeNodeCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns NodeNodeCVE.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCVE) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCVE.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns NodeNodeCVE.Year, and is useful for accessing the field via an interface.
func (v *NodeNodeCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns NodeNodeCVE.CveId, and is useful for accessing the field via an interface.
func (v *NodeNodeCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *NodeNodeCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *NodeNodeCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCVE) __premarshalJSON() (*__premarshalNodeNodeCVE, error) {
	var retval __premarshalNodeNodeCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// NodeNodeCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodeNodeCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns NodeNodeCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns NodeNodeCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetSubject returns NodeNodeCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns NodeNodeCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns NodeNodeCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *NodeNodeCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyBad) __premarshalJSON() (*__premarshalNodeNodeCertifyBad, error) {
	var retval __premarshalNodeNodeCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// NodeNodeCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodeNodeCertifyGood struct {
	Typename       *string `json:"__typename"`
	AllCertifyGood `json:"-"`
}

// GetTypename returns NodeNodeCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns NodeNodeCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetJustification() string { return v.AllCertifyGood.Justification }

// GetSubject returns NodeNodeCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns NodeNodeCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns NodeNodeCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *NodeNodeCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyGood) __premarshalJSON() (*__premarshalNodeNodeCertifyGood, error) {
	var retval __premarshalNodeNodeCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// NodeNodeCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type NodeNodeCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns NodeNodeCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns NodeNodeCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns NodeNodeCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *NodeNodeCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *NodeNodeCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyScorecard) __premarshalJSON() (*__premarshalNodeNodeCertifyScorecard, error) {
	var retval __premarshalNodeNodeCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// NodeNodeCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type NodeNodeCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	AllCertifyVEXStatement `json:"-"`
}

// GetTypename returns NodeNodeCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetId() string { return v.AllCertifyVEXStatement.Id }

// GetSubject returns NodeNodeCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns NodeNodeCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns NodeNodeCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetStatus() VexStatus { return v.AllCertifyVEXStatement.Status }

// GetVexJustification returns NodeNodeCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns NodeNodeCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns NodeNodeCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns NodeNodeCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns NodeNodeCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetOrigin() string { return v.AllCertifyVEXStatement.Origin }

// GetCollector returns NodeNodeCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *NodeNodeCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyVEXStatement) __premarshalJSON() (*__premarshalNodeNodeCertifyVEXStatement, error) {
	var retval __premarshalNodeNodeCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeCertifyVEXStatement.AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// NodeNodeCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type NodeNodeCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns NodeNodeCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns NodeNodeCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.AllCertifyVuln.Package }

// GetVulnerability returns NodeNodeCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns NodeNodeCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *NodeNodeCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *NodeNodeCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyVuln) __premarshalJSON() (*__premarshalNodeNodeCertifyVuln, error) {
	var retval __premarshalNodeNodeCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// NodeNodeGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type NodeNodeGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns NodeNodeGHSA.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeGHSA) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeGHSA.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns NodeNodeGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *NodeNodeGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *NodeNodeGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *NodeNodeGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeGHSA) __premarshalJSON() (*__premarshalNodeNodeGHSA, error) {
	var retval __premarshalNodeNodeGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// NodeNodeHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodeNodeHasMetadata struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns NodeNodeHasMetadata.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasMetadata) GetTypename() *string { return v.Typename }

// NodeNodeHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type NodeNodeHasSBOM struct {
	Typename       *string `json:"__typename"`
	AllHasSBOMTree `json:"-"`
}

// GetTypename returns NodeNodeHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns NodeNodeHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns NodeNodeHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns NodeNodeHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns NodeNodeHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns NodeNodeHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetDownloadLocation() string { return v.AllHasSBOMTree.DownloadLocation }

// GetOrigin returns NodeNodeHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns NodeNodeHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

func (v *NodeNodeHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHasSBOM) __premarshalJSON() (*__premarshalNodeNodeHasSBOM, error) {
	var retval __premarshalNodeNodeHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	return &retval, nil
}

// NodeNodeHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type NodeNodeHasSLSA struct {
	Typename    *string `json:"__typename"`
	AllSLSATree `json:"-"`
}

// GetTypename returns NodeNodeHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetId() string { return v.AllSLSATree.Id }

// GetSubject returns NodeNodeHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetSubject() AllSLSATreeSubjectArtifact { return v.AllSLSATree.Subject }

// GetSlsa returns NodeNodeHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetSlsa() AllSLSATreeSlsaSLSA { return v.AllSLSATree.Slsa }

func (v *NodeNodeHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject AllSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *NodeNodeHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHasSLSA) __premarshalJSON() (*__premarshalNodeNodeHasSLSA, error) {
	var retval __premarshalNodeNodeHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.AllSLSATree.Id
	retval.Subject = v.AllSLSATree.Subject
	retval.Slsa = v.AllSLSATree.Slsa
	return &retval, nil
}

// NodeNodeHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type NodeNodeHasSourceAt struct {
	Typename       *string `json:"__typename"`
	AllHasSourceAt `json:"-"`
}

// GetTypename returns NodeNodeHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetId() string { return v.AllHasSourceAt.Id }

// GetJustification returns NodeNodeHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetJustification() string { return v.AllHasSourceAt.Justification }

// GetKnownSince returns NodeNodeHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetKnownSince() time.Time { return v.AllHasSourceAt.KnownSince }

// GetPackage returns NodeNodeHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetPackage() AllHasSourceAtPackage { return v.AllHasSourceAt.Package }

// GetSource returns NodeNodeHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetSource() AllHasSourceAtSource { return v.AllHasSourceAt.Source }

// GetOrigin returns NodeNodeHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetOrigin() string { return v.AllHasSourceAt.Origin }

// GetCollector returns NodeNodeHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetCollector() string { return v.AllHasSourceAt.Collector }

func (v *NodeNodeHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHasSourceAt) __premarshalJSON() (*__premarshalNodeNodeHasSourceAt, error) {
	var retval __premarshalNodeNodeHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// NodeNodeHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type NodeNodeHashEqual struct {
	Typename         *string `json:"__typename"`
	AllHashEqualTree `json:"-"`
}

// GetTypename returns NodeNodeHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHashEqual.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetId() string { return v.AllHashEqualTree.Id }

// GetJustification returns NodeNodeHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetJustification() string { return v.AllHashEqualTree.Justification }

// GetArtifacts returns NodeNodeHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns NodeNodeHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetOrigin() string { return v.AllHashEqualTree.Origin }

// GetCollector returns NodeNodeHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetCollector() string { return v.AllHashEqualTree.Collector }

func (v *NodeNodeHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHashEqual) __premarshalJSON() (*__premarshalNodeNodeHashEqual, error) {
	var retval __premarshalNodeNodeHashEqual

	retval.Typename = v.Typename
	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// NodeNodeIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type NodeNodeIsDependency struct {
	Typename            *string `json:"__typename"`
	AllIsDependencyTree `json:"-"`
}

// GetTypename returns NodeNodeIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeIsDependency.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetId() string { return v.AllIsDependencyTree.Id }

// GetJustification returns NodeNodeIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetJustification() string { return v.AllIsDependencyTree.Justification }

// GetPackage returns NodeNodeIsDependency.Package, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependentPackage returns NodeNodeIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetDependentPackage() AllIsDependencyTreeDependentPackage {
	return v.AllIsDependencyTree.DependentPackage
}

// GetDependencyType returns NodeNodeIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns NodeNodeIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetVersionRange() string { return v.AllIsDependencyTree.VersionRange }

// GetOrigin returns NodeNodeIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetOrigin() string { return v.AllIsDependencyTree.Origin }

// GetCollector returns NodeNodeIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetCollector() string { return v.AllIsDependencyTree.Collector }

func (v *NodeNodeIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependentPackage AllIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeIsDependency) __premarshalJSON() (*__premarshalNodeNodeIsDependency, error) {
	var retval __premarshalNodeNodeIsDependency

	retval.Typename = v.Typename
	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependentPackage = v.AllIsDependencyTree.DependentPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// NodeNodeIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type NodeNodeIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns NodeNodeIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns NodeNodeIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns NodeNodeIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns NodeNodeIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetJustification() string { return v.AllIsOccurrencesTree.Justification }

// GetOrigin returns NodeNodeIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns NodeNodeIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetCollector() string { return v.AllIsOccurrencesTree.Collector }

func (v *NodeNodeIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeIsOccurrence) __premarshalJSON() (*__premarshalNodeNodeIsOccurrence, error) {
	var retval __premarshalNodeNodeIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// NodeNodeIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type NodeNodeIsVulnerability struct {
	Typename           *string `json:"__typename"`
	AllIsVulnerability `json:"-"`
}

// GetTypename returns NodeNodeIsVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetId() string { return v.AllIsVulnerability.Id }

// GetOsv returns NodeNodeIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetOsv() AllIsVulnerabilityOsvOSV { return v.AllIsVulnerability.Osv }

// GetVulnerability returns NodeNodeIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetVulnerability() AllIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.AllIsVulnerability.Vulnerability
}

// GetJustification returns NodeNodeIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetJustification() string {
	return v.AllIsVulnerability.Justification
}

// GetOrigin returns NodeNodeIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetOrigin() string { return v.AllIsVulnerability.Origin }

// GetCollector returns NodeNodeIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetCollector() string { return v.AllIsVulnerability.Collector }

func (v *NodeNodeIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeIsVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Osv AllIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeIsVulnerability) __premarshalJSON() (*__premarshalNodeNodeIsVulnerability, error) {
	var retval __premarshalNodeNodeIsVulnerability

	retval.Typename = v.Typename
	retval.Id = v.AllIsVulnerability.Id
	retval.Osv = v.AllIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.AllIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalAllIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeIsVulnerability.AllIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.AllIsVulnerability.Justification
	retval.Origin = v.AllIsVulnerability.Origin
	retval.Collector = v.AllIsVulnerability.Collector
	return &retval, nil
}

// NodeNodeNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type NodeNodeNoVuln struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns NodeNodeNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeNoVuln) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeNoVuln.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeNoVuln) GetId() string { return v.Id }

// NodeNodeOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type NodeNodeOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns NodeNodeOSV.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeOSV) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeOSV.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns NodeNodeOSV.OsvId, and is useful for accessing the field via an interface.
func (v *NodeNodeOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *NodeNodeOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *NodeNodeOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeOSV) __premarshalJSON() (*__premarshalNodeNodeOSV, error) {
	var retval __premarshalNodeNodeOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// NodeNodePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type NodeNodePackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns NodeNodePackage.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetTypename() *string { return v.Typename }

// GetId returns NodeNodePackage.Id, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns NodeNodePackage.Type, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns NodeNodePackage.Namespaces, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *NodeNodePackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodePackage
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodePackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodePackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *NodeNodePackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodePackage) __premarshalJSON() (*__premarshalNodeNodePackage, error) {
	var retval __premarshalNodeNodePackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// NodeNodePkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type NodeNodePkgEqual struct {
	Typename    *string `json:"__typename"`
	AllPkgEqual `json:"-"`
}

// GetTypename returns NodeNodePkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetTypename() *string { return v.Typename }

// GetId returns NodeNodePkgEqual.Id, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetId() string { return v.AllPkgEqual.Id }

// GetJustification returns NodeNodePkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetJustification() string { return v.AllPkgEqual.Justification }

// GetPackages returns NodeNodePkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetPackages() []AllPkgEqualPackagesPackage { return v.AllPkgEqual.Packages }

// GetOrigin returns NodeNodePkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetOrigin() string { return v.AllPkgEqual.Origin }

// GetCollector returns NodeNodePkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetCollector() string { return v.AllPkgEqual.Collector }

func (v *NodeNodePkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodePkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodePkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodePkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodePkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodePkgEqual) __premarshalJSON() (*__premarshalNodeNodePkgEqual, error) {
	var retval __premarshalNodeNodePkgEqual

	retval.Typename = v.Typename
	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// NodeNodePointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type NodeNodePointOfContact struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns NodeNodePointOfContact.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodePointOfContact) GetTypename() *string { return v.Typename }

// NodeNodeSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type NodeNodeSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns NodeNodeSource.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeSource.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns NodeNodeSource.Type, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns NodeNodeSource.Namespaces, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *NodeNodeSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeSource
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *NodeNodeSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeSource) __premarshalJSON() (*__premarshalNodeNodeSource, error) {
	var retval __premarshalNodeNodeSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// NodeResponse is returned by Node on success.
type NodeResponse struct {
	// node returns a single node, regardless of type.
	//
	// The input is only specified by its ID.
	Node NodeNode `json:"-"`
}

// GetNode returns NodeResponse.Node, and is useful for accessing the field via an interface.
func (v *NodeResponse) GetNode() NodeNode { return v.Node }

func (v *NodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeResponse
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalNodeNode(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal NodeResponse.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalNodeResponse struct {
	Node json.RawMessage `json:"node"`
}

func (v *NodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeResponse) __premarshalJSON() (*__premarshalNodeResponse, error) {
	var retval __premarshalNodeResponse

	{

		dst := &retval.Node
		src := v.Node
		var err error
		*dst, err = __marshalNodeNode(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeResponse.Node: %w", err)
		}
	}
	return &retval, nil
}

// NodesNodesArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type NodesNodesArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns NodesNodesArtifact.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesArtifact.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns NodesNodesArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns NodesNodesArtifact.Digest, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *NodesNodesArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *NodesNodesArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesArtifact) __premarshalJSON() (*__premarshalNodesNodesArtifact, error) {
	var retval __premarshalNodesNodesArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// NodesNodesBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type NodesNodesBuilder struct {
	Typename       *string `json:"__typename"`
	AllBuilderTree `json:"-"`
}

// GetTypename returns NodesNodesBuilder.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesBuilder) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesBuilder.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesBuilder) GetId() string { return v.AllBuilderTree.Id }

// GetUri returns NodesNodesBuilder.Uri, and is useful for accessing the field via an interface.
func (v *NodesNodesBuilder) GetUri() string { return v.AllBuilderTree.Uri }

func (v *NodesNodesBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *NodesNodesBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesBuilder) __premarshalJSON() (*__premarshalNodesNodesBuilder, error) {
	var retval __premarshalNodesNodesBuilder

	retval.Typename = v.Typename
	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// NodesNodesCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type NodesNodesCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns NodesNodesCVE.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCVE) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCVE.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns NodesNodesCVE.Year, and is useful for accessing the field via an interface.
func (v *NodesNodesCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns NodesNodesCVE.CveId, and is useful for accessing the field via an interface.
func (v *NodesNodesCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *NodesNodesCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *NodesNodesCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCVE) __premarshalJSON() (*__premarshalNodesNodesCVE, error) {
	var retval __premarshalNodesNodesCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// NodesNodesCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodesNodesCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns NodesNodesCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns NodesNodesCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetSubject returns NodesNodesCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns NodesNodesCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns NodesNodesCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *NodesNodesCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyBad) __premarshalJSON() (*__premarshalNodesNodesCertifyBad, error) {
	var retval __premarshalNodesNodesCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// NodesNodesCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodesNodesCertifyGood struct {
	Typename       *string `json:"__typename"`
	AllCertifyGood `json:"-"`
}

// GetTypename returns NodesNodesCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns NodesNodesCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetJustification() string { return v.AllCertifyGood.Justification }

// GetSubject returns NodesNodesCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns NodesNodesCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns NodesNodesCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *NodesNodesCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyGood) __premarshalJSON() (*__premarshalNodesNodesCertifyGood, error) {
	var retval __premarshalNodesNodesCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// NodesNodesCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type NodesNodesCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns NodesNodesCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns NodesNodesCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns NodesNodesCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *NodesNodesCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *NodesNodesCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyScorecard) __premarshalJSON() (*__premarshalNodesNodesCertifyScorecard, error) {
	var retval __premarshalNodesNodesCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// NodesNodesCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type NodesNodesCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	AllCertifyVEXStatement `json:"-"`
}

// GetTypename returns NodesNodesCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetId() string { return v.AllCertifyVEXStatement.Id }

// GetSubject returns NodesNodesCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns NodesNodesCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns NodesNodesCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetStatus() VexStatus { return v.AllCertifyVEXStatement.Status }

// GetVexJustification returns NodesNodesCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns NodesNodesCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns NodesNodesCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns NodesNodesCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns NodesNodesCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetOrigin() string { return v.AllCertifyVEXStatement.Origin }

// GetCollector returns NodesNodesCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *NodesNodesCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyVEXStatement) __premarshalJSON() (*__premarshalNodesNodesCertifyVEXStatement, error) {
	var retval __premarshalNodesNodesCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesCertifyVEXStatement.AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// NodesNodesCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type NodesNodesCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns NodesNodesCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns NodesNodesCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.AllCertifyVuln.Package }

// GetVulnerability returns NodesNodesCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns NodesNodesCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *NodesNodesCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *NodesNodesCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyVuln) __premarshalJSON() (*__premarshalNodesNodesCertifyVuln, error) {
	var retval __premarshalNodesNodesCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// NodesNodesGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type NodesNodesGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns NodesNodesGHSA.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesGHSA) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesGHSA.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns NodesNodesGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *NodesNodesGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *NodesNodesGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *NodesNodesGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesGHSA) __premarshalJSON() (*__premarshalNodesNodesGHSA, error) {
	var retval __premarshalNodesNodesGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// NodesNodesHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodesNodesHasMetadata struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns NodesNodesHasMetadata.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasMetadata) GetTypename() *string { return v.Typename }

// NodesNodesHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type NodesNodesHasSBOM struct {
	Typename       *string `json:"__typename"`
	AllHasSBOMTree `json:"-"`
}

// GetTypename returns NodesNodesHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns NodesNodesHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns NodesNodesHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns NodesNodesHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns NodesNodesHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns NodesNodesHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetDownloadLocation() string { return v.AllHasSBOMTree.DownloadLocation }

// GetOrigin returns NodesNodesHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns NodesNodesHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

func (v *NodesNodesHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHasSBOM) __premarshalJSON() (*__premarshalNodesNodesHasSBOM, error) {
	var retval __premarshalNodesNodesHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	return &retval, nil
}

// NodesNodesHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type NodesNodesHasSLSA struct {
	Typename    *string `json:"__typename"`
	AllSLSATree `json:"-"`
}

// GetTypename returns NodesNodesHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetId() string { return v.AllSLSATree.Id }

// GetSubject returns NodesNodesHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetSubject() AllSLSATreeSubjectArtifact { return v.AllSLSATree.Subject }

// GetSlsa returns NodesNodesHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetSlsa() AllSLSATreeSlsaSLSA { return v.AllSLSATree.Slsa }

func (v *NodesNodesHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject AllSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *NodesNodesHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHasSLSA) __premarshalJSON() (*__premarshalNodesNodesHasSLSA, error) {
	var retval __premarshalNodesNodesHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.AllSLSATree.Id
	retval.Subject = v.AllSLSATree.Subject
	retval.Slsa = v.AllSLSATree.Slsa
	return &retval, nil
}

// NodesNodesHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type NodesNodesHasSourceAt struct {
	Typename       *string `json:"__typename"`
	AllHasSourceAt `json:"-"`
}

// GetTypename returns NodesNodesHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetId() string { return v.AllHasSourceAt.Id }

// GetJustification returns NodesNodesHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetJustification() string { return v.AllHasSourceAt.Justification }

// GetKnownSince returns NodesNodesHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetKnownSince() time.Time { return v.AllHasSourceAt.KnownSince }

// GetPackage returns NodesNodesHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetPackage() AllHasSourceAtPackage { return v.AllHasSourceAt.Package }

// GetSource returns NodesNodesHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetSource() AllHasSourceAtSource { return v.AllHasSourceAt.Source }

// GetOrigin returns NodesNodesHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetOrigin() string { return v.AllHasSourceAt.Origin }

// GetCollector returns NodesNodesHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetCollector() string { return v.AllHasSourceAt.Collector }

func (v *NodesNodesHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHasSourceAt) __premarshalJSON() (*__premarshalNodesNodesHasSourceAt, error) {
	var retval __premarshalNodesNodesHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// NodesNodesHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type NodesNodesHashEqual struct {
	Typename         *string `json:"__typename"`
	AllHashEqualTree `json:"-"`
}

// GetTypename returns NodesNodesHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHashEqual.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetId() string { return v.AllHashEqualTree.Id }

// GetJustification returns NodesNodesHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetJustification() string { return v.AllHashEqualTree.Justification }

// GetArtifacts returns NodesNodesHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns NodesNodesHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetOrigin() string { return v.AllHashEqualTree.Origin }

// GetCollector returns NodesNodesHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetCollector() string { return v.AllHashEqualTree.Collector }

func (v *NodesNodesHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHashEqual) __premarshalJSON() (*__premarshalNodesNodesHashEqual, error) {
	var retval __premarshalNodesNodesHashEqual

	retval.Typename = v.Typename
	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// NodesNodesIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type NodesNodesIsDependency struct {
	Typename            *string `json:"__typename"`
	AllIsDependencyTree `json:"-"`
}

// GetTypename returns NodesNodesIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesIsDependency.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetId() string { return v.AllIsDependencyTree.Id }

// GetJustification returns NodesNodesIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetJustification() string {
	return v.AllIsDependencyTree.Justification
}

// GetPackage returns NodesNodesIsDependency.Package, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependentPackage returns NodesNodesIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetDependentPackage() AllIsDependencyTreeDependentPackage {
	return v.AllIsDependencyTree.DependentPackage
}

// GetDependencyType returns NodesNodesIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns NodesNodesIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetVersionRange() string { return v.AllIsDependencyTree.VersionRange }

// GetOrigin returns NodesNodesIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetOrigin() string { return v.AllIsDependencyTree.Origin }

// GetCollector returns NodesNodesIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetCollector() string { return v.AllIsDependencyTree.Collector }

func (v *NodesNodesIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependentPackage AllIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesIsDependency) __premarshalJSON() (*__premarshalNodesNodesIsDependency, error) {
	var retval __premarshalNodesNodesIsDependency

	retval.Typename = v.Typename
	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependentPackage = v.AllIsDependencyTree.DependentPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// NodesNodesIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type NodesNodesIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns NodesNodesIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns NodesNodesIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns NodesNodesIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns NodesNodesIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns NodesNodesIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns NodesNodesIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetCollector() string { return v.AllIsOccurrencesTree.Collector }

func (v *NodesNodesIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesIsOccurrence) __premarshalJSON() (*__premarshalNodesNodesIsOccurrence, error) {
	var retval __premarshalNodesNodesIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// NodesNodesIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type NodesNodesIsVulnerability struct {
	Typename           *string `json:"__typename"`
	AllIsVulnerability `json:"-"`
}

// GetTypename returns NodesNodesIsVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetId() string { return v.AllIsVulnerability.Id }

// GetOsv returns NodesNodesIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetOsv() AllIsVulnerabilityOsvOSV {
	return v.AllIsVulnerability.Osv
}

// GetVulnerability returns NodesNodesIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetVulnerability() AllIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.AllIsVulnerability.Vulnerability
}

// GetJustification returns NodesNodesIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetJustification() string {
	return v.AllIsVulnerability.Justification
}

// GetOrigin returns NodesNodesIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetOrigin() string { return v.AllIsVulnerability.Origin }

// GetCollector returns NodesNodesIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetCollector() string { return v.AllIsVulnerability.Collector }

func (v *NodesNodesIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesIsVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Osv AllIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesIsVulnerability) __premarshalJSON() (*__premarshalNodesNodesIsVulnerability, error) {
	var retval __premarshalNodesNodesIsVulnerability

	retval.Typename = v.Typename
	retval.Id = v.AllIsVulnerability.Id
	retval.Osv = v.AllIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.AllIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalAllIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesIsVulnerability.AllIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.AllIsVulnerability.Justification
	retval.Origin = v.AllIsVulnerability.Origin
	retval.Collector = v.AllIsVulnerability.Collector
	return &retval, nil
}

// NodesNodesNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type NodesNodesNoVuln struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns NodesNodesNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesNoVuln) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesNoVuln.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesNoVuln) GetId() string { return v.Id }

// NodesNodesNode includes the requested fields of the GraphQL interface Node.
//
// NodesNodesNode is implemented by the following types:
// NodesNodesArtifact
// NodesNodesBuilder
// NodesNodesCVE
// NodesNodesCertifyBad
// NodesNodesCertifyGood
// NodesNodesCertifyScorecard
// NodesNodesCertifyVEXStatement
// NodesNodesCertifyVuln
// NodesNodesGHSA
// NodesNodesHasMetadata
// NodesNodesHasSBOM
// NodesNodesHasSLSA
// NodesNodesHasSourceAt
// NodesNodesHashEqual
// NodesNodesIsDependency
// NodesNodesIsOccurrence
// NodesNodesIsVulnerability
// NodesNodesNoVuln
// NodesNodesOSV
// NodesNodesPackage
// NodesNodesPkgEqual
// NodesNodesPointOfContact
// NodesNodesSource
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type NodesNodesNode interface {
	implementsGraphQLInterfaceNodesNodesNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *NodesNodesArtifact) implementsGraphQLInterfaceNodesNodesNode()            {}
func (v *NodesNodesBuilder) implementsGraphQLInterfaceNodesNodesNode()             {}
func (v *NodesNodesCVE) implementsGraphQLInterfaceNodesNodesNode()                 {}
func (v *NodesNodesCertifyBad) implementsGraphQLInterfaceNodesNodesNode()          {}
func (v *NodesNodesCertifyGood) implementsGraphQLInterfaceNodesNodesNode()         {}
func (v *NodesNodesCertifyScorecard) implementsGraphQLInterfaceNodesNodesNode()    {}
func (v *NodesNodesCertifyVEXStatement) implementsGraphQLInterfaceNodesNodesNode() {}
func (v *NodesNodesCertifyVuln) implementsGraphQLInterfaceNodesNodesNode()         {}
func (v *NodesNodesGHSA) implementsGraphQLInterfaceNodesNodesNode()                {}
func (v *NodesNodesHasMetadata) implementsGraphQLInterfaceNodesNodesNode()         {}
func (v *NodesNodesHasSBOM) implementsGraphQLInterfaceNodesNodesNode()             {}
func (v *NodesNodesHasSLSA) implementsGraphQLInterfaceNodesNodesNode()             {}
func (v *NodesNodesHasSourceAt) implementsGraphQLInterfaceNodesNodesNode()         {}
func (v *NodesNodesHashEqual) implementsGraphQLInterfaceNodesNodesNode()           {}
func (v *NodesNodesIsDependency) implementsGraphQLInterfaceNodesNodesNode()        {}
func (v *NodesNodesIsOccurrence) implementsGraphQLInterfaceNodesNodesNode()        {}
func (v *NodesNodesIsVulnerability) implementsGraphQLInterfaceNodesNodesNode()     {}
func (v *NodesNodesNoVuln) implementsGraphQLInterfaceNodesNodesNode()              {}
func (v *NodesNodesOSV) implementsGraphQLInterfaceNodesNodesNode()                 {}
func (v *NodesNodesPackage) implementsGraphQLInterfaceNodesNodesNode()             {}
func (v *NodesNodesPkgEqual) implementsGraphQLInterfaceNodesNodesNode()            {}
func (v *NodesNodesPointOfContact) implementsGraphQLInterfaceNodesNodesNode()      {}
func (v *NodesNodesSource) implementsGraphQLInterfaceNodesNodesNode()              {}

func __unmarshalNodesNodesNode(b []byte, v *NodesNodesNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(NodesNodesArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(NodesNodesBuilder)
		return json.Unmarshal(b, *v)
	case "CVE":
		*v = new(NodesNodesCVE)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(NodesNodesCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(NodesNodesCertifyGood)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(NodesNodesCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(NodesNodesCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(NodesNodesCertifyVuln)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(NodesNodesGHSA)
		return json.Unmarshal(b, *v)
	case "HasMetadata":
		*v = new(NodesNodesHasMetadata)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(NodesNodesHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(NodesNodesHasSLSA)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(NodesNodesHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(NodesNodesHashEqual)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(NodesNodesIsDependency)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(NodesNodesIsOccurrence)
		return json.Unmarshal(b, *v)
	case "IsVulnerability":
		*v = new(NodesNodesIsVulnerability)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(NodesNodesNoVuln)
		return json.Unmarshal(b, *v)
	case "OSV":
		*v = new(NodesNodesOSV)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(NodesNodesPackage)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(NodesNodesPkgEqual)
		return json.Unmarshal(b, *v)
	case "PointOfContact":
		*v = new(NodesNodesPointOfContact)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(NodesNodesSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NodesNodesNode: "%v"`, tn.TypeName)
	}
}

func __marshalNodesNodesNode(v *NodesNodesNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NodesNodesArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHasMetadata:
		typename = "HasMetadata"

		result := struct {
			TypeName string `json:"__typename"`
			*NodesNodesHasMetadata
		}{typename, v}
		return json.Marshal(result)
	case *NodesNodesHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesIsVulnerability:
		typename = "IsVulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesIsVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*NodesNodesNoVuln
		}{typename, v}
		return json.Marshal(result)
	case *NodesNodesOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesPkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesPkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesPointOfContact:
		typename = "PointOfContact"

		result := struct {
			TypeName string `json:"__typename"`
			*NodesNodesPointOfContact
		}{typename, v}
		return json.Marshal(result)
	case *NodesNodesSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NodesNodesNode: "%T"`, v)
	}
}

// NodesNodesOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type NodesNodesOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns NodesNodesOSV.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesOSV) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesOSV.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns NodesNodesOSV.OsvId, and is useful for accessing the field via an interface.
func (v *NodesNodesOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *NodesNodesOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *NodesNodesOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesOSV) __premarshalJSON() (*__premarshalNodesNodesOSV, error) {
	var retval __premarshalNodesNodesOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// NodesNodesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type NodesNodesPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns NodesNodesPackage.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesPackage.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns NodesNodesPackage.Type, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns NodesNodesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *NodesNodesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *NodesNodesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesPackage) __premarshalJSON() (*__premarshalNodesNodesPackage, error) {
	var retval __premarshalNodesNodesPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// NodesNodesPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type NodesNodesPkgEqual struct {
	Typename    *string `json:"__typename"`
	AllPkgEqual `json:"-"`
}

// GetTypename returns NodesNodesPkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetId() string { return v.AllPkgEqual.Id }

// GetJustification returns NodesNodesPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetJustification() string { return v.AllPkgEqual.Justification }

// GetPackages returns NodesNodesPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetPackages() []AllPkgEqualPackagesPackage {
	return v.AllPkgEqual.Packages
}

// GetOrigin returns NodesNodesPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetOrigin() string { return v.AllPkgEqual.Origin }

// GetCollector returns NodesNodesPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetCollector() string { return v.AllPkgEqual.Collector }

func (v *NodesNodesPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesPkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesPkgEqual) __premarshalJSON() (*__premarshalNodesNodesPkgEqual, error) {
	var retval __premarshalNodesNodesPkgEqual

	retval.Typename = v.Typename
	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// NodesNodesPointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type NodesNodesPointOfContact struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns NodesNodesPointOfContact.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesPointOfContact) GetTypename() *string { return v.Typename }

// NodesNodesSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type NodesNodesSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns NodesNodesSource.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesSource.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns NodesNodesSource.Type, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns NodesNodesSource.Namespaces, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *NodesNodesSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesSource
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *NodesNodesSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesSource) __premarshalJSON() (*__premarshalNodesNodesSource, error) {
	var retval __premarshalNodesNodesSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// NodesResponse is returned by Nodes on success.
type NodesResponse struct {
	// nodes returns an array of nodes, regardless of type.
	//
	// The input is an array of IDs to retrieve.
	Nodes []NodesNodesNode `json:"-"`
}

// GetNodes returns NodesResponse.Nodes, and is useful for accessing the field via an interface.
func (v *NodesResponse) GetNodes() []NodesNodesNode { return v.Nodes }

func (v *NodesResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesResponse
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]NodesNodesNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalNodesNodesNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal NodesResponse.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalNodesResponse struct {
	Nodes []json.RawMessage `json:"nodes"`
}

func (v *NodesResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesResponse) __premarshalJSON() (*__premarshalNodesResponse, error) {
	var retval __premarshalNodesResponse

	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalNodesNodesNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal NodesResponse.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// OSVInputSpec specifies a OSV vulnerability for mutations.
type OSVInputSpec struct {
	OsvId string `json:"osvId"`
}

// GetOsvId returns OSVInputSpec.OsvId, and is useful for accessing the field via an interface.
func (v *OSVInputSpec) GetOsvId() string { return v.OsvId }

// OSVSpec allows filtering the list of advisories to return in a query.
type OSVSpec struct {
	Id    *string `json:"id"`
	OsvId *string `json:"osvId"`
}

// GetId returns OSVSpec.Id, and is useful for accessing the field via an interface.
func (v *OSVSpec) GetId() *string { return v.Id }

// GetOsvId returns OSVSpec.OsvId, and is useful for accessing the field via an interface.
func (v *OSVSpec) GetOsvId() *string { return v.OsvId }

// OSVsOsvOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type OSVsOsvOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns OSVsOsvOSV.Id, and is useful for accessing the field via an interface.
func (v *OSVsOsvOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns OSVsOsvOSV.OsvId, and is useful for accessing the field via an interface.
func (v *OSVsOsvOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *OSVsOsvOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*OSVsOsvOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.OSVsOsvOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalOSVsOsvOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *OSVsOsvOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *OSVsOsvOSV) __premarshalJSON() (*__premarshalOSVsOsvOSV, error) {
	var retval __premarshalOSVsOsvOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// OSVsResponse is returned by OSVs on success.
type OSVsResponse struct {
	// Returns all OSV vulnerabilities matching a filter.
	Osv []OSVsOsvOSV `json:"osv"`
}

// GetOsv returns OSVsResponse.Osv, and is useful for accessing the field via an interface.
func (v *OSVsResponse) GetOsv() []OSVsOsvOSV { return v.Osv }

// PackageQualifierInputSpec allows specifying package qualifiers in mutations.
type PackageQualifierInputSpec struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns PackageQualifierInputSpec.Key, and is useful for accessing the field via an interface.
func (v *PackageQualifierInputSpec) GetKey() string { return v.Key }

// GetValue returns PackageQualifierInputSpec.Value, and is useful for accessing the field via an interface.
func (v *PackageQualifierInputSpec) GetValue() string { return v.Value }

// PackageQualifierSpec allows filtering package qualifiers in a query.
//
// Keys are mandatory, but values could also be null if we want to match all
// values for a specific key.
//
// NOTE: Before the schema becomes stable, we might change the nulability
// requirements of these fields.
type PackageQualifierSpec struct {
	Key   string  `json:"key"`
	Value *string `json:"value"`
}

// GetKey returns PackageQualifierSpec.Key, and is useful for accessing the field via an interface.
func (v *PackageQualifierSpec) GetKey() string { return v.Key }

// GetValue returns PackageQualifierSpec.Value, and is useful for accessing the field via an interface.
func (v *PackageQualifierSpec) GetValue() *string { return v.Value }

// PackageSourceOrArtifactSpec allows using PackageSourceOrArtifact union as
// input type to be used in read queries.
//
// Exactly one of the value must be set to non-nil.
type PackageSourceOrArtifactSpec struct {
	Package  *PkgSpec      `json:"package"`
	Source   *SourceSpec   `json:"source"`
	Artifact *ArtifactSpec `json:"artifact"`
}

// GetPackage returns PackageSourceOrArtifactSpec.Package, and is useful for accessing the field via an interface.
func (v *PackageSourceOrArtifactSpec) GetPackage() *PkgSpec { return v.Package }

// GetSource returns PackageSourceOrArtifactSpec.Source, and is useful for accessing the field via an interface.
func (v *PackageSourceOrArtifactSpec) GetSource() *SourceSpec { return v.Source }

// GetArtifact returns PackageSourceOrArtifactSpec.Artifact, and is useful for accessing the field via an interface.
func (v *PackageSourceOrArtifactSpec) GetArtifact() *ArtifactSpec { return v.Artifact }

// PackagesPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PackagesPackagesPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns PackagesPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *PackagesPackagesPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns PackagesPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *PackagesPackagesPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns PackagesPackagesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PackagesPackagesPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PackagesPackagesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PackagesPackagesPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PackagesPackagesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPackagesPackagesPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PackagesPackagesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PackagesPackagesPackage) __premarshalJSON() (*__premarshalPackagesPackagesPackage, error) {
	var retval __premarshalPackagesPackagesPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PackagesResponse is returned by Packages on success.
type PackagesResponse struct {
	// Returns all packages matching a filter.
	Packages []PackagesPackagesPackage `json:"packages"`
}

// GetPackages returns PackagesResponse.Packages, and is useful for accessing the field via an interface.
func (v *PackagesResponse) GetPackages() []PackagesPackagesPackage { return v.Packages }

// PathPathArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type PathPathArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns PathPathArtifact.Typename, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetTypename() *string { return v.Typename }

// GetId returns PathPathArtifact.Id, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns PathPathArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns PathPathArtifact.Digest, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *PathPathArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *PathPathArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathArtifact) __premarshalJSON() (*__premarshalPathPathArtifact, error) {
	var retval __premarshalPathPathArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// PathPathBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type PathPathBuilder struct {
	Typename       *string `json:"__typename"`
	AllBuilderTree `json:"-"`
}

// GetTypename returns PathPathBuilder.Typename, and is useful for accessing the field via an interface.
func (v *PathPathBuilder) GetTypename() *string { return v.Typename }

// GetId returns PathPathBuilder.Id, and is useful for accessing the field via an interface.
func (v *PathPathBuilder) GetId() string { return v.AllBuilderTree.Id }

// GetUri returns PathPathBuilder.Uri, and is useful for accessing the field via an interface.
func (v *PathPathBuilder) GetUri() string { return v.AllBuilderTree.Uri }

func (v *PathPathBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *PathPathBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathBuilder) __premarshalJSON() (*__premarshalPathPathBuilder, error) {
	var retval __premarshalPathPathBuilder

	retval.Typename = v.Typename
	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// PathPathCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type PathPathCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns PathPathCVE.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCVE) GetTypename() *string { return v.Typename }

// GetId returns PathPathCVE.Id, and is useful for accessing the field via an interface.
func (v *PathPathCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns PathPathCVE.Year, and is useful for accessing the field via an interface.
func (v *PathPathCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns PathPathCVE.CveId, and is useful for accessing the field via an interface.
func (v *PathPathCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *PathPathCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *PathPathCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCVE) __premarshalJSON() (*__premarshalPathPathCVE, error) {
	var retval __premarshalPathPathCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// PathPathCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type PathPathCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns PathPathCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns PathPathCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetSubject returns PathPathCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns PathPathCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns PathPathCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *PathPathCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyBad) __premarshalJSON() (*__premarshalPathPathCertifyBad, error) {
	var retval __premarshalPathPathCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// PathPathCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type PathPathCertifyGood struct {
	Typename       *string `json:"__typename"`
	AllCertifyGood `json:"-"`
}

// GetTypename returns PathPathCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns PathPathCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetJustification() string { return v.AllCertifyGood.Justification }

// GetSubject returns PathPathCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns PathPathCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns PathPathCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *PathPathCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyGood) __premarshalJSON() (*__premarshalPathPathCertifyGood, error) {
	var retval __premarshalPathPathCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// PathPathCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type PathPathCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns PathPathCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns PathPathCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns PathPathCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *PathPathCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *PathPathCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyScorecard) __premarshalJSON() (*__premarshalPathPathCertifyScorecard, error) {
	var retval __premarshalPathPathCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// PathPathCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type PathPathCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	AllCertifyVEXStatement `json:"-"`
}

// GetTypename returns PathPathCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetId() string { return v.AllCertifyVEXStatement.Id }

// GetSubject returns PathPathCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns PathPathCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns PathPathCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetStatus() VexStatus { return v.AllCertifyVEXStatement.Status }

// GetVexJustification returns PathPathCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns PathPathCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns PathPathCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns PathPathCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns PathPathCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetOrigin() string { return v.AllCertifyVEXStatement.Origin }

// GetCollector returns PathPathCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *PathPathCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyVEXStatement) __premarshalJSON() (*__premarshalPathPathCertifyVEXStatement, error) {
	var retval __premarshalPathPathCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathCertifyVEXStatement.AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// PathPathCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type PathPathCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns PathPathCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns PathPathCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.AllCertifyVuln.Package }

// GetVulnerability returns PathPathCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns PathPathCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *PathPathCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *PathPathCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyVuln) __premarshalJSON() (*__premarshalPathPathCertifyVuln, error) {
	var retval __premarshalPathPathCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// PathPathGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type PathPathGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns PathPathGHSA.Typename, and is useful for accessing the field via an interface.
func (v *PathPathGHSA) GetTypename() *string { return v.Typename }

// GetId returns PathPathGHSA.Id, and is useful for accessing the field via an interface.
func (v *PathPathGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns PathPathGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *PathPathGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *PathPathGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *PathPathGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathGHSA) __premarshalJSON() (*__premarshalPathPathGHSA, error) {
	var retval __premarshalPathPathGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// PathPathHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type PathPathHasMetadata struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns PathPathHasMetadata.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasMetadata) GetTypename() *string { return v.Typename }

// PathPathHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type PathPathHasSBOM struct {
	Typename       *string `json:"__typename"`
	AllHasSBOMTree `json:"-"`
}

// GetTypename returns PathPathHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns PathPathHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns PathPathHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns PathPathHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns PathPathHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns PathPathHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns PathPathHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetDownloadLocation() string { return v.AllHasSBOMTree.DownloadLocation }

// GetOrigin returns PathPathHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns PathPathHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

func (v *PathPathHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHasSBOM) __premarshalJSON() (*__premarshalPathPathHasSBOM, error) {
	var retval __premarshalPathPathHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	return &retval, nil
}

// PathPathHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type PathPathHasSLSA struct {
	Typename    *string `json:"__typename"`
	AllSLSATree `json:"-"`
}

// GetTypename returns PathPathHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns PathPathHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetId() string { return v.AllSLSATree.Id }

// GetSubject returns PathPathHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetSubject() AllSLSATreeSubjectArtifact { return v.AllSLSATree.Subject }

// GetSlsa returns PathPathHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetSlsa() AllSLSATreeSlsaSLSA { return v.AllSLSATree.Slsa }

func (v *PathPathHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject AllSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *PathPathHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHasSLSA) __premarshalJSON() (*__premarshalPathPathHasSLSA, error) {
	var retval __premarshalPathPathHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.AllSLSATree.Id
	retval.Subject = v.AllSLSATree.Subject
	retval.Slsa = v.AllSLSATree.Slsa
	return &retval, nil
}

// PathPathHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type PathPathHasSourceAt struct {
	Typename       *string `json:"__typename"`
	AllHasSourceAt `json:"-"`
}

// GetTypename returns PathPathHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns PathPathHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetId() string { return v.AllHasSourceAt.Id }

// GetJustification returns PathPathHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetJustification() string { return v.AllHasSourceAt.Justification }

// GetKnownSince returns PathPathHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetKnownSince() time.Time { return v.AllHasSourceAt.KnownSince }

// GetPackage returns PathPathHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetPackage() AllHasSourceAtPackage { return v.AllHasSourceAt.Package }

// GetSource returns PathPathHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetSource() AllHasSourceAtSource { return v.AllHasSourceAt.Source }

// GetOrigin returns PathPathHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetOrigin() string { return v.AllHasSourceAt.Origin }

// GetCollector returns PathPathHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetCollector() string { return v.AllHasSourceAt.Collector }

func (v *PathPathHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHasSourceAt) __premarshalJSON() (*__premarshalPathPathHasSourceAt, error) {
	var retval __premarshalPathPathHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// PathPathHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type PathPathHashEqual struct {
	Typename         *string `json:"__typename"`
	AllHashEqualTree `json:"-"`
}

// GetTypename returns PathPathHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetTypename() *string { return v.Typename }

// GetId returns PathPathHashEqual.Id, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetId() string { return v.AllHashEqualTree.Id }

// GetJustification returns PathPathHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetJustification() string { return v.AllHashEqualTree.Justification }

// GetArtifacts returns PathPathHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns PathPathHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetOrigin() string { return v.AllHashEqualTree.Origin }

// GetCollector returns PathPathHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetCollector() string { return v.AllHashEqualTree.Collector }

func (v *PathPathHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHashEqual) __premarshalJSON() (*__premarshalPathPathHashEqual, error) {
	var retval __premarshalPathPathHashEqual

	retval.Typename = v.Typename
	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// PathPathIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type PathPathIsDependency struct {
	Typename            *string `json:"__typename"`
	AllIsDependencyTree `json:"-"`
}

// GetTypename returns PathPathIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetTypename() *string { return v.Typename }

// GetId returns PathPathIsDependency.Id, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetId() string { return v.AllIsDependencyTree.Id }

// GetJustification returns PathPathIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetJustification() string { return v.AllIsDependencyTree.Justification }

// GetPackage returns PathPathIsDependency.Package, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependentPackage returns PathPathIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetDependentPackage() AllIsDependencyTreeDependentPackage {
	return v.AllIsDependencyTree.DependentPackage
}

// GetDependencyType returns PathPathIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns PathPathIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetVersionRange() string { return v.AllIsDependencyTree.VersionRange }

// GetOrigin returns PathPathIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetOrigin() string { return v.AllIsDependencyTree.Origin }

// GetCollector returns PathPathIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetCollector() string { return v.AllIsDependencyTree.Collector }

func (v *PathPathIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependentPackage AllIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathIsDependency) __premarshalJSON() (*__premarshalPathPathIsDependency, error) {
	var retval __premarshalPathPathIsDependency

	retval.Typename = v.Typename
	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependentPackage = v.AllIsDependencyTree.DependentPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// PathPathIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type PathPathIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns PathPathIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns PathPathIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns PathPathIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns PathPathIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns PathPathIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetJustification() string { return v.AllIsOccurrencesTree.Justification }

// GetOrigin returns PathPathIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns PathPathIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetCollector() string { return v.AllIsOccurrencesTree.Collector }

func (v *PathPathIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathIsOccurrence) __premarshalJSON() (*__premarshalPathPathIsOccurrence, error) {
	var retval __premarshalPathPathIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// PathPathIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type PathPathIsVulnerability struct {
	Typename           *string `json:"__typename"`
	AllIsVulnerability `json:"-"`
}

// GetTypename returns PathPathIsVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetTypename() *string { return v.Typename }

// GetId returns PathPathIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetId() string { return v.AllIsVulnerability.Id }

// GetOsv returns PathPathIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetOsv() AllIsVulnerabilityOsvOSV { return v.AllIsVulnerability.Osv }

// GetVulnerability returns PathPathIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetVulnerability() AllIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.AllIsVulnerability.Vulnerability
}

// GetJustification returns PathPathIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetJustification() string {
	return v.AllIsVulnerability.Justification
}

// GetOrigin returns PathPathIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetOrigin() string { return v.AllIsVulnerability.Origin }

// GetCollector returns PathPathIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetCollector() string { return v.AllIsVulnerability.Collector }

func (v *PathPathIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathIsVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Osv AllIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathIsVulnerability) __premarshalJSON() (*__premarshalPathPathIsVulnerability, error) {
	var retval __premarshalPathPathIsVulnerability

	retval.Typename = v.Typename
	retval.Id = v.AllIsVulnerability.Id
	retval.Osv = v.AllIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.AllIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalAllIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathIsVulnerability.AllIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.AllIsVulnerability.Justification
	retval.Origin = v.AllIsVulnerability.Origin
	retval.Collector = v.AllIsVulnerability.Collector
	return &retval, nil
}

// PathPathNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type PathPathNoVuln struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns PathPathNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *PathPathNoVuln) GetTypename() *string { return v.Typename }

// GetId returns PathPathNoVuln.Id, and is useful for accessing the field via an interface.
func (v *PathPathNoVuln) GetId() string { return v.Id }

// PathPathNode includes the requested fields of the GraphQL interface Node.
//
// PathPathNode is implemented by the following types:
// PathPathArtifact
// PathPathBuilder
// PathPathCVE
// PathPathCertifyBad
// PathPathCertifyGood
// PathPathCertifyScorecard
// PathPathCertifyVEXStatement
// PathPathCertifyVuln
// PathPathGHSA
// PathPathHasMetadata
// PathPathHasSBOM
// PathPathHasSLSA
// PathPathHasSourceAt
// PathPathHashEqual
// PathPathIsDependency
// PathPathIsOccurrence
// PathPathIsVulnerability
// PathPathNoVuln
// PathPathOSV
// PathPathPackage
// PathPathPkgEqual
// PathPathPointOfContact
// PathPathSource
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type PathPathNode interface {
	implementsGraphQLInterfacePathPathNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *PathPathArtifact) implementsGraphQLInterfacePathPathNode()            {}
func (v *PathPathBuilder) implementsGraphQLInterfacePathPathNode()             {}
func (v *PathPathCVE) implementsGraphQLInterfacePathPathNode()                 {}
func (v *PathPathCertifyBad) implementsGraphQLInterfacePathPathNode()          {}
func (v *PathPathCertifyGood) implementsGraphQLInterfacePathPathNode()         {}
func (v *PathPathCertifyScorecard) implementsGraphQLInterfacePathPathNode()    {}
func (v *PathPathCertifyVEXStatement) implementsGraphQLInterfacePathPathNode() {}
func (v *PathPathCertifyVuln) implementsGraphQLInterfacePathPathNode()         {}
func (v *PathPathGHSA) implementsGraphQLInterfacePathPathNode()                {}
func (v *PathPathHasMetadata) implementsGraphQLInterfacePathPathNode()         {}
func (v *PathPathHasSBOM) implementsGraphQLInterfacePathPathNode()             {}
func (v *PathPathHasSLSA) implementsGraphQLInterfacePathPathNode()             {}
func (v *PathPathHasSourceAt) implementsGraphQLInterfacePathPathNode()         {}
func (v *PathPathHashEqual) implementsGraphQLInterfacePathPathNode()           {}
func (v *PathPathIsDependency) implementsGraphQLInterfacePathPathNode()        {}
func (v *PathPathIsOccurrence) implementsGraphQLInterfacePathPathNode()        {}
func (v *PathPathIsVulnerability) implementsGraphQLInterfacePathPathNode()     {}
func (v *PathPathNoVuln) implementsGraphQLInterfacePathPathNode()              {}
func (v *PathPathOSV) implementsGraphQLInterfacePathPathNode()                 {}
func (v *PathPathPackage) implementsGraphQLInterfacePathPathNode()             {}
func (v *PathPathPkgEqual) implementsGraphQLInterfacePathPathNode()            {}
func (v *PathPathPointOfContact) implementsGraphQLInterfacePathPathNode()      {}
func (v *PathPathSource) implementsGraphQLInterfacePathPathNode()              {}

func __unmarshalPathPathNode(b []byte, v *PathPathNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(PathPathArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(PathPathBuilder)
		return json.Unmarshal(b, *v)
	case "CVE":
		*v = new(PathPathCVE)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(PathPathCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(PathPathCertifyGood)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(PathPathCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(PathPathCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(PathPathCertifyVuln)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(PathPathGHSA)
		return json.Unmarshal(b, *v)
	case "HasMetadata":
		*v = new(PathPathHasMetadata)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(PathPathHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(PathPathHasSLSA)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(PathPathHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(PathPathHashEqual)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(PathPathIsDependency)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(PathPathIsOccurrence)
		return json.Unmarshal(b, *v)
	case "IsVulnerability":
		*v = new(PathPathIsVulnerability)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(PathPathNoVuln)
		return json.Unmarshal(b, *v)
	case "OSV":
		*v = new(PathPathOSV)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(PathPathPackage)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(PathPathPkgEqual)
		return json.Unmarshal(b, *v)
	case "PointOfContact":
		*v = new(PathPathPointOfContact)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(PathPathSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for PathPathNode: "%v"`, tn.TypeName)
	}
}

func __marshalPathPathNode(v *PathPathNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *PathPathArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHasMetadata:
		typename = "HasMetadata"

		result := struct {
			TypeName string `json:"__typename"`
			*PathPathHasMetadata
		}{typename, v}
		return json.Marshal(result)
	case *PathPathHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathIsVulnerability:
		typename = "IsVulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathIsVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*PathPathNoVuln
		}{typename, v}
		return json.Marshal(result)
	case *PathPathOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathPkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathPkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathPointOfContact:
		typename = "PointOfContact"

		result := struct {
			TypeName string `json:"__typename"`
			*PathPathPointOfContact
		}{typename, v}
		return json.Marshal(result)
	case *PathPathSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for PathPathNode: "%T"`, v)
	}
}

// PathPathOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type PathPathOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns PathPathOSV.Typename, and is useful for accessing the field via an interface.
func (v *PathPathOSV) GetTypename() *string { return v.Typename }

// GetId returns PathPathOSV.Id, and is useful for accessing the field via an interface.
func (v *PathPathOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns PathPathOSV.OsvId, and is useful for accessing the field via an interface.
func (v *PathPathOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *PathPathOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *PathPathOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathOSV) __premarshalJSON() (*__premarshalPathPathOSV, error) {
	var retval __premarshalPathPathOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// PathPathPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PathPathPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns PathPathPackage.Typename, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetTypename() *string { return v.Typename }

// GetId returns PathPathPackage.Id, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns PathPathPackage.Type, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns PathPathPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PathPathPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PathPathPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathPackage) __premarshalJSON() (*__premarshalPathPathPackage, error) {
	var retval __premarshalPathPathPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PathPathPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type PathPathPkgEqual struct {
	Typename    *string `json:"__typename"`
	AllPkgEqual `json:"-"`
}

// GetTypename returns PathPathPkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetTypename() *string { return v.Typename }

// GetId returns PathPathPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetId() string { return v.AllPkgEqual.Id }

// GetJustification returns PathPathPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetJustification() string { return v.AllPkgEqual.Justification }

// GetPackages returns PathPathPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetPackages() []AllPkgEqualPackagesPackage { return v.AllPkgEqual.Packages }

// GetOrigin returns PathPathPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetOrigin() string { return v.AllPkgEqual.Origin }

// GetCollector returns PathPathPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetCollector() string { return v.AllPkgEqual.Collector }

func (v *PathPathPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathPkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathPkgEqual) __premarshalJSON() (*__premarshalPathPathPkgEqual, error) {
	var retval __premarshalPathPathPkgEqual

	retval.Typename = v.Typename
	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// PathPathPointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type PathPathPointOfContact struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns PathPathPointOfContact.Typename, and is useful for accessing the field via an interface.
func (v *PathPathPointOfContact) GetTypename() *string { return v.Typename }

// PathPathSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type PathPathSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns PathPathSource.Typename, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetTypename() *string { return v.Typename }

// GetId returns PathPathSource.Id, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns PathPathSource.Type, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns PathPathSource.Namespaces, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *PathPathSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathSource
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *PathPathSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathSource) __premarshalJSON() (*__premarshalPathPathSource, error) {
	var retval __premarshalPathPathSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// PathResponse is returned by Path on success.
type PathResponse struct {
	// path query returns a path between subject and target, of a maximum length.
	//
	// Since we want to uniquely identify endpoints, nodes must be specified by
	// valid IDs only (instead of using filters/input spec structs).
	//
	// Specifying any Edge value in `usingOnly` will make the path only contain the
	// corresponding GUAC evidence trees (GUAC verbs).
	Path []PathPathNode `json:"-"`
}

// GetPath returns PathResponse.Path, and is useful for accessing the field via an interface.
func (v *PathResponse) GetPath() []PathPathNode { return v.Path }

func (v *PathResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathResponse
		Path []json.RawMessage `json:"path"`
		graphql.NoUnmarshalJSON
	}
	firstPass.PathResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Path
		src := firstPass.Path
		*dst = make(
			[]PathPathNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalPathPathNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal PathResponse.Path: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalPathResponse struct {
	Path []json.RawMessage `json:"path"`
}

func (v *PathResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathResponse) __premarshalJSON() (*__premarshalPathResponse, error) {
	var retval __premarshalPathResponse

	{

		dst := &retval.Path
		src := v.Path
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalPathPathNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal PathResponse.Path: %w", err)
			}
		}
	}
	return &retval, nil
}

// PkgEqualIngestPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type PkgEqualIngestPkgEqual struct {
	AllPkgEqual `json:"-"`
}

// GetId returns PkgEqualIngestPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *PkgEqualIngestPkgEqual) GetId() string { return v.AllPkgEqual.Id }

// GetJustification returns PkgEqualIngestPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *PkgEqualIngestPkgEqual) GetJustification() string { return v.AllPkgEqual.Justification }

// GetPackages returns PkgEqualIngestPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *PkgEqualIngestPkgEqual) GetPackages() []AllPkgEqualPackagesPackage {
	return v.AllPkgEqual.Packages
}

// GetOrigin returns PkgEqualIngestPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *PkgEqualIngestPkgEqual) GetOrigin() string { return v.AllPkgEqual.Origin }

// GetCollector returns PkgEqualIngestPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *PkgEqualIngestPkgEqual) GetCollector() string { return v.AllPkgEqual.Collector }

func (v *PkgEqualIngestPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PkgEqualIngestPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PkgEqualIngestPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPkgEqualIngestPkgEqual struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PkgEqualIngestPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PkgEqualIngestPkgEqual) __premarshalJSON() (*__premarshalPkgEqualIngestPkgEqual, error) {
	var retval __premarshalPkgEqualIngestPkgEqual

	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// PkgEqualInputSpec represents the input to certify that packages are similar.
type PkgEqualInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns PkgEqualInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *PkgEqualInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns PkgEqualInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *PkgEqualInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns PkgEqualInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *PkgEqualInputSpec) GetCollector() string { return v.Collector }

// PkgEqualOtherPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PkgEqualOtherPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns PkgEqualOtherPackage.Id, and is useful for accessing the field via an interface.
func (v *PkgEqualOtherPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns PkgEqualOtherPackage.Type, and is useful for accessing the field via an interface.
func (v *PkgEqualOtherPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns PkgEqualOtherPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PkgEqualOtherPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PkgEqualOtherPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PkgEqualOtherPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PkgEqualOtherPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPkgEqualOtherPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PkgEqualOtherPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PkgEqualOtherPackage) __premarshalJSON() (*__premarshalPkgEqualOtherPackage, error) {
	var retval __premarshalPkgEqualOtherPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PkgEqualPkgPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PkgEqualPkgPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns PkgEqualPkgPackage.Id, and is useful for accessing the field via an interface.
func (v *PkgEqualPkgPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns PkgEqualPkgPackage.Type, and is useful for accessing the field via an interface.
func (v *PkgEqualPkgPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns PkgEqualPkgPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PkgEqualPkgPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PkgEqualPkgPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PkgEqualPkgPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PkgEqualPkgPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPkgEqualPkgPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PkgEqualPkgPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PkgEqualPkgPackage) __premarshalJSON() (*__premarshalPkgEqualPkgPackage, error) {
	var retval __premarshalPkgEqualPkgPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PkgEqualResponse is returned by PkgEqual on success.
type PkgEqualResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	Pkg PkgEqualPkgPackage `json:"pkg"`
	// Ingests a new package and returns the corresponding package trie path.
	OtherPackage PkgEqualOtherPackage `json:"otherPackage"`
	// Adds a certification that two packages are similar.
	IngestPkgEqual PkgEqualIngestPkgEqual `json:"ingestPkgEqual"`
}

// GetPkg returns PkgEqualResponse.Pkg, and is useful for accessing the field via an interface.
func (v *PkgEqualResponse) GetPkg() PkgEqualPkgPackage { return v.Pkg }

// GetOtherPackage returns PkgEqualResponse.OtherPackage, and is useful for accessing the field via an interface.
func (v *PkgEqualResponse) GetOtherPackage() PkgEqualOtherPackage { return v.OtherPackage }

// GetIngestPkgEqual returns PkgEqualResponse.IngestPkgEqual, and is useful for accessing the field via an interface.
func (v *PkgEqualResponse) GetIngestPkgEqual() PkgEqualIngestPkgEqual { return v.IngestPkgEqual }

// PkgInputSpec specifies a package for mutations.
//
// This is different than PkgSpec because we want to encode mandatory fields:
// type and name. All optional fields are given empty default values.
type PkgInputSpec struct {
	Type       string                      `json:"type"`
	Namespace  *string                     `json:"namespace"`
	Name       string                      `json:"name"`
	Version    *string                     `json:"version"`
	Qualifiers []PackageQualifierInputSpec `json:"qualifiers"`
	Subpath    *string                     `json:"subpath"`
}

// GetType returns PkgInputSpec.Type, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetType() string { return v.Type }

// GetNamespace returns PkgInputSpec.Namespace, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetNamespace() *string { return v.Namespace }

// GetName returns PkgInputSpec.Name, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetName() string { return v.Name }

// GetVersion returns PkgInputSpec.Version, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetVersion() *string { return v.Version }

// GetQualifiers returns PkgInputSpec.Qualifiers, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetQualifiers() []PackageQualifierInputSpec { return v.Qualifiers }

// GetSubpath returns PkgInputSpec.Subpath, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetSubpath() *string { return v.Subpath }

// PkgMatchType is an enum to determine if the attestation should be done at the
// specific version or package name.
type PkgMatchType string

const (
	PkgMatchTypeAllVersions     PkgMatchType = "ALL_VERSIONS"
	PkgMatchTypeSpecificVersion PkgMatchType = "SPECIFIC_VERSION"
)

// PkgSpec allows filtering the list of sources to return in a query.
//
// Each field matches a qualifier from pURL. Use null to match on all values at
// that level. For example, to get all packages in GUAC backend, use a PkgSpec
// where every field is null.
//
// Empty string at a field means matching with the empty string. If passing in
// qualifiers, all of the values in the list must match. Since we want to return
// nodes with any number of qualifiers if no qualifiers are passed in the input,
// we must also return the same set of nodes it the qualifiers list is empty. To
// match on nodes that don't contain any qualifier, set matchOnlyEmptyQualifiers
// to true. If this field is true, then the qualifiers argument is ignored.
type PkgSpec struct {
	Id                       *string                `json:"id"`
	Type                     *string                `json:"type"`
	Namespace                *string                `json:"namespace"`
	Name                     *string                `json:"name"`
	Version                  *string                `json:"version"`
	Qualifiers               []PackageQualifierSpec `json:"qualifiers"`
	MatchOnlyEmptyQualifiers *bool                  `json:"matchOnlyEmptyQualifiers"`
	Subpath                  *string                `json:"subpath"`
}

// GetId returns PkgSpec.Id, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetId() *string { return v.Id }

// GetType returns PkgSpec.Type, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetType() *string { return v.Type }

// GetNamespace returns PkgSpec.Namespace, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetNamespace() *string { return v.Namespace }

// GetName returns PkgSpec.Name, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetName() *string { return v.Name }

// GetVersion returns PkgSpec.Version, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetVersion() *string { return v.Version }

// GetQualifiers returns PkgSpec.Qualifiers, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetQualifiers() []PackageQualifierSpec { return v.Qualifiers }

// GetMatchOnlyEmptyQualifiers returns PkgSpec.MatchOnlyEmptyQualifiers, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetMatchOnlyEmptyQualifiers() *bool { return v.MatchOnlyEmptyQualifiers }

// GetSubpath returns PkgSpec.Subpath, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetSubpath() *string { return v.Subpath }

// PointOfContactArtifactIngestPointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type PointOfContactArtifactIngestPointOfContact struct {
	AllPointOfContact `json:"-"`
}

// GetId returns PointOfContactArtifactIngestPointOfContact.Id, and is useful for accessing the field via an interface.
func (v *PointOfContactArtifactIngestPointOfContact) GetId() string { return v.AllPointOfContact.Id }

// GetSubject returns PointOfContactArtifactIngestPointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *PointOfContactArtifactIngestPointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.AllPointOfContact.Subject
}

// GetEmail returns PointOfContactArtifactIngestPointOfContact.Email, and is useful for accessing the field via an interface.
func (v *PointOfContactArtifactIngestPointOfContact) GetEmail() string {
	return v.AllPointOfContact.Email
}

// GetInfo returns PointOfContactArtifactIngestPointOfContact.Info, and is useful for accessing the field via an interface.
func (v *PointOfContactArtifactIngestPointOfContact) GetInfo() string {
	return v.AllPointOfContact.Info
}

// GetSince returns PointOfContactArtifactIngestPointOfContact.Since, and is useful for accessing the field via an interface.
func (v *PointOfContactArtifactIngestPointOfContact) GetSince() time.Time {
	return v.AllPointOfContact.Since
}

// GetJustification returns PointOfContactArtifactIngestPointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *PointOfContactArtifactIngestPointOfContact) GetJustification() string {
	return v.AllPointOfContact.Justification
}

// GetOrigin returns PointOfContactArtifactIngestPointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *PointOfContactArtifactIngestPointOfContact) GetOrigin() string {
	return v.AllPointOfContact.Origin
}

// GetCollector returns PointOfContactArtifactIngestPointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *PointOfContactArtifactIngestPointOfContact) GetCollector() string {
	return v.AllPointOfContact.Collector
}

func (v *PointOfContactArtifactIngestPointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PointOfContactArtifactIngestPointOfContact
		graphql.NoUnmarshalJSON
	}
	firstPass.PointOfContactArtifactIngestPointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPointOfContact)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPointOfContactArtifactIngestPointOfContact struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PointOfContactArtifactIngestPointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PointOfContactArtifactIngestPointOfContact) __premarshalJSON() (*__premarshalPointOfContactArtifactIngestPointOfContact, error) {
	var retval __premarshalPointOfContactArtifactIngestPointOfContact

	retval.Id = v.AllPointOfContact.Id
	{

		dst := &retval.Subject
		src := v.AllPointOfContact.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PointOfContactArtifactIngestPointOfContact.AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.AllPointOfContact.Email
	retval.Info = v.AllPointOfContact.Info
	retval.Since = v.AllPointOfContact.Since
	retval.Justification = v.AllPointOfContact.Justification
	retval.Origin = v.AllPointOfContact.Origin
	retval.Collector = v.AllPointOfContact.Collector
	return &retval, nil
}

// PointOfContactArtifactResponse is returned by PointOfContactArtifact on success.
type PointOfContactArtifactResponse struct {
	// Adds a PointOfContact attestation to a package, source or artifact.
	IngestPointOfContact PointOfContactArtifactIngestPointOfContact `json:"ingestPointOfContact"`
}

// GetIngestPointOfContact returns PointOfContactArtifactResponse.IngestPointOfContact, and is useful for accessing the field via an interface.
func (v *PointOfContactArtifactResponse) GetIngestPointOfContact() PointOfContactArtifactIngestPointOfContact {
	return v.IngestPointOfContact
}

// PointOfContactInputSpec represents the mutation input to ingest a PointOfContact evidence.
type PointOfContactInputSpec struct {
	Email         string    `json:"email"`
	Info          string    `json:"info"`
	Since         time.Time `json:"since"`
	Justification string    `json:"justification"`
	Origin        string    `json:"origin"`
	Collector     string    `json:"collector"`
}

// GetEmail returns PointOfContactInputSpec.Email, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetEmail() string { return v.Email }

// GetInfo returns PointOfContactInputSpec.Info, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetInfo() string { return v.Info }

// GetSince returns PointOfContactInputSpec.Since, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetSince() time.Time { return v.Since }

// GetJustification returns PointOfContactInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns PointOfContactInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns PointOfContactInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetCollector() string { return v.Collector }

// PointOfContactPkgIngestPointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type PointOfContactPkgIngestPointOfContact struct {
	AllPointOfContact `json:"-"`
}

// GetId returns PointOfContactPkgIngestPointOfContact.Id, and is useful for accessing the field via an interface.
func (v *PointOfContactPkgIngestPointOfContact) GetId() string { return v.AllPointOfContact.Id }

// GetSubject returns PointOfContactPkgIngestPointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *PointOfContactPkgIngestPointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.AllPointOfContact.Subject
}

// GetEmail returns PointOfContactPkgIngestPointOfContact.Email, and is useful for accessing the field via an interface.
func (v *PointOfContactPkgIngestPointOfContact) GetEmail() string { return v.AllPointOfContact.Email }

// GetInfo returns PointOfContactPkgIngestPointOfContact.Info, and is useful for accessing the field via an interface.
func (v *PointOfContactPkgIngestPointOfContact) GetInfo() string { return v.AllPointOfContact.Info }

// GetSince returns PointOfContactPkgIngestPointOfContact.Since, and is useful for accessing the field via an interface.
func (v *PointOfContactPkgIngestPointOfContact) GetSince() time.Time {
	return v.AllPointOfContact.Since
}

// GetJustification returns PointOfContactPkgIngestPointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *PointOfContactPkgIngestPointOfContact) GetJustification() string {
	return v.AllPointOfContact.Justification
}

// GetOrigin returns PointOfContactPkgIngestPointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *PointOfContactPkgIngestPointOfContact) GetOrigin() string { return v.AllPointOfContact.Origin }

// GetCollector returns PointOfContactPkgIngestPointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *PointOfContactPkgIngestPointOfContact) GetCollector() string {
	return v.AllPointOfContact.Collector
}

func (v *PointOfContactPkgIngestPointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PointOfContactPkgIngestPointOfContact
		graphql.NoUnmarshalJSON
	}
	firstPass.PointOfContactPkgIngestPointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPointOfContact)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPointOfContactPkgIngestPointOfContact struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PointOfContactPkgIngestPointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PointOfContactPkgIngestPointOfContact) __premarshalJSON() (*__premarshalPointOfContactPkgIngestPointOfContact, error) {
	var retval __premarshalPointOfContactPkgIngestPointOfContact

	retval.Id = v.AllPointOfContact.Id
	{

		dst := &retval.Subject
		src := v.AllPointOfContact.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PointOfContactPkgIngestPointOfContact.AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.AllPointOfContact.Email
	retval.Info = v.AllPointOfContact.Info
	retval.Since = v.AllPointOfContact.Since
	retval.Justification = v.AllPointOfContact.Justification
	retval.Origin = v.AllPointOfContact.Origin
	retval.Collector = v.AllPointOfContact.Collector
	return &retval, nil
}

// PointOfContactPkgResponse is returned by PointOfContactPkg on success.
type PointOfContactPkgResponse struct {
	// Adds a PointOfContact attestation to a package, source or artifact.
	IngestPointOfContact PointOfContactPkgIngestPointOfContact `json:"ingestPointOfContact"`
}

// GetIngestPointOfContact returns PointOfContactPkgResponse.IngestPointOfContact, and is useful for accessing the field via an interface.
func (v *PointOfContactPkgResponse) GetIngestPointOfContact() PointOfContactPkgIngestPointOfContact {
	return v.IngestPointOfContact
}

// PointOfContactSrcIngestPointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type PointOfContactSrcIngestPointOfContact struct {
	AllPointOfContact `json:"-"`
}

// GetId returns PointOfContactSrcIngestPointOfContact.Id, and is useful for accessing the field via an interface.
func (v *PointOfContactSrcIngestPointOfContact) GetId() string { return v.AllPointOfContact.Id }

// GetSubject returns PointOfContactSrcIngestPointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *PointOfContactSrcIngestPointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.AllPointOfContact.Subject
}

// GetEmail returns PointOfContactSrcIngestPointOfContact.Email, and is useful for accessing the field via an interface.
func (v *PointOfContactSrcIngestPointOfContact) GetEmail() string { return v.AllPointOfContact.Email }

// GetInfo returns PointOfContactSrcIngestPointOfContact.Info, and is useful for accessing the field via an interface.
func (v *PointOfContactSrcIngestPointOfContact) GetInfo() string { return v.AllPointOfContact.Info }

// GetSince returns PointOfContactSrcIngestPointOfContact.Since, and is useful for accessing the field via an interface.
func (v *PointOfContactSrcIngestPointOfContact) GetSince() time.Time {
	return v.AllPointOfContact.Since
}

// GetJustification returns PointOfContactSrcIngestPointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *PointOfContactSrcIngestPointOfContact) GetJustification() string {
	return v.AllPointOfContact.Justification
}

// GetOrigin returns PointOfContactSrcIngestPointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *PointOfContactSrcIngestPointOfContact) GetOrigin() string { return v.AllPointOfContact.Origin }

// GetCollector returns PointOfContactSrcIngestPointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *PointOfContactSrcIngestPointOfContact) GetCollector() string {
	return v.AllPointOfContact.Collector
}

func (v *PointOfContactSrcIngestPointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PointOfContactSrcIngestPointOfContact
		graphql.NoUnmarshalJSON
	}
	firstPass.PointOfContactSrcIngestPointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPointOfContact)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPointOfContactSrcIngestPointOfContact struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PointOfContactSrcIngestPointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PointOfContactSrcIngestPointOfContact) __premarshalJSON() (*__premarshalPointOfContactSrcIngestPointOfContact, error) {
	var retval __premarshalPointOfContactSrcIngestPointOfContact

	retval.Id = v.AllPointOfContact.Id
	{

		dst := &retval.Subject
		src := v.AllPointOfContact.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PointOfContactSrcIngestPointOfContact.AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.AllPointOfContact.Email
	retval.Info = v.AllPointOfContact.Info
	retval.Since = v.AllPointOfContact.Since
	retval.Justification = v.AllPointOfContact.Justification
	retval.Origin = v.AllPointOfContact.Origin
	retval.Collector = v.AllPointOfContact.Collector
	return &retval, nil
}

// PointOfContactSrcResponse is returned by PointOfContactSrc on success.
type PointOfContactSrcResponse struct {
	// Adds a PointOfContact attestation to a package, source or artifact.
	IngestPointOfContact PointOfContactSrcIngestPointOfContact `json:"ingestPointOfContact"`
}

// GetIngestPointOfContact returns PointOfContactSrcResponse.IngestPointOfContact, and is useful for accessing the field via an interface.
func (v *PointOfContactSrcResponse) GetIngestPointOfContact() PointOfContactSrcIngestPointOfContact {
	return v.IngestPointOfContact
}

// SLSAForArtifactIngestSLSAHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type SLSAForArtifactIngestSLSAHasSLSA struct {
	AllSLSATree `json:"-"`
}

// GetId returns SLSAForArtifactIngestSLSAHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestSLSAHasSLSA) GetId() string { return v.AllSLSATree.Id }

// GetSubject returns SLSAForArtifactIngestSLSAHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestSLSAHasSLSA) GetSubject() AllSLSATreeSubjectArtifact {
	return v.AllSLSATree.Subject
}

// GetSlsa returns SLSAForArtifactIngestSLSAHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestSLSAHasSLSA) GetSlsa() AllSLSATreeSlsaSLSA { return v.AllSLSATree.Slsa }

func (v *SLSAForArtifactIngestSLSAHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SLSAForArtifactIngestSLSAHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.SLSAForArtifactIngestSLSAHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSLSAForArtifactIngestSLSAHasSLSA struct {
	Id string `json:"id"`

	Subject AllSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *SLSAForArtifactIngestSLSAHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SLSAForArtifactIngestSLSAHasSLSA) __premarshalJSON() (*__premarshalSLSAForArtifactIngestSLSAHasSLSA, error) {
	var retval __premarshalSLSAForArtifactIngestSLSAHasSLSA

	retval.Id = v.AllSLSATree.Id
	retval.Subject = v.AllSLSATree.Subject
	retval.Slsa = v.AllSLSATree.Slsa
	return &retval, nil
}

// SLSAForArtifactResponse is returned by SLSAForArtifact on success.
type SLSAForArtifactResponse struct {
	// Ingests a SLSA attestation
	IngestSLSA SLSAForArtifactIngestSLSAHasSLSA `json:"ingestSLSA"`
}

// GetIngestSLSA returns SLSAForArtifactResponse.IngestSLSA, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactResponse) GetIngestSLSA() SLSAForArtifactIngestSLSAHasSLSA {
	return v.IngestSLSA
}

// SLSAForArtifactsIngestSLSAsHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type SLSAForArtifactsIngestSLSAsHasSLSA struct {
	AllSLSATree `json:"-"`
}

// GetId returns SLSAForArtifactsIngestSLSAsHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactsIngestSLSAsHasSLSA) GetId() string { return v.AllSLSATree.Id }

// GetSubject returns SLSAForArtifactsIngestSLSAsHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactsIngestSLSAsHasSLSA) GetSubject() AllSLSATreeSubjectArtifact {
	return v.AllSLSATree.Subject
}

// GetSlsa returns SLSAForArtifactsIngestSLSAsHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactsIngestSLSAsHasSLSA) GetSlsa() AllSLSATreeSlsaSLSA { return v.AllSLSATree.Slsa }

func (v *SLSAForArtifactsIngestSLSAsHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SLSAForArtifactsIngestSLSAsHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.SLSAForArtifactsIngestSLSAsHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSLSAForArtifactsIngestSLSAsHasSLSA struct {
	Id string `json:"id"`

	Subject AllSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *SLSAForArtifactsIngestSLSAsHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SLSAForArtifactsIngestSLSAsHasSLSA) __premarshalJSON() (*__premarshalSLSAForArtifactsIngestSLSAsHasSLSA, error) {
	var retval __premarshalSLSAForArtifactsIngestSLSAsHasSLSA

	retval.Id = v.AllSLSATree.Id
	retval.Subject = v.AllSLSATree.Subject
	retval.Slsa = v.AllSLSATree.Slsa
	return &retval, nil
}

// SLSAForArtifactsResponse is returned by SLSAForArtifacts on success.
type SLSAForArtifactsResponse struct {
	// Bulk Ingest SLSA attestations
	IngestSLSAs []SLSAForArtifactsIngestSLSAsHasSLSA `json:"ingestSLSAs"`
}

// GetIngestSLSAs returns SLSAForArtifactsResponse.IngestSLSAs, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactsResponse) GetIngestSLSAs() []SLSAForArtifactsIngestSLSAsHasSLSA {
	return v.IngestSLSAs
}

// SLSAInputSpec is the same as SLSA but for mutation input.
type SLSAInputSpec struct {
	BuildType     string                   `json:"buildType"`
	SlsaPredicate []SLSAPredicateInputSpec `json:"slsaPredicate"`
	SlsaVersion   string                   `json:"slsaVersion"`
	StartedOn     *time.Time               `json:"startedOn"`
	FinishedOn    *time.Time               `json:"finishedOn"`
	Origin        string                   `json:"origin"`
	Collector     string                   `json:"collector"`
}

// GetBuildType returns SLSAInputSpec.BuildType, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetBuildType() string { return v.BuildType }

// GetSlsaPredicate returns SLSAInputSpec.SlsaPredicate, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetSlsaPredicate() []SLSAPredicateInputSpec { return v.SlsaPredicate }

// GetSlsaVersion returns SLSAInputSpec.SlsaVersion, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetSlsaVersion() string { return v.SlsaVersion }

// GetStartedOn returns SLSAInputSpec.StartedOn, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetStartedOn() *time.Time { return v.StartedOn }

// GetFinishedOn returns SLSAInputSpec.FinishedOn, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetFinishedOn() *time.Time { return v.FinishedOn }

// GetOrigin returns SLSAInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns SLSAInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetCollector() string { return v.Collector }

// SLSAPredicateInputSpec allows ingesting SLSAPredicateSpec.
type SLSAPredicateInputSpec struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns SLSAPredicateInputSpec.Key, and is useful for accessing the field via an interface.
func (v *SLSAPredicateInputSpec) GetKey() string { return v.Key }

// GetValue returns SLSAPredicateInputSpec.Value, and is useful for accessing the field via an interface.
func (v *SLSAPredicateInputSpec) GetValue() string { return v.Value }

// ScorecardCheckInputSpec represents the mutation input for a Scorecard check.
type ScorecardCheckInputSpec struct {
	Check string `json:"check"`
	Score int    `json:"score"`
}

// GetCheck returns ScorecardCheckInputSpec.Check, and is useful for accessing the field via an interface.
func (v *ScorecardCheckInputSpec) GetCheck() string { return v.Check }

// GetScore returns ScorecardCheckInputSpec.Score, and is useful for accessing the field via an interface.
func (v *ScorecardCheckInputSpec) GetScore() int { return v.Score }

// ScorecardInputSpec represents the mutation input to ingest a Scorecard.
type ScorecardInputSpec struct {
	Checks           []ScorecardCheckInputSpec `json:"checks"`
	AggregateScore   float64                   `json:"aggregateScore"`
	TimeScanned      time.Time                 `json:"timeScanned"`
	ScorecardVersion string                    `json:"scorecardVersion"`
	ScorecardCommit  string                    `json:"scorecardCommit"`
	Origin           string                    `json:"origin"`
	Collector        string                    `json:"collector"`
}

// GetChecks returns ScorecardInputSpec.Checks, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetChecks() []ScorecardCheckInputSpec { return v.Checks }

// GetAggregateScore returns ScorecardInputSpec.AggregateScore, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetAggregateScore() float64 { return v.AggregateScore }

// GetTimeScanned returns ScorecardInputSpec.TimeScanned, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetTimeScanned() time.Time { return v.TimeScanned }

// GetScorecardVersion returns ScorecardInputSpec.ScorecardVersion, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetScorecardVersion() string { return v.ScorecardVersion }

// GetScorecardCommit returns ScorecardInputSpec.ScorecardCommit, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetScorecardCommit() string { return v.ScorecardCommit }

// GetOrigin returns ScorecardInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns ScorecardInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetCollector() string { return v.Collector }

// SourceInputSpec specifies a source for mutations.
//
// This is different than SourceSpec because we want to encode that all fields
// except tag and commit are mandatory fields. All optional fields are given empty
// default values.
//
// It is an error to set both tag and commit fields to values different than the
// default.
type SourceInputSpec struct {
	Type      string  `json:"type"`
	Namespace string  `json:"namespace"`
	Name      string  `json:"name"`
	Tag       *string `json:"tag"`
	Commit    *string `json:"commit"`
}

// GetType returns SourceInputSpec.Type, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetType() string { return v.Type }

// GetNamespace returns SourceInputSpec.Namespace, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetNamespace() string { return v.Namespace }

// GetName returns SourceInputSpec.Name, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetName() string { return v.Name }

// GetTag returns SourceInputSpec.Tag, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetTag() *string { return v.Tag }

// GetCommit returns SourceInputSpec.Commit, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetCommit() *string { return v.Commit }

// SourceSpec allows filtering the list of sources to return in a query.
//
// Empty string at a field means matching with the empty string. Missing field
// means retrieving all possible matches.
//
// It is an error to specify both tag and commit fields, except it both are set as
// empty string (in which case the returned sources are only those for which there
// is no tag/commit information).
type SourceSpec struct {
	Id        *string `json:"id"`
	Type      *string `json:"type"`
	Namespace *string `json:"namespace"`
	Name      *string `json:"name"`
	Tag       *string `json:"tag"`
	Commit    *string `json:"commit"`
}

// GetId returns SourceSpec.Id, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetId() *string { return v.Id }

// GetType returns SourceSpec.Type, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetType() *string { return v.Type }

// GetNamespace returns SourceSpec.Namespace, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetNamespace() *string { return v.Namespace }

// GetName returns SourceSpec.Name, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetName() *string { return v.Name }

// GetTag returns SourceSpec.Tag, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetTag() *string { return v.Tag }

// GetCommit returns SourceSpec.Commit, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetCommit() *string { return v.Commit }

// SourcesResponse is returned by Sources on success.
type SourcesResponse struct {
	// Returns all sources matching a filter.
	Sources []SourcesSourcesSource `json:"sources"`
}

// GetSources returns SourcesResponse.Sources, and is useful for accessing the field via an interface.
func (v *SourcesResponse) GetSources() []SourcesSourcesSource { return v.Sources }

// SourcesSourcesSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type SourcesSourcesSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns SourcesSourcesSource.Id, and is useful for accessing the field via an interface.
func (v *SourcesSourcesSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns SourcesSourcesSource.Type, and is useful for accessing the field via an interface.
func (v *SourcesSourcesSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns SourcesSourcesSource.Namespaces, and is useful for accessing the field via an interface.
func (v *SourcesSourcesSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *SourcesSourcesSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SourcesSourcesSource
		graphql.NoUnmarshalJSON
	}
	firstPass.SourcesSourcesSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSourcesSourcesSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *SourcesSourcesSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SourcesSourcesSource) __premarshalJSON() (*__premarshalSourcesSourcesSource, error) {
	var retval __premarshalSourcesSourcesSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement struct {
	AllCertifyVEXStatement `json:"-"`
}

// GetId returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.AllCertifyVEXStatement.Id
}

// GetSubject returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.AllCertifyVEXStatement.Status
}

// GetVexJustification returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.AllCertifyVEXStatement.Origin
}

// GetCollector returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement

	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// VEXPackageAndGhsaResponse is returned by VEXPackageAndGhsa on success.
type VEXPackageAndGhsaResponse struct {
	// Adds a VEX certification for a package.
	IngestVEXStatement VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestVEXStatement returns VEXPackageAndGhsaResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaResponse) GetIngestVEXStatement() VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// VexArtifactAndCveIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VexArtifactAndCveIngestVEXStatementCertifyVEXStatement struct {
	AllCertifyVEXStatement `json:"-"`
}

// GetId returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.AllCertifyVEXStatement.Id
}

// GetSubject returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.AllCertifyVEXStatement.Status
}

// GetVexJustification returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.AllCertifyVEXStatement.Origin
}

// GetCollector returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndCveIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndCveIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndCveIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVexArtifactAndCveIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVexArtifactAndCveIngestVEXStatementCertifyVEXStatement

	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// VexArtifactAndCveResponse is returned by VexArtifactAndCve on success.
type VexArtifactAndCveResponse struct {
	// Adds a VEX certification for a package.
	IngestVEXStatement VexArtifactAndCveIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestVEXStatement returns VexArtifactAndCveResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveResponse) GetIngestVEXStatement() VexArtifactAndCveIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement struct {
	AllCertifyVEXStatement `json:"-"`
}

// GetId returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.AllCertifyVEXStatement.Id
}

// GetSubject returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.AllCertifyVEXStatement.Status
}

// GetVexJustification returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.AllCertifyVEXStatement.Origin
}

// GetCollector returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement

	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// VexArtifactAndGhsaResponse is returned by VexArtifactAndGhsa on success.
type VexArtifactAndGhsaResponse struct {
	// Adds a VEX certification for a package.
	IngestVEXStatement VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestVEXStatement returns VexArtifactAndGhsaResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaResponse) GetIngestVEXStatement() VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement struct {
	AllCertifyVEXStatement `json:"-"`
}

// GetId returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.AllCertifyVEXStatement.Id
}

// GetSubject returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.AllCertifyVEXStatement.Status
}

// GetVexJustification returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.AllCertifyVEXStatement.Origin
}

// GetCollector returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndOsvIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVexArtifactAndOsvIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVexArtifactAndOsvIngestVEXStatementCertifyVEXStatement

	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// VexArtifactAndOsvResponse is returned by VexArtifactAndOsv on success.
type VexArtifactAndOsvResponse struct {
	// Adds a VEX certification for a package.
	IngestVEXStatement VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestVEXStatement returns VexArtifactAndOsvResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvResponse) GetIngestVEXStatement() VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// Records the justification included in the VEX statement.
type VexJustification string

const (
	VexJustificationComponentNotPresent                         VexJustification = "COMPONENT_NOT_PRESENT"
	VexJustificationVulnerableCodeNotPresent                    VexJustification = "VULNERABLE_CODE_NOT_PRESENT"
	VexJustificationVulnerableCodeNotInExecutePath              VexJustification = "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH"
	VexJustificationVulnerableCodeCannotBeControlledByAdversary VexJustification = "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY"
	VexJustificationInlineMitigationsAlreadyExist               VexJustification = "INLINE_MITIGATIONS_ALREADY_EXIST"
	VexJustificationNotProvided                                 VexJustification = "NOT_PROVIDED"
)

// VexPackageAndCveIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VexPackageAndCveIngestVEXStatementCertifyVEXStatement struct {
	AllCertifyVEXStatement `json:"-"`
}

// GetId returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.AllCertifyVEXStatement.Id
}

// GetSubject returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.AllCertifyVEXStatement.Status
}

// GetVexJustification returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.AllCertifyVEXStatement.Origin
}

// GetCollector returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexPackageAndCveIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VexPackageAndCveIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexPackageAndCveIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVexPackageAndCveIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVexPackageAndCveIngestVEXStatementCertifyVEXStatement

	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VexPackageAndCveIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VexPackageAndCveIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// VexPackageAndCveResponse is returned by VexPackageAndCve on success.
type VexPackageAndCveResponse struct {
	// Adds a VEX certification for a package.
	IngestVEXStatement VexPackageAndCveIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestVEXStatement returns VexPackageAndCveResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveResponse) GetIngestVEXStatement() VexPackageAndCveIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// VexPackageAndOsvIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VexPackageAndOsvIngestVEXStatementCertifyVEXStatement struct {
	AllCertifyVEXStatement `json:"-"`
}

// GetId returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.AllCertifyVEXStatement.Id
}

// GetSubject returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.AllCertifyVEXStatement.Status
}

// GetVexJustification returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.AllCertifyVEXStatement.Origin
}

// GetCollector returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexPackageAndOsvIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VexPackageAndOsvIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexPackageAndOsvIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVexPackageAndOsvIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVexPackageAndOsvIngestVEXStatementCertifyVEXStatement

	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.AllCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// VexPackageAndOsvResponse is returned by VexPackageAndOsv on success.
type VexPackageAndOsvResponse struct {
	// Adds a VEX certification for a package.
	IngestVEXStatement VexPackageAndOsvIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestVEXStatement returns VexPackageAndOsvResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvResponse) GetIngestVEXStatement() VexPackageAndOsvIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// VexStatementInputSpec represents the input to ingest VEX statements.
type VexStatementInputSpec struct {
	Status           VexStatus        `json:"status"`
	VexJustification VexJustification `json:"vexJustification"`
	Statement        string           `json:"statement"`
	StatusNotes      string           `json:"statusNotes"`
	KnownSince       time.Time        `json:"knownSince"`
	Origin           string           `json:"origin"`
	Collector        string           `json:"collector"`
}

// GetStatus returns VexStatementInputSpec.Status, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetStatus() VexStatus { return v.Status }

// GetVexJustification returns VexStatementInputSpec.VexJustification, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetVexJustification() VexJustification { return v.VexJustification }

// GetStatement returns VexStatementInputSpec.Statement, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetStatement() string { return v.Statement }

// GetStatusNotes returns VexStatementInputSpec.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetStatusNotes() string { return v.StatusNotes }

// GetKnownSince returns VexStatementInputSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetKnownSince() time.Time { return v.KnownSince }

// GetOrigin returns VexStatementInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns VexStatementInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetCollector() string { return v.Collector }

// Records the status of a VEX statement subject.
type VexStatus string

const (
	VexStatusNotAffected        VexStatus = "NOT_AFFECTED"
	VexStatusAffected           VexStatus = "AFFECTED"
	VexStatusFixed              VexStatus = "FIXED"
	VexStatusUnderInvestigation VexStatus = "UNDER_INVESTIGATION"
)

// VulnerabilityMetaDataInput represents the input for certifying vulnerability
// scans in mutations.
type VulnerabilityMetaDataInput struct {
	TimeScanned    time.Time `json:"timeScanned"`
	DbUri          string    `json:"dbUri"`
	DbVersion      string    `json:"dbVersion"`
	ScannerUri     string    `json:"scannerUri"`
	ScannerVersion string    `json:"scannerVersion"`
	Origin         string    `json:"origin"`
	Collector      string    `json:"collector"`
}

// GetTimeScanned returns VulnerabilityMetaDataInput.TimeScanned, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetTimeScanned() time.Time { return v.TimeScanned }

// GetDbUri returns VulnerabilityMetaDataInput.DbUri, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetDbUri() string { return v.DbUri }

// GetDbVersion returns VulnerabilityMetaDataInput.DbVersion, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetDbVersion() string { return v.DbVersion }

// GetScannerUri returns VulnerabilityMetaDataInput.ScannerUri, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetScannerUri() string { return v.ScannerUri }

// GetScannerVersion returns VulnerabilityMetaDataInput.ScannerVersion, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetScannerVersion() string { return v.ScannerVersion }

// GetOrigin returns VulnerabilityMetaDataInput.Origin, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetOrigin() string { return v.Origin }

// GetCollector returns VulnerabilityMetaDataInput.Collector, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetCollector() string { return v.Collector }

// __ArtifactsInput is used internally by genqlient
type __ArtifactsInput struct {
	Filter *ArtifactSpec `json:"filter"`
}

// GetFilter returns __ArtifactsInput.Filter, and is useful for accessing the field via an interface.
func (v *__ArtifactsInput) GetFilter() *ArtifactSpec { return v.Filter }

// __CVEsInput is used internally by genqlient
type __CVEsInput struct {
	Filter *CVESpec `json:"filter"`
}

// GetFilter returns __CVEsInput.Filter, and is useful for accessing the field via an interface.
func (v *__CVEsInput) GetFilter() *CVESpec { return v.Filter }

// __CertifyBadArtifactInput is used internally by genqlient
type __CertifyBadArtifactInput struct {
	Artifact   ArtifactInputSpec   `json:"artifact"`
	CertifyBad CertifyBadInputSpec `json:"certifyBad"`
}

// GetArtifact returns __CertifyBadArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__CertifyBadArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetCertifyBad returns __CertifyBadArtifactInput.CertifyBad, and is useful for accessing the field via an interface.
func (v *__CertifyBadArtifactInput) GetCertifyBad() CertifyBadInputSpec { return v.CertifyBad }

// __CertifyBadPkgInput is used internally by genqlient
type __CertifyBadPkgInput struct {
	Pkg          PkgInputSpec        `json:"pkg"`
	PkgMatchType *MatchFlags         `json:"pkgMatchType"`
	CertifyBad   CertifyBadInputSpec `json:"certifyBad"`
}

// GetPkg returns __CertifyBadPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyBadPkgInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetPkgMatchType returns __CertifyBadPkgInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__CertifyBadPkgInput) GetPkgMatchType() *MatchFlags { return v.PkgMatchType }

// GetCertifyBad returns __CertifyBadPkgInput.CertifyBad, and is useful for accessing the field via an interface.
func (v *__CertifyBadPkgInput) GetCertifyBad() CertifyBadInputSpec { return v.CertifyBad }

// __CertifyBadSrcInput is used internally by genqlient
type __CertifyBadSrcInput struct {
	Source     SourceInputSpec     `json:"source"`
	CertifyBad CertifyBadInputSpec `json:"certifyBad"`
}

// GetSource returns __CertifyBadSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__CertifyBadSrcInput) GetSource() SourceInputSpec { return v.Source }

// GetCertifyBad returns __CertifyBadSrcInput.CertifyBad, and is useful for accessing the field via an interface.
func (v *__CertifyBadSrcInput) GetCertifyBad() CertifyBadInputSpec { return v.CertifyBad }

// __CertifyBadsInput is used internally by genqlient
type __CertifyBadsInput struct {
	Filter *CertifyBadSpec `json:"filter"`
}

// GetFilter returns __CertifyBadsInput.Filter, and is useful for accessing the field via an interface.
func (v *__CertifyBadsInput) GetFilter() *CertifyBadSpec { return v.Filter }

// __CertifyCVEInput is used internally by genqlient
type __CertifyCVEInput struct {
	Pkg         PkgInputSpec               `json:"pkg"`
	Cve         CVEInputSpec               `json:"cve"`
	CertifyVuln VulnerabilityMetaDataInput `json:"certifyVuln"`
}

// GetPkg returns __CertifyCVEInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyCVEInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetCve returns __CertifyCVEInput.Cve, and is useful for accessing the field via an interface.
func (v *__CertifyCVEInput) GetCve() CVEInputSpec { return v.Cve }

// GetCertifyVuln returns __CertifyCVEInput.CertifyVuln, and is useful for accessing the field via an interface.
func (v *__CertifyCVEInput) GetCertifyVuln() VulnerabilityMetaDataInput { return v.CertifyVuln }

// __CertifyGHSAInput is used internally by genqlient
type __CertifyGHSAInput struct {
	Pkg         PkgInputSpec               `json:"pkg"`
	Ghsa        GHSAInputSpec              `json:"ghsa"`
	CertifyVuln VulnerabilityMetaDataInput `json:"certifyVuln"`
}

// GetPkg returns __CertifyGHSAInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyGHSAInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetGhsa returns __CertifyGHSAInput.Ghsa, and is useful for accessing the field via an interface.
func (v *__CertifyGHSAInput) GetGhsa() GHSAInputSpec { return v.Ghsa }

// GetCertifyVuln returns __CertifyGHSAInput.CertifyVuln, and is useful for accessing the field via an interface.
func (v *__CertifyGHSAInput) GetCertifyVuln() VulnerabilityMetaDataInput { return v.CertifyVuln }

// __CertifyGoodArtifactInput is used internally by genqlient
type __CertifyGoodArtifactInput struct {
	Artifact    ArtifactInputSpec    `json:"artifact"`
	CertifyGood CertifyGoodInputSpec `json:"certifyGood"`
}

// GetArtifact returns __CertifyGoodArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__CertifyGoodArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetCertifyGood returns __CertifyGoodArtifactInput.CertifyGood, and is useful for accessing the field via an interface.
func (v *__CertifyGoodArtifactInput) GetCertifyGood() CertifyGoodInputSpec { return v.CertifyGood }

// __CertifyGoodPkgInput is used internally by genqlient
type __CertifyGoodPkgInput struct {
	Pkg          PkgInputSpec         `json:"pkg"`
	PkgMatchType *MatchFlags          `json:"pkgMatchType"`
	CertifyGood  CertifyGoodInputSpec `json:"certifyGood"`
}

// GetPkg returns __CertifyGoodPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyGoodPkgInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetPkgMatchType returns __CertifyGoodPkgInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__CertifyGoodPkgInput) GetPkgMatchType() *MatchFlags { return v.PkgMatchType }

// GetCertifyGood returns __CertifyGoodPkgInput.CertifyGood, and is useful for accessing the field via an interface.
func (v *__CertifyGoodPkgInput) GetCertifyGood() CertifyGoodInputSpec { return v.CertifyGood }

// __CertifyGoodSrcInput is used internally by genqlient
type __CertifyGoodSrcInput struct {
	Source      SourceInputSpec      `json:"source"`
	CertifyGood CertifyGoodInputSpec `json:"certifyGood"`
}

// GetSource returns __CertifyGoodSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__CertifyGoodSrcInput) GetSource() SourceInputSpec { return v.Source }

// GetCertifyGood returns __CertifyGoodSrcInput.CertifyGood, and is useful for accessing the field via an interface.
func (v *__CertifyGoodSrcInput) GetCertifyGood() CertifyGoodInputSpec { return v.CertifyGood }

// __CertifyNoKnownVulnInput is used internally by genqlient
type __CertifyNoKnownVulnInput struct {
	Pkg         PkgInputSpec               `json:"pkg"`
	CertifyVuln VulnerabilityMetaDataInput `json:"certifyVuln"`
}

// GetPkg returns __CertifyNoKnownVulnInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyNoKnownVulnInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetCertifyVuln returns __CertifyNoKnownVulnInput.CertifyVuln, and is useful for accessing the field via an interface.
func (v *__CertifyNoKnownVulnInput) GetCertifyVuln() VulnerabilityMetaDataInput { return v.CertifyVuln }

// __CertifyOSVInput is used internally by genqlient
type __CertifyOSVInput struct {
	Pkg         PkgInputSpec               `json:"pkg"`
	Osv         OSVInputSpec               `json:"osv"`
	CertifyVuln VulnerabilityMetaDataInput `json:"certifyVuln"`
}

// GetPkg returns __CertifyOSVInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyOSVInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetOsv returns __CertifyOSVInput.Osv, and is useful for accessing the field via an interface.
func (v *__CertifyOSVInput) GetOsv() OSVInputSpec { return v.Osv }

// GetCertifyVuln returns __CertifyOSVInput.CertifyVuln, and is useful for accessing the field via an interface.
func (v *__CertifyOSVInput) GetCertifyVuln() VulnerabilityMetaDataInput { return v.CertifyVuln }

// __CertifyScorecardInput is used internally by genqlient
type __CertifyScorecardInput struct {
	Source    SourceInputSpec    `json:"source"`
	Scorecard ScorecardInputSpec `json:"scorecard"`
}

// GetSource returns __CertifyScorecardInput.Source, and is useful for accessing the field via an interface.
func (v *__CertifyScorecardInput) GetSource() SourceInputSpec { return v.Source }

// GetScorecard returns __CertifyScorecardInput.Scorecard, and is useful for accessing the field via an interface.
func (v *__CertifyScorecardInput) GetScorecard() ScorecardInputSpec { return v.Scorecard }

// __CertifyScorecardsInput is used internally by genqlient
type __CertifyScorecardsInput struct {
	Sources    []SourceInputSpec    `json:"sources"`
	Scorecards []ScorecardInputSpec `json:"scorecards"`
}

// GetSources returns __CertifyScorecardsInput.Sources, and is useful for accessing the field via an interface.
func (v *__CertifyScorecardsInput) GetSources() []SourceInputSpec { return v.Sources }

// GetScorecards returns __CertifyScorecardsInput.Scorecards, and is useful for accessing the field via an interface.
func (v *__CertifyScorecardsInput) GetScorecards() []ScorecardInputSpec { return v.Scorecards }

// __FindSoftwareInput is used internally by genqlient
type __FindSoftwareInput struct {
	SearchText string `json:"searchText"`
}

// GetSearchText returns __FindSoftwareInput.SearchText, and is useful for accessing the field via an interface.
func (v *__FindSoftwareInput) GetSearchText() string { return v.SearchText }

// __GHSAsInput is used internally by genqlient
type __GHSAsInput struct {
	Filter *GHSASpec `json:"filter"`
}

// GetFilter returns __GHSAsInput.Filter, and is useful for accessing the field via an interface.
func (v *__GHSAsInput) GetFilter() *GHSASpec { return v.Filter }

// __HasMetadataArtifactInput is used internally by genqlient
type __HasMetadataArtifactInput struct {
	Artifact    ArtifactInputSpec    `json:"artifact"`
	HasMetadata HasMetadataInputSpec `json:"hasMetadata"`
}

// GetArtifact returns __HasMetadataArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__HasMetadataArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetHasMetadata returns __HasMetadataArtifactInput.HasMetadata, and is useful for accessing the field via an interface.
func (v *__HasMetadataArtifactInput) GetHasMetadata() HasMetadataInputSpec { return v.HasMetadata }

// __HasMetadataPkgInput is used internally by genqlient
type __HasMetadataPkgInput struct {
	Pkg          PkgInputSpec         `json:"pkg"`
	PkgMatchType *MatchFlags          `json:"pkgMatchType"`
	HasMetadata  HasMetadataInputSpec `json:"hasMetadata"`
}

// GetPkg returns __HasMetadataPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__HasMetadataPkgInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetPkgMatchType returns __HasMetadataPkgInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__HasMetadataPkgInput) GetPkgMatchType() *MatchFlags { return v.PkgMatchType }

// GetHasMetadata returns __HasMetadataPkgInput.HasMetadata, and is useful for accessing the field via an interface.
func (v *__HasMetadataPkgInput) GetHasMetadata() HasMetadataInputSpec { return v.HasMetadata }

// __HasMetadataSrcInput is used internally by genqlient
type __HasMetadataSrcInput struct {
	Source      SourceInputSpec      `json:"source"`
	HasMetadata HasMetadataInputSpec `json:"hasMetadata"`
}

// GetSource returns __HasMetadataSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__HasMetadataSrcInput) GetSource() SourceInputSpec { return v.Source }

// GetHasMetadata returns __HasMetadataSrcInput.HasMetadata, and is useful for accessing the field via an interface.
func (v *__HasMetadataSrcInput) GetHasMetadata() HasMetadataInputSpec { return v.HasMetadata }

// __HasSBOMArtifactInput is used internally by genqlient
type __HasSBOMArtifactInput struct {
	Artifact ArtifactInputSpec `json:"artifact"`
	HasSBOM  HasSBOMInputSpec  `json:"hasSBOM"`
}

// GetArtifact returns __HasSBOMArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__HasSBOMArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetHasSBOM returns __HasSBOMArtifactInput.HasSBOM, and is useful for accessing the field via an interface.
func (v *__HasSBOMArtifactInput) GetHasSBOM() HasSBOMInputSpec { return v.HasSBOM }

// __HasSBOMPkgInput is used internally by genqlient
type __HasSBOMPkgInput struct {
	Pkg     PkgInputSpec     `json:"pkg"`
	HasSBOM HasSBOMInputSpec `json:"hasSBOM"`
}

// GetPkg returns __HasSBOMPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__HasSBOMPkgInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetHasSBOM returns __HasSBOMPkgInput.HasSBOM, and is useful for accessing the field via an interface.
func (v *__HasSBOMPkgInput) GetHasSBOM() HasSBOMInputSpec { return v.HasSBOM }

// __HasSourceAtInput is used internally by genqlient
type __HasSourceAtInput struct {
	Pkg          PkgInputSpec         `json:"pkg"`
	PkgMatchType MatchFlags           `json:"pkgMatchType"`
	Source       SourceInputSpec      `json:"source"`
	HasSourceAt  HasSourceAtInputSpec `json:"hasSourceAt"`
}

// GetPkg returns __HasSourceAtInput.Pkg, and is useful for accessing the field via an interface.
func (v *__HasSourceAtInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetPkgMatchType returns __HasSourceAtInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__HasSourceAtInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetSource returns __HasSourceAtInput.Source, and is useful for accessing the field via an interface.
func (v *__HasSourceAtInput) GetSource() SourceInputSpec { return v.Source }

// GetHasSourceAt returns __HasSourceAtInput.HasSourceAt, and is useful for accessing the field via an interface.
func (v *__HasSourceAtInput) GetHasSourceAt() HasSourceAtInputSpec { return v.HasSourceAt }

// __HashEqualInput is used internally by genqlient
type __HashEqualInput struct {
	Artifact      ArtifactInputSpec  `json:"artifact"`
	OtherArtifact ArtifactInputSpec  `json:"otherArtifact"`
	HashEqual     HashEqualInputSpec `json:"hashEqual"`
}

// GetArtifact returns __HashEqualInput.Artifact, and is useful for accessing the field via an interface.
func (v *__HashEqualInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetOtherArtifact returns __HashEqualInput.OtherArtifact, and is useful for accessing the field via an interface.
func (v *__HashEqualInput) GetOtherArtifact() ArtifactInputSpec { return v.OtherArtifact }

// GetHashEqual returns __HashEqualInput.HashEqual, and is useful for accessing the field via an interface.
func (v *__HashEqualInput) GetHashEqual() HashEqualInputSpec { return v.HashEqual }

// __IngestArtifactInput is used internally by genqlient
type __IngestArtifactInput struct {
	Artifact ArtifactInputSpec `json:"artifact"`
}

// GetArtifact returns __IngestArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// __IngestArtifactsInput is used internally by genqlient
type __IngestArtifactsInput struct {
	Artifacts []ArtifactInputSpec `json:"artifacts"`
}

// GetArtifacts returns __IngestArtifactsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestArtifactsInput) GetArtifacts() []ArtifactInputSpec { return v.Artifacts }

// __IngestBuilderInput is used internally by genqlient
type __IngestBuilderInput struct {
	Builder BuilderInputSpec `json:"builder"`
}

// GetBuilder returns __IngestBuilderInput.Builder, and is useful for accessing the field via an interface.
func (v *__IngestBuilderInput) GetBuilder() BuilderInputSpec { return v.Builder }

// __IngestBuildersInput is used internally by genqlient
type __IngestBuildersInput struct {
	Builders []BuilderInputSpec `json:"builders"`
}

// GetBuilders returns __IngestBuildersInput.Builders, and is useful for accessing the field via an interface.
func (v *__IngestBuildersInput) GetBuilders() []BuilderInputSpec { return v.Builders }

// __IngestCVEInput is used internally by genqlient
type __IngestCVEInput struct {
	Cve CVEInputSpec `json:"cve"`
}

// GetCve returns __IngestCVEInput.Cve, and is useful for accessing the field via an interface.
func (v *__IngestCVEInput) GetCve() CVEInputSpec { return v.Cve }

// __IngestCVEsInput is used internally by genqlient
type __IngestCVEsInput struct {
	Cves []CVEInputSpec `json:"cves"`
}

// GetCves returns __IngestCVEsInput.Cves, and is useful for accessing the field via an interface.
func (v *__IngestCVEsInput) GetCves() []CVEInputSpec { return v.Cves }

// __IngestGHSAInput is used internally by genqlient
type __IngestGHSAInput struct {
	Ghsa GHSAInputSpec `json:"ghsa"`
}

// GetGhsa returns __IngestGHSAInput.Ghsa, and is useful for accessing the field via an interface.
func (v *__IngestGHSAInput) GetGhsa() GHSAInputSpec { return v.Ghsa }

// __IngestGHSAsInput is used internally by genqlient
type __IngestGHSAsInput struct {
	Ghsas []GHSAInputSpec `json:"ghsas"`
}

// GetGhsas returns __IngestGHSAsInput.Ghsas, and is useful for accessing the field via an interface.
func (v *__IngestGHSAsInput) GetGhsas() []GHSAInputSpec { return v.Ghsas }

// __IngestOSVInput is used internally by genqlient
type __IngestOSVInput struct {
	Osv OSVInputSpec `json:"osv"`
}

// GetOsv returns __IngestOSVInput.Osv, and is useful for accessing the field via an interface.
func (v *__IngestOSVInput) GetOsv() OSVInputSpec { return v.Osv }

// __IngestOSVsInput is used internally by genqlient
type __IngestOSVsInput struct {
	Osvs []OSVInputSpec `json:"osvs"`
}

// GetOsvs returns __IngestOSVsInput.Osvs, and is useful for accessing the field via an interface.
func (v *__IngestOSVsInput) GetOsvs() []OSVInputSpec { return v.Osvs }

// __IngestPackageInput is used internally by genqlient
type __IngestPackageInput struct {
	Pkg PkgInputSpec `json:"pkg"`
}

// GetPkg returns __IngestPackageInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestPackageInput) GetPkg() PkgInputSpec { return v.Pkg }

// __IngestPackagesInput is used internally by genqlient
type __IngestPackagesInput struct {
	Pkgs []PkgInputSpec `json:"pkgs"`
}

// GetPkgs returns __IngestPackagesInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestPackagesInput) GetPkgs() []PkgInputSpec { return v.Pkgs }

// __IngestSourceInput is used internally by genqlient
type __IngestSourceInput struct {
	Source SourceInputSpec `json:"source"`
}

// GetSource returns __IngestSourceInput.Source, and is useful for accessing the field via an interface.
func (v *__IngestSourceInput) GetSource() SourceInputSpec { return v.Source }

// __IngestSourcesInput is used internally by genqlient
type __IngestSourcesInput struct {
	Sources []SourceInputSpec `json:"sources"`
}

// GetSources returns __IngestSourcesInput.Sources, and is useful for accessing the field via an interface.
func (v *__IngestSourcesInput) GetSources() []SourceInputSpec { return v.Sources }

// __IsDependenciesInput is used internally by genqlient
type __IsDependenciesInput struct {
	Pkgs         []PkgInputSpec          `json:"pkgs"`
	DepPkgs      []PkgInputSpec          `json:"depPkgs"`
	Dependencies []IsDependencyInputSpec `json:"dependencies"`
}

// GetPkgs returns __IsDependenciesInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IsDependenciesInput) GetPkgs() []PkgInputSpec { return v.Pkgs }

// GetDepPkgs returns __IsDependenciesInput.DepPkgs, and is useful for accessing the field via an interface.
func (v *__IsDependenciesInput) GetDepPkgs() []PkgInputSpec { return v.DepPkgs }

// GetDependencies returns __IsDependenciesInput.Dependencies, and is useful for accessing the field via an interface.
func (v *__IsDependenciesInput) GetDependencies() []IsDependencyInputSpec { return v.Dependencies }

// __IsDependencyInput is used internally by genqlient
type __IsDependencyInput struct {
	Pkg        PkgInputSpec          `json:"pkg"`
	DepPkg     PkgInputSpec          `json:"depPkg"`
	Dependency IsDependencyInputSpec `json:"dependency"`
}

// GetPkg returns __IsDependencyInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IsDependencyInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetDepPkg returns __IsDependencyInput.DepPkg, and is useful for accessing the field via an interface.
func (v *__IsDependencyInput) GetDepPkg() PkgInputSpec { return v.DepPkg }

// GetDependency returns __IsDependencyInput.Dependency, and is useful for accessing the field via an interface.
func (v *__IsDependencyInput) GetDependency() IsDependencyInputSpec { return v.Dependency }

// __IsOccurrencePkgInput is used internally by genqlient
type __IsOccurrencePkgInput struct {
	Pkg        PkgInputSpec          `json:"pkg"`
	Artifact   ArtifactInputSpec     `json:"artifact"`
	Occurrence IsOccurrenceInputSpec `json:"occurrence"`
}

// GetPkg returns __IsOccurrencePkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IsOccurrencePkgInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetArtifact returns __IsOccurrencePkgInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IsOccurrencePkgInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetOccurrence returns __IsOccurrencePkgInput.Occurrence, and is useful for accessing the field via an interface.
func (v *__IsOccurrencePkgInput) GetOccurrence() IsOccurrenceInputSpec { return v.Occurrence }

// __IsOccurrenceSrcInput is used internally by genqlient
type __IsOccurrenceSrcInput struct {
	Source     SourceInputSpec       `json:"source"`
	Artifact   ArtifactInputSpec     `json:"artifact"`
	Occurrence IsOccurrenceInputSpec `json:"occurrence"`
}

// GetSource returns __IsOccurrenceSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__IsOccurrenceSrcInput) GetSource() SourceInputSpec { return v.Source }

// GetArtifact returns __IsOccurrenceSrcInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IsOccurrenceSrcInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetOccurrence returns __IsOccurrenceSrcInput.Occurrence, and is useful for accessing the field via an interface.
func (v *__IsOccurrenceSrcInput) GetOccurrence() IsOccurrenceInputSpec { return v.Occurrence }

// __IsOccurrencesPkgInput is used internally by genqlient
type __IsOccurrencesPkgInput struct {
	Pkgs        []PkgInputSpec          `json:"pkgs"`
	Artifacts   []ArtifactInputSpec     `json:"artifacts"`
	Occurrences []IsOccurrenceInputSpec `json:"occurrences"`
}

// GetPkgs returns __IsOccurrencesPkgInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IsOccurrencesPkgInput) GetPkgs() []PkgInputSpec { return v.Pkgs }

// GetArtifacts returns __IsOccurrencesPkgInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IsOccurrencesPkgInput) GetArtifacts() []ArtifactInputSpec { return v.Artifacts }

// GetOccurrences returns __IsOccurrencesPkgInput.Occurrences, and is useful for accessing the field via an interface.
func (v *__IsOccurrencesPkgInput) GetOccurrences() []IsOccurrenceInputSpec { return v.Occurrences }

// __IsOccurrencesSrcInput is used internally by genqlient
type __IsOccurrencesSrcInput struct {
	Sources     []SourceInputSpec       `json:"sources"`
	Artifacts   []ArtifactInputSpec     `json:"artifacts"`
	Occurrences []IsOccurrenceInputSpec `json:"occurrences"`
}

// GetSources returns __IsOccurrencesSrcInput.Sources, and is useful for accessing the field via an interface.
func (v *__IsOccurrencesSrcInput) GetSources() []SourceInputSpec { return v.Sources }

// GetArtifacts returns __IsOccurrencesSrcInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IsOccurrencesSrcInput) GetArtifacts() []ArtifactInputSpec { return v.Artifacts }

// GetOccurrences returns __IsOccurrencesSrcInput.Occurrences, and is useful for accessing the field via an interface.
func (v *__IsOccurrencesSrcInput) GetOccurrences() []IsOccurrenceInputSpec { return v.Occurrences }

// __IsVulnerabilityCVEInput is used internally by genqlient
type __IsVulnerabilityCVEInput struct {
	Osv             OSVInputSpec             `json:"osv"`
	Cve             CVEInputSpec             `json:"cve"`
	IsVulnerability IsVulnerabilityInputSpec `json:"isVulnerability"`
}

// GetOsv returns __IsVulnerabilityCVEInput.Osv, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityCVEInput) GetOsv() OSVInputSpec { return v.Osv }

// GetCve returns __IsVulnerabilityCVEInput.Cve, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityCVEInput) GetCve() CVEInputSpec { return v.Cve }

// GetIsVulnerability returns __IsVulnerabilityCVEInput.IsVulnerability, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityCVEInput) GetIsVulnerability() IsVulnerabilityInputSpec {
	return v.IsVulnerability
}

// __IsVulnerabilityGHSAInput is used internally by genqlient
type __IsVulnerabilityGHSAInput struct {
	Osv             OSVInputSpec             `json:"osv"`
	Ghsa            GHSAInputSpec            `json:"ghsa"`
	IsVulnerability IsVulnerabilityInputSpec `json:"isVulnerability"`
}

// GetOsv returns __IsVulnerabilityGHSAInput.Osv, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityGHSAInput) GetOsv() OSVInputSpec { return v.Osv }

// GetGhsa returns __IsVulnerabilityGHSAInput.Ghsa, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityGHSAInput) GetGhsa() GHSAInputSpec { return v.Ghsa }

// GetIsVulnerability returns __IsVulnerabilityGHSAInput.IsVulnerability, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityGHSAInput) GetIsVulnerability() IsVulnerabilityInputSpec {
	return v.IsVulnerability
}

// __NeighborsInput is used internally by genqlient
type __NeighborsInput struct {
	Node      string `json:"node"`
	UsingOnly []Edge `json:"usingOnly"`
}

// GetNode returns __NeighborsInput.Node, and is useful for accessing the field via an interface.
func (v *__NeighborsInput) GetNode() string { return v.Node }

// GetUsingOnly returns __NeighborsInput.UsingOnly, and is useful for accessing the field via an interface.
func (v *__NeighborsInput) GetUsingOnly() []Edge { return v.UsingOnly }

// __NodeInput is used internally by genqlient
type __NodeInput struct {
	Node string `json:"node"`
}

// GetNode returns __NodeInput.Node, and is useful for accessing the field via an interface.
func (v *__NodeInput) GetNode() string { return v.Node }

// __NodesInput is used internally by genqlient
type __NodesInput struct {
	Nodes []string `json:"nodes"`
}

// GetNodes returns __NodesInput.Nodes, and is useful for accessing the field via an interface.
func (v *__NodesInput) GetNodes() []string { return v.Nodes }

// __OSVsInput is used internally by genqlient
type __OSVsInput struct {
	Filter *OSVSpec `json:"filter"`
}

// GetFilter returns __OSVsInput.Filter, and is useful for accessing the field via an interface.
func (v *__OSVsInput) GetFilter() *OSVSpec { return v.Filter }

// __PackagesInput is used internally by genqlient
type __PackagesInput struct {
	Filter *PkgSpec `json:"filter"`
}

// GetFilter returns __PackagesInput.Filter, and is useful for accessing the field via an interface.
func (v *__PackagesInput) GetFilter() *PkgSpec { return v.Filter }

// __PathInput is used internally by genqlient
type __PathInput struct {
	Subject       string `json:"subject"`
	Target        string `json:"target"`
	MaxPathLength int    `json:"maxPathLength"`
	UsingOnly     []Edge `json:"usingOnly"`
}

// GetSubject returns __PathInput.Subject, and is useful for accessing the field via an interface.
func (v *__PathInput) GetSubject() string { return v.Subject }

// GetTarget returns __PathInput.Target, and is useful for accessing the field via an interface.
func (v *__PathInput) GetTarget() string { return v.Target }

// GetMaxPathLength returns __PathInput.MaxPathLength, and is useful for accessing the field via an interface.
func (v *__PathInput) GetMaxPathLength() int { return v.MaxPathLength }

// GetUsingOnly returns __PathInput.UsingOnly, and is useful for accessing the field via an interface.
func (v *__PathInput) GetUsingOnly() []Edge { return v.UsingOnly }

// __PkgEqualInput is used internally by genqlient
type __PkgEqualInput struct {
	Pkg          PkgInputSpec      `json:"pkg"`
	OtherPackage PkgInputSpec      `json:"otherPackage"`
	PkgEqual     PkgEqualInputSpec `json:"pkgEqual"`
}

// GetPkg returns __PkgEqualInput.Pkg, and is useful for accessing the field via an interface.
func (v *__PkgEqualInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetOtherPackage returns __PkgEqualInput.OtherPackage, and is useful for accessing the field via an interface.
func (v *__PkgEqualInput) GetOtherPackage() PkgInputSpec { return v.OtherPackage }

// GetPkgEqual returns __PkgEqualInput.PkgEqual, and is useful for accessing the field via an interface.
func (v *__PkgEqualInput) GetPkgEqual() PkgEqualInputSpec { return v.PkgEqual }

// __PointOfContactArtifactInput is used internally by genqlient
type __PointOfContactArtifactInput struct {
	Artifact       ArtifactInputSpec       `json:"artifact"`
	PointOfContact PointOfContactInputSpec `json:"pointOfContact"`
}

// GetArtifact returns __PointOfContactArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__PointOfContactArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetPointOfContact returns __PointOfContactArtifactInput.PointOfContact, and is useful for accessing the field via an interface.
func (v *__PointOfContactArtifactInput) GetPointOfContact() PointOfContactInputSpec {
	return v.PointOfContact
}

// __PointOfContactPkgInput is used internally by genqlient
type __PointOfContactPkgInput struct {
	Pkg            PkgInputSpec            `json:"pkg"`
	PkgMatchType   *MatchFlags             `json:"pkgMatchType"`
	PointOfContact PointOfContactInputSpec `json:"pointOfContact"`
}

// GetPkg returns __PointOfContactPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__PointOfContactPkgInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetPkgMatchType returns __PointOfContactPkgInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__PointOfContactPkgInput) GetPkgMatchType() *MatchFlags { return v.PkgMatchType }

// GetPointOfContact returns __PointOfContactPkgInput.PointOfContact, and is useful for accessing the field via an interface.
func (v *__PointOfContactPkgInput) GetPointOfContact() PointOfContactInputSpec {
	return v.PointOfContact
}

// __PointOfContactSrcInput is used internally by genqlient
type __PointOfContactSrcInput struct {
	Source         SourceInputSpec         `json:"source"`
	PointOfContact PointOfContactInputSpec `json:"pointOfContact"`
}

// GetSource returns __PointOfContactSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__PointOfContactSrcInput) GetSource() SourceInputSpec { return v.Source }

// GetPointOfContact returns __PointOfContactSrcInput.PointOfContact, and is useful for accessing the field via an interface.
func (v *__PointOfContactSrcInput) GetPointOfContact() PointOfContactInputSpec {
	return v.PointOfContact
}

// __SLSAForArtifactInput is used internally by genqlient
type __SLSAForArtifactInput struct {
	Artifact  ArtifactInputSpec   `json:"artifact"`
	Materials []ArtifactInputSpec `json:"materials"`
	Builder   BuilderInputSpec    `json:"builder"`
	Slsa      SLSAInputSpec       `json:"slsa"`
}

// GetArtifact returns __SLSAForArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetMaterials returns __SLSAForArtifactInput.Materials, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactInput) GetMaterials() []ArtifactInputSpec { return v.Materials }

// GetBuilder returns __SLSAForArtifactInput.Builder, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactInput) GetBuilder() BuilderInputSpec { return v.Builder }

// GetSlsa returns __SLSAForArtifactInput.Slsa, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactInput) GetSlsa() SLSAInputSpec { return v.Slsa }

// __SLSAForArtifactsInput is used internally by genqlient
type __SLSAForArtifactsInput struct {
	Artifacts     []ArtifactInputSpec   `json:"artifacts"`
	MaterialsList [][]ArtifactInputSpec `json:"materialsList"`
	Builders      []BuilderInputSpec    `json:"builders"`
	SlsaList      []SLSAInputSpec       `json:"slsaList"`
}

// GetArtifacts returns __SLSAForArtifactsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactsInput) GetArtifacts() []ArtifactInputSpec { return v.Artifacts }

// GetMaterialsList returns __SLSAForArtifactsInput.MaterialsList, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactsInput) GetMaterialsList() [][]ArtifactInputSpec { return v.MaterialsList }

// GetBuilders returns __SLSAForArtifactsInput.Builders, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactsInput) GetBuilders() []BuilderInputSpec { return v.Builders }

// GetSlsaList returns __SLSAForArtifactsInput.SlsaList, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactsInput) GetSlsaList() []SLSAInputSpec { return v.SlsaList }

// __SourcesInput is used internally by genqlient
type __SourcesInput struct {
	Filter *SourceSpec `json:"filter"`
}

// GetFilter returns __SourcesInput.Filter, and is useful for accessing the field via an interface.
func (v *__SourcesInput) GetFilter() *SourceSpec { return v.Filter }

// __VEXPackageAndGhsaInput is used internally by genqlient
type __VEXPackageAndGhsaInput struct {
	Pkg          PkgInputSpec          `json:"pkg"`
	Ghsa         GHSAInputSpec         `json:"ghsa"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetPkg returns __VEXPackageAndGhsaInput.Pkg, and is useful for accessing the field via an interface.
func (v *__VEXPackageAndGhsaInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetGhsa returns __VEXPackageAndGhsaInput.Ghsa, and is useful for accessing the field via an interface.
func (v *__VEXPackageAndGhsaInput) GetGhsa() GHSAInputSpec { return v.Ghsa }

// GetVexStatement returns __VEXPackageAndGhsaInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VEXPackageAndGhsaInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __VexArtifactAndCveInput is used internally by genqlient
type __VexArtifactAndCveInput struct {
	Artifact     ArtifactInputSpec     `json:"artifact"`
	Cve          CVEInputSpec          `json:"cve"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetArtifact returns __VexArtifactAndCveInput.Artifact, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndCveInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetCve returns __VexArtifactAndCveInput.Cve, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndCveInput) GetCve() CVEInputSpec { return v.Cve }

// GetVexStatement returns __VexArtifactAndCveInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndCveInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __VexArtifactAndGhsaInput is used internally by genqlient
type __VexArtifactAndGhsaInput struct {
	Artifact     ArtifactInputSpec     `json:"artifact"`
	Ghsa         GHSAInputSpec         `json:"ghsa"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetArtifact returns __VexArtifactAndGhsaInput.Artifact, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndGhsaInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetGhsa returns __VexArtifactAndGhsaInput.Ghsa, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndGhsaInput) GetGhsa() GHSAInputSpec { return v.Ghsa }

// GetVexStatement returns __VexArtifactAndGhsaInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndGhsaInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __VexArtifactAndOsvInput is used internally by genqlient
type __VexArtifactAndOsvInput struct {
	Artifact     ArtifactInputSpec     `json:"artifact"`
	Osv          OSVInputSpec          `json:"osv"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetArtifact returns __VexArtifactAndOsvInput.Artifact, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndOsvInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetOsv returns __VexArtifactAndOsvInput.Osv, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndOsvInput) GetOsv() OSVInputSpec { return v.Osv }

// GetVexStatement returns __VexArtifactAndOsvInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndOsvInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __VexPackageAndCveInput is used internally by genqlient
type __VexPackageAndCveInput struct {
	Pkg          PkgInputSpec          `json:"pkg"`
	Cve          CVEInputSpec          `json:"cve"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetPkg returns __VexPackageAndCveInput.Pkg, and is useful for accessing the field via an interface.
func (v *__VexPackageAndCveInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetCve returns __VexPackageAndCveInput.Cve, and is useful for accessing the field via an interface.
func (v *__VexPackageAndCveInput) GetCve() CVEInputSpec { return v.Cve }

// GetVexStatement returns __VexPackageAndCveInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VexPackageAndCveInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __VexPackageAndOsvInput is used internally by genqlient
type __VexPackageAndOsvInput struct {
	Pkg          PkgInputSpec          `json:"pkg"`
	Osv          OSVInputSpec          `json:"osv"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetPkg returns __VexPackageAndOsvInput.Pkg, and is useful for accessing the field via an interface.
func (v *__VexPackageAndOsvInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetOsv returns __VexPackageAndOsvInput.Osv, and is useful for accessing the field via an interface.
func (v *__VexPackageAndOsvInput) GetOsv() OSVInputSpec { return v.Osv }

// GetVexStatement returns __VexPackageAndOsvInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VexPackageAndOsvInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// The query or mutation executed by Artifacts.
const Artifacts_Operation = `
query Artifacts ($filter: ArtifactSpec) {
	artifacts(artifactSpec: $filter) {
		... AllArtifactTree
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func Artifacts(
	ctx context.Context,
	client graphql.Client,
	filter *ArtifactSpec,
) (*ArtifactsResponse, error) {
	req := &graphql.Request{
		OpName: "Artifacts",
		Query:  Artifacts_Operation,
		Variables: &__ArtifactsInput{
			Filter: filter,
		},
	}
	var err error

	var data ArtifactsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CVEs.
const CVEs_Operation = `
query CVEs ($filter: CVESpec) {
	cve(cveSpec: $filter) {
		... AllCveTree
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
`

func CVEs(
	ctx context.Context,
	client graphql.Client,
	filter *CVESpec,
) (*CVEsResponse, error) {
	req := &graphql.Request{
		OpName: "CVEs",
		Query:  CVEs_Operation,
		Variables: &__CVEsInput{
			Filter: filter,
		},
	}
	var err error

	var data CVEsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyBadArtifact.
const CertifyBadArtifact_Operation = `
mutation CertifyBadArtifact ($artifact: ArtifactInputSpec!, $certifyBad: CertifyBadInputSpec!) {
	ingestCertifyBad(subject: {artifact:$artifact}, certifyBad: $certifyBad) {
		... AllCertifyBad
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyBadArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	certifyBad CertifyBadInputSpec,
) (*CertifyBadArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyBadArtifact",
		Query:  CertifyBadArtifact_Operation,
		Variables: &__CertifyBadArtifactInput{
			Artifact:   artifact,
			CertifyBad: certifyBad,
		},
	}
	var err error

	var data CertifyBadArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyBadPkg.
const CertifyBadPkg_Operation = `
mutation CertifyBadPkg ($pkg: PkgInputSpec!, $pkgMatchType: MatchFlags, $certifyBad: CertifyBadInputSpec!) {
	ingestCertifyBad(subject: {package:$pkg}, pkgMatchType: $pkgMatchType, certifyBad: $certifyBad) {
		... AllCertifyBad
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyBadPkg(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	pkgMatchType *MatchFlags,
	certifyBad CertifyBadInputSpec,
) (*CertifyBadPkgResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyBadPkg",
		Query:  CertifyBadPkg_Operation,
		Variables: &__CertifyBadPkgInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			CertifyBad:   certifyBad,
		},
	}
	var err error

	var data CertifyBadPkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyBadSrc.
const CertifyBadSrc_Operation = `
mutation CertifyBadSrc ($source: SourceInputSpec!, $certifyBad: CertifyBadInputSpec!) {
	ingestCertifyBad(subject: {source:$source}, certifyBad: $certifyBad) {
		... AllCertifyBad
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyBadSrc(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
	certifyBad CertifyBadInputSpec,
) (*CertifyBadSrcResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyBadSrc",
		Query:  CertifyBadSrc_Operation,
		Variables: &__CertifyBadSrcInput{
			Source:     source,
			CertifyBad: certifyBad,
		},
	}
	var err error

	var data CertifyBadSrcResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyBads.
const CertifyBads_Operation = `
query CertifyBads ($filter: CertifyBadSpec) {
	CertifyBad(certifyBadSpec: $filter) {
		... AllCertifyBad
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyBads(
	ctx context.Context,
	client graphql.Client,
	filter *CertifyBadSpec,
) (*CertifyBadsResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyBads",
		Query:  CertifyBads_Operation,
		Variables: &__CertifyBadsInput{
			Filter: filter,
		},
	}
	var err error

	var data CertifyBadsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyCVE.
const CertifyCVE_Operation = `
mutation CertifyCVE ($pkg: PkgInputSpec!, $cve: CVEInputSpec!, $certifyVuln: VulnerabilityMetaDataInput!) {
	ingestVulnerability(pkg: $pkg, vulnerability: {cve:$cve}, certifyVuln: $certifyVuln) {
		... AllCertifyVuln
	}
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`

func CertifyCVE(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	cve CVEInputSpec,
	certifyVuln VulnerabilityMetaDataInput,
) (*CertifyCVEResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyCVE",
		Query:  CertifyCVE_Operation,
		Variables: &__CertifyCVEInput{
			Pkg:         pkg,
			Cve:         cve,
			CertifyVuln: certifyVuln,
		},
	}
	var err error

	var data CertifyCVEResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyGHSA.
const CertifyGHSA_Operation = `
mutation CertifyGHSA ($pkg: PkgInputSpec!, $ghsa: GHSAInputSpec!, $certifyVuln: VulnerabilityMetaDataInput!) {
	ingestVulnerability(pkg: $pkg, vulnerability: {ghsa:$ghsa}, certifyVuln: $certifyVuln) {
		... AllCertifyVuln
	}
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`

func CertifyGHSA(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	ghsa GHSAInputSpec,
	certifyVuln VulnerabilityMetaDataInput,
) (*CertifyGHSAResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyGHSA",
		Query:  CertifyGHSA_Operation,
		Variables: &__CertifyGHSAInput{
			Pkg:         pkg,
			Ghsa:        ghsa,
			CertifyVuln: certifyVuln,
		},
	}
	var err error

	var data CertifyGHSAResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyGoodArtifact.
const CertifyGoodArtifact_Operation = `
mutation CertifyGoodArtifact ($artifact: ArtifactInputSpec!, $certifyGood: CertifyGoodInputSpec!) {
	ingestCertifyGood(subject: {artifact:$artifact}, certifyGood: $certifyGood) {
		... AllCertifyGood
	}
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyGoodArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	certifyGood CertifyGoodInputSpec,
) (*CertifyGoodArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyGoodArtifact",
		Query:  CertifyGoodArtifact_Operation,
		Variables: &__CertifyGoodArtifactInput{
			Artifact:    artifact,
			CertifyGood: certifyGood,
		},
	}
	var err error

	var data CertifyGoodArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyGoodPkg.
const CertifyGoodPkg_Operation = `
mutation CertifyGoodPkg ($pkg: PkgInputSpec!, $pkgMatchType: MatchFlags, $certifyGood: CertifyGoodInputSpec!) {
	ingestCertifyGood(subject: {package:$pkg}, pkgMatchType: $pkgMatchType, certifyGood: $certifyGood) {
		... AllCertifyGood
	}
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyGoodPkg(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	pkgMatchType *MatchFlags,
	certifyGood CertifyGoodInputSpec,
) (*CertifyGoodPkgResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyGoodPkg",
		Query:  CertifyGoodPkg_Operation,
		Variables: &__CertifyGoodPkgInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			CertifyGood:  certifyGood,
		},
	}
	var err error

	var data CertifyGoodPkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyGoodSrc.
const CertifyGoodSrc_Operation = `
mutation CertifyGoodSrc ($source: SourceInputSpec!, $certifyGood: CertifyGoodInputSpec!) {
	ingestCertifyGood(subject: {source:$source}, certifyGood: $certifyGood) {
		... AllCertifyGood
	}
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyGoodSrc(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
	certifyGood CertifyGoodInputSpec,
) (*CertifyGoodSrcResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyGoodSrc",
		Query:  CertifyGoodSrc_Operation,
		Variables: &__CertifyGoodSrcInput{
			Source:      source,
			CertifyGood: certifyGood,
		},
	}
	var err error

	var data CertifyGoodSrcResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyNoKnownVuln.
const CertifyNoKnownVuln_Operation = `
mutation CertifyNoKnownVuln ($pkg: PkgInputSpec!, $certifyVuln: VulnerabilityMetaDataInput!) {
	ingestVulnerability(pkg: $pkg, vulnerability: {noVuln:true}, certifyVuln: $certifyVuln) {
		... AllCertifyVuln
	}
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`

func CertifyNoKnownVuln(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	certifyVuln VulnerabilityMetaDataInput,
) (*CertifyNoKnownVulnResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyNoKnownVuln",
		Query:  CertifyNoKnownVuln_Operation,
		Variables: &__CertifyNoKnownVulnInput{
			Pkg:         pkg,
			CertifyVuln: certifyVuln,
		},
	}
	var err error

	var data CertifyNoKnownVulnResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyOSV.
const CertifyOSV_Operation = `
mutation CertifyOSV ($pkg: PkgInputSpec!, $osv: OSVInputSpec!, $certifyVuln: VulnerabilityMetaDataInput!) {
	ingestVulnerability(pkg: $pkg, vulnerability: {osv:$osv}, certifyVuln: $certifyVuln) {
		... AllCertifyVuln
	}
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`

func CertifyOSV(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	osv OSVInputSpec,
	certifyVuln VulnerabilityMetaDataInput,
) (*CertifyOSVResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyOSV",
		Query:  CertifyOSV_Operation,
		Variables: &__CertifyOSVInput{
			Pkg:         pkg,
			Osv:         osv,
			CertifyVuln: certifyVuln,
		},
	}
	var err error

	var data CertifyOSVResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyScorecard.
const CertifyScorecard_Operation = `
mutation CertifyScorecard ($source: SourceInputSpec!, $scorecard: ScorecardInputSpec!) {
	ingestScorecard(source: $source, scorecard: $scorecard) {
		... AllCertifyScorecard
	}
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func CertifyScorecard(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
	scorecard ScorecardInputSpec,
) (*CertifyScorecardResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyScorecard",
		Query:  CertifyScorecard_Operation,
		Variables: &__CertifyScorecardInput{
			Source:    source,
			Scorecard: scorecard,
		},
	}
	var err error

	var data CertifyScorecardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CertifyScorecards.
const CertifyScorecards_Operation = `
mutation CertifyScorecards ($sources: [SourceInputSpec!]!, $scorecards: [ScorecardInputSpec!]!) {
	ingestScorecards(sources: $sources, scorecards: $scorecards) {
		... AllCertifyScorecard
	}
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func CertifyScorecards(
	ctx context.Context,
	client graphql.Client,
	sources []SourceInputSpec,
	scorecards []ScorecardInputSpec,
) (*CertifyScorecardsResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyScorecards",
		Query:  CertifyScorecards_Operation,
		Variables: &__CertifyScorecardsInput{
			Sources:    sources,
			Scorecards: scorecards,
		},
	}
	var err error

	var data CertifyScorecardsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by FindSoftware.
const FindSoftware_Operation = `
query FindSoftware ($searchText: String!) {
	findSoftware(searchText: $searchText) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func FindSoftware(
	ctx context.Context,
	client graphql.Client,
	searchText string,
) (*FindSoftwareResponse, error) {
	req := &graphql.Request{
		OpName: "FindSoftware",
		Query:  FindSoftware_Operation,
		Variables: &__FindSoftwareInput{
			SearchText: searchText,
		},
	}
	var err error

	var data FindSoftwareResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by GHSAs.
const GHSAs_Operation = `
query GHSAs ($filter: GHSASpec) {
	ghsa(ghsaSpec: $filter) {
		... AllGHSATree
	}
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`

func GHSAs(
	ctx context.Context,
	client graphql.Client,
	filter *GHSASpec,
) (*GHSAsResponse, error) {
	req := &graphql.Request{
		OpName: "GHSAs",
		Query:  GHSAs_Operation,
		Variables: &__GHSAsInput{
			Filter: filter,
		},
	}
	var err error

	var data GHSAsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by HasMetadataArtifact.
const HasMetadataArtifact_Operation = `
mutation HasMetadataArtifact ($artifact: ArtifactInputSpec!, $hasMetadata: HasMetadataInputSpec!) {
	ingestHasMetadata(subject: {artifact:$artifact}, hasMetadata: $hasMetadata) {
		... AllHasMetadata
	}
}
fragment AllHasMetadata on HasMetadata {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	key
	value
	timestamp
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func HasMetadataArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	hasMetadata HasMetadataInputSpec,
) (*HasMetadataArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "HasMetadataArtifact",
		Query:  HasMetadataArtifact_Operation,
		Variables: &__HasMetadataArtifactInput{
			Artifact:    artifact,
			HasMetadata: hasMetadata,
		},
	}
	var err error

	var data HasMetadataArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by HasMetadataPkg.
const HasMetadataPkg_Operation = `
mutation HasMetadataPkg ($pkg: PkgInputSpec!, $pkgMatchType: MatchFlags, $hasMetadata: HasMetadataInputSpec!) {
	ingestHasMetadata(subject: {package:$pkg}, pkgMatchType: $pkgMatchType, hasMetadata: $hasMetadata) {
		... AllHasMetadata
	}
}
fragment AllHasMetadata on HasMetadata {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	key
	value
	timestamp
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func HasMetadataPkg(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	pkgMatchType *MatchFlags,
	hasMetadata HasMetadataInputSpec,
) (*HasMetadataPkgResponse, error) {
	req := &graphql.Request{
		OpName: "HasMetadataPkg",
		Query:  HasMetadataPkg_Operation,
		Variables: &__HasMetadataPkgInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			HasMetadata:  hasMetadata,
		},
	}
	var err error

	var data HasMetadataPkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by HasMetadataSrc.
const HasMetadataSrc_Operation = `
mutation HasMetadataSrc ($source: SourceInputSpec!, $hasMetadata: HasMetadataInputSpec!) {
	ingestHasMetadata(subject: {source:$source}, hasMetadata: $hasMetadata) {
		... AllHasMetadata
	}
}
fragment AllHasMetadata on HasMetadata {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	key
	value
	timestamp
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func HasMetadataSrc(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
	hasMetadata HasMetadataInputSpec,
) (*HasMetadataSrcResponse, error) {
	req := &graphql.Request{
		OpName: "HasMetadataSrc",
		Query:  HasMetadataSrc_Operation,
		Variables: &__HasMetadataSrcInput{
			Source:      source,
			HasMetadata: hasMetadata,
		},
	}
	var err error

	var data HasMetadataSrcResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by HasSBOMArtifact.
const HasSBOMArtifact_Operation = `
mutation HasSBOMArtifact ($artifact: ArtifactInputSpec!, $hasSBOM: HasSBOMInputSpec!) {
	ingestHasSBOM(subject: {artifact:$artifact}, hasSBOM: $hasSBOM) {
		... AllHasSBOMTree
	}
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func HasSBOMArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	hasSBOM HasSBOMInputSpec,
) (*HasSBOMArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "HasSBOMArtifact",
		Query:  HasSBOMArtifact_Operation,
		Variables: &__HasSBOMArtifactInput{
			Artifact: artifact,
			HasSBOM:  hasSBOM,
		},
	}
	var err error

	var data HasSBOMArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by HasSBOMPkg.
const HasSBOMPkg_Operation = `
mutation HasSBOMPkg ($pkg: PkgInputSpec!, $hasSBOM: HasSBOMInputSpec!) {
	ingestHasSBOM(subject: {package:$pkg}, hasSBOM: $hasSBOM) {
		... AllHasSBOMTree
	}
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func HasSBOMPkg(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	hasSBOM HasSBOMInputSpec,
) (*HasSBOMPkgResponse, error) {
	req := &graphql.Request{
		OpName: "HasSBOMPkg",
		Query:  HasSBOMPkg_Operation,
		Variables: &__HasSBOMPkgInput{
			Pkg:     pkg,
			HasSBOM: hasSBOM,
		},
	}
	var err error

	var data HasSBOMPkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by HasSourceAt.
const HasSourceAt_Operation = `
mutation HasSourceAt ($pkg: PkgInputSpec!, $pkgMatchType: MatchFlags!, $source: SourceInputSpec!, $hasSourceAt: HasSourceAtInputSpec!) {
	ingestHasSourceAt(pkg: $pkg, pkgMatchType: $pkgMatchType, source: $source, hasSourceAt: $hasSourceAt) {
		... AllHasSourceAt
	}
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func HasSourceAt(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	pkgMatchType MatchFlags,
	source SourceInputSpec,
	hasSourceAt HasSourceAtInputSpec,
) (*HasSourceAtResponse, error) {
	req := &graphql.Request{
		OpName: "HasSourceAt",
		Query:  HasSourceAt_Operation,
		Variables: &__HasSourceAtInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			Source:       source,
			HasSourceAt:  hasSourceAt,
		},
	}
	var err error

	var data HasSourceAtResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by HashEqual.
const HashEqual_Operation = `
mutation HashEqual ($artifact: ArtifactInputSpec!, $otherArtifact: ArtifactInputSpec!, $hashEqual: HashEqualInputSpec!) {
	ingestHashEqual(artifact: $artifact, otherArtifact: $otherArtifact, hashEqual: $hashEqual) {
		... AllHashEqualTree
	}
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func HashEqual(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	otherArtifact ArtifactInputSpec,
	hashEqual HashEqualInputSpec,
) (*HashEqualResponse, error) {
	req := &graphql.Request{
		OpName: "HashEqual",
		Query:  HashEqual_Operation,
		Variables: &__HashEqualInput{
			Artifact:      artifact,
			OtherArtifact: otherArtifact,
			HashEqual:     hashEqual,
		},
	}
	var err error

	var data HashEqualResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestArtifact.
const IngestArtifact_Operation = `
mutation IngestArtifact ($artifact: ArtifactInputSpec!) {
	ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func IngestArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
) (*IngestArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "IngestArtifact",
		Query:  IngestArtifact_Operation,
		Variables: &__IngestArtifactInput{
			Artifact: artifact,
		},
	}
	var err error

	var data IngestArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestArtifacts.
const IngestArtifacts_Operation = `
mutation IngestArtifacts ($artifacts: [ArtifactInputSpec!]!) {
	ingestArtifacts(artifacts: $artifacts) {
		... AllArtifactTree
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func IngestArtifacts(
	ctx context.Context,
	client graphql.Client,
	artifacts []ArtifactInputSpec,
) (*IngestArtifactsResponse, error) {
	req := &graphql.Request{
		OpName: "IngestArtifacts",
		Query:  IngestArtifacts_Operation,
		Variables: &__IngestArtifactsInput{
			Artifacts: artifacts,
		},
	}
	var err error

	var data IngestArtifactsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestBuilder.
const IngestBuilder_Operation = `
mutation IngestBuilder ($builder: BuilderInputSpec!) {
	ingestBuilder(builder: $builder) {
		uri
	}
}
`

func IngestBuilder(
	ctx context.Context,
	client graphql.Client,
	builder BuilderInputSpec,
) (*IngestBuilderResponse, error) {
	req := &graphql.Request{
		OpName: "IngestBuilder",
		Query:  IngestBuilder_Operation,
		Variables: &__IngestBuilderInput{
			Builder: builder,
		},
	}
	var err error

	var data IngestBuilderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestBuilders.
const IngestBuilders_Operation = `
mutation IngestBuilders ($builders: [BuilderInputSpec!]!) {
	ingestBuilders(builders: $builders) {
		uri
	}
}
`

func IngestBuilders(
	ctx context.Context,
	client graphql.Client,
	builders []BuilderInputSpec,
) (*IngestBuildersResponse, error) {
	req := &graphql.Request{
		OpName: "IngestBuilders",
		Query:  IngestBuilders_Operation,
		Variables: &__IngestBuildersInput{
			Builders: builders,
		},
	}
	var err error

	var data IngestBuildersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestCVE.
const IngestCVE_Operation = `
mutation IngestCVE ($cve: CVEInputSpec!) {
	ingestCVE(cve: $cve) {
		... AllCveTree
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
`

func IngestCVE(
	ctx context.Context,
	client graphql.Client,
	cve CVEInputSpec,
) (*IngestCVEResponse, error) {
	req := &graphql.Request{
		OpName: "IngestCVE",
		Query:  IngestCVE_Operation,
		Variables: &__IngestCVEInput{
			Cve: cve,
		},
	}
	var err error

	var data IngestCVEResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestCVEs.
const IngestCVEs_Operation = `
mutation IngestCVEs ($cves: [CVEInputSpec!]!) {
	ingestCVEs(cves: $cves) {
		... AllCveTree
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
`

func IngestCVEs(
	ctx context.Context,
	client graphql.Client,
	cves []CVEInputSpec,
) (*IngestCVEsResponse, error) {
	req := &graphql.Request{
		OpName: "IngestCVEs",
		Query:  IngestCVEs_Operation,
		Variables: &__IngestCVEsInput{
			Cves: cves,
		},
	}
	var err error

	var data IngestCVEsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestGHSA.
const IngestGHSA_Operation = `
mutation IngestGHSA ($ghsa: GHSAInputSpec!) {
	ingestGHSA(ghsa: $ghsa) {
		... AllGHSATree
	}
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`

func IngestGHSA(
	ctx context.Context,
	client graphql.Client,
	ghsa GHSAInputSpec,
) (*IngestGHSAResponse, error) {
	req := &graphql.Request{
		OpName: "IngestGHSA",
		Query:  IngestGHSA_Operation,
		Variables: &__IngestGHSAInput{
			Ghsa: ghsa,
		},
	}
	var err error

	var data IngestGHSAResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestGHSAs.
const IngestGHSAs_Operation = `
mutation IngestGHSAs ($ghsas: [GHSAInputSpec!]!) {
	ingestGHSAs(ghsas: $ghsas) {
		... AllGHSATree
	}
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`

func IngestGHSAs(
	ctx context.Context,
	client graphql.Client,
	ghsas []GHSAInputSpec,
) (*IngestGHSAsResponse, error) {
	req := &graphql.Request{
		OpName: "IngestGHSAs",
		Query:  IngestGHSAs_Operation,
		Variables: &__IngestGHSAsInput{
			Ghsas: ghsas,
		},
	}
	var err error

	var data IngestGHSAsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestOSV.
const IngestOSV_Operation = `
mutation IngestOSV ($osv: OSVInputSpec!) {
	ingestOSV(osv: $osv) {
		... AllOSVTree
	}
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`

func IngestOSV(
	ctx context.Context,
	client graphql.Client,
	osv OSVInputSpec,
) (*IngestOSVResponse, error) {
	req := &graphql.Request{
		OpName: "IngestOSV",
		Query:  IngestOSV_Operation,
		Variables: &__IngestOSVInput{
			Osv: osv,
		},
	}
	var err error

	var data IngestOSVResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestOSVs.
const IngestOSVs_Operation = `
mutation IngestOSVs ($osvs: [OSVInputSpec!]!) {
	ingestOSVs(osvs: $osvs) {
		... AllOSVTree
	}
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`

func IngestOSVs(
	ctx context.Context,
	client graphql.Client,
	osvs []OSVInputSpec,
) (*IngestOSVsResponse, error) {
	req := &graphql.Request{
		OpName: "IngestOSVs",
		Query:  IngestOSVs_Operation,
		Variables: &__IngestOSVsInput{
			Osvs: osvs,
		},
	}
	var err error

	var data IngestOSVsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestPackage.
const IngestPackage_Operation = `
mutation IngestPackage ($pkg: PkgInputSpec!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func IngestPackage(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
) (*IngestPackageResponse, error) {
	req := &graphql.Request{
		OpName: "IngestPackage",
		Query:  IngestPackage_Operation,
		Variables: &__IngestPackageInput{
			Pkg: pkg,
		},
	}
	var err error

	var data IngestPackageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestPackages.
const IngestPackages_Operation = `
mutation IngestPackages ($pkgs: [PkgInputSpec!]!) {
	ingestPackages(pkgs: $pkgs) {
		... AllPkgTree
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func IngestPackages(
	ctx context.Context,
	client graphql.Client,
	pkgs []PkgInputSpec,
) (*IngestPackagesResponse, error) {
	req := &graphql.Request{
		OpName: "IngestPackages",
		Query:  IngestPackages_Operation,
		Variables: &__IngestPackagesInput{
			Pkgs: pkgs,
		},
	}
	var err error

	var data IngestPackagesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestSource.
const IngestSource_Operation = `
mutation IngestSource ($source: SourceInputSpec!) {
	ingestSource(source: $source) {
		... AllSourceTree
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func IngestSource(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
) (*IngestSourceResponse, error) {
	req := &graphql.Request{
		OpName: "IngestSource",
		Query:  IngestSource_Operation,
		Variables: &__IngestSourceInput{
			Source: source,
		},
	}
	var err error

	var data IngestSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IngestSources.
const IngestSources_Operation = `
mutation IngestSources ($sources: [SourceInputSpec!]!) {
	ingestSources(sources: $sources) {
		... AllSourceTree
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func IngestSources(
	ctx context.Context,
	client graphql.Client,
	sources []SourceInputSpec,
) (*IngestSourcesResponse, error) {
	req := &graphql.Request{
		OpName: "IngestSources",
		Query:  IngestSources_Operation,
		Variables: &__IngestSourcesInput{
			Sources: sources,
		},
	}
	var err error

	var data IngestSourcesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IsDependencies.
const IsDependencies_Operation = `
mutation IsDependencies ($pkgs: [PkgInputSpec!]!, $depPkgs: [PkgInputSpec!]!, $dependencies: [IsDependencyInputSpec!]!) {
	ingestDependencies(pkgs: $pkgs, depPkgs: $depPkgs, dependencies: $dependencies) {
		... AllIsDependencyTree
	}
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func IsDependencies(
	ctx context.Context,
	client graphql.Client,
	pkgs []PkgInputSpec,
	depPkgs []PkgInputSpec,
	dependencies []IsDependencyInputSpec,
) (*IsDependenciesResponse, error) {
	req := &graphql.Request{
		OpName: "IsDependencies",
		Query:  IsDependencies_Operation,
		Variables: &__IsDependenciesInput{
			Pkgs:         pkgs,
			DepPkgs:      depPkgs,
			Dependencies: dependencies,
		},
	}
	var err error

	var data IsDependenciesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IsDependency.
const IsDependency_Operation = `
mutation IsDependency ($pkg: PkgInputSpec!, $depPkg: PkgInputSpec!, $dependency: IsDependencyInputSpec!) {
	ingestDependency(pkg: $pkg, depPkg: $depPkg, dependency: $dependency) {
		... AllIsDependencyTree
	}
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func IsDependency(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	depPkg PkgInputSpec,
	dependency IsDependencyInputSpec,
) (*IsDependencyResponse, error) {
	req := &graphql.Request{
		OpName: "IsDependency",
		Query:  IsDependency_Operation,
		Variables: &__IsDependencyInput{
			Pkg:        pkg,
			DepPkg:     depPkg,
			Dependency: dependency,
		},
	}
	var err error

	var data IsDependencyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IsOccurrencePkg.
const IsOccurrencePkg_Operation = `
mutation IsOccurrencePkg ($pkg: PkgInputSpec!, $artifact: ArtifactInputSpec!, $occurrence: IsOccurrenceInputSpec!) {
	ingestOccurrence(subject: {package:$pkg}, artifact: $artifact, occurrence: $occurrence) {
		... AllIsOccurrencesTree
	}
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func IsOccurrencePkg(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	artifact ArtifactInputSpec,
	occurrence IsOccurrenceInputSpec,
) (*IsOccurrencePkgResponse, error) {
	req := &graphql.Request{
		OpName: "IsOccurrencePkg",
		Query:  IsOccurrencePkg_Operation,
		Variables: &__IsOccurrencePkgInput{
			Pkg:        pkg,
			Artifact:   artifact,
			Occurrence: occurrence,
		},
	}
	var err error

	var data IsOccurrencePkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IsOccurrenceSrc.
const IsOccurrenceSrc_Operation = `
mutation IsOccurrenceSrc ($source: SourceInputSpec!, $artifact: ArtifactInputSpec!, $occurrence: IsOccurrenceInputSpec!) {
	ingestOccurrence(subject: {source:$source}, artifact: $artifact, occurrence: $occurrence) {
		... AllIsOccurrencesTree
	}
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func IsOccurrenceSrc(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
	artifact ArtifactInputSpec,
	occurrence IsOccurrenceInputSpec,
) (*IsOccurrenceSrcResponse, error) {
	req := &graphql.Request{
		OpName: "IsOccurrenceSrc",
		Query:  IsOccurrenceSrc_Operation,
		Variables: &__IsOccurrenceSrcInput{
			Source:     source,
			Artifact:   artifact,
			Occurrence: occurrence,
		},
	}
	var err error

	var data IsOccurrenceSrcResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IsOccurrencesPkg.
const IsOccurrencesPkg_Operation = `
mutation IsOccurrencesPkg ($pkgs: [PkgInputSpec!]!, $artifacts: [ArtifactInputSpec!]!, $occurrences: [IsOccurrenceInputSpec!]!) {
	ingestOccurrences(subjects: {packages:$pkgs}, artifacts: $artifacts, occurrences: $occurrences) {
		... AllIsOccurrencesTree
	}
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func IsOccurrencesPkg(
	ctx context.Context,
	client graphql.Client,
	pkgs []PkgInputSpec,
	artifacts []ArtifactInputSpec,
	occurrences []IsOccurrenceInputSpec,
) (*IsOccurrencesPkgResponse, error) {
	req := &graphql.Request{
		OpName: "IsOccurrencesPkg",
		Query:  IsOccurrencesPkg_Operation,
		Variables: &__IsOccurrencesPkgInput{
			Pkgs:        pkgs,
			Artifacts:   artifacts,
			Occurrences: occurrences,
		},
	}
	var err error

	var data IsOccurrencesPkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IsOccurrencesSrc.
const IsOccurrencesSrc_Operation = `
mutation IsOccurrencesSrc ($sources: [SourceInputSpec!]!, $artifacts: [ArtifactInputSpec!]!, $occurrences: [IsOccurrenceInputSpec!]!) {
	ingestOccurrences(subjects: {sources:$sources}, artifacts: $artifacts, occurrences: $occurrences) {
		... AllIsOccurrencesTree
	}
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func IsOccurrencesSrc(
	ctx context.Context,
	client graphql.Client,
	sources []SourceInputSpec,
	artifacts []ArtifactInputSpec,
	occurrences []IsOccurrenceInputSpec,
) (*IsOccurrencesSrcResponse, error) {
	req := &graphql.Request{
		OpName: "IsOccurrencesSrc",
		Query:  IsOccurrencesSrc_Operation,
		Variables: &__IsOccurrencesSrcInput{
			Sources:     sources,
			Artifacts:   artifacts,
			Occurrences: occurrences,
		},
	}
	var err error

	var data IsOccurrencesSrcResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IsVulnerabilityCVE.
const IsVulnerabilityCVE_Operation = `
mutation IsVulnerabilityCVE ($osv: OSVInputSpec!, $cve: CVEInputSpec!, $isVulnerability: IsVulnerabilityInputSpec!) {
	ingestIsVulnerability(osv: $osv, vulnerability: {cve:$cve}, isVulnerability: $isVulnerability) {
		... AllIsVulnerability
	}
}
fragment AllIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`

func IsVulnerabilityCVE(
	ctx context.Context,
	client graphql.Client,
	osv OSVInputSpec,
	cve CVEInputSpec,
	isVulnerability IsVulnerabilityInputSpec,
) (*IsVulnerabilityCVEResponse, error) {
	req := &graphql.Request{
		OpName: "IsVulnerabilityCVE",
		Query:  IsVulnerabilityCVE_Operation,
		Variables: &__IsVulnerabilityCVEInput{
			Osv:             osv,
			Cve:             cve,
			IsVulnerability: isVulnerability,
		},
	}
	var err error

	var data IsVulnerabilityCVEResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by IsVulnerabilityGHSA.
const IsVulnerabilityGHSA_Operation = `
mutation IsVulnerabilityGHSA ($osv: OSVInputSpec!, $ghsa: GHSAInputSpec!, $isVulnerability: IsVulnerabilityInputSpec!) {
	ingestIsVulnerability(osv: $osv, vulnerability: {ghsa:$ghsa}, isVulnerability: $isVulnerability) {
		... AllIsVulnerability
	}
}
fragment AllIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`

func IsVulnerabilityGHSA(
	ctx context.Context,
	client graphql.Client,
	osv OSVInputSpec,
	ghsa GHSAInputSpec,
	isVulnerability IsVulnerabilityInputSpec,
) (*IsVulnerabilityGHSAResponse, error) {
	req := &graphql.Request{
		OpName: "IsVulnerabilityGHSA",
		Query:  IsVulnerabilityGHSA_Operation,
		Variables: &__IsVulnerabilityGHSAInput{
			Osv:             osv,
			Ghsa:            ghsa,
			IsVulnerability: isVulnerability,
		},
	}
	var err error

	var data IsVulnerabilityGHSAResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by Neighbors.
const Neighbors_Operation = `
query Neighbors ($node: ID!, $usingOnly: [Edge!]!) {
	neighbors(node: $node, usingOnly: $usingOnly) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... AllBuilderTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... AllPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... AllIsDependencyTree
		}
		... on HasSLSA {
			... AllSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... AllCertifyGood
		}
		... on HashEqual {
			... AllHashEqualTree
		}
		... on HasSBOM {
			... AllHasSBOMTree
		}
		... on HasSourceAt {
			... AllHasSourceAt
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on IsVulnerability {
			... AllIsVulnerability
		}
		... on CertifyVEXStatement {
			... AllCertifyVEXStatement
		}
		... on Builder {
			... AllBuilderTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllBuilderTree on Builder {
	id
	uri
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
`

func Neighbors(
	ctx context.Context,
	client graphql.Client,
	node string,
	usingOnly []Edge,
) (*NeighborsResponse, error) {
	req := &graphql.Request{
		OpName: "Neighbors",
		Query:  Neighbors_Operation,
		Variables: &__NeighborsInput{
			Node:      node,
			UsingOnly: usingOnly,
		},
	}
	var err error

	var data NeighborsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by Node.
const Node_Operation = `
query Node ($node: ID!) {
	node(node: $node) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... AllBuilderTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... AllPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... AllIsDependencyTree
		}
		... on HasSLSA {
			... AllSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... AllCertifyGood
		}
		... on HashEqual {
			... AllHashEqualTree
		}
		... on HasSBOM {
			... AllHasSBOMTree
		}
		... on HasSourceAt {
			... AllHasSourceAt
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on IsVulnerability {
			... AllIsVulnerability
		}
		... on CertifyVEXStatement {
			... AllCertifyVEXStatement
		}
		... on Builder {
			... AllBuilderTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllBuilderTree on Builder {
	id
	uri
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
`

func Node(
	ctx context.Context,
	client graphql.Client,
	node string,
) (*NodeResponse, error) {
	req := &graphql.Request{
		OpName: "Node",
		Query:  Node_Operation,
		Variables: &__NodeInput{
			Node: node,
		},
	}
	var err error

	var data NodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by Nodes.
const Nodes_Operation = `
query Nodes ($nodes: [ID!]!) {
	nodes(nodes: $nodes) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... AllBuilderTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... AllPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... AllIsDependencyTree
		}
		... on HasSLSA {
			... AllSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... AllCertifyGood
		}
		... on HashEqual {
			... AllHashEqualTree
		}
		... on HasSBOM {
			... AllHasSBOMTree
		}
		... on HasSourceAt {
			... AllHasSourceAt
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on IsVulnerability {
			... AllIsVulnerability
		}
		... on CertifyVEXStatement {
			... AllCertifyVEXStatement
		}
		... on Builder {
			... AllBuilderTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllBuilderTree on Builder {
	id
	uri
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
`

func Nodes(
	ctx context.Context,
	client graphql.Client,
	nodes []string,
) (*NodesResponse, error) {
	req := &graphql.Request{
		OpName: "Nodes",
		Query:  Nodes_Operation,
		Variables: &__NodesInput{
			Nodes: nodes,
		},
	}
	var err error

	var data NodesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by OSVs.
const OSVs_Operation = `
query OSVs ($filter: OSVSpec) {
	osv(osvSpec: $filter) {
		... AllOSVTree
	}
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`

func OSVs(
	ctx context.Context,
	client graphql.Client,
	filter *OSVSpec,
) (*OSVsResponse, error) {
	req := &graphql.Request{
		OpName: "OSVs",
		Query:  OSVs_Operation,
		Variables: &__OSVsInput{
			Filter: filter,
		},
	}
	var err error

	var data OSVsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by Packages.
const Packages_Operation = `
query Packages ($filter: PkgSpec) {
	packages(pkgSpec: $filter) {
		... AllPkgTree
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func Packages(
	ctx context.Context,
	client graphql.Client,
	filter *PkgSpec,
) (*PackagesResponse, error) {
	req := &graphql.Request{
		OpName: "Packages",
		Query:  Packages_Operation,
		Variables: &__PackagesInput{
			Filter: filter,
		},
	}
	var err error

	var data PackagesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by Path.
const Path_Operation = `
query Path ($subject: ID!, $target: ID!, $maxPathLength: Int!, $usingOnly: [Edge!]!) {
	path(subject: $subject, target: $target, maxPathLength: $maxPathLength, usingOnly: $usingOnly) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... AllBuilderTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... AllPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... AllIsDependencyTree
		}
		... on HasSLSA {
			... AllSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... AllCertifyGood
		}
		... on HashEqual {
			... AllHashEqualTree
		}
		... on HasSBOM {
			... AllHasSBOMTree
		}
		... on HasSourceAt {
			... AllHasSourceAt
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on IsVulnerability {
			... AllIsVulnerability
		}
		... on CertifyVEXStatement {
			... AllCertifyVEXStatement
		}
		... on Builder {
			... AllBuilderTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllBuilderTree on Builder {
	id
	uri
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
`

func Path(
	ctx context.Context,
	client graphql.Client,
	subject string,
	target string,
	maxPathLength int,
	usingOnly []Edge,
) (*PathResponse, error) {
	req := &graphql.Request{
		OpName: "Path",
		Query:  Path_Operation,
		Variables: &__PathInput{
			Subject:       subject,
			Target:        target,
			MaxPathLength: maxPathLength,
			UsingOnly:     usingOnly,
		},
	}
	var err error

	var data PathResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by PkgEqual.
const PkgEqual_Operation = `
mutation PkgEqual ($pkg: PkgInputSpec!, $otherPackage: PkgInputSpec!, $pkgEqual: PkgEqualInputSpec!) {
	pkg: ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	otherPackage: ingestPackage(pkg: $otherPackage) {
		... AllPkgTree
	}
	ingestPkgEqual(pkg: $pkg, otherPackage: $otherPackage, pkgEqual: $pkgEqual) {
		... AllPkgEqual
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
`

func PkgEqual(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	otherPackage PkgInputSpec,
	pkgEqual PkgEqualInputSpec,
) (*PkgEqualResponse, error) {
	req := &graphql.Request{
		OpName: "PkgEqual",
		Query:  PkgEqual_Operation,
		Variables: &__PkgEqualInput{
			Pkg:          pkg,
			OtherPackage: otherPackage,
			PkgEqual:     pkgEqual,
		},
	}
	var err error

	var data PkgEqualResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by PointOfContactArtifact.
const PointOfContactArtifact_Operation = `
mutation PointOfContactArtifact ($artifact: ArtifactInputSpec!, $pointOfContact: PointOfContactInputSpec!) {
	ingestPointOfContact(subject: {artifact:$artifact}, pointOfContact: $pointOfContact) {
		... AllPointOfContact
	}
}
fragment AllPointOfContact on PointOfContact {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	email
	info
	since
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func PointOfContactArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	pointOfContact PointOfContactInputSpec,
) (*PointOfContactArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "PointOfContactArtifact",
		Query:  PointOfContactArtifact_Operation,
		Variables: &__PointOfContactArtifactInput{
			Artifact:       artifact,
			PointOfContact: pointOfContact,
		},
	}
	var err error

	var data PointOfContactArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by PointOfContactPkg.
const PointOfContactPkg_Operation = `
mutation PointOfContactPkg ($pkg: PkgInputSpec!, $pkgMatchType: MatchFlags, $pointOfContact: PointOfContactInputSpec!) {
	ingestPointOfContact(subject: {package:$pkg}, pkgMatchType: $pkgMatchType, pointOfContact: $pointOfContact) {
		... AllPointOfContact
	}
}
fragment AllPointOfContact on PointOfContact {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	email
	info
	since
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func PointOfContactPkg(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	pkgMatchType *MatchFlags,
	pointOfContact PointOfContactInputSpec,
) (*PointOfContactPkgResponse, error) {
	req := &graphql.Request{
		OpName: "PointOfContactPkg",
		Query:  PointOfContactPkg_Operation,
		Variables: &__PointOfContactPkgInput{
			Pkg:            pkg,
			PkgMatchType:   pkgMatchType,
			PointOfContact: pointOfContact,
		},
	}
	var err error

	var data PointOfContactPkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by PointOfContactSrc.
const PointOfContactSrc_Operation = `
mutation PointOfContactSrc ($source: SourceInputSpec!, $pointOfContact: PointOfContactInputSpec!) {
	ingestPointOfContact(subject: {source:$source}, pointOfContact: $pointOfContact) {
		... AllPointOfContact
	}
}
fragment AllPointOfContact on PointOfContact {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	email
	info
	since
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func PointOfContactSrc(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
	pointOfContact PointOfContactInputSpec,
) (*PointOfContactSrcResponse, error) {
	req := &graphql.Request{
		OpName: "PointOfContactSrc",
		Query:  PointOfContactSrc_Operation,
		Variables: &__PointOfContactSrcInput{
			Source:         source,
			PointOfContact: pointOfContact,
		},
	}
	var err error

	var data PointOfContactSrcResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by SLSAForArtifact.
const SLSAForArtifact_Operation = `
mutation SLSAForArtifact ($artifact: ArtifactInputSpec!, $materials: [ArtifactInputSpec!]!, $builder: BuilderInputSpec!, $slsa: SLSAInputSpec!) {
	ingestSLSA(subject: $artifact, builtFrom: $materials, builtBy: $builder, slsa: $slsa) {
		... AllSLSATree
	}
}
fragment AllSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func SLSAForArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	materials []ArtifactInputSpec,
	builder BuilderInputSpec,
	slsa SLSAInputSpec,
) (*SLSAForArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "SLSAForArtifact",
		Query:  SLSAForArtifact_Operation,
		Variables: &__SLSAForArtifactInput{
			Artifact:  artifact,
			Materials: materials,
			Builder:   builder,
			Slsa:      slsa,
		},
	}
	var err error

	var data SLSAForArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by SLSAForArtifacts.
const SLSAForArtifacts_Operation = `
mutation SLSAForArtifacts ($artifacts: [ArtifactInputSpec!]!, $materialsList: [[ArtifactInputSpec!]!]!, $builders: [BuilderInputSpec!]!, $slsaList: [SLSAInputSpec!]!) {
	ingestSLSAs(subjects: $artifacts, builtFromList: $materialsList, builtByList: $builders, slsaList: $slsaList) {
		... AllSLSATree
	}
}
fragment AllSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func SLSAForArtifacts(
	ctx context.Context,
	client graphql.Client,
	artifacts []ArtifactInputSpec,
	materialsList [][]ArtifactInputSpec,
	builders []BuilderInputSpec,
	slsaList []SLSAInputSpec,
) (*SLSAForArtifactsResponse, error) {
	req := &graphql.Request{
		OpName: "SLSAForArtifacts",
		Query:  SLSAForArtifacts_Operation,
		Variables: &__SLSAForArtifactsInput{
			Artifacts:     artifacts,
			MaterialsList: materialsList,
			Builders:      builders,
			SlsaList:      slsaList,
		},
	}
	var err error

	var data SLSAForArtifactsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by Sources.
const Sources_Operation = `
query Sources ($filter: SourceSpec) {
	sources(sourceSpec: $filter) {
		... AllSourceTree
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func Sources(
	ctx context.Context,
	client graphql.Client,
	filter *SourceSpec,
) (*SourcesResponse, error) {
	req := &graphql.Request{
		OpName: "Sources",
		Query:  Sources_Operation,
		Variables: &__SourcesInput{
			Filter: filter,
		},
	}
	var err error

	var data SourcesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by VEXPackageAndGhsa.
const VEXPackageAndGhsa_Operation = `
mutation VEXPackageAndGhsa ($pkg: PkgInputSpec!, $ghsa: GHSAInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestVEXStatement(subject: {package:$pkg}, vulnerability: {ghsa:$ghsa}, vexStatement: $vexStatement) {
		... AllCertifyVEXStatement
	}
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`

func VEXPackageAndGhsa(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	ghsa GHSAInputSpec,
	vexStatement VexStatementInputSpec,
) (*VEXPackageAndGhsaResponse, error) {
	req := &graphql.Request{
		OpName: "VEXPackageAndGhsa",
		Query:  VEXPackageAndGhsa_Operation,
		Variables: &__VEXPackageAndGhsaInput{
			Pkg:          pkg,
			Ghsa:         ghsa,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VEXPackageAndGhsaResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by VexArtifactAndCve.
const VexArtifactAndCve_Operation = `
mutation VexArtifactAndCve ($artifact: ArtifactInputSpec!, $cve: CVEInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestVEXStatement(subject: {artifact:$artifact}, vulnerability: {cve:$cve}, vexStatement: $vexStatement) {
		... AllCertifyVEXStatement
	}
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`

func VexArtifactAndCve(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	cve CVEInputSpec,
	vexStatement VexStatementInputSpec,
) (*VexArtifactAndCveResponse, error) {
	req := &graphql.Request{
		OpName: "VexArtifactAndCve",
		Query:  VexArtifactAndCve_Operation,
		Variables: &__VexArtifactAndCveInput{
			Artifact:     artifact,
			Cve:          cve,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VexArtifactAndCveResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by VexArtifactAndGhsa.
const VexArtifactAndGhsa_Operation = `
mutation VexArtifactAndGhsa ($artifact: ArtifactInputSpec!, $ghsa: GHSAInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestVEXStatement(subject: {artifact:$artifact}, vulnerability: {ghsa:$ghsa}, vexStatement: $vexStatement) {
		... AllCertifyVEXStatement
	}
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`

func VexArtifactAndGhsa(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	ghsa GHSAInputSpec,
	vexStatement VexStatementInputSpec,
) (*VexArtifactAndGhsaResponse, error) {
	req := &graphql.Request{
		OpName: "VexArtifactAndGhsa",
		Query:  VexArtifactAndGhsa_Operation,
		Variables: &__VexArtifactAndGhsaInput{
			Artifact:     artifact,
			Ghsa:         ghsa,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VexArtifactAndGhsaResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by VexArtifactAndOsv.
const VexArtifactAndOsv_Operation = `
mutation VexArtifactAndOsv ($artifact: ArtifactInputSpec!, $osv: OSVInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestVEXStatement(subject: {artifact:$artifact}, vulnerability: {osv:$osv}, vexStatement: $vexStatement) {
		... AllCertifyVEXStatement
	}
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`

func VexArtifactAndOsv(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	osv OSVInputSpec,
	vexStatement VexStatementInputSpec,
) (*VexArtifactAndOsvResponse, error) {
	req := &graphql.Request{
		OpName: "VexArtifactAndOsv",
		Query:  VexArtifactAndOsv_Operation,
		Variables: &__VexArtifactAndOsvInput{
			Artifact:     artifact,
			Osv:          osv,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VexArtifactAndOsvResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by VexPackageAndCve.
const VexPackageAndCve_Operation = `
mutation VexPackageAndCve ($pkg: PkgInputSpec!, $cve: CVEInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestVEXStatement(subject: {package:$pkg}, vulnerability: {cve:$cve}, vexStatement: $vexStatement) {
		... AllCertifyVEXStatement
	}
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`

func VexPackageAndCve(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	cve CVEInputSpec,
	vexStatement VexStatementInputSpec,
) (*VexPackageAndCveResponse, error) {
	req := &graphql.Request{
		OpName: "VexPackageAndCve",
		Query:  VexPackageAndCve_Operation,
		Variables: &__VexPackageAndCveInput{
			Pkg:          pkg,
			Cve:          cve,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VexPackageAndCveResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by VexPackageAndOsv.
const VexPackageAndOsv_Operation = `
mutation VexPackageAndOsv ($pkg: PkgInputSpec!, $osv: OSVInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestVEXStatement(subject: {package:$pkg}, vulnerability: {osv:$osv}, vexStatement: $vexStatement) {
		... AllCertifyVEXStatement
	}
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`

func VexPackageAndOsv(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	osv OSVInputSpec,
	vexStatement VexStatementInputSpec,
) (*VexPackageAndOsvResponse, error) {
	req := &graphql.Request{
		OpName: "VexPackageAndOsv",
		Query:  VexPackageAndOsv_Operation,
		Variables: &__VexPackageAndOsvInput{
			Pkg:          pkg,
			Osv:          osv,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VexPackageAndOsvResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

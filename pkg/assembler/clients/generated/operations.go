// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// AllArtifactTree includes the GraphQL fields of Artifact requested by the fragment AllArtifactTree.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllArtifactTree struct {
	Id        string `json:"id"`
	Algorithm string `json:"algorithm"`
	Digest    string `json:"digest"`
}

// GetId returns AllArtifactTree.Id, and is useful for accessing the field via an interface.
func (v *AllArtifactTree) GetId() string { return v.Id }

// GetAlgorithm returns AllArtifactTree.Algorithm, and is useful for accessing the field via an interface.
func (v *AllArtifactTree) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns AllArtifactTree.Digest, and is useful for accessing the field via an interface.
func (v *AllArtifactTree) GetDigest() string { return v.Digest }

// AllBuilderTree includes the GraphQL fields of Builder requested by the fragment AllBuilderTree.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type AllBuilderTree struct {
	Id  string `json:"id"`
	Uri string `json:"uri"`
}

// GetId returns AllBuilderTree.Id, and is useful for accessing the field via an interface.
func (v *AllBuilderTree) GetId() string { return v.Id }

// GetUri returns AllBuilderTree.Uri, and is useful for accessing the field via an interface.
func (v *AllBuilderTree) GetUri() string { return v.Uri }

// AllCertifyBad includes the GraphQL fields of CertifyBad requested by the fragment AllCertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type AllCertifyBad struct {
	Id string `json:"id"`
	// The justification for the subject being certified bad
	Justification string `json:"justification"`
	// Timestamp when the certification was created (in RFC 3339 format)
	KnownSince time.Time `json:"knownSince"`
	// The package, source or artifact that is attested
	Subject AllCertifyBadSubjectPackageSourceOrArtifact `json:"-"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetId() string { return v.Id }

// GetJustification returns AllCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetJustification() string { return v.Justification }

// GetKnownSince returns AllCertifyBad.KnownSince, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetKnownSince() time.Time { return v.KnownSince }

// GetSubject returns AllCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact { return v.Subject }

// GetOrigin returns AllCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetCollector() string { return v.Collector }

func (v *AllCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBad
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyBadSubjectPackageSourceOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllCertifyBad.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBad) __premarshalJSON() (*__premarshalAllCertifyBad, error) {
	var retval __premarshalAllCertifyBad

	retval.Id = v.Id
	retval.Justification = v.Justification
	retval.KnownSince = v.KnownSince
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllCertifyBadSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllCertifyBadSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllCertifyBadSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyBadSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllCertifyBadSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllCertifyBadSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllCertifyBadSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBadSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBadSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyBadSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllCertifyBadSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBadSubjectArtifact) __premarshalJSON() (*__premarshalAllCertifyBadSubjectArtifact, error) {
	var retval __premarshalAllCertifyBadSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllCertifyBadSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyBadSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllCertifyBadSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyBadSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyBadSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyBadSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyBadSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBadSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBadSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyBadSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyBadSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBadSubjectPackage) __premarshalJSON() (*__premarshalAllCertifyBadSubjectPackage, error) {
	var retval __premarshalAllCertifyBadSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyBadSubjectPackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// AllCertifyBadSubjectPackageSourceOrArtifact is implemented by the following types:
// AllCertifyBadSubjectArtifact
// AllCertifyBadSubjectPackage
// AllCertifyBadSubjectSource
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type AllCertifyBadSubjectPackageSourceOrArtifact interface {
	implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyBadSubjectArtifact) implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact() {
}
func (v *AllCertifyBadSubjectPackage) implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact() {
}
func (v *AllCertifyBadSubjectSource) implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact() {
}

func __unmarshalAllCertifyBadSubjectPackageSourceOrArtifact(b []byte, v *AllCertifyBadSubjectPackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllCertifyBadSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllCertifyBadSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllCertifyBadSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyBadSubjectPackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyBadSubjectPackageSourceOrArtifact(v *AllCertifyBadSubjectPackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyBadSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyBadSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyBadSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyBadSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyBadSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyBadSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyBadSubjectPackageSourceOrArtifact: "%T"`, v)
	}
}

// AllCertifyBadSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllCertifyBadSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllCertifyBadSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyBadSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllCertifyBadSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllCertifyBadSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllCertifyBadSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBadSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBadSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyBadSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllCertifyBadSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBadSubjectSource) __premarshalJSON() (*__premarshalAllCertifyBadSubjectSource, error) {
	var retval __premarshalAllCertifyBadSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllCertifyGood includes the GraphQL fields of CertifyGood requested by the fragment AllCertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type AllCertifyGood struct {
	Id string `json:"id"`
	// The justification for the subject being certified good
	Justification string `json:"justification"`
	// Timestamp when the certification was created (in RFC 3339 format)
	KnownSince time.Time `json:"knownSince"`
	// The package, source or artifact that is attested
	Subject AllCertifyGoodSubjectPackageSourceOrArtifact `json:"-"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetId() string { return v.Id }

// GetJustification returns AllCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetJustification() string { return v.Justification }

// GetKnownSince returns AllCertifyGood.KnownSince, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetKnownSince() time.Time { return v.KnownSince }

// GetSubject returns AllCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact { return v.Subject }

// GetOrigin returns AllCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyGood) GetCollector() string { return v.Collector }

func (v *AllCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyGood
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyGoodSubjectPackageSourceOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllCertifyGood.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyGood) __premarshalJSON() (*__premarshalAllCertifyGood, error) {
	var retval __premarshalAllCertifyGood

	retval.Id = v.Id
	retval.Justification = v.Justification
	retval.KnownSince = v.KnownSince
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllCertifyGoodSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllCertifyGoodSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllCertifyGoodSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyGoodSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllCertifyGoodSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllCertifyGoodSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllCertifyGoodSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyGoodSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyGoodSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyGoodSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllCertifyGoodSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyGoodSubjectArtifact) __premarshalJSON() (*__premarshalAllCertifyGoodSubjectArtifact, error) {
	var retval __premarshalAllCertifyGoodSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllCertifyGoodSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyGoodSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllCertifyGoodSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyGoodSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyGoodSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyGoodSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyGoodSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyGoodSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyGoodSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyGoodSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyGoodSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyGoodSubjectPackage) __premarshalJSON() (*__premarshalAllCertifyGoodSubjectPackage, error) {
	var retval __premarshalAllCertifyGoodSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyGoodSubjectPackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// AllCertifyGoodSubjectPackageSourceOrArtifact is implemented by the following types:
// AllCertifyGoodSubjectArtifact
// AllCertifyGoodSubjectPackage
// AllCertifyGoodSubjectSource
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type AllCertifyGoodSubjectPackageSourceOrArtifact interface {
	implementsGraphQLInterfaceAllCertifyGoodSubjectPackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyGoodSubjectArtifact) implementsGraphQLInterfaceAllCertifyGoodSubjectPackageSourceOrArtifact() {
}
func (v *AllCertifyGoodSubjectPackage) implementsGraphQLInterfaceAllCertifyGoodSubjectPackageSourceOrArtifact() {
}
func (v *AllCertifyGoodSubjectSource) implementsGraphQLInterfaceAllCertifyGoodSubjectPackageSourceOrArtifact() {
}

func __unmarshalAllCertifyGoodSubjectPackageSourceOrArtifact(b []byte, v *AllCertifyGoodSubjectPackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllCertifyGoodSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllCertifyGoodSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllCertifyGoodSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyGoodSubjectPackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(v *AllCertifyGoodSubjectPackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyGoodSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyGoodSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyGoodSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyGoodSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyGoodSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyGoodSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyGoodSubjectPackageSourceOrArtifact: "%T"`, v)
	}
}

// AllCertifyGoodSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllCertifyGoodSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllCertifyGoodSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyGoodSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllCertifyGoodSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllCertifyGoodSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyGoodSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllCertifyGoodSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyGoodSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyGoodSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyGoodSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllCertifyGoodSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyGoodSubjectSource) __premarshalJSON() (*__premarshalAllCertifyGoodSubjectSource, error) {
	var retval __premarshalAllCertifyGoodSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllCertifyLegalTree includes the GraphQL fields of CertifyLegal requested by the fragment AllCertifyLegalTree.
// The GraphQL type's documentation follows.
//
// CertifyLegal is an attestation to attach legal information to a package or source.
//
// The certification information is either copied from an attestation found in an
// SBOM or created by a collector/scanner.
//
// Discovered license is also known as Concluded. More information:
// https://docs.clearlydefined.io/curation-guidelines#the-difference-between-declared-and-discovered-licenses
//
// Attribution is also known as Copyright Text. It is what could be displayed to
// comply with notice
// requirements. https://www.nexb.com/oss-attribution-best-practices/
//
// License expressions follow this format:
// https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/
type AllCertifyLegalTree struct {
	Id string `json:"id"`
	// The package version or source that is attested
	Subject AllCertifyLegalTreeSubjectPackageOrSource `json:"-"`
	// The license expression as declared
	DeclaredLicense string `json:"declaredLicense"`
	// A list of license objects found in the declared license expression
	DeclaredLicenses []AllCertifyLegalTreeDeclaredLicensesLicense `json:"declaredLicenses"`
	// The license expression as discovered by scan
	DiscoveredLicense string `json:"discoveredLicense"`
	// A list of license objects found in the discovered license expression
	DiscoveredLicenses []AllCertifyLegalTreeDiscoveredLicensesLicense `json:"discoveredLicenses"`
	// Attribution text of the subject
	Attribution string `json:"attribution"`
	// Extra justification for the certification
	Justification string `json:"justification"`
	// Time of scan (in RFC 3339 format)
	TimeScanned time.Time `json:"timeScanned"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllCertifyLegalTree.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetId() string { return v.Id }

// GetSubject returns AllCertifyLegalTree.Subject, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetSubject() AllCertifyLegalTreeSubjectPackageOrSource {
	return v.Subject
}

// GetDeclaredLicense returns AllCertifyLegalTree.DeclaredLicense, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetDeclaredLicense() string { return v.DeclaredLicense }

// GetDeclaredLicenses returns AllCertifyLegalTree.DeclaredLicenses, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetDeclaredLicenses() []AllCertifyLegalTreeDeclaredLicensesLicense {
	return v.DeclaredLicenses
}

// GetDiscoveredLicense returns AllCertifyLegalTree.DiscoveredLicense, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetDiscoveredLicense() string { return v.DiscoveredLicense }

// GetDiscoveredLicenses returns AllCertifyLegalTree.DiscoveredLicenses, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetDiscoveredLicenses() []AllCertifyLegalTreeDiscoveredLicensesLicense {
	return v.DiscoveredLicenses
}

// GetAttribution returns AllCertifyLegalTree.Attribution, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetAttribution() string { return v.Attribution }

// GetJustification returns AllCertifyLegalTree.Justification, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetJustification() string { return v.Justification }

// GetTimeScanned returns AllCertifyLegalTree.TimeScanned, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetTimeScanned() time.Time { return v.TimeScanned }

// GetOrigin returns AllCertifyLegalTree.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyLegalTree.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTree) GetCollector() string { return v.Collector }

func (v *AllCertifyLegalTree) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyLegalTree
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyLegalTree = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyLegalTreeSubjectPackageOrSource(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllCertifyLegalTree.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllCertifyLegalTree struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	DeclaredLicense string `json:"declaredLicense"`

	DeclaredLicenses []AllCertifyLegalTreeDeclaredLicensesLicense `json:"declaredLicenses"`

	DiscoveredLicense string `json:"discoveredLicense"`

	DiscoveredLicenses []AllCertifyLegalTreeDiscoveredLicensesLicense `json:"discoveredLicenses"`

	Attribution string `json:"attribution"`

	Justification string `json:"justification"`

	TimeScanned time.Time `json:"timeScanned"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllCertifyLegalTree) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyLegalTree) __premarshalJSON() (*__premarshalAllCertifyLegalTree, error) {
	var retval __premarshalAllCertifyLegalTree

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllCertifyLegalTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllCertifyLegalTree.Subject: %w", err)
		}
	}
	retval.DeclaredLicense = v.DeclaredLicense
	retval.DeclaredLicenses = v.DeclaredLicenses
	retval.DiscoveredLicense = v.DiscoveredLicense
	retval.DiscoveredLicenses = v.DiscoveredLicenses
	retval.Attribution = v.Attribution
	retval.Justification = v.Justification
	retval.TimeScanned = v.TimeScanned
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllCertifyLegalTreeDeclaredLicensesLicense includes the requested fields of the GraphQL type License.
// The GraphQL type's documentation follows.
//
// License represents a particular license. If the license is found on the SPDX
// license list (https://spdx.org/licenses/) then the fields should be:
//
// Name: SPDX license identifier
// Inline: empty
// ListVersion: SPDX license list version
//
// example:
//
// Name: AGPL-3.0-or-later
// Inline: ""
// ListVersion: 3.21 2023-06-18
//
// If the license is not on the SPDX license list, then a new guid should be
// created and the license text placed inline:
//
// Name: LicenseRef-<guid>
// Inline: Full license text
// ListVersion: empty
//
// example:
//
// Name: LicenseRef-1a2b3c
// Inline: Permission to use, copy, modify, and/or distribute ...
// ListVersion: ""
type AllCertifyLegalTreeDeclaredLicensesLicense struct {
	AllLicenseTree `json:"-"`
}

// GetId returns AllCertifyLegalTreeDeclaredLicensesLicense.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeDeclaredLicensesLicense) GetId() string { return v.AllLicenseTree.Id }

// GetName returns AllCertifyLegalTreeDeclaredLicensesLicense.Name, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeDeclaredLicensesLicense) GetName() string { return v.AllLicenseTree.Name }

// GetInline returns AllCertifyLegalTreeDeclaredLicensesLicense.Inline, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeDeclaredLicensesLicense) GetInline() *string {
	return v.AllLicenseTree.Inline
}

// GetListVersion returns AllCertifyLegalTreeDeclaredLicensesLicense.ListVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeDeclaredLicensesLicense) GetListVersion() *string {
	return v.AllLicenseTree.ListVersion
}

func (v *AllCertifyLegalTreeDeclaredLicensesLicense) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyLegalTreeDeclaredLicensesLicense
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyLegalTreeDeclaredLicensesLicense = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllLicenseTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyLegalTreeDeclaredLicensesLicense struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Inline *string `json:"inline"`

	ListVersion *string `json:"listVersion"`
}

func (v *AllCertifyLegalTreeDeclaredLicensesLicense) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyLegalTreeDeclaredLicensesLicense) __premarshalJSON() (*__premarshalAllCertifyLegalTreeDeclaredLicensesLicense, error) {
	var retval __premarshalAllCertifyLegalTreeDeclaredLicensesLicense

	retval.Id = v.AllLicenseTree.Id
	retval.Name = v.AllLicenseTree.Name
	retval.Inline = v.AllLicenseTree.Inline
	retval.ListVersion = v.AllLicenseTree.ListVersion
	return &retval, nil
}

// AllCertifyLegalTreeDiscoveredLicensesLicense includes the requested fields of the GraphQL type License.
// The GraphQL type's documentation follows.
//
// License represents a particular license. If the license is found on the SPDX
// license list (https://spdx.org/licenses/) then the fields should be:
//
// Name: SPDX license identifier
// Inline: empty
// ListVersion: SPDX license list version
//
// example:
//
// Name: AGPL-3.0-or-later
// Inline: ""
// ListVersion: 3.21 2023-06-18
//
// If the license is not on the SPDX license list, then a new guid should be
// created and the license text placed inline:
//
// Name: LicenseRef-<guid>
// Inline: Full license text
// ListVersion: empty
//
// example:
//
// Name: LicenseRef-1a2b3c
// Inline: Permission to use, copy, modify, and/or distribute ...
// ListVersion: ""
type AllCertifyLegalTreeDiscoveredLicensesLicense struct {
	AllLicenseTree `json:"-"`
}

// GetId returns AllCertifyLegalTreeDiscoveredLicensesLicense.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeDiscoveredLicensesLicense) GetId() string { return v.AllLicenseTree.Id }

// GetName returns AllCertifyLegalTreeDiscoveredLicensesLicense.Name, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeDiscoveredLicensesLicense) GetName() string { return v.AllLicenseTree.Name }

// GetInline returns AllCertifyLegalTreeDiscoveredLicensesLicense.Inline, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeDiscoveredLicensesLicense) GetInline() *string {
	return v.AllLicenseTree.Inline
}

// GetListVersion returns AllCertifyLegalTreeDiscoveredLicensesLicense.ListVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeDiscoveredLicensesLicense) GetListVersion() *string {
	return v.AllLicenseTree.ListVersion
}

func (v *AllCertifyLegalTreeDiscoveredLicensesLicense) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyLegalTreeDiscoveredLicensesLicense
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyLegalTreeDiscoveredLicensesLicense = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllLicenseTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyLegalTreeDiscoveredLicensesLicense struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Inline *string `json:"inline"`

	ListVersion *string `json:"listVersion"`
}

func (v *AllCertifyLegalTreeDiscoveredLicensesLicense) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyLegalTreeDiscoveredLicensesLicense) __premarshalJSON() (*__premarshalAllCertifyLegalTreeDiscoveredLicensesLicense, error) {
	var retval __premarshalAllCertifyLegalTreeDiscoveredLicensesLicense

	retval.Id = v.AllLicenseTree.Id
	retval.Name = v.AllLicenseTree.Name
	retval.Inline = v.AllLicenseTree.Inline
	retval.ListVersion = v.AllLicenseTree.ListVersion
	return &retval, nil
}

// AllCertifyLegalTreeSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyLegalTreeSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllCertifyLegalTreeSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyLegalTreeSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyLegalTreeSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyLegalTreeSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyLegalTreeSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyLegalTreeSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyLegalTreeSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyLegalTreeSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyLegalTreeSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyLegalTreeSubjectPackage) __premarshalJSON() (*__premarshalAllCertifyLegalTreeSubjectPackage, error) {
	var retval __premarshalAllCertifyLegalTreeSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyLegalTreeSubjectPackageOrSource includes the requested fields of the GraphQL interface PackageOrSource.
//
// AllCertifyLegalTreeSubjectPackageOrSource is implemented by the following types:
// AllCertifyLegalTreeSubjectPackage
// AllCertifyLegalTreeSubjectSource
// The GraphQL type's documentation follows.
//
// PackageOrSource is a union of Package and Source.
type AllCertifyLegalTreeSubjectPackageOrSource interface {
	implementsGraphQLInterfaceAllCertifyLegalTreeSubjectPackageOrSource()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyLegalTreeSubjectPackage) implementsGraphQLInterfaceAllCertifyLegalTreeSubjectPackageOrSource() {
}
func (v *AllCertifyLegalTreeSubjectSource) implementsGraphQLInterfaceAllCertifyLegalTreeSubjectPackageOrSource() {
}

func __unmarshalAllCertifyLegalTreeSubjectPackageOrSource(b []byte, v *AllCertifyLegalTreeSubjectPackageOrSource) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(AllCertifyLegalTreeSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllCertifyLegalTreeSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrSource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyLegalTreeSubjectPackageOrSource: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyLegalTreeSubjectPackageOrSource(v *AllCertifyLegalTreeSubjectPackageOrSource) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyLegalTreeSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyLegalTreeSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyLegalTreeSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyLegalTreeSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyLegalTreeSubjectPackageOrSource: "%T"`, v)
	}
}

// AllCertifyLegalTreeSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllCertifyLegalTreeSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllCertifyLegalTreeSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyLegalTreeSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllCertifyLegalTreeSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllCertifyLegalTreeSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyLegalTreeSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllCertifyLegalTreeSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyLegalTreeSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyLegalTreeSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyLegalTreeSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllCertifyLegalTreeSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyLegalTreeSubjectSource) __premarshalJSON() (*__premarshalAllCertifyLegalTreeSubjectSource, error) {
	var retval __premarshalAllCertifyLegalTreeSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllCertifyScorecard includes the GraphQL fields of CertifyScorecard requested by the fragment AllCertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type AllCertifyScorecard struct {
	Id string `json:"id"`
	// The source repository that is being scanned (attestation subject)
	Source AllCertifyScorecardSource `json:"source"`
	// The Scorecard attached to the repository (attestation object)
	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

// GetId returns AllCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecard) GetId() string { return v.Id }

// GetSource returns AllCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecard) GetSource() AllCertifyScorecardSource { return v.Source }

// GetScorecard returns AllCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard { return v.Scorecard }

// AllCertifyScorecardScorecard includes the requested fields of the GraphQL type Scorecard.
// The GraphQL type's documentation follows.
//
// Scorecard contains all of the fields present in a Scorecard attestation.
//
// We also include fields to specify under what conditions the check was performed
// (time of scan, version of scanners, etc.) as well as how this information got
// included into GUAC (origin document and the collector for that document).
type AllCertifyScorecardScorecard struct {
	// Exact timestamp when the source was last scanned (in RFC 3339 format)
	TimeScanned time.Time `json:"timeScanned"`
	// Overall Scorecard score for the source
	AggregateScore float64 `json:"aggregateScore"`
	// Individual Scorecard check scores (Branch-Protection, Code-Review, ...)
	Checks []AllCertifyScorecardScorecardChecksScorecardCheck `json:"checks"`
	// Version of the Scorecard scanner used to analyze the source
	ScorecardVersion string `json:"scorecardVersion"`
	// Commit of the Scorecards repository at the time of scanning the source
	ScorecardCommit string `json:"scorecardCommit"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetTimeScanned returns AllCertifyScorecardScorecard.TimeScanned, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetTimeScanned() time.Time { return v.TimeScanned }

// GetAggregateScore returns AllCertifyScorecardScorecard.AggregateScore, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetAggregateScore() float64 { return v.AggregateScore }

// GetChecks returns AllCertifyScorecardScorecard.Checks, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetChecks() []AllCertifyScorecardScorecardChecksScorecardCheck {
	return v.Checks
}

// GetScorecardVersion returns AllCertifyScorecardScorecard.ScorecardVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetScorecardVersion() string { return v.ScorecardVersion }

// GetScorecardCommit returns AllCertifyScorecardScorecard.ScorecardCommit, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetScorecardCommit() string { return v.ScorecardCommit }

// GetOrigin returns AllCertifyScorecardScorecard.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyScorecardScorecard.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetCollector() string { return v.Collector }

// AllCertifyScorecardScorecardChecksScorecardCheck includes the requested fields of the GraphQL type ScorecardCheck.
// The GraphQL type's documentation follows.
//
// ScorecardCheck are the individual checks from scorecard and their values as a
// key-value pair.
//
// For example:  Branch-Protection, Code-Review...etc
//
// Based off scorecard's:
// type jsonCheckResultV2 struct {
// Details []string                 `json:"details"`
// Score   int                      `json:"score"`
// Reason  string                   `json:"reason"`
// Name    string                   `json:"name"`
// Doc     jsonCheckDocumentationV2 `json:"documentation"`
// }
// This node cannot be directly referred by other parts of GUAC.
type AllCertifyScorecardScorecardChecksScorecardCheck struct {
	Check string `json:"check"`
	Score int    `json:"score"`
}

// GetCheck returns AllCertifyScorecardScorecardChecksScorecardCheck.Check, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecardChecksScorecardCheck) GetCheck() string { return v.Check }

// GetScore returns AllCertifyScorecardScorecardChecksScorecardCheck.Score, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecardChecksScorecardCheck) GetScore() int { return v.Score }

// AllCertifyScorecardSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllCertifyScorecardSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns AllCertifyScorecardSource.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllCertifyScorecardSource.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllCertifyScorecardSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllCertifyScorecardSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyScorecardSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyScorecardSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyScorecardSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllCertifyScorecardSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyScorecardSource) __premarshalJSON() (*__premarshalAllCertifyScorecardSource, error) {
	var retval __premarshalAllCertifyScorecardSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllCertifyVEXStatement includes the GraphQL fields of CertifyVEXStatement requested by the fragment AllCertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability.
type AllCertifyVEXStatement struct {
	Id string `json:"id"`
	// Subject of attestation
	Subject AllCertifyVEXStatementSubjectPackageOrArtifact `json:"-"`
	// Attested vulnerability
	Vulnerability AllCertifyVEXStatementVulnerability `json:"vulnerability"`
	// Status of the vulnerabilities with respect to the subject
	Status VexStatus `json:"status"`
	// Justification from VEX statement
	VexJustification VexJustification `json:"vexJustification"`
	// VEX statement: impact_statement or action_statement depending on status
	Statement string `json:"statement"`
	// statusNotes may convey information about how status was determined
	StatusNotes string `json:"statusNotes"`
	// Timestamp (exact time in RFC 3339 format) for the VEX statement
	KnownSince time.Time `json:"knownSince"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetId() string { return v.Id }

// GetSubject returns AllCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.Subject
}

// GetVulnerability returns AllCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.Vulnerability
}

// GetStatus returns AllCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetStatus() VexStatus { return v.Status }

// GetVexJustification returns AllCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetVexJustification() VexJustification { return v.VexJustification }

// GetStatement returns AllCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetStatement() string { return v.Statement }

// GetStatusNotes returns AllCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetStatusNotes() string { return v.StatusNotes }

// GetKnownSince returns AllCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetKnownSince() time.Time { return v.KnownSince }

// GetOrigin returns AllCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatement) GetCollector() string { return v.Collector }

func (v *AllCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVEXStatement
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyVEXStatementSubjectPackageOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllCertifyVEXStatement.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability AllCertifyVEXStatementVulnerability `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVEXStatement) __premarshalJSON() (*__premarshalAllCertifyVEXStatement, error) {
	var retval __premarshalAllCertifyVEXStatement

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	retval.Vulnerability = v.Vulnerability
	retval.Status = v.Status
	retval.VexJustification = v.VexJustification
	retval.Statement = v.Statement
	retval.StatusNotes = v.StatusNotes
	retval.KnownSince = v.KnownSince
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllCertifyVEXStatementSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllCertifyVEXStatementSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllCertifyVEXStatementSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVEXStatementSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllCertifyVEXStatementSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns AllCertifyVEXStatementSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllCertifyVEXStatementSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVEXStatementSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVEXStatementSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVEXStatementSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllCertifyVEXStatementSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVEXStatementSubjectArtifact) __premarshalJSON() (*__premarshalAllCertifyVEXStatementSubjectArtifact, error) {
	var retval __premarshalAllCertifyVEXStatementSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllCertifyVEXStatementSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyVEXStatementSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllCertifyVEXStatementSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVEXStatementSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyVEXStatementSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyVEXStatementSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyVEXStatementSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVEXStatementSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVEXStatementSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVEXStatementSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyVEXStatementSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVEXStatementSubjectPackage) __premarshalJSON() (*__premarshalAllCertifyVEXStatementSubjectPackage, error) {
	var retval __premarshalAllCertifyVEXStatementSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyVEXStatementSubjectPackageOrArtifact includes the requested fields of the GraphQL interface PackageOrArtifact.
//
// AllCertifyVEXStatementSubjectPackageOrArtifact is implemented by the following types:
// AllCertifyVEXStatementSubjectArtifact
// AllCertifyVEXStatementSubjectPackage
// The GraphQL type's documentation follows.
//
// PackageOrArtifact is a union of Package and Artifact.
type AllCertifyVEXStatementSubjectPackageOrArtifact interface {
	implementsGraphQLInterfaceAllCertifyVEXStatementSubjectPackageOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyVEXStatementSubjectArtifact) implementsGraphQLInterfaceAllCertifyVEXStatementSubjectPackageOrArtifact() {
}
func (v *AllCertifyVEXStatementSubjectPackage) implementsGraphQLInterfaceAllCertifyVEXStatementSubjectPackageOrArtifact() {
}

func __unmarshalAllCertifyVEXStatementSubjectPackageOrArtifact(b []byte, v *AllCertifyVEXStatementSubjectPackageOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllCertifyVEXStatementSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllCertifyVEXStatementSubjectPackage)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyVEXStatementSubjectPackageOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(v *AllCertifyVEXStatementSubjectPackageOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyVEXStatementSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVEXStatementSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyVEXStatementSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVEXStatementSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyVEXStatementSubjectPackageOrArtifact: "%T"`, v)
	}
}

// AllCertifyVEXStatementVulnerability includes the requested fields of the GraphQL type Vulnerability.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type AllCertifyVEXStatementVulnerability struct {
	AllVulnerabilityTree `json:"-"`
}

// GetId returns AllCertifyVEXStatementVulnerability.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerability) GetId() string { return v.AllVulnerabilityTree.Id }

// GetType returns AllCertifyVEXStatementVulnerability.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerability) GetType() string { return v.AllVulnerabilityTree.Type }

// GetVulnerabilityIDs returns AllCertifyVEXStatementVulnerability.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *AllCertifyVEXStatementVulnerability) GetVulnerabilityIDs() []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID {
	return v.AllVulnerabilityTree.VulnerabilityIDs
}

func (v *AllCertifyVEXStatementVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVEXStatementVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVEXStatementVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnerabilityTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVEXStatementVulnerability struct {
	Id string `json:"id"`

	Type string `json:"type"`

	VulnerabilityIDs []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

func (v *AllCertifyVEXStatementVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVEXStatementVulnerability) __premarshalJSON() (*__premarshalAllCertifyVEXStatementVulnerability, error) {
	var retval __premarshalAllCertifyVEXStatementVulnerability

	retval.Id = v.AllVulnerabilityTree.Id
	retval.Type = v.AllVulnerabilityTree.Type
	retval.VulnerabilityIDs = v.AllVulnerabilityTree.VulnerabilityIDs
	return &retval, nil
}

// AllCertifyVuln includes the GraphQL fields of CertifyVuln requested by the fragment AllCertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected, we attach the a vulnerability with "NoVuln" type and an empty string
// for the vulnerability ID.
type AllCertifyVuln struct {
	Id string `json:"id"`
	// The package that is attested
	Package AllCertifyVulnPackage `json:"package"`
	// The vulnerability can be an be a specific vulnerability or NoVuln type.
	Vulnerability AllCertifyVulnVulnerability `json:"vulnerability"`
	// Metadata attached to the certification
	Metadata AllCertifyVulnMetadataScanMetadata `json:"metadata"`
}

// GetId returns AllCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetId() string { return v.Id }

// GetPackage returns AllCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.Package }

// GetVulnerability returns AllCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability { return v.Vulnerability }

// GetMetadata returns AllCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetMetadata() AllCertifyVulnMetadataScanMetadata { return v.Metadata }

// AllCertifyVulnMetadataScanMetadata includes the requested fields of the GraphQL type ScanMetadata.
// The GraphQL type's documentation follows.
//
// ScanMetadata is the metadata attached to vulnerability certification.
//
// It contains metadata about the scanner process that created the certification.
type AllCertifyVulnMetadataScanMetadata struct {
	// URI of the vulnerability database used by the scanner
	DbUri string `json:"dbUri"`
	// Version of the vulnerability database used by the scanner
	DbVersion string `json:"dbVersion"`
	// URI of the scanner
	ScannerUri string `json:"scannerUri"`
	// Version of the scanner
	ScannerVersion string `json:"scannerVersion"`
	// Time of scan (in RFC 3339 format)
	TimeScanned time.Time `json:"timeScanned"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetDbUri returns AllCertifyVulnMetadataScanMetadata.DbUri, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataScanMetadata) GetDbUri() string { return v.DbUri }

// GetDbVersion returns AllCertifyVulnMetadataScanMetadata.DbVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataScanMetadata) GetDbVersion() string { return v.DbVersion }

// GetScannerUri returns AllCertifyVulnMetadataScanMetadata.ScannerUri, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataScanMetadata) GetScannerUri() string { return v.ScannerUri }

// GetScannerVersion returns AllCertifyVulnMetadataScanMetadata.ScannerVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataScanMetadata) GetScannerVersion() string { return v.ScannerVersion }

// GetTimeScanned returns AllCertifyVulnMetadataScanMetadata.TimeScanned, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataScanMetadata) GetTimeScanned() time.Time { return v.TimeScanned }

// GetOrigin returns AllCertifyVulnMetadataScanMetadata.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataScanMetadata) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyVulnMetadataScanMetadata.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataScanMetadata) GetCollector() string { return v.Collector }

// AllCertifyVulnPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyVulnPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllCertifyVulnPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyVulnPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyVulnPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyVulnPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVulnPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVulnPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVulnPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyVulnPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVulnPackage) __premarshalJSON() (*__premarshalAllCertifyVulnPackage, error) {
	var retval __premarshalAllCertifyVulnPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyVulnVulnerability includes the requested fields of the GraphQL type Vulnerability.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type AllCertifyVulnVulnerability struct {
	AllVulnerabilityTree `json:"-"`
}

// GetId returns AllCertifyVulnVulnerability.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerability) GetId() string { return v.AllVulnerabilityTree.Id }

// GetType returns AllCertifyVulnVulnerability.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerability) GetType() string { return v.AllVulnerabilityTree.Type }

// GetVulnerabilityIDs returns AllCertifyVulnVulnerability.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerability) GetVulnerabilityIDs() []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID {
	return v.AllVulnerabilityTree.VulnerabilityIDs
}

func (v *AllCertifyVulnVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVulnVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVulnVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnerabilityTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVulnVulnerability struct {
	Id string `json:"id"`

	Type string `json:"type"`

	VulnerabilityIDs []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

func (v *AllCertifyVulnVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVulnVulnerability) __premarshalJSON() (*__premarshalAllCertifyVulnVulnerability, error) {
	var retval __premarshalAllCertifyVulnVulnerability

	retval.Id = v.AllVulnerabilityTree.Id
	retval.Type = v.AllVulnerabilityTree.Type
	retval.VulnerabilityIDs = v.AllVulnerabilityTree.VulnerabilityIDs
	return &retval, nil
}

// AllHasMetadata includes the GraphQL fields of HasMetadata requested by the fragment AllHasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type AllHasMetadata struct {
	Id string `json:"id"`
	// The package, source or artifact that is attested
	Subject AllHasMetadataSubjectPackageSourceOrArtifact `json:"-"`
	// Key in the key value pair
	Key string `json:"key"`
	// Value in the key value pair
	Value string `json:"value"`
	// Timestamp when the certification was created (in RFC 3339 format)
	Timestamp time.Time `json:"timestamp"`
	// The justification for the metadata
	Justification string `json:"justification"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetId() string { return v.Id }

// GetSubject returns AllHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact { return v.Subject }

// GetKey returns AllHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetKey() string { return v.Key }

// GetValue returns AllHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetValue() string { return v.Value }

// GetTimestamp returns AllHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetTimestamp() time.Time { return v.Timestamp }

// GetJustification returns AllHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetJustification() string { return v.Justification }

// GetOrigin returns AllHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetOrigin() string { return v.Origin }

// GetCollector returns AllHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *AllHasMetadata) GetCollector() string { return v.Collector }

func (v *AllHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasMetadata
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllHasMetadataSubjectPackageSourceOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllHasMetadata.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllHasMetadata struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasMetadata) __premarshalJSON() (*__premarshalAllHasMetadata, error) {
	var retval __premarshalAllHasMetadata

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.Key
	retval.Value = v.Value
	retval.Timestamp = v.Timestamp
	retval.Justification = v.Justification
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllHasMetadataSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllHasMetadataSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllHasMetadataSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllHasMetadataSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllHasMetadataSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllHasMetadataSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllHasMetadataSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasMetadataSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasMetadataSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasMetadataSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllHasMetadataSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasMetadataSubjectArtifact) __premarshalJSON() (*__premarshalAllHasMetadataSubjectArtifact, error) {
	var retval __premarshalAllHasMetadataSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllHasMetadataSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllHasMetadataSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllHasMetadataSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllHasMetadataSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllHasMetadataSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllHasMetadataSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllHasMetadataSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasMetadataSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasMetadataSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasMetadataSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllHasMetadataSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasMetadataSubjectPackage) __premarshalJSON() (*__premarshalAllHasMetadataSubjectPackage, error) {
	var retval __premarshalAllHasMetadataSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllHasMetadataSubjectPackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// AllHasMetadataSubjectPackageSourceOrArtifact is implemented by the following types:
// AllHasMetadataSubjectArtifact
// AllHasMetadataSubjectPackage
// AllHasMetadataSubjectSource
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type AllHasMetadataSubjectPackageSourceOrArtifact interface {
	implementsGraphQLInterfaceAllHasMetadataSubjectPackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllHasMetadataSubjectArtifact) implementsGraphQLInterfaceAllHasMetadataSubjectPackageSourceOrArtifact() {
}
func (v *AllHasMetadataSubjectPackage) implementsGraphQLInterfaceAllHasMetadataSubjectPackageSourceOrArtifact() {
}
func (v *AllHasMetadataSubjectSource) implementsGraphQLInterfaceAllHasMetadataSubjectPackageSourceOrArtifact() {
}

func __unmarshalAllHasMetadataSubjectPackageSourceOrArtifact(b []byte, v *AllHasMetadataSubjectPackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllHasMetadataSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllHasMetadataSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllHasMetadataSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllHasMetadataSubjectPackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllHasMetadataSubjectPackageSourceOrArtifact(v *AllHasMetadataSubjectPackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllHasMetadataSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasMetadataSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllHasMetadataSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasMetadataSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllHasMetadataSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasMetadataSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllHasMetadataSubjectPackageSourceOrArtifact: "%T"`, v)
	}
}

// AllHasMetadataSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllHasMetadataSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllHasMetadataSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllHasMetadataSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllHasMetadataSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllHasMetadataSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasMetadataSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllHasMetadataSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasMetadataSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasMetadataSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasMetadataSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllHasMetadataSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasMetadataSubjectSource) __premarshalJSON() (*__premarshalAllHasMetadataSubjectSource, error) {
	var retval __premarshalAllHasMetadataSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllHasSBOMTree includes the GraphQL fields of HasSBOM requested by the fragment AllHasSBOMTree.
type AllHasSBOMTree struct {
	Id string `json:"id"`
	// SBOM subject
	Subject AllHasSBOMTreeSubjectPackageOrArtifact `json:"-"`
	// Identifier for the SBOM document
	Uri string `json:"uri"`
	// Algorithm by which SBOMs digest was computed
	Algorithm string `json:"algorithm"`
	// Digest of SBOM
	Digest string `json:"digest"`
	// Location from which the SBOM can be downloaded
	DownloadLocation string `json:"downloadLocation"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
	// Timestamp for SBOM creation
	KnownSince time.Time `json:"knownSince"`
	// Included packages and artifacts
	IncludedSoftware []AllHasSBOMTreeIncludedSoftwarePackageOrArtifact `json:"-"`
	// Included dependencies
	IncludedDependencies []AllHasSBOMTreeIncludedDependenciesIsDependency `json:"includedDependencies"`
	// Included occurrences
	IncludedOccurrences []AllHasSBOMTreeIncludedOccurrencesIsOccurrence `json:"includedOccurrences"`
}

// GetId returns AllHasSBOMTree.Id, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetId() string { return v.Id }

// GetSubject returns AllHasSBOMTree.Subject, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact { return v.Subject }

// GetUri returns AllHasSBOMTree.Uri, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetUri() string { return v.Uri }

// GetAlgorithm returns AllHasSBOMTree.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns AllHasSBOMTree.Digest, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetDigest() string { return v.Digest }

// GetDownloadLocation returns AllHasSBOMTree.DownloadLocation, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetDownloadLocation() string { return v.DownloadLocation }

// GetOrigin returns AllHasSBOMTree.Origin, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllHasSBOMTree.Collector, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetCollector() string { return v.Collector }

// GetKnownSince returns AllHasSBOMTree.KnownSince, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetKnownSince() time.Time { return v.KnownSince }

// GetIncludedSoftware returns AllHasSBOMTree.IncludedSoftware, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetIncludedSoftware() []AllHasSBOMTreeIncludedSoftwarePackageOrArtifact {
	return v.IncludedSoftware
}

// GetIncludedDependencies returns AllHasSBOMTree.IncludedDependencies, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetIncludedDependencies() []AllHasSBOMTreeIncludedDependenciesIsDependency {
	return v.IncludedDependencies
}

// GetIncludedOccurrences returns AllHasSBOMTree.IncludedOccurrences, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTree) GetIncludedOccurrences() []AllHasSBOMTreeIncludedOccurrencesIsOccurrence {
	return v.IncludedOccurrences
}

func (v *AllHasSBOMTree) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSBOMTree
		Subject          json.RawMessage   `json:"subject"`
		IncludedSoftware []json.RawMessage `json:"includedSoftware"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSBOMTree = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllHasSBOMTreeSubjectPackageOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllHasSBOMTree.Subject: %w", err)
			}
		}
	}

	{
		dst := &v.IncludedSoftware
		src := firstPass.IncludedSoftware
		*dst = make(
			[]AllHasSBOMTreeIncludedSoftwarePackageOrArtifact,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalAllHasSBOMTreeIncludedSoftwarePackageOrArtifact(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal AllHasSBOMTree.IncludedSoftware: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalAllHasSBOMTree struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`

	KnownSince time.Time `json:"knownSince"`

	IncludedSoftware []json.RawMessage `json:"includedSoftware"`

	IncludedDependencies []AllHasSBOMTreeIncludedDependenciesIsDependency `json:"includedDependencies"`

	IncludedOccurrences []AllHasSBOMTreeIncludedOccurrencesIsOccurrence `json:"includedOccurrences"`
}

func (v *AllHasSBOMTree) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSBOMTree) __premarshalJSON() (*__premarshalAllHasSBOMTree, error) {
	var retval __premarshalAllHasSBOMTree

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.Uri
	retval.Algorithm = v.Algorithm
	retval.Digest = v.Digest
	retval.DownloadLocation = v.DownloadLocation
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	retval.KnownSince = v.KnownSince
	{

		dst := &retval.IncludedSoftware
		src := v.IncludedSoftware
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalAllHasSBOMTreeIncludedSoftwarePackageOrArtifact(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AllHasSBOMTree.IncludedSoftware: %w", err)
			}
		}
	}
	retval.IncludedDependencies = v.IncludedDependencies
	retval.IncludedOccurrences = v.IncludedOccurrences
	return &retval, nil
}

// AllHasSBOMTreeIncludedDependenciesIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type AllHasSBOMTreeIncludedDependenciesIsDependency struct {
	AllIsDependencyTree `json:"-"`
}

// GetId returns AllHasSBOMTreeIncludedDependenciesIsDependency.Id, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) GetId() string {
	return v.AllIsDependencyTree.Id
}

// GetJustification returns AllHasSBOMTreeIncludedDependenciesIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) GetJustification() string {
	return v.AllIsDependencyTree.Justification
}

// GetPackage returns AllHasSBOMTreeIncludedDependenciesIsDependency.Package, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependencyPackage returns AllHasSBOMTreeIncludedDependenciesIsDependency.DependencyPackage, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) GetDependencyPackage() AllIsDependencyTreeDependencyPackage {
	return v.AllIsDependencyTree.DependencyPackage
}

// GetDependencyType returns AllHasSBOMTreeIncludedDependenciesIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns AllHasSBOMTreeIncludedDependenciesIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) GetVersionRange() string {
	return v.AllIsDependencyTree.VersionRange
}

// GetOrigin returns AllHasSBOMTreeIncludedDependenciesIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) GetOrigin() string {
	return v.AllIsDependencyTree.Origin
}

// GetCollector returns AllHasSBOMTreeIncludedDependenciesIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) GetCollector() string {
	return v.AllIsDependencyTree.Collector
}

func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSBOMTreeIncludedDependenciesIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSBOMTreeIncludedDependenciesIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSBOMTreeIncludedDependenciesIsDependency struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependencyPackage AllIsDependencyTreeDependencyPackage `json:"dependencyPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSBOMTreeIncludedDependenciesIsDependency) __premarshalJSON() (*__premarshalAllHasSBOMTreeIncludedDependenciesIsDependency, error) {
	var retval __premarshalAllHasSBOMTreeIncludedDependenciesIsDependency

	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependencyPackage = v.AllIsDependencyTree.DependencyPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// AllHasSBOMTreeIncludedOccurrencesIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type AllHasSBOMTreeIncludedOccurrencesIsOccurrence struct {
	AllIsOccurrencesTree `json:"-"`
}

// GetId returns AllHasSBOMTreeIncludedOccurrencesIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedOccurrencesIsOccurrence) GetId() string {
	return v.AllIsOccurrencesTree.Id
}

// GetSubject returns AllHasSBOMTreeIncludedOccurrencesIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedOccurrencesIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns AllHasSBOMTreeIncludedOccurrencesIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedOccurrencesIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns AllHasSBOMTreeIncludedOccurrencesIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedOccurrencesIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns AllHasSBOMTreeIncludedOccurrencesIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedOccurrencesIsOccurrence) GetOrigin() string {
	return v.AllIsOccurrencesTree.Origin
}

// GetCollector returns AllHasSBOMTreeIncludedOccurrencesIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedOccurrencesIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *AllHasSBOMTreeIncludedOccurrencesIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSBOMTreeIncludedOccurrencesIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSBOMTreeIncludedOccurrencesIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSBOMTreeIncludedOccurrencesIsOccurrence struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllHasSBOMTreeIncludedOccurrencesIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSBOMTreeIncludedOccurrencesIsOccurrence) __premarshalJSON() (*__premarshalAllHasSBOMTreeIncludedOccurrencesIsOccurrence, error) {
	var retval __premarshalAllHasSBOMTreeIncludedOccurrencesIsOccurrence

	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllHasSBOMTreeIncludedOccurrencesIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// AllHasSBOMTreeIncludedSoftwareArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllHasSBOMTreeIncludedSoftwareArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllHasSBOMTreeIncludedSoftwareArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedSoftwareArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllHasSBOMTreeIncludedSoftwareArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedSoftwareArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllHasSBOMTreeIncludedSoftwareArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedSoftwareArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns AllHasSBOMTreeIncludedSoftwareArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedSoftwareArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllHasSBOMTreeIncludedSoftwareArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSBOMTreeIncludedSoftwareArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSBOMTreeIncludedSoftwareArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSBOMTreeIncludedSoftwareArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllHasSBOMTreeIncludedSoftwareArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSBOMTreeIncludedSoftwareArtifact) __premarshalJSON() (*__premarshalAllHasSBOMTreeIncludedSoftwareArtifact, error) {
	var retval __premarshalAllHasSBOMTreeIncludedSoftwareArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllHasSBOMTreeIncludedSoftwarePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllHasSBOMTreeIncludedSoftwarePackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllHasSBOMTreeIncludedSoftwarePackage.Typename, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedSoftwarePackage) GetTypename() *string { return v.Typename }

// GetId returns AllHasSBOMTreeIncludedSoftwarePackage.Id, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedSoftwarePackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllHasSBOMTreeIncludedSoftwarePackage.Type, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedSoftwarePackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllHasSBOMTreeIncludedSoftwarePackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeIncludedSoftwarePackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllHasSBOMTreeIncludedSoftwarePackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSBOMTreeIncludedSoftwarePackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSBOMTreeIncludedSoftwarePackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSBOMTreeIncludedSoftwarePackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllHasSBOMTreeIncludedSoftwarePackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSBOMTreeIncludedSoftwarePackage) __premarshalJSON() (*__premarshalAllHasSBOMTreeIncludedSoftwarePackage, error) {
	var retval __premarshalAllHasSBOMTreeIncludedSoftwarePackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllHasSBOMTreeIncludedSoftwarePackageOrArtifact includes the requested fields of the GraphQL interface PackageOrArtifact.
//
// AllHasSBOMTreeIncludedSoftwarePackageOrArtifact is implemented by the following types:
// AllHasSBOMTreeIncludedSoftwareArtifact
// AllHasSBOMTreeIncludedSoftwarePackage
// The GraphQL type's documentation follows.
//
// PackageOrArtifact is a union of Package and Artifact.
type AllHasSBOMTreeIncludedSoftwarePackageOrArtifact interface {
	implementsGraphQLInterfaceAllHasSBOMTreeIncludedSoftwarePackageOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllHasSBOMTreeIncludedSoftwareArtifact) implementsGraphQLInterfaceAllHasSBOMTreeIncludedSoftwarePackageOrArtifact() {
}
func (v *AllHasSBOMTreeIncludedSoftwarePackage) implementsGraphQLInterfaceAllHasSBOMTreeIncludedSoftwarePackageOrArtifact() {
}

func __unmarshalAllHasSBOMTreeIncludedSoftwarePackageOrArtifact(b []byte, v *AllHasSBOMTreeIncludedSoftwarePackageOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllHasSBOMTreeIncludedSoftwareArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllHasSBOMTreeIncludedSoftwarePackage)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllHasSBOMTreeIncludedSoftwarePackageOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllHasSBOMTreeIncludedSoftwarePackageOrArtifact(v *AllHasSBOMTreeIncludedSoftwarePackageOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllHasSBOMTreeIncludedSoftwareArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasSBOMTreeIncludedSoftwareArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllHasSBOMTreeIncludedSoftwarePackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasSBOMTreeIncludedSoftwarePackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllHasSBOMTreeIncludedSoftwarePackageOrArtifact: "%T"`, v)
	}
}

// AllHasSBOMTreeSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllHasSBOMTreeSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllHasSBOMTreeSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllHasSBOMTreeSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllHasSBOMTreeSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllHasSBOMTreeSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllHasSBOMTreeSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSBOMTreeSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSBOMTreeSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSBOMTreeSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllHasSBOMTreeSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSBOMTreeSubjectArtifact) __premarshalJSON() (*__premarshalAllHasSBOMTreeSubjectArtifact, error) {
	var retval __premarshalAllHasSBOMTreeSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllHasSBOMTreeSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllHasSBOMTreeSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllHasSBOMTreeSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllHasSBOMTreeSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllHasSBOMTreeSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllHasSBOMTreeSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasSBOMTreeSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllHasSBOMTreeSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSBOMTreeSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSBOMTreeSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSBOMTreeSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllHasSBOMTreeSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSBOMTreeSubjectPackage) __premarshalJSON() (*__premarshalAllHasSBOMTreeSubjectPackage, error) {
	var retval __premarshalAllHasSBOMTreeSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllHasSBOMTreeSubjectPackageOrArtifact includes the requested fields of the GraphQL interface PackageOrArtifact.
//
// AllHasSBOMTreeSubjectPackageOrArtifact is implemented by the following types:
// AllHasSBOMTreeSubjectArtifact
// AllHasSBOMTreeSubjectPackage
// The GraphQL type's documentation follows.
//
// PackageOrArtifact is a union of Package and Artifact.
type AllHasSBOMTreeSubjectPackageOrArtifact interface {
	implementsGraphQLInterfaceAllHasSBOMTreeSubjectPackageOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllHasSBOMTreeSubjectArtifact) implementsGraphQLInterfaceAllHasSBOMTreeSubjectPackageOrArtifact() {
}
func (v *AllHasSBOMTreeSubjectPackage) implementsGraphQLInterfaceAllHasSBOMTreeSubjectPackageOrArtifact() {
}

func __unmarshalAllHasSBOMTreeSubjectPackageOrArtifact(b []byte, v *AllHasSBOMTreeSubjectPackageOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllHasSBOMTreeSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllHasSBOMTreeSubjectPackage)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllHasSBOMTreeSubjectPackageOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllHasSBOMTreeSubjectPackageOrArtifact(v *AllHasSBOMTreeSubjectPackageOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllHasSBOMTreeSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasSBOMTreeSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllHasSBOMTreeSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllHasSBOMTreeSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllHasSBOMTreeSubjectPackageOrArtifact: "%T"`, v)
	}
}

// AllHasSLSATree includes the GraphQL fields of HasSLSA requested by the fragment AllHasSLSATree.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type AllHasSLSATree struct {
	Id string `json:"id"`
	// The subject of SLSA attestation
	Subject AllHasSLSATreeSubjectArtifact `json:"subject"`
	// The SLSA attestation
	Slsa AllHasSLSATreeSlsaSLSA `json:"slsa"`
}

// GetId returns AllHasSLSATree.Id, and is useful for accessing the field via an interface.
func (v *AllHasSLSATree) GetId() string { return v.Id }

// GetSubject returns AllHasSLSATree.Subject, and is useful for accessing the field via an interface.
func (v *AllHasSLSATree) GetSubject() AllHasSLSATreeSubjectArtifact { return v.Subject }

// GetSlsa returns AllHasSLSATree.Slsa, and is useful for accessing the field via an interface.
func (v *AllHasSLSATree) GetSlsa() AllHasSLSATreeSlsaSLSA { return v.Slsa }

// AllHasSLSATreeSlsaSLSA includes the requested fields of the GraphQL type SLSA.
// The GraphQL type's documentation follows.
//
// SLSA contains all of the fields present in a SLSA attestation.
//
// The materials and builders are objects of the HasSLSA predicate, everything
// else are properties extracted from the attestation.
//
// We also include fields to specify under what conditions the check was performed
// (time of scan, version of scanners, etc.) as well as how this information got
// included into GUAC (origin document and the collector for that document).
type AllHasSLSATreeSlsaSLSA struct {
	// Materials of the build resulting in subject
	BuiltFrom []AllHasSLSATreeSlsaSLSABuiltFromArtifact `json:"builtFrom"`
	// Builder performing the build
	BuiltBy AllHasSLSATreeSlsaSLSABuiltByBuilder `json:"builtBy"`
	// Type of the builder
	BuildType string `json:"buildType"`
	// Individual predicates found in the attestation
	SlsaPredicate []AllHasSLSATreeSlsaSLSASlsaPredicateSLSAPredicate `json:"slsaPredicate"`
	// Version of the SLSA predicate
	SlsaVersion string `json:"slsaVersion"`
	// Timestamp (RFC3339Nano format) of build start time
	StartedOn *time.Time `json:"startedOn"`
	// Timestamp (RFC3339Nano format) of build end time
	FinishedOn *time.Time `json:"finishedOn"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
	// Reference location of the document in the persistent blob store (if that is configured)
	DocumentRef string `json:"documentRef"`
}

// GetBuiltFrom returns AllHasSLSATreeSlsaSLSA.BuiltFrom, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSA) GetBuiltFrom() []AllHasSLSATreeSlsaSLSABuiltFromArtifact {
	return v.BuiltFrom
}

// GetBuiltBy returns AllHasSLSATreeSlsaSLSA.BuiltBy, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSA) GetBuiltBy() AllHasSLSATreeSlsaSLSABuiltByBuilder { return v.BuiltBy }

// GetBuildType returns AllHasSLSATreeSlsaSLSA.BuildType, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSA) GetBuildType() string { return v.BuildType }

// GetSlsaPredicate returns AllHasSLSATreeSlsaSLSA.SlsaPredicate, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSA) GetSlsaPredicate() []AllHasSLSATreeSlsaSLSASlsaPredicateSLSAPredicate {
	return v.SlsaPredicate
}

// GetSlsaVersion returns AllHasSLSATreeSlsaSLSA.SlsaVersion, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSA) GetSlsaVersion() string { return v.SlsaVersion }

// GetStartedOn returns AllHasSLSATreeSlsaSLSA.StartedOn, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSA) GetStartedOn() *time.Time { return v.StartedOn }

// GetFinishedOn returns AllHasSLSATreeSlsaSLSA.FinishedOn, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSA) GetFinishedOn() *time.Time { return v.FinishedOn }

// GetOrigin returns AllHasSLSATreeSlsaSLSA.Origin, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSA) GetOrigin() string { return v.Origin }

// GetCollector returns AllHasSLSATreeSlsaSLSA.Collector, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSA) GetCollector() string { return v.Collector }

// GetDocumentRef returns AllHasSLSATreeSlsaSLSA.DocumentRef, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSA) GetDocumentRef() string { return v.DocumentRef }

// AllHasSLSATreeSlsaSLSABuiltByBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type AllHasSLSATreeSlsaSLSABuiltByBuilder struct {
	AllBuilderTree `json:"-"`
}

// GetId returns AllHasSLSATreeSlsaSLSABuiltByBuilder.Id, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSABuiltByBuilder) GetId() string { return v.AllBuilderTree.Id }

// GetUri returns AllHasSLSATreeSlsaSLSABuiltByBuilder.Uri, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSABuiltByBuilder) GetUri() string { return v.AllBuilderTree.Uri }

func (v *AllHasSLSATreeSlsaSLSABuiltByBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSLSATreeSlsaSLSABuiltByBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSLSATreeSlsaSLSABuiltByBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSLSATreeSlsaSLSABuiltByBuilder struct {
	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *AllHasSLSATreeSlsaSLSABuiltByBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSLSATreeSlsaSLSABuiltByBuilder) __premarshalJSON() (*__premarshalAllHasSLSATreeSlsaSLSABuiltByBuilder, error) {
	var retval __premarshalAllHasSLSATreeSlsaSLSABuiltByBuilder

	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// AllHasSLSATreeSlsaSLSABuiltFromArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllHasSLSATreeSlsaSLSABuiltFromArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllHasSLSATreeSlsaSLSABuiltFromArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSABuiltFromArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllHasSLSATreeSlsaSLSABuiltFromArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSABuiltFromArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns AllHasSLSATreeSlsaSLSABuiltFromArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSABuiltFromArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllHasSLSATreeSlsaSLSABuiltFromArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSLSATreeSlsaSLSABuiltFromArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSLSATreeSlsaSLSABuiltFromArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSLSATreeSlsaSLSABuiltFromArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllHasSLSATreeSlsaSLSABuiltFromArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSLSATreeSlsaSLSABuiltFromArtifact) __premarshalJSON() (*__premarshalAllHasSLSATreeSlsaSLSABuiltFromArtifact, error) {
	var retval __premarshalAllHasSLSATreeSlsaSLSABuiltFromArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllHasSLSATreeSlsaSLSASlsaPredicateSLSAPredicate includes the requested fields of the GraphQL type SLSAPredicate.
// The GraphQL type's documentation follows.
//
// SLSAPredicate are the values from the SLSA predicate in key-value pair form.
//
// # For example, given the following predicate
//
// ```
// "predicate": {
// "buildDefinition": {
// "externalParameters": {
// "repository": "https://github.com/octocat/hello-world",
// ...
// },
// ...
// },
// ...
// }
// ```
//
// we have
//
// ```
// key   = "buildDefinition.externalParameters.repository"
// value = "https://github.com/octocat/hello-world"
// ```
//
// This node cannot be directly referred by other parts of GUAC.
type AllHasSLSATreeSlsaSLSASlsaPredicateSLSAPredicate struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns AllHasSLSATreeSlsaSLSASlsaPredicateSLSAPredicate.Key, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSASlsaPredicateSLSAPredicate) GetKey() string { return v.Key }

// GetValue returns AllHasSLSATreeSlsaSLSASlsaPredicateSLSAPredicate.Value, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSlsaSLSASlsaPredicateSLSAPredicate) GetValue() string { return v.Value }

// AllHasSLSATreeSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllHasSLSATreeSubjectArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllHasSLSATreeSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllHasSLSATreeSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllHasSLSATreeSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllHasSLSATreeSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllHasSLSATreeSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSLSATreeSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSLSATreeSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSLSATreeSubjectArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllHasSLSATreeSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSLSATreeSubjectArtifact) __premarshalJSON() (*__premarshalAllHasSLSATreeSubjectArtifact, error) {
	var retval __premarshalAllHasSLSATreeSubjectArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllHasSourceAt includes the GraphQL fields of HasSourceAt requested by the fragment AllHasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type AllHasSourceAt struct {
	Id string `json:"id"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Timestamp since this link between package and source was certified
	KnownSince time.Time `json:"knownSince"`
	// The subject of the attestation: can be a PackageName or a PackageVersion
	Package AllHasSourceAtPackage `json:"package"`
	// Source repository from which the package is built
	Source AllHasSourceAtSource `json:"source"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetId() string { return v.Id }

// GetJustification returns AllHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetJustification() string { return v.Justification }

// GetKnownSince returns AllHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetKnownSince() time.Time { return v.KnownSince }

// GetPackage returns AllHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetPackage() AllHasSourceAtPackage { return v.Package }

// GetSource returns AllHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetSource() AllHasSourceAtSource { return v.Source }

// GetOrigin returns AllHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetOrigin() string { return v.Origin }

// GetCollector returns AllHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *AllHasSourceAt) GetCollector() string { return v.Collector }

// AllHasSourceAtPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllHasSourceAtPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllHasSourceAtPackage.Id, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllHasSourceAtPackage.Type, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllHasSourceAtPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllHasSourceAtPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSourceAtPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSourceAtPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSourceAtPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllHasSourceAtPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSourceAtPackage) __premarshalJSON() (*__premarshalAllHasSourceAtPackage, error) {
	var retval __premarshalAllHasSourceAtPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllHasSourceAtSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllHasSourceAtSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns AllHasSourceAtSource.Id, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllHasSourceAtSource.Type, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllHasSourceAtSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllHasSourceAtSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllHasSourceAtSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHasSourceAtSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHasSourceAtSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHasSourceAtSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllHasSourceAtSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHasSourceAtSource) __premarshalJSON() (*__premarshalAllHasSourceAtSource, error) {
	var retval __premarshalAllHasSourceAtSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllHashEqualTree includes the GraphQL fields of HashEqual requested by the fragment AllHashEqualTree.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that two artifacts are identical.
type AllHashEqualTree struct {
	Id string `json:"id"`
	// Justification for the claim that the artifacts are similar
	Justification string `json:"justification"`
	// Two artifacts that are similar
	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllHashEqualTree.Id, and is useful for accessing the field via an interface.
func (v *AllHashEqualTree) GetId() string { return v.Id }

// GetJustification returns AllHashEqualTree.Justification, and is useful for accessing the field via an interface.
func (v *AllHashEqualTree) GetJustification() string { return v.Justification }

// GetArtifacts returns AllHashEqualTree.Artifacts, and is useful for accessing the field via an interface.
func (v *AllHashEqualTree) GetArtifacts() []AllHashEqualTreeArtifactsArtifact { return v.Artifacts }

// GetOrigin returns AllHashEqualTree.Origin, and is useful for accessing the field via an interface.
func (v *AllHashEqualTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllHashEqualTree.Collector, and is useful for accessing the field via an interface.
func (v *AllHashEqualTree) GetCollector() string { return v.Collector }

// AllHashEqualTreeArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllHashEqualTreeArtifactsArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllHashEqualTreeArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllHashEqualTreeArtifactsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllHashEqualTreeArtifactsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllHashEqualTreeArtifactsArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllHashEqualTreeArtifactsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllHashEqualTreeArtifactsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllHashEqualTreeArtifactsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllHashEqualTreeArtifactsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllHashEqualTreeArtifactsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllHashEqualTreeArtifactsArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllHashEqualTreeArtifactsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllHashEqualTreeArtifactsArtifact) __premarshalJSON() (*__premarshalAllHashEqualTreeArtifactsArtifact, error) {
	var retval __premarshalAllHashEqualTreeArtifactsArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllIsDependencyTree includes the GraphQL fields of IsDependency requested by the fragment AllIsDependencyTree.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type AllIsDependencyTree struct {
	Id string `json:"id"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Package that has the dependency
	Package AllIsDependencyTreePackage `json:"package"`
	// Package for the dependency; MUST be PackageName or PackageVersion
	DependencyPackage AllIsDependencyTreeDependencyPackage `json:"dependencyPackage"`
	// Type of dependency
	DependencyType DependencyType `json:"dependencyType"`
	// Version range for the dependency link, required if depedentPackage points to PackageName
	VersionRange string `json:"versionRange"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllIsDependencyTree.Id, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetId() string { return v.Id }

// GetJustification returns AllIsDependencyTree.Justification, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetJustification() string { return v.Justification }

// GetPackage returns AllIsDependencyTree.Package, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetPackage() AllIsDependencyTreePackage { return v.Package }

// GetDependencyPackage returns AllIsDependencyTree.DependencyPackage, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetDependencyPackage() AllIsDependencyTreeDependencyPackage {
	return v.DependencyPackage
}

// GetDependencyType returns AllIsDependencyTree.DependencyType, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetDependencyType() DependencyType { return v.DependencyType }

// GetVersionRange returns AllIsDependencyTree.VersionRange, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetVersionRange() string { return v.VersionRange }

// GetOrigin returns AllIsDependencyTree.Origin, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllIsDependencyTree.Collector, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTree) GetCollector() string { return v.Collector }

// AllIsDependencyTreeDependencyPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllIsDependencyTreeDependencyPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllIsDependencyTreeDependencyPackage.Id, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreeDependencyPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllIsDependencyTreeDependencyPackage.Type, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreeDependencyPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllIsDependencyTreeDependencyPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreeDependencyPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllIsDependencyTreeDependencyPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsDependencyTreeDependencyPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsDependencyTreeDependencyPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsDependencyTreeDependencyPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllIsDependencyTreeDependencyPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsDependencyTreeDependencyPackage) __premarshalJSON() (*__premarshalAllIsDependencyTreeDependencyPackage, error) {
	var retval __premarshalAllIsDependencyTreeDependencyPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllIsDependencyTreePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllIsDependencyTreePackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllIsDependencyTreePackage.Id, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreePackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllIsDependencyTreePackage.Type, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreePackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllIsDependencyTreePackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllIsDependencyTreePackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllIsDependencyTreePackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsDependencyTreePackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsDependencyTreePackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsDependencyTreePackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllIsDependencyTreePackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsDependencyTreePackage) __premarshalJSON() (*__premarshalAllIsDependencyTreePackage, error) {
	var retval __premarshalAllIsDependencyTreePackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllIsOccurrencesTree includes the GraphQL fields of IsOccurrence requested by the fragment AllIsOccurrencesTree.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type AllIsOccurrencesTree struct {
	Id string `json:"id"`
	// Package or source from which the artifact originates
	Subject AllIsOccurrencesTreeSubjectPackageOrSource `json:"-"`
	// The artifact in the relationship
	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllIsOccurrencesTree.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetId() string { return v.Id }

// GetSubject returns AllIsOccurrencesTree.Subject, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.Subject
}

// GetArtifact returns AllIsOccurrencesTree.Artifact, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetArtifact() AllIsOccurrencesTreeArtifact { return v.Artifact }

// GetJustification returns AllIsOccurrencesTree.Justification, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetJustification() string { return v.Justification }

// GetOrigin returns AllIsOccurrencesTree.Origin, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllIsOccurrencesTree.Collector, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetCollector() string { return v.Collector }

func (v *AllIsOccurrencesTree) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTree
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTree = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllIsOccurrencesTreeSubjectPackageOrSource(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllIsOccurrencesTree.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllIsOccurrencesTree struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllIsOccurrencesTree) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTree) __premarshalJSON() (*__premarshalAllIsOccurrencesTree, error) {
	var retval __premarshalAllIsOccurrencesTree

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.Artifact
	retval.Justification = v.Justification
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllIsOccurrencesTreeArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllIsOccurrencesTreeArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllIsOccurrencesTreeArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllIsOccurrencesTreeArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllIsOccurrencesTreeArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllIsOccurrencesTreeArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTreeArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTreeArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsOccurrencesTreeArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllIsOccurrencesTreeArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTreeArtifact) __premarshalJSON() (*__premarshalAllIsOccurrencesTreeArtifact, error) {
	var retval __premarshalAllIsOccurrencesTreeArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllIsOccurrencesTreeSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllIsOccurrencesTreeSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllIsOccurrencesTreeSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllIsOccurrencesTreeSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllIsOccurrencesTreeSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllIsOccurrencesTreeSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllIsOccurrencesTreeSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTreeSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTreeSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsOccurrencesTreeSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllIsOccurrencesTreeSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTreeSubjectPackage) __premarshalJSON() (*__premarshalAllIsOccurrencesTreeSubjectPackage, error) {
	var retval __premarshalAllIsOccurrencesTreeSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllIsOccurrencesTreeSubjectPackageOrSource includes the requested fields of the GraphQL interface PackageOrSource.
//
// AllIsOccurrencesTreeSubjectPackageOrSource is implemented by the following types:
// AllIsOccurrencesTreeSubjectPackage
// AllIsOccurrencesTreeSubjectSource
// The GraphQL type's documentation follows.
//
// PackageOrSource is a union of Package and Source.
type AllIsOccurrencesTreeSubjectPackageOrSource interface {
	implementsGraphQLInterfaceAllIsOccurrencesTreeSubjectPackageOrSource()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllIsOccurrencesTreeSubjectPackage) implementsGraphQLInterfaceAllIsOccurrencesTreeSubjectPackageOrSource() {
}
func (v *AllIsOccurrencesTreeSubjectSource) implementsGraphQLInterfaceAllIsOccurrencesTreeSubjectPackageOrSource() {
}

func __unmarshalAllIsOccurrencesTreeSubjectPackageOrSource(b []byte, v *AllIsOccurrencesTreeSubjectPackageOrSource) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(AllIsOccurrencesTreeSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllIsOccurrencesTreeSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrSource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllIsOccurrencesTreeSubjectPackageOrSource: "%v"`, tn.TypeName)
	}
}

func __marshalAllIsOccurrencesTreeSubjectPackageOrSource(v *AllIsOccurrencesTreeSubjectPackageOrSource) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllIsOccurrencesTreeSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllIsOccurrencesTreeSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllIsOccurrencesTreeSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllIsOccurrencesTreeSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllIsOccurrencesTreeSubjectPackageOrSource: "%T"`, v)
	}
}

// AllIsOccurrencesTreeSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllIsOccurrencesTreeSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllIsOccurrencesTreeSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllIsOccurrencesTreeSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllIsOccurrencesTreeSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllIsOccurrencesTreeSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllIsOccurrencesTreeSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTreeSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTreeSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsOccurrencesTreeSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllIsOccurrencesTreeSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTreeSubjectSource) __premarshalJSON() (*__premarshalAllIsOccurrencesTreeSubjectSource, error) {
	var retval __premarshalAllIsOccurrencesTreeSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllLicenseTree includes the GraphQL fields of License requested by the fragment AllLicenseTree.
// The GraphQL type's documentation follows.
//
// License represents a particular license. If the license is found on the SPDX
// license list (https://spdx.org/licenses/) then the fields should be:
//
// Name: SPDX license identifier
// Inline: empty
// ListVersion: SPDX license list version
//
// example:
//
// Name: AGPL-3.0-or-later
// Inline: ""
// ListVersion: 3.21 2023-06-18
//
// If the license is not on the SPDX license list, then a new guid should be
// created and the license text placed inline:
//
// Name: LicenseRef-<guid>
// Inline: Full license text
// ListVersion: empty
//
// example:
//
// Name: LicenseRef-1a2b3c
// Inline: Permission to use, copy, modify, and/or distribute ...
// ListVersion: ""
type AllLicenseTree struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	Inline      *string `json:"inline"`
	ListVersion *string `json:"listVersion"`
}

// GetId returns AllLicenseTree.Id, and is useful for accessing the field via an interface.
func (v *AllLicenseTree) GetId() string { return v.Id }

// GetName returns AllLicenseTree.Name, and is useful for accessing the field via an interface.
func (v *AllLicenseTree) GetName() string { return v.Name }

// GetInline returns AllLicenseTree.Inline, and is useful for accessing the field via an interface.
func (v *AllLicenseTree) GetInline() *string { return v.Inline }

// GetListVersion returns AllLicenseTree.ListVersion, and is useful for accessing the field via an interface.
func (v *AllLicenseTree) GetListVersion() *string { return v.ListVersion }

// AllPkgEqual includes the GraphQL fields of PkgEqual requested by the fragment AllPkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that two packages are similar.
type AllPkgEqual struct {
	Id string `json:"id"`
	// Justification for the claim that the packages are similar
	Justification string `json:"justification"`
	// Two packages that are similar
	Packages []AllPkgEqualPackagesPackage `json:"packages"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *AllPkgEqual) GetId() string { return v.Id }

// GetJustification returns AllPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *AllPkgEqual) GetJustification() string { return v.Justification }

// GetPackages returns AllPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *AllPkgEqual) GetPackages() []AllPkgEqualPackagesPackage { return v.Packages }

// GetOrigin returns AllPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *AllPkgEqual) GetOrigin() string { return v.Origin }

// GetCollector returns AllPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *AllPkgEqual) GetCollector() string { return v.Collector }

// AllPkgEqualPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllPkgEqualPackagesPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllPkgEqualPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *AllPkgEqualPackagesPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllPkgEqualPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *AllPkgEqualPackagesPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllPkgEqualPackagesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllPkgEqualPackagesPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllPkgEqualPackagesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllPkgEqualPackagesPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllPkgEqualPackagesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllPkgEqualPackagesPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllPkgEqualPackagesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllPkgEqualPackagesPackage) __premarshalJSON() (*__premarshalAllPkgEqualPackagesPackage, error) {
	var retval __premarshalAllPkgEqualPackagesPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllPkgTree includes the GraphQL fields of Package requested by the fragment AllPkgTree.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllPkgTree struct {
	Id         string                                 `json:"id"`
	Type       string                                 `json:"type"`
	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

// GetId returns AllPkgTree.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTree) GetId() string { return v.Id }

// GetType returns AllPkgTree.Type, and is useful for accessing the field via an interface.
func (v *AllPkgTree) GetType() string { return v.Type }

// GetNamespaces returns AllPkgTree.Namespaces, and is useful for accessing the field via an interface.
func (v *AllPkgTree) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace { return v.Namespaces }

// AllPkgTreeNamespacesPackageNamespace includes the requested fields of the GraphQL type PackageNamespace.
// The GraphQL type's documentation follows.
//
// PackageNamespace is a namespace for packages.
//
// In the pURL representation, each PackageNamespace matches the
// pkg:<type>/<namespace>/ partial pURL.
//
// Namespaces are optional and type specific. Because they are optional, we use
// empty string to denote missing namespaces.
type AllPkgTreeNamespacesPackageNamespace struct {
	Id        string                                                 `json:"id"`
	Namespace string                                                 `json:"namespace"`
	Names     []AllPkgTreeNamespacesPackageNamespaceNamesPackageName `json:"names"`
}

// GetId returns AllPkgTreeNamespacesPackageNamespace.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespace) GetId() string { return v.Id }

// GetNamespace returns AllPkgTreeNamespacesPackageNamespace.Namespace, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespace) GetNamespace() string { return v.Namespace }

// GetNames returns AllPkgTreeNamespacesPackageNamespace.Names, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespace) GetNames() []AllPkgTreeNamespacesPackageNamespaceNamesPackageName {
	return v.Names
}

// AllPkgTreeNamespacesPackageNamespaceNamesPackageName includes the requested fields of the GraphQL type PackageName.
// The GraphQL type's documentation follows.
//
// PackageName is a name for packages.
//
// In the pURL representation, each PackageName matches the
// pkg:<type>/<namespace>/<name> pURL.
//
// Names are always mandatory.
//
// This is the first node in the trie that can be referred to by other parts of
// GUAC.
type AllPkgTreeNamespacesPackageNamespaceNamesPackageName struct {
	Id       string                                                                       `json:"id"`
	Name     string                                                                       `json:"name"`
	Versions []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion `json:"versions"`
}

// GetId returns AllPkgTreeNamespacesPackageNamespaceNamesPackageName.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageName) GetId() string { return v.Id }

// GetName returns AllPkgTreeNamespacesPackageNamespaceNamesPackageName.Name, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageName) GetName() string { return v.Name }

// GetVersions returns AllPkgTreeNamespacesPackageNamespaceNamesPackageName.Versions, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageName) GetVersions() []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion {
	return v.Versions
}

// AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion includes the requested fields of the GraphQL type PackageVersion.
// The GraphQL type's documentation follows.
//
// PackageVersion is a package version.
//
// In the pURL representation, each PackageName matches the
// pkg:<type>/<namespace>/<name>@<version> pURL.
//
// Versions are optional and each Package type defines own rules for handling
// them. For this level of GUAC, these are just opaque strings.
//
// NOTE: The handling of versions might change before this schema becomes stable.
//
// This node can be referred to by other parts of GUAC.
//
// Subpath and qualifiers are optional. Lack of qualifiers is represented by an
// empty list and lack of subpath by empty string (to be consistent with
// optionality of namespace and version). Two nodes that have different qualifiers
// and/or subpath but the same version mean two different packages in the trie
// (they are different). Two nodes that have same version but qualifiers of one
// are a subset of the qualifier of the other also mean two different packages in
// the trie.
type AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion struct {
	Id         string                                                                                                 `json:"id"`
	Purl       string                                                                                                 `json:"purl"`
	Version    string                                                                                                 `json:"version"`
	Qualifiers []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier `json:"qualifiers"`
	Subpath    string                                                                                                 `json:"subpath"`
}

// GetId returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetId() string {
	return v.Id
}

// GetPurl returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Purl, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetPurl() string {
	return v.Purl
}

// GetVersion returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Version, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetVersion() string {
	return v.Version
}

// GetQualifiers returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Qualifiers, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetQualifiers() []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier {
	return v.Qualifiers
}

// GetSubpath returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Subpath, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetSubpath() string {
	return v.Subpath
}

// AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier includes the requested fields of the GraphQL type PackageQualifier.
// The GraphQL type's documentation follows.
//
// PackageQualifier is a qualifier for a package, a key-value pair.
//
// In the pURL representation, it is a part of the <qualifiers> part of the
// pkg:<type>/<namespace>/<name>@<version>?<qualifiers> pURL.
//
// Qualifiers are optional, each Package type defines own rules for handling them,
// and multiple qualifiers could be attached to the same package.
//
// This node cannot be directly referred by other parts of GUAC.
type AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier.Key, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier) GetKey() string {
	return v.Key
}

// GetValue returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier.Value, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier) GetValue() string {
	return v.Value
}

// AllPointOfContact includes the GraphQL fields of PointOfContact requested by the fragment AllPointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type AllPointOfContact struct {
	Id string `json:"id"`
	// The package, source or artifact that is attested
	Subject AllPointOfContactSubjectPackageSourceOrArtifact `json:"-"`
	// Email for the POC
	Email string `json:"email"`
	// Generic info for the POC
	Info string `json:"info"`
	// Timestamp when the certification for POC was created (in RFC 3339 format)
	Since time.Time `json:"since"`
	// The justification for the POC attestation
	Justification string `json:"justification"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllPointOfContact.Id, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetId() string { return v.Id }

// GetSubject returns AllPointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.Subject
}

// GetEmail returns AllPointOfContact.Email, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetEmail() string { return v.Email }

// GetInfo returns AllPointOfContact.Info, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetInfo() string { return v.Info }

// GetSince returns AllPointOfContact.Since, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetSince() time.Time { return v.Since }

// GetJustification returns AllPointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetJustification() string { return v.Justification }

// GetOrigin returns AllPointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetOrigin() string { return v.Origin }

// GetCollector returns AllPointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *AllPointOfContact) GetCollector() string { return v.Collector }

func (v *AllPointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllPointOfContact
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllPointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllPointOfContactSubjectPackageSourceOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AllPointOfContact.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllPointOfContact struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllPointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllPointOfContact) __premarshalJSON() (*__premarshalAllPointOfContact, error) {
	var retval __premarshalAllPointOfContact

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.Email
	retval.Info = v.Info
	retval.Since = v.Since
	retval.Justification = v.Justification
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllPointOfContactSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllPointOfContactSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllPointOfContactSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllPointOfContactSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllPointOfContactSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllPointOfContactSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllPointOfContactSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllPointOfContactSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllPointOfContactSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllPointOfContactSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllPointOfContactSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllPointOfContactSubjectArtifact) __premarshalJSON() (*__premarshalAllPointOfContactSubjectArtifact, error) {
	var retval __premarshalAllPointOfContactSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllPointOfContactSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllPointOfContactSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllPointOfContactSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllPointOfContactSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllPointOfContactSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllPointOfContactSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllPointOfContactSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllPointOfContactSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllPointOfContactSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllPointOfContactSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllPointOfContactSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllPointOfContactSubjectPackage) __premarshalJSON() (*__premarshalAllPointOfContactSubjectPackage, error) {
	var retval __premarshalAllPointOfContactSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllPointOfContactSubjectPackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// AllPointOfContactSubjectPackageSourceOrArtifact is implemented by the following types:
// AllPointOfContactSubjectArtifact
// AllPointOfContactSubjectPackage
// AllPointOfContactSubjectSource
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type AllPointOfContactSubjectPackageSourceOrArtifact interface {
	implementsGraphQLInterfaceAllPointOfContactSubjectPackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllPointOfContactSubjectArtifact) implementsGraphQLInterfaceAllPointOfContactSubjectPackageSourceOrArtifact() {
}
func (v *AllPointOfContactSubjectPackage) implementsGraphQLInterfaceAllPointOfContactSubjectPackageSourceOrArtifact() {
}
func (v *AllPointOfContactSubjectSource) implementsGraphQLInterfaceAllPointOfContactSubjectPackageSourceOrArtifact() {
}

func __unmarshalAllPointOfContactSubjectPackageSourceOrArtifact(b []byte, v *AllPointOfContactSubjectPackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(AllPointOfContactSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(AllPointOfContactSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllPointOfContactSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllPointOfContactSubjectPackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllPointOfContactSubjectPackageSourceOrArtifact(v *AllPointOfContactSubjectPackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllPointOfContactSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllPointOfContactSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllPointOfContactSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllPointOfContactSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllPointOfContactSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllPointOfContactSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllPointOfContactSubjectPackageSourceOrArtifact: "%T"`, v)
	}
}

// AllPointOfContactSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllPointOfContactSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllPointOfContactSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllPointOfContactSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllPointOfContactSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllPointOfContactSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllPointOfContactSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllPointOfContactSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllPointOfContactSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllPointOfContactSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllPointOfContactSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllPointOfContactSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllPointOfContactSubjectSource) __premarshalJSON() (*__premarshalAllPointOfContactSubjectSource, error) {
	var retval __premarshalAllPointOfContactSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllSLSATree includes the GraphQL fields of HasSLSA requested by the fragment AllSLSATree.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type AllSLSATree struct {
	Id string `json:"id"`
	// The subject of SLSA attestation
	Subject AllSLSATreeSubjectArtifact `json:"subject"`
	// The SLSA attestation
	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

// GetId returns AllSLSATree.Id, and is useful for accessing the field via an interface.
func (v *AllSLSATree) GetId() string { return v.Id }

// GetSubject returns AllSLSATree.Subject, and is useful for accessing the field via an interface.
func (v *AllSLSATree) GetSubject() AllSLSATreeSubjectArtifact { return v.Subject }

// GetSlsa returns AllSLSATree.Slsa, and is useful for accessing the field via an interface.
func (v *AllSLSATree) GetSlsa() AllSLSATreeSlsaSLSA { return v.Slsa }

// AllSLSATreeSlsaSLSA includes the requested fields of the GraphQL type SLSA.
// The GraphQL type's documentation follows.
//
// SLSA contains all of the fields present in a SLSA attestation.
//
// The materials and builders are objects of the HasSLSA predicate, everything
// else are properties extracted from the attestation.
//
// We also include fields to specify under what conditions the check was performed
// (time of scan, version of scanners, etc.) as well as how this information got
// included into GUAC (origin document and the collector for that document).
type AllSLSATreeSlsaSLSA struct {
	// Materials of the build resulting in subject
	BuiltFrom []AllSLSATreeSlsaSLSABuiltFromArtifact `json:"builtFrom"`
	// Builder performing the build
	BuiltBy AllSLSATreeSlsaSLSABuiltByBuilder `json:"builtBy"`
	// Type of the builder
	BuildType string `json:"buildType"`
	// Individual predicates found in the attestation
	SlsaPredicate []AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate `json:"slsaPredicate"`
	// Version of the SLSA predicate
	SlsaVersion string `json:"slsaVersion"`
	// Timestamp (RFC3339Nano format) of build start time
	StartedOn *time.Time `json:"startedOn"`
	// Timestamp (RFC3339Nano format) of build end time
	FinishedOn *time.Time `json:"finishedOn"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetBuiltFrom returns AllSLSATreeSlsaSLSA.BuiltFrom, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetBuiltFrom() []AllSLSATreeSlsaSLSABuiltFromArtifact {
	return v.BuiltFrom
}

// GetBuiltBy returns AllSLSATreeSlsaSLSA.BuiltBy, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetBuiltBy() AllSLSATreeSlsaSLSABuiltByBuilder { return v.BuiltBy }

// GetBuildType returns AllSLSATreeSlsaSLSA.BuildType, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetBuildType() string { return v.BuildType }

// GetSlsaPredicate returns AllSLSATreeSlsaSLSA.SlsaPredicate, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetSlsaPredicate() []AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate {
	return v.SlsaPredicate
}

// GetSlsaVersion returns AllSLSATreeSlsaSLSA.SlsaVersion, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetSlsaVersion() string { return v.SlsaVersion }

// GetStartedOn returns AllSLSATreeSlsaSLSA.StartedOn, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetStartedOn() *time.Time { return v.StartedOn }

// GetFinishedOn returns AllSLSATreeSlsaSLSA.FinishedOn, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetFinishedOn() *time.Time { return v.FinishedOn }

// GetOrigin returns AllSLSATreeSlsaSLSA.Origin, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetOrigin() string { return v.Origin }

// GetCollector returns AllSLSATreeSlsaSLSA.Collector, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSA) GetCollector() string { return v.Collector }

// AllSLSATreeSlsaSLSABuiltByBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type AllSLSATreeSlsaSLSABuiltByBuilder struct {
	Id  string `json:"id"`
	Uri string `json:"uri"`
}

// GetId returns AllSLSATreeSlsaSLSABuiltByBuilder.Id, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSABuiltByBuilder) GetId() string { return v.Id }

// GetUri returns AllSLSATreeSlsaSLSABuiltByBuilder.Uri, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSABuiltByBuilder) GetUri() string { return v.Uri }

// AllSLSATreeSlsaSLSABuiltFromArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllSLSATreeSlsaSLSABuiltFromArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllSLSATreeSlsaSLSABuiltFromArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllSLSATreeSlsaSLSABuiltFromArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns AllSLSATreeSlsaSLSABuiltFromArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllSLSATreeSlsaSLSABuiltFromArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllSLSATreeSlsaSLSABuiltFromArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllSLSATreeSlsaSLSABuiltFromArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllSLSATreeSlsaSLSABuiltFromArtifact) __premarshalJSON() (*__premarshalAllSLSATreeSlsaSLSABuiltFromArtifact, error) {
	var retval __premarshalAllSLSATreeSlsaSLSABuiltFromArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate includes the requested fields of the GraphQL type SLSAPredicate.
// The GraphQL type's documentation follows.
//
// SLSAPredicate are the values from the SLSA predicate in key-value pair form.
//
// # For example, given the following predicate
//
// ```
// "predicate": {
// "buildDefinition": {
// "externalParameters": {
// "repository": "https://github.com/octocat/hello-world",
// ...
// },
// ...
// },
// ...
// }
// ```
//
// we have
//
// ```
// key   = "buildDefinition.externalParameters.repository"
// value = "https://github.com/octocat/hello-world"
// ```
//
// This node cannot be directly referred by other parts of GUAC.
type AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate.Key, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate) GetKey() string { return v.Key }

// GetValue returns AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate.Value, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSlsaSLSASlsaPredicateSLSAPredicate) GetValue() string { return v.Value }

// AllSLSATreeSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllSLSATreeSubjectArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllSLSATreeSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllSLSATreeSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllSLSATreeSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllSLSATreeSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllSLSATreeSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllSLSATreeSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllSLSATreeSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllSLSATreeSubjectArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllSLSATreeSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllSLSATreeSubjectArtifact) __premarshalJSON() (*__premarshalAllSLSATreeSubjectArtifact, error) {
	var retval __premarshalAllSLSATreeSubjectArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllSourceTree includes the GraphQL fields of Source requested by the fragment AllSourceTree.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllSourceTree struct {
	Id         string                                   `json:"id"`
	Type       string                                   `json:"type"`
	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

// GetId returns AllSourceTree.Id, and is useful for accessing the field via an interface.
func (v *AllSourceTree) GetId() string { return v.Id }

// GetType returns AllSourceTree.Type, and is useful for accessing the field via an interface.
func (v *AllSourceTree) GetType() string { return v.Type }

// GetNamespaces returns AllSourceTree.Namespaces, and is useful for accessing the field via an interface.
func (v *AllSourceTree) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace { return v.Namespaces }

// AllSourceTreeNamespacesSourceNamespace includes the requested fields of the GraphQL type SourceNamespace.
// The GraphQL type's documentation follows.
//
// SourceNamespace is a namespace for sources.
//
// This is the location of the repository (such as github/gitlab/bitbucket).
//
// The namespace field is mandatory.
type AllSourceTreeNamespacesSourceNamespace struct {
	Id        string                                                  `json:"id"`
	Namespace string                                                  `json:"namespace"`
	Names     []AllSourceTreeNamespacesSourceNamespaceNamesSourceName `json:"names"`
}

// GetId returns AllSourceTreeNamespacesSourceNamespace.Id, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespace) GetId() string { return v.Id }

// GetNamespace returns AllSourceTreeNamespacesSourceNamespace.Namespace, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespace) GetNamespace() string { return v.Namespace }

// GetNames returns AllSourceTreeNamespacesSourceNamespace.Names, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespace) GetNames() []AllSourceTreeNamespacesSourceNamespaceNamesSourceName {
	return v.Names
}

// AllSourceTreeNamespacesSourceNamespaceNamesSourceName includes the requested fields of the GraphQL type SourceName.
// The GraphQL type's documentation follows.
//
// SourceName represents the url of the repository.
//
// The name field is mandatory. The tag and commit fields are optional, but it is
// an error to specify both.
//
// This is the only source trie node that can be referenced by other parts of GUAC.
type AllSourceTreeNamespacesSourceNamespaceNamesSourceName struct {
	Id     string  `json:"id"`
	Name   string  `json:"name"`
	Tag    *string `json:"tag"`
	Commit *string `json:"commit"`
}

// GetId returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Id, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetId() string { return v.Id }

// GetName returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Name, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetName() string { return v.Name }

// GetTag returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Tag, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetTag() *string { return v.Tag }

// GetCommit returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Commit, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetCommit() *string { return v.Commit }

// AllVulnEqual includes the GraphQL fields of VulnEqual requested by the fragment AllVulnEqual.
// The GraphQL type's documentation follows.
//
// VulnEqual is an attestation to link two vulnerabilities together as being equal"
//
// Note that setting noVuln vulnerability type is invalid for VulnEqual!
type AllVulnEqual struct {
	Id string `json:"id"`
	// Two vulnerabilities that are similar
	Vulnerabilities []AllVulnEqualVulnerabilitiesVulnerability `json:"vulnerabilities"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllVulnEqual.Id, and is useful for accessing the field via an interface.
func (v *AllVulnEqual) GetId() string { return v.Id }

// GetVulnerabilities returns AllVulnEqual.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *AllVulnEqual) GetVulnerabilities() []AllVulnEqualVulnerabilitiesVulnerability {
	return v.Vulnerabilities
}

// GetJustification returns AllVulnEqual.Justification, and is useful for accessing the field via an interface.
func (v *AllVulnEqual) GetJustification() string { return v.Justification }

// GetOrigin returns AllVulnEqual.Origin, and is useful for accessing the field via an interface.
func (v *AllVulnEqual) GetOrigin() string { return v.Origin }

// GetCollector returns AllVulnEqual.Collector, and is useful for accessing the field via an interface.
func (v *AllVulnEqual) GetCollector() string { return v.Collector }

// AllVulnEqualVulnerabilitiesVulnerability includes the requested fields of the GraphQL type Vulnerability.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type AllVulnEqualVulnerabilitiesVulnerability struct {
	AllVulnerabilityTree `json:"-"`
}

// GetId returns AllVulnEqualVulnerabilitiesVulnerability.Id, and is useful for accessing the field via an interface.
func (v *AllVulnEqualVulnerabilitiesVulnerability) GetId() string { return v.AllVulnerabilityTree.Id }

// GetType returns AllVulnEqualVulnerabilitiesVulnerability.Type, and is useful for accessing the field via an interface.
func (v *AllVulnEqualVulnerabilitiesVulnerability) GetType() string {
	return v.AllVulnerabilityTree.Type
}

// GetVulnerabilityIDs returns AllVulnEqualVulnerabilitiesVulnerability.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *AllVulnEqualVulnerabilitiesVulnerability) GetVulnerabilityIDs() []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID {
	return v.AllVulnerabilityTree.VulnerabilityIDs
}

func (v *AllVulnEqualVulnerabilitiesVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllVulnEqualVulnerabilitiesVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.AllVulnEqualVulnerabilitiesVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnerabilityTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllVulnEqualVulnerabilitiesVulnerability struct {
	Id string `json:"id"`

	Type string `json:"type"`

	VulnerabilityIDs []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

func (v *AllVulnEqualVulnerabilitiesVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllVulnEqualVulnerabilitiesVulnerability) __premarshalJSON() (*__premarshalAllVulnEqualVulnerabilitiesVulnerability, error) {
	var retval __premarshalAllVulnEqualVulnerabilitiesVulnerability

	retval.Id = v.AllVulnerabilityTree.Id
	retval.Type = v.AllVulnerabilityTree.Type
	retval.VulnerabilityIDs = v.AllVulnerabilityTree.VulnerabilityIDs
	return &retval, nil
}

// AllVulnMetadataTree includes the GraphQL fields of VulnerabilityMetadata requested by the fragment AllVulnMetadataTree.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetadata is an attestation that a vulnerability has a related score
// associated with it.
//
// The intent of this evidence tree predicate is to allow extensibility of vulnerability
// score (one-to-one mapping) with a specific vulnerability ID.
//
// A vulnerability ID can have a one-to-many relationship with the VulnerabilityMetadata
// node as a vulnerability ID can have multiple scores (in various frameworks).
//
// Examples:
//
// scoreType: EPSSv1
// scoreValue: 0.960760000
//
// scoreType: CVSSv2
// scoreValue: 5.0
//
// scoreType: CVSSv3
// scoreValue: 7.5
//
// The timestamp is used to determine when the score was evaluated for the specific vulnerability.
type AllVulnMetadataTree struct {
	Id string `json:"id"`
	// The subject vulnerability that the metadata applies to
	Vulnerability AllVulnMetadataTreeVulnerability `json:"vulnerability"`
	// The specific score type for the score value
	ScoreType VulnerabilityScoreType `json:"scoreType"`
	// The score value based on the score type
	ScoreValue float64 `json:"scoreValue"`
	// Timestamp when the certification was created (in RFC 3339 format)
	Timestamp time.Time `json:"timestamp"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllVulnMetadataTree.Id, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTree) GetId() string { return v.Id }

// GetVulnerability returns AllVulnMetadataTree.Vulnerability, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTree) GetVulnerability() AllVulnMetadataTreeVulnerability {
	return v.Vulnerability
}

// GetScoreType returns AllVulnMetadataTree.ScoreType, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTree) GetScoreType() VulnerabilityScoreType { return v.ScoreType }

// GetScoreValue returns AllVulnMetadataTree.ScoreValue, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTree) GetScoreValue() float64 { return v.ScoreValue }

// GetTimestamp returns AllVulnMetadataTree.Timestamp, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTree) GetTimestamp() time.Time { return v.Timestamp }

// GetOrigin returns AllVulnMetadataTree.Origin, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllVulnMetadataTree.Collector, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTree) GetCollector() string { return v.Collector }

// AllVulnMetadataTreeVulnerability includes the requested fields of the GraphQL type Vulnerability.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type AllVulnMetadataTreeVulnerability struct {
	Id               string                                                            `json:"id"`
	Type             string                                                            `json:"type"`
	VulnerabilityIDs []AllVulnMetadataTreeVulnerabilityVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

// GetId returns AllVulnMetadataTreeVulnerability.Id, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTreeVulnerability) GetId() string { return v.Id }

// GetType returns AllVulnMetadataTreeVulnerability.Type, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTreeVulnerability) GetType() string { return v.Type }

// GetVulnerabilityIDs returns AllVulnMetadataTreeVulnerability.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTreeVulnerability) GetVulnerabilityIDs() []AllVulnMetadataTreeVulnerabilityVulnerabilityIDsVulnerabilityID {
	return v.VulnerabilityIDs
}

// AllVulnMetadataTreeVulnerabilityVulnerabilityIDsVulnerabilityID includes the requested fields of the GraphQL type VulnerabilityID.
// The GraphQL type's documentation follows.
//
// VulnerabilityID is a specific vulnerability ID associated with the type of the vulnerability.
//
// This will be enforced to be all lowercase.
//
// The namespace field is mandatory.
type AllVulnMetadataTreeVulnerabilityVulnerabilityIDsVulnerabilityID struct {
	Id              string `json:"id"`
	VulnerabilityID string `json:"vulnerabilityID"`
}

// GetId returns AllVulnMetadataTreeVulnerabilityVulnerabilityIDsVulnerabilityID.Id, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTreeVulnerabilityVulnerabilityIDsVulnerabilityID) GetId() string { return v.Id }

// GetVulnerabilityID returns AllVulnMetadataTreeVulnerabilityVulnerabilityIDsVulnerabilityID.VulnerabilityID, and is useful for accessing the field via an interface.
func (v *AllVulnMetadataTreeVulnerabilityVulnerabilityIDsVulnerabilityID) GetVulnerabilityID() string {
	return v.VulnerabilityID
}

// AllVulnerabilityTree includes the GraphQL fields of Vulnerability requested by the fragment AllVulnerabilityTree.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type AllVulnerabilityTree struct {
	Id               string                                                `json:"id"`
	Type             string                                                `json:"type"`
	VulnerabilityIDs []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

// GetId returns AllVulnerabilityTree.Id, and is useful for accessing the field via an interface.
func (v *AllVulnerabilityTree) GetId() string { return v.Id }

// GetType returns AllVulnerabilityTree.Type, and is useful for accessing the field via an interface.
func (v *AllVulnerabilityTree) GetType() string { return v.Type }

// GetVulnerabilityIDs returns AllVulnerabilityTree.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *AllVulnerabilityTree) GetVulnerabilityIDs() []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID {
	return v.VulnerabilityIDs
}

// AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID includes the requested fields of the GraphQL type VulnerabilityID.
// The GraphQL type's documentation follows.
//
// VulnerabilityID is a specific vulnerability ID associated with the type of the vulnerability.
//
// This will be enforced to be all lowercase.
//
// The namespace field is mandatory.
type AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID struct {
	Id              string `json:"id"`
	VulnerabilityID string `json:"vulnerabilityID"`
}

// GetId returns AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID.Id, and is useful for accessing the field via an interface.
func (v *AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID) GetId() string { return v.Id }

// GetVulnerabilityID returns AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID.VulnerabilityID, and is useful for accessing the field via an interface.
func (v *AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID) GetVulnerabilityID() string {
	return v.VulnerabilityID
}

// ArtifactInputSpec specifies an artifact for mutations.
//
// The checksum fields are canonicalized to be lowercase.
type ArtifactInputSpec struct {
	Algorithm string `json:"algorithm"`
	Digest    string `json:"digest"`
}

// GetAlgorithm returns ArtifactInputSpec.Algorithm, and is useful for accessing the field via an interface.
func (v *ArtifactInputSpec) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns ArtifactInputSpec.Digest, and is useful for accessing the field via an interface.
func (v *ArtifactInputSpec) GetDigest() string { return v.Digest }

// ArtifactSpec allows filtering the list of artifacts to return in a query.
//
// The checksum fields are canonicalized to be lowercase.
type ArtifactSpec struct {
	Id        *string `json:"id"`
	Algorithm *string `json:"algorithm"`
	Digest    *string `json:"digest"`
}

// GetId returns ArtifactSpec.Id, and is useful for accessing the field via an interface.
func (v *ArtifactSpec) GetId() *string { return v.Id }

// GetAlgorithm returns ArtifactSpec.Algorithm, and is useful for accessing the field via an interface.
func (v *ArtifactSpec) GetAlgorithm() *string { return v.Algorithm }

// GetDigest returns ArtifactSpec.Digest, and is useful for accessing the field via an interface.
func (v *ArtifactSpec) GetDigest() *string { return v.Digest }

// ArtifactsArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type ArtifactsArtifactsArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns ArtifactsArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *ArtifactsArtifactsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns ArtifactsArtifactsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *ArtifactsArtifactsArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns ArtifactsArtifactsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *ArtifactsArtifactsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *ArtifactsArtifactsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ArtifactsArtifactsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.ArtifactsArtifactsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalArtifactsArtifactsArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *ArtifactsArtifactsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ArtifactsArtifactsArtifact) __premarshalJSON() (*__premarshalArtifactsArtifactsArtifact, error) {
	var retval __premarshalArtifactsArtifactsArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// ArtifactsListArtifactsListArtifactConnection includes the requested fields of the GraphQL type ArtifactConnection.
// The GraphQL type's documentation follows.
//
// ArtifactConnection returns the paginated results for artifact.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the ArtifactEdge which contains the current cursor
// and the artifact node itself
type ArtifactsListArtifactsListArtifactConnection struct {
	TotalCount int                                                             `json:"totalCount"`
	Edges      []ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdge `json:"edges"`
	PageInfo   ArtifactsListArtifactsListArtifactConnectionPageInfo            `json:"pageInfo"`
}

// GetTotalCount returns ArtifactsListArtifactsListArtifactConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns ArtifactsListArtifactsListArtifactConnection.Edges, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnection) GetEdges() []ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdge {
	return v.Edges
}

// GetPageInfo returns ArtifactsListArtifactsListArtifactConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnection) GetPageInfo() ArtifactsListArtifactsListArtifactConnectionPageInfo {
	return v.PageInfo
}

// ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdge includes the requested fields of the GraphQL type ArtifactEdge.
// The GraphQL type's documentation follows.
//
// ArtifactEdge contains the cursor for the resulting node and
// the artifact node itself.
type ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdge struct {
	Cursor string                                                                    `json:"cursor"`
	Node   ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact `json:"node"`
}

// GetCursor returns ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdge.Cursor, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdge.Node, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdge) GetNode() ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact {
	return v.Node
}

// ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact.Id, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact) GetId() string {
	return v.AllArtifactTree.Id
}

// GetAlgorithm returns ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact.Digest, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact) GetDigest() string {
	return v.AllArtifactTree.Digest
}

func (v *ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact) __premarshalJSON() (*__premarshalArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact, error) {
	var retval __premarshalArtifactsListArtifactsListArtifactConnectionEdgesArtifactEdgeNodeArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// ArtifactsListArtifactsListArtifactConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type ArtifactsListArtifactsListArtifactConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns ArtifactsListArtifactsListArtifactConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns ArtifactsListArtifactsListArtifactConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns ArtifactsListArtifactsListArtifactConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ArtifactsListArtifactsListArtifactConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// ArtifactsListResponse is returned by ArtifactsList on success.
type ArtifactsListResponse struct {
	// Returns a paginated results via ArtifactConnection
	ArtifactsList *ArtifactsListArtifactsListArtifactConnection `json:"artifactsList"`
}

// GetArtifactsList returns ArtifactsListResponse.ArtifactsList, and is useful for accessing the field via an interface.
func (v *ArtifactsListResponse) GetArtifactsList() *ArtifactsListArtifactsListArtifactConnection {
	return v.ArtifactsList
}

// ArtifactsResponse is returned by Artifacts on success.
type ArtifactsResponse struct {
	// Returns all artifacts matching a filter.
	Artifacts []ArtifactsArtifactsArtifact `json:"artifacts"`
}

// GetArtifacts returns ArtifactsResponse.Artifacts, and is useful for accessing the field via an interface.
func (v *ArtifactsResponse) GetArtifacts() []ArtifactsArtifactsArtifact { return v.Artifacts }

// BuilderInputSpec specifies a builder for mutations.
type BuilderInputSpec struct {
	Uri string `json:"uri"`
}

// GetUri returns BuilderInputSpec.Uri, and is useful for accessing the field via an interface.
func (v *BuilderInputSpec) GetUri() string { return v.Uri }

// BuilderSpec allows filtering the list of builders to return in a query.
type BuilderSpec struct {
	Id  *string `json:"id"`
	Uri *string `json:"uri"`
}

// GetId returns BuilderSpec.Id, and is useful for accessing the field via an interface.
func (v *BuilderSpec) GetId() *string { return v.Id }

// GetUri returns BuilderSpec.Uri, and is useful for accessing the field via an interface.
func (v *BuilderSpec) GetUri() *string { return v.Uri }

// BuildersBuildersBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type BuildersBuildersBuilder struct {
	AllBuilderTree `json:"-"`
}

// GetId returns BuildersBuildersBuilder.Id, and is useful for accessing the field via an interface.
func (v *BuildersBuildersBuilder) GetId() string { return v.AllBuilderTree.Id }

// GetUri returns BuildersBuildersBuilder.Uri, and is useful for accessing the field via an interface.
func (v *BuildersBuildersBuilder) GetUri() string { return v.AllBuilderTree.Uri }

func (v *BuildersBuildersBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BuildersBuildersBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.BuildersBuildersBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBuildersBuildersBuilder struct {
	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *BuildersBuildersBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BuildersBuildersBuilder) __premarshalJSON() (*__premarshalBuildersBuildersBuilder, error) {
	var retval __premarshalBuildersBuildersBuilder

	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// BuildersListBuildersListBuilderConnection includes the requested fields of the GraphQL type BuilderConnection.
// The GraphQL type's documentation follows.
//
// BuilderConnection returns the paginated results for builder.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the BuilderEdge which contains the current cursor
// and the Builder node itself
type BuildersListBuildersListBuilderConnection struct {
	TotalCount int                                                         `json:"totalCount"`
	Edges      []BuildersListBuildersListBuilderConnectionEdgesBuilderEdge `json:"edges"`
	PageInfo   BuildersListBuildersListBuilderConnectionPageInfo           `json:"pageInfo"`
}

// GetTotalCount returns BuildersListBuildersListBuilderConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *BuildersListBuildersListBuilderConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns BuildersListBuildersListBuilderConnection.Edges, and is useful for accessing the field via an interface.
func (v *BuildersListBuildersListBuilderConnection) GetEdges() []BuildersListBuildersListBuilderConnectionEdgesBuilderEdge {
	return v.Edges
}

// GetPageInfo returns BuildersListBuildersListBuilderConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *BuildersListBuildersListBuilderConnection) GetPageInfo() BuildersListBuildersListBuilderConnectionPageInfo {
	return v.PageInfo
}

// BuildersListBuildersListBuilderConnectionEdgesBuilderEdge includes the requested fields of the GraphQL type BuilderEdge.
// The GraphQL type's documentation follows.
//
// BuilderEdge contains the cursor for the resulting node and
// the Builder node itself.
type BuildersListBuildersListBuilderConnectionEdgesBuilderEdge struct {
	Cursor string                                                               `json:"cursor"`
	Node   BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder `json:"node"`
}

// GetCursor returns BuildersListBuildersListBuilderConnectionEdgesBuilderEdge.Cursor, and is useful for accessing the field via an interface.
func (v *BuildersListBuildersListBuilderConnectionEdgesBuilderEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns BuildersListBuildersListBuilderConnectionEdgesBuilderEdge.Node, and is useful for accessing the field via an interface.
func (v *BuildersListBuildersListBuilderConnectionEdgesBuilderEdge) GetNode() BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder {
	return v.Node
}

// BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder struct {
	AllBuilderTree `json:"-"`
}

// GetId returns BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder.Id, and is useful for accessing the field via an interface.
func (v *BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder) GetId() string {
	return v.AllBuilderTree.Id
}

// GetUri returns BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder.Uri, and is useful for accessing the field via an interface.
func (v *BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder) GetUri() string {
	return v.AllBuilderTree.Uri
}

func (v *BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder struct {
	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder) __premarshalJSON() (*__premarshalBuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder, error) {
	var retval __premarshalBuildersListBuildersListBuilderConnectionEdgesBuilderEdgeNodeBuilder

	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// BuildersListBuildersListBuilderConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type BuildersListBuildersListBuilderConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns BuildersListBuildersListBuilderConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *BuildersListBuildersListBuilderConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns BuildersListBuildersListBuilderConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *BuildersListBuildersListBuilderConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns BuildersListBuildersListBuilderConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *BuildersListBuildersListBuilderConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// BuildersListResponse is returned by BuildersList on success.
type BuildersListResponse struct {
	// Returns a paginated results via BuilderConnection
	BuildersList *BuildersListBuildersListBuilderConnection `json:"buildersList"`
}

// GetBuildersList returns BuildersListResponse.BuildersList, and is useful for accessing the field via an interface.
func (v *BuildersListResponse) GetBuildersList() *BuildersListBuildersListBuilderConnection {
	return v.BuildersList
}

// BuildersResponse is returned by Builders on success.
type BuildersResponse struct {
	// Returns all builders matching a filter.
	Builders []BuildersBuildersBuilder `json:"builders"`
}

// GetBuilders returns BuildersResponse.Builders, and is useful for accessing the field via an interface.
func (v *BuildersResponse) GetBuilders() []BuildersBuildersBuilder { return v.Builders }

// CertifyBadCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyBadCertifyBad struct {
	AllCertifyBad `json:"-"`
}

// GetId returns CertifyBadCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns CertifyBadCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetKnownSince returns CertifyBadCertifyBad.KnownSince, and is useful for accessing the field via an interface.
func (v *CertifyBadCertifyBad) GetKnownSince() time.Time { return v.AllCertifyBad.KnownSince }

// GetSubject returns CertifyBadCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns CertifyBadCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns CertifyBadCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *CertifyBadCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyBadCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadCertifyBad) __premarshalJSON() (*__premarshalCertifyBadCertifyBad, error) {
	var retval __premarshalCertifyBadCertifyBad

	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	retval.KnownSince = v.AllCertifyBad.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyBadCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// CertifyBadInputSpec represents the mutation input to ingest a CertifyBad
// evidence.
type CertifyBadInputSpec struct {
	Justification string    `json:"justification"`
	KnownSince    time.Time `json:"knownSince"`
	Origin        string    `json:"origin"`
	Collector     string    `json:"collector"`
	DocumentRef   string    `json:"documentRef"`
}

// GetJustification returns CertifyBadInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetJustification() string { return v.Justification }

// GetKnownSince returns CertifyBadInputSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetKnownSince() time.Time { return v.KnownSince }

// GetOrigin returns CertifyBadInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns CertifyBadInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns CertifyBadInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetDocumentRef() string { return v.DocumentRef }

// CertifyBadListCertifyBadListCertifyBadConnection includes the requested fields of the GraphQL type CertifyBadConnection.
// The GraphQL type's documentation follows.
//
// CertifyBadConnection returns the paginated results for CertifyBad.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the CertifyBadEdge which contains the current cursor
// and the CertifyBad node itself
type CertifyBadListCertifyBadListCertifyBadConnection struct {
	TotalCount int                                                                   `json:"totalCount"`
	Edges      []CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdge `json:"edges"`
	PageInfo   CertifyBadListCertifyBadListCertifyBadConnectionPageInfo              `json:"pageInfo"`
}

// GetTotalCount returns CertifyBadListCertifyBadListCertifyBadConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns CertifyBadListCertifyBadListCertifyBadConnection.Edges, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnection) GetEdges() []CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdge {
	return v.Edges
}

// GetPageInfo returns CertifyBadListCertifyBadListCertifyBadConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnection) GetPageInfo() CertifyBadListCertifyBadListCertifyBadConnectionPageInfo {
	return v.PageInfo
}

// CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdge includes the requested fields of the GraphQL type CertifyBadEdge.
// The GraphQL type's documentation follows.
//
// CertifyBadEdge contains the cursor for the resulting node and
// the CertifyBad node itself.
type CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdge struct {
	Cursor string                                                                            `json:"cursor"`
	Node   CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad `json:"node"`
}

// GetCursor returns CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdge.Cursor, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdge.Node, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdge) GetNode() CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad {
	return v.Node
}

// CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad struct {
	AllCertifyBad `json:"-"`
}

// GetId returns CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad) GetId() string {
	return v.AllCertifyBad.Id
}

// GetJustification returns CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad) GetJustification() string {
	return v.AllCertifyBad.Justification
}

// GetKnownSince returns CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad.KnownSince, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad) GetKnownSince() time.Time {
	return v.AllCertifyBad.KnownSince
}

// GetSubject returns CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad) GetOrigin() string {
	return v.AllCertifyBad.Origin
}

// GetCollector returns CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad) GetCollector() string {
	return v.AllCertifyBad.Collector
}

func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad) __premarshalJSON() (*__premarshalCertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad, error) {
	var retval __premarshalCertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad

	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	retval.KnownSince = v.AllCertifyBad.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyBadListCertifyBadListCertifyBadConnectionEdgesCertifyBadEdgeNodeCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// CertifyBadListCertifyBadListCertifyBadConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type CertifyBadListCertifyBadListCertifyBadConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns CertifyBadListCertifyBadListCertifyBadConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns CertifyBadListCertifyBadListCertifyBadConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns CertifyBadListCertifyBadListCertifyBadConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *CertifyBadListCertifyBadListCertifyBadConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// CertifyBadListResponse is returned by CertifyBadList on success.
type CertifyBadListResponse struct {
	// Returns a paginated results via CertifyBadConnection
	CertifyBadList *CertifyBadListCertifyBadListCertifyBadConnection `json:"CertifyBadList"`
}

// GetCertifyBadList returns CertifyBadListResponse.CertifyBadList, and is useful for accessing the field via an interface.
func (v *CertifyBadListResponse) GetCertifyBadList() *CertifyBadListCertifyBadListCertifyBadConnection {
	return v.CertifyBadList
}

// CertifyBadResponse is returned by CertifyBad on success.
type CertifyBadResponse struct {
	// Returns all CertifyBad attestations matching a filter.
	CertifyBad []CertifyBadCertifyBad `json:"CertifyBad"`
}

// GetCertifyBad returns CertifyBadResponse.CertifyBad, and is useful for accessing the field via an interface.
func (v *CertifyBadResponse) GetCertifyBad() []CertifyBadCertifyBad { return v.CertifyBad }

// CertifyBadSpec allows filtering the list of CertifyBad evidence to return in a
// query.
//
// If a package is specified in the subject filter, then it must be specified up
// to PackageName or PackageVersion. That is, user must specify package name, or
// name and one of version, qualifiers, or subpath.
//
// If a source is specified in the subject filter, then it must specify a name,
// and optionally a tag and a commit.
//
// If KnownSince is specified, the returned value will be after or equal to the specified time.
// Any nodes time that is before KnownSince is excluded.
type CertifyBadSpec struct {
	Id            *string                      `json:"id"`
	Subject       *PackageSourceOrArtifactSpec `json:"subject"`
	Justification *string                      `json:"justification"`
	KnownSince    *time.Time                   `json:"knownSince"`
	Origin        *string                      `json:"origin"`
	Collector     *string                      `json:"collector"`
	DocumentRef   *string                      `json:"documentRef"`
}

// GetId returns CertifyBadSpec.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetId() *string { return v.Id }

// GetSubject returns CertifyBadSpec.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetSubject() *PackageSourceOrArtifactSpec { return v.Subject }

// GetJustification returns CertifyBadSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetJustification() *string { return v.Justification }

// GetKnownSince returns CertifyBadSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetKnownSince() *time.Time { return v.KnownSince }

// GetOrigin returns CertifyBadSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns CertifyBadSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns CertifyBadSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetDocumentRef() *string { return v.DocumentRef }

// CertifyGoodCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyGoodCertifyGood struct {
	AllCertifyGood `json:"-"`
}

// GetId returns CertifyGoodCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns CertifyGoodCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodCertifyGood) GetJustification() string { return v.AllCertifyGood.Justification }

// GetKnownSince returns CertifyGoodCertifyGood.KnownSince, and is useful for accessing the field via an interface.
func (v *CertifyGoodCertifyGood) GetKnownSince() time.Time { return v.AllCertifyGood.KnownSince }

// GetSubject returns CertifyGoodCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *CertifyGoodCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns CertifyGoodCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns CertifyGoodCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *CertifyGoodCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyGoodCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodCertifyGood) __premarshalJSON() (*__premarshalCertifyGoodCertifyGood, error) {
	var retval __premarshalCertifyGoodCertifyGood

	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	retval.KnownSince = v.AllCertifyGood.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyGoodCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// CertifyGoodInputSpec represents the mutation input to ingest a CertifyGood evidence.
type CertifyGoodInputSpec struct {
	Justification string    `json:"justification"`
	KnownSince    time.Time `json:"knownSince"`
	Origin        string    `json:"origin"`
	Collector     string    `json:"collector"`
	DocumentRef   string    `json:"documentRef"`
}

// GetJustification returns CertifyGoodInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetJustification() string { return v.Justification }

// GetKnownSince returns CertifyGoodInputSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetKnownSince() time.Time { return v.KnownSince }

// GetOrigin returns CertifyGoodInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns CertifyGoodInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns CertifyGoodInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetDocumentRef() string { return v.DocumentRef }

// CertifyGoodListCertifyGoodListCertifyGoodConnection includes the requested fields of the GraphQL type CertifyGoodConnection.
// The GraphQL type's documentation follows.
//
// CertifyGoodConnection returns the paginated results for CertifyGood.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the CertifyGoodEdge which contains the current cursor
// and the CertifyGood node itself
type CertifyGoodListCertifyGoodListCertifyGoodConnection struct {
	TotalCount int                                                                       `json:"totalCount"`
	Edges      []CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdge `json:"edges"`
	PageInfo   CertifyGoodListCertifyGoodListCertifyGoodConnectionPageInfo               `json:"pageInfo"`
}

// GetTotalCount returns CertifyGoodListCertifyGoodListCertifyGoodConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns CertifyGoodListCertifyGoodListCertifyGoodConnection.Edges, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnection) GetEdges() []CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdge {
	return v.Edges
}

// GetPageInfo returns CertifyGoodListCertifyGoodListCertifyGoodConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnection) GetPageInfo() CertifyGoodListCertifyGoodListCertifyGoodConnectionPageInfo {
	return v.PageInfo
}

// CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdge includes the requested fields of the GraphQL type CertifyGoodEdge.
// The GraphQL type's documentation follows.
//
// CertifyGoodEdge contains the cursor for the resulting node and
// the CertifyGood node itself.
type CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdge struct {
	Cursor string                                                                                 `json:"cursor"`
	Node   CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood `json:"node"`
}

// GetCursor returns CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdge.Cursor, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdge.Node, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdge) GetNode() CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood {
	return v.Node
}

// CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood struct {
	AllCertifyGood `json:"-"`
}

// GetId returns CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood) GetId() string {
	return v.AllCertifyGood.Id
}

// GetJustification returns CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood) GetJustification() string {
	return v.AllCertifyGood.Justification
}

// GetKnownSince returns CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood.KnownSince, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood) GetKnownSince() time.Time {
	return v.AllCertifyGood.KnownSince
}

// GetSubject returns CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood) GetOrigin() string {
	return v.AllCertifyGood.Origin
}

// GetCollector returns CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood) GetCollector() string {
	return v.AllCertifyGood.Collector
}

func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood) __premarshalJSON() (*__premarshalCertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood, error) {
	var retval __premarshalCertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood

	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	retval.KnownSince = v.AllCertifyGood.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyGoodListCertifyGoodListCertifyGoodConnectionEdgesCertifyGoodEdgeNodeCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// CertifyGoodListCertifyGoodListCertifyGoodConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type CertifyGoodListCertifyGoodListCertifyGoodConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns CertifyGoodListCertifyGoodListCertifyGoodConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns CertifyGoodListCertifyGoodListCertifyGoodConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns CertifyGoodListCertifyGoodListCertifyGoodConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *CertifyGoodListCertifyGoodListCertifyGoodConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// CertifyGoodListResponse is returned by CertifyGoodList on success.
type CertifyGoodListResponse struct {
	// Returns a paginated results via CertifyGoodConnection
	CertifyGoodList *CertifyGoodListCertifyGoodListCertifyGoodConnection `json:"CertifyGoodList"`
}

// GetCertifyGoodList returns CertifyGoodListResponse.CertifyGoodList, and is useful for accessing the field via an interface.
func (v *CertifyGoodListResponse) GetCertifyGoodList() *CertifyGoodListCertifyGoodListCertifyGoodConnection {
	return v.CertifyGoodList
}

// CertifyGoodResponse is returned by CertifyGood on success.
type CertifyGoodResponse struct {
	// Returns all CertifyGood attestations matching a filter.
	CertifyGood []CertifyGoodCertifyGood `json:"CertifyGood"`
}

// GetCertifyGood returns CertifyGoodResponse.CertifyGood, and is useful for accessing the field via an interface.
func (v *CertifyGoodResponse) GetCertifyGood() []CertifyGoodCertifyGood { return v.CertifyGood }

// CertifyBadSpec allows filtering the list of CertifyBad evidence to return in a
// query.
//
// If a package is specified in the subject filter, then it must be specified up
// to PackageName or PackageVersion. That is, user must specify package name, or
// name and one of version, qualifiers, or subpath.
//
// If a source is specified in the subject filter, then it must specify a name,
// and optionally a tag and a commit.
//
// If KnownSince is specified, the returned value will be after or equal to the specified time.
// Any nodes time that is before KnownSince is excluded.
type CertifyGoodSpec struct {
	Id            *string                      `json:"id"`
	Subject       *PackageSourceOrArtifactSpec `json:"subject"`
	Justification *string                      `json:"justification"`
	KnownSince    *time.Time                   `json:"knownSince"`
	Origin        *string                      `json:"origin"`
	Collector     *string                      `json:"collector"`
	DocumentRef   *string                      `json:"documentRef"`
}

// GetId returns CertifyGoodSpec.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodSpec) GetId() *string { return v.Id }

// GetSubject returns CertifyGoodSpec.Subject, and is useful for accessing the field via an interface.
func (v *CertifyGoodSpec) GetSubject() *PackageSourceOrArtifactSpec { return v.Subject }

// GetJustification returns CertifyGoodSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodSpec) GetJustification() *string { return v.Justification }

// GetKnownSince returns CertifyGoodSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *CertifyGoodSpec) GetKnownSince() *time.Time { return v.KnownSince }

// GetOrigin returns CertifyGoodSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns CertifyGoodSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns CertifyGoodSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *CertifyGoodSpec) GetDocumentRef() *string { return v.DocumentRef }

// CertifyLegalCertifyLegal includes the requested fields of the GraphQL type CertifyLegal.
// The GraphQL type's documentation follows.
//
// CertifyLegal is an attestation to attach legal information to a package or source.
//
// The certification information is either copied from an attestation found in an
// SBOM or created by a collector/scanner.
//
// Discovered license is also known as Concluded. More information:
// https://docs.clearlydefined.io/curation-guidelines#the-difference-between-declared-and-discovered-licenses
//
// Attribution is also known as Copyright Text. It is what could be displayed to
// comply with notice
// requirements. https://www.nexb.com/oss-attribution-best-practices/
//
// License expressions follow this format:
// https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/
type CertifyLegalCertifyLegal struct {
	AllCertifyLegalTree `json:"-"`
}

// GetId returns CertifyLegalCertifyLegal.Id, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetId() string { return v.AllCertifyLegalTree.Id }

// GetSubject returns CertifyLegalCertifyLegal.Subject, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetSubject() AllCertifyLegalTreeSubjectPackageOrSource {
	return v.AllCertifyLegalTree.Subject
}

// GetDeclaredLicense returns CertifyLegalCertifyLegal.DeclaredLicense, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetDeclaredLicense() string {
	return v.AllCertifyLegalTree.DeclaredLicense
}

// GetDeclaredLicenses returns CertifyLegalCertifyLegal.DeclaredLicenses, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetDeclaredLicenses() []AllCertifyLegalTreeDeclaredLicensesLicense {
	return v.AllCertifyLegalTree.DeclaredLicenses
}

// GetDiscoveredLicense returns CertifyLegalCertifyLegal.DiscoveredLicense, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetDiscoveredLicense() string {
	return v.AllCertifyLegalTree.DiscoveredLicense
}

// GetDiscoveredLicenses returns CertifyLegalCertifyLegal.DiscoveredLicenses, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetDiscoveredLicenses() []AllCertifyLegalTreeDiscoveredLicensesLicense {
	return v.AllCertifyLegalTree.DiscoveredLicenses
}

// GetAttribution returns CertifyLegalCertifyLegal.Attribution, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetAttribution() string { return v.AllCertifyLegalTree.Attribution }

// GetJustification returns CertifyLegalCertifyLegal.Justification, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetJustification() string {
	return v.AllCertifyLegalTree.Justification
}

// GetTimeScanned returns CertifyLegalCertifyLegal.TimeScanned, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetTimeScanned() time.Time {
	return v.AllCertifyLegalTree.TimeScanned
}

// GetOrigin returns CertifyLegalCertifyLegal.Origin, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetOrigin() string { return v.AllCertifyLegalTree.Origin }

// GetCollector returns CertifyLegalCertifyLegal.Collector, and is useful for accessing the field via an interface.
func (v *CertifyLegalCertifyLegal) GetCollector() string { return v.AllCertifyLegalTree.Collector }

func (v *CertifyLegalCertifyLegal) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyLegalCertifyLegal
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyLegalCertifyLegal = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyLegalTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyLegalCertifyLegal struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	DeclaredLicense string `json:"declaredLicense"`

	DeclaredLicenses []AllCertifyLegalTreeDeclaredLicensesLicense `json:"declaredLicenses"`

	DiscoveredLicense string `json:"discoveredLicense"`

	DiscoveredLicenses []AllCertifyLegalTreeDiscoveredLicensesLicense `json:"discoveredLicenses"`

	Attribution string `json:"attribution"`

	Justification string `json:"justification"`

	TimeScanned time.Time `json:"timeScanned"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyLegalCertifyLegal) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyLegalCertifyLegal) __premarshalJSON() (*__premarshalCertifyLegalCertifyLegal, error) {
	var retval __premarshalCertifyLegalCertifyLegal

	retval.Id = v.AllCertifyLegalTree.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyLegalTree.Subject
		var err error
		*dst, err = __marshalAllCertifyLegalTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyLegalCertifyLegal.AllCertifyLegalTree.Subject: %w", err)
		}
	}
	retval.DeclaredLicense = v.AllCertifyLegalTree.DeclaredLicense
	retval.DeclaredLicenses = v.AllCertifyLegalTree.DeclaredLicenses
	retval.DiscoveredLicense = v.AllCertifyLegalTree.DiscoveredLicense
	retval.DiscoveredLicenses = v.AllCertifyLegalTree.DiscoveredLicenses
	retval.Attribution = v.AllCertifyLegalTree.Attribution
	retval.Justification = v.AllCertifyLegalTree.Justification
	retval.TimeScanned = v.AllCertifyLegalTree.TimeScanned
	retval.Origin = v.AllCertifyLegalTree.Origin
	retval.Collector = v.AllCertifyLegalTree.Collector
	return &retval, nil
}

// CertifyLegalInputSpec represents the input for certifying legal information in
// mutations.
type CertifyLegalInputSpec struct {
	DeclaredLicense   string    `json:"declaredLicense"`
	DiscoveredLicense string    `json:"discoveredLicense"`
	Attribution       string    `json:"attribution"`
	Justification     string    `json:"justification"`
	TimeScanned       time.Time `json:"timeScanned"`
	Origin            string    `json:"origin"`
	Collector         string    `json:"collector"`
	DocumentRef       string    `json:"documentRef"`
}

// GetDeclaredLicense returns CertifyLegalInputSpec.DeclaredLicense, and is useful for accessing the field via an interface.
func (v *CertifyLegalInputSpec) GetDeclaredLicense() string { return v.DeclaredLicense }

// GetDiscoveredLicense returns CertifyLegalInputSpec.DiscoveredLicense, and is useful for accessing the field via an interface.
func (v *CertifyLegalInputSpec) GetDiscoveredLicense() string { return v.DiscoveredLicense }

// GetAttribution returns CertifyLegalInputSpec.Attribution, and is useful for accessing the field via an interface.
func (v *CertifyLegalInputSpec) GetAttribution() string { return v.Attribution }

// GetJustification returns CertifyLegalInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyLegalInputSpec) GetJustification() string { return v.Justification }

// GetTimeScanned returns CertifyLegalInputSpec.TimeScanned, and is useful for accessing the field via an interface.
func (v *CertifyLegalInputSpec) GetTimeScanned() time.Time { return v.TimeScanned }

// GetOrigin returns CertifyLegalInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyLegalInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns CertifyLegalInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyLegalInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns CertifyLegalInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *CertifyLegalInputSpec) GetDocumentRef() string { return v.DocumentRef }

// CertifyLegalListCertifyLegalListCertifyLegalConnection includes the requested fields of the GraphQL type CertifyLegalConnection.
// The GraphQL type's documentation follows.
//
// CertifyLegalConnection returns the paginated results for CertifyLegal.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the CertifyLegalEdge which contains the current cursor
// and the CertifyLegal node itself
type CertifyLegalListCertifyLegalListCertifyLegalConnection struct {
	TotalCount int                                                                           `json:"totalCount"`
	Edges      []CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdge `json:"edges"`
	PageInfo   CertifyLegalListCertifyLegalListCertifyLegalConnectionPageInfo                `json:"pageInfo"`
}

// GetTotalCount returns CertifyLegalListCertifyLegalListCertifyLegalConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns CertifyLegalListCertifyLegalListCertifyLegalConnection.Edges, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnection) GetEdges() []CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdge {
	return v.Edges
}

// GetPageInfo returns CertifyLegalListCertifyLegalListCertifyLegalConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnection) GetPageInfo() CertifyLegalListCertifyLegalListCertifyLegalConnectionPageInfo {
	return v.PageInfo
}

// CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdge includes the requested fields of the GraphQL type CertifyLegalEdge.
// The GraphQL type's documentation follows.
//
// CertifyLegalEdge contains the cursor for the resulting node and
// the CertifyLegal node itself.
type CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdge struct {
	Cursor string                                                                                      `json:"cursor"`
	Node   CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal `json:"node"`
}

// GetCursor returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdge.Cursor, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdge.Node, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdge) GetNode() CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal {
	return v.Node
}

// CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal includes the requested fields of the GraphQL type CertifyLegal.
// The GraphQL type's documentation follows.
//
// CertifyLegal is an attestation to attach legal information to a package or source.
//
// The certification information is either copied from an attestation found in an
// SBOM or created by a collector/scanner.
//
// Discovered license is also known as Concluded. More information:
// https://docs.clearlydefined.io/curation-guidelines#the-difference-between-declared-and-discovered-licenses
//
// Attribution is also known as Copyright Text. It is what could be displayed to
// comply with notice
// requirements. https://www.nexb.com/oss-attribution-best-practices/
//
// License expressions follow this format:
// https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/
type CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal struct {
	AllCertifyLegalTree `json:"-"`
}

// GetId returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.Id, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetId() string {
	return v.AllCertifyLegalTree.Id
}

// GetSubject returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.Subject, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetSubject() AllCertifyLegalTreeSubjectPackageOrSource {
	return v.AllCertifyLegalTree.Subject
}

// GetDeclaredLicense returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.DeclaredLicense, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetDeclaredLicense() string {
	return v.AllCertifyLegalTree.DeclaredLicense
}

// GetDeclaredLicenses returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.DeclaredLicenses, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetDeclaredLicenses() []AllCertifyLegalTreeDeclaredLicensesLicense {
	return v.AllCertifyLegalTree.DeclaredLicenses
}

// GetDiscoveredLicense returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.DiscoveredLicense, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetDiscoveredLicense() string {
	return v.AllCertifyLegalTree.DiscoveredLicense
}

// GetDiscoveredLicenses returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.DiscoveredLicenses, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetDiscoveredLicenses() []AllCertifyLegalTreeDiscoveredLicensesLicense {
	return v.AllCertifyLegalTree.DiscoveredLicenses
}

// GetAttribution returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.Attribution, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetAttribution() string {
	return v.AllCertifyLegalTree.Attribution
}

// GetJustification returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.Justification, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetJustification() string {
	return v.AllCertifyLegalTree.Justification
}

// GetTimeScanned returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.TimeScanned, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetTimeScanned() time.Time {
	return v.AllCertifyLegalTree.TimeScanned
}

// GetOrigin returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.Origin, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetOrigin() string {
	return v.AllCertifyLegalTree.Origin
}

// GetCollector returns CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.Collector, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) GetCollector() string {
	return v.AllCertifyLegalTree.Collector
}

func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyLegalTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	DeclaredLicense string `json:"declaredLicense"`

	DeclaredLicenses []AllCertifyLegalTreeDeclaredLicensesLicense `json:"declaredLicenses"`

	DiscoveredLicense string `json:"discoveredLicense"`

	DiscoveredLicenses []AllCertifyLegalTreeDiscoveredLicensesLicense `json:"discoveredLicenses"`

	Attribution string `json:"attribution"`

	Justification string `json:"justification"`

	TimeScanned time.Time `json:"timeScanned"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal) __premarshalJSON() (*__premarshalCertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal, error) {
	var retval __premarshalCertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal

	retval.Id = v.AllCertifyLegalTree.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyLegalTree.Subject
		var err error
		*dst, err = __marshalAllCertifyLegalTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CertifyLegalListCertifyLegalListCertifyLegalConnectionEdgesCertifyLegalEdgeNodeCertifyLegal.AllCertifyLegalTree.Subject: %w", err)
		}
	}
	retval.DeclaredLicense = v.AllCertifyLegalTree.DeclaredLicense
	retval.DeclaredLicenses = v.AllCertifyLegalTree.DeclaredLicenses
	retval.DiscoveredLicense = v.AllCertifyLegalTree.DiscoveredLicense
	retval.DiscoveredLicenses = v.AllCertifyLegalTree.DiscoveredLicenses
	retval.Attribution = v.AllCertifyLegalTree.Attribution
	retval.Justification = v.AllCertifyLegalTree.Justification
	retval.TimeScanned = v.AllCertifyLegalTree.TimeScanned
	retval.Origin = v.AllCertifyLegalTree.Origin
	retval.Collector = v.AllCertifyLegalTree.Collector
	return &retval, nil
}

// CertifyLegalListCertifyLegalListCertifyLegalConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type CertifyLegalListCertifyLegalListCertifyLegalConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns CertifyLegalListCertifyLegalListCertifyLegalConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns CertifyLegalListCertifyLegalListCertifyLegalConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns CertifyLegalListCertifyLegalListCertifyLegalConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *CertifyLegalListCertifyLegalListCertifyLegalConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// CertifyLegalListResponse is returned by CertifyLegalList on success.
type CertifyLegalListResponse struct {
	// Returns a paginated results via CertifyLegalConnection
	CertifyLegalList *CertifyLegalListCertifyLegalListCertifyLegalConnection `json:"CertifyLegalList"`
}

// GetCertifyLegalList returns CertifyLegalListResponse.CertifyLegalList, and is useful for accessing the field via an interface.
func (v *CertifyLegalListResponse) GetCertifyLegalList() *CertifyLegalListCertifyLegalListCertifyLegalConnection {
	return v.CertifyLegalList
}

// CertifyLegalResponse is returned by CertifyLegal on success.
type CertifyLegalResponse struct {
	// Returns all legal certifications matching the input filter.
	CertifyLegal []CertifyLegalCertifyLegal `json:"CertifyLegal"`
}

// GetCertifyLegal returns CertifyLegalResponse.CertifyLegal, and is useful for accessing the field via an interface.
func (v *CertifyLegalResponse) GetCertifyLegal() []CertifyLegalCertifyLegal { return v.CertifyLegal }

// CertifyLegalSpec allows filtering the list of legal certifications to
// return in a query.
//
// Specifying just the package allows to query for all certifications associated
// with the package.
type CertifyLegalSpec struct {
	Id                 *string              `json:"id"`
	Subject            *PackageOrSourceSpec `json:"subject"`
	DeclaredLicense    *string              `json:"declaredLicense"`
	DeclaredLicenses   []LicenseSpec        `json:"declaredLicenses"`
	DiscoveredLicense  *string              `json:"discoveredLicense"`
	DiscoveredLicenses []LicenseSpec        `json:"discoveredLicenses"`
	Attribution        *string              `json:"attribution"`
	Justification      *string              `json:"justification"`
	TimeScanned        *time.Time           `json:"timeScanned"`
	Origin             *string              `json:"origin"`
	Collector          *string              `json:"collector"`
	DocumentRef        *string              `json:"documentRef"`
}

// GetId returns CertifyLegalSpec.Id, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetId() *string { return v.Id }

// GetSubject returns CertifyLegalSpec.Subject, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetSubject() *PackageOrSourceSpec { return v.Subject }

// GetDeclaredLicense returns CertifyLegalSpec.DeclaredLicense, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetDeclaredLicense() *string { return v.DeclaredLicense }

// GetDeclaredLicenses returns CertifyLegalSpec.DeclaredLicenses, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetDeclaredLicenses() []LicenseSpec { return v.DeclaredLicenses }

// GetDiscoveredLicense returns CertifyLegalSpec.DiscoveredLicense, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetDiscoveredLicense() *string { return v.DiscoveredLicense }

// GetDiscoveredLicenses returns CertifyLegalSpec.DiscoveredLicenses, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetDiscoveredLicenses() []LicenseSpec { return v.DiscoveredLicenses }

// GetAttribution returns CertifyLegalSpec.Attribution, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetAttribution() *string { return v.Attribution }

// GetJustification returns CertifyLegalSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetJustification() *string { return v.Justification }

// GetTimeScanned returns CertifyLegalSpec.TimeScanned, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetTimeScanned() *time.Time { return v.TimeScanned }

// GetOrigin returns CertifyLegalSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns CertifyLegalSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns CertifyLegalSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *CertifyLegalSpec) GetDocumentRef() *string { return v.DocumentRef }

// CertifyScorecardSpec allows filtering the list of Scorecards to return.
type CertifyScorecardSpec struct {
	Id               *string              `json:"id"`
	Source           *SourceSpec          `json:"source"`
	TimeScanned      *time.Time           `json:"timeScanned"`
	AggregateScore   *float64             `json:"aggregateScore"`
	Checks           []ScorecardCheckSpec `json:"checks"`
	ScorecardVersion *string              `json:"scorecardVersion"`
	ScorecardCommit  *string              `json:"scorecardCommit"`
	Origin           *string              `json:"origin"`
	Collector        *string              `json:"collector"`
	DocumentRef      *string              `json:"documentRef"`
}

// GetId returns CertifyScorecardSpec.Id, and is useful for accessing the field via an interface.
func (v *CertifyScorecardSpec) GetId() *string { return v.Id }

// GetSource returns CertifyScorecardSpec.Source, and is useful for accessing the field via an interface.
func (v *CertifyScorecardSpec) GetSource() *SourceSpec { return v.Source }

// GetTimeScanned returns CertifyScorecardSpec.TimeScanned, and is useful for accessing the field via an interface.
func (v *CertifyScorecardSpec) GetTimeScanned() *time.Time { return v.TimeScanned }

// GetAggregateScore returns CertifyScorecardSpec.AggregateScore, and is useful for accessing the field via an interface.
func (v *CertifyScorecardSpec) GetAggregateScore() *float64 { return v.AggregateScore }

// GetChecks returns CertifyScorecardSpec.Checks, and is useful for accessing the field via an interface.
func (v *CertifyScorecardSpec) GetChecks() []ScorecardCheckSpec { return v.Checks }

// GetScorecardVersion returns CertifyScorecardSpec.ScorecardVersion, and is useful for accessing the field via an interface.
func (v *CertifyScorecardSpec) GetScorecardVersion() *string { return v.ScorecardVersion }

// GetScorecardCommit returns CertifyScorecardSpec.ScorecardCommit, and is useful for accessing the field via an interface.
func (v *CertifyScorecardSpec) GetScorecardCommit() *string { return v.ScorecardCommit }

// GetOrigin returns CertifyScorecardSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyScorecardSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns CertifyScorecardSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyScorecardSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns CertifyScorecardSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *CertifyScorecardSpec) GetDocumentRef() *string { return v.DocumentRef }

// CertifyVEXStatementSpec allows filtering the list of VEX statements to
// return in a query.
//
// Only one subject type (package or artifact) and one vulnerability may be specified.
//
// Note that setting noVuln vulnerability type is invalid for VEX statements!
type CertifyVEXStatementSpec struct {
	Id               *string                `json:"id"`
	Subject          *PackageOrArtifactSpec `json:"subject"`
	Vulnerability    *VulnerabilitySpec     `json:"vulnerability"`
	Status           *VexStatus             `json:"status"`
	VexJustification *VexJustification      `json:"vexJustification"`
	Statement        *string                `json:"statement"`
	StatusNotes      *string                `json:"statusNotes"`
	KnownSince       *time.Time             `json:"knownSince"`
	Origin           *string                `json:"origin"`
	Collector        *string                `json:"collector"`
	DocumentRef      *string                `json:"documentRef"`
}

// GetId returns CertifyVEXStatementSpec.Id, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetId() *string { return v.Id }

// GetSubject returns CertifyVEXStatementSpec.Subject, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetSubject() *PackageOrArtifactSpec { return v.Subject }

// GetVulnerability returns CertifyVEXStatementSpec.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetVulnerability() *VulnerabilitySpec { return v.Vulnerability }

// GetStatus returns CertifyVEXStatementSpec.Status, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetStatus() *VexStatus { return v.Status }

// GetVexJustification returns CertifyVEXStatementSpec.VexJustification, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetVexJustification() *VexJustification { return v.VexJustification }

// GetStatement returns CertifyVEXStatementSpec.Statement, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetStatement() *string { return v.Statement }

// GetStatusNotes returns CertifyVEXStatementSpec.StatusNotes, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetStatusNotes() *string { return v.StatusNotes }

// GetKnownSince returns CertifyVEXStatementSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetKnownSince() *time.Time { return v.KnownSince }

// GetOrigin returns CertifyVEXStatementSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns CertifyVEXStatementSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns CertifyVEXStatementSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *CertifyVEXStatementSpec) GetDocumentRef() *string { return v.DocumentRef }

// CertifyVulnCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected, we attach the a vulnerability with "NoVuln" type and an empty string
// for the vulnerability ID.
type CertifyVulnCertifyVuln struct {
	AllCertifyVuln `json:"-"`
}

// GetId returns CertifyVulnCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *CertifyVulnCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns CertifyVulnCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *CertifyVulnCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.AllCertifyVuln.Package }

// GetVulnerability returns CertifyVulnCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyVulnCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns CertifyVulnCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *CertifyVulnCertifyVuln) GetMetadata() AllCertifyVulnMetadataScanMetadata {
	return v.AllCertifyVuln.Metadata
}

func (v *CertifyVulnCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyVulnCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyVulnCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyVulnCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability AllCertifyVulnVulnerability `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataScanMetadata `json:"metadata"`
}

func (v *CertifyVulnCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyVulnCertifyVuln) __premarshalJSON() (*__premarshalCertifyVulnCertifyVuln, error) {
	var retval __premarshalCertifyVulnCertifyVuln

	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	retval.Vulnerability = v.AllCertifyVuln.Vulnerability
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// CertifyVulnListCertifyVulnListCertifyVulnConnection includes the requested fields of the GraphQL type CertifyVulnConnection.
// The GraphQL type's documentation follows.
//
// CertifyVulnConnection returns the paginated results for CertifyVuln.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the CertifyVulnEdge which contains the current cursor
// and the CertifyVuln node itself
type CertifyVulnListCertifyVulnListCertifyVulnConnection struct {
	TotalCount int                                                                       `json:"totalCount"`
	Edges      []CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdge `json:"edges"`
	PageInfo   CertifyVulnListCertifyVulnListCertifyVulnConnectionPageInfo               `json:"pageInfo"`
}

// GetTotalCount returns CertifyVulnListCertifyVulnListCertifyVulnConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns CertifyVulnListCertifyVulnListCertifyVulnConnection.Edges, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnection) GetEdges() []CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdge {
	return v.Edges
}

// GetPageInfo returns CertifyVulnListCertifyVulnListCertifyVulnConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnection) GetPageInfo() CertifyVulnListCertifyVulnListCertifyVulnConnectionPageInfo {
	return v.PageInfo
}

// CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdge includes the requested fields of the GraphQL type CertifyVulnEdge.
// The GraphQL type's documentation follows.
//
// CertifyVulnEdge contains the cursor for the resulting node and
// the CertifyVuln node itself.
type CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdge struct {
	Cursor string                                                                                 `json:"cursor"`
	Node   CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln `json:"node"`
}

// GetCursor returns CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdge.Cursor, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdge.Node, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdge) GetNode() CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln {
	return v.Node
}

// CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected, we attach the a vulnerability with "NoVuln" type and an empty string
// for the vulnerability ID.
type CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln struct {
	AllCertifyVuln `json:"-"`
}

// GetId returns CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln) GetId() string {
	return v.AllCertifyVuln.Id
}

// GetPackage returns CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln) GetMetadata() AllCertifyVulnMetadataScanMetadata {
	return v.AllCertifyVuln.Metadata
}

func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability AllCertifyVulnVulnerability `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataScanMetadata `json:"metadata"`
}

func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln) __premarshalJSON() (*__premarshalCertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln, error) {
	var retval __premarshalCertifyVulnListCertifyVulnListCertifyVulnConnectionEdgesCertifyVulnEdgeNodeCertifyVuln

	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	retval.Vulnerability = v.AllCertifyVuln.Vulnerability
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// CertifyVulnListCertifyVulnListCertifyVulnConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type CertifyVulnListCertifyVulnListCertifyVulnConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns CertifyVulnListCertifyVulnListCertifyVulnConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns CertifyVulnListCertifyVulnListCertifyVulnConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns CertifyVulnListCertifyVulnListCertifyVulnConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *CertifyVulnListCertifyVulnListCertifyVulnConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// CertifyVulnListResponse is returned by CertifyVulnList on success.
type CertifyVulnListResponse struct {
	// Returns a paginated results via CertifyVulnConnection
	CertifyVulnList *CertifyVulnListCertifyVulnListCertifyVulnConnection `json:"CertifyVulnList"`
}

// GetCertifyVulnList returns CertifyVulnListResponse.CertifyVulnList, and is useful for accessing the field via an interface.
func (v *CertifyVulnListResponse) GetCertifyVulnList() *CertifyVulnListCertifyVulnListCertifyVulnConnection {
	return v.CertifyVulnList
}

// CertifyVulnResponse is returned by CertifyVuln on success.
type CertifyVulnResponse struct {
	// Returns all vulnerability certifications matching the input filter.
	CertifyVuln []CertifyVulnCertifyVuln `json:"CertifyVuln"`
}

// GetCertifyVuln returns CertifyVulnResponse.CertifyVuln, and is useful for accessing the field via an interface.
func (v *CertifyVulnResponse) GetCertifyVuln() []CertifyVulnCertifyVuln { return v.CertifyVuln }

// CertifyVulnSpec allows filtering the list of vulnerability certifications to
// return in a query.
//
// Specifying just the package allows to query for all vulnerabilities associated
// with the package.
//
// Only one vulnerability (or NoVuln vulnerability type) may be
// specified.
type CertifyVulnSpec struct {
	Id             *string            `json:"id"`
	Package        *PkgSpec           `json:"package"`
	Vulnerability  *VulnerabilitySpec `json:"vulnerability"`
	TimeScanned    *time.Time         `json:"timeScanned"`
	DbUri          *string            `json:"dbUri"`
	DbVersion      *string            `json:"dbVersion"`
	ScannerUri     *string            `json:"scannerUri"`
	ScannerVersion *string            `json:"scannerVersion"`
	Origin         *string            `json:"origin"`
	Collector      *string            `json:"collector"`
	DocumentRef    *string            `json:"documentRef"`
}

// GetId returns CertifyVulnSpec.Id, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetId() *string { return v.Id }

// GetPackage returns CertifyVulnSpec.Package, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetPackage() *PkgSpec { return v.Package }

// GetVulnerability returns CertifyVulnSpec.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetVulnerability() *VulnerabilitySpec { return v.Vulnerability }

// GetTimeScanned returns CertifyVulnSpec.TimeScanned, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetTimeScanned() *time.Time { return v.TimeScanned }

// GetDbUri returns CertifyVulnSpec.DbUri, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetDbUri() *string { return v.DbUri }

// GetDbVersion returns CertifyVulnSpec.DbVersion, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetDbVersion() *string { return v.DbVersion }

// GetScannerUri returns CertifyVulnSpec.ScannerUri, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetScannerUri() *string { return v.ScannerUri }

// GetScannerVersion returns CertifyVulnSpec.ScannerVersion, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetScannerVersion() *string { return v.ScannerVersion }

// GetOrigin returns CertifyVulnSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns CertifyVulnSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns CertifyVulnSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *CertifyVulnSpec) GetDocumentRef() *string { return v.DocumentRef }

// The Comparator is used by the vulnerability score filter on ranges
type Comparator string

const (
	ComparatorGreater      Comparator = "GREATER"
	ComparatorEqual        Comparator = "EQUAL"
	ComparatorLess         Comparator = "LESS"
	ComparatorGreaterEqual Comparator = "GREATER_EQUAL"
	ComparatorLessEqual    Comparator = "LESS_EQUAL"
)

// DependenciesIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type DependenciesIsDependency struct {
	AllIsDependencyTree `json:"-"`
}

// GetId returns DependenciesIsDependency.Id, and is useful for accessing the field via an interface.
func (v *DependenciesIsDependency) GetId() string { return v.AllIsDependencyTree.Id }

// GetJustification returns DependenciesIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *DependenciesIsDependency) GetJustification() string {
	return v.AllIsDependencyTree.Justification
}

// GetPackage returns DependenciesIsDependency.Package, and is useful for accessing the field via an interface.
func (v *DependenciesIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependencyPackage returns DependenciesIsDependency.DependencyPackage, and is useful for accessing the field via an interface.
func (v *DependenciesIsDependency) GetDependencyPackage() AllIsDependencyTreeDependencyPackage {
	return v.AllIsDependencyTree.DependencyPackage
}

// GetDependencyType returns DependenciesIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *DependenciesIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns DependenciesIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *DependenciesIsDependency) GetVersionRange() string {
	return v.AllIsDependencyTree.VersionRange
}

// GetOrigin returns DependenciesIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *DependenciesIsDependency) GetOrigin() string { return v.AllIsDependencyTree.Origin }

// GetCollector returns DependenciesIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *DependenciesIsDependency) GetCollector() string { return v.AllIsDependencyTree.Collector }

func (v *DependenciesIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DependenciesIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.DependenciesIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDependenciesIsDependency struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependencyPackage AllIsDependencyTreeDependencyPackage `json:"dependencyPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *DependenciesIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DependenciesIsDependency) __premarshalJSON() (*__premarshalDependenciesIsDependency, error) {
	var retval __premarshalDependenciesIsDependency

	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependencyPackage = v.AllIsDependencyTree.DependencyPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// DependenciesResponse is returned by Dependencies on success.
type DependenciesResponse struct {
	// Returns all package dependencies that match the filter.
	IsDependency []DependenciesIsDependency `json:"IsDependency"`
}

// GetIsDependency returns DependenciesResponse.IsDependency, and is useful for accessing the field via an interface.
func (v *DependenciesResponse) GetIsDependency() []DependenciesIsDependency { return v.IsDependency }

// DependencyListIsDependencyListIsDependencyConnection includes the requested fields of the GraphQL type IsDependencyConnection.
// The GraphQL type's documentation follows.
//
// IsDependencyConnection returns the paginated results for IsDependency.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the IsDependencyEdge which contains the current cursor
// and the IsDependency node itself
type DependencyListIsDependencyListIsDependencyConnection struct {
	TotalCount int                                                                         `json:"totalCount"`
	Edges      []DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdge `json:"edges"`
	PageInfo   DependencyListIsDependencyListIsDependencyConnectionPageInfo                `json:"pageInfo"`
}

// GetTotalCount returns DependencyListIsDependencyListIsDependencyConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns DependencyListIsDependencyListIsDependencyConnection.Edges, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnection) GetEdges() []DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdge {
	return v.Edges
}

// GetPageInfo returns DependencyListIsDependencyListIsDependencyConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnection) GetPageInfo() DependencyListIsDependencyListIsDependencyConnectionPageInfo {
	return v.PageInfo
}

// DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdge includes the requested fields of the GraphQL type IsDependencyEdge.
// The GraphQL type's documentation follows.
//
// IsDependencyEdge contains the cursor for the resulting node and
// the IsDependency node itself.
type DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdge struct {
	Cursor string                                                                                    `json:"cursor"`
	Node   DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency `json:"node"`
}

// GetCursor returns DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdge.Cursor, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdge.Node, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdge) GetNode() DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency {
	return v.Node
}

// DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency struct {
	AllIsDependencyTree `json:"-"`
}

// GetId returns DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency.Id, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) GetId() string {
	return v.AllIsDependencyTree.Id
}

// GetJustification returns DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) GetJustification() string {
	return v.AllIsDependencyTree.Justification
}

// GetPackage returns DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency.Package, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependencyPackage returns DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency.DependencyPackage, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) GetDependencyPackage() AllIsDependencyTreeDependencyPackage {
	return v.AllIsDependencyTree.DependencyPackage
}

// GetDependencyType returns DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) GetVersionRange() string {
	return v.AllIsDependencyTree.VersionRange
}

// GetOrigin returns DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) GetOrigin() string {
	return v.AllIsDependencyTree.Origin
}

// GetCollector returns DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) GetCollector() string {
	return v.AllIsDependencyTree.Collector
}

func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependencyPackage AllIsDependencyTreeDependencyPackage `json:"dependencyPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency) __premarshalJSON() (*__premarshalDependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency, error) {
	var retval __premarshalDependencyListIsDependencyListIsDependencyConnectionEdgesIsDependencyEdgeNodeIsDependency

	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependencyPackage = v.AllIsDependencyTree.DependencyPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// DependencyListIsDependencyListIsDependencyConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type DependencyListIsDependencyListIsDependencyConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns DependencyListIsDependencyListIsDependencyConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns DependencyListIsDependencyListIsDependencyConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns DependencyListIsDependencyListIsDependencyConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DependencyListIsDependencyListIsDependencyConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// DependencyListResponse is returned by DependencyList on success.
type DependencyListResponse struct {
	// Returns a paginated results via IsDependencyConnection
	IsDependencyList *DependencyListIsDependencyListIsDependencyConnection `json:"IsDependencyList"`
}

// GetIsDependencyList returns DependencyListResponse.IsDependencyList, and is useful for accessing the field via an interface.
func (v *DependencyListResponse) GetIsDependencyList() *DependencyListIsDependencyListIsDependencyConnection {
	return v.IsDependencyList
}

// DependencyType determines the type of the dependency.
type DependencyType string

const (
	// direct dependency
	DependencyTypeDirect DependencyType = "DIRECT"
	// indirect dependency
	DependencyTypeIndirect DependencyType = "INDIRECT"
	// type not known/not specified
	DependencyTypeUnknown DependencyType = "UNKNOWN"
)

// Edge allows filtering path/neighbors output to only contain a subset of all
// possible GUAC links.
//
// Each member of the enum is formed by merging two Node names with _. Each name
// is converted from CamelCase to CAPITALS_WITH_UNDERSCORES. Only valid edges
// (pairs from Node to Node) are included. Edges are defined in both directions,
// which means nodes can be traversed from either direction.
//
// The only exception to the above rule is for links out of HasSLSA. The names are
// HAS_SLSA_SUBJECT, HAS_SLSA_BUILT_BY, and HAS_SLSA_MATERIALS. This is because
// ARTIFACT_HAS_SLSA is only from subject Artifact to HasSLSA.
type Edge string

const (
	EdgeArtifactCertifyBad               Edge = "ARTIFACT_CERTIFY_BAD"
	EdgeArtifactCertifyGood              Edge = "ARTIFACT_CERTIFY_GOOD"
	EdgeArtifactCertifyVexStatement      Edge = "ARTIFACT_CERTIFY_VEX_STATEMENT"
	EdgeArtifactHashEqual                Edge = "ARTIFACT_HASH_EQUAL"
	EdgeArtifactHasMetadata              Edge = "ARTIFACT_HAS_METADATA"
	EdgeArtifactHasSbom                  Edge = "ARTIFACT_HAS_SBOM"
	EdgeArtifactHasSlsa                  Edge = "ARTIFACT_HAS_SLSA"
	EdgeArtifactIsOccurrence             Edge = "ARTIFACT_IS_OCCURRENCE"
	EdgeArtifactPointOfContact           Edge = "ARTIFACT_POINT_OF_CONTACT"
	EdgeBuilderHasSlsa                   Edge = "BUILDER_HAS_SLSA"
	EdgeLicenseCertifyLegal              Edge = "LICENSE_CERTIFY_LEGAL"
	EdgePackageCertifyBad                Edge = "PACKAGE_CERTIFY_BAD"
	EdgePackageCertifyGood               Edge = "PACKAGE_CERTIFY_GOOD"
	EdgePackageCertifyLegal              Edge = "PACKAGE_CERTIFY_LEGAL"
	EdgePackageCertifyVexStatement       Edge = "PACKAGE_CERTIFY_VEX_STATEMENT"
	EdgePackageCertifyVuln               Edge = "PACKAGE_CERTIFY_VULN"
	EdgePackageHasMetadata               Edge = "PACKAGE_HAS_METADATA"
	EdgePackageHasSbom                   Edge = "PACKAGE_HAS_SBOM"
	EdgePackageHasSourceAt               Edge = "PACKAGE_HAS_SOURCE_AT"
	EdgePackageIsDependency              Edge = "PACKAGE_IS_DEPENDENCY"
	EdgePackageIsOccurrence              Edge = "PACKAGE_IS_OCCURRENCE"
	EdgePackageNamePackageNamespace      Edge = "PACKAGE_NAME_PACKAGE_NAMESPACE"
	EdgePackageNamePackageVersion        Edge = "PACKAGE_NAME_PACKAGE_VERSION"
	EdgePackageNamespacePackageName      Edge = "PACKAGE_NAMESPACE_PACKAGE_NAME"
	EdgePackageNamespacePackageType      Edge = "PACKAGE_NAMESPACE_PACKAGE_TYPE"
	EdgePackagePkgEqual                  Edge = "PACKAGE_PKG_EQUAL"
	EdgePackagePointOfContact            Edge = "PACKAGE_POINT_OF_CONTACT"
	EdgePackageTypePackageNamespace      Edge = "PACKAGE_TYPE_PACKAGE_NAMESPACE"
	EdgePackageVersionPackageName        Edge = "PACKAGE_VERSION_PACKAGE_NAME"
	EdgeSourceCertifyBad                 Edge = "SOURCE_CERTIFY_BAD"
	EdgeSourceCertifyGood                Edge = "SOURCE_CERTIFY_GOOD"
	EdgeSourceCertifyLegal               Edge = "SOURCE_CERTIFY_LEGAL"
	EdgeSourceCertifyScorecard           Edge = "SOURCE_CERTIFY_SCORECARD"
	EdgeSourceHasMetadata                Edge = "SOURCE_HAS_METADATA"
	EdgeSourceHasSourceAt                Edge = "SOURCE_HAS_SOURCE_AT"
	EdgeSourceIsOccurrence               Edge = "SOURCE_IS_OCCURRENCE"
	EdgeSourceNameSourceNamespace        Edge = "SOURCE_NAME_SOURCE_NAMESPACE"
	EdgeSourceNamespaceSourceName        Edge = "SOURCE_NAMESPACE_SOURCE_NAME"
	EdgeSourceNamespaceSourceType        Edge = "SOURCE_NAMESPACE_SOURCE_TYPE"
	EdgeSourcePointOfContact             Edge = "SOURCE_POINT_OF_CONTACT"
	EdgeSourceTypeSourceNamespace        Edge = "SOURCE_TYPE_SOURCE_NAMESPACE"
	EdgeVulnerabilityCertifyVexStatement Edge = "VULNERABILITY_CERTIFY_VEX_STATEMENT"
	EdgeVulnerabilityCertifyVuln         Edge = "VULNERABILITY_CERTIFY_VULN"
	EdgeVulnerabilityIdVulnerabilityType Edge = "VULNERABILITY_ID_VULNERABILITY_TYPE"
	EdgeVulnerabilityTypeVulnerabilityId Edge = "VULNERABILITY_TYPE_VULNERABILITY_ID"
	EdgeVulnerabilityVulnEqual           Edge = "VULNERABILITY_VULN_EQUAL"
	EdgeVulnerabilityVulnMetadata        Edge = "VULNERABILITY_VULN_METADATA"
	EdgeCertifyBadArtifact               Edge = "CERTIFY_BAD_ARTIFACT"
	EdgeCertifyBadPackage                Edge = "CERTIFY_BAD_PACKAGE"
	EdgeCertifyBadSource                 Edge = "CERTIFY_BAD_SOURCE"
	EdgeCertifyGoodArtifact              Edge = "CERTIFY_GOOD_ARTIFACT"
	EdgeCertifyGoodPackage               Edge = "CERTIFY_GOOD_PACKAGE"
	EdgeCertifyGoodSource                Edge = "CERTIFY_GOOD_SOURCE"
	EdgeCertifyLegalLicense              Edge = "CERTIFY_LEGAL_LICENSE"
	EdgeCertifyLegalPackage              Edge = "CERTIFY_LEGAL_PACKAGE"
	EdgeCertifyLegalSource               Edge = "CERTIFY_LEGAL_SOURCE"
	EdgeCertifyScorecardSource           Edge = "CERTIFY_SCORECARD_SOURCE"
	EdgeCertifyVexStatementArtifact      Edge = "CERTIFY_VEX_STATEMENT_ARTIFACT"
	EdgeCertifyVexStatementPackage       Edge = "CERTIFY_VEX_STATEMENT_PACKAGE"
	EdgeCertifyVexStatementVulnerability Edge = "CERTIFY_VEX_STATEMENT_VULNERABILITY"
	EdgeCertifyVulnPackage               Edge = "CERTIFY_VULN_PACKAGE"
	EdgeCertifyVulnVulnerability         Edge = "CERTIFY_VULN_VULNERABILITY"
	EdgeHashEqualArtifact                Edge = "HASH_EQUAL_ARTIFACT"
	EdgeHasMetadataArtifact              Edge = "HAS_METADATA_ARTIFACT"
	EdgeHasMetadataPackage               Edge = "HAS_METADATA_PACKAGE"
	EdgeHasMetadataSource                Edge = "HAS_METADATA_SOURCE"
	EdgeHasSbomArtifact                  Edge = "HAS_SBOM_ARTIFACT"
	EdgeHasSbomPackage                   Edge = "HAS_SBOM_PACKAGE"
	EdgeHasSbomIncludedSoftware          Edge = "HAS_SBOM_INCLUDED_SOFTWARE"
	EdgeHasSbomIncludedDependencies      Edge = "HAS_SBOM_INCLUDED_DEPENDENCIES"
	EdgeHasSbomIncludedOccurrences       Edge = "HAS_SBOM_INCLUDED_OCCURRENCES"
	EdgeHasSlsaBuiltBy                   Edge = "HAS_SLSA_BUILT_BY"
	EdgeHasSlsaMaterials                 Edge = "HAS_SLSA_MATERIALS"
	EdgeHasSlsaSubject                   Edge = "HAS_SLSA_SUBJECT"
	EdgeHasSourceAtPackage               Edge = "HAS_SOURCE_AT_PACKAGE"
	EdgeHasSourceAtSource                Edge = "HAS_SOURCE_AT_SOURCE"
	EdgeIsDependencyPackage              Edge = "IS_DEPENDENCY_PACKAGE"
	EdgeIsOccurrenceArtifact             Edge = "IS_OCCURRENCE_ARTIFACT"
	EdgeIsOccurrencePackage              Edge = "IS_OCCURRENCE_PACKAGE"
	EdgeIsOccurrenceSource               Edge = "IS_OCCURRENCE_SOURCE"
	EdgePkgEqualPackage                  Edge = "PKG_EQUAL_PACKAGE"
	EdgePointOfContactArtifact           Edge = "POINT_OF_CONTACT_ARTIFACT"
	EdgePointOfContactPackage            Edge = "POINT_OF_CONTACT_PACKAGE"
	EdgePointOfContactSource             Edge = "POINT_OF_CONTACT_SOURCE"
	EdgeVulnEqualVulnerability           Edge = "VULN_EQUAL_VULNERABILITY"
	EdgeVulnMetadataVulnerability        Edge = "VULN_METADATA_VULNERABILITY"
)

// FindSoftwareFindSoftwareArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type FindSoftwareFindSoftwareArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns FindSoftwareFindSoftwareArtifact.Typename, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareArtifact) GetTypename() *string { return v.Typename }

// GetId returns FindSoftwareFindSoftwareArtifact.Id, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns FindSoftwareFindSoftwareArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns FindSoftwareFindSoftwareArtifact.Digest, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *FindSoftwareFindSoftwareArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSoftwareFindSoftwareArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSoftwareFindSoftwareArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindSoftwareFindSoftwareArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *FindSoftwareFindSoftwareArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSoftwareFindSoftwareArtifact) __premarshalJSON() (*__premarshalFindSoftwareFindSoftwareArtifact, error) {
	var retval __premarshalFindSoftwareFindSoftwareArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// FindSoftwareFindSoftwarePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type FindSoftwareFindSoftwarePackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns FindSoftwareFindSoftwarePackage.Typename, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwarePackage) GetTypename() *string { return v.Typename }

// GetId returns FindSoftwareFindSoftwarePackage.Id, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwarePackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns FindSoftwareFindSoftwarePackage.Type, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwarePackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns FindSoftwareFindSoftwarePackage.Namespaces, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwarePackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *FindSoftwareFindSoftwarePackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSoftwareFindSoftwarePackage
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSoftwareFindSoftwarePackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindSoftwareFindSoftwarePackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *FindSoftwareFindSoftwarePackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSoftwareFindSoftwarePackage) __premarshalJSON() (*__premarshalFindSoftwareFindSoftwarePackage, error) {
	var retval __premarshalFindSoftwareFindSoftwarePackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// FindSoftwareFindSoftwarePackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// FindSoftwareFindSoftwarePackageSourceOrArtifact is implemented by the following types:
// FindSoftwareFindSoftwareArtifact
// FindSoftwareFindSoftwarePackage
// FindSoftwareFindSoftwareSource
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type FindSoftwareFindSoftwarePackageSourceOrArtifact interface {
	implementsGraphQLInterfaceFindSoftwareFindSoftwarePackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *FindSoftwareFindSoftwareArtifact) implementsGraphQLInterfaceFindSoftwareFindSoftwarePackageSourceOrArtifact() {
}
func (v *FindSoftwareFindSoftwarePackage) implementsGraphQLInterfaceFindSoftwareFindSoftwarePackageSourceOrArtifact() {
}
func (v *FindSoftwareFindSoftwareSource) implementsGraphQLInterfaceFindSoftwareFindSoftwarePackageSourceOrArtifact() {
}

func __unmarshalFindSoftwareFindSoftwarePackageSourceOrArtifact(b []byte, v *FindSoftwareFindSoftwarePackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(FindSoftwareFindSoftwareArtifact)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(FindSoftwareFindSoftwarePackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(FindSoftwareFindSoftwareSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for FindSoftwareFindSoftwarePackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalFindSoftwareFindSoftwarePackageSourceOrArtifact(v *FindSoftwareFindSoftwarePackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *FindSoftwareFindSoftwareArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalFindSoftwareFindSoftwareArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *FindSoftwareFindSoftwarePackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalFindSoftwareFindSoftwarePackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *FindSoftwareFindSoftwareSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalFindSoftwareFindSoftwareSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for FindSoftwareFindSoftwarePackageSourceOrArtifact: "%T"`, v)
	}
}

// FindSoftwareFindSoftwareSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type FindSoftwareFindSoftwareSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns FindSoftwareFindSoftwareSource.Typename, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareSource) GetTypename() *string { return v.Typename }

// GetId returns FindSoftwareFindSoftwareSource.Id, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns FindSoftwareFindSoftwareSource.Type, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns FindSoftwareFindSoftwareSource.Namespaces, and is useful for accessing the field via an interface.
func (v *FindSoftwareFindSoftwareSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *FindSoftwareFindSoftwareSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSoftwareFindSoftwareSource
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSoftwareFindSoftwareSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindSoftwareFindSoftwareSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *FindSoftwareFindSoftwareSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSoftwareFindSoftwareSource) __premarshalJSON() (*__premarshalFindSoftwareFindSoftwareSource, error) {
	var retval __premarshalFindSoftwareFindSoftwareSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// FindSoftwareResponse is returned by FindSoftware on success.
type FindSoftwareResponse struct {
	// findSoftware takes in a searchText string and looks for software
	// that may be relevant for the input text. This can be seen as fuzzy search
	// function for Packages, Sources and Artifacts. findSoftware returns a list
	// of Packages, Sources and Artifacts that it determines to be relevant to
	// the input searchText.
	//
	// Due to the nature of full text search being implemented differently on
	// different db platforms, the behavior of findSoftware is not guaranteed
	// to be the same. In addition, their statistical nature may result in
	// results being different per call and not reproducible.
	//
	// All that is asked in the implementation of this API is that it follows
	// the spirit of helping to retrieve the right nodes with best effort.
	//
	// Warning: This is an EXPERIMENTAL feature. This is subject to change.
	// Warning: This is an OPTIONAL feature. Backends are not required to
	// implement this API.
	FindSoftware []FindSoftwareFindSoftwarePackageSourceOrArtifact `json:"-"`
}

// GetFindSoftware returns FindSoftwareResponse.FindSoftware, and is useful for accessing the field via an interface.
func (v *FindSoftwareResponse) GetFindSoftware() []FindSoftwareFindSoftwarePackageSourceOrArtifact {
	return v.FindSoftware
}

func (v *FindSoftwareResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindSoftwareResponse
		FindSoftware []json.RawMessage `json:"findSoftware"`
		graphql.NoUnmarshalJSON
	}
	firstPass.FindSoftwareResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.FindSoftware
		src := firstPass.FindSoftware
		*dst = make(
			[]FindSoftwareFindSoftwarePackageSourceOrArtifact,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalFindSoftwareFindSoftwarePackageSourceOrArtifact(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal FindSoftwareResponse.FindSoftware: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalFindSoftwareResponse struct {
	FindSoftware []json.RawMessage `json:"findSoftware"`
}

func (v *FindSoftwareResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindSoftwareResponse) __premarshalJSON() (*__premarshalFindSoftwareResponse, error) {
	var retval __premarshalFindSoftwareResponse

	{

		dst := &retval.FindSoftware
		src := v.FindSoftware
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalFindSoftwareFindSoftwarePackageSourceOrArtifact(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal FindSoftwareResponse.FindSoftware: %w", err)
			}
		}
	}
	return &retval, nil
}

// HasMetadataHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type HasMetadataHasMetadata struct {
	AllHasMetadata `json:"-"`
}

// GetId returns HasMetadataHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *HasMetadataHasMetadata) GetId() string { return v.AllHasMetadata.Id }

// GetSubject returns HasMetadataHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *HasMetadataHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact {
	return v.AllHasMetadata.Subject
}

// GetKey returns HasMetadataHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *HasMetadataHasMetadata) GetKey() string { return v.AllHasMetadata.Key }

// GetValue returns HasMetadataHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *HasMetadataHasMetadata) GetValue() string { return v.AllHasMetadata.Value }

// GetTimestamp returns HasMetadataHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *HasMetadataHasMetadata) GetTimestamp() time.Time { return v.AllHasMetadata.Timestamp }

// GetJustification returns HasMetadataHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *HasMetadataHasMetadata) GetJustification() string { return v.AllHasMetadata.Justification }

// GetOrigin returns HasMetadataHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *HasMetadataHasMetadata) GetOrigin() string { return v.AllHasMetadata.Origin }

// GetCollector returns HasMetadataHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *HasMetadataHasMetadata) GetCollector() string { return v.AllHasMetadata.Collector }

func (v *HasMetadataHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasMetadataHasMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.HasMetadataHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasMetadataHasMetadata struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasMetadataHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasMetadataHasMetadata) __premarshalJSON() (*__premarshalHasMetadataHasMetadata, error) {
	var retval __premarshalHasMetadataHasMetadata

	retval.Id = v.AllHasMetadata.Id
	{

		dst := &retval.Subject
		src := v.AllHasMetadata.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal HasMetadataHasMetadata.AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.AllHasMetadata.Key
	retval.Value = v.AllHasMetadata.Value
	retval.Timestamp = v.AllHasMetadata.Timestamp
	retval.Justification = v.AllHasMetadata.Justification
	retval.Origin = v.AllHasMetadata.Origin
	retval.Collector = v.AllHasMetadata.Collector
	return &retval, nil
}

// HasMetadataInputSpec represents the mutation input to ingest a CertifyGood evidence.
type HasMetadataInputSpec struct {
	Key           string    `json:"key"`
	Value         string    `json:"value"`
	Timestamp     time.Time `json:"timestamp"`
	Justification string    `json:"justification"`
	Origin        string    `json:"origin"`
	Collector     string    `json:"collector"`
	DocumentRef   string    `json:"documentRef"`
}

// GetKey returns HasMetadataInputSpec.Key, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetKey() string { return v.Key }

// GetValue returns HasMetadataInputSpec.Value, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetValue() string { return v.Value }

// GetTimestamp returns HasMetadataInputSpec.Timestamp, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetTimestamp() time.Time { return v.Timestamp }

// GetJustification returns HasMetadataInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns HasMetadataInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HasMetadataInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns HasMetadataInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *HasMetadataInputSpec) GetDocumentRef() string { return v.DocumentRef }

// HasMetadataListHasMetadataListHasMetadataConnection includes the requested fields of the GraphQL type HasMetadataConnection.
// The GraphQL type's documentation follows.
//
// HasMetadataConnection returns the paginated results for HasMetadata.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the HasMetadataEdge which contains the current cursor
// and the HasMetadata node itself
type HasMetadataListHasMetadataListHasMetadataConnection struct {
	TotalCount int                                                                       `json:"totalCount"`
	Edges      []HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdge `json:"edges"`
	PageInfo   HasMetadataListHasMetadataListHasMetadataConnectionPageInfo               `json:"pageInfo"`
}

// GetTotalCount returns HasMetadataListHasMetadataListHasMetadataConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns HasMetadataListHasMetadataListHasMetadataConnection.Edges, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnection) GetEdges() []HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdge {
	return v.Edges
}

// GetPageInfo returns HasMetadataListHasMetadataListHasMetadataConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnection) GetPageInfo() HasMetadataListHasMetadataListHasMetadataConnectionPageInfo {
	return v.PageInfo
}

// HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdge includes the requested fields of the GraphQL type HasMetadataEdge.
// The GraphQL type's documentation follows.
//
// HasMetadataEdge contains the cursor for the resulting node and
// the HasMetadata node itself.
type HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdge struct {
	Cursor string                                                                                 `json:"cursor"`
	Node   HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata `json:"node"`
}

// GetCursor returns HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdge.Cursor, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdge.Node, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdge) GetNode() HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata {
	return v.Node
}

// HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata struct {
	AllHasMetadata `json:"-"`
}

// GetId returns HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) GetId() string {
	return v.AllHasMetadata.Id
}

// GetSubject returns HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact {
	return v.AllHasMetadata.Subject
}

// GetKey returns HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) GetKey() string {
	return v.AllHasMetadata.Key
}

// GetValue returns HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) GetValue() string {
	return v.AllHasMetadata.Value
}

// GetTimestamp returns HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) GetTimestamp() time.Time {
	return v.AllHasMetadata.Timestamp
}

// GetJustification returns HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) GetJustification() string {
	return v.AllHasMetadata.Justification
}

// GetOrigin returns HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) GetOrigin() string {
	return v.AllHasMetadata.Origin
}

// GetCollector returns HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) GetCollector() string {
	return v.AllHasMetadata.Collector
}

func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata) __premarshalJSON() (*__premarshalHasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata, error) {
	var retval __premarshalHasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata

	retval.Id = v.AllHasMetadata.Id
	{

		dst := &retval.Subject
		src := v.AllHasMetadata.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal HasMetadataListHasMetadataListHasMetadataConnectionEdgesHasMetadataEdgeNodeHasMetadata.AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.AllHasMetadata.Key
	retval.Value = v.AllHasMetadata.Value
	retval.Timestamp = v.AllHasMetadata.Timestamp
	retval.Justification = v.AllHasMetadata.Justification
	retval.Origin = v.AllHasMetadata.Origin
	retval.Collector = v.AllHasMetadata.Collector
	return &retval, nil
}

// HasMetadataListHasMetadataListHasMetadataConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type HasMetadataListHasMetadataListHasMetadataConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns HasMetadataListHasMetadataListHasMetadataConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns HasMetadataListHasMetadataListHasMetadataConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns HasMetadataListHasMetadataListHasMetadataConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *HasMetadataListHasMetadataListHasMetadataConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// HasMetadataListResponse is returned by HasMetadataList on success.
type HasMetadataListResponse struct {
	// Returns a paginated results via HasMetadataConnection
	HasMetadataList *HasMetadataListHasMetadataListHasMetadataConnection `json:"HasMetadataList"`
}

// GetHasMetadataList returns HasMetadataListResponse.HasMetadataList, and is useful for accessing the field via an interface.
func (v *HasMetadataListResponse) GetHasMetadataList() *HasMetadataListHasMetadataListHasMetadataConnection {
	return v.HasMetadataList
}

// HasMetadataResponse is returned by HasMetadata on success.
type HasMetadataResponse struct {
	// Returns all HasMetdata attestations matching a filter.
	HasMetadata []HasMetadataHasMetadata `json:"HasMetadata"`
}

// GetHasMetadata returns HasMetadataResponse.HasMetadata, and is useful for accessing the field via an interface.
func (v *HasMetadataResponse) GetHasMetadata() []HasMetadataHasMetadata { return v.HasMetadata }

// HasMetadataSpec allows filtering the list of HasMetadata evidence to return in a
// query.
//
// If a package is specified in the subject filter, then it must be specified up
// to PackageName or PackageVersion. That is, user must specify package name, or
// name and one of version, qualifiers, or subpath.
//
// If a source is specified in the subject filter, then it must specify a name,
// and optionally a tag and a commit.
//
// since specified indicates filtering timestamps after the specified time
type HasMetadataSpec struct {
	Id            *string                      `json:"id"`
	Subject       *PackageSourceOrArtifactSpec `json:"subject"`
	Since         *time.Time                   `json:"since"`
	Key           *string                      `json:"key"`
	Value         *string                      `json:"value"`
	Justification *string                      `json:"justification"`
	Origin        *string                      `json:"origin"`
	Collector     *string                      `json:"collector"`
	DocumentRef   *string                      `json:"documentRef"`
}

// GetId returns HasMetadataSpec.Id, and is useful for accessing the field via an interface.
func (v *HasMetadataSpec) GetId() *string { return v.Id }

// GetSubject returns HasMetadataSpec.Subject, and is useful for accessing the field via an interface.
func (v *HasMetadataSpec) GetSubject() *PackageSourceOrArtifactSpec { return v.Subject }

// GetSince returns HasMetadataSpec.Since, and is useful for accessing the field via an interface.
func (v *HasMetadataSpec) GetSince() *time.Time { return v.Since }

// GetKey returns HasMetadataSpec.Key, and is useful for accessing the field via an interface.
func (v *HasMetadataSpec) GetKey() *string { return v.Key }

// GetValue returns HasMetadataSpec.Value, and is useful for accessing the field via an interface.
func (v *HasMetadataSpec) GetValue() *string { return v.Value }

// GetJustification returns HasMetadataSpec.Justification, and is useful for accessing the field via an interface.
func (v *HasMetadataSpec) GetJustification() *string { return v.Justification }

// GetOrigin returns HasMetadataSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasMetadataSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns HasMetadataSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasMetadataSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns HasMetadataSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *HasMetadataSpec) GetDocumentRef() *string { return v.DocumentRef }

type HasSBOMIncludesInputSpec struct {
	Packages     []string `json:"packages"`
	Artifacts    []string `json:"artifacts"`
	Dependencies []string `json:"dependencies"`
	Occurrences  []string `json:"occurrences"`
}

// GetPackages returns HasSBOMIncludesInputSpec.Packages, and is useful for accessing the field via an interface.
func (v *HasSBOMIncludesInputSpec) GetPackages() []string { return v.Packages }

// GetArtifacts returns HasSBOMIncludesInputSpec.Artifacts, and is useful for accessing the field via an interface.
func (v *HasSBOMIncludesInputSpec) GetArtifacts() []string { return v.Artifacts }

// GetDependencies returns HasSBOMIncludesInputSpec.Dependencies, and is useful for accessing the field via an interface.
func (v *HasSBOMIncludesInputSpec) GetDependencies() []string { return v.Dependencies }

// GetOccurrences returns HasSBOMIncludesInputSpec.Occurrences, and is useful for accessing the field via an interface.
func (v *HasSBOMIncludesInputSpec) GetOccurrences() []string { return v.Occurrences }

// HasSBOMInputSpec is similar to HasSBOM but for mutation input.
type HasSBOMInputSpec struct {
	Uri              string    `json:"uri"`
	Algorithm        string    `json:"algorithm"`
	Digest           string    `json:"digest"`
	DownloadLocation string    `json:"downloadLocation"`
	KnownSince       time.Time `json:"knownSince"`
	Origin           string    `json:"origin"`
	Collector        string    `json:"collector"`
	DocumentRef      string    `json:"documentRef"`
}

// GetUri returns HasSBOMInputSpec.Uri, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetUri() string { return v.Uri }

// GetAlgorithm returns HasSBOMInputSpec.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns HasSBOMInputSpec.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetDigest() string { return v.Digest }

// GetDownloadLocation returns HasSBOMInputSpec.DownloadLocation, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetDownloadLocation() string { return v.DownloadLocation }

// GetKnownSince returns HasSBOMInputSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetKnownSince() time.Time { return v.KnownSince }

// GetOrigin returns HasSBOMInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HasSBOMInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns HasSBOMInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetDocumentRef() string { return v.DocumentRef }

// HasSBOMListHasSBOMListHasSBOMConnection includes the requested fields of the GraphQL type HasSBOMConnection.
// The GraphQL type's documentation follows.
//
// HasSBOMConnection returns the paginated results for HasSBOM.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the HasSBOMEdge which contains the current cursor
// and the HasSBOM node itself
type HasSBOMListHasSBOMListHasSBOMConnection struct {
	TotalCount int                                                       `json:"totalCount"`
	Edges      []HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdge `json:"edges"`
	PageInfo   HasSBOMListHasSBOMListHasSBOMConnectionPageInfo           `json:"pageInfo"`
}

// GetTotalCount returns HasSBOMListHasSBOMListHasSBOMConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns HasSBOMListHasSBOMListHasSBOMConnection.Edges, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnection) GetEdges() []HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdge {
	return v.Edges
}

// GetPageInfo returns HasSBOMListHasSBOMListHasSBOMConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnection) GetPageInfo() HasSBOMListHasSBOMListHasSBOMConnectionPageInfo {
	return v.PageInfo
}

// HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdge includes the requested fields of the GraphQL type HasSBOMEdge.
// The GraphQL type's documentation follows.
//
// HasSBOMEdge contains the cursor for the resulting node and
// the HasSBOMEdge node itself.
type HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdge struct {
	Cursor string                                                             `json:"cursor"`
	Node   HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM `json:"node"`
}

// GetCursor returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdge.Cursor, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdge) GetCursor() string { return v.Cursor }

// GetNode returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdge.Node, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdge) GetNode() HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM {
	return v.Node
}

// HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM struct {
	AllHasSBOMTree `json:"-"`
}

// GetId returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetId() string {
	return v.AllHasSBOMTree.Id
}

// GetSubject returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetUri() string {
	return v.AllHasSBOMTree.Uri
}

// GetAlgorithm returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetAlgorithm() string {
	return v.AllHasSBOMTree.Algorithm
}

// GetDigest returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetDigest() string {
	return v.AllHasSBOMTree.Digest
}

// GetDownloadLocation returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetDownloadLocation() string {
	return v.AllHasSBOMTree.DownloadLocation
}

// GetOrigin returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetOrigin() string {
	return v.AllHasSBOMTree.Origin
}

// GetCollector returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetCollector() string {
	return v.AllHasSBOMTree.Collector
}

// GetKnownSince returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetKnownSince() time.Time {
	return v.AllHasSBOMTree.KnownSince
}

// GetIncludedSoftware returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.IncludedSoftware, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetIncludedSoftware() []AllHasSBOMTreeIncludedSoftwarePackageOrArtifact {
	return v.AllHasSBOMTree.IncludedSoftware
}

// GetIncludedDependencies returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.IncludedDependencies, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetIncludedDependencies() []AllHasSBOMTreeIncludedDependenciesIsDependency {
	return v.AllHasSBOMTree.IncludedDependencies
}

// GetIncludedOccurrences returns HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.IncludedOccurrences, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) GetIncludedOccurrences() []AllHasSBOMTreeIncludedOccurrencesIsOccurrence {
	return v.AllHasSBOMTree.IncludedOccurrences
}

func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`

	KnownSince time.Time `json:"knownSince"`

	IncludedSoftware []json.RawMessage `json:"includedSoftware"`

	IncludedDependencies []AllHasSBOMTreeIncludedDependenciesIsDependency `json:"includedDependencies"`

	IncludedOccurrences []AllHasSBOMTreeIncludedOccurrencesIsOccurrence `json:"includedOccurrences"`
}

func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM) __premarshalJSON() (*__premarshalHasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM, error) {
	var retval __premarshalHasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM

	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	retval.KnownSince = v.AllHasSBOMTree.KnownSince
	{

		dst := &retval.IncludedSoftware
		src := v.AllHasSBOMTree.IncludedSoftware
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalAllHasSBOMTreeIncludedSoftwarePackageOrArtifact(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal HasSBOMListHasSBOMListHasSBOMConnectionEdgesHasSBOMEdgeNodeHasSBOM.AllHasSBOMTree.IncludedSoftware: %w", err)
			}
		}
	}
	retval.IncludedDependencies = v.AllHasSBOMTree.IncludedDependencies
	retval.IncludedOccurrences = v.AllHasSBOMTree.IncludedOccurrences
	return &retval, nil
}

// HasSBOMListHasSBOMListHasSBOMConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type HasSBOMListHasSBOMListHasSBOMConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns HasSBOMListHasSBOMListHasSBOMConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns HasSBOMListHasSBOMListHasSBOMConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionPageInfo) GetEndCursor() *string { return v.EndCursor }

// GetHasNextPage returns HasSBOMListHasSBOMListHasSBOMConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *HasSBOMListHasSBOMListHasSBOMConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// HasSBOMListResponse is returned by HasSBOMList on success.
type HasSBOMListResponse struct {
	// Returns a paginated results via HasSBOMConnection
	HasSBOMList *HasSBOMListHasSBOMListHasSBOMConnection `json:"HasSBOMList"`
}

// GetHasSBOMList returns HasSBOMListResponse.HasSBOMList, and is useful for accessing the field via an interface.
func (v *HasSBOMListResponse) GetHasSBOMList() *HasSBOMListHasSBOMListHasSBOMConnection {
	return v.HasSBOMList
}

// HasSBOMSpec allows filtering the list of HasSBOM to return.
//
// Only the package or artifact can be added, not both.
//
// If KnownSince is specified, the returned value will be after or equal to the specified time.
// Any nodes time that is before KnownSince is excluded.
type HasSBOMSpec struct {
	Id                   *string                 `json:"id"`
	Subject              *PackageOrArtifactSpec  `json:"subject"`
	Uri                  *string                 `json:"uri"`
	Algorithm            *string                 `json:"algorithm"`
	Digest               *string                 `json:"digest"`
	DownloadLocation     *string                 `json:"downloadLocation"`
	KnownSince           *time.Time              `json:"knownSince"`
	Origin               *string                 `json:"origin"`
	Collector            *string                 `json:"collector"`
	DocumentRef          *string                 `json:"documentRef"`
	IncludedSoftware     []PackageOrArtifactSpec `json:"includedSoftware"`
	IncludedDependencies []IsDependencySpec      `json:"includedDependencies"`
	IncludedOccurrences  []IsOccurrenceSpec      `json:"includedOccurrences"`
}

// GetId returns HasSBOMSpec.Id, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetId() *string { return v.Id }

// GetSubject returns HasSBOMSpec.Subject, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetSubject() *PackageOrArtifactSpec { return v.Subject }

// GetUri returns HasSBOMSpec.Uri, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetUri() *string { return v.Uri }

// GetAlgorithm returns HasSBOMSpec.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetAlgorithm() *string { return v.Algorithm }

// GetDigest returns HasSBOMSpec.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetDigest() *string { return v.Digest }

// GetDownloadLocation returns HasSBOMSpec.DownloadLocation, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetDownloadLocation() *string { return v.DownloadLocation }

// GetKnownSince returns HasSBOMSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetKnownSince() *time.Time { return v.KnownSince }

// GetOrigin returns HasSBOMSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns HasSBOMSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns HasSBOMSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetDocumentRef() *string { return v.DocumentRef }

// GetIncludedSoftware returns HasSBOMSpec.IncludedSoftware, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetIncludedSoftware() []PackageOrArtifactSpec { return v.IncludedSoftware }

// GetIncludedDependencies returns HasSBOMSpec.IncludedDependencies, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetIncludedDependencies() []IsDependencySpec { return v.IncludedDependencies }

// GetIncludedOccurrences returns HasSBOMSpec.IncludedOccurrences, and is useful for accessing the field via an interface.
func (v *HasSBOMSpec) GetIncludedOccurrences() []IsOccurrenceSpec { return v.IncludedOccurrences }

// HasSBOMsHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type HasSBOMsHasSBOM struct {
	AllHasSBOMTree `json:"-"`
}

// GetId returns HasSBOMsHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns HasSBOMsHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns HasSBOMsHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns HasSBOMsHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns HasSBOMsHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns HasSBOMsHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetDownloadLocation() string { return v.AllHasSBOMTree.DownloadLocation }

// GetOrigin returns HasSBOMsHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns HasSBOMsHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

// GetKnownSince returns HasSBOMsHasSBOM.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetKnownSince() time.Time { return v.AllHasSBOMTree.KnownSince }

// GetIncludedSoftware returns HasSBOMsHasSBOM.IncludedSoftware, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetIncludedSoftware() []AllHasSBOMTreeIncludedSoftwarePackageOrArtifact {
	return v.AllHasSBOMTree.IncludedSoftware
}

// GetIncludedDependencies returns HasSBOMsHasSBOM.IncludedDependencies, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetIncludedDependencies() []AllHasSBOMTreeIncludedDependenciesIsDependency {
	return v.AllHasSBOMTree.IncludedDependencies
}

// GetIncludedOccurrences returns HasSBOMsHasSBOM.IncludedOccurrences, and is useful for accessing the field via an interface.
func (v *HasSBOMsHasSBOM) GetIncludedOccurrences() []AllHasSBOMTreeIncludedOccurrencesIsOccurrence {
	return v.AllHasSBOMTree.IncludedOccurrences
}

func (v *HasSBOMsHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSBOMsHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSBOMsHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSBOMsHasSBOM struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`

	KnownSince time.Time `json:"knownSince"`

	IncludedSoftware []json.RawMessage `json:"includedSoftware"`

	IncludedDependencies []AllHasSBOMTreeIncludedDependenciesIsDependency `json:"includedDependencies"`

	IncludedOccurrences []AllHasSBOMTreeIncludedOccurrencesIsOccurrence `json:"includedOccurrences"`
}

func (v *HasSBOMsHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSBOMsHasSBOM) __premarshalJSON() (*__premarshalHasSBOMsHasSBOM, error) {
	var retval __premarshalHasSBOMsHasSBOM

	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal HasSBOMsHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	retval.KnownSince = v.AllHasSBOMTree.KnownSince
	{

		dst := &retval.IncludedSoftware
		src := v.AllHasSBOMTree.IncludedSoftware
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalAllHasSBOMTreeIncludedSoftwarePackageOrArtifact(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal HasSBOMsHasSBOM.AllHasSBOMTree.IncludedSoftware: %w", err)
			}
		}
	}
	retval.IncludedDependencies = v.AllHasSBOMTree.IncludedDependencies
	retval.IncludedOccurrences = v.AllHasSBOMTree.IncludedOccurrences
	return &retval, nil
}

// HasSBOMsResponse is returned by HasSBOMs on success.
type HasSBOMsResponse struct {
	// Returns all SBOM certifications.
	HasSBOM []HasSBOMsHasSBOM `json:"HasSBOM"`
}

// GetHasSBOM returns HasSBOMsResponse.HasSBOM, and is useful for accessing the field via an interface.
func (v *HasSBOMsResponse) GetHasSBOM() []HasSBOMsHasSBOM { return v.HasSBOM }

// HasSLSAHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type HasSLSAHasSLSA struct {
	AllHasSLSATree `json:"-"`
}

// GetId returns HasSLSAHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *HasSLSAHasSLSA) GetId() string { return v.AllHasSLSATree.Id }

// GetSubject returns HasSLSAHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *HasSLSAHasSLSA) GetSubject() AllHasSLSATreeSubjectArtifact { return v.AllHasSLSATree.Subject }

// GetSlsa returns HasSLSAHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *HasSLSAHasSLSA) GetSlsa() AllHasSLSATreeSlsaSLSA { return v.AllHasSLSATree.Slsa }

func (v *HasSLSAHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSLSAHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSLSAHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSLSAHasSLSA struct {
	Id string `json:"id"`

	Subject AllHasSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllHasSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *HasSLSAHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSLSAHasSLSA) __premarshalJSON() (*__premarshalHasSLSAHasSLSA, error) {
	var retval __premarshalHasSLSAHasSLSA

	retval.Id = v.AllHasSLSATree.Id
	retval.Subject = v.AllHasSLSATree.Subject
	retval.Slsa = v.AllHasSLSATree.Slsa
	return &retval, nil
}

// HasSLSAListHasSLSAListHasSLSAConnection includes the requested fields of the GraphQL type HasSLSAConnection.
// The GraphQL type's documentation follows.
//
// HasSLSAConnection returns the paginated results for HasSLSA.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the HasSLSAEdge which contains the current cursor
// and the HasSLSA node itself
type HasSLSAListHasSLSAListHasSLSAConnection struct {
	TotalCount int                                                       `json:"totalCount"`
	Edges      []HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdge `json:"edges"`
	PageInfo   HasSLSAListHasSLSAListHasSLSAConnectionPageInfo           `json:"pageInfo"`
}

// GetTotalCount returns HasSLSAListHasSLSAListHasSLSAConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns HasSLSAListHasSLSAListHasSLSAConnection.Edges, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnection) GetEdges() []HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdge {
	return v.Edges
}

// GetPageInfo returns HasSLSAListHasSLSAListHasSLSAConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnection) GetPageInfo() HasSLSAListHasSLSAListHasSLSAConnectionPageInfo {
	return v.PageInfo
}

// HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdge includes the requested fields of the GraphQL type HasSLSAEdge.
// The GraphQL type's documentation follows.
//
// HasSLSAEdge contains the cursor for the resulting node and
// the HasSLSA node itself.
type HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdge struct {
	Cursor string                                                             `json:"cursor"`
	Node   HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA `json:"node"`
}

// GetCursor returns HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdge.Cursor, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdge) GetCursor() string { return v.Cursor }

// GetNode returns HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdge.Node, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdge) GetNode() HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA {
	return v.Node
}

// HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA struct {
	AllHasSLSATree `json:"-"`
}

// GetId returns HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA) GetId() string {
	return v.AllHasSLSATree.Id
}

// GetSubject returns HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA) GetSubject() AllHasSLSATreeSubjectArtifact {
	return v.AllHasSLSATree.Subject
}

// GetSlsa returns HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA) GetSlsa() AllHasSLSATreeSlsaSLSA {
	return v.AllHasSLSATree.Slsa
}

func (v *HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA struct {
	Id string `json:"id"`

	Subject AllHasSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllHasSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA) __premarshalJSON() (*__premarshalHasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA, error) {
	var retval __premarshalHasSLSAListHasSLSAListHasSLSAConnectionEdgesHasSLSAEdgeNodeHasSLSA

	retval.Id = v.AllHasSLSATree.Id
	retval.Subject = v.AllHasSLSATree.Subject
	retval.Slsa = v.AllHasSLSATree.Slsa
	return &retval, nil
}

// HasSLSAListHasSLSAListHasSLSAConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type HasSLSAListHasSLSAListHasSLSAConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns HasSLSAListHasSLSAListHasSLSAConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns HasSLSAListHasSLSAListHasSLSAConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnectionPageInfo) GetEndCursor() *string { return v.EndCursor }

// GetHasNextPage returns HasSLSAListHasSLSAListHasSLSAConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *HasSLSAListHasSLSAListHasSLSAConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// HasSLSAListResponse is returned by HasSLSAList on success.
type HasSLSAListResponse struct {
	// Returns a paginated results via HasSLSAConnection
	HasSLSAList *HasSLSAListHasSLSAListHasSLSAConnection `json:"HasSLSAList"`
}

// GetHasSLSAList returns HasSLSAListResponse.HasSLSAList, and is useful for accessing the field via an interface.
func (v *HasSLSAListResponse) GetHasSLSAList() *HasSLSAListHasSLSAListHasSLSAConnection {
	return v.HasSLSAList
}

// HasSLSAResponse is returned by HasSLSA on success.
type HasSLSAResponse struct {
	// Returns all SLSA attestations matching the filter.
	HasSLSA []HasSLSAHasSLSA `json:"HasSLSA"`
}

// GetHasSLSA returns HasSLSAResponse.HasSLSA, and is useful for accessing the field via an interface.
func (v *HasSLSAResponse) GetHasSLSA() []HasSLSAHasSLSA { return v.HasSLSA }

// HasSLSASpec allows filtering the list of HasSLSA to return.
type HasSLSASpec struct {
	Id          *string             `json:"id"`
	Subject     *ArtifactSpec       `json:"subject"`
	BuiltFrom   []ArtifactSpec      `json:"builtFrom"`
	BuiltBy     *BuilderSpec        `json:"builtBy"`
	BuildType   *string             `json:"buildType"`
	Predicate   []SLSAPredicateSpec `json:"predicate"`
	SlsaVersion *string             `json:"slsaVersion"`
	StartedOn   *time.Time          `json:"startedOn"`
	FinishedOn  *time.Time          `json:"finishedOn"`
	Origin      *string             `json:"origin"`
	Collector   *string             `json:"collector"`
	DocumentRef *string             `json:"documentRef"`
}

// GetId returns HasSLSASpec.Id, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetId() *string { return v.Id }

// GetSubject returns HasSLSASpec.Subject, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetSubject() *ArtifactSpec { return v.Subject }

// GetBuiltFrom returns HasSLSASpec.BuiltFrom, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetBuiltFrom() []ArtifactSpec { return v.BuiltFrom }

// GetBuiltBy returns HasSLSASpec.BuiltBy, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetBuiltBy() *BuilderSpec { return v.BuiltBy }

// GetBuildType returns HasSLSASpec.BuildType, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetBuildType() *string { return v.BuildType }

// GetPredicate returns HasSLSASpec.Predicate, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetPredicate() []SLSAPredicateSpec { return v.Predicate }

// GetSlsaVersion returns HasSLSASpec.SlsaVersion, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetSlsaVersion() *string { return v.SlsaVersion }

// GetStartedOn returns HasSLSASpec.StartedOn, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetStartedOn() *time.Time { return v.StartedOn }

// GetFinishedOn returns HasSLSASpec.FinishedOn, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetFinishedOn() *time.Time { return v.FinishedOn }

// GetOrigin returns HasSLSASpec.Origin, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetOrigin() *string { return v.Origin }

// GetCollector returns HasSLSASpec.Collector, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns HasSLSASpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *HasSLSASpec) GetDocumentRef() *string { return v.DocumentRef }

// HasSourceAtHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type HasSourceAtHasSourceAt struct {
	AllHasSourceAt `json:"-"`
}

// GetId returns HasSourceAtHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *HasSourceAtHasSourceAt) GetId() string { return v.AllHasSourceAt.Id }

// GetJustification returns HasSourceAtHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *HasSourceAtHasSourceAt) GetJustification() string { return v.AllHasSourceAt.Justification }

// GetKnownSince returns HasSourceAtHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSourceAtHasSourceAt) GetKnownSince() time.Time { return v.AllHasSourceAt.KnownSince }

// GetPackage returns HasSourceAtHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *HasSourceAtHasSourceAt) GetPackage() AllHasSourceAtPackage { return v.AllHasSourceAt.Package }

// GetSource returns HasSourceAtHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *HasSourceAtHasSourceAt) GetSource() AllHasSourceAtSource { return v.AllHasSourceAt.Source }

// GetOrigin returns HasSourceAtHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *HasSourceAtHasSourceAt) GetOrigin() string { return v.AllHasSourceAt.Origin }

// GetCollector returns HasSourceAtHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *HasSourceAtHasSourceAt) GetCollector() string { return v.AllHasSourceAt.Collector }

func (v *HasSourceAtHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSourceAtHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSourceAtHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSourceAtHasSourceAt struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasSourceAtHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSourceAtHasSourceAt) __premarshalJSON() (*__premarshalHasSourceAtHasSourceAt, error) {
	var retval __premarshalHasSourceAtHasSourceAt

	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// HasSourceAtInputSpec is the same as HasSourceAt but for mutation input.
type HasSourceAtInputSpec struct {
	KnownSince    time.Time `json:"knownSince"`
	Justification string    `json:"justification"`
	Origin        string    `json:"origin"`
	Collector     string    `json:"collector"`
	DocumentRef   string    `json:"documentRef"`
}

// GetKnownSince returns HasSourceAtInputSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetKnownSince() time.Time { return v.KnownSince }

// GetJustification returns HasSourceAtInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns HasSourceAtInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HasSourceAtInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns HasSourceAtInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetDocumentRef() string { return v.DocumentRef }

// HasSourceAtListHasSourceAtListHasSourceAtConnection includes the requested fields of the GraphQL type HasSourceAtConnection.
// The GraphQL type's documentation follows.
//
// HasSourceAtConnection returns the paginated results for HasSourceAt.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the HasSourceAtEdge which contains the current cursor
// and the HasSourceAt node itself
type HasSourceAtListHasSourceAtListHasSourceAtConnection struct {
	TotalCount int                                                                       `json:"totalCount"`
	Edges      []HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdge `json:"edges"`
	PageInfo   HasSourceAtListHasSourceAtListHasSourceAtConnectionPageInfo               `json:"pageInfo"`
}

// GetTotalCount returns HasSourceAtListHasSourceAtListHasSourceAtConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns HasSourceAtListHasSourceAtListHasSourceAtConnection.Edges, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnection) GetEdges() []HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdge {
	return v.Edges
}

// GetPageInfo returns HasSourceAtListHasSourceAtListHasSourceAtConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnection) GetPageInfo() HasSourceAtListHasSourceAtListHasSourceAtConnectionPageInfo {
	return v.PageInfo
}

// HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdge includes the requested fields of the GraphQL type HasSourceAtEdge.
// The GraphQL type's documentation follows.
//
// HasSourceAtEdge contains the cursor for the resulting node and
// the HasSourceAt node itself.
type HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdge struct {
	Cursor string                                                                                 `json:"cursor"`
	Node   HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt `json:"node"`
}

// GetCursor returns HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdge.Cursor, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdge.Node, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdge) GetNode() HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt {
	return v.Node
}

// HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt struct {
	AllHasSourceAt `json:"-"`
}

// GetId returns HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt) GetId() string {
	return v.AllHasSourceAt.Id
}

// GetJustification returns HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt) GetJustification() string {
	return v.AllHasSourceAt.Justification
}

// GetKnownSince returns HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt) GetKnownSince() time.Time {
	return v.AllHasSourceAt.KnownSince
}

// GetPackage returns HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt) GetPackage() AllHasSourceAtPackage {
	return v.AllHasSourceAt.Package
}

// GetSource returns HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt) GetSource() AllHasSourceAtSource {
	return v.AllHasSourceAt.Source
}

// GetOrigin returns HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt) GetOrigin() string {
	return v.AllHasSourceAt.Origin
}

// GetCollector returns HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt) GetCollector() string {
	return v.AllHasSourceAt.Collector
}

func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt) __premarshalJSON() (*__premarshalHasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt, error) {
	var retval __premarshalHasSourceAtListHasSourceAtListHasSourceAtConnectionEdgesHasSourceAtEdgeNodeHasSourceAt

	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// HasSourceAtListHasSourceAtListHasSourceAtConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type HasSourceAtListHasSourceAtListHasSourceAtConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns HasSourceAtListHasSourceAtListHasSourceAtConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns HasSourceAtListHasSourceAtListHasSourceAtConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns HasSourceAtListHasSourceAtListHasSourceAtConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *HasSourceAtListHasSourceAtListHasSourceAtConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// HasSourceAtListResponse is returned by HasSourceAtList on success.
type HasSourceAtListResponse struct {
	// Returns a paginated results via HasSourceAtConnection
	HasSourceAtList *HasSourceAtListHasSourceAtListHasSourceAtConnection `json:"HasSourceAtList"`
}

// GetHasSourceAtList returns HasSourceAtListResponse.HasSourceAtList, and is useful for accessing the field via an interface.
func (v *HasSourceAtListResponse) GetHasSourceAtList() *HasSourceAtListHasSourceAtListHasSourceAtConnection {
	return v.HasSourceAtList
}

// HasSourceAtResponse is returned by HasSourceAt on success.
type HasSourceAtResponse struct {
	// Returns all source mappings that match the filter.
	HasSourceAt []HasSourceAtHasSourceAt `json:"HasSourceAt"`
}

// GetHasSourceAt returns HasSourceAtResponse.HasSourceAt, and is useful for accessing the field via an interface.
func (v *HasSourceAtResponse) GetHasSourceAt() []HasSourceAtHasSourceAt { return v.HasSourceAt }

// HasSourceAtSpec allows filtering the list of HasSourceAt to return.
type HasSourceAtSpec struct {
	Id            *string     `json:"id"`
	Package       *PkgSpec    `json:"package"`
	Source        *SourceSpec `json:"source"`
	KnownSince    *time.Time  `json:"knownSince"`
	Justification *string     `json:"justification"`
	Origin        *string     `json:"origin"`
	Collector     *string     `json:"collector"`
	DocumentRef   *string     `json:"documentRef"`
}

// GetId returns HasSourceAtSpec.Id, and is useful for accessing the field via an interface.
func (v *HasSourceAtSpec) GetId() *string { return v.Id }

// GetPackage returns HasSourceAtSpec.Package, and is useful for accessing the field via an interface.
func (v *HasSourceAtSpec) GetPackage() *PkgSpec { return v.Package }

// GetSource returns HasSourceAtSpec.Source, and is useful for accessing the field via an interface.
func (v *HasSourceAtSpec) GetSource() *SourceSpec { return v.Source }

// GetKnownSince returns HasSourceAtSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSourceAtSpec) GetKnownSince() *time.Time { return v.KnownSince }

// GetJustification returns HasSourceAtSpec.Justification, and is useful for accessing the field via an interface.
func (v *HasSourceAtSpec) GetJustification() *string { return v.Justification }

// GetOrigin returns HasSourceAtSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasSourceAtSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns HasSourceAtSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasSourceAtSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns HasSourceAtSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *HasSourceAtSpec) GetDocumentRef() *string { return v.DocumentRef }

// HashEqualInputSpec represents the input to certify that packages are similar.
type HashEqualInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
	DocumentRef   string `json:"documentRef"`
}

// GetJustification returns HashEqualInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *HashEqualInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns HashEqualInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HashEqualInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HashEqualInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HashEqualInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns HashEqualInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *HashEqualInputSpec) GetDocumentRef() string { return v.DocumentRef }

// HashEqualListHashEqualListHashEqualConnection includes the requested fields of the GraphQL type HashEqualConnection.
// The GraphQL type's documentation follows.
//
// HashEqualConnection returns the paginated results for HashEqual.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the HashEqualEdge which contains the current cursor
// and the HashEqual node itself
type HashEqualListHashEqualListHashEqualConnection struct {
	TotalCount int                                                               `json:"totalCount"`
	Edges      []HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdge `json:"edges"`
	PageInfo   HashEqualListHashEqualListHashEqualConnectionPageInfo             `json:"pageInfo"`
}

// GetTotalCount returns HashEqualListHashEqualListHashEqualConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns HashEqualListHashEqualListHashEqualConnection.Edges, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnection) GetEdges() []HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdge {
	return v.Edges
}

// GetPageInfo returns HashEqualListHashEqualListHashEqualConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnection) GetPageInfo() HashEqualListHashEqualListHashEqualConnectionPageInfo {
	return v.PageInfo
}

// HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdge includes the requested fields of the GraphQL type HashEqualEdge.
// The GraphQL type's documentation follows.
//
// HashEqualEdge contains the cursor for the resulting node and
// the HashEqual node itself.
type HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdge struct {
	Cursor string                                                                       `json:"cursor"`
	Node   HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual `json:"node"`
}

// GetCursor returns HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdge.Cursor, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdge.Node, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdge) GetNode() HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual {
	return v.Node
}

// HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that two artifacts are identical.
type HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual struct {
	AllHashEqualTree `json:"-"`
}

// GetId returns HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual.Id, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual) GetId() string {
	return v.AllHashEqualTree.Id
}

// GetJustification returns HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual) GetJustification() string {
	return v.AllHashEqualTree.Justification
}

// GetArtifacts returns HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual) GetOrigin() string {
	return v.AllHashEqualTree.Origin
}

// GetCollector returns HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual) GetCollector() string {
	return v.AllHashEqualTree.Collector
}

func (v *HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual) __premarshalJSON() (*__premarshalHashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual, error) {
	var retval __premarshalHashEqualListHashEqualListHashEqualConnectionEdgesHashEqualEdgeNodeHashEqual

	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// HashEqualListHashEqualListHashEqualConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type HashEqualListHashEqualListHashEqualConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns HashEqualListHashEqualListHashEqualConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns HashEqualListHashEqualListHashEqualConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns HashEqualListHashEqualListHashEqualConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *HashEqualListHashEqualListHashEqualConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// HashEqualListResponse is returned by HashEqualList on success.
type HashEqualListResponse struct {
	// Returns a paginated results via HashEqualConnection
	HashEqualList *HashEqualListHashEqualListHashEqualConnection `json:"HashEqualList"`
}

// GetHashEqualList returns HashEqualListResponse.HashEqualList, and is useful for accessing the field via an interface.
func (v *HashEqualListResponse) GetHashEqualList() *HashEqualListHashEqualListHashEqualConnection {
	return v.HashEqualList
}

// HashEqualSpec allows filtering the list of artifact equality statements to
// return in a query.
//
// Specifying just one artifact allows to query for all similar artifacts (if any
// exists).
type HashEqualSpec struct {
	Id            *string         `json:"id"`
	Artifacts     []*ArtifactSpec `json:"artifacts"`
	Justification *string         `json:"justification"`
	Origin        *string         `json:"origin"`
	Collector     *string         `json:"collector"`
	DocumentRef   *string         `json:"documentRef"`
}

// GetId returns HashEqualSpec.Id, and is useful for accessing the field via an interface.
func (v *HashEqualSpec) GetId() *string { return v.Id }

// GetArtifacts returns HashEqualSpec.Artifacts, and is useful for accessing the field via an interface.
func (v *HashEqualSpec) GetArtifacts() []*ArtifactSpec { return v.Artifacts }

// GetJustification returns HashEqualSpec.Justification, and is useful for accessing the field via an interface.
func (v *HashEqualSpec) GetJustification() *string { return v.Justification }

// GetOrigin returns HashEqualSpec.Origin, and is useful for accessing the field via an interface.
func (v *HashEqualSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns HashEqualSpec.Collector, and is useful for accessing the field via an interface.
func (v *HashEqualSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns HashEqualSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *HashEqualSpec) GetDocumentRef() *string { return v.DocumentRef }

// HashEqualsHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that two artifacts are identical.
type HashEqualsHashEqual struct {
	AllHashEqualTree `json:"-"`
}

// GetId returns HashEqualsHashEqual.Id, and is useful for accessing the field via an interface.
func (v *HashEqualsHashEqual) GetId() string { return v.AllHashEqualTree.Id }

// GetJustification returns HashEqualsHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *HashEqualsHashEqual) GetJustification() string { return v.AllHashEqualTree.Justification }

// GetArtifacts returns HashEqualsHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *HashEqualsHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns HashEqualsHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *HashEqualsHashEqual) GetOrigin() string { return v.AllHashEqualTree.Origin }

// GetCollector returns HashEqualsHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *HashEqualsHashEqual) GetCollector() string { return v.AllHashEqualTree.Collector }

func (v *HashEqualsHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HashEqualsHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.HashEqualsHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHashEqualsHashEqual struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HashEqualsHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HashEqualsHashEqual) __premarshalJSON() (*__premarshalHashEqualsHashEqual, error) {
	var retval __premarshalHashEqualsHashEqual

	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// HashEqualsResponse is returned by HashEquals on success.
type HashEqualsResponse struct {
	// Returns all artifact equality statements matching a filter.
	HashEqual []HashEqualsHashEqual `json:"HashEqual"`
}

// GetHashEqual returns HashEqualsResponse.HashEqual, and is useful for accessing the field via an interface.
func (v *HashEqualsResponse) GetHashEqual() []HashEqualsHashEqual { return v.HashEqual }

// IDorArtifactInput allows for specifying either the artifact ID or the ArtifactInputSpec.
//
// Either the ID or the ArtifactInputSpec must be specified. Both cannot be nil.
//
// If the ID is specified, the ArtifactInputSpec is not used.
type IDorArtifactInput struct {
	ArtifactID    *string            `json:"artifactID"`
	ArtifactInput *ArtifactInputSpec `json:"artifactInput"`
}

// GetArtifactID returns IDorArtifactInput.ArtifactID, and is useful for accessing the field via an interface.
func (v *IDorArtifactInput) GetArtifactID() *string { return v.ArtifactID }

// GetArtifactInput returns IDorArtifactInput.ArtifactInput, and is useful for accessing the field via an interface.
func (v *IDorArtifactInput) GetArtifactInput() *ArtifactInputSpec { return v.ArtifactInput }

// IDorBuilderInput allows for specifying either the builder ID or the BuilderInputSpec.
//
// Either the ID or the BuilderInputSpec must be specified. Both cannot be nil.
//
// If the ID is specified, the BuilderInputSpec is not used.
type IDorBuilderInput struct {
	BuilderID    *string           `json:"builderID"`
	BuilderInput *BuilderInputSpec `json:"builderInput"`
}

// GetBuilderID returns IDorBuilderInput.BuilderID, and is useful for accessing the field via an interface.
func (v *IDorBuilderInput) GetBuilderID() *string { return v.BuilderID }

// GetBuilderInput returns IDorBuilderInput.BuilderInput, and is useful for accessing the field via an interface.
func (v *IDorBuilderInput) GetBuilderInput() *BuilderInputSpec { return v.BuilderInput }

// IDorLicenseInput allows for specifying either the license ID or the LicenseInputSpec.
//
// Either the ID or the LicenseInputSpec must be specified. Both cannot be nil.
//
// If the ID is specified, the LicenseInputSpec is not used.
type IDorLicenseInput struct {
	LicenseID    *string           `json:"licenseID"`
	LicenseInput *LicenseInputSpec `json:"licenseInput"`
}

// GetLicenseID returns IDorLicenseInput.LicenseID, and is useful for accessing the field via an interface.
func (v *IDorLicenseInput) GetLicenseID() *string { return v.LicenseID }

// GetLicenseInput returns IDorLicenseInput.LicenseInput, and is useful for accessing the field via an interface.
func (v *IDorLicenseInput) GetLicenseInput() *LicenseInputSpec { return v.LicenseInput }

// IDorPkgInput allows for specifying either the package IDs or the PkgInputSpec.
//
// Either the IDs or the PkgInputSpec must be specified. Both cannot be nil.
//
// If the IDs are specified, the PkgInputSpec is not used.
type IDorPkgInput struct {
	PackageTypeID      *string       `json:"packageTypeID"`
	PackageNamespaceID *string       `json:"packageNamespaceID"`
	PackageNameID      *string       `json:"packageNameID"`
	PackageVersionID   *string       `json:"packageVersionID"`
	PackageInput       *PkgInputSpec `json:"packageInput"`
}

// GetPackageTypeID returns IDorPkgInput.PackageTypeID, and is useful for accessing the field via an interface.
func (v *IDorPkgInput) GetPackageTypeID() *string { return v.PackageTypeID }

// GetPackageNamespaceID returns IDorPkgInput.PackageNamespaceID, and is useful for accessing the field via an interface.
func (v *IDorPkgInput) GetPackageNamespaceID() *string { return v.PackageNamespaceID }

// GetPackageNameID returns IDorPkgInput.PackageNameID, and is useful for accessing the field via an interface.
func (v *IDorPkgInput) GetPackageNameID() *string { return v.PackageNameID }

// GetPackageVersionID returns IDorPkgInput.PackageVersionID, and is useful for accessing the field via an interface.
func (v *IDorPkgInput) GetPackageVersionID() *string { return v.PackageVersionID }

// GetPackageInput returns IDorPkgInput.PackageInput, and is useful for accessing the field via an interface.
func (v *IDorPkgInput) GetPackageInput() *PkgInputSpec { return v.PackageInput }

// IDorSourceInput allows for specifying either the source IDs or the SourceInputSpec.
//
// Either the IDs or the SourceInputSpec must be specified. Both cannot be nil.
//
// If the IDs are specified, the SourceInputSpec is not used.
type IDorSourceInput struct {
	SourceTypeID      *string          `json:"sourceTypeID"`
	SourceNamespaceID *string          `json:"sourceNamespaceID"`
	SourceNameID      *string          `json:"sourceNameID"`
	SourceInput       *SourceInputSpec `json:"sourceInput"`
}

// GetSourceTypeID returns IDorSourceInput.SourceTypeID, and is useful for accessing the field via an interface.
func (v *IDorSourceInput) GetSourceTypeID() *string { return v.SourceTypeID }

// GetSourceNamespaceID returns IDorSourceInput.SourceNamespaceID, and is useful for accessing the field via an interface.
func (v *IDorSourceInput) GetSourceNamespaceID() *string { return v.SourceNamespaceID }

// GetSourceNameID returns IDorSourceInput.SourceNameID, and is useful for accessing the field via an interface.
func (v *IDorSourceInput) GetSourceNameID() *string { return v.SourceNameID }

// GetSourceInput returns IDorSourceInput.SourceInput, and is useful for accessing the field via an interface.
func (v *IDorSourceInput) GetSourceInput() *SourceInputSpec { return v.SourceInput }

// IDorVulnerabilityInput allows for specifying either the vulnerability IDs or the VulnerabilityInputSpec.
//
// Either the IDs or the VulnerabilityInputSpec must be specified. Both cannot be nil.
//
// If the IDs are specified, the VulnerabilityInputSpec is not used.
type IDorVulnerabilityInput struct {
	VulnerabilityTypeID *string                 `json:"vulnerabilityTypeID"`
	VulnerabilityNodeID *string                 `json:"vulnerabilityNodeID"`
	VulnerabilityInput  *VulnerabilityInputSpec `json:"vulnerabilityInput"`
}

// GetVulnerabilityTypeID returns IDorVulnerabilityInput.VulnerabilityTypeID, and is useful for accessing the field via an interface.
func (v *IDorVulnerabilityInput) GetVulnerabilityTypeID() *string { return v.VulnerabilityTypeID }

// GetVulnerabilityNodeID returns IDorVulnerabilityInput.VulnerabilityNodeID, and is useful for accessing the field via an interface.
func (v *IDorVulnerabilityInput) GetVulnerabilityNodeID() *string { return v.VulnerabilityNodeID }

// GetVulnerabilityInput returns IDorVulnerabilityInput.VulnerabilityInput, and is useful for accessing the field via an interface.
func (v *IDorVulnerabilityInput) GetVulnerabilityInput() *VulnerabilityInputSpec {
	return v.VulnerabilityInput
}

// IngestArtifactResponse is returned by IngestArtifact on success.
type IngestArtifactResponse struct {
	// Ingests a new artifact and returns it.
	IngestArtifact string `json:"ingestArtifact"`
}

// GetIngestArtifact returns IngestArtifactResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *IngestArtifactResponse) GetIngestArtifact() string { return v.IngestArtifact }

// IngestArtifactsResponse is returned by IngestArtifacts on success.
type IngestArtifactsResponse struct {
	// Bulk ingests new artifacts and returns a list of them. The returned array of IDs must be in the same order as the inputs.
	IngestArtifacts []string `json:"ingestArtifacts"`
}

// GetIngestArtifacts returns IngestArtifactsResponse.IngestArtifacts, and is useful for accessing the field via an interface.
func (v *IngestArtifactsResponse) GetIngestArtifacts() []string { return v.IngestArtifacts }

// IngestBuilderResponse is returned by IngestBuilder on success.
type IngestBuilderResponse struct {
	// Ingests a new builder and returns it.
	IngestBuilder string `json:"ingestBuilder"`
}

// GetIngestBuilder returns IngestBuilderResponse.IngestBuilder, and is useful for accessing the field via an interface.
func (v *IngestBuilderResponse) GetIngestBuilder() string { return v.IngestBuilder }

// IngestBuildersResponse is returned by IngestBuilders on success.
type IngestBuildersResponse struct {
	// Bulk ingests new builders and returns a list of them. The returned array of IDs must be in the same order as the inputs.
	IngestBuilders []string `json:"ingestBuilders"`
}

// GetIngestBuilders returns IngestBuildersResponse.IngestBuilders, and is useful for accessing the field via an interface.
func (v *IngestBuildersResponse) GetIngestBuilders() []string { return v.IngestBuilders }

// IngestBulkVulnHasMetadataResponse is returned by IngestBulkVulnHasMetadata on success.
type IngestBulkVulnHasMetadataResponse struct {
	// Bulk add certifications that vulnerability has a specific score. The returned array of IDs can be a an array of empty string.
	IngestBulkVulnerabilityMetadata []string `json:"ingestBulkVulnerabilityMetadata"`
}

// GetIngestBulkVulnerabilityMetadata returns IngestBulkVulnHasMetadataResponse.IngestBulkVulnerabilityMetadata, and is useful for accessing the field via an interface.
func (v *IngestBulkVulnHasMetadataResponse) GetIngestBulkVulnerabilityMetadata() []string {
	return v.IngestBulkVulnerabilityMetadata
}

// IngestCertifyBadArtifactResponse is returned by IngestCertifyBadArtifact on success.
type IngestCertifyBadArtifactResponse struct {
	// Adds a certification that a package, source or artifact is considered bad. The returned ID can be empty string.
	IngestCertifyBad string `json:"ingestCertifyBad"`
}

// GetIngestCertifyBad returns IngestCertifyBadArtifactResponse.IngestCertifyBad, and is useful for accessing the field via an interface.
func (v *IngestCertifyBadArtifactResponse) GetIngestCertifyBad() string { return v.IngestCertifyBad }

// IngestCertifyBadArtifactsResponse is returned by IngestCertifyBadArtifacts on success.
type IngestCertifyBadArtifactsResponse struct {
	// Adds bulk certifications that a package, source or artifact is considered bad. The returned array of IDs can be a an array of empty string.
	IngestCertifyBads []string `json:"ingestCertifyBads"`
}

// GetIngestCertifyBads returns IngestCertifyBadArtifactsResponse.IngestCertifyBads, and is useful for accessing the field via an interface.
func (v *IngestCertifyBadArtifactsResponse) GetIngestCertifyBads() []string {
	return v.IngestCertifyBads
}

// IngestCertifyBadPkgResponse is returned by IngestCertifyBadPkg on success.
type IngestCertifyBadPkgResponse struct {
	// Adds a certification that a package, source or artifact is considered bad. The returned ID can be empty string.
	IngestCertifyBad string `json:"ingestCertifyBad"`
}

// GetIngestCertifyBad returns IngestCertifyBadPkgResponse.IngestCertifyBad, and is useful for accessing the field via an interface.
func (v *IngestCertifyBadPkgResponse) GetIngestCertifyBad() string { return v.IngestCertifyBad }

// IngestCertifyBadPkgsResponse is returned by IngestCertifyBadPkgs on success.
type IngestCertifyBadPkgsResponse struct {
	// Adds bulk certifications that a package, source or artifact is considered bad. The returned array of IDs can be a an array of empty string.
	IngestCertifyBads []string `json:"ingestCertifyBads"`
}

// GetIngestCertifyBads returns IngestCertifyBadPkgsResponse.IngestCertifyBads, and is useful for accessing the field via an interface.
func (v *IngestCertifyBadPkgsResponse) GetIngestCertifyBads() []string { return v.IngestCertifyBads }

// IngestCertifyBadSrcResponse is returned by IngestCertifyBadSrc on success.
type IngestCertifyBadSrcResponse struct {
	// Adds a certification that a package, source or artifact is considered bad. The returned ID can be empty string.
	IngestCertifyBad string `json:"ingestCertifyBad"`
}

// GetIngestCertifyBad returns IngestCertifyBadSrcResponse.IngestCertifyBad, and is useful for accessing the field via an interface.
func (v *IngestCertifyBadSrcResponse) GetIngestCertifyBad() string { return v.IngestCertifyBad }

// IngestCertifyBadSrcsResponse is returned by IngestCertifyBadSrcs on success.
type IngestCertifyBadSrcsResponse struct {
	// Adds bulk certifications that a package, source or artifact is considered bad. The returned array of IDs can be a an array of empty string.
	IngestCertifyBads []string `json:"ingestCertifyBads"`
}

// GetIngestCertifyBads returns IngestCertifyBadSrcsResponse.IngestCertifyBads, and is useful for accessing the field via an interface.
func (v *IngestCertifyBadSrcsResponse) GetIngestCertifyBads() []string { return v.IngestCertifyBads }

// IngestCertifyGoodArtifactResponse is returned by IngestCertifyGoodArtifact on success.
type IngestCertifyGoodArtifactResponse struct {
	// Adds a certification that a package, source or artifact is considered good. The returned ID can be empty string.
	IngestCertifyGood string `json:"ingestCertifyGood"`
}

// GetIngestCertifyGood returns IngestCertifyGoodArtifactResponse.IngestCertifyGood, and is useful for accessing the field via an interface.
func (v *IngestCertifyGoodArtifactResponse) GetIngestCertifyGood() string { return v.IngestCertifyGood }

// IngestCertifyGoodArtifactsResponse is returned by IngestCertifyGoodArtifacts on success.
type IngestCertifyGoodArtifactsResponse struct {
	// Adds bulk certifications that a package, source or artifact is considered good. The returned array of IDs can be a an array of empty string.
	IngestCertifyGoods []string `json:"ingestCertifyGoods"`
}

// GetIngestCertifyGoods returns IngestCertifyGoodArtifactsResponse.IngestCertifyGoods, and is useful for accessing the field via an interface.
func (v *IngestCertifyGoodArtifactsResponse) GetIngestCertifyGoods() []string {
	return v.IngestCertifyGoods
}

// IngestCertifyGoodPkgResponse is returned by IngestCertifyGoodPkg on success.
type IngestCertifyGoodPkgResponse struct {
	// Adds a certification that a package, source or artifact is considered good. The returned ID can be empty string.
	IngestCertifyGood string `json:"ingestCertifyGood"`
}

// GetIngestCertifyGood returns IngestCertifyGoodPkgResponse.IngestCertifyGood, and is useful for accessing the field via an interface.
func (v *IngestCertifyGoodPkgResponse) GetIngestCertifyGood() string { return v.IngestCertifyGood }

// IngestCertifyGoodPkgsResponse is returned by IngestCertifyGoodPkgs on success.
type IngestCertifyGoodPkgsResponse struct {
	// Adds bulk certifications that a package, source or artifact is considered good. The returned array of IDs can be a an array of empty string.
	IngestCertifyGoods []string `json:"ingestCertifyGoods"`
}

// GetIngestCertifyGoods returns IngestCertifyGoodPkgsResponse.IngestCertifyGoods, and is useful for accessing the field via an interface.
func (v *IngestCertifyGoodPkgsResponse) GetIngestCertifyGoods() []string { return v.IngestCertifyGoods }

// IngestCertifyGoodSrcResponse is returned by IngestCertifyGoodSrc on success.
type IngestCertifyGoodSrcResponse struct {
	// Adds a certification that a package, source or artifact is considered good. The returned ID can be empty string.
	IngestCertifyGood string `json:"ingestCertifyGood"`
}

// GetIngestCertifyGood returns IngestCertifyGoodSrcResponse.IngestCertifyGood, and is useful for accessing the field via an interface.
func (v *IngestCertifyGoodSrcResponse) GetIngestCertifyGood() string { return v.IngestCertifyGood }

// IngestCertifyGoodSrcsResponse is returned by IngestCertifyGoodSrcs on success.
type IngestCertifyGoodSrcsResponse struct {
	// Adds bulk certifications that a package, source or artifact is considered good. The returned array of IDs can be a an array of empty string.
	IngestCertifyGoods []string `json:"ingestCertifyGoods"`
}

// GetIngestCertifyGoods returns IngestCertifyGoodSrcsResponse.IngestCertifyGoods, and is useful for accessing the field via an interface.
func (v *IngestCertifyGoodSrcsResponse) GetIngestCertifyGoods() []string { return v.IngestCertifyGoods }

// IngestCertifyLegalPkgResponse is returned by IngestCertifyLegalPkg on success.
type IngestCertifyLegalPkgResponse struct {
	// Adds a legal certification to a package or source.
	IngestCertifyLegal string `json:"ingestCertifyLegal"`
}

// GetIngestCertifyLegal returns IngestCertifyLegalPkgResponse.IngestCertifyLegal, and is useful for accessing the field via an interface.
func (v *IngestCertifyLegalPkgResponse) GetIngestCertifyLegal() string { return v.IngestCertifyLegal }

// IngestCertifyLegalPkgsResponse is returned by IngestCertifyLegalPkgs on success.
type IngestCertifyLegalPkgsResponse struct {
	// Bulk add legal certifications to packages or sources, not both at same time.
	IngestCertifyLegals []string `json:"ingestCertifyLegals"`
}

// GetIngestCertifyLegals returns IngestCertifyLegalPkgsResponse.IngestCertifyLegals, and is useful for accessing the field via an interface.
func (v *IngestCertifyLegalPkgsResponse) GetIngestCertifyLegals() []string {
	return v.IngestCertifyLegals
}

// IngestCertifyLegalSrcResponse is returned by IngestCertifyLegalSrc on success.
type IngestCertifyLegalSrcResponse struct {
	// Adds a legal certification to a package or source.
	IngestCertifyLegal string `json:"ingestCertifyLegal"`
}

// GetIngestCertifyLegal returns IngestCertifyLegalSrcResponse.IngestCertifyLegal, and is useful for accessing the field via an interface.
func (v *IngestCertifyLegalSrcResponse) GetIngestCertifyLegal() string { return v.IngestCertifyLegal }

// IngestCertifyLegalSrcsResponse is returned by IngestCertifyLegalSrcs on success.
type IngestCertifyLegalSrcsResponse struct {
	// Bulk add legal certifications to packages or sources, not both at same time.
	IngestCertifyLegals []string `json:"ingestCertifyLegals"`
}

// GetIngestCertifyLegals returns IngestCertifyLegalSrcsResponse.IngestCertifyLegals, and is useful for accessing the field via an interface.
func (v *IngestCertifyLegalSrcsResponse) GetIngestCertifyLegals() []string {
	return v.IngestCertifyLegals
}

// IngestCertifyScorecardResponse is returned by IngestCertifyScorecard on success.
type IngestCertifyScorecardResponse struct {
	// Adds a certification that a source repository has a Scorecard. The returned ID can be empty string.
	IngestScorecard string `json:"ingestScorecard"`
}

// GetIngestScorecard returns IngestCertifyScorecardResponse.IngestScorecard, and is useful for accessing the field via an interface.
func (v *IngestCertifyScorecardResponse) GetIngestScorecard() string { return v.IngestScorecard }

// IngestCertifyScorecardsResponse is returned by IngestCertifyScorecards on success.
type IngestCertifyScorecardsResponse struct {
	// Adds bulk certifications that a source repository has a Scorecard. The returned array of IDs can be a an array of empty string.
	IngestScorecards []string `json:"ingestScorecards"`
}

// GetIngestScorecards returns IngestCertifyScorecardsResponse.IngestScorecards, and is useful for accessing the field via an interface.
func (v *IngestCertifyScorecardsResponse) GetIngestScorecards() []string { return v.IngestScorecards }

// IngestCertifyVexArtifactResponse is returned by IngestCertifyVexArtifact on success.
type IngestCertifyVexArtifactResponse struct {
	// Adds a VEX certification for a package. The returned ID can be empty string.
	IngestVEXStatement string `json:"ingestVEXStatement"`
}

// GetIngestVEXStatement returns IngestCertifyVexArtifactResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *IngestCertifyVexArtifactResponse) GetIngestVEXStatement() string {
	return v.IngestVEXStatement
}

// IngestCertifyVexArtifactsResponse is returned by IngestCertifyVexArtifacts on success.
type IngestCertifyVexArtifactsResponse struct {
	// Bulk add VEX certifications for a package and vulnerability. The returned array of IDs can be a an array of empty string.
	IngestVEXStatements []string `json:"ingestVEXStatements"`
}

// GetIngestVEXStatements returns IngestCertifyVexArtifactsResponse.IngestVEXStatements, and is useful for accessing the field via an interface.
func (v *IngestCertifyVexArtifactsResponse) GetIngestVEXStatements() []string {
	return v.IngestVEXStatements
}

// IngestCertifyVexPkgResponse is returned by IngestCertifyVexPkg on success.
type IngestCertifyVexPkgResponse struct {
	// Adds a VEX certification for a package. The returned ID can be empty string.
	IngestVEXStatement string `json:"ingestVEXStatement"`
}

// GetIngestVEXStatement returns IngestCertifyVexPkgResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *IngestCertifyVexPkgResponse) GetIngestVEXStatement() string { return v.IngestVEXStatement }

// IngestCertifyVexPkgsResponse is returned by IngestCertifyVexPkgs on success.
type IngestCertifyVexPkgsResponse struct {
	// Bulk add VEX certifications for a package and vulnerability. The returned array of IDs can be a an array of empty string.
	IngestVEXStatements []string `json:"ingestVEXStatements"`
}

// GetIngestVEXStatements returns IngestCertifyVexPkgsResponse.IngestVEXStatements, and is useful for accessing the field via an interface.
func (v *IngestCertifyVexPkgsResponse) GetIngestVEXStatements() []string {
	return v.IngestVEXStatements
}

// IngestCertifyVulnPkgResponse is returned by IngestCertifyVulnPkg on success.
type IngestCertifyVulnPkgResponse struct {
	// Adds a certification that a package has been scanned for vulnerabilities. The returned ID can be empty string.
	IngestCertifyVuln string `json:"ingestCertifyVuln"`
}

// GetIngestCertifyVuln returns IngestCertifyVulnPkgResponse.IngestCertifyVuln, and is useful for accessing the field via an interface.
func (v *IngestCertifyVulnPkgResponse) GetIngestCertifyVuln() string { return v.IngestCertifyVuln }

// IngestCertifyVulnPkgsResponse is returned by IngestCertifyVulnPkgs on success.
type IngestCertifyVulnPkgsResponse struct {
	// Bulk add certifications that a package has been scanned for vulnerabilities. The returned array of IDs can be a an array of empty string.
	IngestCertifyVulns []string `json:"ingestCertifyVulns"`
}

// GetIngestCertifyVulns returns IngestCertifyVulnPkgsResponse.IngestCertifyVulns, and is useful for accessing the field via an interface.
func (v *IngestCertifyVulnPkgsResponse) GetIngestCertifyVulns() []string { return v.IngestCertifyVulns }

// IngestHasMetadataArtifactResponse is returned by IngestHasMetadataArtifact on success.
type IngestHasMetadataArtifactResponse struct {
	// Adds metadata about a package, source or artifact. The returned ID can be empty string.
	IngestHasMetadata string `json:"ingestHasMetadata"`
}

// GetIngestHasMetadata returns IngestHasMetadataArtifactResponse.IngestHasMetadata, and is useful for accessing the field via an interface.
func (v *IngestHasMetadataArtifactResponse) GetIngestHasMetadata() string { return v.IngestHasMetadata }

// IngestHasMetadataArtifactsResponse is returned by IngestHasMetadataArtifacts on success.
type IngestHasMetadataArtifactsResponse struct {
	// Adds bulk metadata about a package, source or artifact. The returned array of IDs can be a an array of empty string.
	IngestBulkHasMetadata []string `json:"ingestBulkHasMetadata"`
}

// GetIngestBulkHasMetadata returns IngestHasMetadataArtifactsResponse.IngestBulkHasMetadata, and is useful for accessing the field via an interface.
func (v *IngestHasMetadataArtifactsResponse) GetIngestBulkHasMetadata() []string {
	return v.IngestBulkHasMetadata
}

// IngestHasMetadataPkgResponse is returned by IngestHasMetadataPkg on success.
type IngestHasMetadataPkgResponse struct {
	// Adds metadata about a package, source or artifact. The returned ID can be empty string.
	IngestHasMetadata string `json:"ingestHasMetadata"`
}

// GetIngestHasMetadata returns IngestHasMetadataPkgResponse.IngestHasMetadata, and is useful for accessing the field via an interface.
func (v *IngestHasMetadataPkgResponse) GetIngestHasMetadata() string { return v.IngestHasMetadata }

// IngestHasMetadataPkgsResponse is returned by IngestHasMetadataPkgs on success.
type IngestHasMetadataPkgsResponse struct {
	// Adds bulk metadata about a package, source or artifact. The returned array of IDs can be a an array of empty string.
	IngestBulkHasMetadata []string `json:"ingestBulkHasMetadata"`
}

// GetIngestBulkHasMetadata returns IngestHasMetadataPkgsResponse.IngestBulkHasMetadata, and is useful for accessing the field via an interface.
func (v *IngestHasMetadataPkgsResponse) GetIngestBulkHasMetadata() []string {
	return v.IngestBulkHasMetadata
}

// IngestHasMetadataSrcResponse is returned by IngestHasMetadataSrc on success.
type IngestHasMetadataSrcResponse struct {
	// Adds metadata about a package, source or artifact. The returned ID can be empty string.
	IngestHasMetadata string `json:"ingestHasMetadata"`
}

// GetIngestHasMetadata returns IngestHasMetadataSrcResponse.IngestHasMetadata, and is useful for accessing the field via an interface.
func (v *IngestHasMetadataSrcResponse) GetIngestHasMetadata() string { return v.IngestHasMetadata }

// IngestHasMetadataSrcsResponse is returned by IngestHasMetadataSrcs on success.
type IngestHasMetadataSrcsResponse struct {
	// Adds bulk metadata about a package, source or artifact. The returned array of IDs can be a an array of empty string.
	IngestBulkHasMetadata []string `json:"ingestBulkHasMetadata"`
}

// GetIngestBulkHasMetadata returns IngestHasMetadataSrcsResponse.IngestBulkHasMetadata, and is useful for accessing the field via an interface.
func (v *IngestHasMetadataSrcsResponse) GetIngestBulkHasMetadata() []string {
	return v.IngestBulkHasMetadata
}

// IngestHasSBOMArtifactResponse is returned by IngestHasSBOMArtifact on success.
type IngestHasSBOMArtifactResponse struct {
	// Certifies that a package or artifact has an SBOM. The returned ID can be empty string.
	IngestHasSBOM string `json:"ingestHasSBOM"`
}

// GetIngestHasSBOM returns IngestHasSBOMArtifactResponse.IngestHasSBOM, and is useful for accessing the field via an interface.
func (v *IngestHasSBOMArtifactResponse) GetIngestHasSBOM() string { return v.IngestHasSBOM }

// IngestHasSBOMArtifactsResponse is returned by IngestHasSBOMArtifacts on success.
type IngestHasSBOMArtifactsResponse struct {
	// Bulk ingest that package or artifact has an SBOM. The returned array of IDs can be a an array of empty string.
	IngestHasSBOMs []string `json:"ingestHasSBOMs"`
}

// GetIngestHasSBOMs returns IngestHasSBOMArtifactsResponse.IngestHasSBOMs, and is useful for accessing the field via an interface.
func (v *IngestHasSBOMArtifactsResponse) GetIngestHasSBOMs() []string { return v.IngestHasSBOMs }

// IngestHasSBOMPkgResponse is returned by IngestHasSBOMPkg on success.
type IngestHasSBOMPkgResponse struct {
	// Certifies that a package or artifact has an SBOM. The returned ID can be empty string.
	IngestHasSBOM string `json:"ingestHasSBOM"`
}

// GetIngestHasSBOM returns IngestHasSBOMPkgResponse.IngestHasSBOM, and is useful for accessing the field via an interface.
func (v *IngestHasSBOMPkgResponse) GetIngestHasSBOM() string { return v.IngestHasSBOM }

// IngestHasSBOMPkgsResponse is returned by IngestHasSBOMPkgs on success.
type IngestHasSBOMPkgsResponse struct {
	// Bulk ingest that package or artifact has an SBOM. The returned array of IDs can be a an array of empty string.
	IngestHasSBOMs []string `json:"ingestHasSBOMs"`
}

// GetIngestHasSBOMs returns IngestHasSBOMPkgsResponse.IngestHasSBOMs, and is useful for accessing the field via an interface.
func (v *IngestHasSBOMPkgsResponse) GetIngestHasSBOMs() []string { return v.IngestHasSBOMs }

// IngestHasSourceAtResponse is returned by IngestHasSourceAt on success.
type IngestHasSourceAtResponse struct {
	// Adds a certification that a package (PackageName or PackageVersion) is built from the source. The returned ID can be empty string.
	IngestHasSourceAt string `json:"ingestHasSourceAt"`
}

// GetIngestHasSourceAt returns IngestHasSourceAtResponse.IngestHasSourceAt, and is useful for accessing the field via an interface.
func (v *IngestHasSourceAtResponse) GetIngestHasSourceAt() string { return v.IngestHasSourceAt }

// IngestHasSourcesAtResponse is returned by IngestHasSourcesAt on success.
type IngestHasSourcesAtResponse struct {
	// Bulk ingestion of certifications that a package (PackageName or PackageVersion) is built from the source. The returned array of IDs can be a an array of empty string.
	IngestHasSourceAts []string `json:"ingestHasSourceAts"`
}

// GetIngestHasSourceAts returns IngestHasSourcesAtResponse.IngestHasSourceAts, and is useful for accessing the field via an interface.
func (v *IngestHasSourcesAtResponse) GetIngestHasSourceAts() []string { return v.IngestHasSourceAts }

// IngestHashEqualResponse is returned by IngestHashEqual on success.
type IngestHashEqualResponse struct {
	// Adds a certification that two artifacts are equal. The returned ID can be empty string.
	IngestHashEqual string `json:"ingestHashEqual"`
}

// GetIngestHashEqual returns IngestHashEqualResponse.IngestHashEqual, and is useful for accessing the field via an interface.
func (v *IngestHashEqualResponse) GetIngestHashEqual() string { return v.IngestHashEqual }

// IngestHashEqualsResponse is returned by IngestHashEquals on success.
type IngestHashEqualsResponse struct {
	// Bulk ingest certifications that two artifacts are equal. The returned array of IDs can be a an array of empty string.
	IngestHashEquals []string `json:"ingestHashEquals"`
}

// GetIngestHashEquals returns IngestHashEqualsResponse.IngestHashEquals, and is useful for accessing the field via an interface.
func (v *IngestHashEqualsResponse) GetIngestHashEquals() []string { return v.IngestHashEquals }

// IngestIsDependenciesResponse is returned by IngestIsDependencies on success.
type IngestIsDependenciesResponse struct {
	// Bulk adds a dependency between two packages. The returned array of IDs cannot be an empty string as its used by hasSBOM.
	IngestDependencies []string `json:"ingestDependencies"`
}

// GetIngestDependencies returns IngestIsDependenciesResponse.IngestDependencies, and is useful for accessing the field via an interface.
func (v *IngestIsDependenciesResponse) GetIngestDependencies() []string { return v.IngestDependencies }

// IngestIsDependencyResponse is returned by IngestIsDependency on success.
type IngestIsDependencyResponse struct {
	// Adds a dependency between two packages. The returned ID cannot be empty string as its used by hasSBOM.
	IngestDependency string `json:"ingestDependency"`
}

// GetIngestDependency returns IngestIsDependencyResponse.IngestDependency, and is useful for accessing the field via an interface.
func (v *IngestIsDependencyResponse) GetIngestDependency() string { return v.IngestDependency }

// IngestIsOccurrencePkgResponse is returned by IngestIsOccurrencePkg on success.
type IngestIsOccurrencePkgResponse struct {
	// Ingest that an artifact is produced from a package or source. The returned ID cannot be empty string as its used by hasSBOM.
	IngestOccurrence string `json:"ingestOccurrence"`
}

// GetIngestOccurrence returns IngestIsOccurrencePkgResponse.IngestOccurrence, and is useful for accessing the field via an interface.
func (v *IngestIsOccurrencePkgResponse) GetIngestOccurrence() string { return v.IngestOccurrence }

// IngestIsOccurrenceSrcResponse is returned by IngestIsOccurrenceSrc on success.
type IngestIsOccurrenceSrcResponse struct {
	// Ingest that an artifact is produced from a package or source. The returned ID cannot be empty string as its used by hasSBOM.
	IngestOccurrence string `json:"ingestOccurrence"`
}

// GetIngestOccurrence returns IngestIsOccurrenceSrcResponse.IngestOccurrence, and is useful for accessing the field via an interface.
func (v *IngestIsOccurrenceSrcResponse) GetIngestOccurrence() string { return v.IngestOccurrence }

// IngestIsOccurrencesPkgResponse is returned by IngestIsOccurrencesPkg on success.
type IngestIsOccurrencesPkgResponse struct {
	// Bulk ingest that an artifact is produced from a package or source. The returned array of IDs cannot be an empty string as its used by hasSBOM
	IngestOccurrences []string `json:"ingestOccurrences"`
}

// GetIngestOccurrences returns IngestIsOccurrencesPkgResponse.IngestOccurrences, and is useful for accessing the field via an interface.
func (v *IngestIsOccurrencesPkgResponse) GetIngestOccurrences() []string { return v.IngestOccurrences }

// IngestIsOccurrencesSrcResponse is returned by IngestIsOccurrencesSrc on success.
type IngestIsOccurrencesSrcResponse struct {
	// Bulk ingest that an artifact is produced from a package or source. The returned array of IDs cannot be an empty string as its used by hasSBOM
	IngestOccurrences []string `json:"ingestOccurrences"`
}

// GetIngestOccurrences returns IngestIsOccurrencesSrcResponse.IngestOccurrences, and is useful for accessing the field via an interface.
func (v *IngestIsOccurrencesSrcResponse) GetIngestOccurrences() []string { return v.IngestOccurrences }

// IngestLicenseResponse is returned by IngestLicense on success.
type IngestLicenseResponse struct {
	// Ingests a new license and returns it.
	IngestLicense string `json:"ingestLicense"`
}

// GetIngestLicense returns IngestLicenseResponse.IngestLicense, and is useful for accessing the field via an interface.
func (v *IngestLicenseResponse) GetIngestLicense() string { return v.IngestLicense }

// IngestLicensesResponse is returned by IngestLicenses on success.
type IngestLicensesResponse struct {
	// Bulk ingests new licenses and returns a list of them. The returned array of IDs must be in the same order as the inputs.
	IngestLicenses []string `json:"ingestLicenses"`
}

// GetIngestLicenses returns IngestLicensesResponse.IngestLicenses, and is useful for accessing the field via an interface.
func (v *IngestLicensesResponse) GetIngestLicenses() []string { return v.IngestLicenses }

// IngestPackageIngestPackagePackageIDs includes the requested fields of the GraphQL type PackageIDs.
// The GraphQL type's documentation follows.
//
// The IDs of the ingested package
type IngestPackageIngestPackagePackageIDs struct {
	PackageTypeID      string `json:"packageTypeID"`
	PackageNamespaceID string `json:"packageNamespaceID"`
	PackageNameID      string `json:"packageNameID"`
	PackageVersionID   string `json:"packageVersionID"`
}

// GetPackageTypeID returns IngestPackageIngestPackagePackageIDs.PackageTypeID, and is useful for accessing the field via an interface.
func (v *IngestPackageIngestPackagePackageIDs) GetPackageTypeID() string { return v.PackageTypeID }

// GetPackageNamespaceID returns IngestPackageIngestPackagePackageIDs.PackageNamespaceID, and is useful for accessing the field via an interface.
func (v *IngestPackageIngestPackagePackageIDs) GetPackageNamespaceID() string {
	return v.PackageNamespaceID
}

// GetPackageNameID returns IngestPackageIngestPackagePackageIDs.PackageNameID, and is useful for accessing the field via an interface.
func (v *IngestPackageIngestPackagePackageIDs) GetPackageNameID() string { return v.PackageNameID }

// GetPackageVersionID returns IngestPackageIngestPackagePackageIDs.PackageVersionID, and is useful for accessing the field via an interface.
func (v *IngestPackageIngestPackagePackageIDs) GetPackageVersionID() string {
	return v.PackageVersionID
}

// IngestPackageResponse is returned by IngestPackage on success.
type IngestPackageResponse struct {
	// Ingests a new package and returns a corresponding package hierarchy containing only the IDs.
	IngestPackage IngestPackageIngestPackagePackageIDs `json:"ingestPackage"`
}

// GetIngestPackage returns IngestPackageResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *IngestPackageResponse) GetIngestPackage() IngestPackageIngestPackagePackageIDs {
	return v.IngestPackage
}

// IngestPackagesIngestPackagesPackageIDs includes the requested fields of the GraphQL type PackageIDs.
// The GraphQL type's documentation follows.
//
// The IDs of the ingested package
type IngestPackagesIngestPackagesPackageIDs struct {
	PackageTypeID      string `json:"packageTypeID"`
	PackageNamespaceID string `json:"packageNamespaceID"`
	PackageNameID      string `json:"packageNameID"`
	PackageVersionID   string `json:"packageVersionID"`
}

// GetPackageTypeID returns IngestPackagesIngestPackagesPackageIDs.PackageTypeID, and is useful for accessing the field via an interface.
func (v *IngestPackagesIngestPackagesPackageIDs) GetPackageTypeID() string { return v.PackageTypeID }

// GetPackageNamespaceID returns IngestPackagesIngestPackagesPackageIDs.PackageNamespaceID, and is useful for accessing the field via an interface.
func (v *IngestPackagesIngestPackagesPackageIDs) GetPackageNamespaceID() string {
	return v.PackageNamespaceID
}

// GetPackageNameID returns IngestPackagesIngestPackagesPackageIDs.PackageNameID, and is useful for accessing the field via an interface.
func (v *IngestPackagesIngestPackagesPackageIDs) GetPackageNameID() string { return v.PackageNameID }

// GetPackageVersionID returns IngestPackagesIngestPackagesPackageIDs.PackageVersionID, and is useful for accessing the field via an interface.
func (v *IngestPackagesIngestPackagesPackageIDs) GetPackageVersionID() string {
	return v.PackageVersionID
}

// IngestPackagesResponse is returned by IngestPackages on success.
type IngestPackagesResponse struct {
	// Bulk ingests packages and returns the list of corresponding package hierarchies containing only the IDs. The returned array of IDs must be in the same order as the inputs.
	IngestPackages []IngestPackagesIngestPackagesPackageIDs `json:"ingestPackages"`
}

// GetIngestPackages returns IngestPackagesResponse.IngestPackages, and is useful for accessing the field via an interface.
func (v *IngestPackagesResponse) GetIngestPackages() []IngestPackagesIngestPackagesPackageIDs {
	return v.IngestPackages
}

// IngestPkgEqualResponse is returned by IngestPkgEqual on success.
type IngestPkgEqualResponse struct {
	// Adds a certification that two packages are similar. The returned ID can be empty string.
	IngestPkgEqual string `json:"ingestPkgEqual"`
}

// GetIngestPkgEqual returns IngestPkgEqualResponse.IngestPkgEqual, and is useful for accessing the field via an interface.
func (v *IngestPkgEqualResponse) GetIngestPkgEqual() string { return v.IngestPkgEqual }

// IngestPkgEqualsResponse is returned by IngestPkgEquals on success.
type IngestPkgEqualsResponse struct {
	// Bulk ingest mapping between packages. The returned array of IDs can be a an array of empty string.
	IngestPkgEquals []string `json:"ingestPkgEquals"`
}

// GetIngestPkgEquals returns IngestPkgEqualsResponse.IngestPkgEquals, and is useful for accessing the field via an interface.
func (v *IngestPkgEqualsResponse) GetIngestPkgEquals() []string { return v.IngestPkgEquals }

// IngestPointOfContactArtifactResponse is returned by IngestPointOfContactArtifact on success.
type IngestPointOfContactArtifactResponse struct {
	// Adds a PointOfContact attestation to a package, source or artifact. The returned ID can be empty string.
	IngestPointOfContact string `json:"ingestPointOfContact"`
}

// GetIngestPointOfContact returns IngestPointOfContactArtifactResponse.IngestPointOfContact, and is useful for accessing the field via an interface.
func (v *IngestPointOfContactArtifactResponse) GetIngestPointOfContact() string {
	return v.IngestPointOfContact
}

// IngestPointOfContactArtifactsResponse is returned by IngestPointOfContactArtifacts on success.
type IngestPointOfContactArtifactsResponse struct {
	// Adds bulk PointOfContact attestations to a package, source or artifact. The returned array of IDs can be a an array of empty string.
	IngestPointOfContacts []string `json:"ingestPointOfContacts"`
}

// GetIngestPointOfContacts returns IngestPointOfContactArtifactsResponse.IngestPointOfContacts, and is useful for accessing the field via an interface.
func (v *IngestPointOfContactArtifactsResponse) GetIngestPointOfContacts() []string {
	return v.IngestPointOfContacts
}

// IngestPointOfContactPkgResponse is returned by IngestPointOfContactPkg on success.
type IngestPointOfContactPkgResponse struct {
	// Adds a PointOfContact attestation to a package, source or artifact. The returned ID can be empty string.
	IngestPointOfContact string `json:"ingestPointOfContact"`
}

// GetIngestPointOfContact returns IngestPointOfContactPkgResponse.IngestPointOfContact, and is useful for accessing the field via an interface.
func (v *IngestPointOfContactPkgResponse) GetIngestPointOfContact() string {
	return v.IngestPointOfContact
}

// IngestPointOfContactPkgsResponse is returned by IngestPointOfContactPkgs on success.
type IngestPointOfContactPkgsResponse struct {
	// Adds bulk PointOfContact attestations to a package, source or artifact. The returned array of IDs can be a an array of empty string.
	IngestPointOfContacts []string `json:"ingestPointOfContacts"`
}

// GetIngestPointOfContacts returns IngestPointOfContactPkgsResponse.IngestPointOfContacts, and is useful for accessing the field via an interface.
func (v *IngestPointOfContactPkgsResponse) GetIngestPointOfContacts() []string {
	return v.IngestPointOfContacts
}

// IngestPointOfContactSrcResponse is returned by IngestPointOfContactSrc on success.
type IngestPointOfContactSrcResponse struct {
	// Adds a PointOfContact attestation to a package, source or artifact. The returned ID can be empty string.
	IngestPointOfContact string `json:"ingestPointOfContact"`
}

// GetIngestPointOfContact returns IngestPointOfContactSrcResponse.IngestPointOfContact, and is useful for accessing the field via an interface.
func (v *IngestPointOfContactSrcResponse) GetIngestPointOfContact() string {
	return v.IngestPointOfContact
}

// IngestPointOfContactSrcsResponse is returned by IngestPointOfContactSrcs on success.
type IngestPointOfContactSrcsResponse struct {
	// Adds bulk PointOfContact attestations to a package, source or artifact. The returned array of IDs can be a an array of empty string.
	IngestPointOfContacts []string `json:"ingestPointOfContacts"`
}

// GetIngestPointOfContacts returns IngestPointOfContactSrcsResponse.IngestPointOfContacts, and is useful for accessing the field via an interface.
func (v *IngestPointOfContactSrcsResponse) GetIngestPointOfContacts() []string {
	return v.IngestPointOfContacts
}

// IngestSLSAForArtifactResponse is returned by IngestSLSAForArtifact on success.
type IngestSLSAForArtifactResponse struct {
	// Ingests a SLSA attestation. The returned ID can be empty string.
	IngestSLSA string `json:"ingestSLSA"`
}

// GetIngestSLSA returns IngestSLSAForArtifactResponse.IngestSLSA, and is useful for accessing the field via an interface.
func (v *IngestSLSAForArtifactResponse) GetIngestSLSA() string { return v.IngestSLSA }

// IngestSLSAForArtifactsResponse is returned by IngestSLSAForArtifacts on success.
type IngestSLSAForArtifactsResponse struct {
	// Bulk Ingest SLSA attestations. The returned array of IDs can be a an array of empty string.
	IngestSLSAs []string `json:"ingestSLSAs"`
}

// GetIngestSLSAs returns IngestSLSAForArtifactsResponse.IngestSLSAs, and is useful for accessing the field via an interface.
func (v *IngestSLSAForArtifactsResponse) GetIngestSLSAs() []string { return v.IngestSLSAs }

// IngestSourceIngestSourceSourceIDs includes the requested fields of the GraphQL type SourceIDs.
// The GraphQL type's documentation follows.
//
// The IDs of the ingested source
type IngestSourceIngestSourceSourceIDs struct {
	SourceTypeID      string `json:"sourceTypeID"`
	SourceNamespaceID string `json:"sourceNamespaceID"`
	SourceNameID      string `json:"sourceNameID"`
}

// GetSourceTypeID returns IngestSourceIngestSourceSourceIDs.SourceTypeID, and is useful for accessing the field via an interface.
func (v *IngestSourceIngestSourceSourceIDs) GetSourceTypeID() string { return v.SourceTypeID }

// GetSourceNamespaceID returns IngestSourceIngestSourceSourceIDs.SourceNamespaceID, and is useful for accessing the field via an interface.
func (v *IngestSourceIngestSourceSourceIDs) GetSourceNamespaceID() string { return v.SourceNamespaceID }

// GetSourceNameID returns IngestSourceIngestSourceSourceIDs.SourceNameID, and is useful for accessing the field via an interface.
func (v *IngestSourceIngestSourceSourceIDs) GetSourceNameID() string { return v.SourceNameID }

// IngestSourceResponse is returned by IngestSource on success.
type IngestSourceResponse struct {
	// Ingests a new source and returns the corresponding source trie path.
	IngestSource IngestSourceIngestSourceSourceIDs `json:"ingestSource"`
}

// GetIngestSource returns IngestSourceResponse.IngestSource, and is useful for accessing the field via an interface.
func (v *IngestSourceResponse) GetIngestSource() IngestSourceIngestSourceSourceIDs {
	return v.IngestSource
}

// IngestSourcesIngestSourcesSourceIDs includes the requested fields of the GraphQL type SourceIDs.
// The GraphQL type's documentation follows.
//
// The IDs of the ingested source
type IngestSourcesIngestSourcesSourceIDs struct {
	SourceTypeID      string `json:"sourceTypeID"`
	SourceNamespaceID string `json:"sourceNamespaceID"`
	SourceNameID      string `json:"sourceNameID"`
}

// GetSourceTypeID returns IngestSourcesIngestSourcesSourceIDs.SourceTypeID, and is useful for accessing the field via an interface.
func (v *IngestSourcesIngestSourcesSourceIDs) GetSourceTypeID() string { return v.SourceTypeID }

// GetSourceNamespaceID returns IngestSourcesIngestSourcesSourceIDs.SourceNamespaceID, and is useful for accessing the field via an interface.
func (v *IngestSourcesIngestSourcesSourceIDs) GetSourceNamespaceID() string {
	return v.SourceNamespaceID
}

// GetSourceNameID returns IngestSourcesIngestSourcesSourceIDs.SourceNameID, and is useful for accessing the field via an interface.
func (v *IngestSourcesIngestSourcesSourceIDs) GetSourceNameID() string { return v.SourceNameID }

// IngestSourcesResponse is returned by IngestSources on success.
type IngestSourcesResponse struct {
	// Bulk ingests sources and returns the list of corresponding source trie path. The returned array of IDs must be in the same order as the inputs.
	IngestSources []IngestSourcesIngestSourcesSourceIDs `json:"ingestSources"`
}

// GetIngestSources returns IngestSourcesResponse.IngestSources, and is useful for accessing the field via an interface.
func (v *IngestSourcesResponse) GetIngestSources() []IngestSourcesIngestSourcesSourceIDs {
	return v.IngestSources
}

// IngestVulnEqualResponse is returned by IngestVulnEqual on success.
type IngestVulnEqualResponse struct {
	// Ingest a mapping between vulnerabilities. The returned ID can be empty string.
	IngestVulnEqual string `json:"ingestVulnEqual"`
}

// GetIngestVulnEqual returns IngestVulnEqualResponse.IngestVulnEqual, and is useful for accessing the field via an interface.
func (v *IngestVulnEqualResponse) GetIngestVulnEqual() string { return v.IngestVulnEqual }

// IngestVulnEqualsResponse is returned by IngestVulnEquals on success.
type IngestVulnEqualsResponse struct {
	// Bulk ingest mapping between vulnerabilities. The returned array of IDs can be a an array of empty string.
	IngestVulnEquals []string `json:"ingestVulnEquals"`
}

// GetIngestVulnEquals returns IngestVulnEqualsResponse.IngestVulnEquals, and is useful for accessing the field via an interface.
func (v *IngestVulnEqualsResponse) GetIngestVulnEquals() []string { return v.IngestVulnEquals }

// IngestVulnHasMetadataResponse is returned by IngestVulnHasMetadata on success.
type IngestVulnHasMetadataResponse struct {
	// Adds metadata about a vulnerability. The returned ID can be empty string.
	IngestVulnerabilityMetadata string `json:"ingestVulnerabilityMetadata"`
}

// GetIngestVulnerabilityMetadata returns IngestVulnHasMetadataResponse.IngestVulnerabilityMetadata, and is useful for accessing the field via an interface.
func (v *IngestVulnHasMetadataResponse) GetIngestVulnerabilityMetadata() string {
	return v.IngestVulnerabilityMetadata
}

// IngestVulnerabilitiesIngestVulnerabilitiesVulnerabilityIDs includes the requested fields of the GraphQL type VulnerabilityIDs.
// The GraphQL type's documentation follows.
//
// The IDs of the ingested vulnerability
type IngestVulnerabilitiesIngestVulnerabilitiesVulnerabilityIDs struct {
	VulnerabilityTypeID string `json:"vulnerabilityTypeID"`
	VulnerabilityNodeID string `json:"vulnerabilityNodeID"`
}

// GetVulnerabilityTypeID returns IngestVulnerabilitiesIngestVulnerabilitiesVulnerabilityIDs.VulnerabilityTypeID, and is useful for accessing the field via an interface.
func (v *IngestVulnerabilitiesIngestVulnerabilitiesVulnerabilityIDs) GetVulnerabilityTypeID() string {
	return v.VulnerabilityTypeID
}

// GetVulnerabilityNodeID returns IngestVulnerabilitiesIngestVulnerabilitiesVulnerabilityIDs.VulnerabilityNodeID, and is useful for accessing the field via an interface.
func (v *IngestVulnerabilitiesIngestVulnerabilitiesVulnerabilityIDs) GetVulnerabilityNodeID() string {
	return v.VulnerabilityNodeID
}

// IngestVulnerabilitiesResponse is returned by IngestVulnerabilities on success.
type IngestVulnerabilitiesResponse struct {
	// Bulk ingests vulnerabilities and returns the list of corresponding vulnerability trie path. The returned array of IDs must be in the same order as the inputs
	IngestVulnerabilities []IngestVulnerabilitiesIngestVulnerabilitiesVulnerabilityIDs `json:"ingestVulnerabilities"`
}

// GetIngestVulnerabilities returns IngestVulnerabilitiesResponse.IngestVulnerabilities, and is useful for accessing the field via an interface.
func (v *IngestVulnerabilitiesResponse) GetIngestVulnerabilities() []IngestVulnerabilitiesIngestVulnerabilitiesVulnerabilityIDs {
	return v.IngestVulnerabilities
}

// IngestVulnerabilityIngestVulnerabilityVulnerabilityIDs includes the requested fields of the GraphQL type VulnerabilityIDs.
// The GraphQL type's documentation follows.
//
// The IDs of the ingested vulnerability
type IngestVulnerabilityIngestVulnerabilityVulnerabilityIDs struct {
	VulnerabilityTypeID string `json:"vulnerabilityTypeID"`
	VulnerabilityNodeID string `json:"vulnerabilityNodeID"`
}

// GetVulnerabilityTypeID returns IngestVulnerabilityIngestVulnerabilityVulnerabilityIDs.VulnerabilityTypeID, and is useful for accessing the field via an interface.
func (v *IngestVulnerabilityIngestVulnerabilityVulnerabilityIDs) GetVulnerabilityTypeID() string {
	return v.VulnerabilityTypeID
}

// GetVulnerabilityNodeID returns IngestVulnerabilityIngestVulnerabilityVulnerabilityIDs.VulnerabilityNodeID, and is useful for accessing the field via an interface.
func (v *IngestVulnerabilityIngestVulnerabilityVulnerabilityIDs) GetVulnerabilityNodeID() string {
	return v.VulnerabilityNodeID
}

// IngestVulnerabilityResponse is returned by IngestVulnerability on success.
type IngestVulnerabilityResponse struct {
	// Ingests a new vulnerability and returns the corresponding vulnerability trie path.
	IngestVulnerability IngestVulnerabilityIngestVulnerabilityVulnerabilityIDs `json:"ingestVulnerability"`
}

// GetIngestVulnerability returns IngestVulnerabilityResponse.IngestVulnerability, and is useful for accessing the field via an interface.
func (v *IngestVulnerabilityResponse) GetIngestVulnerability() IngestVulnerabilityIngestVulnerabilityVulnerabilityIDs {
	return v.IngestVulnerability
}

// IsDependencyInputSpec is the input to record a new dependency.
type IsDependencyInputSpec struct {
	// versionRange should be specified for depedentPackages that point to PackageName
	VersionRange   string         `json:"versionRange"`
	DependencyType DependencyType `json:"dependencyType"`
	Justification  string         `json:"justification"`
	Origin         string         `json:"origin"`
	Collector      string         `json:"collector"`
	DocumentRef    string         `json:"documentRef"`
}

// GetVersionRange returns IsDependencyInputSpec.VersionRange, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetVersionRange() string { return v.VersionRange }

// GetDependencyType returns IsDependencyInputSpec.DependencyType, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetDependencyType() DependencyType { return v.DependencyType }

// GetJustification returns IsDependencyInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns IsDependencyInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns IsDependencyInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns IsDependencyInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetDocumentRef() string { return v.DocumentRef }

// IsDependencySpec allows filtering the list of dependencies to return.
//
// To obtain the list of dependency packages, caller must fill in the package
// field.
//
// Dependency packages must be defined at PackageName, not PackageVersion.
type IsDependencySpec struct {
	Id                *string         `json:"id"`
	Package           *PkgSpec        `json:"package"`
	DependencyPackage *PkgSpec        `json:"dependencyPackage"`
	VersionRange      *string         `json:"versionRange"`
	DependencyType    *DependencyType `json:"dependencyType"`
	Justification     *string         `json:"justification"`
	Origin            *string         `json:"origin"`
	Collector         *string         `json:"collector"`
	DocumentRef       *string         `json:"documentRef"`
}

// GetId returns IsDependencySpec.Id, and is useful for accessing the field via an interface.
func (v *IsDependencySpec) GetId() *string { return v.Id }

// GetPackage returns IsDependencySpec.Package, and is useful for accessing the field via an interface.
func (v *IsDependencySpec) GetPackage() *PkgSpec { return v.Package }

// GetDependencyPackage returns IsDependencySpec.DependencyPackage, and is useful for accessing the field via an interface.
func (v *IsDependencySpec) GetDependencyPackage() *PkgSpec { return v.DependencyPackage }

// GetVersionRange returns IsDependencySpec.VersionRange, and is useful for accessing the field via an interface.
func (v *IsDependencySpec) GetVersionRange() *string { return v.VersionRange }

// GetDependencyType returns IsDependencySpec.DependencyType, and is useful for accessing the field via an interface.
func (v *IsDependencySpec) GetDependencyType() *DependencyType { return v.DependencyType }

// GetJustification returns IsDependencySpec.Justification, and is useful for accessing the field via an interface.
func (v *IsDependencySpec) GetJustification() *string { return v.Justification }

// GetOrigin returns IsDependencySpec.Origin, and is useful for accessing the field via an interface.
func (v *IsDependencySpec) GetOrigin() *string { return v.Origin }

// GetCollector returns IsDependencySpec.Collector, and is useful for accessing the field via an interface.
func (v *IsDependencySpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns IsDependencySpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *IsDependencySpec) GetDocumentRef() *string { return v.DocumentRef }

// IsOccurrenceInputSpec represents the input to record an artifact's origin.
type IsOccurrenceInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
	DocumentRef   string `json:"documentRef"`
}

// GetJustification returns IsOccurrenceInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *IsOccurrenceInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns IsOccurrenceInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *IsOccurrenceInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns IsOccurrenceInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *IsOccurrenceInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns IsOccurrenceInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *IsOccurrenceInputSpec) GetDocumentRef() string { return v.DocumentRef }

// IsOccurrenceSpec allows filtering the list of artifact occurences to return in
// a query.
type IsOccurrenceSpec struct {
	Id            *string              `json:"id"`
	Subject       *PackageOrSourceSpec `json:"subject"`
	Artifact      *ArtifactSpec        `json:"artifact"`
	Justification *string              `json:"justification"`
	Origin        *string              `json:"origin"`
	Collector     *string              `json:"collector"`
	DocumentRef   *string              `json:"documentRef"`
}

// GetId returns IsOccurrenceSpec.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSpec) GetId() *string { return v.Id }

// GetSubject returns IsOccurrenceSpec.Subject, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSpec) GetSubject() *PackageOrSourceSpec { return v.Subject }

// GetArtifact returns IsOccurrenceSpec.Artifact, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSpec) GetArtifact() *ArtifactSpec { return v.Artifact }

// GetJustification returns IsOccurrenceSpec.Justification, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSpec) GetJustification() *string { return v.Justification }

// GetOrigin returns IsOccurrenceSpec.Origin, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns IsOccurrenceSpec.Collector, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns IsOccurrenceSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSpec) GetDocumentRef() *string { return v.DocumentRef }

// LicenseInputSpec specifies an license for mutations. One of inline or
// listVersion should be empty or missing.
type LicenseInputSpec struct {
	Name        string  `json:"name"`
	Inline      *string `json:"inline"`
	ListVersion *string `json:"listVersion"`
}

// GetName returns LicenseInputSpec.Name, and is useful for accessing the field via an interface.
func (v *LicenseInputSpec) GetName() string { return v.Name }

// GetInline returns LicenseInputSpec.Inline, and is useful for accessing the field via an interface.
func (v *LicenseInputSpec) GetInline() *string { return v.Inline }

// GetListVersion returns LicenseInputSpec.ListVersion, and is useful for accessing the field via an interface.
func (v *LicenseInputSpec) GetListVersion() *string { return v.ListVersion }

// LicenseListLicenseListLicenseConnection includes the requested fields of the GraphQL type LicenseConnection.
// The GraphQL type's documentation follows.
//
// LicenseConnection returns the paginated results for License.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the LicenseEdge which contains the current cursor
// and the License node itself
type LicenseListLicenseListLicenseConnection struct {
	TotalCount int                                                       `json:"totalCount"`
	Edges      []LicenseListLicenseListLicenseConnectionEdgesLicenseEdge `json:"edges"`
	PageInfo   LicenseListLicenseListLicenseConnectionPageInfo           `json:"pageInfo"`
}

// GetTotalCount returns LicenseListLicenseListLicenseConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns LicenseListLicenseListLicenseConnection.Edges, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnection) GetEdges() []LicenseListLicenseListLicenseConnectionEdgesLicenseEdge {
	return v.Edges
}

// GetPageInfo returns LicenseListLicenseListLicenseConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnection) GetPageInfo() LicenseListLicenseListLicenseConnectionPageInfo {
	return v.PageInfo
}

// LicenseListLicenseListLicenseConnectionEdgesLicenseEdge includes the requested fields of the GraphQL type LicenseEdge.
// The GraphQL type's documentation follows.
//
// LicenseEdge contains the cursor for the resulting node and
// the License node itself.
type LicenseListLicenseListLicenseConnectionEdgesLicenseEdge struct {
	Cursor string                                                             `json:"cursor"`
	Node   LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense `json:"node"`
}

// GetCursor returns LicenseListLicenseListLicenseConnectionEdgesLicenseEdge.Cursor, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnectionEdgesLicenseEdge) GetCursor() string { return v.Cursor }

// GetNode returns LicenseListLicenseListLicenseConnectionEdgesLicenseEdge.Node, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnectionEdgesLicenseEdge) GetNode() LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense {
	return v.Node
}

// LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense includes the requested fields of the GraphQL type License.
// The GraphQL type's documentation follows.
//
// License represents a particular license. If the license is found on the SPDX
// license list (https://spdx.org/licenses/) then the fields should be:
//
// Name: SPDX license identifier
// Inline: empty
// ListVersion: SPDX license list version
//
// example:
//
// Name: AGPL-3.0-or-later
// Inline: ""
// ListVersion: 3.21 2023-06-18
//
// If the license is not on the SPDX license list, then a new guid should be
// created and the license text placed inline:
//
// Name: LicenseRef-<guid>
// Inline: Full license text
// ListVersion: empty
//
// example:
//
// Name: LicenseRef-1a2b3c
// Inline: Permission to use, copy, modify, and/or distribute ...
// ListVersion: ""
type LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense struct {
	AllLicenseTree `json:"-"`
}

// GetId returns LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense.Id, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense) GetId() string {
	return v.AllLicenseTree.Id
}

// GetName returns LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense.Name, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense) GetName() string {
	return v.AllLicenseTree.Name
}

// GetInline returns LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense.Inline, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense) GetInline() *string {
	return v.AllLicenseTree.Inline
}

// GetListVersion returns LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense.ListVersion, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense) GetListVersion() *string {
	return v.AllLicenseTree.ListVersion
}

func (v *LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense
		graphql.NoUnmarshalJSON
	}
	firstPass.LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllLicenseTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Inline *string `json:"inline"`

	ListVersion *string `json:"listVersion"`
}

func (v *LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense) __premarshalJSON() (*__premarshalLicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense, error) {
	var retval __premarshalLicenseListLicenseListLicenseConnectionEdgesLicenseEdgeNodeLicense

	retval.Id = v.AllLicenseTree.Id
	retval.Name = v.AllLicenseTree.Name
	retval.Inline = v.AllLicenseTree.Inline
	retval.ListVersion = v.AllLicenseTree.ListVersion
	return &retval, nil
}

// LicenseListLicenseListLicenseConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type LicenseListLicenseListLicenseConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns LicenseListLicenseListLicenseConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns LicenseListLicenseListLicenseConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnectionPageInfo) GetEndCursor() *string { return v.EndCursor }

// GetHasNextPage returns LicenseListLicenseListLicenseConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *LicenseListLicenseListLicenseConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// LicenseListResponse is returned by LicenseList on success.
type LicenseListResponse struct {
	// Returns a paginated results via LicenseConnection
	LicenseList *LicenseListLicenseListLicenseConnection `json:"licenseList"`
}

// GetLicenseList returns LicenseListResponse.LicenseList, and is useful for accessing the field via an interface.
func (v *LicenseListResponse) GetLicenseList() *LicenseListLicenseListLicenseConnection {
	return v.LicenseList
}

// LicenseSpec allows filtering the list of licenses to return in a query.
type LicenseSpec struct {
	Id          *string `json:"id"`
	Name        *string `json:"name"`
	Inline      *string `json:"inline"`
	ListVersion *string `json:"listVersion"`
}

// GetId returns LicenseSpec.Id, and is useful for accessing the field via an interface.
func (v *LicenseSpec) GetId() *string { return v.Id }

// GetName returns LicenseSpec.Name, and is useful for accessing the field via an interface.
func (v *LicenseSpec) GetName() *string { return v.Name }

// GetInline returns LicenseSpec.Inline, and is useful for accessing the field via an interface.
func (v *LicenseSpec) GetInline() *string { return v.Inline }

// GetListVersion returns LicenseSpec.ListVersion, and is useful for accessing the field via an interface.
func (v *LicenseSpec) GetListVersion() *string { return v.ListVersion }

// LicensesLicensesLicense includes the requested fields of the GraphQL type License.
// The GraphQL type's documentation follows.
//
// License represents a particular license. If the license is found on the SPDX
// license list (https://spdx.org/licenses/) then the fields should be:
//
// Name: SPDX license identifier
// Inline: empty
// ListVersion: SPDX license list version
//
// example:
//
// Name: AGPL-3.0-or-later
// Inline: ""
// ListVersion: 3.21 2023-06-18
//
// If the license is not on the SPDX license list, then a new guid should be
// created and the license text placed inline:
//
// Name: LicenseRef-<guid>
// Inline: Full license text
// ListVersion: empty
//
// example:
//
// Name: LicenseRef-1a2b3c
// Inline: Permission to use, copy, modify, and/or distribute ...
// ListVersion: ""
type LicensesLicensesLicense struct {
	AllLicenseTree `json:"-"`
}

// GetId returns LicensesLicensesLicense.Id, and is useful for accessing the field via an interface.
func (v *LicensesLicensesLicense) GetId() string { return v.AllLicenseTree.Id }

// GetName returns LicensesLicensesLicense.Name, and is useful for accessing the field via an interface.
func (v *LicensesLicensesLicense) GetName() string { return v.AllLicenseTree.Name }

// GetInline returns LicensesLicensesLicense.Inline, and is useful for accessing the field via an interface.
func (v *LicensesLicensesLicense) GetInline() *string { return v.AllLicenseTree.Inline }

// GetListVersion returns LicensesLicensesLicense.ListVersion, and is useful for accessing the field via an interface.
func (v *LicensesLicensesLicense) GetListVersion() *string { return v.AllLicenseTree.ListVersion }

func (v *LicensesLicensesLicense) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LicensesLicensesLicense
		graphql.NoUnmarshalJSON
	}
	firstPass.LicensesLicensesLicense = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllLicenseTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLicensesLicensesLicense struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Inline *string `json:"inline"`

	ListVersion *string `json:"listVersion"`
}

func (v *LicensesLicensesLicense) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LicensesLicensesLicense) __premarshalJSON() (*__premarshalLicensesLicensesLicense, error) {
	var retval __premarshalLicensesLicensesLicense

	retval.Id = v.AllLicenseTree.Id
	retval.Name = v.AllLicenseTree.Name
	retval.Inline = v.AllLicenseTree.Inline
	retval.ListVersion = v.AllLicenseTree.ListVersion
	return &retval, nil
}

// LicensesResponse is returned by Licenses on success.
type LicensesResponse struct {
	// Returns all licenses matching a filter.
	Licenses []LicensesLicensesLicense `json:"licenses"`
}

// GetLicenses returns LicensesResponse.Licenses, and is useful for accessing the field via an interface.
func (v *LicensesResponse) GetLicenses() []LicensesLicensesLicense { return v.Licenses }

// MatchFlags is used to input the PkgMatchType enum.
type MatchFlags struct {
	Pkg PkgMatchType `json:"pkg"`
}

// GetPkg returns MatchFlags.Pkg, and is useful for accessing the field via an interface.
func (v *MatchFlags) GetPkg() PkgMatchType { return v.Pkg }

// NeighborsNeighborsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type NeighborsNeighborsArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsArtifact.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsArtifact.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns NeighborsNeighborsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns NeighborsNeighborsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *NeighborsNeighborsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *NeighborsNeighborsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsArtifact) __premarshalJSON() (*__premarshalNeighborsNeighborsArtifact, error) {
	var retval __premarshalNeighborsNeighborsArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// NeighborsNeighborsBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type NeighborsNeighborsBuilder struct {
	Typename       *string `json:"__typename"`
	AllBuilderTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsBuilder.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsBuilder) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsBuilder.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsBuilder) GetId() string { return v.AllBuilderTree.Id }

// GetUri returns NeighborsNeighborsBuilder.Uri, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsBuilder) GetUri() string { return v.AllBuilderTree.Uri }

func (v *NeighborsNeighborsBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *NeighborsNeighborsBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsBuilder) __premarshalJSON() (*__premarshalNeighborsNeighborsBuilder, error) {
	var retval __premarshalNeighborsNeighborsBuilder

	retval.Typename = v.Typename
	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// NeighborsNeighborsCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NeighborsNeighborsCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns NeighborsNeighborsCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetJustification() string {
	return v.AllCertifyBad.Justification
}

// GetKnownSince returns NeighborsNeighborsCertifyBad.KnownSince, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetKnownSince() time.Time { return v.AllCertifyBad.KnownSince }

// GetSubject returns NeighborsNeighborsCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns NeighborsNeighborsCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns NeighborsNeighborsCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *NeighborsNeighborsCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyBad) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyBad, error) {
	var retval __premarshalNeighborsNeighborsCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	retval.KnownSince = v.AllCertifyBad.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// NeighborsNeighborsCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NeighborsNeighborsCertifyGood struct {
	Typename       *string `json:"__typename"`
	AllCertifyGood `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns NeighborsNeighborsCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetJustification() string {
	return v.AllCertifyGood.Justification
}

// GetKnownSince returns NeighborsNeighborsCertifyGood.KnownSince, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetKnownSince() time.Time { return v.AllCertifyGood.KnownSince }

// GetSubject returns NeighborsNeighborsCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns NeighborsNeighborsCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns NeighborsNeighborsCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *NeighborsNeighborsCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyGood) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyGood, error) {
	var retval __premarshalNeighborsNeighborsCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	retval.KnownSince = v.AllCertifyGood.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// NeighborsNeighborsCertifyLegal includes the requested fields of the GraphQL type CertifyLegal.
// The GraphQL type's documentation follows.
//
// CertifyLegal is an attestation to attach legal information to a package or source.
//
// The certification information is either copied from an attestation found in an
// SBOM or created by a collector/scanner.
//
// Discovered license is also known as Concluded. More information:
// https://docs.clearlydefined.io/curation-guidelines#the-difference-between-declared-and-discovered-licenses
//
// Attribution is also known as Copyright Text. It is what could be displayed to
// comply with notice
// requirements. https://www.nexb.com/oss-attribution-best-practices/
//
// License expressions follow this format:
// https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/
type NeighborsNeighborsCertifyLegal struct {
	Typename            *string `json:"__typename"`
	AllCertifyLegalTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyLegal.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyLegal.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetId() string { return v.AllCertifyLegalTree.Id }

// GetSubject returns NeighborsNeighborsCertifyLegal.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetSubject() AllCertifyLegalTreeSubjectPackageOrSource {
	return v.AllCertifyLegalTree.Subject
}

// GetDeclaredLicense returns NeighborsNeighborsCertifyLegal.DeclaredLicense, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetDeclaredLicense() string {
	return v.AllCertifyLegalTree.DeclaredLicense
}

// GetDeclaredLicenses returns NeighborsNeighborsCertifyLegal.DeclaredLicenses, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetDeclaredLicenses() []AllCertifyLegalTreeDeclaredLicensesLicense {
	return v.AllCertifyLegalTree.DeclaredLicenses
}

// GetDiscoveredLicense returns NeighborsNeighborsCertifyLegal.DiscoveredLicense, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetDiscoveredLicense() string {
	return v.AllCertifyLegalTree.DiscoveredLicense
}

// GetDiscoveredLicenses returns NeighborsNeighborsCertifyLegal.DiscoveredLicenses, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetDiscoveredLicenses() []AllCertifyLegalTreeDiscoveredLicensesLicense {
	return v.AllCertifyLegalTree.DiscoveredLicenses
}

// GetAttribution returns NeighborsNeighborsCertifyLegal.Attribution, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetAttribution() string {
	return v.AllCertifyLegalTree.Attribution
}

// GetJustification returns NeighborsNeighborsCertifyLegal.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetJustification() string {
	return v.AllCertifyLegalTree.Justification
}

// GetTimeScanned returns NeighborsNeighborsCertifyLegal.TimeScanned, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetTimeScanned() time.Time {
	return v.AllCertifyLegalTree.TimeScanned
}

// GetOrigin returns NeighborsNeighborsCertifyLegal.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetOrigin() string { return v.AllCertifyLegalTree.Origin }

// GetCollector returns NeighborsNeighborsCertifyLegal.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyLegal) GetCollector() string {
	return v.AllCertifyLegalTree.Collector
}

func (v *NeighborsNeighborsCertifyLegal) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyLegal
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyLegal = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyLegalTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyLegal struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	DeclaredLicense string `json:"declaredLicense"`

	DeclaredLicenses []AllCertifyLegalTreeDeclaredLicensesLicense `json:"declaredLicenses"`

	DiscoveredLicense string `json:"discoveredLicense"`

	DiscoveredLicenses []AllCertifyLegalTreeDiscoveredLicensesLicense `json:"discoveredLicenses"`

	Attribution string `json:"attribution"`

	Justification string `json:"justification"`

	TimeScanned time.Time `json:"timeScanned"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsCertifyLegal) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyLegal) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyLegal, error) {
	var retval __premarshalNeighborsNeighborsCertifyLegal

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyLegalTree.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyLegalTree.Subject
		var err error
		*dst, err = __marshalAllCertifyLegalTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsCertifyLegal.AllCertifyLegalTree.Subject: %w", err)
		}
	}
	retval.DeclaredLicense = v.AllCertifyLegalTree.DeclaredLicense
	retval.DeclaredLicenses = v.AllCertifyLegalTree.DeclaredLicenses
	retval.DiscoveredLicense = v.AllCertifyLegalTree.DiscoveredLicense
	retval.DiscoveredLicenses = v.AllCertifyLegalTree.DiscoveredLicenses
	retval.Attribution = v.AllCertifyLegalTree.Attribution
	retval.Justification = v.AllCertifyLegalTree.Justification
	retval.TimeScanned = v.AllCertifyLegalTree.TimeScanned
	retval.Origin = v.AllCertifyLegalTree.Origin
	retval.Collector = v.AllCertifyLegalTree.Collector
	return &retval, nil
}

// NeighborsNeighborsCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type NeighborsNeighborsCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns NeighborsNeighborsCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns NeighborsNeighborsCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *NeighborsNeighborsCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *NeighborsNeighborsCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyScorecard) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyScorecard, error) {
	var retval __premarshalNeighborsNeighborsCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// NeighborsNeighborsCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability.
type NeighborsNeighborsCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	AllCertifyVEXStatement `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetId() string { return v.AllCertifyVEXStatement.Id }

// GetSubject returns NeighborsNeighborsCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns NeighborsNeighborsCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns NeighborsNeighborsCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetStatus() VexStatus {
	return v.AllCertifyVEXStatement.Status
}

// GetVexJustification returns NeighborsNeighborsCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns NeighborsNeighborsCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns NeighborsNeighborsCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns NeighborsNeighborsCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns NeighborsNeighborsCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetOrigin() string {
	return v.AllCertifyVEXStatement.Origin
}

// GetCollector returns NeighborsNeighborsCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *NeighborsNeighborsCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability AllCertifyVEXStatementVulnerability `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyVEXStatement) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyVEXStatement, error) {
	var retval __premarshalNeighborsNeighborsCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	retval.Vulnerability = v.AllCertifyVEXStatement.Vulnerability
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// NeighborsNeighborsCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected, we attach the a vulnerability with "NoVuln" type and an empty string
// for the vulnerability ID.
type NeighborsNeighborsCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns NeighborsNeighborsCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns NeighborsNeighborsCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns NeighborsNeighborsCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetMetadata() AllCertifyVulnMetadataScanMetadata {
	return v.AllCertifyVuln.Metadata
}

func (v *NeighborsNeighborsCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability AllCertifyVulnVulnerability `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataScanMetadata `json:"metadata"`
}

func (v *NeighborsNeighborsCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyVuln) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyVuln, error) {
	var retval __premarshalNeighborsNeighborsCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	retval.Vulnerability = v.AllCertifyVuln.Vulnerability
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// NeighborsNeighborsHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NeighborsNeighborsHasMetadata struct {
	Typename       *string `json:"__typename"`
	AllHasMetadata `json:"-"`
}

// GetTypename returns NeighborsNeighborsHasMetadata.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasMetadata) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasMetadata) GetId() string { return v.AllHasMetadata.Id }

// GetSubject returns NeighborsNeighborsHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact {
	return v.AllHasMetadata.Subject
}

// GetKey returns NeighborsNeighborsHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasMetadata) GetKey() string { return v.AllHasMetadata.Key }

// GetValue returns NeighborsNeighborsHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasMetadata) GetValue() string { return v.AllHasMetadata.Value }

// GetTimestamp returns NeighborsNeighborsHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasMetadata) GetTimestamp() time.Time { return v.AllHasMetadata.Timestamp }

// GetJustification returns NeighborsNeighborsHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasMetadata) GetJustification() string {
	return v.AllHasMetadata.Justification
}

// GetOrigin returns NeighborsNeighborsHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasMetadata) GetOrigin() string { return v.AllHasMetadata.Origin }

// GetCollector returns NeighborsNeighborsHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasMetadata) GetCollector() string { return v.AllHasMetadata.Collector }

func (v *NeighborsNeighborsHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHasMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHasMetadata struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHasMetadata) __premarshalJSON() (*__premarshalNeighborsNeighborsHasMetadata, error) {
	var retval __premarshalNeighborsNeighborsHasMetadata

	retval.Typename = v.Typename
	retval.Id = v.AllHasMetadata.Id
	{

		dst := &retval.Subject
		src := v.AllHasMetadata.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsHasMetadata.AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.AllHasMetadata.Key
	retval.Value = v.AllHasMetadata.Value
	retval.Timestamp = v.AllHasMetadata.Timestamp
	retval.Justification = v.AllHasMetadata.Justification
	retval.Origin = v.AllHasMetadata.Origin
	retval.Collector = v.AllHasMetadata.Collector
	return &retval, nil
}

// NeighborsNeighborsHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type NeighborsNeighborsHasSBOM struct {
	Typename       *string `json:"__typename"`
	AllHasSBOMTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns NeighborsNeighborsHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns NeighborsNeighborsHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns NeighborsNeighborsHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns NeighborsNeighborsHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns NeighborsNeighborsHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetDownloadLocation() string {
	return v.AllHasSBOMTree.DownloadLocation
}

// GetOrigin returns NeighborsNeighborsHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns NeighborsNeighborsHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

// GetKnownSince returns NeighborsNeighborsHasSBOM.KnownSince, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetKnownSince() time.Time { return v.AllHasSBOMTree.KnownSince }

// GetIncludedSoftware returns NeighborsNeighborsHasSBOM.IncludedSoftware, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetIncludedSoftware() []AllHasSBOMTreeIncludedSoftwarePackageOrArtifact {
	return v.AllHasSBOMTree.IncludedSoftware
}

// GetIncludedDependencies returns NeighborsNeighborsHasSBOM.IncludedDependencies, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetIncludedDependencies() []AllHasSBOMTreeIncludedDependenciesIsDependency {
	return v.AllHasSBOMTree.IncludedDependencies
}

// GetIncludedOccurrences returns NeighborsNeighborsHasSBOM.IncludedOccurrences, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetIncludedOccurrences() []AllHasSBOMTreeIncludedOccurrencesIsOccurrence {
	return v.AllHasSBOMTree.IncludedOccurrences
}

func (v *NeighborsNeighborsHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`

	KnownSince time.Time `json:"knownSince"`

	IncludedSoftware []json.RawMessage `json:"includedSoftware"`

	IncludedDependencies []AllHasSBOMTreeIncludedDependenciesIsDependency `json:"includedDependencies"`

	IncludedOccurrences []AllHasSBOMTreeIncludedOccurrencesIsOccurrence `json:"includedOccurrences"`
}

func (v *NeighborsNeighborsHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHasSBOM) __premarshalJSON() (*__premarshalNeighborsNeighborsHasSBOM, error) {
	var retval __premarshalNeighborsNeighborsHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	retval.KnownSince = v.AllHasSBOMTree.KnownSince
	{

		dst := &retval.IncludedSoftware
		src := v.AllHasSBOMTree.IncludedSoftware
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalAllHasSBOMTreeIncludedSoftwarePackageOrArtifact(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal NeighborsNeighborsHasSBOM.AllHasSBOMTree.IncludedSoftware: %w", err)
			}
		}
	}
	retval.IncludedDependencies = v.AllHasSBOMTree.IncludedDependencies
	retval.IncludedOccurrences = v.AllHasSBOMTree.IncludedOccurrences
	return &retval, nil
}

// NeighborsNeighborsHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type NeighborsNeighborsHasSLSA struct {
	Typename    *string `json:"__typename"`
	AllSLSATree `json:"-"`
}

// GetTypename returns NeighborsNeighborsHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetId() string { return v.AllSLSATree.Id }

// GetSubject returns NeighborsNeighborsHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetSubject() AllSLSATreeSubjectArtifact {
	return v.AllSLSATree.Subject
}

// GetSlsa returns NeighborsNeighborsHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetSlsa() AllSLSATreeSlsaSLSA { return v.AllSLSATree.Slsa }

func (v *NeighborsNeighborsHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject AllSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *NeighborsNeighborsHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHasSLSA) __premarshalJSON() (*__premarshalNeighborsNeighborsHasSLSA, error) {
	var retval __premarshalNeighborsNeighborsHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.AllSLSATree.Id
	retval.Subject = v.AllSLSATree.Subject
	retval.Slsa = v.AllSLSATree.Slsa
	return &retval, nil
}

// NeighborsNeighborsHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type NeighborsNeighborsHasSourceAt struct {
	Typename       *string `json:"__typename"`
	AllHasSourceAt `json:"-"`
}

// GetTypename returns NeighborsNeighborsHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetId() string { return v.AllHasSourceAt.Id }

// GetJustification returns NeighborsNeighborsHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetJustification() string {
	return v.AllHasSourceAt.Justification
}

// GetKnownSince returns NeighborsNeighborsHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetKnownSince() time.Time { return v.AllHasSourceAt.KnownSince }

// GetPackage returns NeighborsNeighborsHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetPackage() AllHasSourceAtPackage {
	return v.AllHasSourceAt.Package
}

// GetSource returns NeighborsNeighborsHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetSource() AllHasSourceAtSource {
	return v.AllHasSourceAt.Source
}

// GetOrigin returns NeighborsNeighborsHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetOrigin() string { return v.AllHasSourceAt.Origin }

// GetCollector returns NeighborsNeighborsHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetCollector() string { return v.AllHasSourceAt.Collector }

func (v *NeighborsNeighborsHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHasSourceAt) __premarshalJSON() (*__premarshalNeighborsNeighborsHasSourceAt, error) {
	var retval __premarshalNeighborsNeighborsHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// NeighborsNeighborsHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that two artifacts are identical.
type NeighborsNeighborsHashEqual struct {
	Typename         *string `json:"__typename"`
	AllHashEqualTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHashEqual.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetId() string { return v.AllHashEqualTree.Id }

// GetJustification returns NeighborsNeighborsHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetJustification() string {
	return v.AllHashEqualTree.Justification
}

// GetArtifacts returns NeighborsNeighborsHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns NeighborsNeighborsHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetOrigin() string { return v.AllHashEqualTree.Origin }

// GetCollector returns NeighborsNeighborsHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetCollector() string { return v.AllHashEqualTree.Collector }

func (v *NeighborsNeighborsHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHashEqual) __premarshalJSON() (*__premarshalNeighborsNeighborsHashEqual, error) {
	var retval __premarshalNeighborsNeighborsHashEqual

	retval.Typename = v.Typename
	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// NeighborsNeighborsIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type NeighborsNeighborsIsDependency struct {
	Typename            *string `json:"__typename"`
	AllIsDependencyTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsIsDependency.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetId() string { return v.AllIsDependencyTree.Id }

// GetJustification returns NeighborsNeighborsIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetJustification() string {
	return v.AllIsDependencyTree.Justification
}

// GetPackage returns NeighborsNeighborsIsDependency.Package, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependencyPackage returns NeighborsNeighborsIsDependency.DependencyPackage, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetDependencyPackage() AllIsDependencyTreeDependencyPackage {
	return v.AllIsDependencyTree.DependencyPackage
}

// GetDependencyType returns NeighborsNeighborsIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns NeighborsNeighborsIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetVersionRange() string {
	return v.AllIsDependencyTree.VersionRange
}

// GetOrigin returns NeighborsNeighborsIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetOrigin() string { return v.AllIsDependencyTree.Origin }

// GetCollector returns NeighborsNeighborsIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetCollector() string {
	return v.AllIsDependencyTree.Collector
}

func (v *NeighborsNeighborsIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependencyPackage AllIsDependencyTreeDependencyPackage `json:"dependencyPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsIsDependency) __premarshalJSON() (*__premarshalNeighborsNeighborsIsDependency, error) {
	var retval __premarshalNeighborsNeighborsIsDependency

	retval.Typename = v.Typename
	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependencyPackage = v.AllIsDependencyTree.DependencyPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// NeighborsNeighborsIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type NeighborsNeighborsIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns NeighborsNeighborsIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns NeighborsNeighborsIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns NeighborsNeighborsIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns NeighborsNeighborsIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns NeighborsNeighborsIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *NeighborsNeighborsIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsIsOccurrence) __premarshalJSON() (*__premarshalNeighborsNeighborsIsOccurrence, error) {
	var retval __premarshalNeighborsNeighborsIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// NeighborsNeighborsLicense includes the requested fields of the GraphQL type License.
// The GraphQL type's documentation follows.
//
// License represents a particular license. If the license is found on the SPDX
// license list (https://spdx.org/licenses/) then the fields should be:
//
// Name: SPDX license identifier
// Inline: empty
// ListVersion: SPDX license list version
//
// example:
//
// Name: AGPL-3.0-or-later
// Inline: ""
// ListVersion: 3.21 2023-06-18
//
// If the license is not on the SPDX license list, then a new guid should be
// created and the license text placed inline:
//
// Name: LicenseRef-<guid>
// Inline: Full license text
// ListVersion: empty
//
// example:
//
// Name: LicenseRef-1a2b3c
// Inline: Permission to use, copy, modify, and/or distribute ...
// ListVersion: ""
type NeighborsNeighborsLicense struct {
	Typename       *string `json:"__typename"`
	AllLicenseTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsLicense.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsLicense) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsLicense.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsLicense) GetId() string { return v.AllLicenseTree.Id }

// GetName returns NeighborsNeighborsLicense.Name, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsLicense) GetName() string { return v.AllLicenseTree.Name }

// GetInline returns NeighborsNeighborsLicense.Inline, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsLicense) GetInline() *string { return v.AllLicenseTree.Inline }

// GetListVersion returns NeighborsNeighborsLicense.ListVersion, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsLicense) GetListVersion() *string { return v.AllLicenseTree.ListVersion }

func (v *NeighborsNeighborsLicense) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsLicense
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsLicense = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllLicenseTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsLicense struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Inline *string `json:"inline"`

	ListVersion *string `json:"listVersion"`
}

func (v *NeighborsNeighborsLicense) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsLicense) __premarshalJSON() (*__premarshalNeighborsNeighborsLicense, error) {
	var retval __premarshalNeighborsNeighborsLicense

	retval.Typename = v.Typename
	retval.Id = v.AllLicenseTree.Id
	retval.Name = v.AllLicenseTree.Name
	retval.Inline = v.AllLicenseTree.Inline
	retval.ListVersion = v.AllLicenseTree.ListVersion
	return &retval, nil
}

// NeighborsNeighborsNode includes the requested fields of the GraphQL interface Node.
//
// NeighborsNeighborsNode is implemented by the following types:
// NeighborsNeighborsArtifact
// NeighborsNeighborsBuilder
// NeighborsNeighborsCertifyBad
// NeighborsNeighborsCertifyGood
// NeighborsNeighborsCertifyLegal
// NeighborsNeighborsCertifyScorecard
// NeighborsNeighborsCertifyVEXStatement
// NeighborsNeighborsCertifyVuln
// NeighborsNeighborsHasMetadata
// NeighborsNeighborsHasSBOM
// NeighborsNeighborsHasSLSA
// NeighborsNeighborsHasSourceAt
// NeighborsNeighborsHashEqual
// NeighborsNeighborsIsDependency
// NeighborsNeighborsIsOccurrence
// NeighborsNeighborsLicense
// NeighborsNeighborsPackage
// NeighborsNeighborsPkgEqual
// NeighborsNeighborsPointOfContact
// NeighborsNeighborsSource
// NeighborsNeighborsVulnEqual
// NeighborsNeighborsVulnerability
// NeighborsNeighborsVulnerabilityMetadata
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type NeighborsNeighborsNode interface {
	implementsGraphQLInterfaceNeighborsNeighborsNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *NeighborsNeighborsArtifact) implementsGraphQLInterfaceNeighborsNeighborsNode()            {}
func (v *NeighborsNeighborsBuilder) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsCertifyBad) implementsGraphQLInterfaceNeighborsNeighborsNode()          {}
func (v *NeighborsNeighborsCertifyGood) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsCertifyLegal) implementsGraphQLInterfaceNeighborsNeighborsNode()        {}
func (v *NeighborsNeighborsCertifyScorecard) implementsGraphQLInterfaceNeighborsNeighborsNode()    {}
func (v *NeighborsNeighborsCertifyVEXStatement) implementsGraphQLInterfaceNeighborsNeighborsNode() {}
func (v *NeighborsNeighborsCertifyVuln) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsHasMetadata) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsHasSBOM) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsHasSLSA) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsHasSourceAt) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsHashEqual) implementsGraphQLInterfaceNeighborsNeighborsNode()           {}
func (v *NeighborsNeighborsIsDependency) implementsGraphQLInterfaceNeighborsNeighborsNode()        {}
func (v *NeighborsNeighborsIsOccurrence) implementsGraphQLInterfaceNeighborsNeighborsNode()        {}
func (v *NeighborsNeighborsLicense) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsPackage) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsPkgEqual) implementsGraphQLInterfaceNeighborsNeighborsNode()            {}
func (v *NeighborsNeighborsPointOfContact) implementsGraphQLInterfaceNeighborsNeighborsNode()      {}
func (v *NeighborsNeighborsSource) implementsGraphQLInterfaceNeighborsNeighborsNode()              {}
func (v *NeighborsNeighborsVulnEqual) implementsGraphQLInterfaceNeighborsNeighborsNode()           {}
func (v *NeighborsNeighborsVulnerability) implementsGraphQLInterfaceNeighborsNeighborsNode()       {}
func (v *NeighborsNeighborsVulnerabilityMetadata) implementsGraphQLInterfaceNeighborsNeighborsNode() {
}

func __unmarshalNeighborsNeighborsNode(b []byte, v *NeighborsNeighborsNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(NeighborsNeighborsArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(NeighborsNeighborsBuilder)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(NeighborsNeighborsCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(NeighborsNeighborsCertifyGood)
		return json.Unmarshal(b, *v)
	case "CertifyLegal":
		*v = new(NeighborsNeighborsCertifyLegal)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(NeighborsNeighborsCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(NeighborsNeighborsCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(NeighborsNeighborsCertifyVuln)
		return json.Unmarshal(b, *v)
	case "HasMetadata":
		*v = new(NeighborsNeighborsHasMetadata)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(NeighborsNeighborsHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(NeighborsNeighborsHasSLSA)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(NeighborsNeighborsHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(NeighborsNeighborsHashEqual)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(NeighborsNeighborsIsDependency)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(NeighborsNeighborsIsOccurrence)
		return json.Unmarshal(b, *v)
	case "License":
		*v = new(NeighborsNeighborsLicense)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(NeighborsNeighborsPackage)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(NeighborsNeighborsPkgEqual)
		return json.Unmarshal(b, *v)
	case "PointOfContact":
		*v = new(NeighborsNeighborsPointOfContact)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(NeighborsNeighborsSource)
		return json.Unmarshal(b, *v)
	case "VulnEqual":
		*v = new(NeighborsNeighborsVulnEqual)
		return json.Unmarshal(b, *v)
	case "Vulnerability":
		*v = new(NeighborsNeighborsVulnerability)
		return json.Unmarshal(b, *v)
	case "VulnerabilityMetadata":
		*v = new(NeighborsNeighborsVulnerabilityMetadata)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NeighborsNeighborsNode: "%v"`, tn.TypeName)
	}
}

func __marshalNeighborsNeighborsNode(v *NeighborsNeighborsNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NeighborsNeighborsArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyLegal:
		typename = "CertifyLegal"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyLegal
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHasMetadata:
		typename = "HasMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHasMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsLicense:
		typename = "License"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsLicense
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsPkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsPkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsPointOfContact:
		typename = "PointOfContact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsPointOfContact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsVulnEqual:
		typename = "VulnEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsVulnEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsVulnerability:
		typename = "Vulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsVulnerabilityMetadata:
		typename = "VulnerabilityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsVulnerabilityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NeighborsNeighborsNode: "%T"`, v)
	}
}

// NeighborsNeighborsPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type NeighborsNeighborsPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsPackage.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsPackage.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns NeighborsNeighborsPackage.Type, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns NeighborsNeighborsPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *NeighborsNeighborsPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *NeighborsNeighborsPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsPackage) __premarshalJSON() (*__premarshalNeighborsNeighborsPackage, error) {
	var retval __premarshalNeighborsNeighborsPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// NeighborsNeighborsPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that two packages are similar.
type NeighborsNeighborsPkgEqual struct {
	Typename    *string `json:"__typename"`
	AllPkgEqual `json:"-"`
}

// GetTypename returns NeighborsNeighborsPkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetId() string { return v.AllPkgEqual.Id }

// GetJustification returns NeighborsNeighborsPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetJustification() string { return v.AllPkgEqual.Justification }

// GetPackages returns NeighborsNeighborsPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetPackages() []AllPkgEqualPackagesPackage {
	return v.AllPkgEqual.Packages
}

// GetOrigin returns NeighborsNeighborsPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetOrigin() string { return v.AllPkgEqual.Origin }

// GetCollector returns NeighborsNeighborsPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetCollector() string { return v.AllPkgEqual.Collector }

func (v *NeighborsNeighborsPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsPkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsPkgEqual) __premarshalJSON() (*__premarshalNeighborsNeighborsPkgEqual, error) {
	var retval __premarshalNeighborsNeighborsPkgEqual

	retval.Typename = v.Typename
	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// NeighborsNeighborsPointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type NeighborsNeighborsPointOfContact struct {
	Typename          *string `json:"__typename"`
	AllPointOfContact `json:"-"`
}

// GetTypename returns NeighborsNeighborsPointOfContact.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPointOfContact) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsPointOfContact.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPointOfContact) GetId() string { return v.AllPointOfContact.Id }

// GetSubject returns NeighborsNeighborsPointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.AllPointOfContact.Subject
}

// GetEmail returns NeighborsNeighborsPointOfContact.Email, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPointOfContact) GetEmail() string { return v.AllPointOfContact.Email }

// GetInfo returns NeighborsNeighborsPointOfContact.Info, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPointOfContact) GetInfo() string { return v.AllPointOfContact.Info }

// GetSince returns NeighborsNeighborsPointOfContact.Since, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPointOfContact) GetSince() time.Time { return v.AllPointOfContact.Since }

// GetJustification returns NeighborsNeighborsPointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPointOfContact) GetJustification() string {
	return v.AllPointOfContact.Justification
}

// GetOrigin returns NeighborsNeighborsPointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPointOfContact) GetOrigin() string { return v.AllPointOfContact.Origin }

// GetCollector returns NeighborsNeighborsPointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPointOfContact) GetCollector() string {
	return v.AllPointOfContact.Collector
}

func (v *NeighborsNeighborsPointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsPointOfContact
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsPointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPointOfContact)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsPointOfContact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsPointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsPointOfContact) __premarshalJSON() (*__premarshalNeighborsNeighborsPointOfContact, error) {
	var retval __premarshalNeighborsNeighborsPointOfContact

	retval.Typename = v.Typename
	retval.Id = v.AllPointOfContact.Id
	{

		dst := &retval.Subject
		src := v.AllPointOfContact.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NeighborsNeighborsPointOfContact.AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.AllPointOfContact.Email
	retval.Info = v.AllPointOfContact.Info
	retval.Since = v.AllPointOfContact.Since
	retval.Justification = v.AllPointOfContact.Justification
	retval.Origin = v.AllPointOfContact.Origin
	retval.Collector = v.AllPointOfContact.Collector
	return &retval, nil
}

// NeighborsNeighborsSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type NeighborsNeighborsSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsSource.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsSource.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns NeighborsNeighborsSource.Type, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns NeighborsNeighborsSource.Namespaces, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *NeighborsNeighborsSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsSource
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *NeighborsNeighborsSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsSource) __premarshalJSON() (*__premarshalNeighborsNeighborsSource, error) {
	var retval __premarshalNeighborsNeighborsSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// NeighborsNeighborsVulnEqual includes the requested fields of the GraphQL type VulnEqual.
// The GraphQL type's documentation follows.
//
// VulnEqual is an attestation to link two vulnerabilities together as being equal"
//
// Note that setting noVuln vulnerability type is invalid for VulnEqual!
type NeighborsNeighborsVulnEqual struct {
	Typename     *string `json:"__typename"`
	AllVulnEqual `json:"-"`
}

// GetTypename returns NeighborsNeighborsVulnEqual.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnEqual) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsVulnEqual.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnEqual) GetId() string { return v.AllVulnEqual.Id }

// GetVulnerabilities returns NeighborsNeighborsVulnEqual.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnEqual) GetVulnerabilities() []AllVulnEqualVulnerabilitiesVulnerability {
	return v.AllVulnEqual.Vulnerabilities
}

// GetJustification returns NeighborsNeighborsVulnEqual.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnEqual) GetJustification() string { return v.AllVulnEqual.Justification }

// GetOrigin returns NeighborsNeighborsVulnEqual.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnEqual) GetOrigin() string { return v.AllVulnEqual.Origin }

// GetCollector returns NeighborsNeighborsVulnEqual.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnEqual) GetCollector() string { return v.AllVulnEqual.Collector }

func (v *NeighborsNeighborsVulnEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsVulnEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsVulnEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsVulnEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Vulnerabilities []AllVulnEqualVulnerabilitiesVulnerability `json:"vulnerabilities"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsVulnEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsVulnEqual) __premarshalJSON() (*__premarshalNeighborsNeighborsVulnEqual, error) {
	var retval __premarshalNeighborsNeighborsVulnEqual

	retval.Typename = v.Typename
	retval.Id = v.AllVulnEqual.Id
	retval.Vulnerabilities = v.AllVulnEqual.Vulnerabilities
	retval.Justification = v.AllVulnEqual.Justification
	retval.Origin = v.AllVulnEqual.Origin
	retval.Collector = v.AllVulnEqual.Collector
	return &retval, nil
}

// NeighborsNeighborsVulnerability includes the requested fields of the GraphQL type Vulnerability.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type NeighborsNeighborsVulnerability struct {
	Typename             *string `json:"__typename"`
	AllVulnerabilityTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerability) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerability) GetId() string { return v.AllVulnerabilityTree.Id }

// GetType returns NeighborsNeighborsVulnerability.Type, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerability) GetType() string { return v.AllVulnerabilityTree.Type }

// GetVulnerabilityIDs returns NeighborsNeighborsVulnerability.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerability) GetVulnerabilityIDs() []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID {
	return v.AllVulnerabilityTree.VulnerabilityIDs
}

func (v *NeighborsNeighborsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnerabilityTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	VulnerabilityIDs []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

func (v *NeighborsNeighborsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsVulnerability) __premarshalJSON() (*__premarshalNeighborsNeighborsVulnerability, error) {
	var retval __premarshalNeighborsNeighborsVulnerability

	retval.Typename = v.Typename
	retval.Id = v.AllVulnerabilityTree.Id
	retval.Type = v.AllVulnerabilityTree.Type
	retval.VulnerabilityIDs = v.AllVulnerabilityTree.VulnerabilityIDs
	return &retval, nil
}

// NeighborsNeighborsVulnerabilityMetadata includes the requested fields of the GraphQL type VulnerabilityMetadata.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetadata is an attestation that a vulnerability has a related score
// associated with it.
//
// The intent of this evidence tree predicate is to allow extensibility of vulnerability
// score (one-to-one mapping) with a specific vulnerability ID.
//
// A vulnerability ID can have a one-to-many relationship with the VulnerabilityMetadata
// node as a vulnerability ID can have multiple scores (in various frameworks).
//
// Examples:
//
// scoreType: EPSSv1
// scoreValue: 0.960760000
//
// scoreType: CVSSv2
// scoreValue: 5.0
//
// scoreType: CVSSv3
// scoreValue: 7.5
//
// The timestamp is used to determine when the score was evaluated for the specific vulnerability.
type NeighborsNeighborsVulnerabilityMetadata struct {
	Typename            *string `json:"__typename"`
	AllVulnMetadataTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsVulnerabilityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerabilityMetadata) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsVulnerabilityMetadata.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerabilityMetadata) GetId() string { return v.AllVulnMetadataTree.Id }

// GetVulnerability returns NeighborsNeighborsVulnerabilityMetadata.Vulnerability, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerabilityMetadata) GetVulnerability() AllVulnMetadataTreeVulnerability {
	return v.AllVulnMetadataTree.Vulnerability
}

// GetScoreType returns NeighborsNeighborsVulnerabilityMetadata.ScoreType, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerabilityMetadata) GetScoreType() VulnerabilityScoreType {
	return v.AllVulnMetadataTree.ScoreType
}

// GetScoreValue returns NeighborsNeighborsVulnerabilityMetadata.ScoreValue, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerabilityMetadata) GetScoreValue() float64 {
	return v.AllVulnMetadataTree.ScoreValue
}

// GetTimestamp returns NeighborsNeighborsVulnerabilityMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerabilityMetadata) GetTimestamp() time.Time {
	return v.AllVulnMetadataTree.Timestamp
}

// GetOrigin returns NeighborsNeighborsVulnerabilityMetadata.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerabilityMetadata) GetOrigin() string {
	return v.AllVulnMetadataTree.Origin
}

// GetCollector returns NeighborsNeighborsVulnerabilityMetadata.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsVulnerabilityMetadata) GetCollector() string {
	return v.AllVulnMetadataTree.Collector
}

func (v *NeighborsNeighborsVulnerabilityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsVulnerabilityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsVulnerabilityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnMetadataTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsVulnerabilityMetadata struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Vulnerability AllVulnMetadataTreeVulnerability `json:"vulnerability"`

	ScoreType VulnerabilityScoreType `json:"scoreType"`

	ScoreValue float64 `json:"scoreValue"`

	Timestamp time.Time `json:"timestamp"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsVulnerabilityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsVulnerabilityMetadata) __premarshalJSON() (*__premarshalNeighborsNeighborsVulnerabilityMetadata, error) {
	var retval __premarshalNeighborsNeighborsVulnerabilityMetadata

	retval.Typename = v.Typename
	retval.Id = v.AllVulnMetadataTree.Id
	retval.Vulnerability = v.AllVulnMetadataTree.Vulnerability
	retval.ScoreType = v.AllVulnMetadataTree.ScoreType
	retval.ScoreValue = v.AllVulnMetadataTree.ScoreValue
	retval.Timestamp = v.AllVulnMetadataTree.Timestamp
	retval.Origin = v.AllVulnMetadataTree.Origin
	retval.Collector = v.AllVulnMetadataTree.Collector
	return &retval, nil
}

// NeighborsResponse is returned by Neighbors on success.
type NeighborsResponse struct {
	// neighbors returns all the direct neighbors of a node.
	//
	// Similarly, the input is only specified by its ID.
	//
	// Specifying any Edge value in `usingOnly` will make the neighbors list only
	// contain the corresponding GUAC evidence trees (GUAC verbs).
	Neighbors []NeighborsNeighborsNode `json:"-"`
}

// GetNeighbors returns NeighborsResponse.Neighbors, and is useful for accessing the field via an interface.
func (v *NeighborsResponse) GetNeighbors() []NeighborsNeighborsNode { return v.Neighbors }

func (v *NeighborsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsResponse
		Neighbors []json.RawMessage `json:"neighbors"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Neighbors
		src := firstPass.Neighbors
		*dst = make(
			[]NeighborsNeighborsNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalNeighborsNeighborsNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal NeighborsResponse.Neighbors: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalNeighborsResponse struct {
	Neighbors []json.RawMessage `json:"neighbors"`
}

func (v *NeighborsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsResponse) __premarshalJSON() (*__premarshalNeighborsResponse, error) {
	var retval __premarshalNeighborsResponse

	{

		dst := &retval.Neighbors
		src := v.Neighbors
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalNeighborsNeighborsNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal NeighborsResponse.Neighbors: %w", err)
			}
		}
	}
	return &retval, nil
}

// NodeNode includes the requested fields of the GraphQL interface Node.
//
// NodeNode is implemented by the following types:
// NodeNodeArtifact
// NodeNodeBuilder
// NodeNodeCertifyBad
// NodeNodeCertifyGood
// NodeNodeCertifyLegal
// NodeNodeCertifyScorecard
// NodeNodeCertifyVEXStatement
// NodeNodeCertifyVuln
// NodeNodeHasMetadata
// NodeNodeHasSBOM
// NodeNodeHasSLSA
// NodeNodeHasSourceAt
// NodeNodeHashEqual
// NodeNodeIsDependency
// NodeNodeIsOccurrence
// NodeNodeLicense
// NodeNodePackage
// NodeNodePkgEqual
// NodeNodePointOfContact
// NodeNodeSource
// NodeNodeVulnEqual
// NodeNodeVulnerability
// NodeNodeVulnerabilityMetadata
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type NodeNode interface {
	implementsGraphQLInterfaceNodeNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *NodeNodeArtifact) implementsGraphQLInterfaceNodeNode()              {}
func (v *NodeNodeBuilder) implementsGraphQLInterfaceNodeNode()               {}
func (v *NodeNodeCertifyBad) implementsGraphQLInterfaceNodeNode()            {}
func (v *NodeNodeCertifyGood) implementsGraphQLInterfaceNodeNode()           {}
func (v *NodeNodeCertifyLegal) implementsGraphQLInterfaceNodeNode()          {}
func (v *NodeNodeCertifyScorecard) implementsGraphQLInterfaceNodeNode()      {}
func (v *NodeNodeCertifyVEXStatement) implementsGraphQLInterfaceNodeNode()   {}
func (v *NodeNodeCertifyVuln) implementsGraphQLInterfaceNodeNode()           {}
func (v *NodeNodeHasMetadata) implementsGraphQLInterfaceNodeNode()           {}
func (v *NodeNodeHasSBOM) implementsGraphQLInterfaceNodeNode()               {}
func (v *NodeNodeHasSLSA) implementsGraphQLInterfaceNodeNode()               {}
func (v *NodeNodeHasSourceAt) implementsGraphQLInterfaceNodeNode()           {}
func (v *NodeNodeHashEqual) implementsGraphQLInterfaceNodeNode()             {}
func (v *NodeNodeIsDependency) implementsGraphQLInterfaceNodeNode()          {}
func (v *NodeNodeIsOccurrence) implementsGraphQLInterfaceNodeNode()          {}
func (v *NodeNodeLicense) implementsGraphQLInterfaceNodeNode()               {}
func (v *NodeNodePackage) implementsGraphQLInterfaceNodeNode()               {}
func (v *NodeNodePkgEqual) implementsGraphQLInterfaceNodeNode()              {}
func (v *NodeNodePointOfContact) implementsGraphQLInterfaceNodeNode()        {}
func (v *NodeNodeSource) implementsGraphQLInterfaceNodeNode()                {}
func (v *NodeNodeVulnEqual) implementsGraphQLInterfaceNodeNode()             {}
func (v *NodeNodeVulnerability) implementsGraphQLInterfaceNodeNode()         {}
func (v *NodeNodeVulnerabilityMetadata) implementsGraphQLInterfaceNodeNode() {}

func __unmarshalNodeNode(b []byte, v *NodeNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(NodeNodeArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(NodeNodeBuilder)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(NodeNodeCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(NodeNodeCertifyGood)
		return json.Unmarshal(b, *v)
	case "CertifyLegal":
		*v = new(NodeNodeCertifyLegal)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(NodeNodeCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(NodeNodeCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(NodeNodeCertifyVuln)
		return json.Unmarshal(b, *v)
	case "HasMetadata":
		*v = new(NodeNodeHasMetadata)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(NodeNodeHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(NodeNodeHasSLSA)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(NodeNodeHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(NodeNodeHashEqual)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(NodeNodeIsDependency)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(NodeNodeIsOccurrence)
		return json.Unmarshal(b, *v)
	case "License":
		*v = new(NodeNodeLicense)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(NodeNodePackage)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(NodeNodePkgEqual)
		return json.Unmarshal(b, *v)
	case "PointOfContact":
		*v = new(NodeNodePointOfContact)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(NodeNodeSource)
		return json.Unmarshal(b, *v)
	case "VulnEqual":
		*v = new(NodeNodeVulnEqual)
		return json.Unmarshal(b, *v)
	case "Vulnerability":
		*v = new(NodeNodeVulnerability)
		return json.Unmarshal(b, *v)
	case "VulnerabilityMetadata":
		*v = new(NodeNodeVulnerabilityMetadata)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NodeNode: "%v"`, tn.TypeName)
	}
}

func __marshalNodeNode(v *NodeNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NodeNodeArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyLegal:
		typename = "CertifyLegal"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyLegal
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHasMetadata:
		typename = "HasMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHasMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeLicense:
		typename = "License"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeLicense
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodePackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodePackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodePkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodePkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodePointOfContact:
		typename = "PointOfContact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodePointOfContact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeVulnEqual:
		typename = "VulnEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeVulnEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeVulnerability:
		typename = "Vulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeVulnerabilityMetadata:
		typename = "VulnerabilityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeVulnerabilityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NodeNode: "%T"`, v)
	}
}

// NodeNodeArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type NodeNodeArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns NodeNodeArtifact.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeArtifact.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns NodeNodeArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns NodeNodeArtifact.Digest, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *NodeNodeArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *NodeNodeArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeArtifact) __premarshalJSON() (*__premarshalNodeNodeArtifact, error) {
	var retval __premarshalNodeNodeArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// NodeNodeBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type NodeNodeBuilder struct {
	Typename       *string `json:"__typename"`
	AllBuilderTree `json:"-"`
}

// GetTypename returns NodeNodeBuilder.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeBuilder) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeBuilder.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeBuilder) GetId() string { return v.AllBuilderTree.Id }

// GetUri returns NodeNodeBuilder.Uri, and is useful for accessing the field via an interface.
func (v *NodeNodeBuilder) GetUri() string { return v.AllBuilderTree.Uri }

func (v *NodeNodeBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *NodeNodeBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeBuilder) __premarshalJSON() (*__premarshalNodeNodeBuilder, error) {
	var retval __premarshalNodeNodeBuilder

	retval.Typename = v.Typename
	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// NodeNodeCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodeNodeCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns NodeNodeCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns NodeNodeCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetKnownSince returns NodeNodeCertifyBad.KnownSince, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetKnownSince() time.Time { return v.AllCertifyBad.KnownSince }

// GetSubject returns NodeNodeCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns NodeNodeCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns NodeNodeCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *NodeNodeCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyBad) __premarshalJSON() (*__premarshalNodeNodeCertifyBad, error) {
	var retval __premarshalNodeNodeCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	retval.KnownSince = v.AllCertifyBad.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// NodeNodeCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodeNodeCertifyGood struct {
	Typename       *string `json:"__typename"`
	AllCertifyGood `json:"-"`
}

// GetTypename returns NodeNodeCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns NodeNodeCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetJustification() string { return v.AllCertifyGood.Justification }

// GetKnownSince returns NodeNodeCertifyGood.KnownSince, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetKnownSince() time.Time { return v.AllCertifyGood.KnownSince }

// GetSubject returns NodeNodeCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns NodeNodeCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns NodeNodeCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *NodeNodeCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyGood) __premarshalJSON() (*__premarshalNodeNodeCertifyGood, error) {
	var retval __premarshalNodeNodeCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	retval.KnownSince = v.AllCertifyGood.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// NodeNodeCertifyLegal includes the requested fields of the GraphQL type CertifyLegal.
// The GraphQL type's documentation follows.
//
// CertifyLegal is an attestation to attach legal information to a package or source.
//
// The certification information is either copied from an attestation found in an
// SBOM or created by a collector/scanner.
//
// Discovered license is also known as Concluded. More information:
// https://docs.clearlydefined.io/curation-guidelines#the-difference-between-declared-and-discovered-licenses
//
// Attribution is also known as Copyright Text. It is what could be displayed to
// comply with notice
// requirements. https://www.nexb.com/oss-attribution-best-practices/
//
// License expressions follow this format:
// https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/
type NodeNodeCertifyLegal struct {
	Typename            *string `json:"__typename"`
	AllCertifyLegalTree `json:"-"`
}

// GetTypename returns NodeNodeCertifyLegal.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyLegal.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetId() string { return v.AllCertifyLegalTree.Id }

// GetSubject returns NodeNodeCertifyLegal.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetSubject() AllCertifyLegalTreeSubjectPackageOrSource {
	return v.AllCertifyLegalTree.Subject
}

// GetDeclaredLicense returns NodeNodeCertifyLegal.DeclaredLicense, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetDeclaredLicense() string {
	return v.AllCertifyLegalTree.DeclaredLicense
}

// GetDeclaredLicenses returns NodeNodeCertifyLegal.DeclaredLicenses, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetDeclaredLicenses() []AllCertifyLegalTreeDeclaredLicensesLicense {
	return v.AllCertifyLegalTree.DeclaredLicenses
}

// GetDiscoveredLicense returns NodeNodeCertifyLegal.DiscoveredLicense, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetDiscoveredLicense() string {
	return v.AllCertifyLegalTree.DiscoveredLicense
}

// GetDiscoveredLicenses returns NodeNodeCertifyLegal.DiscoveredLicenses, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetDiscoveredLicenses() []AllCertifyLegalTreeDiscoveredLicensesLicense {
	return v.AllCertifyLegalTree.DiscoveredLicenses
}

// GetAttribution returns NodeNodeCertifyLegal.Attribution, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetAttribution() string { return v.AllCertifyLegalTree.Attribution }

// GetJustification returns NodeNodeCertifyLegal.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetJustification() string { return v.AllCertifyLegalTree.Justification }

// GetTimeScanned returns NodeNodeCertifyLegal.TimeScanned, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetTimeScanned() time.Time { return v.AllCertifyLegalTree.TimeScanned }

// GetOrigin returns NodeNodeCertifyLegal.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetOrigin() string { return v.AllCertifyLegalTree.Origin }

// GetCollector returns NodeNodeCertifyLegal.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyLegal) GetCollector() string { return v.AllCertifyLegalTree.Collector }

func (v *NodeNodeCertifyLegal) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyLegal
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyLegal = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyLegalTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyLegal struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	DeclaredLicense string `json:"declaredLicense"`

	DeclaredLicenses []AllCertifyLegalTreeDeclaredLicensesLicense `json:"declaredLicenses"`

	DiscoveredLicense string `json:"discoveredLicense"`

	DiscoveredLicenses []AllCertifyLegalTreeDiscoveredLicensesLicense `json:"discoveredLicenses"`

	Attribution string `json:"attribution"`

	Justification string `json:"justification"`

	TimeScanned time.Time `json:"timeScanned"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeCertifyLegal) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyLegal) __premarshalJSON() (*__premarshalNodeNodeCertifyLegal, error) {
	var retval __premarshalNodeNodeCertifyLegal

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyLegalTree.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyLegalTree.Subject
		var err error
		*dst, err = __marshalAllCertifyLegalTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeCertifyLegal.AllCertifyLegalTree.Subject: %w", err)
		}
	}
	retval.DeclaredLicense = v.AllCertifyLegalTree.DeclaredLicense
	retval.DeclaredLicenses = v.AllCertifyLegalTree.DeclaredLicenses
	retval.DiscoveredLicense = v.AllCertifyLegalTree.DiscoveredLicense
	retval.DiscoveredLicenses = v.AllCertifyLegalTree.DiscoveredLicenses
	retval.Attribution = v.AllCertifyLegalTree.Attribution
	retval.Justification = v.AllCertifyLegalTree.Justification
	retval.TimeScanned = v.AllCertifyLegalTree.TimeScanned
	retval.Origin = v.AllCertifyLegalTree.Origin
	retval.Collector = v.AllCertifyLegalTree.Collector
	return &retval, nil
}

// NodeNodeCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type NodeNodeCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns NodeNodeCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns NodeNodeCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns NodeNodeCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *NodeNodeCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *NodeNodeCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyScorecard) __premarshalJSON() (*__premarshalNodeNodeCertifyScorecard, error) {
	var retval __premarshalNodeNodeCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// NodeNodeCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability.
type NodeNodeCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	AllCertifyVEXStatement `json:"-"`
}

// GetTypename returns NodeNodeCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetId() string { return v.AllCertifyVEXStatement.Id }

// GetSubject returns NodeNodeCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns NodeNodeCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns NodeNodeCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetStatus() VexStatus { return v.AllCertifyVEXStatement.Status }

// GetVexJustification returns NodeNodeCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns NodeNodeCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns NodeNodeCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns NodeNodeCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns NodeNodeCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetOrigin() string { return v.AllCertifyVEXStatement.Origin }

// GetCollector returns NodeNodeCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *NodeNodeCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability AllCertifyVEXStatementVulnerability `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyVEXStatement) __premarshalJSON() (*__premarshalNodeNodeCertifyVEXStatement, error) {
	var retval __premarshalNodeNodeCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	retval.Vulnerability = v.AllCertifyVEXStatement.Vulnerability
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// NodeNodeCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected, we attach the a vulnerability with "NoVuln" type and an empty string
// for the vulnerability ID.
type NodeNodeCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns NodeNodeCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns NodeNodeCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.AllCertifyVuln.Package }

// GetVulnerability returns NodeNodeCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns NodeNodeCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetMetadata() AllCertifyVulnMetadataScanMetadata {
	return v.AllCertifyVuln.Metadata
}

func (v *NodeNodeCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability AllCertifyVulnVulnerability `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataScanMetadata `json:"metadata"`
}

func (v *NodeNodeCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyVuln) __premarshalJSON() (*__premarshalNodeNodeCertifyVuln, error) {
	var retval __premarshalNodeNodeCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	retval.Vulnerability = v.AllCertifyVuln.Vulnerability
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// NodeNodeHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodeNodeHasMetadata struct {
	Typename       *string `json:"__typename"`
	AllHasMetadata `json:"-"`
}

// GetTypename returns NodeNodeHasMetadata.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasMetadata) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHasMetadata) GetId() string { return v.AllHasMetadata.Id }

// GetSubject returns NodeNodeHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact {
	return v.AllHasMetadata.Subject
}

// GetKey returns NodeNodeHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *NodeNodeHasMetadata) GetKey() string { return v.AllHasMetadata.Key }

// GetValue returns NodeNodeHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *NodeNodeHasMetadata) GetValue() string { return v.AllHasMetadata.Value }

// GetTimestamp returns NodeNodeHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *NodeNodeHasMetadata) GetTimestamp() time.Time { return v.AllHasMetadata.Timestamp }

// GetJustification returns NodeNodeHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeHasMetadata) GetJustification() string { return v.AllHasMetadata.Justification }

// GetOrigin returns NodeNodeHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeHasMetadata) GetOrigin() string { return v.AllHasMetadata.Origin }

// GetCollector returns NodeNodeHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeHasMetadata) GetCollector() string { return v.AllHasMetadata.Collector }

func (v *NodeNodeHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHasMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHasMetadata struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHasMetadata) __premarshalJSON() (*__premarshalNodeNodeHasMetadata, error) {
	var retval __premarshalNodeNodeHasMetadata

	retval.Typename = v.Typename
	retval.Id = v.AllHasMetadata.Id
	{

		dst := &retval.Subject
		src := v.AllHasMetadata.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeHasMetadata.AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.AllHasMetadata.Key
	retval.Value = v.AllHasMetadata.Value
	retval.Timestamp = v.AllHasMetadata.Timestamp
	retval.Justification = v.AllHasMetadata.Justification
	retval.Origin = v.AllHasMetadata.Origin
	retval.Collector = v.AllHasMetadata.Collector
	return &retval, nil
}

// NodeNodeHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type NodeNodeHasSBOM struct {
	Typename       *string `json:"__typename"`
	AllHasSBOMTree `json:"-"`
}

// GetTypename returns NodeNodeHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns NodeNodeHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns NodeNodeHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns NodeNodeHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns NodeNodeHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns NodeNodeHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetDownloadLocation() string { return v.AllHasSBOMTree.DownloadLocation }

// GetOrigin returns NodeNodeHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns NodeNodeHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

// GetKnownSince returns NodeNodeHasSBOM.KnownSince, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetKnownSince() time.Time { return v.AllHasSBOMTree.KnownSince }

// GetIncludedSoftware returns NodeNodeHasSBOM.IncludedSoftware, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetIncludedSoftware() []AllHasSBOMTreeIncludedSoftwarePackageOrArtifact {
	return v.AllHasSBOMTree.IncludedSoftware
}

// GetIncludedDependencies returns NodeNodeHasSBOM.IncludedDependencies, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetIncludedDependencies() []AllHasSBOMTreeIncludedDependenciesIsDependency {
	return v.AllHasSBOMTree.IncludedDependencies
}

// GetIncludedOccurrences returns NodeNodeHasSBOM.IncludedOccurrences, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetIncludedOccurrences() []AllHasSBOMTreeIncludedOccurrencesIsOccurrence {
	return v.AllHasSBOMTree.IncludedOccurrences
}

func (v *NodeNodeHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`

	KnownSince time.Time `json:"knownSince"`

	IncludedSoftware []json.RawMessage `json:"includedSoftware"`

	IncludedDependencies []AllHasSBOMTreeIncludedDependenciesIsDependency `json:"includedDependencies"`

	IncludedOccurrences []AllHasSBOMTreeIncludedOccurrencesIsOccurrence `json:"includedOccurrences"`
}

func (v *NodeNodeHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHasSBOM) __premarshalJSON() (*__premarshalNodeNodeHasSBOM, error) {
	var retval __premarshalNodeNodeHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	retval.KnownSince = v.AllHasSBOMTree.KnownSince
	{

		dst := &retval.IncludedSoftware
		src := v.AllHasSBOMTree.IncludedSoftware
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalAllHasSBOMTreeIncludedSoftwarePackageOrArtifact(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal NodeNodeHasSBOM.AllHasSBOMTree.IncludedSoftware: %w", err)
			}
		}
	}
	retval.IncludedDependencies = v.AllHasSBOMTree.IncludedDependencies
	retval.IncludedOccurrences = v.AllHasSBOMTree.IncludedOccurrences
	return &retval, nil
}

// NodeNodeHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type NodeNodeHasSLSA struct {
	Typename    *string `json:"__typename"`
	AllSLSATree `json:"-"`
}

// GetTypename returns NodeNodeHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetId() string { return v.AllSLSATree.Id }

// GetSubject returns NodeNodeHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetSubject() AllSLSATreeSubjectArtifact { return v.AllSLSATree.Subject }

// GetSlsa returns NodeNodeHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetSlsa() AllSLSATreeSlsaSLSA { return v.AllSLSATree.Slsa }

func (v *NodeNodeHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject AllSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *NodeNodeHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHasSLSA) __premarshalJSON() (*__premarshalNodeNodeHasSLSA, error) {
	var retval __premarshalNodeNodeHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.AllSLSATree.Id
	retval.Subject = v.AllSLSATree.Subject
	retval.Slsa = v.AllSLSATree.Slsa
	return &retval, nil
}

// NodeNodeHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type NodeNodeHasSourceAt struct {
	Typename       *string `json:"__typename"`
	AllHasSourceAt `json:"-"`
}

// GetTypename returns NodeNodeHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetId() string { return v.AllHasSourceAt.Id }

// GetJustification returns NodeNodeHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetJustification() string { return v.AllHasSourceAt.Justification }

// GetKnownSince returns NodeNodeHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetKnownSince() time.Time { return v.AllHasSourceAt.KnownSince }

// GetPackage returns NodeNodeHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetPackage() AllHasSourceAtPackage { return v.AllHasSourceAt.Package }

// GetSource returns NodeNodeHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetSource() AllHasSourceAtSource { return v.AllHasSourceAt.Source }

// GetOrigin returns NodeNodeHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetOrigin() string { return v.AllHasSourceAt.Origin }

// GetCollector returns NodeNodeHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetCollector() string { return v.AllHasSourceAt.Collector }

func (v *NodeNodeHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHasSourceAt) __premarshalJSON() (*__premarshalNodeNodeHasSourceAt, error) {
	var retval __premarshalNodeNodeHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// NodeNodeHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that two artifacts are identical.
type NodeNodeHashEqual struct {
	Typename         *string `json:"__typename"`
	AllHashEqualTree `json:"-"`
}

// GetTypename returns NodeNodeHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHashEqual.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetId() string { return v.AllHashEqualTree.Id }

// GetJustification returns NodeNodeHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetJustification() string { return v.AllHashEqualTree.Justification }

// GetArtifacts returns NodeNodeHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns NodeNodeHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetOrigin() string { return v.AllHashEqualTree.Origin }

// GetCollector returns NodeNodeHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetCollector() string { return v.AllHashEqualTree.Collector }

func (v *NodeNodeHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHashEqual) __premarshalJSON() (*__premarshalNodeNodeHashEqual, error) {
	var retval __premarshalNodeNodeHashEqual

	retval.Typename = v.Typename
	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// NodeNodeIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type NodeNodeIsDependency struct {
	Typename            *string `json:"__typename"`
	AllIsDependencyTree `json:"-"`
}

// GetTypename returns NodeNodeIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeIsDependency.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetId() string { return v.AllIsDependencyTree.Id }

// GetJustification returns NodeNodeIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetJustification() string { return v.AllIsDependencyTree.Justification }

// GetPackage returns NodeNodeIsDependency.Package, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependencyPackage returns NodeNodeIsDependency.DependencyPackage, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetDependencyPackage() AllIsDependencyTreeDependencyPackage {
	return v.AllIsDependencyTree.DependencyPackage
}

// GetDependencyType returns NodeNodeIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns NodeNodeIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetVersionRange() string { return v.AllIsDependencyTree.VersionRange }

// GetOrigin returns NodeNodeIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetOrigin() string { return v.AllIsDependencyTree.Origin }

// GetCollector returns NodeNodeIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetCollector() string { return v.AllIsDependencyTree.Collector }

func (v *NodeNodeIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependencyPackage AllIsDependencyTreeDependencyPackage `json:"dependencyPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeIsDependency) __premarshalJSON() (*__premarshalNodeNodeIsDependency, error) {
	var retval __premarshalNodeNodeIsDependency

	retval.Typename = v.Typename
	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependencyPackage = v.AllIsDependencyTree.DependencyPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// NodeNodeIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type NodeNodeIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns NodeNodeIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns NodeNodeIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns NodeNodeIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns NodeNodeIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetJustification() string { return v.AllIsOccurrencesTree.Justification }

// GetOrigin returns NodeNodeIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns NodeNodeIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetCollector() string { return v.AllIsOccurrencesTree.Collector }

func (v *NodeNodeIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeIsOccurrence) __premarshalJSON() (*__premarshalNodeNodeIsOccurrence, error) {
	var retval __premarshalNodeNodeIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodeIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// NodeNodeLicense includes the requested fields of the GraphQL type License.
// The GraphQL type's documentation follows.
//
// License represents a particular license. If the license is found on the SPDX
// license list (https://spdx.org/licenses/) then the fields should be:
//
// Name: SPDX license identifier
// Inline: empty
// ListVersion: SPDX license list version
//
// example:
//
// Name: AGPL-3.0-or-later
// Inline: ""
// ListVersion: 3.21 2023-06-18
//
// If the license is not on the SPDX license list, then a new guid should be
// created and the license text placed inline:
//
// Name: LicenseRef-<guid>
// Inline: Full license text
// ListVersion: empty
//
// example:
//
// Name: LicenseRef-1a2b3c
// Inline: Permission to use, copy, modify, and/or distribute ...
// ListVersion: ""
type NodeNodeLicense struct {
	Typename       *string `json:"__typename"`
	AllLicenseTree `json:"-"`
}

// GetTypename returns NodeNodeLicense.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeLicense) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeLicense.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeLicense) GetId() string { return v.AllLicenseTree.Id }

// GetName returns NodeNodeLicense.Name, and is useful for accessing the field via an interface.
func (v *NodeNodeLicense) GetName() string { return v.AllLicenseTree.Name }

// GetInline returns NodeNodeLicense.Inline, and is useful for accessing the field via an interface.
func (v *NodeNodeLicense) GetInline() *string { return v.AllLicenseTree.Inline }

// GetListVersion returns NodeNodeLicense.ListVersion, and is useful for accessing the field via an interface.
func (v *NodeNodeLicense) GetListVersion() *string { return v.AllLicenseTree.ListVersion }

func (v *NodeNodeLicense) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeLicense
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeLicense = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllLicenseTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeLicense struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Inline *string `json:"inline"`

	ListVersion *string `json:"listVersion"`
}

func (v *NodeNodeLicense) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeLicense) __premarshalJSON() (*__premarshalNodeNodeLicense, error) {
	var retval __premarshalNodeNodeLicense

	retval.Typename = v.Typename
	retval.Id = v.AllLicenseTree.Id
	retval.Name = v.AllLicenseTree.Name
	retval.Inline = v.AllLicenseTree.Inline
	retval.ListVersion = v.AllLicenseTree.ListVersion
	return &retval, nil
}

// NodeNodePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type NodeNodePackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns NodeNodePackage.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetTypename() *string { return v.Typename }

// GetId returns NodeNodePackage.Id, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns NodeNodePackage.Type, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns NodeNodePackage.Namespaces, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *NodeNodePackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodePackage
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodePackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodePackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *NodeNodePackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodePackage) __premarshalJSON() (*__premarshalNodeNodePackage, error) {
	var retval __premarshalNodeNodePackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// NodeNodePkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that two packages are similar.
type NodeNodePkgEqual struct {
	Typename    *string `json:"__typename"`
	AllPkgEqual `json:"-"`
}

// GetTypename returns NodeNodePkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetTypename() *string { return v.Typename }

// GetId returns NodeNodePkgEqual.Id, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetId() string { return v.AllPkgEqual.Id }

// GetJustification returns NodeNodePkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetJustification() string { return v.AllPkgEqual.Justification }

// GetPackages returns NodeNodePkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetPackages() []AllPkgEqualPackagesPackage { return v.AllPkgEqual.Packages }

// GetOrigin returns NodeNodePkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetOrigin() string { return v.AllPkgEqual.Origin }

// GetCollector returns NodeNodePkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetCollector() string { return v.AllPkgEqual.Collector }

func (v *NodeNodePkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodePkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodePkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodePkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodePkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodePkgEqual) __premarshalJSON() (*__premarshalNodeNodePkgEqual, error) {
	var retval __premarshalNodeNodePkgEqual

	retval.Typename = v.Typename
	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// NodeNodePointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type NodeNodePointOfContact struct {
	Typename          *string `json:"__typename"`
	AllPointOfContact `json:"-"`
}

// GetTypename returns NodeNodePointOfContact.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodePointOfContact) GetTypename() *string { return v.Typename }

// GetId returns NodeNodePointOfContact.Id, and is useful for accessing the field via an interface.
func (v *NodeNodePointOfContact) GetId() string { return v.AllPointOfContact.Id }

// GetSubject returns NodeNodePointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodePointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.AllPointOfContact.Subject
}

// GetEmail returns NodeNodePointOfContact.Email, and is useful for accessing the field via an interface.
func (v *NodeNodePointOfContact) GetEmail() string { return v.AllPointOfContact.Email }

// GetInfo returns NodeNodePointOfContact.Info, and is useful for accessing the field via an interface.
func (v *NodeNodePointOfContact) GetInfo() string { return v.AllPointOfContact.Info }

// GetSince returns NodeNodePointOfContact.Since, and is useful for accessing the field via an interface.
func (v *NodeNodePointOfContact) GetSince() time.Time { return v.AllPointOfContact.Since }

// GetJustification returns NodeNodePointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodePointOfContact) GetJustification() string { return v.AllPointOfContact.Justification }

// GetOrigin returns NodeNodePointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodePointOfContact) GetOrigin() string { return v.AllPointOfContact.Origin }

// GetCollector returns NodeNodePointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodePointOfContact) GetCollector() string { return v.AllPointOfContact.Collector }

func (v *NodeNodePointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodePointOfContact
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodePointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPointOfContact)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodePointOfContact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodePointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodePointOfContact) __premarshalJSON() (*__premarshalNodeNodePointOfContact, error) {
	var retval __premarshalNodeNodePointOfContact

	retval.Typename = v.Typename
	retval.Id = v.AllPointOfContact.Id
	{

		dst := &retval.Subject
		src := v.AllPointOfContact.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeNodePointOfContact.AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.AllPointOfContact.Email
	retval.Info = v.AllPointOfContact.Info
	retval.Since = v.AllPointOfContact.Since
	retval.Justification = v.AllPointOfContact.Justification
	retval.Origin = v.AllPointOfContact.Origin
	retval.Collector = v.AllPointOfContact.Collector
	return &retval, nil
}

// NodeNodeSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type NodeNodeSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns NodeNodeSource.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeSource.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns NodeNodeSource.Type, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns NodeNodeSource.Namespaces, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *NodeNodeSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeSource
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *NodeNodeSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeSource) __premarshalJSON() (*__premarshalNodeNodeSource, error) {
	var retval __premarshalNodeNodeSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// NodeNodeVulnEqual includes the requested fields of the GraphQL type VulnEqual.
// The GraphQL type's documentation follows.
//
// VulnEqual is an attestation to link two vulnerabilities together as being equal"
//
// Note that setting noVuln vulnerability type is invalid for VulnEqual!
type NodeNodeVulnEqual struct {
	Typename     *string `json:"__typename"`
	AllVulnEqual `json:"-"`
}

// GetTypename returns NodeNodeVulnEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnEqual) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeVulnEqual.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnEqual) GetId() string { return v.AllVulnEqual.Id }

// GetVulnerabilities returns NodeNodeVulnEqual.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnEqual) GetVulnerabilities() []AllVulnEqualVulnerabilitiesVulnerability {
	return v.AllVulnEqual.Vulnerabilities
}

// GetJustification returns NodeNodeVulnEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnEqual) GetJustification() string { return v.AllVulnEqual.Justification }

// GetOrigin returns NodeNodeVulnEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnEqual) GetOrigin() string { return v.AllVulnEqual.Origin }

// GetCollector returns NodeNodeVulnEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnEqual) GetCollector() string { return v.AllVulnEqual.Collector }

func (v *NodeNodeVulnEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeVulnEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeVulnEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeVulnEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Vulnerabilities []AllVulnEqualVulnerabilitiesVulnerability `json:"vulnerabilities"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeVulnEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeVulnEqual) __premarshalJSON() (*__premarshalNodeNodeVulnEqual, error) {
	var retval __premarshalNodeNodeVulnEqual

	retval.Typename = v.Typename
	retval.Id = v.AllVulnEqual.Id
	retval.Vulnerabilities = v.AllVulnEqual.Vulnerabilities
	retval.Justification = v.AllVulnEqual.Justification
	retval.Origin = v.AllVulnEqual.Origin
	retval.Collector = v.AllVulnEqual.Collector
	return &retval, nil
}

// NodeNodeVulnerability includes the requested fields of the GraphQL type Vulnerability.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type NodeNodeVulnerability struct {
	Typename             *string `json:"__typename"`
	AllVulnerabilityTree `json:"-"`
}

// GetTypename returns NodeNodeVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerability) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeVulnerability.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerability) GetId() string { return v.AllVulnerabilityTree.Id }

// GetType returns NodeNodeVulnerability.Type, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerability) GetType() string { return v.AllVulnerabilityTree.Type }

// GetVulnerabilityIDs returns NodeNodeVulnerability.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerability) GetVulnerabilityIDs() []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID {
	return v.AllVulnerabilityTree.VulnerabilityIDs
}

func (v *NodeNodeVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnerabilityTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	VulnerabilityIDs []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

func (v *NodeNodeVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeVulnerability) __premarshalJSON() (*__premarshalNodeNodeVulnerability, error) {
	var retval __premarshalNodeNodeVulnerability

	retval.Typename = v.Typename
	retval.Id = v.AllVulnerabilityTree.Id
	retval.Type = v.AllVulnerabilityTree.Type
	retval.VulnerabilityIDs = v.AllVulnerabilityTree.VulnerabilityIDs
	return &retval, nil
}

// NodeNodeVulnerabilityMetadata includes the requested fields of the GraphQL type VulnerabilityMetadata.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetadata is an attestation that a vulnerability has a related score
// associated with it.
//
// The intent of this evidence tree predicate is to allow extensibility of vulnerability
// score (one-to-one mapping) with a specific vulnerability ID.
//
// A vulnerability ID can have a one-to-many relationship with the VulnerabilityMetadata
// node as a vulnerability ID can have multiple scores (in various frameworks).
//
// Examples:
//
// scoreType: EPSSv1
// scoreValue: 0.960760000
//
// scoreType: CVSSv2
// scoreValue: 5.0
//
// scoreType: CVSSv3
// scoreValue: 7.5
//
// The timestamp is used to determine when the score was evaluated for the specific vulnerability.
type NodeNodeVulnerabilityMetadata struct {
	Typename            *string `json:"__typename"`
	AllVulnMetadataTree `json:"-"`
}

// GetTypename returns NodeNodeVulnerabilityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerabilityMetadata) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeVulnerabilityMetadata.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerabilityMetadata) GetId() string { return v.AllVulnMetadataTree.Id }

// GetVulnerability returns NodeNodeVulnerabilityMetadata.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerabilityMetadata) GetVulnerability() AllVulnMetadataTreeVulnerability {
	return v.AllVulnMetadataTree.Vulnerability
}

// GetScoreType returns NodeNodeVulnerabilityMetadata.ScoreType, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerabilityMetadata) GetScoreType() VulnerabilityScoreType {
	return v.AllVulnMetadataTree.ScoreType
}

// GetScoreValue returns NodeNodeVulnerabilityMetadata.ScoreValue, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerabilityMetadata) GetScoreValue() float64 {
	return v.AllVulnMetadataTree.ScoreValue
}

// GetTimestamp returns NodeNodeVulnerabilityMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerabilityMetadata) GetTimestamp() time.Time {
	return v.AllVulnMetadataTree.Timestamp
}

// GetOrigin returns NodeNodeVulnerabilityMetadata.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerabilityMetadata) GetOrigin() string { return v.AllVulnMetadataTree.Origin }

// GetCollector returns NodeNodeVulnerabilityMetadata.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeVulnerabilityMetadata) GetCollector() string { return v.AllVulnMetadataTree.Collector }

func (v *NodeNodeVulnerabilityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeVulnerabilityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeVulnerabilityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnMetadataTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeVulnerabilityMetadata struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Vulnerability AllVulnMetadataTreeVulnerability `json:"vulnerability"`

	ScoreType VulnerabilityScoreType `json:"scoreType"`

	ScoreValue float64 `json:"scoreValue"`

	Timestamp time.Time `json:"timestamp"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeVulnerabilityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeVulnerabilityMetadata) __premarshalJSON() (*__premarshalNodeNodeVulnerabilityMetadata, error) {
	var retval __premarshalNodeNodeVulnerabilityMetadata

	retval.Typename = v.Typename
	retval.Id = v.AllVulnMetadataTree.Id
	retval.Vulnerability = v.AllVulnMetadataTree.Vulnerability
	retval.ScoreType = v.AllVulnMetadataTree.ScoreType
	retval.ScoreValue = v.AllVulnMetadataTree.ScoreValue
	retval.Timestamp = v.AllVulnMetadataTree.Timestamp
	retval.Origin = v.AllVulnMetadataTree.Origin
	retval.Collector = v.AllVulnMetadataTree.Collector
	return &retval, nil
}

// NodeResponse is returned by Node on success.
type NodeResponse struct {
	// node returns a single node, regardless of type.
	//
	// The input is only specified by its ID.
	Node NodeNode `json:"-"`
}

// GetNode returns NodeResponse.Node, and is useful for accessing the field via an interface.
func (v *NodeResponse) GetNode() NodeNode { return v.Node }

func (v *NodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeResponse
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalNodeNode(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal NodeResponse.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalNodeResponse struct {
	Node json.RawMessage `json:"node"`
}

func (v *NodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeResponse) __premarshalJSON() (*__premarshalNodeResponse, error) {
	var retval __premarshalNodeResponse

	{

		dst := &retval.Node
		src := v.Node
		var err error
		*dst, err = __marshalNodeNode(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodeResponse.Node: %w", err)
		}
	}
	return &retval, nil
}

// NodesNodesArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type NodesNodesArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns NodesNodesArtifact.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesArtifact.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns NodesNodesArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns NodesNodesArtifact.Digest, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *NodesNodesArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *NodesNodesArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesArtifact) __premarshalJSON() (*__premarshalNodesNodesArtifact, error) {
	var retval __premarshalNodesNodesArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// NodesNodesBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type NodesNodesBuilder struct {
	Typename       *string `json:"__typename"`
	AllBuilderTree `json:"-"`
}

// GetTypename returns NodesNodesBuilder.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesBuilder) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesBuilder.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesBuilder) GetId() string { return v.AllBuilderTree.Id }

// GetUri returns NodesNodesBuilder.Uri, and is useful for accessing the field via an interface.
func (v *NodesNodesBuilder) GetUri() string { return v.AllBuilderTree.Uri }

func (v *NodesNodesBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *NodesNodesBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesBuilder) __premarshalJSON() (*__premarshalNodesNodesBuilder, error) {
	var retval __premarshalNodesNodesBuilder

	retval.Typename = v.Typename
	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// NodesNodesCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodesNodesCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns NodesNodesCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns NodesNodesCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetKnownSince returns NodesNodesCertifyBad.KnownSince, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetKnownSince() time.Time { return v.AllCertifyBad.KnownSince }

// GetSubject returns NodesNodesCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns NodesNodesCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns NodesNodesCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *NodesNodesCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyBad) __premarshalJSON() (*__premarshalNodesNodesCertifyBad, error) {
	var retval __premarshalNodesNodesCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	retval.KnownSince = v.AllCertifyBad.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// NodesNodesCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodesNodesCertifyGood struct {
	Typename       *string `json:"__typename"`
	AllCertifyGood `json:"-"`
}

// GetTypename returns NodesNodesCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns NodesNodesCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetJustification() string { return v.AllCertifyGood.Justification }

// GetKnownSince returns NodesNodesCertifyGood.KnownSince, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetKnownSince() time.Time { return v.AllCertifyGood.KnownSince }

// GetSubject returns NodesNodesCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns NodesNodesCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns NodesNodesCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *NodesNodesCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyGood) __premarshalJSON() (*__premarshalNodesNodesCertifyGood, error) {
	var retval __premarshalNodesNodesCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	retval.KnownSince = v.AllCertifyGood.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// NodesNodesCertifyLegal includes the requested fields of the GraphQL type CertifyLegal.
// The GraphQL type's documentation follows.
//
// CertifyLegal is an attestation to attach legal information to a package or source.
//
// The certification information is either copied from an attestation found in an
// SBOM or created by a collector/scanner.
//
// Discovered license is also known as Concluded. More information:
// https://docs.clearlydefined.io/curation-guidelines#the-difference-between-declared-and-discovered-licenses
//
// Attribution is also known as Copyright Text. It is what could be displayed to
// comply with notice
// requirements. https://www.nexb.com/oss-attribution-best-practices/
//
// License expressions follow this format:
// https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/
type NodesNodesCertifyLegal struct {
	Typename            *string `json:"__typename"`
	AllCertifyLegalTree `json:"-"`
}

// GetTypename returns NodesNodesCertifyLegal.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyLegal.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetId() string { return v.AllCertifyLegalTree.Id }

// GetSubject returns NodesNodesCertifyLegal.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetSubject() AllCertifyLegalTreeSubjectPackageOrSource {
	return v.AllCertifyLegalTree.Subject
}

// GetDeclaredLicense returns NodesNodesCertifyLegal.DeclaredLicense, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetDeclaredLicense() string {
	return v.AllCertifyLegalTree.DeclaredLicense
}

// GetDeclaredLicenses returns NodesNodesCertifyLegal.DeclaredLicenses, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetDeclaredLicenses() []AllCertifyLegalTreeDeclaredLicensesLicense {
	return v.AllCertifyLegalTree.DeclaredLicenses
}

// GetDiscoveredLicense returns NodesNodesCertifyLegal.DiscoveredLicense, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetDiscoveredLicense() string {
	return v.AllCertifyLegalTree.DiscoveredLicense
}

// GetDiscoveredLicenses returns NodesNodesCertifyLegal.DiscoveredLicenses, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetDiscoveredLicenses() []AllCertifyLegalTreeDiscoveredLicensesLicense {
	return v.AllCertifyLegalTree.DiscoveredLicenses
}

// GetAttribution returns NodesNodesCertifyLegal.Attribution, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetAttribution() string { return v.AllCertifyLegalTree.Attribution }

// GetJustification returns NodesNodesCertifyLegal.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetJustification() string {
	return v.AllCertifyLegalTree.Justification
}

// GetTimeScanned returns NodesNodesCertifyLegal.TimeScanned, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetTimeScanned() time.Time { return v.AllCertifyLegalTree.TimeScanned }

// GetOrigin returns NodesNodesCertifyLegal.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetOrigin() string { return v.AllCertifyLegalTree.Origin }

// GetCollector returns NodesNodesCertifyLegal.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyLegal) GetCollector() string { return v.AllCertifyLegalTree.Collector }

func (v *NodesNodesCertifyLegal) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyLegal
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyLegal = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyLegalTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyLegal struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	DeclaredLicense string `json:"declaredLicense"`

	DeclaredLicenses []AllCertifyLegalTreeDeclaredLicensesLicense `json:"declaredLicenses"`

	DiscoveredLicense string `json:"discoveredLicense"`

	DiscoveredLicenses []AllCertifyLegalTreeDiscoveredLicensesLicense `json:"discoveredLicenses"`

	Attribution string `json:"attribution"`

	Justification string `json:"justification"`

	TimeScanned time.Time `json:"timeScanned"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesCertifyLegal) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyLegal) __premarshalJSON() (*__premarshalNodesNodesCertifyLegal, error) {
	var retval __premarshalNodesNodesCertifyLegal

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyLegalTree.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyLegalTree.Subject
		var err error
		*dst, err = __marshalAllCertifyLegalTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesCertifyLegal.AllCertifyLegalTree.Subject: %w", err)
		}
	}
	retval.DeclaredLicense = v.AllCertifyLegalTree.DeclaredLicense
	retval.DeclaredLicenses = v.AllCertifyLegalTree.DeclaredLicenses
	retval.DiscoveredLicense = v.AllCertifyLegalTree.DiscoveredLicense
	retval.DiscoveredLicenses = v.AllCertifyLegalTree.DiscoveredLicenses
	retval.Attribution = v.AllCertifyLegalTree.Attribution
	retval.Justification = v.AllCertifyLegalTree.Justification
	retval.TimeScanned = v.AllCertifyLegalTree.TimeScanned
	retval.Origin = v.AllCertifyLegalTree.Origin
	retval.Collector = v.AllCertifyLegalTree.Collector
	return &retval, nil
}

// NodesNodesCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type NodesNodesCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns NodesNodesCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns NodesNodesCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns NodesNodesCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *NodesNodesCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *NodesNodesCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyScorecard) __premarshalJSON() (*__premarshalNodesNodesCertifyScorecard, error) {
	var retval __premarshalNodesNodesCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// NodesNodesCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability.
type NodesNodesCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	AllCertifyVEXStatement `json:"-"`
}

// GetTypename returns NodesNodesCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetId() string { return v.AllCertifyVEXStatement.Id }

// GetSubject returns NodesNodesCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns NodesNodesCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns NodesNodesCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetStatus() VexStatus { return v.AllCertifyVEXStatement.Status }

// GetVexJustification returns NodesNodesCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns NodesNodesCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns NodesNodesCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns NodesNodesCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns NodesNodesCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetOrigin() string { return v.AllCertifyVEXStatement.Origin }

// GetCollector returns NodesNodesCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *NodesNodesCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability AllCertifyVEXStatementVulnerability `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyVEXStatement) __premarshalJSON() (*__premarshalNodesNodesCertifyVEXStatement, error) {
	var retval __premarshalNodesNodesCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	retval.Vulnerability = v.AllCertifyVEXStatement.Vulnerability
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// NodesNodesCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected, we attach the a vulnerability with "NoVuln" type and an empty string
// for the vulnerability ID.
type NodesNodesCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns NodesNodesCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns NodesNodesCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.AllCertifyVuln.Package }

// GetVulnerability returns NodesNodesCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns NodesNodesCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetMetadata() AllCertifyVulnMetadataScanMetadata {
	return v.AllCertifyVuln.Metadata
}

func (v *NodesNodesCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability AllCertifyVulnVulnerability `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataScanMetadata `json:"metadata"`
}

func (v *NodesNodesCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyVuln) __premarshalJSON() (*__premarshalNodesNodesCertifyVuln, error) {
	var retval __premarshalNodesNodesCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	retval.Vulnerability = v.AllCertifyVuln.Vulnerability
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// NodesNodesHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodesNodesHasMetadata struct {
	Typename       *string `json:"__typename"`
	AllHasMetadata `json:"-"`
}

// GetTypename returns NodesNodesHasMetadata.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasMetadata) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHasMetadata) GetId() string { return v.AllHasMetadata.Id }

// GetSubject returns NodesNodesHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact {
	return v.AllHasMetadata.Subject
}

// GetKey returns NodesNodesHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *NodesNodesHasMetadata) GetKey() string { return v.AllHasMetadata.Key }

// GetValue returns NodesNodesHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *NodesNodesHasMetadata) GetValue() string { return v.AllHasMetadata.Value }

// GetTimestamp returns NodesNodesHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *NodesNodesHasMetadata) GetTimestamp() time.Time { return v.AllHasMetadata.Timestamp }

// GetJustification returns NodesNodesHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesHasMetadata) GetJustification() string { return v.AllHasMetadata.Justification }

// GetOrigin returns NodesNodesHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesHasMetadata) GetOrigin() string { return v.AllHasMetadata.Origin }

// GetCollector returns NodesNodesHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesHasMetadata) GetCollector() string { return v.AllHasMetadata.Collector }

func (v *NodesNodesHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHasMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHasMetadata struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHasMetadata) __premarshalJSON() (*__premarshalNodesNodesHasMetadata, error) {
	var retval __premarshalNodesNodesHasMetadata

	retval.Typename = v.Typename
	retval.Id = v.AllHasMetadata.Id
	{

		dst := &retval.Subject
		src := v.AllHasMetadata.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesHasMetadata.AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.AllHasMetadata.Key
	retval.Value = v.AllHasMetadata.Value
	retval.Timestamp = v.AllHasMetadata.Timestamp
	retval.Justification = v.AllHasMetadata.Justification
	retval.Origin = v.AllHasMetadata.Origin
	retval.Collector = v.AllHasMetadata.Collector
	return &retval, nil
}

// NodesNodesHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type NodesNodesHasSBOM struct {
	Typename       *string `json:"__typename"`
	AllHasSBOMTree `json:"-"`
}

// GetTypename returns NodesNodesHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns NodesNodesHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns NodesNodesHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns NodesNodesHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns NodesNodesHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns NodesNodesHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetDownloadLocation() string { return v.AllHasSBOMTree.DownloadLocation }

// GetOrigin returns NodesNodesHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns NodesNodesHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

// GetKnownSince returns NodesNodesHasSBOM.KnownSince, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetKnownSince() time.Time { return v.AllHasSBOMTree.KnownSince }

// GetIncludedSoftware returns NodesNodesHasSBOM.IncludedSoftware, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetIncludedSoftware() []AllHasSBOMTreeIncludedSoftwarePackageOrArtifact {
	return v.AllHasSBOMTree.IncludedSoftware
}

// GetIncludedDependencies returns NodesNodesHasSBOM.IncludedDependencies, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetIncludedDependencies() []AllHasSBOMTreeIncludedDependenciesIsDependency {
	return v.AllHasSBOMTree.IncludedDependencies
}

// GetIncludedOccurrences returns NodesNodesHasSBOM.IncludedOccurrences, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetIncludedOccurrences() []AllHasSBOMTreeIncludedOccurrencesIsOccurrence {
	return v.AllHasSBOMTree.IncludedOccurrences
}

func (v *NodesNodesHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`

	KnownSince time.Time `json:"knownSince"`

	IncludedSoftware []json.RawMessage `json:"includedSoftware"`

	IncludedDependencies []AllHasSBOMTreeIncludedDependenciesIsDependency `json:"includedDependencies"`

	IncludedOccurrences []AllHasSBOMTreeIncludedOccurrencesIsOccurrence `json:"includedOccurrences"`
}

func (v *NodesNodesHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHasSBOM) __premarshalJSON() (*__premarshalNodesNodesHasSBOM, error) {
	var retval __premarshalNodesNodesHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	retval.KnownSince = v.AllHasSBOMTree.KnownSince
	{

		dst := &retval.IncludedSoftware
		src := v.AllHasSBOMTree.IncludedSoftware
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalAllHasSBOMTreeIncludedSoftwarePackageOrArtifact(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal NodesNodesHasSBOM.AllHasSBOMTree.IncludedSoftware: %w", err)
			}
		}
	}
	retval.IncludedDependencies = v.AllHasSBOMTree.IncludedDependencies
	retval.IncludedOccurrences = v.AllHasSBOMTree.IncludedOccurrences
	return &retval, nil
}

// NodesNodesHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type NodesNodesHasSLSA struct {
	Typename    *string `json:"__typename"`
	AllSLSATree `json:"-"`
}

// GetTypename returns NodesNodesHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetId() string { return v.AllSLSATree.Id }

// GetSubject returns NodesNodesHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetSubject() AllSLSATreeSubjectArtifact { return v.AllSLSATree.Subject }

// GetSlsa returns NodesNodesHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetSlsa() AllSLSATreeSlsaSLSA { return v.AllSLSATree.Slsa }

func (v *NodesNodesHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject AllSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *NodesNodesHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHasSLSA) __premarshalJSON() (*__premarshalNodesNodesHasSLSA, error) {
	var retval __premarshalNodesNodesHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.AllSLSATree.Id
	retval.Subject = v.AllSLSATree.Subject
	retval.Slsa = v.AllSLSATree.Slsa
	return &retval, nil
}

// NodesNodesHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type NodesNodesHasSourceAt struct {
	Typename       *string `json:"__typename"`
	AllHasSourceAt `json:"-"`
}

// GetTypename returns NodesNodesHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetId() string { return v.AllHasSourceAt.Id }

// GetJustification returns NodesNodesHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetJustification() string { return v.AllHasSourceAt.Justification }

// GetKnownSince returns NodesNodesHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetKnownSince() time.Time { return v.AllHasSourceAt.KnownSince }

// GetPackage returns NodesNodesHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetPackage() AllHasSourceAtPackage { return v.AllHasSourceAt.Package }

// GetSource returns NodesNodesHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetSource() AllHasSourceAtSource { return v.AllHasSourceAt.Source }

// GetOrigin returns NodesNodesHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetOrigin() string { return v.AllHasSourceAt.Origin }

// GetCollector returns NodesNodesHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetCollector() string { return v.AllHasSourceAt.Collector }

func (v *NodesNodesHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHasSourceAt) __premarshalJSON() (*__premarshalNodesNodesHasSourceAt, error) {
	var retval __premarshalNodesNodesHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// NodesNodesHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that two artifacts are identical.
type NodesNodesHashEqual struct {
	Typename         *string `json:"__typename"`
	AllHashEqualTree `json:"-"`
}

// GetTypename returns NodesNodesHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHashEqual.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetId() string { return v.AllHashEqualTree.Id }

// GetJustification returns NodesNodesHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetJustification() string { return v.AllHashEqualTree.Justification }

// GetArtifacts returns NodesNodesHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns NodesNodesHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetOrigin() string { return v.AllHashEqualTree.Origin }

// GetCollector returns NodesNodesHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetCollector() string { return v.AllHashEqualTree.Collector }

func (v *NodesNodesHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHashEqual) __premarshalJSON() (*__premarshalNodesNodesHashEqual, error) {
	var retval __premarshalNodesNodesHashEqual

	retval.Typename = v.Typename
	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// NodesNodesIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type NodesNodesIsDependency struct {
	Typename            *string `json:"__typename"`
	AllIsDependencyTree `json:"-"`
}

// GetTypename returns NodesNodesIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesIsDependency.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetId() string { return v.AllIsDependencyTree.Id }

// GetJustification returns NodesNodesIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetJustification() string {
	return v.AllIsDependencyTree.Justification
}

// GetPackage returns NodesNodesIsDependency.Package, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependencyPackage returns NodesNodesIsDependency.DependencyPackage, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetDependencyPackage() AllIsDependencyTreeDependencyPackage {
	return v.AllIsDependencyTree.DependencyPackage
}

// GetDependencyType returns NodesNodesIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns NodesNodesIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetVersionRange() string { return v.AllIsDependencyTree.VersionRange }

// GetOrigin returns NodesNodesIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetOrigin() string { return v.AllIsDependencyTree.Origin }

// GetCollector returns NodesNodesIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetCollector() string { return v.AllIsDependencyTree.Collector }

func (v *NodesNodesIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependencyPackage AllIsDependencyTreeDependencyPackage `json:"dependencyPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesIsDependency) __premarshalJSON() (*__premarshalNodesNodesIsDependency, error) {
	var retval __premarshalNodesNodesIsDependency

	retval.Typename = v.Typename
	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependencyPackage = v.AllIsDependencyTree.DependencyPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// NodesNodesIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type NodesNodesIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns NodesNodesIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns NodesNodesIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns NodesNodesIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns NodesNodesIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns NodesNodesIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns NodesNodesIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetCollector() string { return v.AllIsOccurrencesTree.Collector }

func (v *NodesNodesIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesIsOccurrence) __premarshalJSON() (*__premarshalNodesNodesIsOccurrence, error) {
	var retval __premarshalNodesNodesIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// NodesNodesLicense includes the requested fields of the GraphQL type License.
// The GraphQL type's documentation follows.
//
// License represents a particular license. If the license is found on the SPDX
// license list (https://spdx.org/licenses/) then the fields should be:
//
// Name: SPDX license identifier
// Inline: empty
// ListVersion: SPDX license list version
//
// example:
//
// Name: AGPL-3.0-or-later
// Inline: ""
// ListVersion: 3.21 2023-06-18
//
// If the license is not on the SPDX license list, then a new guid should be
// created and the license text placed inline:
//
// Name: LicenseRef-<guid>
// Inline: Full license text
// ListVersion: empty
//
// example:
//
// Name: LicenseRef-1a2b3c
// Inline: Permission to use, copy, modify, and/or distribute ...
// ListVersion: ""
type NodesNodesLicense struct {
	Typename       *string `json:"__typename"`
	AllLicenseTree `json:"-"`
}

// GetTypename returns NodesNodesLicense.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesLicense) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesLicense.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesLicense) GetId() string { return v.AllLicenseTree.Id }

// GetName returns NodesNodesLicense.Name, and is useful for accessing the field via an interface.
func (v *NodesNodesLicense) GetName() string { return v.AllLicenseTree.Name }

// GetInline returns NodesNodesLicense.Inline, and is useful for accessing the field via an interface.
func (v *NodesNodesLicense) GetInline() *string { return v.AllLicenseTree.Inline }

// GetListVersion returns NodesNodesLicense.ListVersion, and is useful for accessing the field via an interface.
func (v *NodesNodesLicense) GetListVersion() *string { return v.AllLicenseTree.ListVersion }

func (v *NodesNodesLicense) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesLicense
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesLicense = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllLicenseTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesLicense struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Inline *string `json:"inline"`

	ListVersion *string `json:"listVersion"`
}

func (v *NodesNodesLicense) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesLicense) __premarshalJSON() (*__premarshalNodesNodesLicense, error) {
	var retval __premarshalNodesNodesLicense

	retval.Typename = v.Typename
	retval.Id = v.AllLicenseTree.Id
	retval.Name = v.AllLicenseTree.Name
	retval.Inline = v.AllLicenseTree.Inline
	retval.ListVersion = v.AllLicenseTree.ListVersion
	return &retval, nil
}

// NodesNodesNode includes the requested fields of the GraphQL interface Node.
//
// NodesNodesNode is implemented by the following types:
// NodesNodesArtifact
// NodesNodesBuilder
// NodesNodesCertifyBad
// NodesNodesCertifyGood
// NodesNodesCertifyLegal
// NodesNodesCertifyScorecard
// NodesNodesCertifyVEXStatement
// NodesNodesCertifyVuln
// NodesNodesHasMetadata
// NodesNodesHasSBOM
// NodesNodesHasSLSA
// NodesNodesHasSourceAt
// NodesNodesHashEqual
// NodesNodesIsDependency
// NodesNodesIsOccurrence
// NodesNodesLicense
// NodesNodesPackage
// NodesNodesPkgEqual
// NodesNodesPointOfContact
// NodesNodesSource
// NodesNodesVulnEqual
// NodesNodesVulnerability
// NodesNodesVulnerabilityMetadata
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type NodesNodesNode interface {
	implementsGraphQLInterfaceNodesNodesNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *NodesNodesArtifact) implementsGraphQLInterfaceNodesNodesNode()              {}
func (v *NodesNodesBuilder) implementsGraphQLInterfaceNodesNodesNode()               {}
func (v *NodesNodesCertifyBad) implementsGraphQLInterfaceNodesNodesNode()            {}
func (v *NodesNodesCertifyGood) implementsGraphQLInterfaceNodesNodesNode()           {}
func (v *NodesNodesCertifyLegal) implementsGraphQLInterfaceNodesNodesNode()          {}
func (v *NodesNodesCertifyScorecard) implementsGraphQLInterfaceNodesNodesNode()      {}
func (v *NodesNodesCertifyVEXStatement) implementsGraphQLInterfaceNodesNodesNode()   {}
func (v *NodesNodesCertifyVuln) implementsGraphQLInterfaceNodesNodesNode()           {}
func (v *NodesNodesHasMetadata) implementsGraphQLInterfaceNodesNodesNode()           {}
func (v *NodesNodesHasSBOM) implementsGraphQLInterfaceNodesNodesNode()               {}
func (v *NodesNodesHasSLSA) implementsGraphQLInterfaceNodesNodesNode()               {}
func (v *NodesNodesHasSourceAt) implementsGraphQLInterfaceNodesNodesNode()           {}
func (v *NodesNodesHashEqual) implementsGraphQLInterfaceNodesNodesNode()             {}
func (v *NodesNodesIsDependency) implementsGraphQLInterfaceNodesNodesNode()          {}
func (v *NodesNodesIsOccurrence) implementsGraphQLInterfaceNodesNodesNode()          {}
func (v *NodesNodesLicense) implementsGraphQLInterfaceNodesNodesNode()               {}
func (v *NodesNodesPackage) implementsGraphQLInterfaceNodesNodesNode()               {}
func (v *NodesNodesPkgEqual) implementsGraphQLInterfaceNodesNodesNode()              {}
func (v *NodesNodesPointOfContact) implementsGraphQLInterfaceNodesNodesNode()        {}
func (v *NodesNodesSource) implementsGraphQLInterfaceNodesNodesNode()                {}
func (v *NodesNodesVulnEqual) implementsGraphQLInterfaceNodesNodesNode()             {}
func (v *NodesNodesVulnerability) implementsGraphQLInterfaceNodesNodesNode()         {}
func (v *NodesNodesVulnerabilityMetadata) implementsGraphQLInterfaceNodesNodesNode() {}

func __unmarshalNodesNodesNode(b []byte, v *NodesNodesNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(NodesNodesArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(NodesNodesBuilder)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(NodesNodesCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(NodesNodesCertifyGood)
		return json.Unmarshal(b, *v)
	case "CertifyLegal":
		*v = new(NodesNodesCertifyLegal)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(NodesNodesCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(NodesNodesCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(NodesNodesCertifyVuln)
		return json.Unmarshal(b, *v)
	case "HasMetadata":
		*v = new(NodesNodesHasMetadata)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(NodesNodesHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(NodesNodesHasSLSA)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(NodesNodesHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(NodesNodesHashEqual)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(NodesNodesIsDependency)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(NodesNodesIsOccurrence)
		return json.Unmarshal(b, *v)
	case "License":
		*v = new(NodesNodesLicense)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(NodesNodesPackage)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(NodesNodesPkgEqual)
		return json.Unmarshal(b, *v)
	case "PointOfContact":
		*v = new(NodesNodesPointOfContact)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(NodesNodesSource)
		return json.Unmarshal(b, *v)
	case "VulnEqual":
		*v = new(NodesNodesVulnEqual)
		return json.Unmarshal(b, *v)
	case "Vulnerability":
		*v = new(NodesNodesVulnerability)
		return json.Unmarshal(b, *v)
	case "VulnerabilityMetadata":
		*v = new(NodesNodesVulnerabilityMetadata)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NodesNodesNode: "%v"`, tn.TypeName)
	}
}

func __marshalNodesNodesNode(v *NodesNodesNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NodesNodesArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyLegal:
		typename = "CertifyLegal"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyLegal
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHasMetadata:
		typename = "HasMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHasMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesLicense:
		typename = "License"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesLicense
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesPkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesPkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesPointOfContact:
		typename = "PointOfContact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesPointOfContact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesVulnEqual:
		typename = "VulnEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesVulnEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesVulnerability:
		typename = "Vulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesVulnerabilityMetadata:
		typename = "VulnerabilityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesVulnerabilityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NodesNodesNode: "%T"`, v)
	}
}

// NodesNodesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type NodesNodesPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns NodesNodesPackage.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesPackage.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns NodesNodesPackage.Type, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns NodesNodesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *NodesNodesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *NodesNodesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesPackage) __premarshalJSON() (*__premarshalNodesNodesPackage, error) {
	var retval __premarshalNodesNodesPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// NodesNodesPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that two packages are similar.
type NodesNodesPkgEqual struct {
	Typename    *string `json:"__typename"`
	AllPkgEqual `json:"-"`
}

// GetTypename returns NodesNodesPkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetId() string { return v.AllPkgEqual.Id }

// GetJustification returns NodesNodesPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetJustification() string { return v.AllPkgEqual.Justification }

// GetPackages returns NodesNodesPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetPackages() []AllPkgEqualPackagesPackage {
	return v.AllPkgEqual.Packages
}

// GetOrigin returns NodesNodesPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetOrigin() string { return v.AllPkgEqual.Origin }

// GetCollector returns NodesNodesPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetCollector() string { return v.AllPkgEqual.Collector }

func (v *NodesNodesPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesPkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesPkgEqual) __premarshalJSON() (*__premarshalNodesNodesPkgEqual, error) {
	var retval __premarshalNodesNodesPkgEqual

	retval.Typename = v.Typename
	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// NodesNodesPointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type NodesNodesPointOfContact struct {
	Typename          *string `json:"__typename"`
	AllPointOfContact `json:"-"`
}

// GetTypename returns NodesNodesPointOfContact.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesPointOfContact) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesPointOfContact.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesPointOfContact) GetId() string { return v.AllPointOfContact.Id }

// GetSubject returns NodesNodesPointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesPointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.AllPointOfContact.Subject
}

// GetEmail returns NodesNodesPointOfContact.Email, and is useful for accessing the field via an interface.
func (v *NodesNodesPointOfContact) GetEmail() string { return v.AllPointOfContact.Email }

// GetInfo returns NodesNodesPointOfContact.Info, and is useful for accessing the field via an interface.
func (v *NodesNodesPointOfContact) GetInfo() string { return v.AllPointOfContact.Info }

// GetSince returns NodesNodesPointOfContact.Since, and is useful for accessing the field via an interface.
func (v *NodesNodesPointOfContact) GetSince() time.Time { return v.AllPointOfContact.Since }

// GetJustification returns NodesNodesPointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesPointOfContact) GetJustification() string {
	return v.AllPointOfContact.Justification
}

// GetOrigin returns NodesNodesPointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesPointOfContact) GetOrigin() string { return v.AllPointOfContact.Origin }

// GetCollector returns NodesNodesPointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesPointOfContact) GetCollector() string { return v.AllPointOfContact.Collector }

func (v *NodesNodesPointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesPointOfContact
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesPointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPointOfContact)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesPointOfContact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesPointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesPointOfContact) __premarshalJSON() (*__premarshalNodesNodesPointOfContact, error) {
	var retval __premarshalNodesNodesPointOfContact

	retval.Typename = v.Typename
	retval.Id = v.AllPointOfContact.Id
	{

		dst := &retval.Subject
		src := v.AllPointOfContact.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal NodesNodesPointOfContact.AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.AllPointOfContact.Email
	retval.Info = v.AllPointOfContact.Info
	retval.Since = v.AllPointOfContact.Since
	retval.Justification = v.AllPointOfContact.Justification
	retval.Origin = v.AllPointOfContact.Origin
	retval.Collector = v.AllPointOfContact.Collector
	return &retval, nil
}

// NodesNodesSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type NodesNodesSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns NodesNodesSource.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesSource.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns NodesNodesSource.Type, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns NodesNodesSource.Namespaces, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *NodesNodesSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesSource
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *NodesNodesSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesSource) __premarshalJSON() (*__premarshalNodesNodesSource, error) {
	var retval __premarshalNodesNodesSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// NodesNodesVulnEqual includes the requested fields of the GraphQL type VulnEqual.
// The GraphQL type's documentation follows.
//
// VulnEqual is an attestation to link two vulnerabilities together as being equal"
//
// Note that setting noVuln vulnerability type is invalid for VulnEqual!
type NodesNodesVulnEqual struct {
	Typename     *string `json:"__typename"`
	AllVulnEqual `json:"-"`
}

// GetTypename returns NodesNodesVulnEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnEqual) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesVulnEqual.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnEqual) GetId() string { return v.AllVulnEqual.Id }

// GetVulnerabilities returns NodesNodesVulnEqual.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnEqual) GetVulnerabilities() []AllVulnEqualVulnerabilitiesVulnerability {
	return v.AllVulnEqual.Vulnerabilities
}

// GetJustification returns NodesNodesVulnEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnEqual) GetJustification() string { return v.AllVulnEqual.Justification }

// GetOrigin returns NodesNodesVulnEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnEqual) GetOrigin() string { return v.AllVulnEqual.Origin }

// GetCollector returns NodesNodesVulnEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnEqual) GetCollector() string { return v.AllVulnEqual.Collector }

func (v *NodesNodesVulnEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesVulnEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesVulnEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesVulnEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Vulnerabilities []AllVulnEqualVulnerabilitiesVulnerability `json:"vulnerabilities"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesVulnEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesVulnEqual) __premarshalJSON() (*__premarshalNodesNodesVulnEqual, error) {
	var retval __premarshalNodesNodesVulnEqual

	retval.Typename = v.Typename
	retval.Id = v.AllVulnEqual.Id
	retval.Vulnerabilities = v.AllVulnEqual.Vulnerabilities
	retval.Justification = v.AllVulnEqual.Justification
	retval.Origin = v.AllVulnEqual.Origin
	retval.Collector = v.AllVulnEqual.Collector
	return &retval, nil
}

// NodesNodesVulnerability includes the requested fields of the GraphQL type Vulnerability.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type NodesNodesVulnerability struct {
	Typename             *string `json:"__typename"`
	AllVulnerabilityTree `json:"-"`
}

// GetTypename returns NodesNodesVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerability) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesVulnerability.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerability) GetId() string { return v.AllVulnerabilityTree.Id }

// GetType returns NodesNodesVulnerability.Type, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerability) GetType() string { return v.AllVulnerabilityTree.Type }

// GetVulnerabilityIDs returns NodesNodesVulnerability.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerability) GetVulnerabilityIDs() []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID {
	return v.AllVulnerabilityTree.VulnerabilityIDs
}

func (v *NodesNodesVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnerabilityTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	VulnerabilityIDs []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

func (v *NodesNodesVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesVulnerability) __premarshalJSON() (*__premarshalNodesNodesVulnerability, error) {
	var retval __premarshalNodesNodesVulnerability

	retval.Typename = v.Typename
	retval.Id = v.AllVulnerabilityTree.Id
	retval.Type = v.AllVulnerabilityTree.Type
	retval.VulnerabilityIDs = v.AllVulnerabilityTree.VulnerabilityIDs
	return &retval, nil
}

// NodesNodesVulnerabilityMetadata includes the requested fields of the GraphQL type VulnerabilityMetadata.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetadata is an attestation that a vulnerability has a related score
// associated with it.
//
// The intent of this evidence tree predicate is to allow extensibility of vulnerability
// score (one-to-one mapping) with a specific vulnerability ID.
//
// A vulnerability ID can have a one-to-many relationship with the VulnerabilityMetadata
// node as a vulnerability ID can have multiple scores (in various frameworks).
//
// Examples:
//
// scoreType: EPSSv1
// scoreValue: 0.960760000
//
// scoreType: CVSSv2
// scoreValue: 5.0
//
// scoreType: CVSSv3
// scoreValue: 7.5
//
// The timestamp is used to determine when the score was evaluated for the specific vulnerability.
type NodesNodesVulnerabilityMetadata struct {
	Typename            *string `json:"__typename"`
	AllVulnMetadataTree `json:"-"`
}

// GetTypename returns NodesNodesVulnerabilityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerabilityMetadata) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesVulnerabilityMetadata.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerabilityMetadata) GetId() string { return v.AllVulnMetadataTree.Id }

// GetVulnerability returns NodesNodesVulnerabilityMetadata.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerabilityMetadata) GetVulnerability() AllVulnMetadataTreeVulnerability {
	return v.AllVulnMetadataTree.Vulnerability
}

// GetScoreType returns NodesNodesVulnerabilityMetadata.ScoreType, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerabilityMetadata) GetScoreType() VulnerabilityScoreType {
	return v.AllVulnMetadataTree.ScoreType
}

// GetScoreValue returns NodesNodesVulnerabilityMetadata.ScoreValue, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerabilityMetadata) GetScoreValue() float64 {
	return v.AllVulnMetadataTree.ScoreValue
}

// GetTimestamp returns NodesNodesVulnerabilityMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerabilityMetadata) GetTimestamp() time.Time {
	return v.AllVulnMetadataTree.Timestamp
}

// GetOrigin returns NodesNodesVulnerabilityMetadata.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerabilityMetadata) GetOrigin() string { return v.AllVulnMetadataTree.Origin }

// GetCollector returns NodesNodesVulnerabilityMetadata.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesVulnerabilityMetadata) GetCollector() string {
	return v.AllVulnMetadataTree.Collector
}

func (v *NodesNodesVulnerabilityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesVulnerabilityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesVulnerabilityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnMetadataTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesVulnerabilityMetadata struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Vulnerability AllVulnMetadataTreeVulnerability `json:"vulnerability"`

	ScoreType VulnerabilityScoreType `json:"scoreType"`

	ScoreValue float64 `json:"scoreValue"`

	Timestamp time.Time `json:"timestamp"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesVulnerabilityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesVulnerabilityMetadata) __premarshalJSON() (*__premarshalNodesNodesVulnerabilityMetadata, error) {
	var retval __premarshalNodesNodesVulnerabilityMetadata

	retval.Typename = v.Typename
	retval.Id = v.AllVulnMetadataTree.Id
	retval.Vulnerability = v.AllVulnMetadataTree.Vulnerability
	retval.ScoreType = v.AllVulnMetadataTree.ScoreType
	retval.ScoreValue = v.AllVulnMetadataTree.ScoreValue
	retval.Timestamp = v.AllVulnMetadataTree.Timestamp
	retval.Origin = v.AllVulnMetadataTree.Origin
	retval.Collector = v.AllVulnMetadataTree.Collector
	return &retval, nil
}

// NodesResponse is returned by Nodes on success.
type NodesResponse struct {
	// nodes returns an array of nodes, regardless of type.
	//
	// The input is an array of IDs to retrieve.
	Nodes []NodesNodesNode `json:"-"`
}

// GetNodes returns NodesResponse.Nodes, and is useful for accessing the field via an interface.
func (v *NodesResponse) GetNodes() []NodesNodesNode { return v.Nodes }

func (v *NodesResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesResponse
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]NodesNodesNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalNodesNodesNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal NodesResponse.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalNodesResponse struct {
	Nodes []json.RawMessage `json:"nodes"`
}

func (v *NodesResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesResponse) __premarshalJSON() (*__premarshalNodesResponse, error) {
	var retval __premarshalNodesResponse

	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalNodesNodesNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal NodesResponse.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// OccurrenceListIsOccurrenceListIsOccurrenceConnection includes the requested fields of the GraphQL type IsOccurrenceConnection.
// The GraphQL type's documentation follows.
//
// IsOccurrenceConnection returns the paginated results for IsOccurrence.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the IsOccurrenceEdge which contains the current cursor
// and the IsOccurrence node itself
type OccurrenceListIsOccurrenceListIsOccurrenceConnection struct {
	TotalCount int                                                                         `json:"totalCount"`
	Edges      []OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdge `json:"edges"`
	PageInfo   OccurrenceListIsOccurrenceListIsOccurrenceConnectionPageInfo                `json:"pageInfo"`
}

// GetTotalCount returns OccurrenceListIsOccurrenceListIsOccurrenceConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns OccurrenceListIsOccurrenceListIsOccurrenceConnection.Edges, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnection) GetEdges() []OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdge {
	return v.Edges
}

// GetPageInfo returns OccurrenceListIsOccurrenceListIsOccurrenceConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnection) GetPageInfo() OccurrenceListIsOccurrenceListIsOccurrenceConnectionPageInfo {
	return v.PageInfo
}

// OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdge includes the requested fields of the GraphQL type IsOccurrenceEdge.
// The GraphQL type's documentation follows.
//
// IsOccurrenceEdge contains the cursor for the resulting node and
// the IsOccurrence node itself.
type OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdge struct {
	Cursor string                                                                                    `json:"cursor"`
	Node   OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence `json:"node"`
}

// GetCursor returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdge.Cursor, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdge.Node, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdge) GetNode() OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence {
	return v.Node
}

// OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence struct {
	AllIsOccurrencesTree `json:"-"`
}

// GetId returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence) GetId() string {
	return v.AllIsOccurrencesTree.Id
}

// GetSubject returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence) GetOrigin() string {
	return v.AllIsOccurrencesTree.Origin
}

// GetCollector returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalOccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence) __premarshalJSON() (*__premarshalOccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence, error) {
	var retval __premarshalOccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence

	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal OccurrenceListIsOccurrenceListIsOccurrenceConnectionEdgesIsOccurrenceEdgeNodeIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// OccurrenceListIsOccurrenceListIsOccurrenceConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type OccurrenceListIsOccurrenceListIsOccurrenceConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns OccurrenceListIsOccurrenceListIsOccurrenceConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *OccurrenceListIsOccurrenceListIsOccurrenceConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// OccurrenceListResponse is returned by OccurrenceList on success.
type OccurrenceListResponse struct {
	// Returns a paginated results via IsOccurrenceConnection
	IsOccurrenceList *OccurrenceListIsOccurrenceListIsOccurrenceConnection `json:"IsOccurrenceList"`
}

// GetIsOccurrenceList returns OccurrenceListResponse.IsOccurrenceList, and is useful for accessing the field via an interface.
func (v *OccurrenceListResponse) GetIsOccurrenceList() *OccurrenceListIsOccurrenceListIsOccurrenceConnection {
	return v.IsOccurrenceList
}

// OccurrencesIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type OccurrencesIsOccurrence struct {
	AllIsOccurrencesTree `json:"-"`
}

// GetId returns OccurrencesIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *OccurrencesIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns OccurrencesIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *OccurrencesIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns OccurrencesIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *OccurrencesIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns OccurrencesIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *OccurrencesIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns OccurrencesIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *OccurrencesIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns OccurrencesIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *OccurrencesIsOccurrence) GetCollector() string { return v.AllIsOccurrencesTree.Collector }

func (v *OccurrencesIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*OccurrencesIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.OccurrencesIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalOccurrencesIsOccurrence struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *OccurrencesIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *OccurrencesIsOccurrence) __premarshalJSON() (*__premarshalOccurrencesIsOccurrence, error) {
	var retval __premarshalOccurrencesIsOccurrence

	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal OccurrencesIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// OccurrencesResponse is returned by Occurrences on success.
type OccurrencesResponse struct {
	// Returns all artifacts-source/package mappings that match a filter.
	IsOccurrence []OccurrencesIsOccurrence `json:"IsOccurrence"`
}

// GetIsOccurrence returns OccurrencesResponse.IsOccurrence, and is useful for accessing the field via an interface.
func (v *OccurrencesResponse) GetIsOccurrence() []OccurrencesIsOccurrence { return v.IsOccurrence }

// PackageNamesPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PackageNamesPackagesPackage struct {
	Id         string                                                  `json:"id"`
	Type       string                                                  `json:"type"`
	Namespaces []PackageNamesPackagesPackageNamespacesPackageNamespace `json:"namespaces"`
}

// GetId returns PackageNamesPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *PackageNamesPackagesPackage) GetId() string { return v.Id }

// GetType returns PackageNamesPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *PackageNamesPackagesPackage) GetType() string { return v.Type }

// GetNamespaces returns PackageNamesPackagesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PackageNamesPackagesPackage) GetNamespaces() []PackageNamesPackagesPackageNamespacesPackageNamespace {
	return v.Namespaces
}

// PackageNamesPackagesPackageNamespacesPackageNamespace includes the requested fields of the GraphQL type PackageNamespace.
// The GraphQL type's documentation follows.
//
// PackageNamespace is a namespace for packages.
//
// In the pURL representation, each PackageNamespace matches the
// pkg:<type>/<namespace>/ partial pURL.
//
// Namespaces are optional and type specific. Because they are optional, we use
// empty string to denote missing namespaces.
type PackageNamesPackagesPackageNamespacesPackageNamespace struct {
	Id        string                                                                  `json:"id"`
	Namespace string                                                                  `json:"namespace"`
	Names     []PackageNamesPackagesPackageNamespacesPackageNamespaceNamesPackageName `json:"names"`
}

// GetId returns PackageNamesPackagesPackageNamespacesPackageNamespace.Id, and is useful for accessing the field via an interface.
func (v *PackageNamesPackagesPackageNamespacesPackageNamespace) GetId() string { return v.Id }

// GetNamespace returns PackageNamesPackagesPackageNamespacesPackageNamespace.Namespace, and is useful for accessing the field via an interface.
func (v *PackageNamesPackagesPackageNamespacesPackageNamespace) GetNamespace() string {
	return v.Namespace
}

// GetNames returns PackageNamesPackagesPackageNamespacesPackageNamespace.Names, and is useful for accessing the field via an interface.
func (v *PackageNamesPackagesPackageNamespacesPackageNamespace) GetNames() []PackageNamesPackagesPackageNamespacesPackageNamespaceNamesPackageName {
	return v.Names
}

// PackageNamesPackagesPackageNamespacesPackageNamespaceNamesPackageName includes the requested fields of the GraphQL type PackageName.
// The GraphQL type's documentation follows.
//
// PackageName is a name for packages.
//
// In the pURL representation, each PackageName matches the
// pkg:<type>/<namespace>/<name> pURL.
//
// Names are always mandatory.
//
// This is the first node in the trie that can be referred to by other parts of
// GUAC.
type PackageNamesPackagesPackageNamespacesPackageNamespaceNamesPackageName struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns PackageNamesPackagesPackageNamespacesPackageNamespaceNamesPackageName.Id, and is useful for accessing the field via an interface.
func (v *PackageNamesPackagesPackageNamespacesPackageNamespaceNamesPackageName) GetId() string {
	return v.Id
}

// GetName returns PackageNamesPackagesPackageNamespacesPackageNamespaceNamesPackageName.Name, and is useful for accessing the field via an interface.
func (v *PackageNamesPackagesPackageNamespacesPackageNamespaceNamesPackageName) GetName() string {
	return v.Name
}

// PackageNamesResponse is returned by PackageNames on success.
type PackageNamesResponse struct {
	// Returns all packages matching a filter.
	Packages []PackageNamesPackagesPackage `json:"packages"`
}

// GetPackages returns PackageNamesResponse.Packages, and is useful for accessing the field via an interface.
func (v *PackageNamesResponse) GetPackages() []PackageNamesPackagesPackage { return v.Packages }

// PackageNamespacesPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PackageNamespacesPackagesPackage struct {
	Id         string                                                       `json:"id"`
	Type       string                                                       `json:"type"`
	Namespaces []PackageNamespacesPackagesPackageNamespacesPackageNamespace `json:"namespaces"`
}

// GetId returns PackageNamespacesPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *PackageNamespacesPackagesPackage) GetId() string { return v.Id }

// GetType returns PackageNamespacesPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *PackageNamespacesPackagesPackage) GetType() string { return v.Type }

// GetNamespaces returns PackageNamespacesPackagesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PackageNamespacesPackagesPackage) GetNamespaces() []PackageNamespacesPackagesPackageNamespacesPackageNamespace {
	return v.Namespaces
}

// PackageNamespacesPackagesPackageNamespacesPackageNamespace includes the requested fields of the GraphQL type PackageNamespace.
// The GraphQL type's documentation follows.
//
// PackageNamespace is a namespace for packages.
//
// In the pURL representation, each PackageNamespace matches the
// pkg:<type>/<namespace>/ partial pURL.
//
// Namespaces are optional and type specific. Because they are optional, we use
// empty string to denote missing namespaces.
type PackageNamespacesPackagesPackageNamespacesPackageNamespace struct {
	Id        string `json:"id"`
	Namespace string `json:"namespace"`
}

// GetId returns PackageNamespacesPackagesPackageNamespacesPackageNamespace.Id, and is useful for accessing the field via an interface.
func (v *PackageNamespacesPackagesPackageNamespacesPackageNamespace) GetId() string { return v.Id }

// GetNamespace returns PackageNamespacesPackagesPackageNamespacesPackageNamespace.Namespace, and is useful for accessing the field via an interface.
func (v *PackageNamespacesPackagesPackageNamespacesPackageNamespace) GetNamespace() string {
	return v.Namespace
}

// PackageNamespacesResponse is returned by PackageNamespaces on success.
type PackageNamespacesResponse struct {
	// Returns all packages matching a filter.
	Packages []PackageNamespacesPackagesPackage `json:"packages"`
}

// GetPackages returns PackageNamespacesResponse.Packages, and is useful for accessing the field via an interface.
func (v *PackageNamespacesResponse) GetPackages() []PackageNamespacesPackagesPackage {
	return v.Packages
}

// PackageOrArtifactSpec allows using PackageOrArtifact union as
// input type to be used in read queries.
//
// Exactly one of the value must be set to non-nil.
type PackageOrArtifactSpec struct {
	Package  *PkgSpec      `json:"package"`
	Artifact *ArtifactSpec `json:"artifact"`
}

// GetPackage returns PackageOrArtifactSpec.Package, and is useful for accessing the field via an interface.
func (v *PackageOrArtifactSpec) GetPackage() *PkgSpec { return v.Package }

// GetArtifact returns PackageOrArtifactSpec.Artifact, and is useful for accessing the field via an interface.
func (v *PackageOrArtifactSpec) GetArtifact() *ArtifactSpec { return v.Artifact }

// PackageOrSourceSpec allows using PackageOrSource union as input for queries.
//
// Exactly one field must be specified.
type PackageOrSourceSpec struct {
	Package *PkgSpec    `json:"package"`
	Source  *SourceSpec `json:"source"`
}

// GetPackage returns PackageOrSourceSpec.Package, and is useful for accessing the field via an interface.
func (v *PackageOrSourceSpec) GetPackage() *PkgSpec { return v.Package }

// GetSource returns PackageOrSourceSpec.Source, and is useful for accessing the field via an interface.
func (v *PackageOrSourceSpec) GetSource() *SourceSpec { return v.Source }

// PackageQualifierInputSpec allows specifying package qualifiers in mutations.
type PackageQualifierInputSpec struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns PackageQualifierInputSpec.Key, and is useful for accessing the field via an interface.
func (v *PackageQualifierInputSpec) GetKey() string { return v.Key }

// GetValue returns PackageQualifierInputSpec.Value, and is useful for accessing the field via an interface.
func (v *PackageQualifierInputSpec) GetValue() string { return v.Value }

// PackageQualifierSpec allows filtering package qualifiers in a query.
//
// Keys are mandatory, but values could also be null if we want to match all
// values for a specific key.
//
// NOTE: Before the schema becomes stable, we might change the nulability
// requirements of these fields.
type PackageQualifierSpec struct {
	Key   string  `json:"key"`
	Value *string `json:"value"`
}

// GetKey returns PackageQualifierSpec.Key, and is useful for accessing the field via an interface.
func (v *PackageQualifierSpec) GetKey() string { return v.Key }

// GetValue returns PackageQualifierSpec.Value, and is useful for accessing the field via an interface.
func (v *PackageQualifierSpec) GetValue() *string { return v.Value }

// PackageSourceOrArtifactSpec allows using PackageSourceOrArtifact union as
// input type to be used in read queries.
//
// Exactly one of the value must be set to non-nil.
type PackageSourceOrArtifactSpec struct {
	Package  *PkgSpec      `json:"package"`
	Source   *SourceSpec   `json:"source"`
	Artifact *ArtifactSpec `json:"artifact"`
}

// GetPackage returns PackageSourceOrArtifactSpec.Package, and is useful for accessing the field via an interface.
func (v *PackageSourceOrArtifactSpec) GetPackage() *PkgSpec { return v.Package }

// GetSource returns PackageSourceOrArtifactSpec.Source, and is useful for accessing the field via an interface.
func (v *PackageSourceOrArtifactSpec) GetSource() *SourceSpec { return v.Source }

// GetArtifact returns PackageSourceOrArtifactSpec.Artifact, and is useful for accessing the field via an interface.
func (v *PackageSourceOrArtifactSpec) GetArtifact() *ArtifactSpec { return v.Artifact }

// PackageTypesPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PackageTypesPackagesPackage struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// GetId returns PackageTypesPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *PackageTypesPackagesPackage) GetId() string { return v.Id }

// GetType returns PackageTypesPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *PackageTypesPackagesPackage) GetType() string { return v.Type }

// PackageTypesResponse is returned by PackageTypes on success.
type PackageTypesResponse struct {
	// Returns all packages matching a filter.
	Packages []PackageTypesPackagesPackage `json:"packages"`
}

// GetPackages returns PackageTypesResponse.Packages, and is useful for accessing the field via an interface.
func (v *PackageTypesResponse) GetPackages() []PackageTypesPackagesPackage { return v.Packages }

// PackageVersionsPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PackageVersionsPackagesPackage struct {
	Id         string                                                     `json:"id"`
	Type       string                                                     `json:"type"`
	Namespaces []PackageVersionsPackagesPackageNamespacesPackageNamespace `json:"namespaces"`
}

// GetId returns PackageVersionsPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackage) GetId() string { return v.Id }

// GetType returns PackageVersionsPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackage) GetType() string { return v.Type }

// GetNamespaces returns PackageVersionsPackagesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackage) GetNamespaces() []PackageVersionsPackagesPackageNamespacesPackageNamespace {
	return v.Namespaces
}

// PackageVersionsPackagesPackageNamespacesPackageNamespace includes the requested fields of the GraphQL type PackageNamespace.
// The GraphQL type's documentation follows.
//
// PackageNamespace is a namespace for packages.
//
// In the pURL representation, each PackageNamespace matches the
// pkg:<type>/<namespace>/ partial pURL.
//
// Namespaces are optional and type specific. Because they are optional, we use
// empty string to denote missing namespaces.
type PackageVersionsPackagesPackageNamespacesPackageNamespace struct {
	Id        string                                                                     `json:"id"`
	Namespace string                                                                     `json:"namespace"`
	Names     []PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageName `json:"names"`
}

// GetId returns PackageVersionsPackagesPackageNamespacesPackageNamespace.Id, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespace) GetId() string { return v.Id }

// GetNamespace returns PackageVersionsPackagesPackageNamespacesPackageNamespace.Namespace, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespace) GetNamespace() string {
	return v.Namespace
}

// GetNames returns PackageVersionsPackagesPackageNamespacesPackageNamespace.Names, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespace) GetNames() []PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageName {
	return v.Names
}

// PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageName includes the requested fields of the GraphQL type PackageName.
// The GraphQL type's documentation follows.
//
// PackageName is a name for packages.
//
// In the pURL representation, each PackageName matches the
// pkg:<type>/<namespace>/<name> pURL.
//
// Names are always mandatory.
//
// This is the first node in the trie that can be referred to by other parts of
// GUAC.
type PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageName struct {
	Id       string                                                                                           `json:"id"`
	Name     string                                                                                           `json:"name"`
	Versions []PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion `json:"versions"`
}

// GetId returns PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageName.Id, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageName) GetId() string {
	return v.Id
}

// GetName returns PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageName.Name, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageName) GetName() string {
	return v.Name
}

// GetVersions returns PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageName.Versions, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageName) GetVersions() []PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion {
	return v.Versions
}

// PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion includes the requested fields of the GraphQL type PackageVersion.
// The GraphQL type's documentation follows.
//
// PackageVersion is a package version.
//
// In the pURL representation, each PackageName matches the
// pkg:<type>/<namespace>/<name>@<version> pURL.
//
// Versions are optional and each Package type defines own rules for handling
// them. For this level of GUAC, these are just opaque strings.
//
// NOTE: The handling of versions might change before this schema becomes stable.
//
// This node can be referred to by other parts of GUAC.
//
// Subpath and qualifiers are optional. Lack of qualifiers is represented by an
// empty list and lack of subpath by empty string (to be consistent with
// optionality of namespace and version). Two nodes that have different qualifiers
// and/or subpath but the same version mean two different packages in the trie
// (they are different). Two nodes that have same version but qualifiers of one
// are a subset of the qualifier of the other also mean two different packages in
// the trie.
type PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion struct {
	Id         string                                                                                                                     `json:"id"`
	Version    string                                                                                                                     `json:"version"`
	Qualifiers []PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier `json:"qualifiers"`
	Subpath    string                                                                                                                     `json:"subpath"`
}

// GetId returns PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Id, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetId() string {
	return v.Id
}

// GetVersion returns PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Version, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetVersion() string {
	return v.Version
}

// GetQualifiers returns PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Qualifiers, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetQualifiers() []PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier {
	return v.Qualifiers
}

// GetSubpath returns PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Subpath, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetSubpath() string {
	return v.Subpath
}

// PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier includes the requested fields of the GraphQL type PackageQualifier.
// The GraphQL type's documentation follows.
//
// PackageQualifier is a qualifier for a package, a key-value pair.
//
// In the pURL representation, it is a part of the <qualifiers> part of the
// pkg:<type>/<namespace>/<name>@<version>?<qualifiers> pURL.
//
// Qualifiers are optional, each Package type defines own rules for handling them,
// and multiple qualifiers could be attached to the same package.
//
// This node cannot be directly referred by other parts of GUAC.
type PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier.Key, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier) GetKey() string {
	return v.Key
}

// GetValue returns PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier.Value, and is useful for accessing the field via an interface.
func (v *PackageVersionsPackagesPackageNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier) GetValue() string {
	return v.Value
}

// PackageVersionsResponse is returned by PackageVersions on success.
type PackageVersionsResponse struct {
	// Returns all packages matching a filter.
	Packages []PackageVersionsPackagesPackage `json:"packages"`
}

// GetPackages returns PackageVersionsResponse.Packages, and is useful for accessing the field via an interface.
func (v *PackageVersionsResponse) GetPackages() []PackageVersionsPackagesPackage { return v.Packages }

// PackagesListPackagesListPackageConnection includes the requested fields of the GraphQL type PackageConnection.
// The GraphQL type's documentation follows.
//
// PackageConnection returns the paginated results for Package.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the PackageEdge which contains the current cursor
// and the Package node itself
type PackagesListPackagesListPackageConnection struct {
	TotalCount int                                                         `json:"totalCount"`
	Edges      []PackagesListPackagesListPackageConnectionEdgesPackageEdge `json:"edges"`
	PageInfo   PackagesListPackagesListPackageConnectionPageInfo           `json:"pageInfo"`
}

// GetTotalCount returns PackagesListPackagesListPackageConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns PackagesListPackagesListPackageConnection.Edges, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnection) GetEdges() []PackagesListPackagesListPackageConnectionEdgesPackageEdge {
	return v.Edges
}

// GetPageInfo returns PackagesListPackagesListPackageConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnection) GetPageInfo() PackagesListPackagesListPackageConnectionPageInfo {
	return v.PageInfo
}

// PackagesListPackagesListPackageConnectionEdgesPackageEdge includes the requested fields of the GraphQL type PackageEdge.
// The GraphQL type's documentation follows.
//
// PackageEdge contains the cursor for the resulting node and
// the Package node itself.
type PackagesListPackagesListPackageConnectionEdgesPackageEdge struct {
	Cursor string                                                               `json:"cursor"`
	Node   PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage `json:"node"`
}

// GetCursor returns PackagesListPackagesListPackageConnectionEdgesPackageEdge.Cursor, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnectionEdgesPackageEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns PackagesListPackagesListPackageConnectionEdgesPackageEdge.Node, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnectionEdgesPackageEdge) GetNode() PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage {
	return v.Node
}

// PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage.Id, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage) GetId() string {
	return v.AllPkgTree.Id
}

// GetType returns PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage.Type, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage) GetType() string {
	return v.AllPkgTree.Type
}

// GetNamespaces returns PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage) __premarshalJSON() (*__premarshalPackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage, error) {
	var retval __premarshalPackagesListPackagesListPackageConnectionEdgesPackageEdgeNodePackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PackagesListPackagesListPackageConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type PackagesListPackagesListPackageConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns PackagesListPackagesListPackageConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns PackagesListPackagesListPackageConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns PackagesListPackagesListPackageConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PackagesListPackagesListPackageConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// PackagesListResponse is returned by PackagesList on success.
type PackagesListResponse struct {
	// Returns a paginated results via PackageConnection
	PackagesList *PackagesListPackagesListPackageConnection `json:"packagesList"`
}

// GetPackagesList returns PackagesListResponse.PackagesList, and is useful for accessing the field via an interface.
func (v *PackagesListResponse) GetPackagesList() *PackagesListPackagesListPackageConnection {
	return v.PackagesList
}

// PackagesPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PackagesPackagesPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns PackagesPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *PackagesPackagesPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns PackagesPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *PackagesPackagesPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns PackagesPackagesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PackagesPackagesPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PackagesPackagesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PackagesPackagesPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PackagesPackagesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPackagesPackagesPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PackagesPackagesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PackagesPackagesPackage) __premarshalJSON() (*__premarshalPackagesPackagesPackage, error) {
	var retval __premarshalPackagesPackagesPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PackagesResponse is returned by Packages on success.
type PackagesResponse struct {
	// Returns all packages matching a filter.
	Packages []PackagesPackagesPackage `json:"packages"`
}

// GetPackages returns PackagesResponse.Packages, and is useful for accessing the field via an interface.
func (v *PackagesResponse) GetPackages() []PackagesPackagesPackage { return v.Packages }

// PathPathArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type PathPathArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns PathPathArtifact.Typename, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetTypename() *string { return v.Typename }

// GetId returns PathPathArtifact.Id, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns PathPathArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns PathPathArtifact.Digest, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *PathPathArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *PathPathArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathArtifact) __premarshalJSON() (*__premarshalPathPathArtifact, error) {
	var retval __premarshalPathPathArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// PathPathBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type PathPathBuilder struct {
	Typename       *string `json:"__typename"`
	AllBuilderTree `json:"-"`
}

// GetTypename returns PathPathBuilder.Typename, and is useful for accessing the field via an interface.
func (v *PathPathBuilder) GetTypename() *string { return v.Typename }

// GetId returns PathPathBuilder.Id, and is useful for accessing the field via an interface.
func (v *PathPathBuilder) GetId() string { return v.AllBuilderTree.Id }

// GetUri returns PathPathBuilder.Uri, and is useful for accessing the field via an interface.
func (v *PathPathBuilder) GetUri() string { return v.AllBuilderTree.Uri }

func (v *PathPathBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *PathPathBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathBuilder) __premarshalJSON() (*__premarshalPathPathBuilder, error) {
	var retval __premarshalPathPathBuilder

	retval.Typename = v.Typename
	retval.Id = v.AllBuilderTree.Id
	retval.Uri = v.AllBuilderTree.Uri
	return &retval, nil
}

// PathPathCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type PathPathCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns PathPathCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns PathPathCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetKnownSince returns PathPathCertifyBad.KnownSince, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetKnownSince() time.Time { return v.AllCertifyBad.KnownSince }

// GetSubject returns PathPathCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns PathPathCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns PathPathCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *PathPathCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyBad) __premarshalJSON() (*__premarshalPathPathCertifyBad, error) {
	var retval __premarshalPathPathCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	retval.KnownSince = v.AllCertifyBad.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// PathPathCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type PathPathCertifyGood struct {
	Typename       *string `json:"__typename"`
	AllCertifyGood `json:"-"`
}

// GetTypename returns PathPathCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetId() string { return v.AllCertifyGood.Id }

// GetJustification returns PathPathCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetJustification() string { return v.AllCertifyGood.Justification }

// GetKnownSince returns PathPathCertifyGood.KnownSince, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetKnownSince() time.Time { return v.AllCertifyGood.KnownSince }

// GetSubject returns PathPathCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetSubject() AllCertifyGoodSubjectPackageSourceOrArtifact {
	return v.AllCertifyGood.Subject
}

// GetOrigin returns PathPathCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetOrigin() string { return v.AllCertifyGood.Origin }

// GetCollector returns PathPathCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetCollector() string { return v.AllCertifyGood.Collector }

func (v *PathPathCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyGood) __premarshalJSON() (*__premarshalPathPathCertifyGood, error) {
	var retval __premarshalPathPathCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyGood.Id
	retval.Justification = v.AllCertifyGood.Justification
	retval.KnownSince = v.AllCertifyGood.KnownSince
	{

		dst := &retval.Subject
		src := v.AllCertifyGood.Subject
		var err error
		*dst, err = __marshalAllCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathCertifyGood.AllCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyGood.Origin
	retval.Collector = v.AllCertifyGood.Collector
	return &retval, nil
}

// PathPathCertifyLegal includes the requested fields of the GraphQL type CertifyLegal.
// The GraphQL type's documentation follows.
//
// CertifyLegal is an attestation to attach legal information to a package or source.
//
// The certification information is either copied from an attestation found in an
// SBOM or created by a collector/scanner.
//
// Discovered license is also known as Concluded. More information:
// https://docs.clearlydefined.io/curation-guidelines#the-difference-between-declared-and-discovered-licenses
//
// Attribution is also known as Copyright Text. It is what could be displayed to
// comply with notice
// requirements. https://www.nexb.com/oss-attribution-best-practices/
//
// License expressions follow this format:
// https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/
type PathPathCertifyLegal struct {
	Typename            *string `json:"__typename"`
	AllCertifyLegalTree `json:"-"`
}

// GetTypename returns PathPathCertifyLegal.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyLegal.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetId() string { return v.AllCertifyLegalTree.Id }

// GetSubject returns PathPathCertifyLegal.Subject, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetSubject() AllCertifyLegalTreeSubjectPackageOrSource {
	return v.AllCertifyLegalTree.Subject
}

// GetDeclaredLicense returns PathPathCertifyLegal.DeclaredLicense, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetDeclaredLicense() string {
	return v.AllCertifyLegalTree.DeclaredLicense
}

// GetDeclaredLicenses returns PathPathCertifyLegal.DeclaredLicenses, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetDeclaredLicenses() []AllCertifyLegalTreeDeclaredLicensesLicense {
	return v.AllCertifyLegalTree.DeclaredLicenses
}

// GetDiscoveredLicense returns PathPathCertifyLegal.DiscoveredLicense, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetDiscoveredLicense() string {
	return v.AllCertifyLegalTree.DiscoveredLicense
}

// GetDiscoveredLicenses returns PathPathCertifyLegal.DiscoveredLicenses, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetDiscoveredLicenses() []AllCertifyLegalTreeDiscoveredLicensesLicense {
	return v.AllCertifyLegalTree.DiscoveredLicenses
}

// GetAttribution returns PathPathCertifyLegal.Attribution, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetAttribution() string { return v.AllCertifyLegalTree.Attribution }

// GetJustification returns PathPathCertifyLegal.Justification, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetJustification() string { return v.AllCertifyLegalTree.Justification }

// GetTimeScanned returns PathPathCertifyLegal.TimeScanned, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetTimeScanned() time.Time { return v.AllCertifyLegalTree.TimeScanned }

// GetOrigin returns PathPathCertifyLegal.Origin, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetOrigin() string { return v.AllCertifyLegalTree.Origin }

// GetCollector returns PathPathCertifyLegal.Collector, and is useful for accessing the field via an interface.
func (v *PathPathCertifyLegal) GetCollector() string { return v.AllCertifyLegalTree.Collector }

func (v *PathPathCertifyLegal) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyLegal
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyLegal = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyLegalTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyLegal struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	DeclaredLicense string `json:"declaredLicense"`

	DeclaredLicenses []AllCertifyLegalTreeDeclaredLicensesLicense `json:"declaredLicenses"`

	DiscoveredLicense string `json:"discoveredLicense"`

	DiscoveredLicenses []AllCertifyLegalTreeDiscoveredLicensesLicense `json:"discoveredLicenses"`

	Attribution string `json:"attribution"`

	Justification string `json:"justification"`

	TimeScanned time.Time `json:"timeScanned"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathCertifyLegal) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyLegal) __premarshalJSON() (*__premarshalPathPathCertifyLegal, error) {
	var retval __premarshalPathPathCertifyLegal

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyLegalTree.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyLegalTree.Subject
		var err error
		*dst, err = __marshalAllCertifyLegalTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathCertifyLegal.AllCertifyLegalTree.Subject: %w", err)
		}
	}
	retval.DeclaredLicense = v.AllCertifyLegalTree.DeclaredLicense
	retval.DeclaredLicenses = v.AllCertifyLegalTree.DeclaredLicenses
	retval.DiscoveredLicense = v.AllCertifyLegalTree.DiscoveredLicense
	retval.DiscoveredLicenses = v.AllCertifyLegalTree.DiscoveredLicenses
	retval.Attribution = v.AllCertifyLegalTree.Attribution
	retval.Justification = v.AllCertifyLegalTree.Justification
	retval.TimeScanned = v.AllCertifyLegalTree.TimeScanned
	retval.Origin = v.AllCertifyLegalTree.Origin
	retval.Collector = v.AllCertifyLegalTree.Collector
	return &retval, nil
}

// PathPathCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type PathPathCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns PathPathCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns PathPathCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns PathPathCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *PathPathCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *PathPathCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyScorecard) __premarshalJSON() (*__premarshalPathPathCertifyScorecard, error) {
	var retval __premarshalPathPathCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// PathPathCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability.
type PathPathCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	AllCertifyVEXStatement `json:"-"`
}

// GetTypename returns PathPathCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetId() string { return v.AllCertifyVEXStatement.Id }

// GetSubject returns PathPathCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns PathPathCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns PathPathCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetStatus() VexStatus { return v.AllCertifyVEXStatement.Status }

// GetVexJustification returns PathPathCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns PathPathCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns PathPathCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns PathPathCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns PathPathCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetOrigin() string { return v.AllCertifyVEXStatement.Origin }

// GetCollector returns PathPathCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *PathPathCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability AllCertifyVEXStatementVulnerability `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyVEXStatement) __premarshalJSON() (*__premarshalPathPathCertifyVEXStatement, error) {
	var retval __premarshalPathPathCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	retval.Vulnerability = v.AllCertifyVEXStatement.Vulnerability
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// PathPathCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected, we attach the a vulnerability with "NoVuln" type and an empty string
// for the vulnerability ID.
type PathPathCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns PathPathCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns PathPathCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.AllCertifyVuln.Package }

// GetVulnerability returns PathPathCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns PathPathCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetMetadata() AllCertifyVulnMetadataScanMetadata {
	return v.AllCertifyVuln.Metadata
}

func (v *PathPathCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability AllCertifyVulnVulnerability `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataScanMetadata `json:"metadata"`
}

func (v *PathPathCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyVuln) __premarshalJSON() (*__premarshalPathPathCertifyVuln, error) {
	var retval __premarshalPathPathCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	retval.Vulnerability = v.AllCertifyVuln.Vulnerability
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// PathPathHasMetadata includes the requested fields of the GraphQL type HasMetadata.
// The GraphQL type's documentation follows.
//
// HasMetadata is an attestation that a package, source, or artifact has a certain
// attested property (key) with value (value). For example, a source may have
// metadata "SourceRepo2FAEnabled=true".
//
// The intent of this evidence tree predicate is to allow extensibility of metadata
// expressible within the GUAC ontology. Metadata that is commonly used will then
// be promoted to a predicate on its own.
//
// Justification indicates how the metadata was determined.
//
// The metadata applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type PathPathHasMetadata struct {
	Typename       *string `json:"__typename"`
	AllHasMetadata `json:"-"`
}

// GetTypename returns PathPathHasMetadata.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasMetadata) GetTypename() *string { return v.Typename }

// GetId returns PathPathHasMetadata.Id, and is useful for accessing the field via an interface.
func (v *PathPathHasMetadata) GetId() string { return v.AllHasMetadata.Id }

// GetSubject returns PathPathHasMetadata.Subject, and is useful for accessing the field via an interface.
func (v *PathPathHasMetadata) GetSubject() AllHasMetadataSubjectPackageSourceOrArtifact {
	return v.AllHasMetadata.Subject
}

// GetKey returns PathPathHasMetadata.Key, and is useful for accessing the field via an interface.
func (v *PathPathHasMetadata) GetKey() string { return v.AllHasMetadata.Key }

// GetValue returns PathPathHasMetadata.Value, and is useful for accessing the field via an interface.
func (v *PathPathHasMetadata) GetValue() string { return v.AllHasMetadata.Value }

// GetTimestamp returns PathPathHasMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *PathPathHasMetadata) GetTimestamp() time.Time { return v.AllHasMetadata.Timestamp }

// GetJustification returns PathPathHasMetadata.Justification, and is useful for accessing the field via an interface.
func (v *PathPathHasMetadata) GetJustification() string { return v.AllHasMetadata.Justification }

// GetOrigin returns PathPathHasMetadata.Origin, and is useful for accessing the field via an interface.
func (v *PathPathHasMetadata) GetOrigin() string { return v.AllHasMetadata.Origin }

// GetCollector returns PathPathHasMetadata.Collector, and is useful for accessing the field via an interface.
func (v *PathPathHasMetadata) GetCollector() string { return v.AllHasMetadata.Collector }

func (v *PathPathHasMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHasMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHasMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasMetadata)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHasMetadata struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Key string `json:"key"`

	Value string `json:"value"`

	Timestamp time.Time `json:"timestamp"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathHasMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHasMetadata) __premarshalJSON() (*__premarshalPathPathHasMetadata, error) {
	var retval __premarshalPathPathHasMetadata

	retval.Typename = v.Typename
	retval.Id = v.AllHasMetadata.Id
	{

		dst := &retval.Subject
		src := v.AllHasMetadata.Subject
		var err error
		*dst, err = __marshalAllHasMetadataSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathHasMetadata.AllHasMetadata.Subject: %w", err)
		}
	}
	retval.Key = v.AllHasMetadata.Key
	retval.Value = v.AllHasMetadata.Value
	retval.Timestamp = v.AllHasMetadata.Timestamp
	retval.Justification = v.AllHasMetadata.Justification
	retval.Origin = v.AllHasMetadata.Origin
	retval.Collector = v.AllHasMetadata.Collector
	return &retval, nil
}

// PathPathHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type PathPathHasSBOM struct {
	Typename       *string `json:"__typename"`
	AllHasSBOMTree `json:"-"`
}

// GetTypename returns PathPathHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns PathPathHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetId() string { return v.AllHasSBOMTree.Id }

// GetSubject returns PathPathHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetSubject() AllHasSBOMTreeSubjectPackageOrArtifact {
	return v.AllHasSBOMTree.Subject
}

// GetUri returns PathPathHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetUri() string { return v.AllHasSBOMTree.Uri }

// GetAlgorithm returns PathPathHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetAlgorithm() string { return v.AllHasSBOMTree.Algorithm }

// GetDigest returns PathPathHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetDigest() string { return v.AllHasSBOMTree.Digest }

// GetDownloadLocation returns PathPathHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetDownloadLocation() string { return v.AllHasSBOMTree.DownloadLocation }

// GetOrigin returns PathPathHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetOrigin() string { return v.AllHasSBOMTree.Origin }

// GetCollector returns PathPathHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetCollector() string { return v.AllHasSBOMTree.Collector }

// GetKnownSince returns PathPathHasSBOM.KnownSince, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetKnownSince() time.Time { return v.AllHasSBOMTree.KnownSince }

// GetIncludedSoftware returns PathPathHasSBOM.IncludedSoftware, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetIncludedSoftware() []AllHasSBOMTreeIncludedSoftwarePackageOrArtifact {
	return v.AllHasSBOMTree.IncludedSoftware
}

// GetIncludedDependencies returns PathPathHasSBOM.IncludedDependencies, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetIncludedDependencies() []AllHasSBOMTreeIncludedDependenciesIsDependency {
	return v.AllHasSBOMTree.IncludedDependencies
}

// GetIncludedOccurrences returns PathPathHasSBOM.IncludedOccurrences, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetIncludedOccurrences() []AllHasSBOMTreeIncludedOccurrencesIsOccurrence {
	return v.AllHasSBOMTree.IncludedOccurrences
}

func (v *PathPathHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`

	KnownSince time.Time `json:"knownSince"`

	IncludedSoftware []json.RawMessage `json:"includedSoftware"`

	IncludedDependencies []AllHasSBOMTreeIncludedDependenciesIsDependency `json:"includedDependencies"`

	IncludedOccurrences []AllHasSBOMTreeIncludedOccurrencesIsOccurrence `json:"includedOccurrences"`
}

func (v *PathPathHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHasSBOM) __premarshalJSON() (*__premarshalPathPathHasSBOM, error) {
	var retval __premarshalPathPathHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.AllHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.AllHasSBOMTree.Subject
		var err error
		*dst, err = __marshalAllHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathHasSBOM.AllHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.AllHasSBOMTree.Uri
	retval.Algorithm = v.AllHasSBOMTree.Algorithm
	retval.Digest = v.AllHasSBOMTree.Digest
	retval.DownloadLocation = v.AllHasSBOMTree.DownloadLocation
	retval.Origin = v.AllHasSBOMTree.Origin
	retval.Collector = v.AllHasSBOMTree.Collector
	retval.KnownSince = v.AllHasSBOMTree.KnownSince
	{

		dst := &retval.IncludedSoftware
		src := v.AllHasSBOMTree.IncludedSoftware
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalAllHasSBOMTreeIncludedSoftwarePackageOrArtifact(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal PathPathHasSBOM.AllHasSBOMTree.IncludedSoftware: %w", err)
			}
		}
	}
	retval.IncludedDependencies = v.AllHasSBOMTree.IncludedDependencies
	retval.IncludedOccurrences = v.AllHasSBOMTree.IncludedOccurrences
	return &retval, nil
}

// PathPathHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type PathPathHasSLSA struct {
	Typename    *string `json:"__typename"`
	AllSLSATree `json:"-"`
}

// GetTypename returns PathPathHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns PathPathHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetId() string { return v.AllSLSATree.Id }

// GetSubject returns PathPathHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetSubject() AllSLSATreeSubjectArtifact { return v.AllSLSATree.Subject }

// GetSlsa returns PathPathHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetSlsa() AllSLSATreeSlsaSLSA { return v.AllSLSATree.Slsa }

func (v *PathPathHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject AllSLSATreeSubjectArtifact `json:"subject"`

	Slsa AllSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *PathPathHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHasSLSA) __premarshalJSON() (*__premarshalPathPathHasSLSA, error) {
	var retval __premarshalPathPathHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.AllSLSATree.Id
	retval.Subject = v.AllSLSATree.Subject
	retval.Slsa = v.AllSLSATree.Slsa
	return &retval, nil
}

// PathPathHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type PathPathHasSourceAt struct {
	Typename       *string `json:"__typename"`
	AllHasSourceAt `json:"-"`
}

// GetTypename returns PathPathHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns PathPathHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetId() string { return v.AllHasSourceAt.Id }

// GetJustification returns PathPathHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetJustification() string { return v.AllHasSourceAt.Justification }

// GetKnownSince returns PathPathHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetKnownSince() time.Time { return v.AllHasSourceAt.KnownSince }

// GetPackage returns PathPathHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetPackage() AllHasSourceAtPackage { return v.AllHasSourceAt.Package }

// GetSource returns PathPathHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetSource() AllHasSourceAtSource { return v.AllHasSourceAt.Source }

// GetOrigin returns PathPathHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetOrigin() string { return v.AllHasSourceAt.Origin }

// GetCollector returns PathPathHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetCollector() string { return v.AllHasSourceAt.Collector }

func (v *PathPathHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package AllHasSourceAtPackage `json:"package"`

	Source AllHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHasSourceAt) __premarshalJSON() (*__premarshalPathPathHasSourceAt, error) {
	var retval __premarshalPathPathHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.AllHasSourceAt.Id
	retval.Justification = v.AllHasSourceAt.Justification
	retval.KnownSince = v.AllHasSourceAt.KnownSince
	retval.Package = v.AllHasSourceAt.Package
	retval.Source = v.AllHasSourceAt.Source
	retval.Origin = v.AllHasSourceAt.Origin
	retval.Collector = v.AllHasSourceAt.Collector
	return &retval, nil
}

// PathPathHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that two artifacts are identical.
type PathPathHashEqual struct {
	Typename         *string `json:"__typename"`
	AllHashEqualTree `json:"-"`
}

// GetTypename returns PathPathHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetTypename() *string { return v.Typename }

// GetId returns PathPathHashEqual.Id, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetId() string { return v.AllHashEqualTree.Id }

// GetJustification returns PathPathHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetJustification() string { return v.AllHashEqualTree.Justification }

// GetArtifacts returns PathPathHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetArtifacts() []AllHashEqualTreeArtifactsArtifact {
	return v.AllHashEqualTree.Artifacts
}

// GetOrigin returns PathPathHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetOrigin() string { return v.AllHashEqualTree.Origin }

// GetCollector returns PathPathHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetCollector() string { return v.AllHashEqualTree.Collector }

func (v *PathPathHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []AllHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHashEqual) __premarshalJSON() (*__premarshalPathPathHashEqual, error) {
	var retval __premarshalPathPathHashEqual

	retval.Typename = v.Typename
	retval.Id = v.AllHashEqualTree.Id
	retval.Justification = v.AllHashEqualTree.Justification
	retval.Artifacts = v.AllHashEqualTree.Artifacts
	retval.Origin = v.AllHashEqualTree.Origin
	retval.Collector = v.AllHashEqualTree.Collector
	return &retval, nil
}

// PathPathIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type PathPathIsDependency struct {
	Typename            *string `json:"__typename"`
	AllIsDependencyTree `json:"-"`
}

// GetTypename returns PathPathIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetTypename() *string { return v.Typename }

// GetId returns PathPathIsDependency.Id, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetId() string { return v.AllIsDependencyTree.Id }

// GetJustification returns PathPathIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetJustification() string { return v.AllIsDependencyTree.Justification }

// GetPackage returns PathPathIsDependency.Package, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetPackage() AllIsDependencyTreePackage {
	return v.AllIsDependencyTree.Package
}

// GetDependencyPackage returns PathPathIsDependency.DependencyPackage, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetDependencyPackage() AllIsDependencyTreeDependencyPackage {
	return v.AllIsDependencyTree.DependencyPackage
}

// GetDependencyType returns PathPathIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetDependencyType() DependencyType {
	return v.AllIsDependencyTree.DependencyType
}

// GetVersionRange returns PathPathIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetVersionRange() string { return v.AllIsDependencyTree.VersionRange }

// GetOrigin returns PathPathIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetOrigin() string { return v.AllIsDependencyTree.Origin }

// GetCollector returns PathPathIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetCollector() string { return v.AllIsDependencyTree.Collector }

func (v *PathPathIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package AllIsDependencyTreePackage `json:"package"`

	DependencyPackage AllIsDependencyTreeDependencyPackage `json:"dependencyPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathIsDependency) __premarshalJSON() (*__premarshalPathPathIsDependency, error) {
	var retval __premarshalPathPathIsDependency

	retval.Typename = v.Typename
	retval.Id = v.AllIsDependencyTree.Id
	retval.Justification = v.AllIsDependencyTree.Justification
	retval.Package = v.AllIsDependencyTree.Package
	retval.DependencyPackage = v.AllIsDependencyTree.DependencyPackage
	retval.DependencyType = v.AllIsDependencyTree.DependencyType
	retval.VersionRange = v.AllIsDependencyTree.VersionRange
	retval.Origin = v.AllIsDependencyTree.Origin
	retval.Collector = v.AllIsDependencyTree.Collector
	return &retval, nil
}

// PathPathIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type PathPathIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns PathPathIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns PathPathIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns PathPathIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns PathPathIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns PathPathIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetJustification() string { return v.AllIsOccurrencesTree.Justification }

// GetOrigin returns PathPathIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns PathPathIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetCollector() string { return v.AllIsOccurrencesTree.Collector }

func (v *PathPathIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathIsOccurrence) __premarshalJSON() (*__premarshalPathPathIsOccurrence, error) {
	var retval __premarshalPathPathIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// PathPathLicense includes the requested fields of the GraphQL type License.
// The GraphQL type's documentation follows.
//
// License represents a particular license. If the license is found on the SPDX
// license list (https://spdx.org/licenses/) then the fields should be:
//
// Name: SPDX license identifier
// Inline: empty
// ListVersion: SPDX license list version
//
// example:
//
// Name: AGPL-3.0-or-later
// Inline: ""
// ListVersion: 3.21 2023-06-18
//
// If the license is not on the SPDX license list, then a new guid should be
// created and the license text placed inline:
//
// Name: LicenseRef-<guid>
// Inline: Full license text
// ListVersion: empty
//
// example:
//
// Name: LicenseRef-1a2b3c
// Inline: Permission to use, copy, modify, and/or distribute ...
// ListVersion: ""
type PathPathLicense struct {
	Typename       *string `json:"__typename"`
	AllLicenseTree `json:"-"`
}

// GetTypename returns PathPathLicense.Typename, and is useful for accessing the field via an interface.
func (v *PathPathLicense) GetTypename() *string { return v.Typename }

// GetId returns PathPathLicense.Id, and is useful for accessing the field via an interface.
func (v *PathPathLicense) GetId() string { return v.AllLicenseTree.Id }

// GetName returns PathPathLicense.Name, and is useful for accessing the field via an interface.
func (v *PathPathLicense) GetName() string { return v.AllLicenseTree.Name }

// GetInline returns PathPathLicense.Inline, and is useful for accessing the field via an interface.
func (v *PathPathLicense) GetInline() *string { return v.AllLicenseTree.Inline }

// GetListVersion returns PathPathLicense.ListVersion, and is useful for accessing the field via an interface.
func (v *PathPathLicense) GetListVersion() *string { return v.AllLicenseTree.ListVersion }

func (v *PathPathLicense) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathLicense
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathLicense = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllLicenseTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathLicense struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Inline *string `json:"inline"`

	ListVersion *string `json:"listVersion"`
}

func (v *PathPathLicense) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathLicense) __premarshalJSON() (*__premarshalPathPathLicense, error) {
	var retval __premarshalPathPathLicense

	retval.Typename = v.Typename
	retval.Id = v.AllLicenseTree.Id
	retval.Name = v.AllLicenseTree.Name
	retval.Inline = v.AllLicenseTree.Inline
	retval.ListVersion = v.AllLicenseTree.ListVersion
	return &retval, nil
}

// PathPathNode includes the requested fields of the GraphQL interface Node.
//
// PathPathNode is implemented by the following types:
// PathPathArtifact
// PathPathBuilder
// PathPathCertifyBad
// PathPathCertifyGood
// PathPathCertifyLegal
// PathPathCertifyScorecard
// PathPathCertifyVEXStatement
// PathPathCertifyVuln
// PathPathHasMetadata
// PathPathHasSBOM
// PathPathHasSLSA
// PathPathHasSourceAt
// PathPathHashEqual
// PathPathIsDependency
// PathPathIsOccurrence
// PathPathLicense
// PathPathPackage
// PathPathPkgEqual
// PathPathPointOfContact
// PathPathSource
// PathPathVulnEqual
// PathPathVulnerability
// PathPathVulnerabilityMetadata
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type PathPathNode interface {
	implementsGraphQLInterfacePathPathNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *PathPathArtifact) implementsGraphQLInterfacePathPathNode()              {}
func (v *PathPathBuilder) implementsGraphQLInterfacePathPathNode()               {}
func (v *PathPathCertifyBad) implementsGraphQLInterfacePathPathNode()            {}
func (v *PathPathCertifyGood) implementsGraphQLInterfacePathPathNode()           {}
func (v *PathPathCertifyLegal) implementsGraphQLInterfacePathPathNode()          {}
func (v *PathPathCertifyScorecard) implementsGraphQLInterfacePathPathNode()      {}
func (v *PathPathCertifyVEXStatement) implementsGraphQLInterfacePathPathNode()   {}
func (v *PathPathCertifyVuln) implementsGraphQLInterfacePathPathNode()           {}
func (v *PathPathHasMetadata) implementsGraphQLInterfacePathPathNode()           {}
func (v *PathPathHasSBOM) implementsGraphQLInterfacePathPathNode()               {}
func (v *PathPathHasSLSA) implementsGraphQLInterfacePathPathNode()               {}
func (v *PathPathHasSourceAt) implementsGraphQLInterfacePathPathNode()           {}
func (v *PathPathHashEqual) implementsGraphQLInterfacePathPathNode()             {}
func (v *PathPathIsDependency) implementsGraphQLInterfacePathPathNode()          {}
func (v *PathPathIsOccurrence) implementsGraphQLInterfacePathPathNode()          {}
func (v *PathPathLicense) implementsGraphQLInterfacePathPathNode()               {}
func (v *PathPathPackage) implementsGraphQLInterfacePathPathNode()               {}
func (v *PathPathPkgEqual) implementsGraphQLInterfacePathPathNode()              {}
func (v *PathPathPointOfContact) implementsGraphQLInterfacePathPathNode()        {}
func (v *PathPathSource) implementsGraphQLInterfacePathPathNode()                {}
func (v *PathPathVulnEqual) implementsGraphQLInterfacePathPathNode()             {}
func (v *PathPathVulnerability) implementsGraphQLInterfacePathPathNode()         {}
func (v *PathPathVulnerabilityMetadata) implementsGraphQLInterfacePathPathNode() {}

func __unmarshalPathPathNode(b []byte, v *PathPathNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Artifact":
		*v = new(PathPathArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(PathPathBuilder)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(PathPathCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(PathPathCertifyGood)
		return json.Unmarshal(b, *v)
	case "CertifyLegal":
		*v = new(PathPathCertifyLegal)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(PathPathCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(PathPathCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(PathPathCertifyVuln)
		return json.Unmarshal(b, *v)
	case "HasMetadata":
		*v = new(PathPathHasMetadata)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(PathPathHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(PathPathHasSLSA)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(PathPathHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(PathPathHashEqual)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(PathPathIsDependency)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(PathPathIsOccurrence)
		return json.Unmarshal(b, *v)
	case "License":
		*v = new(PathPathLicense)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(PathPathPackage)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(PathPathPkgEqual)
		return json.Unmarshal(b, *v)
	case "PointOfContact":
		*v = new(PathPathPointOfContact)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(PathPathSource)
		return json.Unmarshal(b, *v)
	case "VulnEqual":
		*v = new(PathPathVulnEqual)
		return json.Unmarshal(b, *v)
	case "Vulnerability":
		*v = new(PathPathVulnerability)
		return json.Unmarshal(b, *v)
	case "VulnerabilityMetadata":
		*v = new(PathPathVulnerabilityMetadata)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for PathPathNode: "%v"`, tn.TypeName)
	}
}

func __marshalPathPathNode(v *PathPathNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *PathPathArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyLegal:
		typename = "CertifyLegal"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyLegal
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHasMetadata:
		typename = "HasMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHasMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathLicense:
		typename = "License"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathLicense
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathPkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathPkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathPointOfContact:
		typename = "PointOfContact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathPointOfContact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathVulnEqual:
		typename = "VulnEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathVulnEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathVulnerability:
		typename = "Vulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathVulnerabilityMetadata:
		typename = "VulnerabilityMetadata"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathVulnerabilityMetadata
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for PathPathNode: "%T"`, v)
	}
}

// PathPathPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PathPathPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns PathPathPackage.Typename, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetTypename() *string { return v.Typename }

// GetId returns PathPathPackage.Id, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns PathPathPackage.Type, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns PathPathPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PathPathPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PathPathPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathPackage) __premarshalJSON() (*__premarshalPathPathPackage, error) {
	var retval __premarshalPathPathPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PathPathPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that two packages are similar.
type PathPathPkgEqual struct {
	Typename    *string `json:"__typename"`
	AllPkgEqual `json:"-"`
}

// GetTypename returns PathPathPkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetTypename() *string { return v.Typename }

// GetId returns PathPathPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetId() string { return v.AllPkgEqual.Id }

// GetJustification returns PathPathPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetJustification() string { return v.AllPkgEqual.Justification }

// GetPackages returns PathPathPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetPackages() []AllPkgEqualPackagesPackage { return v.AllPkgEqual.Packages }

// GetOrigin returns PathPathPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetOrigin() string { return v.AllPkgEqual.Origin }

// GetCollector returns PathPathPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetCollector() string { return v.AllPkgEqual.Collector }

func (v *PathPathPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathPkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathPkgEqual) __premarshalJSON() (*__premarshalPathPathPkgEqual, error) {
	var retval __premarshalPathPathPkgEqual

	retval.Typename = v.Typename
	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// PathPathPointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type PathPathPointOfContact struct {
	Typename          *string `json:"__typename"`
	AllPointOfContact `json:"-"`
}

// GetTypename returns PathPathPointOfContact.Typename, and is useful for accessing the field via an interface.
func (v *PathPathPointOfContact) GetTypename() *string { return v.Typename }

// GetId returns PathPathPointOfContact.Id, and is useful for accessing the field via an interface.
func (v *PathPathPointOfContact) GetId() string { return v.AllPointOfContact.Id }

// GetSubject returns PathPathPointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *PathPathPointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.AllPointOfContact.Subject
}

// GetEmail returns PathPathPointOfContact.Email, and is useful for accessing the field via an interface.
func (v *PathPathPointOfContact) GetEmail() string { return v.AllPointOfContact.Email }

// GetInfo returns PathPathPointOfContact.Info, and is useful for accessing the field via an interface.
func (v *PathPathPointOfContact) GetInfo() string { return v.AllPointOfContact.Info }

// GetSince returns PathPathPointOfContact.Since, and is useful for accessing the field via an interface.
func (v *PathPathPointOfContact) GetSince() time.Time { return v.AllPointOfContact.Since }

// GetJustification returns PathPathPointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *PathPathPointOfContact) GetJustification() string { return v.AllPointOfContact.Justification }

// GetOrigin returns PathPathPointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *PathPathPointOfContact) GetOrigin() string { return v.AllPointOfContact.Origin }

// GetCollector returns PathPathPointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *PathPathPointOfContact) GetCollector() string { return v.AllPointOfContact.Collector }

func (v *PathPathPointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathPointOfContact
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathPointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPointOfContact)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathPointOfContact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathPointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathPointOfContact) __premarshalJSON() (*__premarshalPathPathPointOfContact, error) {
	var retval __premarshalPathPathPointOfContact

	retval.Typename = v.Typename
	retval.Id = v.AllPointOfContact.Id
	{

		dst := &retval.Subject
		src := v.AllPointOfContact.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PathPathPointOfContact.AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.AllPointOfContact.Email
	retval.Info = v.AllPointOfContact.Info
	retval.Since = v.AllPointOfContact.Since
	retval.Justification = v.AllPointOfContact.Justification
	retval.Origin = v.AllPointOfContact.Origin
	retval.Collector = v.AllPointOfContact.Collector
	return &retval, nil
}

// PathPathSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type PathPathSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns PathPathSource.Typename, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetTypename() *string { return v.Typename }

// GetId returns PathPathSource.Id, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns PathPathSource.Type, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns PathPathSource.Namespaces, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *PathPathSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathSource
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *PathPathSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathSource) __premarshalJSON() (*__premarshalPathPathSource, error) {
	var retval __premarshalPathPathSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// PathPathVulnEqual includes the requested fields of the GraphQL type VulnEqual.
// The GraphQL type's documentation follows.
//
// VulnEqual is an attestation to link two vulnerabilities together as being equal"
//
// Note that setting noVuln vulnerability type is invalid for VulnEqual!
type PathPathVulnEqual struct {
	Typename     *string `json:"__typename"`
	AllVulnEqual `json:"-"`
}

// GetTypename returns PathPathVulnEqual.Typename, and is useful for accessing the field via an interface.
func (v *PathPathVulnEqual) GetTypename() *string { return v.Typename }

// GetId returns PathPathVulnEqual.Id, and is useful for accessing the field via an interface.
func (v *PathPathVulnEqual) GetId() string { return v.AllVulnEqual.Id }

// GetVulnerabilities returns PathPathVulnEqual.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *PathPathVulnEqual) GetVulnerabilities() []AllVulnEqualVulnerabilitiesVulnerability {
	return v.AllVulnEqual.Vulnerabilities
}

// GetJustification returns PathPathVulnEqual.Justification, and is useful for accessing the field via an interface.
func (v *PathPathVulnEqual) GetJustification() string { return v.AllVulnEqual.Justification }

// GetOrigin returns PathPathVulnEqual.Origin, and is useful for accessing the field via an interface.
func (v *PathPathVulnEqual) GetOrigin() string { return v.AllVulnEqual.Origin }

// GetCollector returns PathPathVulnEqual.Collector, and is useful for accessing the field via an interface.
func (v *PathPathVulnEqual) GetCollector() string { return v.AllVulnEqual.Collector }

func (v *PathPathVulnEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathVulnEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathVulnEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathVulnEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Vulnerabilities []AllVulnEqualVulnerabilitiesVulnerability `json:"vulnerabilities"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathVulnEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathVulnEqual) __premarshalJSON() (*__premarshalPathPathVulnEqual, error) {
	var retval __premarshalPathPathVulnEqual

	retval.Typename = v.Typename
	retval.Id = v.AllVulnEqual.Id
	retval.Vulnerabilities = v.AllVulnEqual.Vulnerabilities
	retval.Justification = v.AllVulnEqual.Justification
	retval.Origin = v.AllVulnEqual.Origin
	retval.Collector = v.AllVulnEqual.Collector
	return &retval, nil
}

// PathPathVulnerability includes the requested fields of the GraphQL type Vulnerability.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type PathPathVulnerability struct {
	Typename             *string `json:"__typename"`
	AllVulnerabilityTree `json:"-"`
}

// GetTypename returns PathPathVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *PathPathVulnerability) GetTypename() *string { return v.Typename }

// GetId returns PathPathVulnerability.Id, and is useful for accessing the field via an interface.
func (v *PathPathVulnerability) GetId() string { return v.AllVulnerabilityTree.Id }

// GetType returns PathPathVulnerability.Type, and is useful for accessing the field via an interface.
func (v *PathPathVulnerability) GetType() string { return v.AllVulnerabilityTree.Type }

// GetVulnerabilityIDs returns PathPathVulnerability.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *PathPathVulnerability) GetVulnerabilityIDs() []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID {
	return v.AllVulnerabilityTree.VulnerabilityIDs
}

func (v *PathPathVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnerabilityTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	VulnerabilityIDs []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

func (v *PathPathVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathVulnerability) __premarshalJSON() (*__premarshalPathPathVulnerability, error) {
	var retval __premarshalPathPathVulnerability

	retval.Typename = v.Typename
	retval.Id = v.AllVulnerabilityTree.Id
	retval.Type = v.AllVulnerabilityTree.Type
	retval.VulnerabilityIDs = v.AllVulnerabilityTree.VulnerabilityIDs
	return &retval, nil
}

// PathPathVulnerabilityMetadata includes the requested fields of the GraphQL type VulnerabilityMetadata.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetadata is an attestation that a vulnerability has a related score
// associated with it.
//
// The intent of this evidence tree predicate is to allow extensibility of vulnerability
// score (one-to-one mapping) with a specific vulnerability ID.
//
// A vulnerability ID can have a one-to-many relationship with the VulnerabilityMetadata
// node as a vulnerability ID can have multiple scores (in various frameworks).
//
// Examples:
//
// scoreType: EPSSv1
// scoreValue: 0.960760000
//
// scoreType: CVSSv2
// scoreValue: 5.0
//
// scoreType: CVSSv3
// scoreValue: 7.5
//
// The timestamp is used to determine when the score was evaluated for the specific vulnerability.
type PathPathVulnerabilityMetadata struct {
	Typename            *string `json:"__typename"`
	AllVulnMetadataTree `json:"-"`
}

// GetTypename returns PathPathVulnerabilityMetadata.Typename, and is useful for accessing the field via an interface.
func (v *PathPathVulnerabilityMetadata) GetTypename() *string { return v.Typename }

// GetId returns PathPathVulnerabilityMetadata.Id, and is useful for accessing the field via an interface.
func (v *PathPathVulnerabilityMetadata) GetId() string { return v.AllVulnMetadataTree.Id }

// GetVulnerability returns PathPathVulnerabilityMetadata.Vulnerability, and is useful for accessing the field via an interface.
func (v *PathPathVulnerabilityMetadata) GetVulnerability() AllVulnMetadataTreeVulnerability {
	return v.AllVulnMetadataTree.Vulnerability
}

// GetScoreType returns PathPathVulnerabilityMetadata.ScoreType, and is useful for accessing the field via an interface.
func (v *PathPathVulnerabilityMetadata) GetScoreType() VulnerabilityScoreType {
	return v.AllVulnMetadataTree.ScoreType
}

// GetScoreValue returns PathPathVulnerabilityMetadata.ScoreValue, and is useful for accessing the field via an interface.
func (v *PathPathVulnerabilityMetadata) GetScoreValue() float64 {
	return v.AllVulnMetadataTree.ScoreValue
}

// GetTimestamp returns PathPathVulnerabilityMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *PathPathVulnerabilityMetadata) GetTimestamp() time.Time {
	return v.AllVulnMetadataTree.Timestamp
}

// GetOrigin returns PathPathVulnerabilityMetadata.Origin, and is useful for accessing the field via an interface.
func (v *PathPathVulnerabilityMetadata) GetOrigin() string { return v.AllVulnMetadataTree.Origin }

// GetCollector returns PathPathVulnerabilityMetadata.Collector, and is useful for accessing the field via an interface.
func (v *PathPathVulnerabilityMetadata) GetCollector() string { return v.AllVulnMetadataTree.Collector }

func (v *PathPathVulnerabilityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathVulnerabilityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathVulnerabilityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnMetadataTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathVulnerabilityMetadata struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Vulnerability AllVulnMetadataTreeVulnerability `json:"vulnerability"`

	ScoreType VulnerabilityScoreType `json:"scoreType"`

	ScoreValue float64 `json:"scoreValue"`

	Timestamp time.Time `json:"timestamp"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathVulnerabilityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathVulnerabilityMetadata) __premarshalJSON() (*__premarshalPathPathVulnerabilityMetadata, error) {
	var retval __premarshalPathPathVulnerabilityMetadata

	retval.Typename = v.Typename
	retval.Id = v.AllVulnMetadataTree.Id
	retval.Vulnerability = v.AllVulnMetadataTree.Vulnerability
	retval.ScoreType = v.AllVulnMetadataTree.ScoreType
	retval.ScoreValue = v.AllVulnMetadataTree.ScoreValue
	retval.Timestamp = v.AllVulnMetadataTree.Timestamp
	retval.Origin = v.AllVulnMetadataTree.Origin
	retval.Collector = v.AllVulnMetadataTree.Collector
	return &retval, nil
}

// PathResponse is returned by Path on success.
type PathResponse struct {
	// path query returns a path between subject and target, of a maximum length.
	//
	// Since we want to uniquely identify endpoints, nodes must be specified by
	// valid IDs only (instead of using filters/input spec structs).
	//
	// Specifying any Edge value in `usingOnly` will make the path only contain the
	// corresponding GUAC evidence trees (GUAC verbs).
	Path []PathPathNode `json:"-"`
}

// GetPath returns PathResponse.Path, and is useful for accessing the field via an interface.
func (v *PathResponse) GetPath() []PathPathNode { return v.Path }

func (v *PathResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathResponse
		Path []json.RawMessage `json:"path"`
		graphql.NoUnmarshalJSON
	}
	firstPass.PathResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Path
		src := firstPass.Path
		*dst = make(
			[]PathPathNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalPathPathNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal PathResponse.Path: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalPathResponse struct {
	Path []json.RawMessage `json:"path"`
}

func (v *PathResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathResponse) __premarshalJSON() (*__premarshalPathResponse, error) {
	var retval __premarshalPathResponse

	{

		dst := &retval.Path
		src := v.Path
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalPathPathNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal PathResponse.Path: %w", err)
			}
		}
	}
	return &retval, nil
}

// PkgEqualInputSpec represents the input to certify that packages are similar.
type PkgEqualInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
	DocumentRef   string `json:"documentRef"`
}

// GetJustification returns PkgEqualInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *PkgEqualInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns PkgEqualInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *PkgEqualInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns PkgEqualInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *PkgEqualInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns PkgEqualInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *PkgEqualInputSpec) GetDocumentRef() string { return v.DocumentRef }

// PkgEqualListPkgEqualListPkgEqualConnection includes the requested fields of the GraphQL type PkgEqualConnection.
// The GraphQL type's documentation follows.
//
// PkgEqualConnection returns the paginated results for PkgEqual.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the PkgEqualEdge which contains the current cursor
// and the PkgEqual node itself
type PkgEqualListPkgEqualListPkgEqualConnection struct {
	TotalCount int                                                           `json:"totalCount"`
	Edges      []PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdge `json:"edges"`
	PageInfo   PkgEqualListPkgEqualListPkgEqualConnectionPageInfo            `json:"pageInfo"`
}

// GetTotalCount returns PkgEqualListPkgEqualListPkgEqualConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns PkgEqualListPkgEqualListPkgEqualConnection.Edges, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnection) GetEdges() []PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdge {
	return v.Edges
}

// GetPageInfo returns PkgEqualListPkgEqualListPkgEqualConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnection) GetPageInfo() PkgEqualListPkgEqualListPkgEqualConnectionPageInfo {
	return v.PageInfo
}

// PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdge includes the requested fields of the GraphQL type PkgEqualEdge.
// The GraphQL type's documentation follows.
//
// PkgEqualEdge contains the cursor for the resulting node and
// the PkgEqual node itself.
type PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdge struct {
	Cursor string                                                                  `json:"cursor"`
	Node   PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual `json:"node"`
}

// GetCursor returns PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdge.Cursor, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdge.Node, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdge) GetNode() PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual {
	return v.Node
}

// PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that two packages are similar.
type PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual struct {
	AllPkgEqual `json:"-"`
}

// GetId returns PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual.Id, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual) GetId() string {
	return v.AllPkgEqual.Id
}

// GetJustification returns PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual) GetJustification() string {
	return v.AllPkgEqual.Justification
}

// GetPackages returns PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual) GetPackages() []AllPkgEqualPackagesPackage {
	return v.AllPkgEqual.Packages
}

// GetOrigin returns PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual) GetOrigin() string {
	return v.AllPkgEqual.Origin
}

// GetCollector returns PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual) GetCollector() string {
	return v.AllPkgEqual.Collector
}

func (v *PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual) __premarshalJSON() (*__premarshalPkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual, error) {
	var retval __premarshalPkgEqualListPkgEqualListPkgEqualConnectionEdgesPkgEqualEdgeNodePkgEqual

	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// PkgEqualListPkgEqualListPkgEqualConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type PkgEqualListPkgEqualListPkgEqualConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns PkgEqualListPkgEqualListPkgEqualConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns PkgEqualListPkgEqualListPkgEqualConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns PkgEqualListPkgEqualListPkgEqualConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PkgEqualListPkgEqualListPkgEqualConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// PkgEqualListResponse is returned by PkgEqualList on success.
type PkgEqualListResponse struct {
	// Returns a paginated results via PkgEqualConnection
	PkgEqualList *PkgEqualListPkgEqualListPkgEqualConnection `json:"PkgEqualList"`
}

// GetPkgEqualList returns PkgEqualListResponse.PkgEqualList, and is useful for accessing the field via an interface.
func (v *PkgEqualListResponse) GetPkgEqualList() *PkgEqualListPkgEqualListPkgEqualConnection {
	return v.PkgEqualList
}

// PkgEqualSpec allows filtering the list of package equality statements to return
// in a query.
//
// Specifying just one package allows to query for all similar packages (if any
// exists).
type PkgEqualSpec struct {
	Id            *string    `json:"id"`
	Packages      []*PkgSpec `json:"packages"`
	Justification *string    `json:"justification"`
	Origin        *string    `json:"origin"`
	Collector     *string    `json:"collector"`
	DocumentRef   *string    `json:"documentRef"`
}

// GetId returns PkgEqualSpec.Id, and is useful for accessing the field via an interface.
func (v *PkgEqualSpec) GetId() *string { return v.Id }

// GetPackages returns PkgEqualSpec.Packages, and is useful for accessing the field via an interface.
func (v *PkgEqualSpec) GetPackages() []*PkgSpec { return v.Packages }

// GetJustification returns PkgEqualSpec.Justification, and is useful for accessing the field via an interface.
func (v *PkgEqualSpec) GetJustification() *string { return v.Justification }

// GetOrigin returns PkgEqualSpec.Origin, and is useful for accessing the field via an interface.
func (v *PkgEqualSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns PkgEqualSpec.Collector, and is useful for accessing the field via an interface.
func (v *PkgEqualSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns PkgEqualSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *PkgEqualSpec) GetDocumentRef() *string { return v.DocumentRef }

// PkgEqualsPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that two packages are similar.
type PkgEqualsPkgEqual struct {
	AllPkgEqual `json:"-"`
}

// GetId returns PkgEqualsPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *PkgEqualsPkgEqual) GetId() string { return v.AllPkgEqual.Id }

// GetJustification returns PkgEqualsPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *PkgEqualsPkgEqual) GetJustification() string { return v.AllPkgEqual.Justification }

// GetPackages returns PkgEqualsPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *PkgEqualsPkgEqual) GetPackages() []AllPkgEqualPackagesPackage { return v.AllPkgEqual.Packages }

// GetOrigin returns PkgEqualsPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *PkgEqualsPkgEqual) GetOrigin() string { return v.AllPkgEqual.Origin }

// GetCollector returns PkgEqualsPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *PkgEqualsPkgEqual) GetCollector() string { return v.AllPkgEqual.Collector }

func (v *PkgEqualsPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PkgEqualsPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PkgEqualsPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPkgEqualsPkgEqual struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []AllPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PkgEqualsPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PkgEqualsPkgEqual) __premarshalJSON() (*__premarshalPkgEqualsPkgEqual, error) {
	var retval __premarshalPkgEqualsPkgEqual

	retval.Id = v.AllPkgEqual.Id
	retval.Justification = v.AllPkgEqual.Justification
	retval.Packages = v.AllPkgEqual.Packages
	retval.Origin = v.AllPkgEqual.Origin
	retval.Collector = v.AllPkgEqual.Collector
	return &retval, nil
}

// PkgEqualsResponse is returned by PkgEquals on success.
type PkgEqualsResponse struct {
	// Returns all package equality statements matching a filter.
	PkgEqual []PkgEqualsPkgEqual `json:"PkgEqual"`
}

// GetPkgEqual returns PkgEqualsResponse.PkgEqual, and is useful for accessing the field via an interface.
func (v *PkgEqualsResponse) GetPkgEqual() []PkgEqualsPkgEqual { return v.PkgEqual }

// PkgInputSpec specifies a package for mutations.
//
// This is different than PkgSpec because we want to encode mandatory fields:
// type and name. All optional fields are given empty default values.
type PkgInputSpec struct {
	Type       string                      `json:"type"`
	Namespace  *string                     `json:"namespace"`
	Name       string                      `json:"name"`
	Version    *string                     `json:"version"`
	Qualifiers []PackageQualifierInputSpec `json:"qualifiers"`
	Subpath    *string                     `json:"subpath"`
}

// GetType returns PkgInputSpec.Type, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetType() string { return v.Type }

// GetNamespace returns PkgInputSpec.Namespace, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetNamespace() *string { return v.Namespace }

// GetName returns PkgInputSpec.Name, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetName() string { return v.Name }

// GetVersion returns PkgInputSpec.Version, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetVersion() *string { return v.Version }

// GetQualifiers returns PkgInputSpec.Qualifiers, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetQualifiers() []PackageQualifierInputSpec { return v.Qualifiers }

// GetSubpath returns PkgInputSpec.Subpath, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetSubpath() *string { return v.Subpath }

// PkgMatchType is an enum to determine if the attestation should be done at the
// specific version or package name.
type PkgMatchType string

const (
	PkgMatchTypeAllVersions     PkgMatchType = "ALL_VERSIONS"
	PkgMatchTypeSpecificVersion PkgMatchType = "SPECIFIC_VERSION"
)

// PkgSpec allows filtering the list of sources to return in a query.
//
// Each field matches a qualifier from pURL. Use null to match on all values at
// that level. For example, to get all packages in GUAC backend, use a PkgSpec
// where every field is null.
//
// The id field can be used to match on a specific node in the trie to match packageTypeID,
// packageNamespaceID, packageNameID, or packageVersionID.
//
// Empty string at a field means matching with the empty string. If passing in
// qualifiers, all of the values in the list must match. Since we want to return
// nodes with any number of qualifiers if no qualifiers are passed in the input,
// we must also return the same set of nodes it the qualifiers list is empty. To
// match on nodes that don't contain any qualifier, set matchOnlyEmptyQualifiers
// to true. If this field is true, then the qualifiers argument is ignored.
type PkgSpec struct {
	Id                       *string                `json:"id"`
	Type                     *string                `json:"type"`
	Namespace                *string                `json:"namespace"`
	Name                     *string                `json:"name"`
	Version                  *string                `json:"version"`
	Qualifiers               []PackageQualifierSpec `json:"qualifiers"`
	MatchOnlyEmptyQualifiers *bool                  `json:"matchOnlyEmptyQualifiers"`
	Subpath                  *string                `json:"subpath"`
}

// GetId returns PkgSpec.Id, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetId() *string { return v.Id }

// GetType returns PkgSpec.Type, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetType() *string { return v.Type }

// GetNamespace returns PkgSpec.Namespace, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetNamespace() *string { return v.Namespace }

// GetName returns PkgSpec.Name, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetName() *string { return v.Name }

// GetVersion returns PkgSpec.Version, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetVersion() *string { return v.Version }

// GetQualifiers returns PkgSpec.Qualifiers, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetQualifiers() []PackageQualifierSpec { return v.Qualifiers }

// GetMatchOnlyEmptyQualifiers returns PkgSpec.MatchOnlyEmptyQualifiers, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetMatchOnlyEmptyQualifiers() *bool { return v.MatchOnlyEmptyQualifiers }

// GetSubpath returns PkgSpec.Subpath, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetSubpath() *string { return v.Subpath }

// PointOfContactInputSpec represents the mutation input to ingest a PointOfContact evidence.
type PointOfContactInputSpec struct {
	Email         string    `json:"email"`
	Info          string    `json:"info"`
	Since         time.Time `json:"since"`
	Justification string    `json:"justification"`
	Origin        string    `json:"origin"`
	Collector     string    `json:"collector"`
	DocumentRef   string    `json:"documentRef"`
}

// GetEmail returns PointOfContactInputSpec.Email, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetEmail() string { return v.Email }

// GetInfo returns PointOfContactInputSpec.Info, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetInfo() string { return v.Info }

// GetSince returns PointOfContactInputSpec.Since, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetSince() time.Time { return v.Since }

// GetJustification returns PointOfContactInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns PointOfContactInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns PointOfContactInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns PointOfContactInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *PointOfContactInputSpec) GetDocumentRef() string { return v.DocumentRef }

// PointOfContactListPointOfContactListPointOfContactConnection includes the requested fields of the GraphQL type PointOfContactConnection.
// The GraphQL type's documentation follows.
//
// PointOfContactConnection returns the paginated results for PointOfContact.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the PointOfContactEdge which contains the current cursor
// and the PointOfContact node itself
type PointOfContactListPointOfContactListPointOfContactConnection struct {
	TotalCount int                                                                                   `json:"totalCount"`
	Edges      []PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdge `json:"edges"`
	PageInfo   PointOfContactListPointOfContactListPointOfContactConnectionPageInfo                  `json:"pageInfo"`
}

// GetTotalCount returns PointOfContactListPointOfContactListPointOfContactConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns PointOfContactListPointOfContactListPointOfContactConnection.Edges, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnection) GetEdges() []PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdge {
	return v.Edges
}

// GetPageInfo returns PointOfContactListPointOfContactListPointOfContactConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnection) GetPageInfo() PointOfContactListPointOfContactListPointOfContactConnectionPageInfo {
	return v.PageInfo
}

// PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdge includes the requested fields of the GraphQL type PointOfContactEdge.
// The GraphQL type's documentation follows.
//
// PointOfContactEdge contains the cursor for the resulting node and
// the PointOfContact node itself.
type PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdge struct {
	Cursor string                                                                                                `json:"cursor"`
	Node   PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact `json:"node"`
}

// GetCursor returns PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdge.Cursor, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdge.Node, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdge) GetNode() PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact {
	return v.Node
}

// PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact struct {
	AllPointOfContact `json:"-"`
}

// GetId returns PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact.Id, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) GetId() string {
	return v.AllPointOfContact.Id
}

// GetSubject returns PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.AllPointOfContact.Subject
}

// GetEmail returns PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact.Email, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) GetEmail() string {
	return v.AllPointOfContact.Email
}

// GetInfo returns PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact.Info, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) GetInfo() string {
	return v.AllPointOfContact.Info
}

// GetSince returns PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact.Since, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) GetSince() time.Time {
	return v.AllPointOfContact.Since
}

// GetJustification returns PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) GetJustification() string {
	return v.AllPointOfContact.Justification
}

// GetOrigin returns PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) GetOrigin() string {
	return v.AllPointOfContact.Origin
}

// GetCollector returns PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) GetCollector() string {
	return v.AllPointOfContact.Collector
}

func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact
		graphql.NoUnmarshalJSON
	}
	firstPass.PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPointOfContact)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact) __premarshalJSON() (*__premarshalPointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact, error) {
	var retval __premarshalPointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact

	retval.Id = v.AllPointOfContact.Id
	{

		dst := &retval.Subject
		src := v.AllPointOfContact.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PointOfContactListPointOfContactListPointOfContactConnectionEdgesPointOfContactEdgeNodePointOfContact.AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.AllPointOfContact.Email
	retval.Info = v.AllPointOfContact.Info
	retval.Since = v.AllPointOfContact.Since
	retval.Justification = v.AllPointOfContact.Justification
	retval.Origin = v.AllPointOfContact.Origin
	retval.Collector = v.AllPointOfContact.Collector
	return &retval, nil
}

// PointOfContactListPointOfContactListPointOfContactConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type PointOfContactListPointOfContactListPointOfContactConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns PointOfContactListPointOfContactListPointOfContactConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns PointOfContactListPointOfContactListPointOfContactConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns PointOfContactListPointOfContactListPointOfContactConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PointOfContactListPointOfContactListPointOfContactConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// PointOfContactListResponse is returned by PointOfContactList on success.
type PointOfContactListResponse struct {
	// Returns a paginated results via PointOfContactConnection
	PointOfContactList *PointOfContactListPointOfContactListPointOfContactConnection `json:"PointOfContactList"`
}

// GetPointOfContactList returns PointOfContactListResponse.PointOfContactList, and is useful for accessing the field via an interface.
func (v *PointOfContactListResponse) GetPointOfContactList() *PointOfContactListPointOfContactListPointOfContactConnection {
	return v.PointOfContactList
}

// PointOfContactSpec allows filtering the list of PointOfContact evidence to return in a
// query.
//
// If a package is specified in the subject filter, then it must be specified up
// to PackageName or PackageVersion. That is, user must specify package name, or
// name and one of version, qualifiers, or subpath.
//
// If a source is specified in the subject filter, then it must specify a name,
// and optionally a tag and a commit.
//
// since filters attestations with a value of since later or equal to the provided filter.
type PointOfContactSpec struct {
	Id            *string                      `json:"id"`
	Subject       *PackageSourceOrArtifactSpec `json:"subject"`
	Email         *string                      `json:"email"`
	Info          *string                      `json:"info"`
	Since         *time.Time                   `json:"since"`
	Justification *string                      `json:"justification"`
	Origin        *string                      `json:"origin"`
	Collector     *string                      `json:"collector"`
	DocumentRef   *string                      `json:"documentRef"`
}

// GetId returns PointOfContactSpec.Id, and is useful for accessing the field via an interface.
func (v *PointOfContactSpec) GetId() *string { return v.Id }

// GetSubject returns PointOfContactSpec.Subject, and is useful for accessing the field via an interface.
func (v *PointOfContactSpec) GetSubject() *PackageSourceOrArtifactSpec { return v.Subject }

// GetEmail returns PointOfContactSpec.Email, and is useful for accessing the field via an interface.
func (v *PointOfContactSpec) GetEmail() *string { return v.Email }

// GetInfo returns PointOfContactSpec.Info, and is useful for accessing the field via an interface.
func (v *PointOfContactSpec) GetInfo() *string { return v.Info }

// GetSince returns PointOfContactSpec.Since, and is useful for accessing the field via an interface.
func (v *PointOfContactSpec) GetSince() *time.Time { return v.Since }

// GetJustification returns PointOfContactSpec.Justification, and is useful for accessing the field via an interface.
func (v *PointOfContactSpec) GetJustification() *string { return v.Justification }

// GetOrigin returns PointOfContactSpec.Origin, and is useful for accessing the field via an interface.
func (v *PointOfContactSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns PointOfContactSpec.Collector, and is useful for accessing the field via an interface.
func (v *PointOfContactSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns PointOfContactSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *PointOfContactSpec) GetDocumentRef() *string { return v.DocumentRef }

// PointOfContactsPointOfContact includes the requested fields of the GraphQL type PointOfContact.
// The GraphQL type's documentation follows.
//
// PointOfContact is an attestation of how to get in touch with the person(s) responsible
// for a package, source, or artifact.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The attestation applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
//
// email is the email address (singular) of the point of contact.
//
// info is additional contact information other than email address. This is free
// form.
//
// NOTE: the identifiers for point of contact should be part of software trees.
// This will benefit from identifier look up and traversal as well as organization
// hierarchy. However, until the use case arises, PointOfContact will be a flat
// reference to the contact details.
type PointOfContactsPointOfContact struct {
	AllPointOfContact `json:"-"`
}

// GetId returns PointOfContactsPointOfContact.Id, and is useful for accessing the field via an interface.
func (v *PointOfContactsPointOfContact) GetId() string { return v.AllPointOfContact.Id }

// GetSubject returns PointOfContactsPointOfContact.Subject, and is useful for accessing the field via an interface.
func (v *PointOfContactsPointOfContact) GetSubject() AllPointOfContactSubjectPackageSourceOrArtifact {
	return v.AllPointOfContact.Subject
}

// GetEmail returns PointOfContactsPointOfContact.Email, and is useful for accessing the field via an interface.
func (v *PointOfContactsPointOfContact) GetEmail() string { return v.AllPointOfContact.Email }

// GetInfo returns PointOfContactsPointOfContact.Info, and is useful for accessing the field via an interface.
func (v *PointOfContactsPointOfContact) GetInfo() string { return v.AllPointOfContact.Info }

// GetSince returns PointOfContactsPointOfContact.Since, and is useful for accessing the field via an interface.
func (v *PointOfContactsPointOfContact) GetSince() time.Time { return v.AllPointOfContact.Since }

// GetJustification returns PointOfContactsPointOfContact.Justification, and is useful for accessing the field via an interface.
func (v *PointOfContactsPointOfContact) GetJustification() string {
	return v.AllPointOfContact.Justification
}

// GetOrigin returns PointOfContactsPointOfContact.Origin, and is useful for accessing the field via an interface.
func (v *PointOfContactsPointOfContact) GetOrigin() string { return v.AllPointOfContact.Origin }

// GetCollector returns PointOfContactsPointOfContact.Collector, and is useful for accessing the field via an interface.
func (v *PointOfContactsPointOfContact) GetCollector() string { return v.AllPointOfContact.Collector }

func (v *PointOfContactsPointOfContact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PointOfContactsPointOfContact
		graphql.NoUnmarshalJSON
	}
	firstPass.PointOfContactsPointOfContact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPointOfContact)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPointOfContactsPointOfContact struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Email string `json:"email"`

	Info string `json:"info"`

	Since time.Time `json:"since"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PointOfContactsPointOfContact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PointOfContactsPointOfContact) __premarshalJSON() (*__premarshalPointOfContactsPointOfContact, error) {
	var retval __premarshalPointOfContactsPointOfContact

	retval.Id = v.AllPointOfContact.Id
	{

		dst := &retval.Subject
		src := v.AllPointOfContact.Subject
		var err error
		*dst, err = __marshalAllPointOfContactSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PointOfContactsPointOfContact.AllPointOfContact.Subject: %w", err)
		}
	}
	retval.Email = v.AllPointOfContact.Email
	retval.Info = v.AllPointOfContact.Info
	retval.Since = v.AllPointOfContact.Since
	retval.Justification = v.AllPointOfContact.Justification
	retval.Origin = v.AllPointOfContact.Origin
	retval.Collector = v.AllPointOfContact.Collector
	return &retval, nil
}

// PointOfContactsResponse is returned by PointOfContacts on success.
type PointOfContactsResponse struct {
	// Returns all PointOfContact attestations matching a filter.
	PointOfContact []PointOfContactsPointOfContact `json:"PointOfContact"`
}

// GetPointOfContact returns PointOfContactsResponse.PointOfContact, and is useful for accessing the field via an interface.
func (v *PointOfContactsResponse) GetPointOfContact() []PointOfContactsPointOfContact {
	return v.PointOfContact
}

// SLSAInputSpec is the same as SLSA but for mutation input.
type SLSAInputSpec struct {
	BuildType     string                   `json:"buildType"`
	SlsaPredicate []SLSAPredicateInputSpec `json:"slsaPredicate"`
	SlsaVersion   string                   `json:"slsaVersion"`
	StartedOn     *time.Time               `json:"startedOn"`
	FinishedOn    *time.Time               `json:"finishedOn"`
	Origin        string                   `json:"origin"`
	Collector     string                   `json:"collector"`
	DocumentRef   string                   `json:"documentRef"`
}

// GetBuildType returns SLSAInputSpec.BuildType, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetBuildType() string { return v.BuildType }

// GetSlsaPredicate returns SLSAInputSpec.SlsaPredicate, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetSlsaPredicate() []SLSAPredicateInputSpec { return v.SlsaPredicate }

// GetSlsaVersion returns SLSAInputSpec.SlsaVersion, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetSlsaVersion() string { return v.SlsaVersion }

// GetStartedOn returns SLSAInputSpec.StartedOn, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetStartedOn() *time.Time { return v.StartedOn }

// GetFinishedOn returns SLSAInputSpec.FinishedOn, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetFinishedOn() *time.Time { return v.FinishedOn }

// GetOrigin returns SLSAInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns SLSAInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns SLSAInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetDocumentRef() string { return v.DocumentRef }

// SLSAPredicateInputSpec allows ingesting SLSAPredicateSpec.
type SLSAPredicateInputSpec struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns SLSAPredicateInputSpec.Key, and is useful for accessing the field via an interface.
func (v *SLSAPredicateInputSpec) GetKey() string { return v.Key }

// GetValue returns SLSAPredicateInputSpec.Value, and is useful for accessing the field via an interface.
func (v *SLSAPredicateInputSpec) GetValue() string { return v.Value }

// SLSAPredicateSpec is the same as SLSAPredicate, but usable as query input.
type SLSAPredicateSpec struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns SLSAPredicateSpec.Key, and is useful for accessing the field via an interface.
func (v *SLSAPredicateSpec) GetKey() string { return v.Key }

// GetValue returns SLSAPredicateSpec.Value, and is useful for accessing the field via an interface.
func (v *SLSAPredicateSpec) GetValue() string { return v.Value }

// ScanMetadataInput represents the input for certifying vulnerability
// scans in mutations.
type ScanMetadataInput struct {
	TimeScanned    time.Time `json:"timeScanned"`
	DbUri          string    `json:"dbUri"`
	DbVersion      string    `json:"dbVersion"`
	ScannerUri     string    `json:"scannerUri"`
	ScannerVersion string    `json:"scannerVersion"`
	Origin         string    `json:"origin"`
	Collector      string    `json:"collector"`
	DocumentRef    string    `json:"documentRef"`
}

// GetTimeScanned returns ScanMetadataInput.TimeScanned, and is useful for accessing the field via an interface.
func (v *ScanMetadataInput) GetTimeScanned() time.Time { return v.TimeScanned }

// GetDbUri returns ScanMetadataInput.DbUri, and is useful for accessing the field via an interface.
func (v *ScanMetadataInput) GetDbUri() string { return v.DbUri }

// GetDbVersion returns ScanMetadataInput.DbVersion, and is useful for accessing the field via an interface.
func (v *ScanMetadataInput) GetDbVersion() string { return v.DbVersion }

// GetScannerUri returns ScanMetadataInput.ScannerUri, and is useful for accessing the field via an interface.
func (v *ScanMetadataInput) GetScannerUri() string { return v.ScannerUri }

// GetScannerVersion returns ScanMetadataInput.ScannerVersion, and is useful for accessing the field via an interface.
func (v *ScanMetadataInput) GetScannerVersion() string { return v.ScannerVersion }

// GetOrigin returns ScanMetadataInput.Origin, and is useful for accessing the field via an interface.
func (v *ScanMetadataInput) GetOrigin() string { return v.Origin }

// GetCollector returns ScanMetadataInput.Collector, and is useful for accessing the field via an interface.
func (v *ScanMetadataInput) GetCollector() string { return v.Collector }

// GetDocumentRef returns ScanMetadataInput.DocumentRef, and is useful for accessing the field via an interface.
func (v *ScanMetadataInput) GetDocumentRef() string { return v.DocumentRef }

// ScorecardCheckInputSpec represents the mutation input for a Scorecard check.
type ScorecardCheckInputSpec struct {
	Check string `json:"check"`
	Score int    `json:"score"`
}

// GetCheck returns ScorecardCheckInputSpec.Check, and is useful for accessing the field via an interface.
func (v *ScorecardCheckInputSpec) GetCheck() string { return v.Check }

// GetScore returns ScorecardCheckInputSpec.Score, and is useful for accessing the field via an interface.
func (v *ScorecardCheckInputSpec) GetScore() int { return v.Score }

// ScorecardCheckSpec is the same as ScorecardCheck, but usable as query input.
type ScorecardCheckSpec struct {
	Check string `json:"check"`
	Score int    `json:"score"`
}

// GetCheck returns ScorecardCheckSpec.Check, and is useful for accessing the field via an interface.
func (v *ScorecardCheckSpec) GetCheck() string { return v.Check }

// GetScore returns ScorecardCheckSpec.Score, and is useful for accessing the field via an interface.
func (v *ScorecardCheckSpec) GetScore() int { return v.Score }

// ScorecardInputSpec represents the mutation input to ingest a Scorecard.
type ScorecardInputSpec struct {
	Checks           []ScorecardCheckInputSpec `json:"checks"`
	AggregateScore   float64                   `json:"aggregateScore"`
	TimeScanned      time.Time                 `json:"timeScanned"`
	ScorecardVersion string                    `json:"scorecardVersion"`
	ScorecardCommit  string                    `json:"scorecardCommit"`
	Origin           string                    `json:"origin"`
	Collector        string                    `json:"collector"`
	DocumentRef      string                    `json:"documentRef"`
}

// GetChecks returns ScorecardInputSpec.Checks, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetChecks() []ScorecardCheckInputSpec { return v.Checks }

// GetAggregateScore returns ScorecardInputSpec.AggregateScore, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetAggregateScore() float64 { return v.AggregateScore }

// GetTimeScanned returns ScorecardInputSpec.TimeScanned, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetTimeScanned() time.Time { return v.TimeScanned }

// GetScorecardVersion returns ScorecardInputSpec.ScorecardVersion, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetScorecardVersion() string { return v.ScorecardVersion }

// GetScorecardCommit returns ScorecardInputSpec.ScorecardCommit, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetScorecardCommit() string { return v.ScorecardCommit }

// GetOrigin returns ScorecardInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns ScorecardInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns ScorecardInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetDocumentRef() string { return v.DocumentRef }

// ScorecardsListResponse is returned by ScorecardsList on success.
type ScorecardsListResponse struct {
	// Returns a paginated results via CertifyScorecardConnection
	ScorecardsList *ScorecardsListScorecardsListCertifyScorecardConnection `json:"scorecardsList"`
}

// GetScorecardsList returns ScorecardsListResponse.ScorecardsList, and is useful for accessing the field via an interface.
func (v *ScorecardsListResponse) GetScorecardsList() *ScorecardsListScorecardsListCertifyScorecardConnection {
	return v.ScorecardsList
}

// ScorecardsListScorecardsListCertifyScorecardConnection includes the requested fields of the GraphQL type CertifyScorecardConnection.
// The GraphQL type's documentation follows.
//
// CertifyScorecardConnection returns the paginated results for CertifyScorecard.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the CertifyScorecardEdge which contains the current cursor
// and the CertifyScorecard node itself
type ScorecardsListScorecardsListCertifyScorecardConnection struct {
	TotalCount int                                                                               `json:"totalCount"`
	Edges      []ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdge `json:"edges"`
	PageInfo   ScorecardsListScorecardsListCertifyScorecardConnectionPageInfo                    `json:"pageInfo"`
}

// GetTotalCount returns ScorecardsListScorecardsListCertifyScorecardConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns ScorecardsListScorecardsListCertifyScorecardConnection.Edges, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnection) GetEdges() []ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdge {
	return v.Edges
}

// GetPageInfo returns ScorecardsListScorecardsListCertifyScorecardConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnection) GetPageInfo() ScorecardsListScorecardsListCertifyScorecardConnectionPageInfo {
	return v.PageInfo
}

// ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdge includes the requested fields of the GraphQL type CertifyScorecardEdge.
// The GraphQL type's documentation follows.
//
// CertifyScorecardEdge contains the cursor for the resulting node and
// the CertifyScorecard node itself.
type ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdge struct {
	Cursor string                                                                                              `json:"cursor"`
	Node   ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard `json:"node"`
}

// GetCursor returns ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdge.Cursor, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdge.Node, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdge) GetNode() ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard {
	return v.Node
}

// ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard struct {
	AllCertifyScorecard `json:"-"`
}

// GetId returns ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard) GetId() string {
	return v.AllCertifyScorecard.Id
}

// GetSource returns ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard struct {
	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard) __premarshalJSON() (*__premarshalScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard, error) {
	var retval __premarshalScorecardsListScorecardsListCertifyScorecardConnectionEdgesCertifyScorecardEdgeNodeCertifyScorecard

	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// ScorecardsListScorecardsListCertifyScorecardConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type ScorecardsListScorecardsListCertifyScorecardConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns ScorecardsListScorecardsListCertifyScorecardConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns ScorecardsListScorecardsListCertifyScorecardConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns ScorecardsListScorecardsListCertifyScorecardConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ScorecardsListScorecardsListCertifyScorecardConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// ScorecardsResponse is returned by Scorecards on success.
type ScorecardsResponse struct {
	// Returns all Scorecard certifications matching the filter.
	Scorecards []ScorecardsScorecardsCertifyScorecard `json:"scorecards"`
}

// GetScorecards returns ScorecardsResponse.Scorecards, and is useful for accessing the field via an interface.
func (v *ScorecardsResponse) GetScorecards() []ScorecardsScorecardsCertifyScorecard {
	return v.Scorecards
}

// ScorecardsScorecardsCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type ScorecardsScorecardsCertifyScorecard struct {
	AllCertifyScorecard `json:"-"`
}

// GetId returns ScorecardsScorecardsCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *ScorecardsScorecardsCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns ScorecardsScorecardsCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *ScorecardsScorecardsCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns ScorecardsScorecardsCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *ScorecardsScorecardsCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *ScorecardsScorecardsCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ScorecardsScorecardsCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.ScorecardsScorecardsCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalScorecardsScorecardsCertifyScorecard struct {
	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *ScorecardsScorecardsCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ScorecardsScorecardsCertifyScorecard) __premarshalJSON() (*__premarshalScorecardsScorecardsCertifyScorecard, error) {
	var retval __premarshalScorecardsScorecardsCertifyScorecard

	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// SourceInputSpec specifies a source for mutations.
//
// This is different than SourceSpec because we want to encode that all fields
// except tag and commit are mandatory fields. All optional fields are given empty
// default values.
//
// It is an error to set both tag and commit fields to values different than the
// default.
type SourceInputSpec struct {
	Type      string  `json:"type"`
	Namespace string  `json:"namespace"`
	Name      string  `json:"name"`
	Tag       *string `json:"tag"`
	Commit    *string `json:"commit"`
}

// GetType returns SourceInputSpec.Type, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetType() string { return v.Type }

// GetNamespace returns SourceInputSpec.Namespace, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetNamespace() string { return v.Namespace }

// GetName returns SourceInputSpec.Name, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetName() string { return v.Name }

// GetTag returns SourceInputSpec.Tag, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetTag() *string { return v.Tag }

// GetCommit returns SourceInputSpec.Commit, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetCommit() *string { return v.Commit }

// SourceSpec allows filtering the list of sources to return in a query.
//
// Empty string at a field means matching with the empty string. Missing field
// means retrieving all possible matches.
//
// It is an error to specify both tag and commit fields, except it both are set as
// empty string (in which case the returned sources are only those for which there
// is no tag/commit information).
type SourceSpec struct {
	Id        *string `json:"id"`
	Type      *string `json:"type"`
	Namespace *string `json:"namespace"`
	Name      *string `json:"name"`
	Tag       *string `json:"tag"`
	Commit    *string `json:"commit"`
}

// GetId returns SourceSpec.Id, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetId() *string { return v.Id }

// GetType returns SourceSpec.Type, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetType() *string { return v.Type }

// GetNamespace returns SourceSpec.Namespace, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetNamespace() *string { return v.Namespace }

// GetName returns SourceSpec.Name, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetName() *string { return v.Name }

// GetTag returns SourceSpec.Tag, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetTag() *string { return v.Tag }

// GetCommit returns SourceSpec.Commit, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetCommit() *string { return v.Commit }

// SourcesListResponse is returned by SourcesList on success.
type SourcesListResponse struct {
	// Returns a paginated results via SourceConnection
	SourcesList *SourcesListSourcesListSourceConnection `json:"sourcesList"`
}

// GetSourcesList returns SourcesListResponse.SourcesList, and is useful for accessing the field via an interface.
func (v *SourcesListResponse) GetSourcesList() *SourcesListSourcesListSourceConnection {
	return v.SourcesList
}

// SourcesListSourcesListSourceConnection includes the requested fields of the GraphQL type SourceConnection.
// The GraphQL type's documentation follows.
//
// SourceConnection returns the paginated results for Source.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the SourceEdge which contains the current cursor
// and the Source node itself
type SourcesListSourcesListSourceConnection struct {
	TotalCount int                                                     `json:"totalCount"`
	Edges      []SourcesListSourcesListSourceConnectionEdgesSourceEdge `json:"edges"`
	PageInfo   SourcesListSourcesListSourceConnectionPageInfo          `json:"pageInfo"`
}

// GetTotalCount returns SourcesListSourcesListSourceConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns SourcesListSourcesListSourceConnection.Edges, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnection) GetEdges() []SourcesListSourcesListSourceConnectionEdgesSourceEdge {
	return v.Edges
}

// GetPageInfo returns SourcesListSourcesListSourceConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnection) GetPageInfo() SourcesListSourcesListSourceConnectionPageInfo {
	return v.PageInfo
}

// SourcesListSourcesListSourceConnectionEdgesSourceEdge includes the requested fields of the GraphQL type SourceEdge.
// The GraphQL type's documentation follows.
//
// SourceEdge contains the cursor for the resulting node and
// the Source node itself.
type SourcesListSourcesListSourceConnectionEdgesSourceEdge struct {
	Cursor string                                                          `json:"cursor"`
	Node   SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource `json:"node"`
}

// GetCursor returns SourcesListSourcesListSourceConnectionEdgesSourceEdge.Cursor, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnectionEdgesSourceEdge) GetCursor() string { return v.Cursor }

// GetNode returns SourcesListSourcesListSourceConnectionEdgesSourceEdge.Node, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnectionEdgesSourceEdge) GetNode() SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource {
	return v.Node
}

// SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource.Id, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource) GetId() string {
	return v.AllSourceTree.Id
}

// GetType returns SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource.Type, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource) GetType() string {
	return v.AllSourceTree.Type
}

// GetNamespaces returns SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource.Namespaces, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource
		graphql.NoUnmarshalJSON
	}
	firstPass.SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource) __premarshalJSON() (*__premarshalSourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource, error) {
	var retval __premarshalSourcesListSourcesListSourceConnectionEdgesSourceEdgeNodeSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// SourcesListSourcesListSourceConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type SourcesListSourcesListSourceConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns SourcesListSourcesListSourceConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns SourcesListSourcesListSourceConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnectionPageInfo) GetEndCursor() *string { return v.EndCursor }

// GetHasNextPage returns SourcesListSourcesListSourceConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *SourcesListSourcesListSourceConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// SourcesResponse is returned by Sources on success.
type SourcesResponse struct {
	// Returns all sources matching a filter.
	Sources []SourcesSourcesSource `json:"sources"`
}

// GetSources returns SourcesResponse.Sources, and is useful for accessing the field via an interface.
func (v *SourcesResponse) GetSources() []SourcesSourcesSource { return v.Sources }

// SourcesSourcesSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type SourcesSourcesSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns SourcesSourcesSource.Id, and is useful for accessing the field via an interface.
func (v *SourcesSourcesSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns SourcesSourcesSource.Type, and is useful for accessing the field via an interface.
func (v *SourcesSourcesSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns SourcesSourcesSource.Namespaces, and is useful for accessing the field via an interface.
func (v *SourcesSourcesSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *SourcesSourcesSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SourcesSourcesSource
		graphql.NoUnmarshalJSON
	}
	firstPass.SourcesSourcesSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSourcesSourcesSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *SourcesSourcesSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SourcesSourcesSource) __premarshalJSON() (*__premarshalSourcesSourcesSource, error) {
	var retval __premarshalSourcesSourcesSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// VEXStatementListCertifyVEXStatementListVEXConnection includes the requested fields of the GraphQL type VEXConnection.
// The GraphQL type's documentation follows.
//
// VEXConnection returns the paginated results for CertifyVEXStatement.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the VEXEdge which contains the current cursor
// and the CertifyVEXStatement node itself
type VEXStatementListCertifyVEXStatementListVEXConnection struct {
	TotalCount int                                                                `json:"totalCount"`
	Edges      []VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdge `json:"edges"`
	PageInfo   VEXStatementListCertifyVEXStatementListVEXConnectionPageInfo       `json:"pageInfo"`
}

// GetTotalCount returns VEXStatementListCertifyVEXStatementListVEXConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns VEXStatementListCertifyVEXStatementListVEXConnection.Edges, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnection) GetEdges() []VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdge {
	return v.Edges
}

// GetPageInfo returns VEXStatementListCertifyVEXStatementListVEXConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnection) GetPageInfo() VEXStatementListCertifyVEXStatementListVEXConnectionPageInfo {
	return v.PageInfo
}

// VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdge includes the requested fields of the GraphQL type VEXEdge.
// The GraphQL type's documentation follows.
//
// VEXEdge contains the cursor for the resulting node and
// the CertifyVEXStatement node itself.
type VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdge struct {
	Cursor string                                                                                  `json:"cursor"`
	Node   VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement `json:"node"`
}

// GetCursor returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdge.Cursor, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdge.Node, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdge) GetNode() VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement {
	return v.Node
}

// VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability.
type VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement struct {
	AllCertifyVEXStatement `json:"-"`
}

// GetId returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) GetId() string {
	return v.AllCertifyVEXStatement.Id
}

// GetSubject returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) GetStatus() VexStatus {
	return v.AllCertifyVEXStatement.Status
}

// GetVexJustification returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) GetOrigin() string {
	return v.AllCertifyVEXStatement.Origin
}

// GetCollector returns VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability AllCertifyVEXStatementVulnerability `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement) __premarshalJSON() (*__premarshalVEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement, error) {
	var retval __premarshalVEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement

	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VEXStatementListCertifyVEXStatementListVEXConnectionEdgesVEXEdgeNodeCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	retval.Vulnerability = v.AllCertifyVEXStatement.Vulnerability
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// VEXStatementListCertifyVEXStatementListVEXConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type VEXStatementListCertifyVEXStatementListVEXConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns VEXStatementListCertifyVEXStatementListVEXConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns VEXStatementListCertifyVEXStatementListVEXConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns VEXStatementListCertifyVEXStatementListVEXConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *VEXStatementListCertifyVEXStatementListVEXConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// VEXStatementListResponse is returned by VEXStatementList on success.
type VEXStatementListResponse struct {
	// Returns a paginated results via CertifyVexConnection
	CertifyVEXStatementList *VEXStatementListCertifyVEXStatementListVEXConnection `json:"CertifyVEXStatementList"`
}

// GetCertifyVEXStatementList returns VEXStatementListResponse.CertifyVEXStatementList, and is useful for accessing the field via an interface.
func (v *VEXStatementListResponse) GetCertifyVEXStatementList() *VEXStatementListCertifyVEXStatementListVEXConnection {
	return v.CertifyVEXStatementList
}

// VEXStatementsCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability.
type VEXStatementsCertifyVEXStatement struct {
	AllCertifyVEXStatement `json:"-"`
}

// GetId returns VEXStatementsCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VEXStatementsCertifyVEXStatement) GetId() string { return v.AllCertifyVEXStatement.Id }

// GetSubject returns VEXStatementsCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VEXStatementsCertifyVEXStatement) GetSubject() AllCertifyVEXStatementSubjectPackageOrArtifact {
	return v.AllCertifyVEXStatement.Subject
}

// GetVulnerability returns VEXStatementsCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VEXStatementsCertifyVEXStatement) GetVulnerability() AllCertifyVEXStatementVulnerability {
	return v.AllCertifyVEXStatement.Vulnerability
}

// GetStatus returns VEXStatementsCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VEXStatementsCertifyVEXStatement) GetStatus() VexStatus {
	return v.AllCertifyVEXStatement.Status
}

// GetVexJustification returns VEXStatementsCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VEXStatementsCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.AllCertifyVEXStatement.VexJustification
}

// GetStatement returns VEXStatementsCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VEXStatementsCertifyVEXStatement) GetStatement() string {
	return v.AllCertifyVEXStatement.Statement
}

// GetStatusNotes returns VEXStatementsCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VEXStatementsCertifyVEXStatement) GetStatusNotes() string {
	return v.AllCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VEXStatementsCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VEXStatementsCertifyVEXStatement) GetKnownSince() time.Time {
	return v.AllCertifyVEXStatement.KnownSince
}

// GetOrigin returns VEXStatementsCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VEXStatementsCertifyVEXStatement) GetOrigin() string { return v.AllCertifyVEXStatement.Origin }

// GetCollector returns VEXStatementsCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VEXStatementsCertifyVEXStatement) GetCollector() string {
	return v.AllCertifyVEXStatement.Collector
}

func (v *VEXStatementsCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VEXStatementsCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VEXStatementsCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVEXStatementsCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability AllCertifyVEXStatementVulnerability `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VEXStatementsCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VEXStatementsCertifyVEXStatement) __premarshalJSON() (*__premarshalVEXStatementsCertifyVEXStatement, error) {
	var retval __premarshalVEXStatementsCertifyVEXStatement

	retval.Id = v.AllCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.AllCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalAllCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal VEXStatementsCertifyVEXStatement.AllCertifyVEXStatement.Subject: %w", err)
		}
	}
	retval.Vulnerability = v.AllCertifyVEXStatement.Vulnerability
	retval.Status = v.AllCertifyVEXStatement.Status
	retval.VexJustification = v.AllCertifyVEXStatement.VexJustification
	retval.Statement = v.AllCertifyVEXStatement.Statement
	retval.StatusNotes = v.AllCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.AllCertifyVEXStatement.KnownSince
	retval.Origin = v.AllCertifyVEXStatement.Origin
	retval.Collector = v.AllCertifyVEXStatement.Collector
	return &retval, nil
}

// VEXStatementsResponse is returned by VEXStatements on success.
type VEXStatementsResponse struct {
	// Returns all VEX certifications matching the input filter.
	CertifyVEXStatement []VEXStatementsCertifyVEXStatement `json:"CertifyVEXStatement"`
}

// GetCertifyVEXStatement returns VEXStatementsResponse.CertifyVEXStatement, and is useful for accessing the field via an interface.
func (v *VEXStatementsResponse) GetCertifyVEXStatement() []VEXStatementsCertifyVEXStatement {
	return v.CertifyVEXStatement
}

// Records the justification included in the VEX statement.
type VexJustification string

const (
	VexJustificationComponentNotPresent                         VexJustification = "COMPONENT_NOT_PRESENT"
	VexJustificationVulnerableCodeNotPresent                    VexJustification = "VULNERABLE_CODE_NOT_PRESENT"
	VexJustificationVulnerableCodeNotInExecutePath              VexJustification = "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH"
	VexJustificationVulnerableCodeCannotBeControlledByAdversary VexJustification = "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY"
	VexJustificationInlineMitigationsAlreadyExist               VexJustification = "INLINE_MITIGATIONS_ALREADY_EXIST"
	VexJustificationNotProvided                                 VexJustification = "NOT_PROVIDED"
)

// VexStatementInputSpec represents the input to ingest VEX statements.
type VexStatementInputSpec struct {
	Status           VexStatus        `json:"status"`
	VexJustification VexJustification `json:"vexJustification"`
	Statement        string           `json:"statement"`
	StatusNotes      string           `json:"statusNotes"`
	KnownSince       time.Time        `json:"knownSince"`
	Origin           string           `json:"origin"`
	Collector        string           `json:"collector"`
	DocumentRef      string           `json:"documentRef"`
}

// GetStatus returns VexStatementInputSpec.Status, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetStatus() VexStatus { return v.Status }

// GetVexJustification returns VexStatementInputSpec.VexJustification, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetVexJustification() VexJustification { return v.VexJustification }

// GetStatement returns VexStatementInputSpec.Statement, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetStatement() string { return v.Statement }

// GetStatusNotes returns VexStatementInputSpec.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetStatusNotes() string { return v.StatusNotes }

// GetKnownSince returns VexStatementInputSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetKnownSince() time.Time { return v.KnownSince }

// GetOrigin returns VexStatementInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns VexStatementInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns VexStatementInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetDocumentRef() string { return v.DocumentRef }

// Records the status of a VEX statement subject.
type VexStatus string

const (
	VexStatusNotAffected        VexStatus = "NOT_AFFECTED"
	VexStatusAffected           VexStatus = "AFFECTED"
	VexStatusFixed              VexStatus = "FIXED"
	VexStatusUnderInvestigation VexStatus = "UNDER_INVESTIGATION"
)

// VulnEqualInputSpec represents the input to link vulnerabilities to each other.
type VulnEqualInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
	DocumentRef   string `json:"documentRef"`
}

// GetJustification returns VulnEqualInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *VulnEqualInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns VulnEqualInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *VulnEqualInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns VulnEqualInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *VulnEqualInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns VulnEqualInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *VulnEqualInputSpec) GetDocumentRef() string { return v.DocumentRef }

// VulnEqualListResponse is returned by VulnEqualList on success.
type VulnEqualListResponse struct {
	// Returns a paginated results via VulnEqualConnection
	VulnEqualList *VulnEqualListVulnEqualListVulnEqualConnection `json:"vulnEqualList"`
}

// GetVulnEqualList returns VulnEqualListResponse.VulnEqualList, and is useful for accessing the field via an interface.
func (v *VulnEqualListResponse) GetVulnEqualList() *VulnEqualListVulnEqualListVulnEqualConnection {
	return v.VulnEqualList
}

// VulnEqualListVulnEqualListVulnEqualConnection includes the requested fields of the GraphQL type VulnEqualConnection.
// The GraphQL type's documentation follows.
//
// VulnEqualConnection returns the paginated results for VulnEqual.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the VulnEqualEdge which contains the current cursor
// and the VulnEqual node itself
type VulnEqualListVulnEqualListVulnEqualConnection struct {
	TotalCount int                                                               `json:"totalCount"`
	Edges      []VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdge `json:"edges"`
	PageInfo   VulnEqualListVulnEqualListVulnEqualConnectionPageInfo             `json:"pageInfo"`
}

// GetTotalCount returns VulnEqualListVulnEqualListVulnEqualConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns VulnEqualListVulnEqualListVulnEqualConnection.Edges, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnection) GetEdges() []VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdge {
	return v.Edges
}

// GetPageInfo returns VulnEqualListVulnEqualListVulnEqualConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnection) GetPageInfo() VulnEqualListVulnEqualListVulnEqualConnectionPageInfo {
	return v.PageInfo
}

// VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdge includes the requested fields of the GraphQL type VulnEqualEdge.
// The GraphQL type's documentation follows.
//
// VulnEqualEdge contains the cursor for the resulting node and
// the VulnEqual node itself.
type VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdge struct {
	Cursor string                                                                       `json:"cursor"`
	Node   VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual `json:"node"`
}

// GetCursor returns VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdge.Cursor, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdge.Node, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdge) GetNode() VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual {
	return v.Node
}

// VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual includes the requested fields of the GraphQL type VulnEqual.
// The GraphQL type's documentation follows.
//
// VulnEqual is an attestation to link two vulnerabilities together as being equal"
//
// Note that setting noVuln vulnerability type is invalid for VulnEqual!
type VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual struct {
	AllVulnEqual `json:"-"`
}

// GetId returns VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual.Id, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual) GetId() string {
	return v.AllVulnEqual.Id
}

// GetVulnerabilities returns VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual) GetVulnerabilities() []AllVulnEqualVulnerabilitiesVulnerability {
	return v.AllVulnEqual.Vulnerabilities
}

// GetJustification returns VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual.Justification, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual) GetJustification() string {
	return v.AllVulnEqual.Justification
}

// GetOrigin returns VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual.Origin, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual) GetOrigin() string {
	return v.AllVulnEqual.Origin
}

// GetCollector returns VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual.Collector, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual) GetCollector() string {
	return v.AllVulnEqual.Collector
}

func (v *VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual struct {
	Id string `json:"id"`

	Vulnerabilities []AllVulnEqualVulnerabilitiesVulnerability `json:"vulnerabilities"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual) __premarshalJSON() (*__premarshalVulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual, error) {
	var retval __premarshalVulnEqualListVulnEqualListVulnEqualConnectionEdgesVulnEqualEdgeNodeVulnEqual

	retval.Id = v.AllVulnEqual.Id
	retval.Vulnerabilities = v.AllVulnEqual.Vulnerabilities
	retval.Justification = v.AllVulnEqual.Justification
	retval.Origin = v.AllVulnEqual.Origin
	retval.Collector = v.AllVulnEqual.Collector
	return &retval, nil
}

// VulnEqualListVulnEqualListVulnEqualConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type VulnEqualListVulnEqualListVulnEqualConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns VulnEqualListVulnEqualListVulnEqualConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns VulnEqualListVulnEqualListVulnEqualConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns VulnEqualListVulnEqualListVulnEqualConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *VulnEqualListVulnEqualListVulnEqualConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// VulnEqualSpec allows filtering the list of vulnerability links to return
// in a query.
type VulnEqualSpec struct {
	Id              *string              `json:"id"`
	Vulnerabilities []*VulnerabilitySpec `json:"vulnerabilities"`
	Justification   *string              `json:"justification"`
	Origin          *string              `json:"origin"`
	Collector       *string              `json:"collector"`
	DocumentRef     *string              `json:"documentRef"`
}

// GetId returns VulnEqualSpec.Id, and is useful for accessing the field via an interface.
func (v *VulnEqualSpec) GetId() *string { return v.Id }

// GetVulnerabilities returns VulnEqualSpec.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *VulnEqualSpec) GetVulnerabilities() []*VulnerabilitySpec { return v.Vulnerabilities }

// GetJustification returns VulnEqualSpec.Justification, and is useful for accessing the field via an interface.
func (v *VulnEqualSpec) GetJustification() *string { return v.Justification }

// GetOrigin returns VulnEqualSpec.Origin, and is useful for accessing the field via an interface.
func (v *VulnEqualSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns VulnEqualSpec.Collector, and is useful for accessing the field via an interface.
func (v *VulnEqualSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns VulnEqualSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *VulnEqualSpec) GetDocumentRef() *string { return v.DocumentRef }

// VulnEqualsResponse is returned by VulnEquals on success.
type VulnEqualsResponse struct {
	// Returns all equal vulnerability mappings that match a filter.
	VulnEqual []VulnEqualsVulnEqual `json:"vulnEqual"`
}

// GetVulnEqual returns VulnEqualsResponse.VulnEqual, and is useful for accessing the field via an interface.
func (v *VulnEqualsResponse) GetVulnEqual() []VulnEqualsVulnEqual { return v.VulnEqual }

// VulnEqualsVulnEqual includes the requested fields of the GraphQL type VulnEqual.
// The GraphQL type's documentation follows.
//
// VulnEqual is an attestation to link two vulnerabilities together as being equal"
//
// Note that setting noVuln vulnerability type is invalid for VulnEqual!
type VulnEqualsVulnEqual struct {
	AllVulnEqual `json:"-"`
}

// GetId returns VulnEqualsVulnEqual.Id, and is useful for accessing the field via an interface.
func (v *VulnEqualsVulnEqual) GetId() string { return v.AllVulnEqual.Id }

// GetVulnerabilities returns VulnEqualsVulnEqual.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *VulnEqualsVulnEqual) GetVulnerabilities() []AllVulnEqualVulnerabilitiesVulnerability {
	return v.AllVulnEqual.Vulnerabilities
}

// GetJustification returns VulnEqualsVulnEqual.Justification, and is useful for accessing the field via an interface.
func (v *VulnEqualsVulnEqual) GetJustification() string { return v.AllVulnEqual.Justification }

// GetOrigin returns VulnEqualsVulnEqual.Origin, and is useful for accessing the field via an interface.
func (v *VulnEqualsVulnEqual) GetOrigin() string { return v.AllVulnEqual.Origin }

// GetCollector returns VulnEqualsVulnEqual.Collector, and is useful for accessing the field via an interface.
func (v *VulnEqualsVulnEqual) GetCollector() string { return v.AllVulnEqual.Collector }

func (v *VulnEqualsVulnEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VulnEqualsVulnEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.VulnEqualsVulnEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVulnEqualsVulnEqual struct {
	Id string `json:"id"`

	Vulnerabilities []AllVulnEqualVulnerabilitiesVulnerability `json:"vulnerabilities"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VulnEqualsVulnEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VulnEqualsVulnEqual) __premarshalJSON() (*__premarshalVulnEqualsVulnEqual, error) {
	var retval __premarshalVulnEqualsVulnEqual

	retval.Id = v.AllVulnEqual.Id
	retval.Vulnerabilities = v.AllVulnEqual.Vulnerabilities
	retval.Justification = v.AllVulnEqual.Justification
	retval.Origin = v.AllVulnEqual.Origin
	retval.Collector = v.AllVulnEqual.Collector
	return &retval, nil
}

// VulnerabilitiesResponse is returned by Vulnerabilities on success.
type VulnerabilitiesResponse struct {
	// Returns all vulnerabilities matching a filter.
	Vulnerabilities []VulnerabilitiesVulnerabilitiesVulnerability `json:"vulnerabilities"`
}

// GetVulnerabilities returns VulnerabilitiesResponse.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *VulnerabilitiesResponse) GetVulnerabilities() []VulnerabilitiesVulnerabilitiesVulnerability {
	return v.Vulnerabilities
}

// VulnerabilitiesVulnerabilitiesVulnerability includes the requested fields of the GraphQL type Vulnerability.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type VulnerabilitiesVulnerabilitiesVulnerability struct {
	AllVulnerabilityTree `json:"-"`
}

// GetId returns VulnerabilitiesVulnerabilitiesVulnerability.Id, and is useful for accessing the field via an interface.
func (v *VulnerabilitiesVulnerabilitiesVulnerability) GetId() string {
	return v.AllVulnerabilityTree.Id
}

// GetType returns VulnerabilitiesVulnerabilitiesVulnerability.Type, and is useful for accessing the field via an interface.
func (v *VulnerabilitiesVulnerabilitiesVulnerability) GetType() string {
	return v.AllVulnerabilityTree.Type
}

// GetVulnerabilityIDs returns VulnerabilitiesVulnerabilitiesVulnerability.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *VulnerabilitiesVulnerabilitiesVulnerability) GetVulnerabilityIDs() []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID {
	return v.AllVulnerabilityTree.VulnerabilityIDs
}

func (v *VulnerabilitiesVulnerabilitiesVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VulnerabilitiesVulnerabilitiesVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.VulnerabilitiesVulnerabilitiesVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnerabilityTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVulnerabilitiesVulnerabilitiesVulnerability struct {
	Id string `json:"id"`

	Type string `json:"type"`

	VulnerabilityIDs []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

func (v *VulnerabilitiesVulnerabilitiesVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VulnerabilitiesVulnerabilitiesVulnerability) __premarshalJSON() (*__premarshalVulnerabilitiesVulnerabilitiesVulnerability, error) {
	var retval __premarshalVulnerabilitiesVulnerabilitiesVulnerability

	retval.Id = v.AllVulnerabilityTree.Id
	retval.Type = v.AllVulnerabilityTree.Type
	retval.VulnerabilityIDs = v.AllVulnerabilityTree.VulnerabilityIDs
	return &retval, nil
}

// VulnInputSpec specifies a vulnerability for mutations.
//
// This is different than VulnSpec because we want to encode mandatory fields:
// type and vulnerabilityID.
type VulnerabilityInputSpec struct {
	Type            string `json:"type"`
	VulnerabilityID string `json:"vulnerabilityID"`
}

// GetType returns VulnerabilityInputSpec.Type, and is useful for accessing the field via an interface.
func (v *VulnerabilityInputSpec) GetType() string { return v.Type }

// GetVulnerabilityID returns VulnerabilityInputSpec.VulnerabilityID, and is useful for accessing the field via an interface.
func (v *VulnerabilityInputSpec) GetVulnerabilityID() string { return v.VulnerabilityID }

// VulnerabilityListResponse is returned by VulnerabilityList on success.
type VulnerabilityListResponse struct {
	// Returns a paginated results via VulnerabilityConnection
	VulnerabilityList *VulnerabilityListVulnerabilityListVulnerabilityConnection `json:"vulnerabilityList"`
}

// GetVulnerabilityList returns VulnerabilityListResponse.VulnerabilityList, and is useful for accessing the field via an interface.
func (v *VulnerabilityListResponse) GetVulnerabilityList() *VulnerabilityListVulnerabilityListVulnerabilityConnection {
	return v.VulnerabilityList
}

// VulnerabilityListVulnerabilityListVulnerabilityConnection includes the requested fields of the GraphQL type VulnerabilityConnection.
// The GraphQL type's documentation follows.
//
// VulnerabilityConnection returns the paginated results for Vulnerability.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the VulnerabilityEdge which contains the current cursor
// and the Vulnerability node itself
type VulnerabilityListVulnerabilityListVulnerabilityConnection struct {
	TotalCount int                                                                               `json:"totalCount"`
	Edges      []VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdge `json:"edges"`
	PageInfo   VulnerabilityListVulnerabilityListVulnerabilityConnectionPageInfo                 `json:"pageInfo"`
}

// GetTotalCount returns VulnerabilityListVulnerabilityListVulnerabilityConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns VulnerabilityListVulnerabilityListVulnerabilityConnection.Edges, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnection) GetEdges() []VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdge {
	return v.Edges
}

// GetPageInfo returns VulnerabilityListVulnerabilityListVulnerabilityConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnection) GetPageInfo() VulnerabilityListVulnerabilityListVulnerabilityConnectionPageInfo {
	return v.PageInfo
}

// VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdge includes the requested fields of the GraphQL type VulnerabilityEdge.
// The GraphQL type's documentation follows.
//
// VulnerabilityEdge contains the cursor for the resulting node and
// the Vulnerability node itself.
type VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdge struct {
	Cursor string                                                                                           `json:"cursor"`
	Node   VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability `json:"node"`
}

// GetCursor returns VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdge.Cursor, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdge.Node, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdge) GetNode() VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability {
	return v.Node
}

// VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability includes the requested fields of the GraphQL type Vulnerability.
// The GraphQL type's documentation follows.
//
// Vulnerability represents the root of the vulnerability trie/tree.
//
// We map vulnerability information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type and a vulnerability ID. This allows for generic
// representation of the various vulnerabilities and does not limit to just cve, ghsa or osv.
// This would be in the general format: vuln://<general-type>/<vuln-id>
//
// Examples:
//
// CVE, using path separator: vuln://cve/cve-2023-20753
// OSV, representing its knowledge of a GHSA: vuln://osv/ghsa-205hk
// Random vendor: vuln://snyk/sn-whatever
// NoVuln: vuln://novuln/
//
// This node represents the type part of the trie path. It is used to represent
// the specific type of the vulnerability: cve, ghsa, osv or some other vendor specific
//
// Since this node is at the root of the vulnerability trie, it is named Vulnerability, not
// VulnerabilityType.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan. It will have the type "novuln" and contain an empty string
// for vulnerabilityID
//
// The resolvers will enforce that both the type and vulnerability IDs are lower case.
type VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability struct {
	AllVulnerabilityTree `json:"-"`
}

// GetId returns VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability.Id, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability) GetId() string {
	return v.AllVulnerabilityTree.Id
}

// GetType returns VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability.Type, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability) GetType() string {
	return v.AllVulnerabilityTree.Type
}

// GetVulnerabilityIDs returns VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability.VulnerabilityIDs, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability) GetVulnerabilityIDs() []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID {
	return v.AllVulnerabilityTree.VulnerabilityIDs
}

func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnerabilityTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability struct {
	Id string `json:"id"`

	Type string `json:"type"`

	VulnerabilityIDs []AllVulnerabilityTreeVulnerabilityIDsVulnerabilityID `json:"vulnerabilityIDs"`
}

func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability) __premarshalJSON() (*__premarshalVulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability, error) {
	var retval __premarshalVulnerabilityListVulnerabilityListVulnerabilityConnectionEdgesVulnerabilityEdgeNodeVulnerability

	retval.Id = v.AllVulnerabilityTree.Id
	retval.Type = v.AllVulnerabilityTree.Type
	retval.VulnerabilityIDs = v.AllVulnerabilityTree.VulnerabilityIDs
	return &retval, nil
}

// VulnerabilityListVulnerabilityListVulnerabilityConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type VulnerabilityListVulnerabilityListVulnerabilityConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns VulnerabilityListVulnerabilityListVulnerabilityConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns VulnerabilityListVulnerabilityListVulnerabilityConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns VulnerabilityListVulnerabilityListVulnerabilityConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *VulnerabilityListVulnerabilityListVulnerabilityConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// VulnerabilityMetadataInputSpec represents the mutation input to ingest a vulnerability metadata.
type VulnerabilityMetadataInputSpec struct {
	ScoreType   VulnerabilityScoreType `json:"scoreType"`
	ScoreValue  float64                `json:"scoreValue"`
	Timestamp   time.Time              `json:"timestamp"`
	Origin      string                 `json:"origin"`
	Collector   string                 `json:"collector"`
	DocumentRef string                 `json:"documentRef"`
}

// GetScoreType returns VulnerabilityMetadataInputSpec.ScoreType, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataInputSpec) GetScoreType() VulnerabilityScoreType { return v.ScoreType }

// GetScoreValue returns VulnerabilityMetadataInputSpec.ScoreValue, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataInputSpec) GetScoreValue() float64 { return v.ScoreValue }

// GetTimestamp returns VulnerabilityMetadataInputSpec.Timestamp, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataInputSpec) GetTimestamp() time.Time { return v.Timestamp }

// GetOrigin returns VulnerabilityMetadataInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns VulnerabilityMetadataInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataInputSpec) GetCollector() string { return v.Collector }

// GetDocumentRef returns VulnerabilityMetadataInputSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataInputSpec) GetDocumentRef() string { return v.DocumentRef }

// VulnerabilityMetadataListResponse is returned by VulnerabilityMetadataList on success.
type VulnerabilityMetadataListResponse struct {
	// Returns a paginated results via VulnerabilityMetadataConnection
	VulnerabilityMetadataList *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnection `json:"vulnerabilityMetadataList"`
}

// GetVulnerabilityMetadataList returns VulnerabilityMetadataListResponse.VulnerabilityMetadataList, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListResponse) GetVulnerabilityMetadataList() *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnection {
	return v.VulnerabilityMetadataList
}

// VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnection includes the requested fields of the GraphQL type VulnerabilityMetadataConnection.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetadataConnection returns the paginated results for VulnerabilityMetadata.
//
// totalCount is the total number of results returned.
//
// pageInfo provides information to the client if there is
// a next page of results and the starting and
// ending cursor for the current set.
//
// edges contains the VulnerabilityMetadataEdge which contains the current cursor
// and the VulnerabilityMetadata node itself
type VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnection struct {
	TotalCount int                                                                                                               `json:"totalCount"`
	Edges      []VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdge `json:"edges"`
	PageInfo   VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionPageInfo                         `json:"pageInfo"`
}

// GetTotalCount returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnection.Edges, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnection) GetEdges() []VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdge {
	return v.Edges
}

// GetPageInfo returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnection) GetPageInfo() VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionPageInfo {
	return v.PageInfo
}

// VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdge includes the requested fields of the GraphQL type VulnerabilityMetadataEdge.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetadataEdge contains the cursor for the resulting node and
// the VulnerabilityMetadata node itself.
type VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdge struct {
	Cursor string                                                                                                                                   `json:"cursor"`
	Node   VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata `json:"node"`
}

// GetCursor returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdge.Cursor, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdge.Node, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdge) GetNode() VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata {
	return v.Node
}

// VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata includes the requested fields of the GraphQL type VulnerabilityMetadata.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetadata is an attestation that a vulnerability has a related score
// associated with it.
//
// The intent of this evidence tree predicate is to allow extensibility of vulnerability
// score (one-to-one mapping) with a specific vulnerability ID.
//
// A vulnerability ID can have a one-to-many relationship with the VulnerabilityMetadata
// node as a vulnerability ID can have multiple scores (in various frameworks).
//
// Examples:
//
// scoreType: EPSSv1
// scoreValue: 0.960760000
//
// scoreType: CVSSv2
// scoreValue: 5.0
//
// scoreType: CVSSv3
// scoreValue: 7.5
//
// The timestamp is used to determine when the score was evaluated for the specific vulnerability.
type VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata struct {
	AllVulnMetadataTree `json:"-"`
}

// GetId returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata.Id, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata) GetId() string {
	return v.AllVulnMetadataTree.Id
}

// GetVulnerability returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata.Vulnerability, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata) GetVulnerability() AllVulnMetadataTreeVulnerability {
	return v.AllVulnMetadataTree.Vulnerability
}

// GetScoreType returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata.ScoreType, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata) GetScoreType() VulnerabilityScoreType {
	return v.AllVulnMetadataTree.ScoreType
}

// GetScoreValue returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata.ScoreValue, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata) GetScoreValue() float64 {
	return v.AllVulnMetadataTree.ScoreValue
}

// GetTimestamp returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata) GetTimestamp() time.Time {
	return v.AllVulnMetadataTree.Timestamp
}

// GetOrigin returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata.Origin, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata) GetOrigin() string {
	return v.AllVulnMetadataTree.Origin
}

// GetCollector returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata.Collector, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata) GetCollector() string {
	return v.AllVulnMetadataTree.Collector
}

func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnMetadataTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata struct {
	Id string `json:"id"`

	Vulnerability AllVulnMetadataTreeVulnerability `json:"vulnerability"`

	ScoreType VulnerabilityScoreType `json:"scoreType"`

	ScoreValue float64 `json:"scoreValue"`

	Timestamp time.Time `json:"timestamp"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata) __premarshalJSON() (*__premarshalVulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata, error) {
	var retval __premarshalVulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionEdgesVulnerabilityMetadataEdgeNodeVulnerabilityMetadata

	retval.Id = v.AllVulnMetadataTree.Id
	retval.Vulnerability = v.AllVulnMetadataTree.Vulnerability
	retval.ScoreType = v.AllVulnMetadataTree.ScoreType
	retval.ScoreValue = v.AllVulnMetadataTree.ScoreValue
	retval.Timestamp = v.AllVulnMetadataTree.Timestamp
	retval.Origin = v.AllVulnMetadataTree.Origin
	retval.Collector = v.AllVulnMetadataTree.Collector
	return &retval, nil
}

// VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo serves the client information about the paginated query results.
//
// hasNextPage is true when there are results to be returned.
//
// hasPreviousPage is true when there is a previous page to return to.
//
// startCursor is the ID where the query started from.
//
// endCursor is where the query ended.
type VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

// GetStartCursor returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionPageInfo) GetStartCursor() *string {
	return v.StartCursor
}

// GetEndCursor returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionPageInfo) GetEndCursor() *string {
	return v.EndCursor
}

// GetHasNextPage returns VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataListVulnerabilityMetadataListVulnerabilityMetadataConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// VulnerabilityMetadataResponse is returned by VulnerabilityMetadata on success.
type VulnerabilityMetadataResponse struct {
	// Returns all vulnerabilityMetadata attestations matching a filter.
	VulnerabilityMetadata []VulnerabilityMetadataVulnerabilityMetadata `json:"vulnerabilityMetadata"`
}

// GetVulnerabilityMetadata returns VulnerabilityMetadataResponse.VulnerabilityMetadata, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataResponse) GetVulnerabilityMetadata() []VulnerabilityMetadataVulnerabilityMetadata {
	return v.VulnerabilityMetadata
}

// VulnerabilityMetadataSpec allows filtering the list of VulnerabilityMetadata evidence
// to return in a query.
//
// Comparator field is an enum that be set to filter the score and return a
// range that matches. If the comparator is not specified, it will default to equal operation.
//
// Timestamp specified indicates filtering timestamps after the specified time
type VulnerabilityMetadataSpec struct {
	Id            *string                 `json:"id"`
	Vulnerability *VulnerabilitySpec      `json:"vulnerability"`
	ScoreType     *VulnerabilityScoreType `json:"scoreType"`
	ScoreValue    *float64                `json:"scoreValue"`
	Comparator    *Comparator             `json:"comparator"`
	Timestamp     *time.Time              `json:"timestamp"`
	Origin        *string                 `json:"origin"`
	Collector     *string                 `json:"collector"`
	DocumentRef   *string                 `json:"documentRef"`
}

// GetId returns VulnerabilityMetadataSpec.Id, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataSpec) GetId() *string { return v.Id }

// GetVulnerability returns VulnerabilityMetadataSpec.Vulnerability, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataSpec) GetVulnerability() *VulnerabilitySpec { return v.Vulnerability }

// GetScoreType returns VulnerabilityMetadataSpec.ScoreType, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataSpec) GetScoreType() *VulnerabilityScoreType { return v.ScoreType }

// GetScoreValue returns VulnerabilityMetadataSpec.ScoreValue, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataSpec) GetScoreValue() *float64 { return v.ScoreValue }

// GetComparator returns VulnerabilityMetadataSpec.Comparator, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataSpec) GetComparator() *Comparator { return v.Comparator }

// GetTimestamp returns VulnerabilityMetadataSpec.Timestamp, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataSpec) GetTimestamp() *time.Time { return v.Timestamp }

// GetOrigin returns VulnerabilityMetadataSpec.Origin, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns VulnerabilityMetadataSpec.Collector, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataSpec) GetCollector() *string { return v.Collector }

// GetDocumentRef returns VulnerabilityMetadataSpec.DocumentRef, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataSpec) GetDocumentRef() *string { return v.DocumentRef }

// VulnerabilityMetadataVulnerabilityMetadata includes the requested fields of the GraphQL type VulnerabilityMetadata.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetadata is an attestation that a vulnerability has a related score
// associated with it.
//
// The intent of this evidence tree predicate is to allow extensibility of vulnerability
// score (one-to-one mapping) with a specific vulnerability ID.
//
// A vulnerability ID can have a one-to-many relationship with the VulnerabilityMetadata
// node as a vulnerability ID can have multiple scores (in various frameworks).
//
// Examples:
//
// scoreType: EPSSv1
// scoreValue: 0.960760000
//
// scoreType: CVSSv2
// scoreValue: 5.0
//
// scoreType: CVSSv3
// scoreValue: 7.5
//
// The timestamp is used to determine when the score was evaluated for the specific vulnerability.
type VulnerabilityMetadataVulnerabilityMetadata struct {
	AllVulnMetadataTree `json:"-"`
}

// GetId returns VulnerabilityMetadataVulnerabilityMetadata.Id, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataVulnerabilityMetadata) GetId() string { return v.AllVulnMetadataTree.Id }

// GetVulnerability returns VulnerabilityMetadataVulnerabilityMetadata.Vulnerability, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataVulnerabilityMetadata) GetVulnerability() AllVulnMetadataTreeVulnerability {
	return v.AllVulnMetadataTree.Vulnerability
}

// GetScoreType returns VulnerabilityMetadataVulnerabilityMetadata.ScoreType, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataVulnerabilityMetadata) GetScoreType() VulnerabilityScoreType {
	return v.AllVulnMetadataTree.ScoreType
}

// GetScoreValue returns VulnerabilityMetadataVulnerabilityMetadata.ScoreValue, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataVulnerabilityMetadata) GetScoreValue() float64 {
	return v.AllVulnMetadataTree.ScoreValue
}

// GetTimestamp returns VulnerabilityMetadataVulnerabilityMetadata.Timestamp, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataVulnerabilityMetadata) GetTimestamp() time.Time {
	return v.AllVulnMetadataTree.Timestamp
}

// GetOrigin returns VulnerabilityMetadataVulnerabilityMetadata.Origin, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataVulnerabilityMetadata) GetOrigin() string {
	return v.AllVulnMetadataTree.Origin
}

// GetCollector returns VulnerabilityMetadataVulnerabilityMetadata.Collector, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetadataVulnerabilityMetadata) GetCollector() string {
	return v.AllVulnMetadataTree.Collector
}

func (v *VulnerabilityMetadataVulnerabilityMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VulnerabilityMetadataVulnerabilityMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.VulnerabilityMetadataVulnerabilityMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllVulnMetadataTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVulnerabilityMetadataVulnerabilityMetadata struct {
	Id string `json:"id"`

	Vulnerability AllVulnMetadataTreeVulnerability `json:"vulnerability"`

	ScoreType VulnerabilityScoreType `json:"scoreType"`

	ScoreValue float64 `json:"scoreValue"`

	Timestamp time.Time `json:"timestamp"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VulnerabilityMetadataVulnerabilityMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VulnerabilityMetadataVulnerabilityMetadata) __premarshalJSON() (*__premarshalVulnerabilityMetadataVulnerabilityMetadata, error) {
	var retval __premarshalVulnerabilityMetadataVulnerabilityMetadata

	retval.Id = v.AllVulnMetadataTree.Id
	retval.Vulnerability = v.AllVulnMetadataTree.Vulnerability
	retval.ScoreType = v.AllVulnMetadataTree.ScoreType
	retval.ScoreValue = v.AllVulnMetadataTree.ScoreValue
	retval.Timestamp = v.AllVulnMetadataTree.Timestamp
	retval.Origin = v.AllVulnMetadataTree.Origin
	retval.Collector = v.AllVulnMetadataTree.Collector
	return &retval, nil
}

// Records the type of the score being captured by the score node
type VulnerabilityScoreType string

const (
	VulnerabilityScoreTypeCvssv2  VulnerabilityScoreType = "CVSSv2"
	VulnerabilityScoreTypeCvssv3  VulnerabilityScoreType = "CVSSv3"
	VulnerabilityScoreTypeEpssv1  VulnerabilityScoreType = "EPSSv1"
	VulnerabilityScoreTypeEpssv2  VulnerabilityScoreType = "EPSSv2"
	VulnerabilityScoreTypeCvssv31 VulnerabilityScoreType = "CVSSv31"
	VulnerabilityScoreTypeCvssv4  VulnerabilityScoreType = "CVSSv4"
	VulnerabilityScoreTypeOwasp   VulnerabilityScoreType = "OWASP"
	VulnerabilityScoreTypeSsvc    VulnerabilityScoreType = "SSVC"
)

// VulnerabilitySpec allows filtering the list of vulnerabilities to return in a query.
//
// Use null to match on all values at that level.
// For example, to get all vulnerabilities in GUAC backend, use a VulnSpec
// where every field is null.
//
// Setting the noVuln boolean true will ignore the other inputs for type and vulnerabilityID.
// Setting noVuln to true means retrieving only nodes where the type of the vulnerability is "novuln"
// and the it has an empty string for vulnerabilityID. Setting it to false filters out all results that are "novuln".
// Setting one of the other fields and omitting the noVuln means retrieving vulnerabilities for the corresponding
// type and vulnerabilityID. Omission of noVuln field will return all vulnerabilities and novuln.
type VulnerabilitySpec struct {
	Id              *string `json:"id"`
	Type            *string `json:"type"`
	VulnerabilityID *string `json:"vulnerabilityID"`
	NoVuln          *bool   `json:"noVuln"`
}

// GetId returns VulnerabilitySpec.Id, and is useful for accessing the field via an interface.
func (v *VulnerabilitySpec) GetId() *string { return v.Id }

// GetType returns VulnerabilitySpec.Type, and is useful for accessing the field via an interface.
func (v *VulnerabilitySpec) GetType() *string { return v.Type }

// GetVulnerabilityID returns VulnerabilitySpec.VulnerabilityID, and is useful for accessing the field via an interface.
func (v *VulnerabilitySpec) GetVulnerabilityID() *string { return v.VulnerabilityID }

// GetNoVuln returns VulnerabilitySpec.NoVuln, and is useful for accessing the field via an interface.
func (v *VulnerabilitySpec) GetNoVuln() *bool { return v.NoVuln }

// __ArtifactsInput is used internally by genqlient
type __ArtifactsInput struct {
	Filter ArtifactSpec `json:"filter"`
}

// GetFilter returns __ArtifactsInput.Filter, and is useful for accessing the field via an interface.
func (v *__ArtifactsInput) GetFilter() ArtifactSpec { return v.Filter }

// __ArtifactsListInput is used internally by genqlient
type __ArtifactsListInput struct {
	Filter ArtifactSpec `json:"filter"`
	After  *string      `json:"after"`
	First  *int         `json:"first"`
}

// GetFilter returns __ArtifactsListInput.Filter, and is useful for accessing the field via an interface.
func (v *__ArtifactsListInput) GetFilter() ArtifactSpec { return v.Filter }

// GetAfter returns __ArtifactsListInput.After, and is useful for accessing the field via an interface.
func (v *__ArtifactsListInput) GetAfter() *string { return v.After }

// GetFirst returns __ArtifactsListInput.First, and is useful for accessing the field via an interface.
func (v *__ArtifactsListInput) GetFirst() *int { return v.First }

// __BuildersInput is used internally by genqlient
type __BuildersInput struct {
	Filter BuilderSpec `json:"filter"`
}

// GetFilter returns __BuildersInput.Filter, and is useful for accessing the field via an interface.
func (v *__BuildersInput) GetFilter() BuilderSpec { return v.Filter }

// __BuildersListInput is used internally by genqlient
type __BuildersListInput struct {
	Filter BuilderSpec `json:"filter"`
	After  *string     `json:"after"`
	First  *int        `json:"first"`
}

// GetFilter returns __BuildersListInput.Filter, and is useful for accessing the field via an interface.
func (v *__BuildersListInput) GetFilter() BuilderSpec { return v.Filter }

// GetAfter returns __BuildersListInput.After, and is useful for accessing the field via an interface.
func (v *__BuildersListInput) GetAfter() *string { return v.After }

// GetFirst returns __BuildersListInput.First, and is useful for accessing the field via an interface.
func (v *__BuildersListInput) GetFirst() *int { return v.First }

// __CertifyBadInput is used internally by genqlient
type __CertifyBadInput struct {
	Filter CertifyBadSpec `json:"filter"`
}

// GetFilter returns __CertifyBadInput.Filter, and is useful for accessing the field via an interface.
func (v *__CertifyBadInput) GetFilter() CertifyBadSpec { return v.Filter }

// __CertifyBadListInput is used internally by genqlient
type __CertifyBadListInput struct {
	Filter CertifyBadSpec `json:"filter"`
	After  *string        `json:"after"`
	First  *int           `json:"first"`
}

// GetFilter returns __CertifyBadListInput.Filter, and is useful for accessing the field via an interface.
func (v *__CertifyBadListInput) GetFilter() CertifyBadSpec { return v.Filter }

// GetAfter returns __CertifyBadListInput.After, and is useful for accessing the field via an interface.
func (v *__CertifyBadListInput) GetAfter() *string { return v.After }

// GetFirst returns __CertifyBadListInput.First, and is useful for accessing the field via an interface.
func (v *__CertifyBadListInput) GetFirst() *int { return v.First }

// __CertifyGoodInput is used internally by genqlient
type __CertifyGoodInput struct {
	Filter CertifyGoodSpec `json:"filter"`
}

// GetFilter returns __CertifyGoodInput.Filter, and is useful for accessing the field via an interface.
func (v *__CertifyGoodInput) GetFilter() CertifyGoodSpec { return v.Filter }

// __CertifyGoodListInput is used internally by genqlient
type __CertifyGoodListInput struct {
	Filter CertifyGoodSpec `json:"filter"`
	After  *string         `json:"after"`
	First  *int            `json:"first"`
}

// GetFilter returns __CertifyGoodListInput.Filter, and is useful for accessing the field via an interface.
func (v *__CertifyGoodListInput) GetFilter() CertifyGoodSpec { return v.Filter }

// GetAfter returns __CertifyGoodListInput.After, and is useful for accessing the field via an interface.
func (v *__CertifyGoodListInput) GetAfter() *string { return v.After }

// GetFirst returns __CertifyGoodListInput.First, and is useful for accessing the field via an interface.
func (v *__CertifyGoodListInput) GetFirst() *int { return v.First }

// __CertifyLegalInput is used internally by genqlient
type __CertifyLegalInput struct {
	Filter CertifyLegalSpec `json:"filter"`
}

// GetFilter returns __CertifyLegalInput.Filter, and is useful for accessing the field via an interface.
func (v *__CertifyLegalInput) GetFilter() CertifyLegalSpec { return v.Filter }

// __CertifyLegalListInput is used internally by genqlient
type __CertifyLegalListInput struct {
	Filter CertifyLegalSpec `json:"filter"`
	After  *string          `json:"after"`
	First  *int             `json:"first"`
}

// GetFilter returns __CertifyLegalListInput.Filter, and is useful for accessing the field via an interface.
func (v *__CertifyLegalListInput) GetFilter() CertifyLegalSpec { return v.Filter }

// GetAfter returns __CertifyLegalListInput.After, and is useful for accessing the field via an interface.
func (v *__CertifyLegalListInput) GetAfter() *string { return v.After }

// GetFirst returns __CertifyLegalListInput.First, and is useful for accessing the field via an interface.
func (v *__CertifyLegalListInput) GetFirst() *int { return v.First }

// __CertifyVulnInput is used internally by genqlient
type __CertifyVulnInput struct {
	Filter CertifyVulnSpec `json:"filter"`
}

// GetFilter returns __CertifyVulnInput.Filter, and is useful for accessing the field via an interface.
func (v *__CertifyVulnInput) GetFilter() CertifyVulnSpec { return v.Filter }

// __CertifyVulnListInput is used internally by genqlient
type __CertifyVulnListInput struct {
	Filter CertifyVulnSpec `json:"filter"`
	After  *string         `json:"after"`
	First  *int            `json:"first"`
}

// GetFilter returns __CertifyVulnListInput.Filter, and is useful for accessing the field via an interface.
func (v *__CertifyVulnListInput) GetFilter() CertifyVulnSpec { return v.Filter }

// GetAfter returns __CertifyVulnListInput.After, and is useful for accessing the field via an interface.
func (v *__CertifyVulnListInput) GetAfter() *string { return v.After }

// GetFirst returns __CertifyVulnListInput.First, and is useful for accessing the field via an interface.
func (v *__CertifyVulnListInput) GetFirst() *int { return v.First }

// __DependenciesInput is used internally by genqlient
type __DependenciesInput struct {
	Filter IsDependencySpec `json:"filter"`
}

// GetFilter returns __DependenciesInput.Filter, and is useful for accessing the field via an interface.
func (v *__DependenciesInput) GetFilter() IsDependencySpec { return v.Filter }

// __DependencyListInput is used internally by genqlient
type __DependencyListInput struct {
	Filter IsDependencySpec `json:"filter"`
	After  *string          `json:"after"`
	First  *int             `json:"first"`
}

// GetFilter returns __DependencyListInput.Filter, and is useful for accessing the field via an interface.
func (v *__DependencyListInput) GetFilter() IsDependencySpec { return v.Filter }

// GetAfter returns __DependencyListInput.After, and is useful for accessing the field via an interface.
func (v *__DependencyListInput) GetAfter() *string { return v.After }

// GetFirst returns __DependencyListInput.First, and is useful for accessing the field via an interface.
func (v *__DependencyListInput) GetFirst() *int { return v.First }

// __FindSoftwareInput is used internally by genqlient
type __FindSoftwareInput struct {
	SearchText string `json:"searchText"`
}

// GetSearchText returns __FindSoftwareInput.SearchText, and is useful for accessing the field via an interface.
func (v *__FindSoftwareInput) GetSearchText() string { return v.SearchText }

// __HasMetadataInput is used internally by genqlient
type __HasMetadataInput struct {
	Filter HasMetadataSpec `json:"filter"`
}

// GetFilter returns __HasMetadataInput.Filter, and is useful for accessing the field via an interface.
func (v *__HasMetadataInput) GetFilter() HasMetadataSpec { return v.Filter }

// __HasMetadataListInput is used internally by genqlient
type __HasMetadataListInput struct {
	Filter HasMetadataSpec `json:"filter"`
	After  *string         `json:"after"`
	First  *int            `json:"first"`
}

// GetFilter returns __HasMetadataListInput.Filter, and is useful for accessing the field via an interface.
func (v *__HasMetadataListInput) GetFilter() HasMetadataSpec { return v.Filter }

// GetAfter returns __HasMetadataListInput.After, and is useful for accessing the field via an interface.
func (v *__HasMetadataListInput) GetAfter() *string { return v.After }

// GetFirst returns __HasMetadataListInput.First, and is useful for accessing the field via an interface.
func (v *__HasMetadataListInput) GetFirst() *int { return v.First }

// __HasSBOMListInput is used internally by genqlient
type __HasSBOMListInput struct {
	Filter HasSBOMSpec `json:"filter"`
	After  *string     `json:"after"`
	First  *int        `json:"first"`
}

// GetFilter returns __HasSBOMListInput.Filter, and is useful for accessing the field via an interface.
func (v *__HasSBOMListInput) GetFilter() HasSBOMSpec { return v.Filter }

// GetAfter returns __HasSBOMListInput.After, and is useful for accessing the field via an interface.
func (v *__HasSBOMListInput) GetAfter() *string { return v.After }

// GetFirst returns __HasSBOMListInput.First, and is useful for accessing the field via an interface.
func (v *__HasSBOMListInput) GetFirst() *int { return v.First }

// __HasSBOMsInput is used internally by genqlient
type __HasSBOMsInput struct {
	Filter HasSBOMSpec `json:"filter"`
}

// GetFilter returns __HasSBOMsInput.Filter, and is useful for accessing the field via an interface.
func (v *__HasSBOMsInput) GetFilter() HasSBOMSpec { return v.Filter }

// __HasSLSAInput is used internally by genqlient
type __HasSLSAInput struct {
	Filter HasSLSASpec `json:"filter"`
}

// GetFilter returns __HasSLSAInput.Filter, and is useful for accessing the field via an interface.
func (v *__HasSLSAInput) GetFilter() HasSLSASpec { return v.Filter }

// __HasSLSAListInput is used internally by genqlient
type __HasSLSAListInput struct {
	Filter HasSLSASpec `json:"filter"`
	After  *string     `json:"after"`
	First  *int        `json:"first"`
}

// GetFilter returns __HasSLSAListInput.Filter, and is useful for accessing the field via an interface.
func (v *__HasSLSAListInput) GetFilter() HasSLSASpec { return v.Filter }

// GetAfter returns __HasSLSAListInput.After, and is useful for accessing the field via an interface.
func (v *__HasSLSAListInput) GetAfter() *string { return v.After }

// GetFirst returns __HasSLSAListInput.First, and is useful for accessing the field via an interface.
func (v *__HasSLSAListInput) GetFirst() *int { return v.First }

// __HasSourceAtInput is used internally by genqlient
type __HasSourceAtInput struct {
	Filter HasSourceAtSpec `json:"filter"`
}

// GetFilter returns __HasSourceAtInput.Filter, and is useful for accessing the field via an interface.
func (v *__HasSourceAtInput) GetFilter() HasSourceAtSpec { return v.Filter }

// __HasSourceAtListInput is used internally by genqlient
type __HasSourceAtListInput struct {
	Filter HasSourceAtSpec `json:"filter"`
	After  *string         `json:"after"`
	First  *int            `json:"first"`
}

// GetFilter returns __HasSourceAtListInput.Filter, and is useful for accessing the field via an interface.
func (v *__HasSourceAtListInput) GetFilter() HasSourceAtSpec { return v.Filter }

// GetAfter returns __HasSourceAtListInput.After, and is useful for accessing the field via an interface.
func (v *__HasSourceAtListInput) GetAfter() *string { return v.After }

// GetFirst returns __HasSourceAtListInput.First, and is useful for accessing the field via an interface.
func (v *__HasSourceAtListInput) GetFirst() *int { return v.First }

// __HashEqualListInput is used internally by genqlient
type __HashEqualListInput struct {
	Filter HashEqualSpec `json:"filter"`
	After  *string       `json:"after"`
	First  *int          `json:"first"`
}

// GetFilter returns __HashEqualListInput.Filter, and is useful for accessing the field via an interface.
func (v *__HashEqualListInput) GetFilter() HashEqualSpec { return v.Filter }

// GetAfter returns __HashEqualListInput.After, and is useful for accessing the field via an interface.
func (v *__HashEqualListInput) GetAfter() *string { return v.After }

// GetFirst returns __HashEqualListInput.First, and is useful for accessing the field via an interface.
func (v *__HashEqualListInput) GetFirst() *int { return v.First }

// __HashEqualsInput is used internally by genqlient
type __HashEqualsInput struct {
	Filter HashEqualSpec `json:"filter"`
}

// GetFilter returns __HashEqualsInput.Filter, and is useful for accessing the field via an interface.
func (v *__HashEqualsInput) GetFilter() HashEqualSpec { return v.Filter }

// __IngestArtifactInput is used internally by genqlient
type __IngestArtifactInput struct {
	Artifact IDorArtifactInput `json:"artifact"`
}

// GetArtifact returns __IngestArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestArtifactInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// __IngestArtifactsInput is used internally by genqlient
type __IngestArtifactsInput struct {
	Artifacts []IDorArtifactInput `json:"artifacts"`
}

// GetArtifacts returns __IngestArtifactsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestArtifactsInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// __IngestBuilderInput is used internally by genqlient
type __IngestBuilderInput struct {
	Builder IDorBuilderInput `json:"builder"`
}

// GetBuilder returns __IngestBuilderInput.Builder, and is useful for accessing the field via an interface.
func (v *__IngestBuilderInput) GetBuilder() IDorBuilderInput { return v.Builder }

// __IngestBuildersInput is used internally by genqlient
type __IngestBuildersInput struct {
	Builders []IDorBuilderInput `json:"builders"`
}

// GetBuilders returns __IngestBuildersInput.Builders, and is useful for accessing the field via an interface.
func (v *__IngestBuildersInput) GetBuilders() []IDorBuilderInput { return v.Builders }

// __IngestBulkVulnHasMetadataInput is used internally by genqlient
type __IngestBulkVulnHasMetadataInput struct {
	Vulnerabilities           []IDorVulnerabilityInput         `json:"vulnerabilities"`
	VulnerabilityMetadataList []VulnerabilityMetadataInputSpec `json:"vulnerabilityMetadataList"`
}

// GetVulnerabilities returns __IngestBulkVulnHasMetadataInput.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *__IngestBulkVulnHasMetadataInput) GetVulnerabilities() []IDorVulnerabilityInput {
	return v.Vulnerabilities
}

// GetVulnerabilityMetadataList returns __IngestBulkVulnHasMetadataInput.VulnerabilityMetadataList, and is useful for accessing the field via an interface.
func (v *__IngestBulkVulnHasMetadataInput) GetVulnerabilityMetadataList() []VulnerabilityMetadataInputSpec {
	return v.VulnerabilityMetadataList
}

// __IngestCertifyBadArtifactInput is used internally by genqlient
type __IngestCertifyBadArtifactInput struct {
	Artifact   IDorArtifactInput   `json:"artifact"`
	CertifyBad CertifyBadInputSpec `json:"certifyBad"`
}

// GetArtifact returns __IngestCertifyBadArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadArtifactInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// GetCertifyBad returns __IngestCertifyBadArtifactInput.CertifyBad, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadArtifactInput) GetCertifyBad() CertifyBadInputSpec { return v.CertifyBad }

// __IngestCertifyBadArtifactsInput is used internally by genqlient
type __IngestCertifyBadArtifactsInput struct {
	Artifacts   []IDorArtifactInput   `json:"artifacts"`
	CertifyBads []CertifyBadInputSpec `json:"certifyBads"`
}

// GetArtifacts returns __IngestCertifyBadArtifactsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadArtifactsInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// GetCertifyBads returns __IngestCertifyBadArtifactsInput.CertifyBads, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadArtifactsInput) GetCertifyBads() []CertifyBadInputSpec {
	return v.CertifyBads
}

// __IngestCertifyBadPkgInput is used internally by genqlient
type __IngestCertifyBadPkgInput struct {
	Pkg          IDorPkgInput        `json:"pkg"`
	PkgMatchType MatchFlags          `json:"pkgMatchType"`
	CertifyBad   CertifyBadInputSpec `json:"certifyBad"`
}

// GetPkg returns __IngestCertifyBadPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadPkgInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetPkgMatchType returns __IngestCertifyBadPkgInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadPkgInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetCertifyBad returns __IngestCertifyBadPkgInput.CertifyBad, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadPkgInput) GetCertifyBad() CertifyBadInputSpec { return v.CertifyBad }

// __IngestCertifyBadPkgsInput is used internally by genqlient
type __IngestCertifyBadPkgsInput struct {
	Pkgs         []IDorPkgInput        `json:"pkgs"`
	PkgMatchType MatchFlags            `json:"pkgMatchType"`
	CertifyBads  []CertifyBadInputSpec `json:"certifyBads"`
}

// GetPkgs returns __IngestCertifyBadPkgsInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadPkgsInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetPkgMatchType returns __IngestCertifyBadPkgsInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadPkgsInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetCertifyBads returns __IngestCertifyBadPkgsInput.CertifyBads, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadPkgsInput) GetCertifyBads() []CertifyBadInputSpec { return v.CertifyBads }

// __IngestCertifyBadSrcInput is used internally by genqlient
type __IngestCertifyBadSrcInput struct {
	Source     IDorSourceInput     `json:"source"`
	CertifyBad CertifyBadInputSpec `json:"certifyBad"`
}

// GetSource returns __IngestCertifyBadSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadSrcInput) GetSource() IDorSourceInput { return v.Source }

// GetCertifyBad returns __IngestCertifyBadSrcInput.CertifyBad, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadSrcInput) GetCertifyBad() CertifyBadInputSpec { return v.CertifyBad }

// __IngestCertifyBadSrcsInput is used internally by genqlient
type __IngestCertifyBadSrcsInput struct {
	Sources     []IDorSourceInput     `json:"sources"`
	CertifyBads []CertifyBadInputSpec `json:"certifyBads"`
}

// GetSources returns __IngestCertifyBadSrcsInput.Sources, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadSrcsInput) GetSources() []IDorSourceInput { return v.Sources }

// GetCertifyBads returns __IngestCertifyBadSrcsInput.CertifyBads, and is useful for accessing the field via an interface.
func (v *__IngestCertifyBadSrcsInput) GetCertifyBads() []CertifyBadInputSpec { return v.CertifyBads }

// __IngestCertifyGoodArtifactInput is used internally by genqlient
type __IngestCertifyGoodArtifactInput struct {
	Artifact    IDorArtifactInput    `json:"artifact"`
	CertifyGood CertifyGoodInputSpec `json:"certifyGood"`
}

// GetArtifact returns __IngestCertifyGoodArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodArtifactInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// GetCertifyGood returns __IngestCertifyGoodArtifactInput.CertifyGood, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodArtifactInput) GetCertifyGood() CertifyGoodInputSpec {
	return v.CertifyGood
}

// __IngestCertifyGoodArtifactsInput is used internally by genqlient
type __IngestCertifyGoodArtifactsInput struct {
	Artifacts    []IDorArtifactInput    `json:"artifacts"`
	CertifyGoods []CertifyGoodInputSpec `json:"certifyGoods"`
}

// GetArtifacts returns __IngestCertifyGoodArtifactsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodArtifactsInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// GetCertifyGoods returns __IngestCertifyGoodArtifactsInput.CertifyGoods, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodArtifactsInput) GetCertifyGoods() []CertifyGoodInputSpec {
	return v.CertifyGoods
}

// __IngestCertifyGoodPkgInput is used internally by genqlient
type __IngestCertifyGoodPkgInput struct {
	Pkg          IDorPkgInput         `json:"pkg"`
	PkgMatchType MatchFlags           `json:"pkgMatchType"`
	CertifyGood  CertifyGoodInputSpec `json:"certifyGood"`
}

// GetPkg returns __IngestCertifyGoodPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodPkgInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetPkgMatchType returns __IngestCertifyGoodPkgInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodPkgInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetCertifyGood returns __IngestCertifyGoodPkgInput.CertifyGood, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodPkgInput) GetCertifyGood() CertifyGoodInputSpec { return v.CertifyGood }

// __IngestCertifyGoodPkgsInput is used internally by genqlient
type __IngestCertifyGoodPkgsInput struct {
	Pkgs         []IDorPkgInput         `json:"pkgs"`
	PkgMatchType MatchFlags             `json:"pkgMatchType"`
	CertifyGoods []CertifyGoodInputSpec `json:"certifyGoods"`
}

// GetPkgs returns __IngestCertifyGoodPkgsInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodPkgsInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetPkgMatchType returns __IngestCertifyGoodPkgsInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodPkgsInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetCertifyGoods returns __IngestCertifyGoodPkgsInput.CertifyGoods, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodPkgsInput) GetCertifyGoods() []CertifyGoodInputSpec {
	return v.CertifyGoods
}

// __IngestCertifyGoodSrcInput is used internally by genqlient
type __IngestCertifyGoodSrcInput struct {
	Source      IDorSourceInput      `json:"source"`
	CertifyGood CertifyGoodInputSpec `json:"certifyGood"`
}

// GetSource returns __IngestCertifyGoodSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodSrcInput) GetSource() IDorSourceInput { return v.Source }

// GetCertifyGood returns __IngestCertifyGoodSrcInput.CertifyGood, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodSrcInput) GetCertifyGood() CertifyGoodInputSpec { return v.CertifyGood }

// __IngestCertifyGoodSrcsInput is used internally by genqlient
type __IngestCertifyGoodSrcsInput struct {
	Sources      []IDorSourceInput      `json:"sources"`
	CertifyGoods []CertifyGoodInputSpec `json:"certifyGoods"`
}

// GetSources returns __IngestCertifyGoodSrcsInput.Sources, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodSrcsInput) GetSources() []IDorSourceInput { return v.Sources }

// GetCertifyGoods returns __IngestCertifyGoodSrcsInput.CertifyGoods, and is useful for accessing the field via an interface.
func (v *__IngestCertifyGoodSrcsInput) GetCertifyGoods() []CertifyGoodInputSpec {
	return v.CertifyGoods
}

// __IngestCertifyLegalPkgInput is used internally by genqlient
type __IngestCertifyLegalPkgInput struct {
	Pkg                IDorPkgInput          `json:"pkg"`
	DeclaredLicenses   []IDorLicenseInput    `json:"declaredLicenses"`
	DiscoveredLicenses []IDorLicenseInput    `json:"discoveredLicenses"`
	Legal              CertifyLegalInputSpec `json:"legal"`
}

// GetPkg returns __IngestCertifyLegalPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalPkgInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetDeclaredLicenses returns __IngestCertifyLegalPkgInput.DeclaredLicenses, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalPkgInput) GetDeclaredLicenses() []IDorLicenseInput {
	return v.DeclaredLicenses
}

// GetDiscoveredLicenses returns __IngestCertifyLegalPkgInput.DiscoveredLicenses, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalPkgInput) GetDiscoveredLicenses() []IDorLicenseInput {
	return v.DiscoveredLicenses
}

// GetLegal returns __IngestCertifyLegalPkgInput.Legal, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalPkgInput) GetLegal() CertifyLegalInputSpec { return v.Legal }

// __IngestCertifyLegalPkgsInput is used internally by genqlient
type __IngestCertifyLegalPkgsInput struct {
	Pkgs                   []IDorPkgInput          `json:"pkgs"`
	DeclaredLicensesList   [][]IDorLicenseInput    `json:"declaredLicensesList"`
	DiscoveredLicensesList [][]IDorLicenseInput    `json:"discoveredLicensesList"`
	Legals                 []CertifyLegalInputSpec `json:"legals"`
}

// GetPkgs returns __IngestCertifyLegalPkgsInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalPkgsInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetDeclaredLicensesList returns __IngestCertifyLegalPkgsInput.DeclaredLicensesList, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalPkgsInput) GetDeclaredLicensesList() [][]IDorLicenseInput {
	return v.DeclaredLicensesList
}

// GetDiscoveredLicensesList returns __IngestCertifyLegalPkgsInput.DiscoveredLicensesList, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalPkgsInput) GetDiscoveredLicensesList() [][]IDorLicenseInput {
	return v.DiscoveredLicensesList
}

// GetLegals returns __IngestCertifyLegalPkgsInput.Legals, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalPkgsInput) GetLegals() []CertifyLegalInputSpec { return v.Legals }

// __IngestCertifyLegalSrcInput is used internally by genqlient
type __IngestCertifyLegalSrcInput struct {
	Src                IDorSourceInput       `json:"src"`
	DeclaredLicenses   []IDorLicenseInput    `json:"declaredLicenses"`
	DiscoveredLicenses []IDorLicenseInput    `json:"discoveredLicenses"`
	Legal              CertifyLegalInputSpec `json:"legal"`
}

// GetSrc returns __IngestCertifyLegalSrcInput.Src, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalSrcInput) GetSrc() IDorSourceInput { return v.Src }

// GetDeclaredLicenses returns __IngestCertifyLegalSrcInput.DeclaredLicenses, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalSrcInput) GetDeclaredLicenses() []IDorLicenseInput {
	return v.DeclaredLicenses
}

// GetDiscoveredLicenses returns __IngestCertifyLegalSrcInput.DiscoveredLicenses, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalSrcInput) GetDiscoveredLicenses() []IDorLicenseInput {
	return v.DiscoveredLicenses
}

// GetLegal returns __IngestCertifyLegalSrcInput.Legal, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalSrcInput) GetLegal() CertifyLegalInputSpec { return v.Legal }

// __IngestCertifyLegalSrcsInput is used internally by genqlient
type __IngestCertifyLegalSrcsInput struct {
	Srcs                   []IDorSourceInput       `json:"srcs"`
	DeclaredLicensesList   [][]IDorLicenseInput    `json:"declaredLicensesList"`
	DiscoveredLicensesList [][]IDorLicenseInput    `json:"discoveredLicensesList"`
	Legals                 []CertifyLegalInputSpec `json:"legals"`
}

// GetSrcs returns __IngestCertifyLegalSrcsInput.Srcs, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalSrcsInput) GetSrcs() []IDorSourceInput { return v.Srcs }

// GetDeclaredLicensesList returns __IngestCertifyLegalSrcsInput.DeclaredLicensesList, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalSrcsInput) GetDeclaredLicensesList() [][]IDorLicenseInput {
	return v.DeclaredLicensesList
}

// GetDiscoveredLicensesList returns __IngestCertifyLegalSrcsInput.DiscoveredLicensesList, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalSrcsInput) GetDiscoveredLicensesList() [][]IDorLicenseInput {
	return v.DiscoveredLicensesList
}

// GetLegals returns __IngestCertifyLegalSrcsInput.Legals, and is useful for accessing the field via an interface.
func (v *__IngestCertifyLegalSrcsInput) GetLegals() []CertifyLegalInputSpec { return v.Legals }

// __IngestCertifyScorecardInput is used internally by genqlient
type __IngestCertifyScorecardInput struct {
	Source    IDorSourceInput    `json:"source"`
	Scorecard ScorecardInputSpec `json:"scorecard"`
}

// GetSource returns __IngestCertifyScorecardInput.Source, and is useful for accessing the field via an interface.
func (v *__IngestCertifyScorecardInput) GetSource() IDorSourceInput { return v.Source }

// GetScorecard returns __IngestCertifyScorecardInput.Scorecard, and is useful for accessing the field via an interface.
func (v *__IngestCertifyScorecardInput) GetScorecard() ScorecardInputSpec { return v.Scorecard }

// __IngestCertifyScorecardsInput is used internally by genqlient
type __IngestCertifyScorecardsInput struct {
	Sources    []IDorSourceInput    `json:"sources"`
	Scorecards []ScorecardInputSpec `json:"scorecards"`
}

// GetSources returns __IngestCertifyScorecardsInput.Sources, and is useful for accessing the field via an interface.
func (v *__IngestCertifyScorecardsInput) GetSources() []IDorSourceInput { return v.Sources }

// GetScorecards returns __IngestCertifyScorecardsInput.Scorecards, and is useful for accessing the field via an interface.
func (v *__IngestCertifyScorecardsInput) GetScorecards() []ScorecardInputSpec { return v.Scorecards }

// __IngestCertifyVexArtifactInput is used internally by genqlient
type __IngestCertifyVexArtifactInput struct {
	Artifact      IDorArtifactInput      `json:"artifact"`
	Vulnerability IDorVulnerabilityInput `json:"vulnerability"`
	VexStatement  VexStatementInputSpec  `json:"vexStatement"`
}

// GetArtifact returns __IngestCertifyVexArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexArtifactInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// GetVulnerability returns __IngestCertifyVexArtifactInput.Vulnerability, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexArtifactInput) GetVulnerability() IDorVulnerabilityInput {
	return v.Vulnerability
}

// GetVexStatement returns __IngestCertifyVexArtifactInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexArtifactInput) GetVexStatement() VexStatementInputSpec {
	return v.VexStatement
}

// __IngestCertifyVexArtifactsInput is used internally by genqlient
type __IngestCertifyVexArtifactsInput struct {
	Artifacts       []IDorArtifactInput      `json:"artifacts"`
	Vulnerabilities []IDorVulnerabilityInput `json:"vulnerabilities"`
	VexStatements   []VexStatementInputSpec  `json:"vexStatements"`
}

// GetArtifacts returns __IngestCertifyVexArtifactsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexArtifactsInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// GetVulnerabilities returns __IngestCertifyVexArtifactsInput.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexArtifactsInput) GetVulnerabilities() []IDorVulnerabilityInput {
	return v.Vulnerabilities
}

// GetVexStatements returns __IngestCertifyVexArtifactsInput.VexStatements, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexArtifactsInput) GetVexStatements() []VexStatementInputSpec {
	return v.VexStatements
}

// __IngestCertifyVexPkgInput is used internally by genqlient
type __IngestCertifyVexPkgInput struct {
	Pkg           IDorPkgInput           `json:"pkg"`
	Vulnerability IDorVulnerabilityInput `json:"vulnerability"`
	VexStatement  VexStatementInputSpec  `json:"vexStatement"`
}

// GetPkg returns __IngestCertifyVexPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexPkgInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetVulnerability returns __IngestCertifyVexPkgInput.Vulnerability, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexPkgInput) GetVulnerability() IDorVulnerabilityInput {
	return v.Vulnerability
}

// GetVexStatement returns __IngestCertifyVexPkgInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexPkgInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __IngestCertifyVexPkgsInput is used internally by genqlient
type __IngestCertifyVexPkgsInput struct {
	Pkgs            []IDorPkgInput           `json:"pkgs"`
	Vulnerabilities []IDorVulnerabilityInput `json:"vulnerabilities"`
	VexStatements   []VexStatementInputSpec  `json:"vexStatements"`
}

// GetPkgs returns __IngestCertifyVexPkgsInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexPkgsInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetVulnerabilities returns __IngestCertifyVexPkgsInput.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexPkgsInput) GetVulnerabilities() []IDorVulnerabilityInput {
	return v.Vulnerabilities
}

// GetVexStatements returns __IngestCertifyVexPkgsInput.VexStatements, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVexPkgsInput) GetVexStatements() []VexStatementInputSpec {
	return v.VexStatements
}

// __IngestCertifyVulnPkgInput is used internally by genqlient
type __IngestCertifyVulnPkgInput struct {
	Pkg           IDorPkgInput           `json:"pkg"`
	Vulnerability IDorVulnerabilityInput `json:"vulnerability"`
	CertifyVuln   ScanMetadataInput      `json:"certifyVuln"`
}

// GetPkg returns __IngestCertifyVulnPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVulnPkgInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetVulnerability returns __IngestCertifyVulnPkgInput.Vulnerability, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVulnPkgInput) GetVulnerability() IDorVulnerabilityInput {
	return v.Vulnerability
}

// GetCertifyVuln returns __IngestCertifyVulnPkgInput.CertifyVuln, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVulnPkgInput) GetCertifyVuln() ScanMetadataInput { return v.CertifyVuln }

// __IngestCertifyVulnPkgsInput is used internally by genqlient
type __IngestCertifyVulnPkgsInput struct {
	Pkgs            []IDorPkgInput           `json:"pkgs"`
	Vulnerabilities []IDorVulnerabilityInput `json:"vulnerabilities"`
	CertifyVulns    []ScanMetadataInput      `json:"certifyVulns"`
}

// GetPkgs returns __IngestCertifyVulnPkgsInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVulnPkgsInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetVulnerabilities returns __IngestCertifyVulnPkgsInput.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVulnPkgsInput) GetVulnerabilities() []IDorVulnerabilityInput {
	return v.Vulnerabilities
}

// GetCertifyVulns returns __IngestCertifyVulnPkgsInput.CertifyVulns, and is useful for accessing the field via an interface.
func (v *__IngestCertifyVulnPkgsInput) GetCertifyVulns() []ScanMetadataInput { return v.CertifyVulns }

// __IngestHasMetadataArtifactInput is used internally by genqlient
type __IngestHasMetadataArtifactInput struct {
	Artifact    IDorArtifactInput    `json:"artifact"`
	HasMetadata HasMetadataInputSpec `json:"hasMetadata"`
}

// GetArtifact returns __IngestHasMetadataArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataArtifactInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// GetHasMetadata returns __IngestHasMetadataArtifactInput.HasMetadata, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataArtifactInput) GetHasMetadata() HasMetadataInputSpec {
	return v.HasMetadata
}

// __IngestHasMetadataArtifactsInput is used internally by genqlient
type __IngestHasMetadataArtifactsInput struct {
	Artifacts       []IDorArtifactInput    `json:"artifacts"`
	HasMetadataList []HasMetadataInputSpec `json:"hasMetadataList"`
}

// GetArtifacts returns __IngestHasMetadataArtifactsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataArtifactsInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// GetHasMetadataList returns __IngestHasMetadataArtifactsInput.HasMetadataList, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataArtifactsInput) GetHasMetadataList() []HasMetadataInputSpec {
	return v.HasMetadataList
}

// __IngestHasMetadataPkgInput is used internally by genqlient
type __IngestHasMetadataPkgInput struct {
	Pkg          IDorPkgInput         `json:"pkg"`
	PkgMatchType MatchFlags           `json:"pkgMatchType"`
	HasMetadata  HasMetadataInputSpec `json:"hasMetadata"`
}

// GetPkg returns __IngestHasMetadataPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataPkgInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetPkgMatchType returns __IngestHasMetadataPkgInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataPkgInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetHasMetadata returns __IngestHasMetadataPkgInput.HasMetadata, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataPkgInput) GetHasMetadata() HasMetadataInputSpec { return v.HasMetadata }

// __IngestHasMetadataPkgsInput is used internally by genqlient
type __IngestHasMetadataPkgsInput struct {
	Pkgs            []IDorPkgInput         `json:"pkgs"`
	PkgMatchType    MatchFlags             `json:"pkgMatchType"`
	HasMetadataList []HasMetadataInputSpec `json:"hasMetadataList"`
}

// GetPkgs returns __IngestHasMetadataPkgsInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataPkgsInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetPkgMatchType returns __IngestHasMetadataPkgsInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataPkgsInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetHasMetadataList returns __IngestHasMetadataPkgsInput.HasMetadataList, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataPkgsInput) GetHasMetadataList() []HasMetadataInputSpec {
	return v.HasMetadataList
}

// __IngestHasMetadataSrcInput is used internally by genqlient
type __IngestHasMetadataSrcInput struct {
	Source      IDorSourceInput      `json:"source"`
	HasMetadata HasMetadataInputSpec `json:"hasMetadata"`
}

// GetSource returns __IngestHasMetadataSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataSrcInput) GetSource() IDorSourceInput { return v.Source }

// GetHasMetadata returns __IngestHasMetadataSrcInput.HasMetadata, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataSrcInput) GetHasMetadata() HasMetadataInputSpec { return v.HasMetadata }

// __IngestHasMetadataSrcsInput is used internally by genqlient
type __IngestHasMetadataSrcsInput struct {
	Sources         []IDorSourceInput      `json:"sources"`
	HasMetadataList []HasMetadataInputSpec `json:"hasMetadataList"`
}

// GetSources returns __IngestHasMetadataSrcsInput.Sources, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataSrcsInput) GetSources() []IDorSourceInput { return v.Sources }

// GetHasMetadataList returns __IngestHasMetadataSrcsInput.HasMetadataList, and is useful for accessing the field via an interface.
func (v *__IngestHasMetadataSrcsInput) GetHasMetadataList() []HasMetadataInputSpec {
	return v.HasMetadataList
}

// __IngestHasSBOMArtifactInput is used internally by genqlient
type __IngestHasSBOMArtifactInput struct {
	Artifact IDorArtifactInput        `json:"artifact"`
	HasSBOM  HasSBOMInputSpec         `json:"hasSBOM"`
	Includes HasSBOMIncludesInputSpec `json:"includes"`
}

// GetArtifact returns __IngestHasSBOMArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMArtifactInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// GetHasSBOM returns __IngestHasSBOMArtifactInput.HasSBOM, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMArtifactInput) GetHasSBOM() HasSBOMInputSpec { return v.HasSBOM }

// GetIncludes returns __IngestHasSBOMArtifactInput.Includes, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMArtifactInput) GetIncludes() HasSBOMIncludesInputSpec { return v.Includes }

// __IngestHasSBOMArtifactsInput is used internally by genqlient
type __IngestHasSBOMArtifactsInput struct {
	Artifacts []IDorArtifactInput        `json:"artifacts"`
	HasSBOMs  []HasSBOMInputSpec         `json:"hasSBOMs"`
	Includes  []HasSBOMIncludesInputSpec `json:"includes"`
}

// GetArtifacts returns __IngestHasSBOMArtifactsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMArtifactsInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// GetHasSBOMs returns __IngestHasSBOMArtifactsInput.HasSBOMs, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMArtifactsInput) GetHasSBOMs() []HasSBOMInputSpec { return v.HasSBOMs }

// GetIncludes returns __IngestHasSBOMArtifactsInput.Includes, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMArtifactsInput) GetIncludes() []HasSBOMIncludesInputSpec { return v.Includes }

// __IngestHasSBOMPkgInput is used internally by genqlient
type __IngestHasSBOMPkgInput struct {
	Pkg      IDorPkgInput             `json:"pkg"`
	HasSBOM  HasSBOMInputSpec         `json:"hasSBOM"`
	Includes HasSBOMIncludesInputSpec `json:"includes"`
}

// GetPkg returns __IngestHasSBOMPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMPkgInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetHasSBOM returns __IngestHasSBOMPkgInput.HasSBOM, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMPkgInput) GetHasSBOM() HasSBOMInputSpec { return v.HasSBOM }

// GetIncludes returns __IngestHasSBOMPkgInput.Includes, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMPkgInput) GetIncludes() HasSBOMIncludesInputSpec { return v.Includes }

// __IngestHasSBOMPkgsInput is used internally by genqlient
type __IngestHasSBOMPkgsInput struct {
	Pkgs     []IDorPkgInput             `json:"pkgs"`
	HasSBOMs []HasSBOMInputSpec         `json:"hasSBOMs"`
	Includes []HasSBOMIncludesInputSpec `json:"includes"`
}

// GetPkgs returns __IngestHasSBOMPkgsInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMPkgsInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetHasSBOMs returns __IngestHasSBOMPkgsInput.HasSBOMs, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMPkgsInput) GetHasSBOMs() []HasSBOMInputSpec { return v.HasSBOMs }

// GetIncludes returns __IngestHasSBOMPkgsInput.Includes, and is useful for accessing the field via an interface.
func (v *__IngestHasSBOMPkgsInput) GetIncludes() []HasSBOMIncludesInputSpec { return v.Includes }

// __IngestHasSourceAtInput is used internally by genqlient
type __IngestHasSourceAtInput struct {
	Pkg          IDorPkgInput         `json:"pkg"`
	PkgMatchType MatchFlags           `json:"pkgMatchType"`
	Source       IDorSourceInput      `json:"source"`
	HasSourceAt  HasSourceAtInputSpec `json:"hasSourceAt"`
}

// GetPkg returns __IngestHasSourceAtInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestHasSourceAtInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetPkgMatchType returns __IngestHasSourceAtInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestHasSourceAtInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetSource returns __IngestHasSourceAtInput.Source, and is useful for accessing the field via an interface.
func (v *__IngestHasSourceAtInput) GetSource() IDorSourceInput { return v.Source }

// GetHasSourceAt returns __IngestHasSourceAtInput.HasSourceAt, and is useful for accessing the field via an interface.
func (v *__IngestHasSourceAtInput) GetHasSourceAt() HasSourceAtInputSpec { return v.HasSourceAt }

// __IngestHasSourcesAtInput is used internally by genqlient
type __IngestHasSourcesAtInput struct {
	Pkgs         []IDorPkgInput         `json:"pkgs"`
	PkgMatchType MatchFlags             `json:"pkgMatchType"`
	Sources      []IDorSourceInput      `json:"sources"`
	HasSourceAts []HasSourceAtInputSpec `json:"hasSourceAts"`
}

// GetPkgs returns __IngestHasSourcesAtInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestHasSourcesAtInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetPkgMatchType returns __IngestHasSourcesAtInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestHasSourcesAtInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetSources returns __IngestHasSourcesAtInput.Sources, and is useful for accessing the field via an interface.
func (v *__IngestHasSourcesAtInput) GetSources() []IDorSourceInput { return v.Sources }

// GetHasSourceAts returns __IngestHasSourcesAtInput.HasSourceAts, and is useful for accessing the field via an interface.
func (v *__IngestHasSourcesAtInput) GetHasSourceAts() []HasSourceAtInputSpec { return v.HasSourceAts }

// __IngestHashEqualInput is used internally by genqlient
type __IngestHashEqualInput struct {
	Artifact      IDorArtifactInput  `json:"artifact"`
	OtherArtifact IDorArtifactInput  `json:"otherArtifact"`
	HashEqual     HashEqualInputSpec `json:"hashEqual"`
}

// GetArtifact returns __IngestHashEqualInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestHashEqualInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// GetOtherArtifact returns __IngestHashEqualInput.OtherArtifact, and is useful for accessing the field via an interface.
func (v *__IngestHashEqualInput) GetOtherArtifact() IDorArtifactInput { return v.OtherArtifact }

// GetHashEqual returns __IngestHashEqualInput.HashEqual, and is useful for accessing the field via an interface.
func (v *__IngestHashEqualInput) GetHashEqual() HashEqualInputSpec { return v.HashEqual }

// __IngestHashEqualsInput is used internally by genqlient
type __IngestHashEqualsInput struct {
	Artifacts      []IDorArtifactInput  `json:"artifacts"`
	OtherArtifacts []IDorArtifactInput  `json:"otherArtifacts"`
	HashEquals     []HashEqualInputSpec `json:"hashEquals"`
}

// GetArtifacts returns __IngestHashEqualsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestHashEqualsInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// GetOtherArtifacts returns __IngestHashEqualsInput.OtherArtifacts, and is useful for accessing the field via an interface.
func (v *__IngestHashEqualsInput) GetOtherArtifacts() []IDorArtifactInput { return v.OtherArtifacts }

// GetHashEquals returns __IngestHashEqualsInput.HashEquals, and is useful for accessing the field via an interface.
func (v *__IngestHashEqualsInput) GetHashEquals() []HashEqualInputSpec { return v.HashEquals }

// __IngestIsDependenciesInput is used internally by genqlient
type __IngestIsDependenciesInput struct {
	Pkgs            []IDorPkgInput          `json:"pkgs"`
	DepPkgs         []IDorPkgInput          `json:"depPkgs"`
	DepPkgMatchType MatchFlags              `json:"depPkgMatchType"`
	Dependencies    []IsDependencyInputSpec `json:"dependencies"`
}

// GetPkgs returns __IngestIsDependenciesInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestIsDependenciesInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetDepPkgs returns __IngestIsDependenciesInput.DepPkgs, and is useful for accessing the field via an interface.
func (v *__IngestIsDependenciesInput) GetDepPkgs() []IDorPkgInput { return v.DepPkgs }

// GetDepPkgMatchType returns __IngestIsDependenciesInput.DepPkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestIsDependenciesInput) GetDepPkgMatchType() MatchFlags { return v.DepPkgMatchType }

// GetDependencies returns __IngestIsDependenciesInput.Dependencies, and is useful for accessing the field via an interface.
func (v *__IngestIsDependenciesInput) GetDependencies() []IsDependencyInputSpec {
	return v.Dependencies
}

// __IngestIsDependencyInput is used internally by genqlient
type __IngestIsDependencyInput struct {
	Pkg             IDorPkgInput          `json:"pkg"`
	DepPkg          IDorPkgInput          `json:"depPkg"`
	DepPkgMatchType MatchFlags            `json:"depPkgMatchType"`
	Dependency      IsDependencyInputSpec `json:"dependency"`
}

// GetPkg returns __IngestIsDependencyInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestIsDependencyInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetDepPkg returns __IngestIsDependencyInput.DepPkg, and is useful for accessing the field via an interface.
func (v *__IngestIsDependencyInput) GetDepPkg() IDorPkgInput { return v.DepPkg }

// GetDepPkgMatchType returns __IngestIsDependencyInput.DepPkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestIsDependencyInput) GetDepPkgMatchType() MatchFlags { return v.DepPkgMatchType }

// GetDependency returns __IngestIsDependencyInput.Dependency, and is useful for accessing the field via an interface.
func (v *__IngestIsDependencyInput) GetDependency() IsDependencyInputSpec { return v.Dependency }

// __IngestIsOccurrencePkgInput is used internally by genqlient
type __IngestIsOccurrencePkgInput struct {
	Pkg        IDorPkgInput          `json:"pkg"`
	Artifact   IDorArtifactInput     `json:"artifact"`
	Occurrence IsOccurrenceInputSpec `json:"occurrence"`
}

// GetPkg returns __IngestIsOccurrencePkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrencePkgInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetArtifact returns __IngestIsOccurrencePkgInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrencePkgInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// GetOccurrence returns __IngestIsOccurrencePkgInput.Occurrence, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrencePkgInput) GetOccurrence() IsOccurrenceInputSpec { return v.Occurrence }

// __IngestIsOccurrenceSrcInput is used internally by genqlient
type __IngestIsOccurrenceSrcInput struct {
	Source     IDorSourceInput       `json:"source"`
	Artifact   IDorArtifactInput     `json:"artifact"`
	Occurrence IsOccurrenceInputSpec `json:"occurrence"`
}

// GetSource returns __IngestIsOccurrenceSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrenceSrcInput) GetSource() IDorSourceInput { return v.Source }

// GetArtifact returns __IngestIsOccurrenceSrcInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrenceSrcInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// GetOccurrence returns __IngestIsOccurrenceSrcInput.Occurrence, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrenceSrcInput) GetOccurrence() IsOccurrenceInputSpec { return v.Occurrence }

// __IngestIsOccurrencesPkgInput is used internally by genqlient
type __IngestIsOccurrencesPkgInput struct {
	Pkgs        []IDorPkgInput          `json:"pkgs"`
	Artifacts   []IDorArtifactInput     `json:"artifacts"`
	Occurrences []IsOccurrenceInputSpec `json:"occurrences"`
}

// GetPkgs returns __IngestIsOccurrencesPkgInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrencesPkgInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetArtifacts returns __IngestIsOccurrencesPkgInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrencesPkgInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// GetOccurrences returns __IngestIsOccurrencesPkgInput.Occurrences, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrencesPkgInput) GetOccurrences() []IsOccurrenceInputSpec {
	return v.Occurrences
}

// __IngestIsOccurrencesSrcInput is used internally by genqlient
type __IngestIsOccurrencesSrcInput struct {
	Sources     []IDorSourceInput       `json:"sources"`
	Artifacts   []IDorArtifactInput     `json:"artifacts"`
	Occurrences []IsOccurrenceInputSpec `json:"occurrences"`
}

// GetSources returns __IngestIsOccurrencesSrcInput.Sources, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrencesSrcInput) GetSources() []IDorSourceInput { return v.Sources }

// GetArtifacts returns __IngestIsOccurrencesSrcInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrencesSrcInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// GetOccurrences returns __IngestIsOccurrencesSrcInput.Occurrences, and is useful for accessing the field via an interface.
func (v *__IngestIsOccurrencesSrcInput) GetOccurrences() []IsOccurrenceInputSpec {
	return v.Occurrences
}

// __IngestLicenseInput is used internally by genqlient
type __IngestLicenseInput struct {
	License IDorLicenseInput `json:"license"`
}

// GetLicense returns __IngestLicenseInput.License, and is useful for accessing the field via an interface.
func (v *__IngestLicenseInput) GetLicense() IDorLicenseInput { return v.License }

// __IngestLicensesInput is used internally by genqlient
type __IngestLicensesInput struct {
	Licenses []IDorLicenseInput `json:"licenses"`
}

// GetLicenses returns __IngestLicensesInput.Licenses, and is useful for accessing the field via an interface.
func (v *__IngestLicensesInput) GetLicenses() []IDorLicenseInput { return v.Licenses }

// __IngestPackageInput is used internally by genqlient
type __IngestPackageInput struct {
	Pkg IDorPkgInput `json:"pkg"`
}

// GetPkg returns __IngestPackageInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestPackageInput) GetPkg() IDorPkgInput { return v.Pkg }

// __IngestPackagesInput is used internally by genqlient
type __IngestPackagesInput struct {
	Pkgs []IDorPkgInput `json:"pkgs"`
}

// GetPkgs returns __IngestPackagesInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestPackagesInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// __IngestPkgEqualInput is used internally by genqlient
type __IngestPkgEqualInput struct {
	Pkg          IDorPkgInput      `json:"pkg"`
	OtherPackage IDorPkgInput      `json:"otherPackage"`
	PkgEqual     PkgEqualInputSpec `json:"pkgEqual"`
}

// GetPkg returns __IngestPkgEqualInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestPkgEqualInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetOtherPackage returns __IngestPkgEqualInput.OtherPackage, and is useful for accessing the field via an interface.
func (v *__IngestPkgEqualInput) GetOtherPackage() IDorPkgInput { return v.OtherPackage }

// GetPkgEqual returns __IngestPkgEqualInput.PkgEqual, and is useful for accessing the field via an interface.
func (v *__IngestPkgEqualInput) GetPkgEqual() PkgEqualInputSpec { return v.PkgEqual }

// __IngestPkgEqualsInput is used internally by genqlient
type __IngestPkgEqualsInput struct {
	Pkgs          []IDorPkgInput      `json:"pkgs"`
	OtherPackages []IDorPkgInput      `json:"otherPackages"`
	PkgEquals     []PkgEqualInputSpec `json:"pkgEquals"`
}

// GetPkgs returns __IngestPkgEqualsInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestPkgEqualsInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetOtherPackages returns __IngestPkgEqualsInput.OtherPackages, and is useful for accessing the field via an interface.
func (v *__IngestPkgEqualsInput) GetOtherPackages() []IDorPkgInput { return v.OtherPackages }

// GetPkgEquals returns __IngestPkgEqualsInput.PkgEquals, and is useful for accessing the field via an interface.
func (v *__IngestPkgEqualsInput) GetPkgEquals() []PkgEqualInputSpec { return v.PkgEquals }

// __IngestPointOfContactArtifactInput is used internally by genqlient
type __IngestPointOfContactArtifactInput struct {
	Artifact       IDorArtifactInput       `json:"artifact"`
	PointOfContact PointOfContactInputSpec `json:"pointOfContact"`
}

// GetArtifact returns __IngestPointOfContactArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactArtifactInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// GetPointOfContact returns __IngestPointOfContactArtifactInput.PointOfContact, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactArtifactInput) GetPointOfContact() PointOfContactInputSpec {
	return v.PointOfContact
}

// __IngestPointOfContactArtifactsInput is used internally by genqlient
type __IngestPointOfContactArtifactsInput struct {
	Artifacts       []IDorArtifactInput       `json:"artifacts"`
	PointOfContacts []PointOfContactInputSpec `json:"pointOfContacts"`
}

// GetArtifacts returns __IngestPointOfContactArtifactsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactArtifactsInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// GetPointOfContacts returns __IngestPointOfContactArtifactsInput.PointOfContacts, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactArtifactsInput) GetPointOfContacts() []PointOfContactInputSpec {
	return v.PointOfContacts
}

// __IngestPointOfContactPkgInput is used internally by genqlient
type __IngestPointOfContactPkgInput struct {
	Pkg            IDorPkgInput            `json:"pkg"`
	PkgMatchType   MatchFlags              `json:"pkgMatchType"`
	PointOfContact PointOfContactInputSpec `json:"pointOfContact"`
}

// GetPkg returns __IngestPointOfContactPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactPkgInput) GetPkg() IDorPkgInput { return v.Pkg }

// GetPkgMatchType returns __IngestPointOfContactPkgInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactPkgInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetPointOfContact returns __IngestPointOfContactPkgInput.PointOfContact, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactPkgInput) GetPointOfContact() PointOfContactInputSpec {
	return v.PointOfContact
}

// __IngestPointOfContactPkgsInput is used internally by genqlient
type __IngestPointOfContactPkgsInput struct {
	Pkgs            []IDorPkgInput            `json:"pkgs"`
	PkgMatchType    MatchFlags                `json:"pkgMatchType"`
	PointOfContacts []PointOfContactInputSpec `json:"pointOfContacts"`
}

// GetPkgs returns __IngestPointOfContactPkgsInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactPkgsInput) GetPkgs() []IDorPkgInput { return v.Pkgs }

// GetPkgMatchType returns __IngestPointOfContactPkgsInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactPkgsInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetPointOfContacts returns __IngestPointOfContactPkgsInput.PointOfContacts, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactPkgsInput) GetPointOfContacts() []PointOfContactInputSpec {
	return v.PointOfContacts
}

// __IngestPointOfContactSrcInput is used internally by genqlient
type __IngestPointOfContactSrcInput struct {
	Source         IDorSourceInput         `json:"source"`
	PointOfContact PointOfContactInputSpec `json:"pointOfContact"`
}

// GetSource returns __IngestPointOfContactSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactSrcInput) GetSource() IDorSourceInput { return v.Source }

// GetPointOfContact returns __IngestPointOfContactSrcInput.PointOfContact, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactSrcInput) GetPointOfContact() PointOfContactInputSpec {
	return v.PointOfContact
}

// __IngestPointOfContactSrcsInput is used internally by genqlient
type __IngestPointOfContactSrcsInput struct {
	Sources         []IDorSourceInput         `json:"sources"`
	PointOfContacts []PointOfContactInputSpec `json:"pointOfContacts"`
}

// GetSources returns __IngestPointOfContactSrcsInput.Sources, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactSrcsInput) GetSources() []IDorSourceInput { return v.Sources }

// GetPointOfContacts returns __IngestPointOfContactSrcsInput.PointOfContacts, and is useful for accessing the field via an interface.
func (v *__IngestPointOfContactSrcsInput) GetPointOfContacts() []PointOfContactInputSpec {
	return v.PointOfContacts
}

// __IngestSLSAForArtifactInput is used internally by genqlient
type __IngestSLSAForArtifactInput struct {
	Artifact  IDorArtifactInput   `json:"artifact"`
	Materials []IDorArtifactInput `json:"materials"`
	Builder   IDorBuilderInput    `json:"builder"`
	Slsa      SLSAInputSpec       `json:"slsa"`
}

// GetArtifact returns __IngestSLSAForArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IngestSLSAForArtifactInput) GetArtifact() IDorArtifactInput { return v.Artifact }

// GetMaterials returns __IngestSLSAForArtifactInput.Materials, and is useful for accessing the field via an interface.
func (v *__IngestSLSAForArtifactInput) GetMaterials() []IDorArtifactInput { return v.Materials }

// GetBuilder returns __IngestSLSAForArtifactInput.Builder, and is useful for accessing the field via an interface.
func (v *__IngestSLSAForArtifactInput) GetBuilder() IDorBuilderInput { return v.Builder }

// GetSlsa returns __IngestSLSAForArtifactInput.Slsa, and is useful for accessing the field via an interface.
func (v *__IngestSLSAForArtifactInput) GetSlsa() SLSAInputSpec { return v.Slsa }

// __IngestSLSAForArtifactsInput is used internally by genqlient
type __IngestSLSAForArtifactsInput struct {
	Artifacts     []IDorArtifactInput   `json:"artifacts"`
	MaterialsList [][]IDorArtifactInput `json:"materialsList"`
	Builders      []IDorBuilderInput    `json:"builders"`
	SlsaList      []SLSAInputSpec       `json:"slsaList"`
}

// GetArtifacts returns __IngestSLSAForArtifactsInput.Artifacts, and is useful for accessing the field via an interface.
func (v *__IngestSLSAForArtifactsInput) GetArtifacts() []IDorArtifactInput { return v.Artifacts }

// GetMaterialsList returns __IngestSLSAForArtifactsInput.MaterialsList, and is useful for accessing the field via an interface.
func (v *__IngestSLSAForArtifactsInput) GetMaterialsList() [][]IDorArtifactInput {
	return v.MaterialsList
}

// GetBuilders returns __IngestSLSAForArtifactsInput.Builders, and is useful for accessing the field via an interface.
func (v *__IngestSLSAForArtifactsInput) GetBuilders() []IDorBuilderInput { return v.Builders }

// GetSlsaList returns __IngestSLSAForArtifactsInput.SlsaList, and is useful for accessing the field via an interface.
func (v *__IngestSLSAForArtifactsInput) GetSlsaList() []SLSAInputSpec { return v.SlsaList }

// __IngestSourceInput is used internally by genqlient
type __IngestSourceInput struct {
	Source IDorSourceInput `json:"source"`
}

// GetSource returns __IngestSourceInput.Source, and is useful for accessing the field via an interface.
func (v *__IngestSourceInput) GetSource() IDorSourceInput { return v.Source }

// __IngestSourcesInput is used internally by genqlient
type __IngestSourcesInput struct {
	Sources []IDorSourceInput `json:"sources"`
}

// GetSources returns __IngestSourcesInput.Sources, and is useful for accessing the field via an interface.
func (v *__IngestSourcesInput) GetSources() []IDorSourceInput { return v.Sources }

// __IngestVulnEqualInput is used internally by genqlient
type __IngestVulnEqualInput struct {
	Vulnerability      IDorVulnerabilityInput `json:"vulnerability"`
	OtherVulnerability IDorVulnerabilityInput `json:"otherVulnerability"`
	VulnEqual          VulnEqualInputSpec     `json:"vulnEqual"`
}

// GetVulnerability returns __IngestVulnEqualInput.Vulnerability, and is useful for accessing the field via an interface.
func (v *__IngestVulnEqualInput) GetVulnerability() IDorVulnerabilityInput { return v.Vulnerability }

// GetOtherVulnerability returns __IngestVulnEqualInput.OtherVulnerability, and is useful for accessing the field via an interface.
func (v *__IngestVulnEqualInput) GetOtherVulnerability() IDorVulnerabilityInput {
	return v.OtherVulnerability
}

// GetVulnEqual returns __IngestVulnEqualInput.VulnEqual, and is useful for accessing the field via an interface.
func (v *__IngestVulnEqualInput) GetVulnEqual() VulnEqualInputSpec { return v.VulnEqual }

// __IngestVulnEqualsInput is used internally by genqlient
type __IngestVulnEqualsInput struct {
	Vulnerabilities      []IDorVulnerabilityInput `json:"vulnerabilities"`
	OtherVulnerabilities []IDorVulnerabilityInput `json:"otherVulnerabilities"`
	VulnEquals           []VulnEqualInputSpec     `json:"vulnEquals"`
}

// GetVulnerabilities returns __IngestVulnEqualsInput.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *__IngestVulnEqualsInput) GetVulnerabilities() []IDorVulnerabilityInput {
	return v.Vulnerabilities
}

// GetOtherVulnerabilities returns __IngestVulnEqualsInput.OtherVulnerabilities, and is useful for accessing the field via an interface.
func (v *__IngestVulnEqualsInput) GetOtherVulnerabilities() []IDorVulnerabilityInput {
	return v.OtherVulnerabilities
}

// GetVulnEquals returns __IngestVulnEqualsInput.VulnEquals, and is useful for accessing the field via an interface.
func (v *__IngestVulnEqualsInput) GetVulnEquals() []VulnEqualInputSpec { return v.VulnEquals }

// __IngestVulnHasMetadataInput is used internally by genqlient
type __IngestVulnHasMetadataInput struct {
	Vulnerability IDorVulnerabilityInput         `json:"vulnerability"`
	VulnMetadata  VulnerabilityMetadataInputSpec `json:"vulnMetadata"`
}

// GetVulnerability returns __IngestVulnHasMetadataInput.Vulnerability, and is useful for accessing the field via an interface.
func (v *__IngestVulnHasMetadataInput) GetVulnerability() IDorVulnerabilityInput {
	return v.Vulnerability
}

// GetVulnMetadata returns __IngestVulnHasMetadataInput.VulnMetadata, and is useful for accessing the field via an interface.
func (v *__IngestVulnHasMetadataInput) GetVulnMetadata() VulnerabilityMetadataInputSpec {
	return v.VulnMetadata
}

// __IngestVulnerabilitiesInput is used internally by genqlient
type __IngestVulnerabilitiesInput struct {
	Vulns []IDorVulnerabilityInput `json:"vulns"`
}

// GetVulns returns __IngestVulnerabilitiesInput.Vulns, and is useful for accessing the field via an interface.
func (v *__IngestVulnerabilitiesInput) GetVulns() []IDorVulnerabilityInput { return v.Vulns }

// __IngestVulnerabilityInput is used internally by genqlient
type __IngestVulnerabilityInput struct {
	Vuln IDorVulnerabilityInput `json:"vuln"`
}

// GetVuln returns __IngestVulnerabilityInput.Vuln, and is useful for accessing the field via an interface.
func (v *__IngestVulnerabilityInput) GetVuln() IDorVulnerabilityInput { return v.Vuln }

// __LicenseListInput is used internally by genqlient
type __LicenseListInput struct {
	Filter LicenseSpec `json:"filter"`
	After  *string     `json:"after"`
	First  *int        `json:"first"`
}

// GetFilter returns __LicenseListInput.Filter, and is useful for accessing the field via an interface.
func (v *__LicenseListInput) GetFilter() LicenseSpec { return v.Filter }

// GetAfter returns __LicenseListInput.After, and is useful for accessing the field via an interface.
func (v *__LicenseListInput) GetAfter() *string { return v.After }

// GetFirst returns __LicenseListInput.First, and is useful for accessing the field via an interface.
func (v *__LicenseListInput) GetFirst() *int { return v.First }

// __LicensesInput is used internally by genqlient
type __LicensesInput struct {
	Filter LicenseSpec `json:"filter"`
}

// GetFilter returns __LicensesInput.Filter, and is useful for accessing the field via an interface.
func (v *__LicensesInput) GetFilter() LicenseSpec { return v.Filter }

// __NeighborsInput is used internally by genqlient
type __NeighborsInput struct {
	Node      string `json:"node"`
	UsingOnly []Edge `json:"usingOnly"`
}

// GetNode returns __NeighborsInput.Node, and is useful for accessing the field via an interface.
func (v *__NeighborsInput) GetNode() string { return v.Node }

// GetUsingOnly returns __NeighborsInput.UsingOnly, and is useful for accessing the field via an interface.
func (v *__NeighborsInput) GetUsingOnly() []Edge { return v.UsingOnly }

// __NodeInput is used internally by genqlient
type __NodeInput struct {
	Node string `json:"node"`
}

// GetNode returns __NodeInput.Node, and is useful for accessing the field via an interface.
func (v *__NodeInput) GetNode() string { return v.Node }

// __NodesInput is used internally by genqlient
type __NodesInput struct {
	Nodes []string `json:"nodes"`
}

// GetNodes returns __NodesInput.Nodes, and is useful for accessing the field via an interface.
func (v *__NodesInput) GetNodes() []string { return v.Nodes }

// __OccurrenceListInput is used internally by genqlient
type __OccurrenceListInput struct {
	Filter IsOccurrenceSpec `json:"filter"`
	After  *string          `json:"after"`
	First  *int             `json:"first"`
}

// GetFilter returns __OccurrenceListInput.Filter, and is useful for accessing the field via an interface.
func (v *__OccurrenceListInput) GetFilter() IsOccurrenceSpec { return v.Filter }

// GetAfter returns __OccurrenceListInput.After, and is useful for accessing the field via an interface.
func (v *__OccurrenceListInput) GetAfter() *string { return v.After }

// GetFirst returns __OccurrenceListInput.First, and is useful for accessing the field via an interface.
func (v *__OccurrenceListInput) GetFirst() *int { return v.First }

// __OccurrencesInput is used internally by genqlient
type __OccurrencesInput struct {
	Filter IsOccurrenceSpec `json:"filter"`
}

// GetFilter returns __OccurrencesInput.Filter, and is useful for accessing the field via an interface.
func (v *__OccurrencesInput) GetFilter() IsOccurrenceSpec { return v.Filter }

// __PackageNamesInput is used internally by genqlient
type __PackageNamesInput struct {
	Filter PkgSpec `json:"filter"`
}

// GetFilter returns __PackageNamesInput.Filter, and is useful for accessing the field via an interface.
func (v *__PackageNamesInput) GetFilter() PkgSpec { return v.Filter }

// __PackageNamespacesInput is used internally by genqlient
type __PackageNamespacesInput struct {
	Filter PkgSpec `json:"filter"`
}

// GetFilter returns __PackageNamespacesInput.Filter, and is useful for accessing the field via an interface.
func (v *__PackageNamespacesInput) GetFilter() PkgSpec { return v.Filter }

// __PackageTypesInput is used internally by genqlient
type __PackageTypesInput struct {
	Filter PkgSpec `json:"filter"`
}

// GetFilter returns __PackageTypesInput.Filter, and is useful for accessing the field via an interface.
func (v *__PackageTypesInput) GetFilter() PkgSpec { return v.Filter }

// __PackageVersionsInput is used internally by genqlient
type __PackageVersionsInput struct {
	Filter PkgSpec `json:"filter"`
}

// GetFilter returns __PackageVersionsInput.Filter, and is useful for accessing the field via an interface.
func (v *__PackageVersionsInput) GetFilter() PkgSpec { return v.Filter }

// __PackagesInput is used internally by genqlient
type __PackagesInput struct {
	Filter PkgSpec `json:"filter"`
}

// GetFilter returns __PackagesInput.Filter, and is useful for accessing the field via an interface.
func (v *__PackagesInput) GetFilter() PkgSpec { return v.Filter }

// __PackagesListInput is used internally by genqlient
type __PackagesListInput struct {
	Filter PkgSpec `json:"filter"`
	After  *string `json:"after"`
	First  *int    `json:"first"`
}

// GetFilter returns __PackagesListInput.Filter, and is useful for accessing the field via an interface.
func (v *__PackagesListInput) GetFilter() PkgSpec { return v.Filter }

// GetAfter returns __PackagesListInput.After, and is useful for accessing the field via an interface.
func (v *__PackagesListInput) GetAfter() *string { return v.After }

// GetFirst returns __PackagesListInput.First, and is useful for accessing the field via an interface.
func (v *__PackagesListInput) GetFirst() *int { return v.First }

// __PathInput is used internally by genqlient
type __PathInput struct {
	Subject       string `json:"subject"`
	Target        string `json:"target"`
	MaxPathLength int    `json:"maxPathLength"`
	UsingOnly     []Edge `json:"usingOnly"`
}

// GetSubject returns __PathInput.Subject, and is useful for accessing the field via an interface.
func (v *__PathInput) GetSubject() string { return v.Subject }

// GetTarget returns __PathInput.Target, and is useful for accessing the field via an interface.
func (v *__PathInput) GetTarget() string { return v.Target }

// GetMaxPathLength returns __PathInput.MaxPathLength, and is useful for accessing the field via an interface.
func (v *__PathInput) GetMaxPathLength() int { return v.MaxPathLength }

// GetUsingOnly returns __PathInput.UsingOnly, and is useful for accessing the field via an interface.
func (v *__PathInput) GetUsingOnly() []Edge { return v.UsingOnly }

// __PkgEqualListInput is used internally by genqlient
type __PkgEqualListInput struct {
	Filter PkgEqualSpec `json:"filter"`
	After  *string      `json:"after"`
	First  *int         `json:"first"`
}

// GetFilter returns __PkgEqualListInput.Filter, and is useful for accessing the field via an interface.
func (v *__PkgEqualListInput) GetFilter() PkgEqualSpec { return v.Filter }

// GetAfter returns __PkgEqualListInput.After, and is useful for accessing the field via an interface.
func (v *__PkgEqualListInput) GetAfter() *string { return v.After }

// GetFirst returns __PkgEqualListInput.First, and is useful for accessing the field via an interface.
func (v *__PkgEqualListInput) GetFirst() *int { return v.First }

// __PkgEqualsInput is used internally by genqlient
type __PkgEqualsInput struct {
	Filter PkgEqualSpec `json:"filter"`
}

// GetFilter returns __PkgEqualsInput.Filter, and is useful for accessing the field via an interface.
func (v *__PkgEqualsInput) GetFilter() PkgEqualSpec { return v.Filter }

// __PointOfContactListInput is used internally by genqlient
type __PointOfContactListInput struct {
	Filter PointOfContactSpec `json:"filter"`
	After  *string            `json:"after"`
	First  *int               `json:"first"`
}

// GetFilter returns __PointOfContactListInput.Filter, and is useful for accessing the field via an interface.
func (v *__PointOfContactListInput) GetFilter() PointOfContactSpec { return v.Filter }

// GetAfter returns __PointOfContactListInput.After, and is useful for accessing the field via an interface.
func (v *__PointOfContactListInput) GetAfter() *string { return v.After }

// GetFirst returns __PointOfContactListInput.First, and is useful for accessing the field via an interface.
func (v *__PointOfContactListInput) GetFirst() *int { return v.First }

// __PointOfContactsInput is used internally by genqlient
type __PointOfContactsInput struct {
	Filter PointOfContactSpec `json:"filter"`
}

// GetFilter returns __PointOfContactsInput.Filter, and is useful for accessing the field via an interface.
func (v *__PointOfContactsInput) GetFilter() PointOfContactSpec { return v.Filter }

// __ScorecardsInput is used internally by genqlient
type __ScorecardsInput struct {
	Filter CertifyScorecardSpec `json:"filter"`
}

// GetFilter returns __ScorecardsInput.Filter, and is useful for accessing the field via an interface.
func (v *__ScorecardsInput) GetFilter() CertifyScorecardSpec { return v.Filter }

// __ScorecardsListInput is used internally by genqlient
type __ScorecardsListInput struct {
	Filter CertifyScorecardSpec `json:"filter"`
	After  *string              `json:"after"`
	First  *int                 `json:"first"`
}

// GetFilter returns __ScorecardsListInput.Filter, and is useful for accessing the field via an interface.
func (v *__ScorecardsListInput) GetFilter() CertifyScorecardSpec { return v.Filter }

// GetAfter returns __ScorecardsListInput.After, and is useful for accessing the field via an interface.
func (v *__ScorecardsListInput) GetAfter() *string { return v.After }

// GetFirst returns __ScorecardsListInput.First, and is useful for accessing the field via an interface.
func (v *__ScorecardsListInput) GetFirst() *int { return v.First }

// __SourcesInput is used internally by genqlient
type __SourcesInput struct {
	Filter SourceSpec `json:"filter"`
}

// GetFilter returns __SourcesInput.Filter, and is useful for accessing the field via an interface.
func (v *__SourcesInput) GetFilter() SourceSpec { return v.Filter }

// __SourcesListInput is used internally by genqlient
type __SourcesListInput struct {
	Filter SourceSpec `json:"filter"`
	After  *string    `json:"after"`
	First  *int       `json:"first"`
}

// GetFilter returns __SourcesListInput.Filter, and is useful for accessing the field via an interface.
func (v *__SourcesListInput) GetFilter() SourceSpec { return v.Filter }

// GetAfter returns __SourcesListInput.After, and is useful for accessing the field via an interface.
func (v *__SourcesListInput) GetAfter() *string { return v.After }

// GetFirst returns __SourcesListInput.First, and is useful for accessing the field via an interface.
func (v *__SourcesListInput) GetFirst() *int { return v.First }

// __VEXStatementListInput is used internally by genqlient
type __VEXStatementListInput struct {
	Filter CertifyVEXStatementSpec `json:"filter"`
	After  *string                 `json:"after"`
	First  *int                    `json:"first"`
}

// GetFilter returns __VEXStatementListInput.Filter, and is useful for accessing the field via an interface.
func (v *__VEXStatementListInput) GetFilter() CertifyVEXStatementSpec { return v.Filter }

// GetAfter returns __VEXStatementListInput.After, and is useful for accessing the field via an interface.
func (v *__VEXStatementListInput) GetAfter() *string { return v.After }

// GetFirst returns __VEXStatementListInput.First, and is useful for accessing the field via an interface.
func (v *__VEXStatementListInput) GetFirst() *int { return v.First }

// __VEXStatementsInput is used internally by genqlient
type __VEXStatementsInput struct {
	Filter CertifyVEXStatementSpec `json:"filter"`
}

// GetFilter returns __VEXStatementsInput.Filter, and is useful for accessing the field via an interface.
func (v *__VEXStatementsInput) GetFilter() CertifyVEXStatementSpec { return v.Filter }

// __VulnEqualListInput is used internally by genqlient
type __VulnEqualListInput struct {
	Filter VulnEqualSpec `json:"filter"`
	After  *string       `json:"after"`
	First  *int          `json:"first"`
}

// GetFilter returns __VulnEqualListInput.Filter, and is useful for accessing the field via an interface.
func (v *__VulnEqualListInput) GetFilter() VulnEqualSpec { return v.Filter }

// GetAfter returns __VulnEqualListInput.After, and is useful for accessing the field via an interface.
func (v *__VulnEqualListInput) GetAfter() *string { return v.After }

// GetFirst returns __VulnEqualListInput.First, and is useful for accessing the field via an interface.
func (v *__VulnEqualListInput) GetFirst() *int { return v.First }

// __VulnEqualsInput is used internally by genqlient
type __VulnEqualsInput struct {
	Filter VulnEqualSpec `json:"filter"`
}

// GetFilter returns __VulnEqualsInput.Filter, and is useful for accessing the field via an interface.
func (v *__VulnEqualsInput) GetFilter() VulnEqualSpec { return v.Filter }

// __VulnerabilitiesInput is used internally by genqlient
type __VulnerabilitiesInput struct {
	Filter VulnerabilitySpec `json:"filter"`
}

// GetFilter returns __VulnerabilitiesInput.Filter, and is useful for accessing the field via an interface.
func (v *__VulnerabilitiesInput) GetFilter() VulnerabilitySpec { return v.Filter }

// __VulnerabilityListInput is used internally by genqlient
type __VulnerabilityListInput struct {
	Filter VulnerabilitySpec `json:"filter"`
	After  *string           `json:"after"`
	First  *int              `json:"first"`
}

// GetFilter returns __VulnerabilityListInput.Filter, and is useful for accessing the field via an interface.
func (v *__VulnerabilityListInput) GetFilter() VulnerabilitySpec { return v.Filter }

// GetAfter returns __VulnerabilityListInput.After, and is useful for accessing the field via an interface.
func (v *__VulnerabilityListInput) GetAfter() *string { return v.After }

// GetFirst returns __VulnerabilityListInput.First, and is useful for accessing the field via an interface.
func (v *__VulnerabilityListInput) GetFirst() *int { return v.First }

// __VulnerabilityMetadataInput is used internally by genqlient
type __VulnerabilityMetadataInput struct {
	Filter VulnerabilityMetadataSpec `json:"filter"`
}

// GetFilter returns __VulnerabilityMetadataInput.Filter, and is useful for accessing the field via an interface.
func (v *__VulnerabilityMetadataInput) GetFilter() VulnerabilityMetadataSpec { return v.Filter }

// __VulnerabilityMetadataListInput is used internally by genqlient
type __VulnerabilityMetadataListInput struct {
	Filter VulnerabilityMetadataSpec `json:"filter"`
	After  *string                   `json:"after"`
	First  *int                      `json:"first"`
}

// GetFilter returns __VulnerabilityMetadataListInput.Filter, and is useful for accessing the field via an interface.
func (v *__VulnerabilityMetadataListInput) GetFilter() VulnerabilityMetadataSpec { return v.Filter }

// GetAfter returns __VulnerabilityMetadataListInput.After, and is useful for accessing the field via an interface.
func (v *__VulnerabilityMetadataListInput) GetAfter() *string { return v.After }

// GetFirst returns __VulnerabilityMetadataListInput.First, and is useful for accessing the field via an interface.
func (v *__VulnerabilityMetadataListInput) GetFirst() *int { return v.First }

// The query or mutation executed by Artifacts.
const Artifacts_Operation = `
query Artifacts ($filter: ArtifactSpec!) {
	artifacts(artifactSpec: $filter) {
		... AllArtifactTree
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func Artifacts(
	ctx_ context.Context,
	client_ graphql.Client,
	filter ArtifactSpec,
) (*ArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "Artifacts",
		Query:  Artifacts_Operation,
		Variables: &__ArtifactsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ ArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ArtifactsList.
const ArtifactsList_Operation = `
query ArtifactsList ($filter: ArtifactSpec!, $after: ID, $first: Int) {
	artifactsList(artifactSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllArtifactTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func ArtifactsList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter ArtifactSpec,
	after *string,
	first *int,
) (*ArtifactsListResponse, error) {
	req_ := &graphql.Request{
		OpName: "ArtifactsList",
		Query:  ArtifactsList_Operation,
		Variables: &__ArtifactsListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ ArtifactsListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Builders.
const Builders_Operation = `
query Builders ($filter: BuilderSpec!) {
	builders(builderSpec: $filter) {
		... AllBuilderTree
	}
}
fragment AllBuilderTree on Builder {
	id
	uri
}
`

func Builders(
	ctx_ context.Context,
	client_ graphql.Client,
	filter BuilderSpec,
) (*BuildersResponse, error) {
	req_ := &graphql.Request{
		OpName: "Builders",
		Query:  Builders_Operation,
		Variables: &__BuildersInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ BuildersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by BuildersList.
const BuildersList_Operation = `
query BuildersList ($filter: BuilderSpec!, $after: ID, $first: Int) {
	buildersList(builderSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllBuilderTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllBuilderTree on Builder {
	id
	uri
}
`

func BuildersList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter BuilderSpec,
	after *string,
	first *int,
) (*BuildersListResponse, error) {
	req_ := &graphql.Request{
		OpName: "BuildersList",
		Query:  BuildersList_Operation,
		Variables: &__BuildersListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ BuildersListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CertifyBad.
const CertifyBad_Operation = `
query CertifyBad ($filter: CertifyBadSpec!) {
	CertifyBad(certifyBadSpec: $filter) {
		... AllCertifyBad
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyBad(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyBadSpec,
) (*CertifyBadResponse, error) {
	req_ := &graphql.Request{
		OpName: "CertifyBad",
		Query:  CertifyBad_Operation,
		Variables: &__CertifyBadInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ CertifyBadResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CertifyBadList.
const CertifyBadList_Operation = `
query CertifyBadList ($filter: CertifyBadSpec!, $after: ID, $first: Int) {
	CertifyBadList(certifyBadSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllCertifyBad
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyBadList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyBadSpec,
	after *string,
	first *int,
) (*CertifyBadListResponse, error) {
	req_ := &graphql.Request{
		OpName: "CertifyBadList",
		Query:  CertifyBadList_Operation,
		Variables: &__CertifyBadListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ CertifyBadListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CertifyGood.
const CertifyGood_Operation = `
query CertifyGood ($filter: CertifyGoodSpec!) {
	CertifyGood(certifyGoodSpec: $filter) {
		... AllCertifyGood
	}
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyGood(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyGoodSpec,
) (*CertifyGoodResponse, error) {
	req_ := &graphql.Request{
		OpName: "CertifyGood",
		Query:  CertifyGood_Operation,
		Variables: &__CertifyGoodInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ CertifyGoodResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CertifyGoodList.
const CertifyGoodList_Operation = `
query CertifyGoodList ($filter: CertifyGoodSpec!, $after: ID, $first: Int) {
	CertifyGoodList(certifyGoodSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllCertifyGood
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func CertifyGoodList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyGoodSpec,
	after *string,
	first *int,
) (*CertifyGoodListResponse, error) {
	req_ := &graphql.Request{
		OpName: "CertifyGoodList",
		Query:  CertifyGoodList_Operation,
		Variables: &__CertifyGoodListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ CertifyGoodListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CertifyLegal.
const CertifyLegal_Operation = `
query CertifyLegal ($filter: CertifyLegalSpec!) {
	CertifyLegal(certifyLegalSpec: $filter) {
		... AllCertifyLegalTree
	}
}
fragment AllCertifyLegalTree on CertifyLegal {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	declaredLicense
	declaredLicenses {
		... AllLicenseTree
	}
	discoveredLicense
	discoveredLicenses {
		... AllLicenseTree
	}
	attribution
	justification
	timeScanned
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllLicenseTree on License {
	id
	name
	inline
	listVersion
}
`

func CertifyLegal(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyLegalSpec,
) (*CertifyLegalResponse, error) {
	req_ := &graphql.Request{
		OpName: "CertifyLegal",
		Query:  CertifyLegal_Operation,
		Variables: &__CertifyLegalInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ CertifyLegalResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CertifyLegalList.
const CertifyLegalList_Operation = `
query CertifyLegalList ($filter: CertifyLegalSpec!, $after: ID, $first: Int) {
	CertifyLegalList(certifyLegalSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllCertifyLegalTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllCertifyLegalTree on CertifyLegal {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	declaredLicense
	declaredLicenses {
		... AllLicenseTree
	}
	discoveredLicense
	discoveredLicenses {
		... AllLicenseTree
	}
	attribution
	justification
	timeScanned
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllLicenseTree on License {
	id
	name
	inline
	listVersion
}
`

func CertifyLegalList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyLegalSpec,
	after *string,
	first *int,
) (*CertifyLegalListResponse, error) {
	req_ := &graphql.Request{
		OpName: "CertifyLegalList",
		Query:  CertifyLegalList_Operation,
		Variables: &__CertifyLegalListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ CertifyLegalListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CertifyVuln.
const CertifyVuln_Operation = `
query CertifyVuln ($filter: CertifyVulnSpec!) {
	CertifyVuln(certifyVulnSpec: $filter) {
		... AllCertifyVuln
	}
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
`

func CertifyVuln(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyVulnSpec,
) (*CertifyVulnResponse, error) {
	req_ := &graphql.Request{
		OpName: "CertifyVuln",
		Query:  CertifyVuln_Operation,
		Variables: &__CertifyVulnInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ CertifyVulnResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CertifyVulnList.
const CertifyVulnList_Operation = `
query CertifyVulnList ($filter: CertifyVulnSpec!, $after: ID, $first: Int) {
	CertifyVulnList(certifyVulnSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllCertifyVuln
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
`

func CertifyVulnList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyVulnSpec,
	after *string,
	first *int,
) (*CertifyVulnListResponse, error) {
	req_ := &graphql.Request{
		OpName: "CertifyVulnList",
		Query:  CertifyVulnList_Operation,
		Variables: &__CertifyVulnListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ CertifyVulnListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Dependencies.
const Dependencies_Operation = `
query Dependencies ($filter: IsDependencySpec!) {
	IsDependency(isDependencySpec: $filter) {
		... AllIsDependencyTree
	}
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependencyPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func Dependencies(
	ctx_ context.Context,
	client_ graphql.Client,
	filter IsDependencySpec,
) (*DependenciesResponse, error) {
	req_ := &graphql.Request{
		OpName: "Dependencies",
		Query:  Dependencies_Operation,
		Variables: &__DependenciesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ DependenciesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DependencyList.
const DependencyList_Operation = `
query DependencyList ($filter: IsDependencySpec!, $after: ID, $first: Int) {
	IsDependencyList(isDependencySpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllIsDependencyTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependencyPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func DependencyList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter IsDependencySpec,
	after *string,
	first *int,
) (*DependencyListResponse, error) {
	req_ := &graphql.Request{
		OpName: "DependencyList",
		Query:  DependencyList_Operation,
		Variables: &__DependencyListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ DependencyListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by FindSoftware.
const FindSoftware_Operation = `
query FindSoftware ($searchText: String!) {
	findSoftware(searchText: $searchText) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func FindSoftware(
	ctx_ context.Context,
	client_ graphql.Client,
	searchText string,
) (*FindSoftwareResponse, error) {
	req_ := &graphql.Request{
		OpName: "FindSoftware",
		Query:  FindSoftware_Operation,
		Variables: &__FindSoftwareInput{
			SearchText: searchText,
		},
	}
	var err_ error

	var data_ FindSoftwareResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by HasMetadata.
const HasMetadata_Operation = `
query HasMetadata ($filter: HasMetadataSpec!) {
	HasMetadata(hasMetadataSpec: $filter) {
		... AllHasMetadata
	}
}
fragment AllHasMetadata on HasMetadata {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	key
	value
	timestamp
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func HasMetadata(
	ctx_ context.Context,
	client_ graphql.Client,
	filter HasMetadataSpec,
) (*HasMetadataResponse, error) {
	req_ := &graphql.Request{
		OpName: "HasMetadata",
		Query:  HasMetadata_Operation,
		Variables: &__HasMetadataInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ HasMetadataResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by HasMetadataList.
const HasMetadataList_Operation = `
query HasMetadataList ($filter: HasMetadataSpec!, $after: ID, $first: Int) {
	HasMetadataList(hasMetadataSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllHasMetadata
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllHasMetadata on HasMetadata {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	key
	value
	timestamp
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func HasMetadataList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter HasMetadataSpec,
	after *string,
	first *int,
) (*HasMetadataListResponse, error) {
	req_ := &graphql.Request{
		OpName: "HasMetadataList",
		Query:  HasMetadataList_Operation,
		Variables: &__HasMetadataListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ HasMetadataListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by HasSBOMList.
const HasSBOMList_Operation = `
query HasSBOMList ($filter: HasSBOMSpec!, $after: ID, $first: Int) {
	HasSBOMList(hasSBOMSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllHasSBOMTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
	knownSince
	includedSoftware {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	includedDependencies {
		... AllIsDependencyTree
	}
	includedOccurrences {
		... AllIsOccurrencesTree
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependencyPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func HasSBOMList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter HasSBOMSpec,
	after *string,
	first *int,
) (*HasSBOMListResponse, error) {
	req_ := &graphql.Request{
		OpName: "HasSBOMList",
		Query:  HasSBOMList_Operation,
		Variables: &__HasSBOMListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ HasSBOMListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by HasSBOMs.
const HasSBOMs_Operation = `
query HasSBOMs ($filter: HasSBOMSpec!) {
	HasSBOM(hasSBOMSpec: $filter) {
		... AllHasSBOMTree
	}
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
	knownSince
	includedSoftware {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	includedDependencies {
		... AllIsDependencyTree
	}
	includedOccurrences {
		... AllIsOccurrencesTree
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependencyPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func HasSBOMs(
	ctx_ context.Context,
	client_ graphql.Client,
	filter HasSBOMSpec,
) (*HasSBOMsResponse, error) {
	req_ := &graphql.Request{
		OpName: "HasSBOMs",
		Query:  HasSBOMs_Operation,
		Variables: &__HasSBOMsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ HasSBOMsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by HasSLSA.
const HasSLSA_Operation = `
query HasSLSA ($filter: HasSLSASpec!) {
	HasSLSA(hasSLSASpec: $filter) {
		... AllHasSLSATree
	}
}
fragment AllHasSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			... AllBuilderTree
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
		documentRef
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllBuilderTree on Builder {
	id
	uri
}
`

func HasSLSA(
	ctx_ context.Context,
	client_ graphql.Client,
	filter HasSLSASpec,
) (*HasSLSAResponse, error) {
	req_ := &graphql.Request{
		OpName: "HasSLSA",
		Query:  HasSLSA_Operation,
		Variables: &__HasSLSAInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ HasSLSAResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by HasSLSAList.
const HasSLSAList_Operation = `
query HasSLSAList ($filter: HasSLSASpec!, $after: ID, $first: Int) {
	HasSLSAList(hasSLSASpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllHasSLSATree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllHasSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			... AllBuilderTree
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
		documentRef
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllBuilderTree on Builder {
	id
	uri
}
`

func HasSLSAList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter HasSLSASpec,
	after *string,
	first *int,
) (*HasSLSAListResponse, error) {
	req_ := &graphql.Request{
		OpName: "HasSLSAList",
		Query:  HasSLSAList_Operation,
		Variables: &__HasSLSAListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ HasSLSAListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by HasSourceAt.
const HasSourceAt_Operation = `
query HasSourceAt ($filter: HasSourceAtSpec!) {
	HasSourceAt(hasSourceAtSpec: $filter) {
		... AllHasSourceAt
	}
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func HasSourceAt(
	ctx_ context.Context,
	client_ graphql.Client,
	filter HasSourceAtSpec,
) (*HasSourceAtResponse, error) {
	req_ := &graphql.Request{
		OpName: "HasSourceAt",
		Query:  HasSourceAt_Operation,
		Variables: &__HasSourceAtInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ HasSourceAtResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by HasSourceAtList.
const HasSourceAtList_Operation = `
query HasSourceAtList ($filter: HasSourceAtSpec!, $after: ID, $first: Int) {
	HasSourceAtList(hasSourceAtSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllHasSourceAt
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func HasSourceAtList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter HasSourceAtSpec,
	after *string,
	first *int,
) (*HasSourceAtListResponse, error) {
	req_ := &graphql.Request{
		OpName: "HasSourceAtList",
		Query:  HasSourceAtList_Operation,
		Variables: &__HasSourceAtListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ HasSourceAtListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by HashEqualList.
const HashEqualList_Operation = `
query HashEqualList ($filter: HashEqualSpec!, $after: ID, $first: Int) {
	HashEqualList(hashEqualSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllHashEqualTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func HashEqualList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter HashEqualSpec,
	after *string,
	first *int,
) (*HashEqualListResponse, error) {
	req_ := &graphql.Request{
		OpName: "HashEqualList",
		Query:  HashEqualList_Operation,
		Variables: &__HashEqualListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ HashEqualListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by HashEquals.
const HashEquals_Operation = `
query HashEquals ($filter: HashEqualSpec!) {
	HashEqual(hashEqualSpec: $filter) {
		... AllHashEqualTree
	}
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func HashEquals(
	ctx_ context.Context,
	client_ graphql.Client,
	filter HashEqualSpec,
) (*HashEqualsResponse, error) {
	req_ := &graphql.Request{
		OpName: "HashEquals",
		Query:  HashEquals_Operation,
		Variables: &__HashEqualsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ HashEqualsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestArtifact.
const IngestArtifact_Operation = `
mutation IngestArtifact ($artifact: IDorArtifactInput!) {
	ingestArtifact(artifact: $artifact)
}
`

func IngestArtifact(
	ctx_ context.Context,
	client_ graphql.Client,
	artifact IDorArtifactInput,
) (*IngestArtifactResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestArtifact",
		Query:  IngestArtifact_Operation,
		Variables: &__IngestArtifactInput{
			Artifact: artifact,
		},
	}
	var err_ error

	var data_ IngestArtifactResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestArtifacts.
const IngestArtifacts_Operation = `
mutation IngestArtifacts ($artifacts: [IDorArtifactInput!]!) {
	ingestArtifacts(artifacts: $artifacts)
}
`

func IngestArtifacts(
	ctx_ context.Context,
	client_ graphql.Client,
	artifacts []IDorArtifactInput,
) (*IngestArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestArtifacts",
		Query:  IngestArtifacts_Operation,
		Variables: &__IngestArtifactsInput{
			Artifacts: artifacts,
		},
	}
	var err_ error

	var data_ IngestArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestBuilder.
const IngestBuilder_Operation = `
mutation IngestBuilder ($builder: IDorBuilderInput!) {
	ingestBuilder(builder: $builder)
}
`

func IngestBuilder(
	ctx_ context.Context,
	client_ graphql.Client,
	builder IDorBuilderInput,
) (*IngestBuilderResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestBuilder",
		Query:  IngestBuilder_Operation,
		Variables: &__IngestBuilderInput{
			Builder: builder,
		},
	}
	var err_ error

	var data_ IngestBuilderResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestBuilders.
const IngestBuilders_Operation = `
mutation IngestBuilders ($builders: [IDorBuilderInput!]!) {
	ingestBuilders(builders: $builders)
}
`

func IngestBuilders(
	ctx_ context.Context,
	client_ graphql.Client,
	builders []IDorBuilderInput,
) (*IngestBuildersResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestBuilders",
		Query:  IngestBuilders_Operation,
		Variables: &__IngestBuildersInput{
			Builders: builders,
		},
	}
	var err_ error

	var data_ IngestBuildersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestBulkVulnHasMetadata.
const IngestBulkVulnHasMetadata_Operation = `
mutation IngestBulkVulnHasMetadata ($vulnerabilities: [IDorVulnerabilityInput!]!, $vulnerabilityMetadataList: [VulnerabilityMetadataInputSpec!]!) {
	ingestBulkVulnerabilityMetadata(vulnerabilities: $vulnerabilities, vulnerabilityMetadataList: $vulnerabilityMetadataList)
}
`

func IngestBulkVulnHasMetadata(
	ctx_ context.Context,
	client_ graphql.Client,
	vulnerabilities []IDorVulnerabilityInput,
	vulnerabilityMetadataList []VulnerabilityMetadataInputSpec,
) (*IngestBulkVulnHasMetadataResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestBulkVulnHasMetadata",
		Query:  IngestBulkVulnHasMetadata_Operation,
		Variables: &__IngestBulkVulnHasMetadataInput{
			Vulnerabilities:           vulnerabilities,
			VulnerabilityMetadataList: vulnerabilityMetadataList,
		},
	}
	var err_ error

	var data_ IngestBulkVulnHasMetadataResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyBadArtifact.
const IngestCertifyBadArtifact_Operation = `
mutation IngestCertifyBadArtifact ($artifact: IDorArtifactInput!, $certifyBad: CertifyBadInputSpec!) {
	ingestCertifyBad(subject: {artifact:$artifact}, pkgMatchType: {pkg:ALL_VERSIONS}, certifyBad: $certifyBad)
}
`

func IngestCertifyBadArtifact(
	ctx_ context.Context,
	client_ graphql.Client,
	artifact IDorArtifactInput,
	certifyBad CertifyBadInputSpec,
) (*IngestCertifyBadArtifactResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyBadArtifact",
		Query:  IngestCertifyBadArtifact_Operation,
		Variables: &__IngestCertifyBadArtifactInput{
			Artifact:   artifact,
			CertifyBad: certifyBad,
		},
	}
	var err_ error

	var data_ IngestCertifyBadArtifactResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyBadArtifacts.
const IngestCertifyBadArtifacts_Operation = `
mutation IngestCertifyBadArtifacts ($artifacts: [IDorArtifactInput!]!, $certifyBads: [CertifyBadInputSpec!]!) {
	ingestCertifyBads(subjects: {artifacts:$artifacts}, pkgMatchType: {pkg:ALL_VERSIONS}, certifyBads: $certifyBads)
}
`

func IngestCertifyBadArtifacts(
	ctx_ context.Context,
	client_ graphql.Client,
	artifacts []IDorArtifactInput,
	certifyBads []CertifyBadInputSpec,
) (*IngestCertifyBadArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyBadArtifacts",
		Query:  IngestCertifyBadArtifacts_Operation,
		Variables: &__IngestCertifyBadArtifactsInput{
			Artifacts:   artifacts,
			CertifyBads: certifyBads,
		},
	}
	var err_ error

	var data_ IngestCertifyBadArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyBadPkg.
const IngestCertifyBadPkg_Operation = `
mutation IngestCertifyBadPkg ($pkg: IDorPkgInput!, $pkgMatchType: MatchFlags!, $certifyBad: CertifyBadInputSpec!) {
	ingestCertifyBad(subject: {package:$pkg}, pkgMatchType: $pkgMatchType, certifyBad: $certifyBad)
}
`

func IngestCertifyBadPkg(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	pkgMatchType MatchFlags,
	certifyBad CertifyBadInputSpec,
) (*IngestCertifyBadPkgResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyBadPkg",
		Query:  IngestCertifyBadPkg_Operation,
		Variables: &__IngestCertifyBadPkgInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			CertifyBad:   certifyBad,
		},
	}
	var err_ error

	var data_ IngestCertifyBadPkgResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyBadPkgs.
const IngestCertifyBadPkgs_Operation = `
mutation IngestCertifyBadPkgs ($pkgs: [IDorPkgInput!]!, $pkgMatchType: MatchFlags!, $certifyBads: [CertifyBadInputSpec!]!) {
	ingestCertifyBads(subjects: {packages:$pkgs}, pkgMatchType: $pkgMatchType, certifyBads: $certifyBads)
}
`

func IngestCertifyBadPkgs(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	pkgMatchType MatchFlags,
	certifyBads []CertifyBadInputSpec,
) (*IngestCertifyBadPkgsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyBadPkgs",
		Query:  IngestCertifyBadPkgs_Operation,
		Variables: &__IngestCertifyBadPkgsInput{
			Pkgs:         pkgs,
			PkgMatchType: pkgMatchType,
			CertifyBads:  certifyBads,
		},
	}
	var err_ error

	var data_ IngestCertifyBadPkgsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyBadSrc.
const IngestCertifyBadSrc_Operation = `
mutation IngestCertifyBadSrc ($source: IDorSourceInput!, $certifyBad: CertifyBadInputSpec!) {
	ingestCertifyBad(subject: {source:$source}, pkgMatchType: {pkg:ALL_VERSIONS}, certifyBad: $certifyBad)
}
`

func IngestCertifyBadSrc(
	ctx_ context.Context,
	client_ graphql.Client,
	source IDorSourceInput,
	certifyBad CertifyBadInputSpec,
) (*IngestCertifyBadSrcResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyBadSrc",
		Query:  IngestCertifyBadSrc_Operation,
		Variables: &__IngestCertifyBadSrcInput{
			Source:     source,
			CertifyBad: certifyBad,
		},
	}
	var err_ error

	var data_ IngestCertifyBadSrcResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyBadSrcs.
const IngestCertifyBadSrcs_Operation = `
mutation IngestCertifyBadSrcs ($sources: [IDorSourceInput!]!, $certifyBads: [CertifyBadInputSpec!]!) {
	ingestCertifyBads(subjects: {sources:$sources}, pkgMatchType: {pkg:ALL_VERSIONS}, certifyBads: $certifyBads)
}
`

func IngestCertifyBadSrcs(
	ctx_ context.Context,
	client_ graphql.Client,
	sources []IDorSourceInput,
	certifyBads []CertifyBadInputSpec,
) (*IngestCertifyBadSrcsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyBadSrcs",
		Query:  IngestCertifyBadSrcs_Operation,
		Variables: &__IngestCertifyBadSrcsInput{
			Sources:     sources,
			CertifyBads: certifyBads,
		},
	}
	var err_ error

	var data_ IngestCertifyBadSrcsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyGoodArtifact.
const IngestCertifyGoodArtifact_Operation = `
mutation IngestCertifyGoodArtifact ($artifact: IDorArtifactInput!, $certifyGood: CertifyGoodInputSpec!) {
	ingestCertifyGood(subject: {artifact:$artifact}, pkgMatchType: {pkg:ALL_VERSIONS}, certifyGood: $certifyGood)
}
`

func IngestCertifyGoodArtifact(
	ctx_ context.Context,
	client_ graphql.Client,
	artifact IDorArtifactInput,
	certifyGood CertifyGoodInputSpec,
) (*IngestCertifyGoodArtifactResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyGoodArtifact",
		Query:  IngestCertifyGoodArtifact_Operation,
		Variables: &__IngestCertifyGoodArtifactInput{
			Artifact:    artifact,
			CertifyGood: certifyGood,
		},
	}
	var err_ error

	var data_ IngestCertifyGoodArtifactResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyGoodArtifacts.
const IngestCertifyGoodArtifacts_Operation = `
mutation IngestCertifyGoodArtifacts ($artifacts: [IDorArtifactInput!]!, $certifyGoods: [CertifyGoodInputSpec!]!) {
	ingestCertifyGoods(subjects: {artifacts:$artifacts}, pkgMatchType: {pkg:ALL_VERSIONS}, certifyGoods: $certifyGoods)
}
`

func IngestCertifyGoodArtifacts(
	ctx_ context.Context,
	client_ graphql.Client,
	artifacts []IDorArtifactInput,
	certifyGoods []CertifyGoodInputSpec,
) (*IngestCertifyGoodArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyGoodArtifacts",
		Query:  IngestCertifyGoodArtifacts_Operation,
		Variables: &__IngestCertifyGoodArtifactsInput{
			Artifacts:    artifacts,
			CertifyGoods: certifyGoods,
		},
	}
	var err_ error

	var data_ IngestCertifyGoodArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyGoodPkg.
const IngestCertifyGoodPkg_Operation = `
mutation IngestCertifyGoodPkg ($pkg: IDorPkgInput!, $pkgMatchType: MatchFlags!, $certifyGood: CertifyGoodInputSpec!) {
	ingestCertifyGood(subject: {package:$pkg}, pkgMatchType: $pkgMatchType, certifyGood: $certifyGood)
}
`

func IngestCertifyGoodPkg(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	pkgMatchType MatchFlags,
	certifyGood CertifyGoodInputSpec,
) (*IngestCertifyGoodPkgResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyGoodPkg",
		Query:  IngestCertifyGoodPkg_Operation,
		Variables: &__IngestCertifyGoodPkgInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			CertifyGood:  certifyGood,
		},
	}
	var err_ error

	var data_ IngestCertifyGoodPkgResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyGoodPkgs.
const IngestCertifyGoodPkgs_Operation = `
mutation IngestCertifyGoodPkgs ($pkgs: [IDorPkgInput!]!, $pkgMatchType: MatchFlags!, $certifyGoods: [CertifyGoodInputSpec!]!) {
	ingestCertifyGoods(subjects: {packages:$pkgs}, pkgMatchType: $pkgMatchType, certifyGoods: $certifyGoods)
}
`

func IngestCertifyGoodPkgs(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	pkgMatchType MatchFlags,
	certifyGoods []CertifyGoodInputSpec,
) (*IngestCertifyGoodPkgsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyGoodPkgs",
		Query:  IngestCertifyGoodPkgs_Operation,
		Variables: &__IngestCertifyGoodPkgsInput{
			Pkgs:         pkgs,
			PkgMatchType: pkgMatchType,
			CertifyGoods: certifyGoods,
		},
	}
	var err_ error

	var data_ IngestCertifyGoodPkgsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyGoodSrc.
const IngestCertifyGoodSrc_Operation = `
mutation IngestCertifyGoodSrc ($source: IDorSourceInput!, $certifyGood: CertifyGoodInputSpec!) {
	ingestCertifyGood(subject: {source:$source}, pkgMatchType: {pkg:ALL_VERSIONS}, certifyGood: $certifyGood)
}
`

func IngestCertifyGoodSrc(
	ctx_ context.Context,
	client_ graphql.Client,
	source IDorSourceInput,
	certifyGood CertifyGoodInputSpec,
) (*IngestCertifyGoodSrcResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyGoodSrc",
		Query:  IngestCertifyGoodSrc_Operation,
		Variables: &__IngestCertifyGoodSrcInput{
			Source:      source,
			CertifyGood: certifyGood,
		},
	}
	var err_ error

	var data_ IngestCertifyGoodSrcResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyGoodSrcs.
const IngestCertifyGoodSrcs_Operation = `
mutation IngestCertifyGoodSrcs ($sources: [IDorSourceInput!]!, $certifyGoods: [CertifyGoodInputSpec!]!) {
	ingestCertifyGoods(subjects: {sources:$sources}, pkgMatchType: {pkg:ALL_VERSIONS}, certifyGoods: $certifyGoods)
}
`

func IngestCertifyGoodSrcs(
	ctx_ context.Context,
	client_ graphql.Client,
	sources []IDorSourceInput,
	certifyGoods []CertifyGoodInputSpec,
) (*IngestCertifyGoodSrcsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyGoodSrcs",
		Query:  IngestCertifyGoodSrcs_Operation,
		Variables: &__IngestCertifyGoodSrcsInput{
			Sources:      sources,
			CertifyGoods: certifyGoods,
		},
	}
	var err_ error

	var data_ IngestCertifyGoodSrcsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyLegalPkg.
const IngestCertifyLegalPkg_Operation = `
mutation IngestCertifyLegalPkg ($pkg: IDorPkgInput!, $declaredLicenses: [IDorLicenseInput!]!, $discoveredLicenses: [IDorLicenseInput!]!, $legal: CertifyLegalInputSpec!) {
	ingestCertifyLegal(subject: {package:$pkg}, declaredLicenses: $declaredLicenses, discoveredLicenses: $discoveredLicenses, certifyLegal: $legal)
}
`

func IngestCertifyLegalPkg(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	declaredLicenses []IDorLicenseInput,
	discoveredLicenses []IDorLicenseInput,
	legal CertifyLegalInputSpec,
) (*IngestCertifyLegalPkgResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyLegalPkg",
		Query:  IngestCertifyLegalPkg_Operation,
		Variables: &__IngestCertifyLegalPkgInput{
			Pkg:                pkg,
			DeclaredLicenses:   declaredLicenses,
			DiscoveredLicenses: discoveredLicenses,
			Legal:              legal,
		},
	}
	var err_ error

	var data_ IngestCertifyLegalPkgResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyLegalPkgs.
const IngestCertifyLegalPkgs_Operation = `
mutation IngestCertifyLegalPkgs ($pkgs: [IDorPkgInput!]!, $declaredLicensesList: [[IDorLicenseInput!]!]!, $discoveredLicensesList: [[IDorLicenseInput!]!]!, $legals: [CertifyLegalInputSpec!]!) {
	ingestCertifyLegals(subjects: {packages:$pkgs}, declaredLicensesList: $declaredLicensesList, discoveredLicensesList: $discoveredLicensesList, certifyLegals: $legals)
}
`

func IngestCertifyLegalPkgs(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	declaredLicensesList [][]IDorLicenseInput,
	discoveredLicensesList [][]IDorLicenseInput,
	legals []CertifyLegalInputSpec,
) (*IngestCertifyLegalPkgsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyLegalPkgs",
		Query:  IngestCertifyLegalPkgs_Operation,
		Variables: &__IngestCertifyLegalPkgsInput{
			Pkgs:                   pkgs,
			DeclaredLicensesList:   declaredLicensesList,
			DiscoveredLicensesList: discoveredLicensesList,
			Legals:                 legals,
		},
	}
	var err_ error

	var data_ IngestCertifyLegalPkgsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyLegalSrc.
const IngestCertifyLegalSrc_Operation = `
mutation IngestCertifyLegalSrc ($src: IDorSourceInput!, $declaredLicenses: [IDorLicenseInput!]!, $discoveredLicenses: [IDorLicenseInput!]!, $legal: CertifyLegalInputSpec!) {
	ingestCertifyLegal(subject: {source:$src}, declaredLicenses: $declaredLicenses, discoveredLicenses: $discoveredLicenses, certifyLegal: $legal)
}
`

func IngestCertifyLegalSrc(
	ctx_ context.Context,
	client_ graphql.Client,
	src IDorSourceInput,
	declaredLicenses []IDorLicenseInput,
	discoveredLicenses []IDorLicenseInput,
	legal CertifyLegalInputSpec,
) (*IngestCertifyLegalSrcResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyLegalSrc",
		Query:  IngestCertifyLegalSrc_Operation,
		Variables: &__IngestCertifyLegalSrcInput{
			Src:                src,
			DeclaredLicenses:   declaredLicenses,
			DiscoveredLicenses: discoveredLicenses,
			Legal:              legal,
		},
	}
	var err_ error

	var data_ IngestCertifyLegalSrcResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyLegalSrcs.
const IngestCertifyLegalSrcs_Operation = `
mutation IngestCertifyLegalSrcs ($srcs: [IDorSourceInput!]!, $declaredLicensesList: [[IDorLicenseInput!]!]!, $discoveredLicensesList: [[IDorLicenseInput!]!]!, $legals: [CertifyLegalInputSpec!]!) {
	ingestCertifyLegals(subjects: {sources:$srcs}, declaredLicensesList: $declaredLicensesList, discoveredLicensesList: $discoveredLicensesList, certifyLegals: $legals)
}
`

func IngestCertifyLegalSrcs(
	ctx_ context.Context,
	client_ graphql.Client,
	srcs []IDorSourceInput,
	declaredLicensesList [][]IDorLicenseInput,
	discoveredLicensesList [][]IDorLicenseInput,
	legals []CertifyLegalInputSpec,
) (*IngestCertifyLegalSrcsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyLegalSrcs",
		Query:  IngestCertifyLegalSrcs_Operation,
		Variables: &__IngestCertifyLegalSrcsInput{
			Srcs:                   srcs,
			DeclaredLicensesList:   declaredLicensesList,
			DiscoveredLicensesList: discoveredLicensesList,
			Legals:                 legals,
		},
	}
	var err_ error

	var data_ IngestCertifyLegalSrcsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyScorecard.
const IngestCertifyScorecard_Operation = `
mutation IngestCertifyScorecard ($source: IDorSourceInput!, $scorecard: ScorecardInputSpec!) {
	ingestScorecard(source: $source, scorecard: $scorecard)
}
`

func IngestCertifyScorecard(
	ctx_ context.Context,
	client_ graphql.Client,
	source IDorSourceInput,
	scorecard ScorecardInputSpec,
) (*IngestCertifyScorecardResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyScorecard",
		Query:  IngestCertifyScorecard_Operation,
		Variables: &__IngestCertifyScorecardInput{
			Source:    source,
			Scorecard: scorecard,
		},
	}
	var err_ error

	var data_ IngestCertifyScorecardResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyScorecards.
const IngestCertifyScorecards_Operation = `
mutation IngestCertifyScorecards ($sources: [IDorSourceInput!]!, $scorecards: [ScorecardInputSpec!]!) {
	ingestScorecards(sources: $sources, scorecards: $scorecards)
}
`

func IngestCertifyScorecards(
	ctx_ context.Context,
	client_ graphql.Client,
	sources []IDorSourceInput,
	scorecards []ScorecardInputSpec,
) (*IngestCertifyScorecardsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyScorecards",
		Query:  IngestCertifyScorecards_Operation,
		Variables: &__IngestCertifyScorecardsInput{
			Sources:    sources,
			Scorecards: scorecards,
		},
	}
	var err_ error

	var data_ IngestCertifyScorecardsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyVexArtifact.
const IngestCertifyVexArtifact_Operation = `
mutation IngestCertifyVexArtifact ($artifact: IDorArtifactInput!, $vulnerability: IDorVulnerabilityInput!, $vexStatement: VexStatementInputSpec!) {
	ingestVEXStatement(subject: {artifact:$artifact}, vulnerability: $vulnerability, vexStatement: $vexStatement)
}
`

func IngestCertifyVexArtifact(
	ctx_ context.Context,
	client_ graphql.Client,
	artifact IDorArtifactInput,
	vulnerability IDorVulnerabilityInput,
	vexStatement VexStatementInputSpec,
) (*IngestCertifyVexArtifactResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyVexArtifact",
		Query:  IngestCertifyVexArtifact_Operation,
		Variables: &__IngestCertifyVexArtifactInput{
			Artifact:      artifact,
			Vulnerability: vulnerability,
			VexStatement:  vexStatement,
		},
	}
	var err_ error

	var data_ IngestCertifyVexArtifactResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyVexArtifacts.
const IngestCertifyVexArtifacts_Operation = `
mutation IngestCertifyVexArtifacts ($artifacts: [IDorArtifactInput!]!, $vulnerabilities: [IDorVulnerabilityInput!]!, $vexStatements: [VexStatementInputSpec!]!) {
	ingestVEXStatements(subjects: {artifacts:$artifacts}, vulnerabilities: $vulnerabilities, vexStatements: $vexStatements)
}
`

func IngestCertifyVexArtifacts(
	ctx_ context.Context,
	client_ graphql.Client,
	artifacts []IDorArtifactInput,
	vulnerabilities []IDorVulnerabilityInput,
	vexStatements []VexStatementInputSpec,
) (*IngestCertifyVexArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyVexArtifacts",
		Query:  IngestCertifyVexArtifacts_Operation,
		Variables: &__IngestCertifyVexArtifactsInput{
			Artifacts:       artifacts,
			Vulnerabilities: vulnerabilities,
			VexStatements:   vexStatements,
		},
	}
	var err_ error

	var data_ IngestCertifyVexArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyVexPkg.
const IngestCertifyVexPkg_Operation = `
mutation IngestCertifyVexPkg ($pkg: IDorPkgInput!, $vulnerability: IDorVulnerabilityInput!, $vexStatement: VexStatementInputSpec!) {
	ingestVEXStatement(subject: {package:$pkg}, vulnerability: $vulnerability, vexStatement: $vexStatement)
}
`

func IngestCertifyVexPkg(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	vulnerability IDorVulnerabilityInput,
	vexStatement VexStatementInputSpec,
) (*IngestCertifyVexPkgResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyVexPkg",
		Query:  IngestCertifyVexPkg_Operation,
		Variables: &__IngestCertifyVexPkgInput{
			Pkg:           pkg,
			Vulnerability: vulnerability,
			VexStatement:  vexStatement,
		},
	}
	var err_ error

	var data_ IngestCertifyVexPkgResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyVexPkgs.
const IngestCertifyVexPkgs_Operation = `
mutation IngestCertifyVexPkgs ($pkgs: [IDorPkgInput!]!, $vulnerabilities: [IDorVulnerabilityInput!]!, $vexStatements: [VexStatementInputSpec!]!) {
	ingestVEXStatements(subjects: {packages:$pkgs}, vulnerabilities: $vulnerabilities, vexStatements: $vexStatements)
}
`

func IngestCertifyVexPkgs(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	vulnerabilities []IDorVulnerabilityInput,
	vexStatements []VexStatementInputSpec,
) (*IngestCertifyVexPkgsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyVexPkgs",
		Query:  IngestCertifyVexPkgs_Operation,
		Variables: &__IngestCertifyVexPkgsInput{
			Pkgs:            pkgs,
			Vulnerabilities: vulnerabilities,
			VexStatements:   vexStatements,
		},
	}
	var err_ error

	var data_ IngestCertifyVexPkgsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyVulnPkg.
const IngestCertifyVulnPkg_Operation = `
mutation IngestCertifyVulnPkg ($pkg: IDorPkgInput!, $vulnerability: IDorVulnerabilityInput!, $certifyVuln: ScanMetadataInput!) {
	ingestCertifyVuln(pkg: $pkg, vulnerability: $vulnerability, certifyVuln: $certifyVuln)
}
`

func IngestCertifyVulnPkg(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	vulnerability IDorVulnerabilityInput,
	certifyVuln ScanMetadataInput,
) (*IngestCertifyVulnPkgResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyVulnPkg",
		Query:  IngestCertifyVulnPkg_Operation,
		Variables: &__IngestCertifyVulnPkgInput{
			Pkg:           pkg,
			Vulnerability: vulnerability,
			CertifyVuln:   certifyVuln,
		},
	}
	var err_ error

	var data_ IngestCertifyVulnPkgResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestCertifyVulnPkgs.
const IngestCertifyVulnPkgs_Operation = `
mutation IngestCertifyVulnPkgs ($pkgs: [IDorPkgInput!]!, $vulnerabilities: [IDorVulnerabilityInput!]!, $certifyVulns: [ScanMetadataInput!]!) {
	ingestCertifyVulns(pkgs: $pkgs, vulnerabilities: $vulnerabilities, certifyVulns: $certifyVulns)
}
`

func IngestCertifyVulnPkgs(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	vulnerabilities []IDorVulnerabilityInput,
	certifyVulns []ScanMetadataInput,
) (*IngestCertifyVulnPkgsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestCertifyVulnPkgs",
		Query:  IngestCertifyVulnPkgs_Operation,
		Variables: &__IngestCertifyVulnPkgsInput{
			Pkgs:            pkgs,
			Vulnerabilities: vulnerabilities,
			CertifyVulns:    certifyVulns,
		},
	}
	var err_ error

	var data_ IngestCertifyVulnPkgsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasMetadataArtifact.
const IngestHasMetadataArtifact_Operation = `
mutation IngestHasMetadataArtifact ($artifact: IDorArtifactInput!, $hasMetadata: HasMetadataInputSpec!) {
	ingestHasMetadata(subject: {artifact:$artifact}, pkgMatchType: {pkg:ALL_VERSIONS}, hasMetadata: $hasMetadata)
}
`

func IngestHasMetadataArtifact(
	ctx_ context.Context,
	client_ graphql.Client,
	artifact IDorArtifactInput,
	hasMetadata HasMetadataInputSpec,
) (*IngestHasMetadataArtifactResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasMetadataArtifact",
		Query:  IngestHasMetadataArtifact_Operation,
		Variables: &__IngestHasMetadataArtifactInput{
			Artifact:    artifact,
			HasMetadata: hasMetadata,
		},
	}
	var err_ error

	var data_ IngestHasMetadataArtifactResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasMetadataArtifacts.
const IngestHasMetadataArtifacts_Operation = `
mutation IngestHasMetadataArtifacts ($artifacts: [IDorArtifactInput!]!, $hasMetadataList: [HasMetadataInputSpec!]!) {
	ingestBulkHasMetadata(subjects: {artifacts:$artifacts}, pkgMatchType: {pkg:ALL_VERSIONS}, hasMetadataList: $hasMetadataList)
}
`

func IngestHasMetadataArtifacts(
	ctx_ context.Context,
	client_ graphql.Client,
	artifacts []IDorArtifactInput,
	hasMetadataList []HasMetadataInputSpec,
) (*IngestHasMetadataArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasMetadataArtifacts",
		Query:  IngestHasMetadataArtifacts_Operation,
		Variables: &__IngestHasMetadataArtifactsInput{
			Artifacts:       artifacts,
			HasMetadataList: hasMetadataList,
		},
	}
	var err_ error

	var data_ IngestHasMetadataArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasMetadataPkg.
const IngestHasMetadataPkg_Operation = `
mutation IngestHasMetadataPkg ($pkg: IDorPkgInput!, $pkgMatchType: MatchFlags!, $hasMetadata: HasMetadataInputSpec!) {
	ingestHasMetadata(subject: {package:$pkg}, pkgMatchType: $pkgMatchType, hasMetadata: $hasMetadata)
}
`

func IngestHasMetadataPkg(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	pkgMatchType MatchFlags,
	hasMetadata HasMetadataInputSpec,
) (*IngestHasMetadataPkgResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasMetadataPkg",
		Query:  IngestHasMetadataPkg_Operation,
		Variables: &__IngestHasMetadataPkgInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			HasMetadata:  hasMetadata,
		},
	}
	var err_ error

	var data_ IngestHasMetadataPkgResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasMetadataPkgs.
const IngestHasMetadataPkgs_Operation = `
mutation IngestHasMetadataPkgs ($pkgs: [IDorPkgInput!]!, $pkgMatchType: MatchFlags!, $hasMetadataList: [HasMetadataInputSpec!]!) {
	ingestBulkHasMetadata(subjects: {packages:$pkgs}, pkgMatchType: $pkgMatchType, hasMetadataList: $hasMetadataList)
}
`

func IngestHasMetadataPkgs(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	pkgMatchType MatchFlags,
	hasMetadataList []HasMetadataInputSpec,
) (*IngestHasMetadataPkgsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasMetadataPkgs",
		Query:  IngestHasMetadataPkgs_Operation,
		Variables: &__IngestHasMetadataPkgsInput{
			Pkgs:            pkgs,
			PkgMatchType:    pkgMatchType,
			HasMetadataList: hasMetadataList,
		},
	}
	var err_ error

	var data_ IngestHasMetadataPkgsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasMetadataSrc.
const IngestHasMetadataSrc_Operation = `
mutation IngestHasMetadataSrc ($source: IDorSourceInput!, $hasMetadata: HasMetadataInputSpec!) {
	ingestHasMetadata(subject: {source:$source}, pkgMatchType: {pkg:ALL_VERSIONS}, hasMetadata: $hasMetadata)
}
`

func IngestHasMetadataSrc(
	ctx_ context.Context,
	client_ graphql.Client,
	source IDorSourceInput,
	hasMetadata HasMetadataInputSpec,
) (*IngestHasMetadataSrcResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasMetadataSrc",
		Query:  IngestHasMetadataSrc_Operation,
		Variables: &__IngestHasMetadataSrcInput{
			Source:      source,
			HasMetadata: hasMetadata,
		},
	}
	var err_ error

	var data_ IngestHasMetadataSrcResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasMetadataSrcs.
const IngestHasMetadataSrcs_Operation = `
mutation IngestHasMetadataSrcs ($sources: [IDorSourceInput!]!, $hasMetadataList: [HasMetadataInputSpec!]!) {
	ingestBulkHasMetadata(subjects: {sources:$sources}, pkgMatchType: {pkg:ALL_VERSIONS}, hasMetadataList: $hasMetadataList)
}
`

func IngestHasMetadataSrcs(
	ctx_ context.Context,
	client_ graphql.Client,
	sources []IDorSourceInput,
	hasMetadataList []HasMetadataInputSpec,
) (*IngestHasMetadataSrcsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasMetadataSrcs",
		Query:  IngestHasMetadataSrcs_Operation,
		Variables: &__IngestHasMetadataSrcsInput{
			Sources:         sources,
			HasMetadataList: hasMetadataList,
		},
	}
	var err_ error

	var data_ IngestHasMetadataSrcsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasSBOMArtifact.
const IngestHasSBOMArtifact_Operation = `
mutation IngestHasSBOMArtifact ($artifact: IDorArtifactInput!, $hasSBOM: HasSBOMInputSpec!, $includes: HasSBOMIncludesInputSpec!) {
	ingestHasSBOM(subject: {artifact:$artifact}, hasSBOM: $hasSBOM, includes: $includes)
}
`

func IngestHasSBOMArtifact(
	ctx_ context.Context,
	client_ graphql.Client,
	artifact IDorArtifactInput,
	hasSBOM HasSBOMInputSpec,
	includes HasSBOMIncludesInputSpec,
) (*IngestHasSBOMArtifactResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasSBOMArtifact",
		Query:  IngestHasSBOMArtifact_Operation,
		Variables: &__IngestHasSBOMArtifactInput{
			Artifact: artifact,
			HasSBOM:  hasSBOM,
			Includes: includes,
		},
	}
	var err_ error

	var data_ IngestHasSBOMArtifactResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasSBOMArtifacts.
const IngestHasSBOMArtifacts_Operation = `
mutation IngestHasSBOMArtifacts ($artifacts: [IDorArtifactInput!]!, $hasSBOMs: [HasSBOMInputSpec!]!, $includes: [HasSBOMIncludesInputSpec!]!) {
	ingestHasSBOMs(subjects: {artifacts:$artifacts}, hasSBOMs: $hasSBOMs, includes: $includes)
}
`

func IngestHasSBOMArtifacts(
	ctx_ context.Context,
	client_ graphql.Client,
	artifacts []IDorArtifactInput,
	hasSBOMs []HasSBOMInputSpec,
	includes []HasSBOMIncludesInputSpec,
) (*IngestHasSBOMArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasSBOMArtifacts",
		Query:  IngestHasSBOMArtifacts_Operation,
		Variables: &__IngestHasSBOMArtifactsInput{
			Artifacts: artifacts,
			HasSBOMs:  hasSBOMs,
			Includes:  includes,
		},
	}
	var err_ error

	var data_ IngestHasSBOMArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasSBOMPkg.
const IngestHasSBOMPkg_Operation = `
mutation IngestHasSBOMPkg ($pkg: IDorPkgInput!, $hasSBOM: HasSBOMInputSpec!, $includes: HasSBOMIncludesInputSpec!) {
	ingestHasSBOM(subject: {package:$pkg}, hasSBOM: $hasSBOM, includes: $includes)
}
`

func IngestHasSBOMPkg(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	hasSBOM HasSBOMInputSpec,
	includes HasSBOMIncludesInputSpec,
) (*IngestHasSBOMPkgResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasSBOMPkg",
		Query:  IngestHasSBOMPkg_Operation,
		Variables: &__IngestHasSBOMPkgInput{
			Pkg:      pkg,
			HasSBOM:  hasSBOM,
			Includes: includes,
		},
	}
	var err_ error

	var data_ IngestHasSBOMPkgResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasSBOMPkgs.
const IngestHasSBOMPkgs_Operation = `
mutation IngestHasSBOMPkgs ($pkgs: [IDorPkgInput!]!, $hasSBOMs: [HasSBOMInputSpec!]!, $includes: [HasSBOMIncludesInputSpec!]!) {
	ingestHasSBOMs(subjects: {packages:$pkgs}, hasSBOMs: $hasSBOMs, includes: $includes)
}
`

func IngestHasSBOMPkgs(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	hasSBOMs []HasSBOMInputSpec,
	includes []HasSBOMIncludesInputSpec,
) (*IngestHasSBOMPkgsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasSBOMPkgs",
		Query:  IngestHasSBOMPkgs_Operation,
		Variables: &__IngestHasSBOMPkgsInput{
			Pkgs:     pkgs,
			HasSBOMs: hasSBOMs,
			Includes: includes,
		},
	}
	var err_ error

	var data_ IngestHasSBOMPkgsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasSourceAt.
const IngestHasSourceAt_Operation = `
mutation IngestHasSourceAt ($pkg: IDorPkgInput!, $pkgMatchType: MatchFlags!, $source: IDorSourceInput!, $hasSourceAt: HasSourceAtInputSpec!) {
	ingestHasSourceAt(pkg: $pkg, pkgMatchType: $pkgMatchType, source: $source, hasSourceAt: $hasSourceAt)
}
`

func IngestHasSourceAt(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	pkgMatchType MatchFlags,
	source IDorSourceInput,
	hasSourceAt HasSourceAtInputSpec,
) (*IngestHasSourceAtResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasSourceAt",
		Query:  IngestHasSourceAt_Operation,
		Variables: &__IngestHasSourceAtInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			Source:       source,
			HasSourceAt:  hasSourceAt,
		},
	}
	var err_ error

	var data_ IngestHasSourceAtResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHasSourcesAt.
const IngestHasSourcesAt_Operation = `
mutation IngestHasSourcesAt ($pkgs: [IDorPkgInput!]!, $pkgMatchType: MatchFlags!, $sources: [IDorSourceInput!]!, $hasSourceAts: [HasSourceAtInputSpec!]!) {
	ingestHasSourceAts(pkgs: $pkgs, pkgMatchType: $pkgMatchType, sources: $sources, hasSourceAts: $hasSourceAts)
}
`

func IngestHasSourcesAt(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	pkgMatchType MatchFlags,
	sources []IDorSourceInput,
	hasSourceAts []HasSourceAtInputSpec,
) (*IngestHasSourcesAtResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHasSourcesAt",
		Query:  IngestHasSourcesAt_Operation,
		Variables: &__IngestHasSourcesAtInput{
			Pkgs:         pkgs,
			PkgMatchType: pkgMatchType,
			Sources:      sources,
			HasSourceAts: hasSourceAts,
		},
	}
	var err_ error

	var data_ IngestHasSourcesAtResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHashEqual.
const IngestHashEqual_Operation = `
mutation IngestHashEqual ($artifact: IDorArtifactInput!, $otherArtifact: IDorArtifactInput!, $hashEqual: HashEqualInputSpec!) {
	ingestHashEqual(artifact: $artifact, otherArtifact: $otherArtifact, hashEqual: $hashEqual)
}
`

func IngestHashEqual(
	ctx_ context.Context,
	client_ graphql.Client,
	artifact IDorArtifactInput,
	otherArtifact IDorArtifactInput,
	hashEqual HashEqualInputSpec,
) (*IngestHashEqualResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHashEqual",
		Query:  IngestHashEqual_Operation,
		Variables: &__IngestHashEqualInput{
			Artifact:      artifact,
			OtherArtifact: otherArtifact,
			HashEqual:     hashEqual,
		},
	}
	var err_ error

	var data_ IngestHashEqualResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestHashEquals.
const IngestHashEquals_Operation = `
mutation IngestHashEquals ($artifacts: [IDorArtifactInput!]!, $otherArtifacts: [IDorArtifactInput!]!, $hashEquals: [HashEqualInputSpec!]!) {
	ingestHashEquals(artifacts: $artifacts, otherArtifacts: $otherArtifacts, hashEquals: $hashEquals)
}
`

func IngestHashEquals(
	ctx_ context.Context,
	client_ graphql.Client,
	artifacts []IDorArtifactInput,
	otherArtifacts []IDorArtifactInput,
	hashEquals []HashEqualInputSpec,
) (*IngestHashEqualsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestHashEquals",
		Query:  IngestHashEquals_Operation,
		Variables: &__IngestHashEqualsInput{
			Artifacts:      artifacts,
			OtherArtifacts: otherArtifacts,
			HashEquals:     hashEquals,
		},
	}
	var err_ error

	var data_ IngestHashEqualsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestIsDependencies.
const IngestIsDependencies_Operation = `
mutation IngestIsDependencies ($pkgs: [IDorPkgInput!]!, $depPkgs: [IDorPkgInput!]!, $depPkgMatchType: MatchFlags!, $dependencies: [IsDependencyInputSpec!]!) {
	ingestDependencies(pkgs: $pkgs, depPkgs: $depPkgs, depPkgMatchType: $depPkgMatchType, dependencies: $dependencies)
}
`

func IngestIsDependencies(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	depPkgs []IDorPkgInput,
	depPkgMatchType MatchFlags,
	dependencies []IsDependencyInputSpec,
) (*IngestIsDependenciesResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestIsDependencies",
		Query:  IngestIsDependencies_Operation,
		Variables: &__IngestIsDependenciesInput{
			Pkgs:            pkgs,
			DepPkgs:         depPkgs,
			DepPkgMatchType: depPkgMatchType,
			Dependencies:    dependencies,
		},
	}
	var err_ error

	var data_ IngestIsDependenciesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestIsDependency.
const IngestIsDependency_Operation = `
mutation IngestIsDependency ($pkg: IDorPkgInput!, $depPkg: IDorPkgInput!, $depPkgMatchType: MatchFlags!, $dependency: IsDependencyInputSpec!) {
	ingestDependency(pkg: $pkg, depPkg: $depPkg, depPkgMatchType: $depPkgMatchType, dependency: $dependency)
}
`

func IngestIsDependency(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	depPkg IDorPkgInput,
	depPkgMatchType MatchFlags,
	dependency IsDependencyInputSpec,
) (*IngestIsDependencyResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestIsDependency",
		Query:  IngestIsDependency_Operation,
		Variables: &__IngestIsDependencyInput{
			Pkg:             pkg,
			DepPkg:          depPkg,
			DepPkgMatchType: depPkgMatchType,
			Dependency:      dependency,
		},
	}
	var err_ error

	var data_ IngestIsDependencyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestIsOccurrencePkg.
const IngestIsOccurrencePkg_Operation = `
mutation IngestIsOccurrencePkg ($pkg: IDorPkgInput!, $artifact: IDorArtifactInput!, $occurrence: IsOccurrenceInputSpec!) {
	ingestOccurrence(subject: {package:$pkg}, artifact: $artifact, occurrence: $occurrence)
}
`

func IngestIsOccurrencePkg(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	artifact IDorArtifactInput,
	occurrence IsOccurrenceInputSpec,
) (*IngestIsOccurrencePkgResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestIsOccurrencePkg",
		Query:  IngestIsOccurrencePkg_Operation,
		Variables: &__IngestIsOccurrencePkgInput{
			Pkg:        pkg,
			Artifact:   artifact,
			Occurrence: occurrence,
		},
	}
	var err_ error

	var data_ IngestIsOccurrencePkgResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestIsOccurrenceSrc.
const IngestIsOccurrenceSrc_Operation = `
mutation IngestIsOccurrenceSrc ($source: IDorSourceInput!, $artifact: IDorArtifactInput!, $occurrence: IsOccurrenceInputSpec!) {
	ingestOccurrence(subject: {source:$source}, artifact: $artifact, occurrence: $occurrence)
}
`

func IngestIsOccurrenceSrc(
	ctx_ context.Context,
	client_ graphql.Client,
	source IDorSourceInput,
	artifact IDorArtifactInput,
	occurrence IsOccurrenceInputSpec,
) (*IngestIsOccurrenceSrcResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestIsOccurrenceSrc",
		Query:  IngestIsOccurrenceSrc_Operation,
		Variables: &__IngestIsOccurrenceSrcInput{
			Source:     source,
			Artifact:   artifact,
			Occurrence: occurrence,
		},
	}
	var err_ error

	var data_ IngestIsOccurrenceSrcResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestIsOccurrencesPkg.
const IngestIsOccurrencesPkg_Operation = `
mutation IngestIsOccurrencesPkg ($pkgs: [IDorPkgInput!]!, $artifacts: [IDorArtifactInput!]!, $occurrences: [IsOccurrenceInputSpec!]!) {
	ingestOccurrences(subjects: {packages:$pkgs}, artifacts: $artifacts, occurrences: $occurrences)
}
`

func IngestIsOccurrencesPkg(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	artifacts []IDorArtifactInput,
	occurrences []IsOccurrenceInputSpec,
) (*IngestIsOccurrencesPkgResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestIsOccurrencesPkg",
		Query:  IngestIsOccurrencesPkg_Operation,
		Variables: &__IngestIsOccurrencesPkgInput{
			Pkgs:        pkgs,
			Artifacts:   artifacts,
			Occurrences: occurrences,
		},
	}
	var err_ error

	var data_ IngestIsOccurrencesPkgResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestIsOccurrencesSrc.
const IngestIsOccurrencesSrc_Operation = `
mutation IngestIsOccurrencesSrc ($sources: [IDorSourceInput!]!, $artifacts: [IDorArtifactInput!]!, $occurrences: [IsOccurrenceInputSpec!]!) {
	ingestOccurrences(subjects: {sources:$sources}, artifacts: $artifacts, occurrences: $occurrences)
}
`

func IngestIsOccurrencesSrc(
	ctx_ context.Context,
	client_ graphql.Client,
	sources []IDorSourceInput,
	artifacts []IDorArtifactInput,
	occurrences []IsOccurrenceInputSpec,
) (*IngestIsOccurrencesSrcResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestIsOccurrencesSrc",
		Query:  IngestIsOccurrencesSrc_Operation,
		Variables: &__IngestIsOccurrencesSrcInput{
			Sources:     sources,
			Artifacts:   artifacts,
			Occurrences: occurrences,
		},
	}
	var err_ error

	var data_ IngestIsOccurrencesSrcResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestLicense.
const IngestLicense_Operation = `
mutation IngestLicense ($license: IDorLicenseInput!) {
	ingestLicense(license: $license)
}
`

func IngestLicense(
	ctx_ context.Context,
	client_ graphql.Client,
	license IDorLicenseInput,
) (*IngestLicenseResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestLicense",
		Query:  IngestLicense_Operation,
		Variables: &__IngestLicenseInput{
			License: license,
		},
	}
	var err_ error

	var data_ IngestLicenseResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestLicenses.
const IngestLicenses_Operation = `
mutation IngestLicenses ($licenses: [IDorLicenseInput!]!) {
	ingestLicenses(licenses: $licenses)
}
`

func IngestLicenses(
	ctx_ context.Context,
	client_ graphql.Client,
	licenses []IDorLicenseInput,
) (*IngestLicensesResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestLicenses",
		Query:  IngestLicenses_Operation,
		Variables: &__IngestLicensesInput{
			Licenses: licenses,
		},
	}
	var err_ error

	var data_ IngestLicensesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestPackage.
const IngestPackage_Operation = `
mutation IngestPackage ($pkg: IDorPkgInput!) {
	ingestPackage(pkg: $pkg) {
		packageTypeID
		packageNamespaceID
		packageNameID
		packageVersionID
	}
}
`

func IngestPackage(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
) (*IngestPackageResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestPackage",
		Query:  IngestPackage_Operation,
		Variables: &__IngestPackageInput{
			Pkg: pkg,
		},
	}
	var err_ error

	var data_ IngestPackageResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestPackages.
const IngestPackages_Operation = `
mutation IngestPackages ($pkgs: [IDorPkgInput!]!) {
	ingestPackages(pkgs: $pkgs) {
		packageTypeID
		packageNamespaceID
		packageNameID
		packageVersionID
	}
}
`

func IngestPackages(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
) (*IngestPackagesResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestPackages",
		Query:  IngestPackages_Operation,
		Variables: &__IngestPackagesInput{
			Pkgs: pkgs,
		},
	}
	var err_ error

	var data_ IngestPackagesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestPkgEqual.
const IngestPkgEqual_Operation = `
mutation IngestPkgEqual ($pkg: IDorPkgInput!, $otherPackage: IDorPkgInput!, $pkgEqual: PkgEqualInputSpec!) {
	ingestPkgEqual(pkg: $pkg, otherPackage: $otherPackage, pkgEqual: $pkgEqual)
}
`

func IngestPkgEqual(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	otherPackage IDorPkgInput,
	pkgEqual PkgEqualInputSpec,
) (*IngestPkgEqualResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestPkgEqual",
		Query:  IngestPkgEqual_Operation,
		Variables: &__IngestPkgEqualInput{
			Pkg:          pkg,
			OtherPackage: otherPackage,
			PkgEqual:     pkgEqual,
		},
	}
	var err_ error

	var data_ IngestPkgEqualResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestPkgEquals.
const IngestPkgEquals_Operation = `
mutation IngestPkgEquals ($pkgs: [IDorPkgInput!]!, $otherPackages: [IDorPkgInput!]!, $pkgEquals: [PkgEqualInputSpec!]!) {
	ingestPkgEquals(pkgs: $pkgs, otherPackages: $otherPackages, pkgEquals: $pkgEquals)
}
`

func IngestPkgEquals(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	otherPackages []IDorPkgInput,
	pkgEquals []PkgEqualInputSpec,
) (*IngestPkgEqualsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestPkgEquals",
		Query:  IngestPkgEquals_Operation,
		Variables: &__IngestPkgEqualsInput{
			Pkgs:          pkgs,
			OtherPackages: otherPackages,
			PkgEquals:     pkgEquals,
		},
	}
	var err_ error

	var data_ IngestPkgEqualsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestPointOfContactArtifact.
const IngestPointOfContactArtifact_Operation = `
mutation IngestPointOfContactArtifact ($artifact: IDorArtifactInput!, $pointOfContact: PointOfContactInputSpec!) {
	ingestPointOfContact(subject: {artifact:$artifact}, pkgMatchType: {pkg:ALL_VERSIONS}, pointOfContact: $pointOfContact)
}
`

func IngestPointOfContactArtifact(
	ctx_ context.Context,
	client_ graphql.Client,
	artifact IDorArtifactInput,
	pointOfContact PointOfContactInputSpec,
) (*IngestPointOfContactArtifactResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestPointOfContactArtifact",
		Query:  IngestPointOfContactArtifact_Operation,
		Variables: &__IngestPointOfContactArtifactInput{
			Artifact:       artifact,
			PointOfContact: pointOfContact,
		},
	}
	var err_ error

	var data_ IngestPointOfContactArtifactResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestPointOfContactArtifacts.
const IngestPointOfContactArtifacts_Operation = `
mutation IngestPointOfContactArtifacts ($artifacts: [IDorArtifactInput!]!, $pointOfContacts: [PointOfContactInputSpec!]!) {
	ingestPointOfContacts(subjects: {artifacts:$artifacts}, pkgMatchType: {pkg:ALL_VERSIONS}, pointOfContacts: $pointOfContacts)
}
`

func IngestPointOfContactArtifacts(
	ctx_ context.Context,
	client_ graphql.Client,
	artifacts []IDorArtifactInput,
	pointOfContacts []PointOfContactInputSpec,
) (*IngestPointOfContactArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestPointOfContactArtifacts",
		Query:  IngestPointOfContactArtifacts_Operation,
		Variables: &__IngestPointOfContactArtifactsInput{
			Artifacts:       artifacts,
			PointOfContacts: pointOfContacts,
		},
	}
	var err_ error

	var data_ IngestPointOfContactArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestPointOfContactPkg.
const IngestPointOfContactPkg_Operation = `
mutation IngestPointOfContactPkg ($pkg: IDorPkgInput!, $pkgMatchType: MatchFlags!, $pointOfContact: PointOfContactInputSpec!) {
	ingestPointOfContact(subject: {package:$pkg}, pkgMatchType: $pkgMatchType, pointOfContact: $pointOfContact)
}
`

func IngestPointOfContactPkg(
	ctx_ context.Context,
	client_ graphql.Client,
	pkg IDorPkgInput,
	pkgMatchType MatchFlags,
	pointOfContact PointOfContactInputSpec,
) (*IngestPointOfContactPkgResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestPointOfContactPkg",
		Query:  IngestPointOfContactPkg_Operation,
		Variables: &__IngestPointOfContactPkgInput{
			Pkg:            pkg,
			PkgMatchType:   pkgMatchType,
			PointOfContact: pointOfContact,
		},
	}
	var err_ error

	var data_ IngestPointOfContactPkgResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestPointOfContactPkgs.
const IngestPointOfContactPkgs_Operation = `
mutation IngestPointOfContactPkgs ($pkgs: [IDorPkgInput!]!, $pkgMatchType: MatchFlags!, $pointOfContacts: [PointOfContactInputSpec!]!) {
	ingestPointOfContacts(subjects: {packages:$pkgs}, pkgMatchType: $pkgMatchType, pointOfContacts: $pointOfContacts)
}
`

func IngestPointOfContactPkgs(
	ctx_ context.Context,
	client_ graphql.Client,
	pkgs []IDorPkgInput,
	pkgMatchType MatchFlags,
	pointOfContacts []PointOfContactInputSpec,
) (*IngestPointOfContactPkgsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestPointOfContactPkgs",
		Query:  IngestPointOfContactPkgs_Operation,
		Variables: &__IngestPointOfContactPkgsInput{
			Pkgs:            pkgs,
			PkgMatchType:    pkgMatchType,
			PointOfContacts: pointOfContacts,
		},
	}
	var err_ error

	var data_ IngestPointOfContactPkgsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestPointOfContactSrc.
const IngestPointOfContactSrc_Operation = `
mutation IngestPointOfContactSrc ($source: IDorSourceInput!, $pointOfContact: PointOfContactInputSpec!) {
	ingestPointOfContact(subject: {source:$source}, pkgMatchType: {pkg:ALL_VERSIONS}, pointOfContact: $pointOfContact)
}
`

func IngestPointOfContactSrc(
	ctx_ context.Context,
	client_ graphql.Client,
	source IDorSourceInput,
	pointOfContact PointOfContactInputSpec,
) (*IngestPointOfContactSrcResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestPointOfContactSrc",
		Query:  IngestPointOfContactSrc_Operation,
		Variables: &__IngestPointOfContactSrcInput{
			Source:         source,
			PointOfContact: pointOfContact,
		},
	}
	var err_ error

	var data_ IngestPointOfContactSrcResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestPointOfContactSrcs.
const IngestPointOfContactSrcs_Operation = `
mutation IngestPointOfContactSrcs ($sources: [IDorSourceInput!]!, $pointOfContacts: [PointOfContactInputSpec!]!) {
	ingestPointOfContacts(subjects: {sources:$sources}, pkgMatchType: {pkg:ALL_VERSIONS}, pointOfContacts: $pointOfContacts)
}
`

func IngestPointOfContactSrcs(
	ctx_ context.Context,
	client_ graphql.Client,
	sources []IDorSourceInput,
	pointOfContacts []PointOfContactInputSpec,
) (*IngestPointOfContactSrcsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestPointOfContactSrcs",
		Query:  IngestPointOfContactSrcs_Operation,
		Variables: &__IngestPointOfContactSrcsInput{
			Sources:         sources,
			PointOfContacts: pointOfContacts,
		},
	}
	var err_ error

	var data_ IngestPointOfContactSrcsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestSLSAForArtifact.
const IngestSLSAForArtifact_Operation = `
mutation IngestSLSAForArtifact ($artifact: IDorArtifactInput!, $materials: [IDorArtifactInput!]!, $builder: IDorBuilderInput!, $slsa: SLSAInputSpec!) {
	ingestSLSA(subject: $artifact, builtFrom: $materials, builtBy: $builder, slsa: $slsa)
}
`

func IngestSLSAForArtifact(
	ctx_ context.Context,
	client_ graphql.Client,
	artifact IDorArtifactInput,
	materials []IDorArtifactInput,
	builder IDorBuilderInput,
	slsa SLSAInputSpec,
) (*IngestSLSAForArtifactResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestSLSAForArtifact",
		Query:  IngestSLSAForArtifact_Operation,
		Variables: &__IngestSLSAForArtifactInput{
			Artifact:  artifact,
			Materials: materials,
			Builder:   builder,
			Slsa:      slsa,
		},
	}
	var err_ error

	var data_ IngestSLSAForArtifactResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestSLSAForArtifacts.
const IngestSLSAForArtifacts_Operation = `
mutation IngestSLSAForArtifacts ($artifacts: [IDorArtifactInput!]!, $materialsList: [[IDorArtifactInput!]!]!, $builders: [IDorBuilderInput!]!, $slsaList: [SLSAInputSpec!]!) {
	ingestSLSAs(subjects: $artifacts, builtFromList: $materialsList, builtByList: $builders, slsaList: $slsaList)
}
`

func IngestSLSAForArtifacts(
	ctx_ context.Context,
	client_ graphql.Client,
	artifacts []IDorArtifactInput,
	materialsList [][]IDorArtifactInput,
	builders []IDorBuilderInput,
	slsaList []SLSAInputSpec,
) (*IngestSLSAForArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestSLSAForArtifacts",
		Query:  IngestSLSAForArtifacts_Operation,
		Variables: &__IngestSLSAForArtifactsInput{
			Artifacts:     artifacts,
			MaterialsList: materialsList,
			Builders:      builders,
			SlsaList:      slsaList,
		},
	}
	var err_ error

	var data_ IngestSLSAForArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestSource.
const IngestSource_Operation = `
mutation IngestSource ($source: IDorSourceInput!) {
	ingestSource(source: $source) {
		sourceTypeID
		sourceNamespaceID
		sourceNameID
	}
}
`

func IngestSource(
	ctx_ context.Context,
	client_ graphql.Client,
	source IDorSourceInput,
) (*IngestSourceResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestSource",
		Query:  IngestSource_Operation,
		Variables: &__IngestSourceInput{
			Source: source,
		},
	}
	var err_ error

	var data_ IngestSourceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestSources.
const IngestSources_Operation = `
mutation IngestSources ($sources: [IDorSourceInput!]!) {
	ingestSources(sources: $sources) {
		sourceTypeID
		sourceNamespaceID
		sourceNameID
	}
}
`

func IngestSources(
	ctx_ context.Context,
	client_ graphql.Client,
	sources []IDorSourceInput,
) (*IngestSourcesResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestSources",
		Query:  IngestSources_Operation,
		Variables: &__IngestSourcesInput{
			Sources: sources,
		},
	}
	var err_ error

	var data_ IngestSourcesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestVulnEqual.
const IngestVulnEqual_Operation = `
mutation IngestVulnEqual ($vulnerability: IDorVulnerabilityInput!, $otherVulnerability: IDorVulnerabilityInput!, $vulnEqual: VulnEqualInputSpec!) {
	ingestVulnEqual(vulnerability: $vulnerability, otherVulnerability: $otherVulnerability, vulnEqual: $vulnEqual)
}
`

func IngestVulnEqual(
	ctx_ context.Context,
	client_ graphql.Client,
	vulnerability IDorVulnerabilityInput,
	otherVulnerability IDorVulnerabilityInput,
	vulnEqual VulnEqualInputSpec,
) (*IngestVulnEqualResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestVulnEqual",
		Query:  IngestVulnEqual_Operation,
		Variables: &__IngestVulnEqualInput{
			Vulnerability:      vulnerability,
			OtherVulnerability: otherVulnerability,
			VulnEqual:          vulnEqual,
		},
	}
	var err_ error

	var data_ IngestVulnEqualResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestVulnEquals.
const IngestVulnEquals_Operation = `
mutation IngestVulnEquals ($vulnerabilities: [IDorVulnerabilityInput!]!, $otherVulnerabilities: [IDorVulnerabilityInput!]!, $vulnEquals: [VulnEqualInputSpec!]!) {
	ingestVulnEquals(vulnerabilities: $vulnerabilities, otherVulnerabilities: $otherVulnerabilities, vulnEquals: $vulnEquals)
}
`

func IngestVulnEquals(
	ctx_ context.Context,
	client_ graphql.Client,
	vulnerabilities []IDorVulnerabilityInput,
	otherVulnerabilities []IDorVulnerabilityInput,
	vulnEquals []VulnEqualInputSpec,
) (*IngestVulnEqualsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestVulnEquals",
		Query:  IngestVulnEquals_Operation,
		Variables: &__IngestVulnEqualsInput{
			Vulnerabilities:      vulnerabilities,
			OtherVulnerabilities: otherVulnerabilities,
			VulnEquals:           vulnEquals,
		},
	}
	var err_ error

	var data_ IngestVulnEqualsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestVulnHasMetadata.
const IngestVulnHasMetadata_Operation = `
mutation IngestVulnHasMetadata ($vulnerability: IDorVulnerabilityInput!, $vulnMetadata: VulnerabilityMetadataInputSpec!) {
	ingestVulnerabilityMetadata(vulnerability: $vulnerability, vulnerabilityMetadata: $vulnMetadata)
}
`

func IngestVulnHasMetadata(
	ctx_ context.Context,
	client_ graphql.Client,
	vulnerability IDorVulnerabilityInput,
	vulnMetadata VulnerabilityMetadataInputSpec,
) (*IngestVulnHasMetadataResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestVulnHasMetadata",
		Query:  IngestVulnHasMetadata_Operation,
		Variables: &__IngestVulnHasMetadataInput{
			Vulnerability: vulnerability,
			VulnMetadata:  vulnMetadata,
		},
	}
	var err_ error

	var data_ IngestVulnHasMetadataResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestVulnerabilities.
const IngestVulnerabilities_Operation = `
mutation IngestVulnerabilities ($vulns: [IDorVulnerabilityInput!]!) {
	ingestVulnerabilities(vulns: $vulns) {
		vulnerabilityTypeID
		vulnerabilityNodeID
	}
}
`

func IngestVulnerabilities(
	ctx_ context.Context,
	client_ graphql.Client,
	vulns []IDorVulnerabilityInput,
) (*IngestVulnerabilitiesResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestVulnerabilities",
		Query:  IngestVulnerabilities_Operation,
		Variables: &__IngestVulnerabilitiesInput{
			Vulns: vulns,
		},
	}
	var err_ error

	var data_ IngestVulnerabilitiesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IngestVulnerability.
const IngestVulnerability_Operation = `
mutation IngestVulnerability ($vuln: IDorVulnerabilityInput!) {
	ingestVulnerability(vuln: $vuln) {
		vulnerabilityTypeID
		vulnerabilityNodeID
	}
}
`

func IngestVulnerability(
	ctx_ context.Context,
	client_ graphql.Client,
	vuln IDorVulnerabilityInput,
) (*IngestVulnerabilityResponse, error) {
	req_ := &graphql.Request{
		OpName: "IngestVulnerability",
		Query:  IngestVulnerability_Operation,
		Variables: &__IngestVulnerabilityInput{
			Vuln: vuln,
		},
	}
	var err_ error

	var data_ IngestVulnerabilityResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by LicenseList.
const LicenseList_Operation = `
query LicenseList ($filter: LicenseSpec!, $after: ID, $first: Int) {
	licenseList(licenseSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllLicenseTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllLicenseTree on License {
	id
	name
	inline
	listVersion
}
`

func LicenseList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter LicenseSpec,
	after *string,
	first *int,
) (*LicenseListResponse, error) {
	req_ := &graphql.Request{
		OpName: "LicenseList",
		Query:  LicenseList_Operation,
		Variables: &__LicenseListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ LicenseListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Licenses.
const Licenses_Operation = `
query Licenses ($filter: LicenseSpec!) {
	licenses(licenseSpec: $filter) {
		... AllLicenseTree
	}
}
fragment AllLicenseTree on License {
	id
	name
	inline
	listVersion
}
`

func Licenses(
	ctx_ context.Context,
	client_ graphql.Client,
	filter LicenseSpec,
) (*LicensesResponse, error) {
	req_ := &graphql.Request{
		OpName: "Licenses",
		Query:  Licenses_Operation,
		Variables: &__LicensesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ LicensesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Neighbors.
const Neighbors_Operation = `
query Neighbors ($node: ID!, $usingOnly: [Edge!]!) {
	neighbors(node: $node, usingOnly: $usingOnly) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... AllBuilderTree
		}
		... on Vulnerability {
			... AllVulnerabilityTree
		}
		... on License {
			... AllLicenseTree
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... AllPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... AllIsDependencyTree
		}
		... on HasSLSA {
			... AllSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... AllCertifyGood
		}
		... on HashEqual {
			... AllHashEqualTree
		}
		... on HasSBOM {
			... AllHasSBOMTree
		}
		... on HasSourceAt {
			... AllHasSourceAt
		}
		... on PointOfContact {
			... AllPointOfContact
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on VulnEqual {
			... AllVulnEqual
		}
		... on CertifyVEXStatement {
			... AllCertifyVEXStatement
		}
		... on Builder {
			... AllBuilderTree
		}
		... on VulnerabilityMetadata {
			... AllVulnMetadataTree
		}
		... on HasMetadata {
			... AllHasMetadata
		}
		... on CertifyLegal {
			... AllCertifyLegalTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllBuilderTree on Builder {
	id
	uri
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
fragment AllLicenseTree on License {
	id
	name
	inline
	listVersion
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependencyPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
	knownSince
	includedSoftware {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	includedDependencies {
		... AllIsDependencyTree
	}
	includedOccurrences {
		... AllIsOccurrencesTree
	}
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllPointOfContact on PointOfContact {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	email
	info
	since
	justification
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllVulnEqual on VulnEqual {
	id
	vulnerabilities {
		... AllVulnerabilityTree
	}
	justification
	origin
	collector
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllVulnMetadataTree on VulnerabilityMetadata {
	id
	vulnerability {
		id
		type
		vulnerabilityIDs {
			id
			vulnerabilityID
		}
	}
	scoreType
	scoreValue
	timestamp
	origin
	collector
}
fragment AllHasMetadata on HasMetadata {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	key
	value
	timestamp
	justification
	origin
	collector
}
fragment AllCertifyLegalTree on CertifyLegal {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	declaredLicense
	declaredLicenses {
		... AllLicenseTree
	}
	discoveredLicense
	discoveredLicenses {
		... AllLicenseTree
	}
	attribution
	justification
	timeScanned
	origin
	collector
}
`

func Neighbors(
	ctx_ context.Context,
	client_ graphql.Client,
	node string,
	usingOnly []Edge,
) (*NeighborsResponse, error) {
	req_ := &graphql.Request{
		OpName: "Neighbors",
		Query:  Neighbors_Operation,
		Variables: &__NeighborsInput{
			Node:      node,
			UsingOnly: usingOnly,
		},
	}
	var err_ error

	var data_ NeighborsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Node.
const Node_Operation = `
query Node ($node: ID!) {
	node(node: $node) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... AllBuilderTree
		}
		... on Vulnerability {
			... AllVulnerabilityTree
		}
		... on License {
			... AllLicenseTree
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... AllPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... AllIsDependencyTree
		}
		... on HasSLSA {
			... AllSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... AllCertifyGood
		}
		... on HashEqual {
			... AllHashEqualTree
		}
		... on HasSBOM {
			... AllHasSBOMTree
		}
		... on HasSourceAt {
			... AllHasSourceAt
		}
		... on PointOfContact {
			... AllPointOfContact
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on VulnEqual {
			... AllVulnEqual
		}
		... on CertifyVEXStatement {
			... AllCertifyVEXStatement
		}
		... on Builder {
			... AllBuilderTree
		}
		... on VulnerabilityMetadata {
			... AllVulnMetadataTree
		}
		... on HasMetadata {
			... AllHasMetadata
		}
		... on CertifyLegal {
			... AllCertifyLegalTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllBuilderTree on Builder {
	id
	uri
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
fragment AllLicenseTree on License {
	id
	name
	inline
	listVersion
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependencyPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
	knownSince
	includedSoftware {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	includedDependencies {
		... AllIsDependencyTree
	}
	includedOccurrences {
		... AllIsOccurrencesTree
	}
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllPointOfContact on PointOfContact {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	email
	info
	since
	justification
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllVulnEqual on VulnEqual {
	id
	vulnerabilities {
		... AllVulnerabilityTree
	}
	justification
	origin
	collector
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllVulnMetadataTree on VulnerabilityMetadata {
	id
	vulnerability {
		id
		type
		vulnerabilityIDs {
			id
			vulnerabilityID
		}
	}
	scoreType
	scoreValue
	timestamp
	origin
	collector
}
fragment AllHasMetadata on HasMetadata {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	key
	value
	timestamp
	justification
	origin
	collector
}
fragment AllCertifyLegalTree on CertifyLegal {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	declaredLicense
	declaredLicenses {
		... AllLicenseTree
	}
	discoveredLicense
	discoveredLicenses {
		... AllLicenseTree
	}
	attribution
	justification
	timeScanned
	origin
	collector
}
`

func Node(
	ctx_ context.Context,
	client_ graphql.Client,
	node string,
) (*NodeResponse, error) {
	req_ := &graphql.Request{
		OpName: "Node",
		Query:  Node_Operation,
		Variables: &__NodeInput{
			Node: node,
		},
	}
	var err_ error

	var data_ NodeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Nodes.
const Nodes_Operation = `
query Nodes ($nodes: [ID!]!) {
	nodes(nodes: $nodes) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... AllBuilderTree
		}
		... on Vulnerability {
			... AllVulnerabilityTree
		}
		... on License {
			... AllLicenseTree
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... AllPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... AllIsDependencyTree
		}
		... on HasSLSA {
			... AllSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... AllCertifyGood
		}
		... on HashEqual {
			... AllHashEqualTree
		}
		... on HasSBOM {
			... AllHasSBOMTree
		}
		... on HasSourceAt {
			... AllHasSourceAt
		}
		... on PointOfContact {
			... AllPointOfContact
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on VulnEqual {
			... AllVulnEqual
		}
		... on CertifyVEXStatement {
			... AllCertifyVEXStatement
		}
		... on Builder {
			... AllBuilderTree
		}
		... on VulnerabilityMetadata {
			... AllVulnMetadataTree
		}
		... on HasMetadata {
			... AllHasMetadata
		}
		... on CertifyLegal {
			... AllCertifyLegalTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllBuilderTree on Builder {
	id
	uri
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
fragment AllLicenseTree on License {
	id
	name
	inline
	listVersion
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependencyPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
	knownSince
	includedSoftware {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	includedDependencies {
		... AllIsDependencyTree
	}
	includedOccurrences {
		... AllIsOccurrencesTree
	}
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllPointOfContact on PointOfContact {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	email
	info
	since
	justification
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllVulnEqual on VulnEqual {
	id
	vulnerabilities {
		... AllVulnerabilityTree
	}
	justification
	origin
	collector
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllVulnMetadataTree on VulnerabilityMetadata {
	id
	vulnerability {
		id
		type
		vulnerabilityIDs {
			id
			vulnerabilityID
		}
	}
	scoreType
	scoreValue
	timestamp
	origin
	collector
}
fragment AllHasMetadata on HasMetadata {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	key
	value
	timestamp
	justification
	origin
	collector
}
fragment AllCertifyLegalTree on CertifyLegal {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	declaredLicense
	declaredLicenses {
		... AllLicenseTree
	}
	discoveredLicense
	discoveredLicenses {
		... AllLicenseTree
	}
	attribution
	justification
	timeScanned
	origin
	collector
}
`

func Nodes(
	ctx_ context.Context,
	client_ graphql.Client,
	nodes []string,
) (*NodesResponse, error) {
	req_ := &graphql.Request{
		OpName: "Nodes",
		Query:  Nodes_Operation,
		Variables: &__NodesInput{
			Nodes: nodes,
		},
	}
	var err_ error

	var data_ NodesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by OccurrenceList.
const OccurrenceList_Operation = `
query OccurrenceList ($filter: IsOccurrenceSpec!, $after: ID, $first: Int) {
	IsOccurrenceList(isOccurrenceSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllIsOccurrencesTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func OccurrenceList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter IsOccurrenceSpec,
	after *string,
	first *int,
) (*OccurrenceListResponse, error) {
	req_ := &graphql.Request{
		OpName: "OccurrenceList",
		Query:  OccurrenceList_Operation,
		Variables: &__OccurrenceListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ OccurrenceListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Occurrences.
const Occurrences_Operation = `
query Occurrences ($filter: IsOccurrenceSpec!) {
	IsOccurrence(isOccurrenceSpec: $filter) {
		... AllIsOccurrencesTree
	}
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func Occurrences(
	ctx_ context.Context,
	client_ graphql.Client,
	filter IsOccurrenceSpec,
) (*OccurrencesResponse, error) {
	req_ := &graphql.Request{
		OpName: "Occurrences",
		Query:  Occurrences_Operation,
		Variables: &__OccurrencesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ OccurrencesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by PackageNames.
const PackageNames_Operation = `
query PackageNames ($filter: PkgSpec!) {
	packages(pkgSpec: $filter) {
		id
		type
		namespaces {
			id
			namespace
			names {
				id
				name
			}
		}
	}
}
`

func PackageNames(
	ctx_ context.Context,
	client_ graphql.Client,
	filter PkgSpec,
) (*PackageNamesResponse, error) {
	req_ := &graphql.Request{
		OpName: "PackageNames",
		Query:  PackageNames_Operation,
		Variables: &__PackageNamesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ PackageNamesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by PackageNamespaces.
const PackageNamespaces_Operation = `
query PackageNamespaces ($filter: PkgSpec!) {
	packages(pkgSpec: $filter) {
		id
		type
		namespaces {
			id
			namespace
		}
	}
}
`

func PackageNamespaces(
	ctx_ context.Context,
	client_ graphql.Client,
	filter PkgSpec,
) (*PackageNamespacesResponse, error) {
	req_ := &graphql.Request{
		OpName: "PackageNamespaces",
		Query:  PackageNamespaces_Operation,
		Variables: &__PackageNamespacesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ PackageNamespacesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by PackageTypes.
const PackageTypes_Operation = `
query PackageTypes ($filter: PkgSpec!) {
	packages(pkgSpec: $filter) {
		id
		type
	}
}
`

func PackageTypes(
	ctx_ context.Context,
	client_ graphql.Client,
	filter PkgSpec,
) (*PackageTypesResponse, error) {
	req_ := &graphql.Request{
		OpName: "PackageTypes",
		Query:  PackageTypes_Operation,
		Variables: &__PackageTypesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ PackageTypesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by PackageVersions.
const PackageVersions_Operation = `
query PackageVersions ($filter: PkgSpec!) {
	packages(pkgSpec: $filter) {
		id
		type
		namespaces {
			id
			namespace
			names {
				id
				name
				versions {
					id
					version
					qualifiers {
						key
						value
					}
					subpath
				}
			}
		}
	}
}
`

func PackageVersions(
	ctx_ context.Context,
	client_ graphql.Client,
	filter PkgSpec,
) (*PackageVersionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "PackageVersions",
		Query:  PackageVersions_Operation,
		Variables: &__PackageVersionsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ PackageVersionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Packages.
const Packages_Operation = `
query Packages ($filter: PkgSpec!) {
	packages(pkgSpec: $filter) {
		... AllPkgTree
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func Packages(
	ctx_ context.Context,
	client_ graphql.Client,
	filter PkgSpec,
) (*PackagesResponse, error) {
	req_ := &graphql.Request{
		OpName: "Packages",
		Query:  Packages_Operation,
		Variables: &__PackagesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ PackagesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by PackagesList.
const PackagesList_Operation = `
query PackagesList ($filter: PkgSpec!, $after: ID, $first: Int) {
	packagesList(pkgSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllPkgTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func PackagesList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter PkgSpec,
	after *string,
	first *int,
) (*PackagesListResponse, error) {
	req_ := &graphql.Request{
		OpName: "PackagesList",
		Query:  PackagesList_Operation,
		Variables: &__PackagesListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ PackagesListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Path.
const Path_Operation = `
query Path ($subject: ID!, $target: ID!, $maxPathLength: Int!, $usingOnly: [Edge!]!) {
	path(subject: $subject, target: $target, maxPathLength: $maxPathLength, usingOnly: $usingOnly) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... AllBuilderTree
		}
		... on Vulnerability {
			... AllVulnerabilityTree
		}
		... on License {
			... AllLicenseTree
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... AllPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... AllIsDependencyTree
		}
		... on HasSLSA {
			... AllSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... AllCertifyGood
		}
		... on HashEqual {
			... AllHashEqualTree
		}
		... on HasSBOM {
			... AllHasSBOMTree
		}
		... on HasSourceAt {
			... AllHasSourceAt
		}
		... on PointOfContact {
			... AllPointOfContact
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on VulnEqual {
			... AllVulnEqual
		}
		... on CertifyVEXStatement {
			... AllCertifyVEXStatement
		}
		... on Builder {
			... AllBuilderTree
		}
		... on VulnerabilityMetadata {
			... AllVulnMetadataTree
		}
		... on HasMetadata {
			... AllHasMetadata
		}
		... on CertifyLegal {
			... AllCertifyLegalTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllBuilderTree on Builder {
	id
	uri
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
fragment AllLicenseTree on License {
	id
	name
	inline
	listVersion
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependencyPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment AllSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllCertifyGood on CertifyGood {
	id
	justification
	knownSince
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment AllHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	origin
	collector
	knownSince
	includedSoftware {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	includedDependencies {
		... AllIsDependencyTree
	}
	includedOccurrences {
		... AllIsOccurrencesTree
	}
}
fragment AllHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllPointOfContact on PointOfContact {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	email
	info
	since
	justification
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllVulnEqual on VulnEqual {
	id
	vulnerabilities {
		... AllVulnerabilityTree
	}
	justification
	origin
	collector
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllVulnMetadataTree on VulnerabilityMetadata {
	id
	vulnerability {
		id
		type
		vulnerabilityIDs {
			id
			vulnerabilityID
		}
	}
	scoreType
	scoreValue
	timestamp
	origin
	collector
}
fragment AllHasMetadata on HasMetadata {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	key
	value
	timestamp
	justification
	origin
	collector
}
fragment AllCertifyLegalTree on CertifyLegal {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	declaredLicense
	declaredLicenses {
		... AllLicenseTree
	}
	discoveredLicense
	discoveredLicenses {
		... AllLicenseTree
	}
	attribution
	justification
	timeScanned
	origin
	collector
}
`

func Path(
	ctx_ context.Context,
	client_ graphql.Client,
	subject string,
	target string,
	maxPathLength int,
	usingOnly []Edge,
) (*PathResponse, error) {
	req_ := &graphql.Request{
		OpName: "Path",
		Query:  Path_Operation,
		Variables: &__PathInput{
			Subject:       subject,
			Target:        target,
			MaxPathLength: maxPathLength,
			UsingOnly:     usingOnly,
		},
	}
	var err_ error

	var data_ PathResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by PkgEqualList.
const PkgEqualList_Operation = `
query PkgEqualList ($filter: PkgEqualSpec!, $after: ID, $first: Int) {
	PkgEqualList(pkgEqualSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllPkgEqual
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func PkgEqualList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter PkgEqualSpec,
	after *string,
	first *int,
) (*PkgEqualListResponse, error) {
	req_ := &graphql.Request{
		OpName: "PkgEqualList",
		Query:  PkgEqualList_Operation,
		Variables: &__PkgEqualListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ PkgEqualListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by PkgEquals.
const PkgEquals_Operation = `
query PkgEquals ($filter: PkgEqualSpec!) {
	PkgEqual(pkgEqualSpec: $filter) {
		... AllPkgEqual
	}
}
fragment AllPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`

func PkgEquals(
	ctx_ context.Context,
	client_ graphql.Client,
	filter PkgEqualSpec,
) (*PkgEqualsResponse, error) {
	req_ := &graphql.Request{
		OpName: "PkgEquals",
		Query:  PkgEquals_Operation,
		Variables: &__PkgEqualsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ PkgEqualsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by PointOfContactList.
const PointOfContactList_Operation = `
query PointOfContactList ($filter: PointOfContactSpec!, $after: ID, $first: Int) {
	PointOfContactList(pointOfContactSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllPointOfContact
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllPointOfContact on PointOfContact {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	email
	info
	since
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func PointOfContactList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter PointOfContactSpec,
	after *string,
	first *int,
) (*PointOfContactListResponse, error) {
	req_ := &graphql.Request{
		OpName: "PointOfContactList",
		Query:  PointOfContactList_Operation,
		Variables: &__PointOfContactListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ PointOfContactListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by PointOfContacts.
const PointOfContacts_Operation = `
query PointOfContacts ($filter: PointOfContactSpec!) {
	PointOfContact(pointOfContactSpec: $filter) {
		... AllPointOfContact
	}
}
fragment AllPointOfContact on PointOfContact {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	email
	info
	since
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`

func PointOfContacts(
	ctx_ context.Context,
	client_ graphql.Client,
	filter PointOfContactSpec,
) (*PointOfContactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "PointOfContacts",
		Query:  PointOfContacts_Operation,
		Variables: &__PointOfContactsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ PointOfContactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Scorecards.
const Scorecards_Operation = `
query Scorecards ($filter: CertifyScorecardSpec!) {
	scorecards(scorecardSpec: $filter) {
		... AllCertifyScorecard
	}
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func Scorecards(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyScorecardSpec,
) (*ScorecardsResponse, error) {
	req_ := &graphql.Request{
		OpName: "Scorecards",
		Query:  Scorecards_Operation,
		Variables: &__ScorecardsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ ScorecardsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ScorecardsList.
const ScorecardsList_Operation = `
query ScorecardsList ($filter: CertifyScorecardSpec!, $after: ID, $first: Int) {
	scorecardsList(scorecardSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllCertifyScorecard
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func ScorecardsList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyScorecardSpec,
	after *string,
	first *int,
) (*ScorecardsListResponse, error) {
	req_ := &graphql.Request{
		OpName: "ScorecardsList",
		Query:  ScorecardsList_Operation,
		Variables: &__ScorecardsListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ ScorecardsListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Sources.
const Sources_Operation = `
query Sources ($filter: SourceSpec!) {
	sources(sourceSpec: $filter) {
		... AllSourceTree
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func Sources(
	ctx_ context.Context,
	client_ graphql.Client,
	filter SourceSpec,
) (*SourcesResponse, error) {
	req_ := &graphql.Request{
		OpName: "Sources",
		Query:  Sources_Operation,
		Variables: &__SourcesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ SourcesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SourcesList.
const SourcesList_Operation = `
query SourcesList ($filter: SourceSpec!, $after: ID, $first: Int) {
	sourcesList(sourceSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllSourceTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`

func SourcesList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter SourceSpec,
	after *string,
	first *int,
) (*SourcesListResponse, error) {
	req_ := &graphql.Request{
		OpName: "SourcesList",
		Query:  SourcesList_Operation,
		Variables: &__SourcesListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ SourcesListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by VEXStatementList.
const VEXStatementList_Operation = `
query VEXStatementList ($filter: CertifyVEXStatementSpec!, $after: ID, $first: Int) {
	CertifyVEXStatementList(certifyVEXStatementSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllCertifyVEXStatement
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
`

func VEXStatementList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyVEXStatementSpec,
	after *string,
	first *int,
) (*VEXStatementListResponse, error) {
	req_ := &graphql.Request{
		OpName: "VEXStatementList",
		Query:  VEXStatementList_Operation,
		Variables: &__VEXStatementListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ VEXStatementListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by VEXStatements.
const VEXStatements_Operation = `
query VEXStatements ($filter: CertifyVEXStatementSpec!) {
	CertifyVEXStatement(certifyVEXStatementSpec: $filter) {
		... AllCertifyVEXStatement
	}
}
fragment AllCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		... AllVulnerabilityTree
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				purl
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
`

func VEXStatements(
	ctx_ context.Context,
	client_ graphql.Client,
	filter CertifyVEXStatementSpec,
) (*VEXStatementsResponse, error) {
	req_ := &graphql.Request{
		OpName: "VEXStatements",
		Query:  VEXStatements_Operation,
		Variables: &__VEXStatementsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ VEXStatementsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by VulnEqualList.
const VulnEqualList_Operation = `
query VulnEqualList ($filter: VulnEqualSpec!, $after: ID, $first: Int) {
	vulnEqualList(vulnEqualSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllVulnEqual
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllVulnEqual on VulnEqual {
	id
	vulnerabilities {
		... AllVulnerabilityTree
	}
	justification
	origin
	collector
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
`

func VulnEqualList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter VulnEqualSpec,
	after *string,
	first *int,
) (*VulnEqualListResponse, error) {
	req_ := &graphql.Request{
		OpName: "VulnEqualList",
		Query:  VulnEqualList_Operation,
		Variables: &__VulnEqualListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ VulnEqualListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by VulnEquals.
const VulnEquals_Operation = `
query VulnEquals ($filter: VulnEqualSpec!) {
	vulnEqual(vulnEqualSpec: $filter) {
		... AllVulnEqual
	}
}
fragment AllVulnEqual on VulnEqual {
	id
	vulnerabilities {
		... AllVulnerabilityTree
	}
	justification
	origin
	collector
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
`

func VulnEquals(
	ctx_ context.Context,
	client_ graphql.Client,
	filter VulnEqualSpec,
) (*VulnEqualsResponse, error) {
	req_ := &graphql.Request{
		OpName: "VulnEquals",
		Query:  VulnEquals_Operation,
		Variables: &__VulnEqualsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ VulnEqualsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Vulnerabilities.
const Vulnerabilities_Operation = `
query Vulnerabilities ($filter: VulnerabilitySpec!) {
	vulnerabilities(vulnSpec: $filter) {
		... AllVulnerabilityTree
	}
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
`

func Vulnerabilities(
	ctx_ context.Context,
	client_ graphql.Client,
	filter VulnerabilitySpec,
) (*VulnerabilitiesResponse, error) {
	req_ := &graphql.Request{
		OpName: "Vulnerabilities",
		Query:  Vulnerabilities_Operation,
		Variables: &__VulnerabilitiesInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ VulnerabilitiesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by VulnerabilityList.
const VulnerabilityList_Operation = `
query VulnerabilityList ($filter: VulnerabilitySpec!, $after: ID, $first: Int) {
	vulnerabilityList(vulnSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllVulnerabilityTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllVulnerabilityTree on Vulnerability {
	id
	type
	vulnerabilityIDs {
		id
		vulnerabilityID
	}
}
`

func VulnerabilityList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter VulnerabilitySpec,
	after *string,
	first *int,
) (*VulnerabilityListResponse, error) {
	req_ := &graphql.Request{
		OpName: "VulnerabilityList",
		Query:  VulnerabilityList_Operation,
		Variables: &__VulnerabilityListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ VulnerabilityListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by VulnerabilityMetadata.
const VulnerabilityMetadata_Operation = `
query VulnerabilityMetadata ($filter: VulnerabilityMetadataSpec!) {
	vulnerabilityMetadata(vulnerabilityMetadataSpec: $filter) {
		... AllVulnMetadataTree
	}
}
fragment AllVulnMetadataTree on VulnerabilityMetadata {
	id
	vulnerability {
		id
		type
		vulnerabilityIDs {
			id
			vulnerabilityID
		}
	}
	scoreType
	scoreValue
	timestamp
	origin
	collector
}
`

func VulnerabilityMetadata(
	ctx_ context.Context,
	client_ graphql.Client,
	filter VulnerabilityMetadataSpec,
) (*VulnerabilityMetadataResponse, error) {
	req_ := &graphql.Request{
		OpName: "VulnerabilityMetadata",
		Query:  VulnerabilityMetadata_Operation,
		Variables: &__VulnerabilityMetadataInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ VulnerabilityMetadataResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by VulnerabilityMetadataList.
const VulnerabilityMetadataList_Operation = `
query VulnerabilityMetadataList ($filter: VulnerabilityMetadataSpec!, $after: ID, $first: Int) {
	vulnerabilityMetadataList(vulnerabilityMetadataSpec: $filter, after: $after, first: $first) {
		totalCount
		edges {
			cursor
			node {
				... AllVulnMetadataTree
			}
		}
		pageInfo {
			startCursor
			endCursor
			hasNextPage
		}
	}
}
fragment AllVulnMetadataTree on VulnerabilityMetadata {
	id
	vulnerability {
		id
		type
		vulnerabilityIDs {
			id
			vulnerabilityID
		}
	}
	scoreType
	scoreValue
	timestamp
	origin
	collector
}
`

func VulnerabilityMetadataList(
	ctx_ context.Context,
	client_ graphql.Client,
	filter VulnerabilityMetadataSpec,
	after *string,
	first *int,
) (*VulnerabilityMetadataListResponse, error) {
	req_ := &graphql.Request{
		OpName: "VulnerabilityMetadataList",
		Query:  VulnerabilityMetadataList_Operation,
		Variables: &__VulnerabilityMetadataListInput{
			Filter: filter,
			After:  after,
			First:  first,
		},
	}
	var err_ error

	var data_ VulnerabilityMetadataListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// AllArtifactTree includes the GraphQL fields of Artifact requested by the fragment AllArtifactTree.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllArtifactTree struct {
	Id        string `json:"id"`
	Algorithm string `json:"algorithm"`
	Digest    string `json:"digest"`
}

// GetId returns AllArtifactTree.Id, and is useful for accessing the field via an interface.
func (v *AllArtifactTree) GetId() string { return v.Id }

// GetAlgorithm returns AllArtifactTree.Algorithm, and is useful for accessing the field via an interface.
func (v *AllArtifactTree) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns AllArtifactTree.Digest, and is useful for accessing the field via an interface.
func (v *AllArtifactTree) GetDigest() string { return v.Digest }

// AllCertifyBad includes the GraphQL fields of CertifyBad requested by the fragment AllCertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type AllCertifyBad struct {
	Id            string                                      `json:"id"`
	Justification string                                      `json:"justification"`
	Subject       AllCertifyBadSubjectPackageSourceOrArtifact `json:"-"`
	Origin        string                                      `json:"origin"`
	Collector     string                                      `json:"collector"`
}

// GetId returns AllCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetId() string { return v.Id }

// GetJustification returns AllCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetJustification() string { return v.Justification }

// GetSubject returns AllCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact { return v.Subject }

// GetOrigin returns AllCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyBad) GetCollector() string { return v.Collector }

func (v *AllCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBad
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyBadSubjectPackageSourceOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal AllCertifyBad.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBad) __premarshalJSON() (*__premarshalAllCertifyBad, error) {
	var retval __premarshalAllCertifyBad

	retval.Id = v.Id
	retval.Justification = v.Justification
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllCertifyBadSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllCertifyBadSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns AllCertifyBadSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyBadSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllCertifyBadSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllCertifyBadSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllCertifyBadSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBadSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBadSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyBadSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllCertifyBadSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBadSubjectArtifact) __premarshalJSON() (*__premarshalAllCertifyBadSubjectArtifact, error) {
	var retval __premarshalAllCertifyBadSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllCertifyBadSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyBadSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllCertifyBadSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyBadSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyBadSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyBadSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyBadSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBadSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBadSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyBadSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyBadSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBadSubjectPackage) __premarshalJSON() (*__premarshalAllCertifyBadSubjectPackage, error) {
	var retval __premarshalAllCertifyBadSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyBadSubjectPackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// AllCertifyBadSubjectPackageSourceOrArtifact is implemented by the following types:
// AllCertifyBadSubjectPackage
// AllCertifyBadSubjectSource
// AllCertifyBadSubjectArtifact
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type AllCertifyBadSubjectPackageSourceOrArtifact interface {
	implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyBadSubjectPackage) implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact() {
}
func (v *AllCertifyBadSubjectSource) implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact() {
}
func (v *AllCertifyBadSubjectArtifact) implementsGraphQLInterfaceAllCertifyBadSubjectPackageSourceOrArtifact() {
}

func __unmarshalAllCertifyBadSubjectPackageSourceOrArtifact(b []byte, v *AllCertifyBadSubjectPackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(AllCertifyBadSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllCertifyBadSubjectSource)
		return json.Unmarshal(b, *v)
	case "Artifact":
		*v = new(AllCertifyBadSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyBadSubjectPackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyBadSubjectPackageSourceOrArtifact(v *AllCertifyBadSubjectPackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyBadSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyBadSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyBadSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyBadSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyBadSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyBadSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyBadSubjectPackageSourceOrArtifact: "%T"`, v)
	}
}

// AllCertifyBadSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllCertifyBadSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllCertifyBadSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyBadSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllCertifyBadSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllCertifyBadSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyBadSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllCertifyBadSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyBadSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyBadSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyBadSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllCertifyBadSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyBadSubjectSource) __premarshalJSON() (*__premarshalAllCertifyBadSubjectSource, error) {
	var retval __premarshalAllCertifyBadSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllCertifyScorecard includes the GraphQL fields of CertifyScorecard requested by the fragment AllCertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type AllCertifyScorecard struct {
	Id string `json:"id"`
	// The source repository that is being scanned (attestation subject)
	Source AllCertifyScorecardSource `json:"source"`
	// The Scorecard attached to the repository (attestation object)
	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

// GetId returns AllCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecard) GetId() string { return v.Id }

// GetSource returns AllCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecard) GetSource() AllCertifyScorecardSource { return v.Source }

// GetScorecard returns AllCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard { return v.Scorecard }

// AllCertifyScorecardScorecard includes the requested fields of the GraphQL type Scorecard.
// The GraphQL type's documentation follows.
//
// Scorecard contains all of the fields present in a Scorecard attestation.
//
// We also include fields to specify under what conditions the check was performed
// (time of scan, version of scanners, etc.) as well as how this information got
// included into GUAC (origin document and the collector for that document).
type AllCertifyScorecardScorecard struct {
	// Exact timestamp when the source was last scanned (in RFC 3339 format)
	TimeScanned time.Time `json:"timeScanned"`
	// Overall Scorecard score for the source
	AggregateScore float64 `json:"aggregateScore"`
	// Individual Scorecard check scores (Branch-Protection, Code-Review, ...)
	Checks []AllCertifyScorecardScorecardChecksScorecardCheck `json:"checks"`
	// Version of the Scorecard scanner used to analyze the source
	ScorecardVersion string `json:"scorecardVersion"`
	// Commit of the Scorecards repository at the time of scanning the source
	ScorecardCommit string `json:"scorecardCommit"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetTimeScanned returns AllCertifyScorecardScorecard.TimeScanned, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetTimeScanned() time.Time { return v.TimeScanned }

// GetAggregateScore returns AllCertifyScorecardScorecard.AggregateScore, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetAggregateScore() float64 { return v.AggregateScore }

// GetChecks returns AllCertifyScorecardScorecard.Checks, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetChecks() []AllCertifyScorecardScorecardChecksScorecardCheck {
	return v.Checks
}

// GetScorecardVersion returns AllCertifyScorecardScorecard.ScorecardVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetScorecardVersion() string { return v.ScorecardVersion }

// GetScorecardCommit returns AllCertifyScorecardScorecard.ScorecardCommit, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetScorecardCommit() string { return v.ScorecardCommit }

// GetOrigin returns AllCertifyScorecardScorecard.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyScorecardScorecard.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecard) GetCollector() string { return v.Collector }

// AllCertifyScorecardScorecardChecksScorecardCheck includes the requested fields of the GraphQL type ScorecardCheck.
// The GraphQL type's documentation follows.
//
// ScorecardCheck are the individual checks from scorecard and their values as a
// key-value pair.
//
// For example:  Branch-Protection, Code-Review...etc
//
// Based off scorecard's:
// type jsonCheckResultV2 struct {
// Details []string                 `json:"details"`
// Score   int                      `json:"score"`
// Reason  string                   `json:"reason"`
// Name    string                   `json:"name"`
// Doc     jsonCheckDocumentationV2 `json:"documentation"`
// }
// This node cannot be directly referred by other parts of GUAC.
type AllCertifyScorecardScorecardChecksScorecardCheck struct {
	Check string `json:"check"`
	Score int    `json:"score"`
}

// GetCheck returns AllCertifyScorecardScorecardChecksScorecardCheck.Check, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecardChecksScorecardCheck) GetCheck() string { return v.Check }

// GetScore returns AllCertifyScorecardScorecardChecksScorecardCheck.Score, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardScorecardChecksScorecardCheck) GetScore() int { return v.Score }

// AllCertifyScorecardSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllCertifyScorecardSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns AllCertifyScorecardSource.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllCertifyScorecardSource.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllCertifyScorecardSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyScorecardSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllCertifyScorecardSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyScorecardSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyScorecardSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyScorecardSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllCertifyScorecardSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyScorecardSource) __premarshalJSON() (*__premarshalAllCertifyScorecardSource, error) {
	var retval __premarshalAllCertifyScorecardSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllCertifyVuln includes the GraphQL fields of CertifyVuln requested by the fragment AllCertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type AllCertifyVuln struct {
	Id string `json:"id"`
	// The package that is attested
	Package AllCertifyVulnPackage `json:"package"`
	// The vulnerability object. Can be an OSV, CVE, or GHSA or the special NoVuln node.
	Vulnerability AllCertifyVulnVulnerability `json:"-"`
	// Metadata attached to the certification
	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

// GetId returns AllCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetId() string { return v.Id }

// GetPackage returns AllCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.Package }

// GetVulnerability returns AllCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability { return v.Vulnerability }

// GetMetadata returns AllCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *AllCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData { return v.Metadata }

func (v *AllCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVuln
		Vulnerability json.RawMessage `json:"vulnerability"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Vulnerability
		src := firstPass.Vulnerability
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllCertifyVulnVulnerability(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal AllCertifyVuln.Vulnerability: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *AllCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVuln) __premarshalJSON() (*__premarshalAllCertifyVuln, error) {
	var retval __premarshalAllCertifyVuln

	retval.Id = v.Id
	retval.Package = v.Package
	{

		dst := &retval.Vulnerability
		src := v.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.Metadata
	return &retval, nil
}

// AllCertifyVulnMetadataVulnerabilityMetaData includes the requested fields of the GraphQL type VulnerabilityMetaData.
// The GraphQL type's documentation follows.
//
// VulnerabilityMetaData is the metadata attached to vulnerability certification.
//
// It contains metadata about the scanner process that created the certification.
type AllCertifyVulnMetadataVulnerabilityMetaData struct {
	// URI of the vulnerability database used by the scanner
	DbUri string `json:"dbUri"`
	// Version of the vulnerability database used by the scanner
	DbVersion string `json:"dbVersion"`
	// URI of the scanner
	ScannerUri string `json:"scannerUri"`
	// Version of the scanner
	ScannerVersion string `json:"scannerVersion"`
	// Time of scan (in RFC 3339 format)
	TimeScanned time.Time `json:"timeScanned"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetDbUri returns AllCertifyVulnMetadataVulnerabilityMetaData.DbUri, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetDbUri() string { return v.DbUri }

// GetDbVersion returns AllCertifyVulnMetadataVulnerabilityMetaData.DbVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetDbVersion() string { return v.DbVersion }

// GetScannerUri returns AllCertifyVulnMetadataVulnerabilityMetaData.ScannerUri, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetScannerUri() string { return v.ScannerUri }

// GetScannerVersion returns AllCertifyVulnMetadataVulnerabilityMetaData.ScannerVersion, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetScannerVersion() string {
	return v.ScannerVersion
}

// GetTimeScanned returns AllCertifyVulnMetadataVulnerabilityMetaData.TimeScanned, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetTimeScanned() time.Time {
	return v.TimeScanned
}

// GetOrigin returns AllCertifyVulnMetadataVulnerabilityMetaData.Origin, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetOrigin() string { return v.Origin }

// GetCollector returns AllCertifyVulnMetadataVulnerabilityMetaData.Collector, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnMetadataVulnerabilityMetaData) GetCollector() string { return v.Collector }

// AllCertifyVulnPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllCertifyVulnPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns AllCertifyVulnPackage.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllCertifyVulnPackage.Type, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllCertifyVulnPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllCertifyVulnPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVulnPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVulnPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVulnPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllCertifyVulnPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVulnPackage) __premarshalJSON() (*__premarshalAllCertifyVulnPackage, error) {
	var retval __premarshalAllCertifyVulnPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllCertifyVulnVulnerability includes the requested fields of the GraphQL interface Vulnerability.
//
// AllCertifyVulnVulnerability is implemented by the following types:
// AllCertifyVulnVulnerabilityOSV
// AllCertifyVulnVulnerabilityCVE
// AllCertifyVulnVulnerabilityGHSA
// AllCertifyVulnVulnerabilityNoVuln
// The GraphQL type's documentation follows.
//
// Vulnerability is a union of OSV, CVE, GHSA or the NoVuln node.
type AllCertifyVulnVulnerability interface {
	implementsGraphQLInterfaceAllCertifyVulnVulnerability()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllCertifyVulnVulnerabilityOSV) implementsGraphQLInterfaceAllCertifyVulnVulnerability()    {}
func (v *AllCertifyVulnVulnerabilityCVE) implementsGraphQLInterfaceAllCertifyVulnVulnerability()    {}
func (v *AllCertifyVulnVulnerabilityGHSA) implementsGraphQLInterfaceAllCertifyVulnVulnerability()   {}
func (v *AllCertifyVulnVulnerabilityNoVuln) implementsGraphQLInterfaceAllCertifyVulnVulnerability() {}

func __unmarshalAllCertifyVulnVulnerability(b []byte, v *AllCertifyVulnVulnerability) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "OSV":
		*v = new(AllCertifyVulnVulnerabilityOSV)
		return json.Unmarshal(b, *v)
	case "CVE":
		*v = new(AllCertifyVulnVulnerabilityCVE)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(AllCertifyVulnVulnerabilityGHSA)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(AllCertifyVulnVulnerabilityNoVuln)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Vulnerability.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllCertifyVulnVulnerability: "%v"`, tn.TypeName)
	}
}

func __marshalAllCertifyVulnVulnerability(v *AllCertifyVulnVulnerability) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllCertifyVulnVulnerabilityOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVulnVulnerabilityOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyVulnVulnerabilityCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVulnVulnerabilityCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyVulnVulnerabilityGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllCertifyVulnVulnerabilityGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllCertifyVulnVulnerabilityNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*AllCertifyVulnVulnerabilityNoVuln
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllCertifyVulnVulnerability: "%T"`, v)
	}
}

// AllCertifyVulnVulnerabilityCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllCertifyVulnVulnerabilityCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns AllCertifyVulnVulnerabilityCVE.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityCVE) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVulnVulnerabilityCVE.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns AllCertifyVulnVulnerabilityCVE.Year, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns AllCertifyVulnVulnerabilityCVE.CveId, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *AllCertifyVulnVulnerabilityCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVulnVulnerabilityCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVulnVulnerabilityCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVulnVulnerabilityCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *AllCertifyVulnVulnerabilityCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVulnVulnerabilityCVE) __premarshalJSON() (*__premarshalAllCertifyVulnVulnerabilityCVE, error) {
	var retval __premarshalAllCertifyVulnVulnerabilityCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// AllCertifyVulnVulnerabilityGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllCertifyVulnVulnerabilityGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns AllCertifyVulnVulnerabilityGHSA.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityGHSA) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVulnVulnerabilityGHSA.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns AllCertifyVulnVulnerabilityGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *AllCertifyVulnVulnerabilityGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVulnVulnerabilityGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVulnVulnerabilityGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVulnVulnerabilityGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *AllCertifyVulnVulnerabilityGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVulnVulnerabilityGHSA) __premarshalJSON() (*__premarshalAllCertifyVulnVulnerabilityGHSA, error) {
	var retval __premarshalAllCertifyVulnVulnerabilityGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// AllCertifyVulnVulnerabilityNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type AllCertifyVulnVulnerabilityNoVuln struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns AllCertifyVulnVulnerabilityNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityNoVuln) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVulnVulnerabilityNoVuln.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityNoVuln) GetId() string { return v.Id }

// AllCertifyVulnVulnerabilityOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type AllCertifyVulnVulnerabilityOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns AllCertifyVulnVulnerabilityOSV.Typename, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityOSV) GetTypename() *string { return v.Typename }

// GetId returns AllCertifyVulnVulnerabilityOSV.Id, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns AllCertifyVulnVulnerabilityOSV.OsvId, and is useful for accessing the field via an interface.
func (v *AllCertifyVulnVulnerabilityOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *AllCertifyVulnVulnerabilityOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllCertifyVulnVulnerabilityOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.AllCertifyVulnVulnerabilityOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllCertifyVulnVulnerabilityOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *AllCertifyVulnVulnerabilityOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllCertifyVulnVulnerabilityOSV) __premarshalJSON() (*__premarshalAllCertifyVulnVulnerabilityOSV, error) {
	var retval __premarshalAllCertifyVulnVulnerabilityOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// AllCveTree includes the GraphQL fields of CVE requested by the fragment AllCveTree.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllCveTree struct {
	Id    string `json:"id"`
	Year  int    `json:"year"`
	CveId string `json:"cveId"`
}

// GetId returns AllCveTree.Id, and is useful for accessing the field via an interface.
func (v *AllCveTree) GetId() string { return v.Id }

// GetYear returns AllCveTree.Year, and is useful for accessing the field via an interface.
func (v *AllCveTree) GetYear() int { return v.Year }

// GetCveId returns AllCveTree.CveId, and is useful for accessing the field via an interface.
func (v *AllCveTree) GetCveId() string { return v.CveId }

// AllGHSATree includes the GraphQL fields of GHSA requested by the fragment AllGHSATree.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type AllGHSATree struct {
	Id     string `json:"id"`
	GhsaId string `json:"ghsaId"`
}

// GetId returns AllGHSATree.Id, and is useful for accessing the field via an interface.
func (v *AllGHSATree) GetId() string { return v.Id }

// GetGhsaId returns AllGHSATree.GhsaId, and is useful for accessing the field via an interface.
func (v *AllGHSATree) GetGhsaId() string { return v.GhsaId }

// AllIsOccurrencesTree includes the GraphQL fields of IsOccurrence requested by the fragment AllIsOccurrencesTree.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type AllIsOccurrencesTree struct {
	Id string `json:"id"`
	// Package or source from which the artifact originates
	Subject AllIsOccurrencesTreeSubjectPackageOrSource `json:"-"`
	// The artifact in the relationship
	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns AllIsOccurrencesTree.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetId() string { return v.Id }

// GetSubject returns AllIsOccurrencesTree.Subject, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.Subject
}

// GetArtifact returns AllIsOccurrencesTree.Artifact, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetArtifact() AllIsOccurrencesTreeArtifact { return v.Artifact }

// GetJustification returns AllIsOccurrencesTree.Justification, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetJustification() string { return v.Justification }

// GetOrigin returns AllIsOccurrencesTree.Origin, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetOrigin() string { return v.Origin }

// GetCollector returns AllIsOccurrencesTree.Collector, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTree) GetCollector() string { return v.Collector }

func (v *AllIsOccurrencesTree) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTree
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTree = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAllIsOccurrencesTreeSubjectPackageOrSource(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal AllIsOccurrencesTree.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAllIsOccurrencesTree struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *AllIsOccurrencesTree) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTree) __premarshalJSON() (*__premarshalAllIsOccurrencesTree, error) {
	var retval __premarshalAllIsOccurrencesTree

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.Artifact
	retval.Justification = v.Justification
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// AllIsOccurrencesTreeArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type AllIsOccurrencesTreeArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns AllIsOccurrencesTreeArtifact.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns AllIsOccurrencesTreeArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns AllIsOccurrencesTreeArtifact.Digest, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *AllIsOccurrencesTreeArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTreeArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTreeArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsOccurrencesTreeArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *AllIsOccurrencesTreeArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTreeArtifact) __premarshalJSON() (*__premarshalAllIsOccurrencesTreeArtifact, error) {
	var retval __premarshalAllIsOccurrencesTreeArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// AllIsOccurrencesTreeSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllIsOccurrencesTreeSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns AllIsOccurrencesTreeSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns AllIsOccurrencesTreeSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns AllIsOccurrencesTreeSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns AllIsOccurrencesTreeSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *AllIsOccurrencesTreeSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTreeSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTreeSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsOccurrencesTreeSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *AllIsOccurrencesTreeSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTreeSubjectPackage) __premarshalJSON() (*__premarshalAllIsOccurrencesTreeSubjectPackage, error) {
	var retval __premarshalAllIsOccurrencesTreeSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// AllIsOccurrencesTreeSubjectPackageOrSource includes the requested fields of the GraphQL interface PackageOrSource.
//
// AllIsOccurrencesTreeSubjectPackageOrSource is implemented by the following types:
// AllIsOccurrencesTreeSubjectPackage
// AllIsOccurrencesTreeSubjectSource
// The GraphQL type's documentation follows.
//
// PackageOrSource is a union of Package and Source.
type AllIsOccurrencesTreeSubjectPackageOrSource interface {
	implementsGraphQLInterfaceAllIsOccurrencesTreeSubjectPackageOrSource()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AllIsOccurrencesTreeSubjectPackage) implementsGraphQLInterfaceAllIsOccurrencesTreeSubjectPackageOrSource() {
}
func (v *AllIsOccurrencesTreeSubjectSource) implementsGraphQLInterfaceAllIsOccurrencesTreeSubjectPackageOrSource() {
}

func __unmarshalAllIsOccurrencesTreeSubjectPackageOrSource(b []byte, v *AllIsOccurrencesTreeSubjectPackageOrSource) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(AllIsOccurrencesTreeSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(AllIsOccurrencesTreeSubjectSource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrSource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AllIsOccurrencesTreeSubjectPackageOrSource: "%v"`, tn.TypeName)
	}
}

func __marshalAllIsOccurrencesTreeSubjectPackageOrSource(v *AllIsOccurrencesTreeSubjectPackageOrSource) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AllIsOccurrencesTreeSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllIsOccurrencesTreeSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AllIsOccurrencesTreeSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAllIsOccurrencesTreeSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AllIsOccurrencesTreeSubjectPackageOrSource: "%T"`, v)
	}
}

// AllIsOccurrencesTreeSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllIsOccurrencesTreeSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns AllIsOccurrencesTreeSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns AllIsOccurrencesTreeSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns AllIsOccurrencesTreeSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns AllIsOccurrencesTreeSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *AllIsOccurrencesTreeSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *AllIsOccurrencesTreeSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllIsOccurrencesTreeSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AllIsOccurrencesTreeSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllIsOccurrencesTreeSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *AllIsOccurrencesTreeSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllIsOccurrencesTreeSubjectSource) __premarshalJSON() (*__premarshalAllIsOccurrencesTreeSubjectSource, error) {
	var retval __premarshalAllIsOccurrencesTreeSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// AllOSVTree includes the GraphQL fields of OSV requested by the fragment AllOSVTree.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type AllOSVTree struct {
	Id    string `json:"id"`
	OsvId string `json:"osvId"`
}

// GetId returns AllOSVTree.Id, and is useful for accessing the field via an interface.
func (v *AllOSVTree) GetId() string { return v.Id }

// GetOsvId returns AllOSVTree.OsvId, and is useful for accessing the field via an interface.
func (v *AllOSVTree) GetOsvId() string { return v.OsvId }

// AllPkgTree includes the GraphQL fields of Package requested by the fragment AllPkgTree.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type AllPkgTree struct {
	Id         string                                 `json:"id"`
	Type       string                                 `json:"type"`
	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

// GetId returns AllPkgTree.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTree) GetId() string { return v.Id }

// GetType returns AllPkgTree.Type, and is useful for accessing the field via an interface.
func (v *AllPkgTree) GetType() string { return v.Type }

// GetNamespaces returns AllPkgTree.Namespaces, and is useful for accessing the field via an interface.
func (v *AllPkgTree) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace { return v.Namespaces }

// AllPkgTreeNamespacesPackageNamespace includes the requested fields of the GraphQL type PackageNamespace.
// The GraphQL type's documentation follows.
//
// PackageNamespace is a namespace for packages.
//
// In the pURL representation, each PackageNamespace matches the
// pkg:<type>/<namespace>/ partial pURL.
//
// Namespaces are optional and type specific. Because they are optional, we use
// empty string to denote missing namespaces.
type AllPkgTreeNamespacesPackageNamespace struct {
	Id        string                                                 `json:"id"`
	Namespace string                                                 `json:"namespace"`
	Names     []AllPkgTreeNamespacesPackageNamespaceNamesPackageName `json:"names"`
}

// GetId returns AllPkgTreeNamespacesPackageNamespace.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespace) GetId() string { return v.Id }

// GetNamespace returns AllPkgTreeNamespacesPackageNamespace.Namespace, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespace) GetNamespace() string { return v.Namespace }

// GetNames returns AllPkgTreeNamespacesPackageNamespace.Names, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespace) GetNames() []AllPkgTreeNamespacesPackageNamespaceNamesPackageName {
	return v.Names
}

// AllPkgTreeNamespacesPackageNamespaceNamesPackageName includes the requested fields of the GraphQL type PackageName.
// The GraphQL type's documentation follows.
//
// PackageName is a name for packages.
//
// In the pURL representation, each PackageName matches the
// pkg:<type>/<namespace>/<name> pURL.
//
// Names are always mandatory.
//
// This is the first node in the trie that can be referred to by other parts of
// GUAC.
type AllPkgTreeNamespacesPackageNamespaceNamesPackageName struct {
	Id       string                                                                       `json:"id"`
	Name     string                                                                       `json:"name"`
	Versions []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion `json:"versions"`
}

// GetId returns AllPkgTreeNamespacesPackageNamespaceNamesPackageName.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageName) GetId() string { return v.Id }

// GetName returns AllPkgTreeNamespacesPackageNamespaceNamesPackageName.Name, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageName) GetName() string { return v.Name }

// GetVersions returns AllPkgTreeNamespacesPackageNamespaceNamesPackageName.Versions, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageName) GetVersions() []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion {
	return v.Versions
}

// AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion includes the requested fields of the GraphQL type PackageVersion.
// The GraphQL type's documentation follows.
//
// PackageVersion is a package version.
//
// In the pURL representation, each PackageName matches the
// pkg:<type>/<namespace>/<name>@<version> pURL.
//
// Versions are optional and each Package type defines own rules for handling
// them. For this level of GUAC, these are just opaque strings.
//
// NOTE: The handling of versions might change before this schema becomes stable.
//
// This node can be referred to by other parts of GUAC.
//
// Subpath and qualifiers are optional. Lack of qualifiers is represented by an
// empty list and lack of subpath by empty string (to be consistent with
// optionality of namespace and version). Two nodes that have different qualifiers
// and/or subpath but the same version mean two different packages in the trie
// (they are different). Two nodes that have same version but qualifiers of one
// are a subset of the qualifier of the other also mean two different packages in
// the trie.
type AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion struct {
	Id         string                                                                                                 `json:"id"`
	Version    string                                                                                                 `json:"version"`
	Qualifiers []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier `json:"qualifiers"`
	Subpath    string                                                                                                 `json:"subpath"`
}

// GetId returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Id, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetId() string {
	return v.Id
}

// GetVersion returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Version, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetVersion() string {
	return v.Version
}

// GetQualifiers returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Qualifiers, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetQualifiers() []AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier {
	return v.Qualifiers
}

// GetSubpath returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion.Subpath, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersion) GetSubpath() string {
	return v.Subpath
}

// AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier includes the requested fields of the GraphQL type PackageQualifier.
// The GraphQL type's documentation follows.
//
// PackageQualifier is a qualifier for a package, a key-value pair.
//
// In the pURL representation, it is a part of the <qualifiers> part of the
// pkg:<type>/<namespace>/<name>@<version>?<qualifiers> pURL.
//
// Qualifiers are optional, each Package type defines own rules for handling them,
// and multiple qualifiers could be attached to the same package.
//
// This node cannot be directly referred by other parts of GUAC.
type AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier.Key, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier) GetKey() string {
	return v.Key
}

// GetValue returns AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier.Value, and is useful for accessing the field via an interface.
func (v *AllPkgTreeNamespacesPackageNamespaceNamesPackageNameVersionsPackageVersionQualifiersPackageQualifier) GetValue() string {
	return v.Value
}

// AllSourceTree includes the GraphQL fields of Source requested by the fragment AllSourceTree.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type AllSourceTree struct {
	Id         string                                   `json:"id"`
	Type       string                                   `json:"type"`
	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

// GetId returns AllSourceTree.Id, and is useful for accessing the field via an interface.
func (v *AllSourceTree) GetId() string { return v.Id }

// GetType returns AllSourceTree.Type, and is useful for accessing the field via an interface.
func (v *AllSourceTree) GetType() string { return v.Type }

// GetNamespaces returns AllSourceTree.Namespaces, and is useful for accessing the field via an interface.
func (v *AllSourceTree) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace { return v.Namespaces }

// AllSourceTreeNamespacesSourceNamespace includes the requested fields of the GraphQL type SourceNamespace.
// The GraphQL type's documentation follows.
//
// SourceNamespace is a namespace for sources.
//
// This is the location of the repository (such as github/gitlab/bitbucket).
//
// The namespace field is mandatory.
type AllSourceTreeNamespacesSourceNamespace struct {
	Id        string                                                  `json:"id"`
	Namespace string                                                  `json:"namespace"`
	Names     []AllSourceTreeNamespacesSourceNamespaceNamesSourceName `json:"names"`
}

// GetId returns AllSourceTreeNamespacesSourceNamespace.Id, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespace) GetId() string { return v.Id }

// GetNamespace returns AllSourceTreeNamespacesSourceNamespace.Namespace, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespace) GetNamespace() string { return v.Namespace }

// GetNames returns AllSourceTreeNamespacesSourceNamespace.Names, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespace) GetNames() []AllSourceTreeNamespacesSourceNamespaceNamesSourceName {
	return v.Names
}

// AllSourceTreeNamespacesSourceNamespaceNamesSourceName includes the requested fields of the GraphQL type SourceName.
// The GraphQL type's documentation follows.
//
// SourceName represents the url of the repository.
//
// The name field is mandatory. The tag and commit fields are optional, but it is
// an error to specify both.
//
// This is the only source trie node that can be referenced by other parts of GUAC.
type AllSourceTreeNamespacesSourceNamespaceNamesSourceName struct {
	Id     string  `json:"id"`
	Name   string  `json:"name"`
	Tag    *string `json:"tag"`
	Commit *string `json:"commit"`
}

// GetId returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Id, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetId() string { return v.Id }

// GetName returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Name, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetName() string { return v.Name }

// GetTag returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Tag, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetTag() *string { return v.Tag }

// GetCommit returns AllSourceTreeNamespacesSourceNamespaceNamesSourceName.Commit, and is useful for accessing the field via an interface.
func (v *AllSourceTreeNamespacesSourceNamespaceNamesSourceName) GetCommit() *string { return v.Commit }

// AnnotationInputSpec allows ingesting Annotation objects.
type AnnotationInputSpec struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns AnnotationInputSpec.Key, and is useful for accessing the field via an interface.
func (v *AnnotationInputSpec) GetKey() string { return v.Key }

// GetValue returns AnnotationInputSpec.Value, and is useful for accessing the field via an interface.
func (v *AnnotationInputSpec) GetValue() string { return v.Value }

// ArtifactInputSpec specifies an artifact for mutations.
//
// The checksum fields are canonicalized to be lowercase.
type ArtifactInputSpec struct {
	Algorithm string `json:"algorithm"`
	Digest    string `json:"digest"`
}

// GetAlgorithm returns ArtifactInputSpec.Algorithm, and is useful for accessing the field via an interface.
func (v *ArtifactInputSpec) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns ArtifactInputSpec.Digest, and is useful for accessing the field via an interface.
func (v *ArtifactInputSpec) GetDigest() string { return v.Digest }

// ArtifactSpec allows filtering the list of artifacts to return in a query.
//
// The checksum fields are canonicalized to be lowercase.
type ArtifactSpec struct {
	Id        *string `json:"id"`
	Algorithm *string `json:"algorithm"`
	Digest    *string `json:"digest"`
}

// GetId returns ArtifactSpec.Id, and is useful for accessing the field via an interface.
func (v *ArtifactSpec) GetId() *string { return v.Id }

// GetAlgorithm returns ArtifactSpec.Algorithm, and is useful for accessing the field via an interface.
func (v *ArtifactSpec) GetAlgorithm() *string { return v.Algorithm }

// GetDigest returns ArtifactSpec.Digest, and is useful for accessing the field via an interface.
func (v *ArtifactSpec) GetDigest() *string { return v.Digest }

// ArtifactsArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type ArtifactsArtifactsArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns ArtifactsArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *ArtifactsArtifactsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns ArtifactsArtifactsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *ArtifactsArtifactsArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns ArtifactsArtifactsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *ArtifactsArtifactsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *ArtifactsArtifactsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ArtifactsArtifactsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.ArtifactsArtifactsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalArtifactsArtifactsArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *ArtifactsArtifactsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ArtifactsArtifactsArtifact) __premarshalJSON() (*__premarshalArtifactsArtifactsArtifact, error) {
	var retval __premarshalArtifactsArtifactsArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// ArtifactsResponse is returned by Artifacts on success.
type ArtifactsResponse struct {
	// Returns all artifacts matching a filter.
	Artifacts []ArtifactsArtifactsArtifact `json:"artifacts"`
}

// GetArtifacts returns ArtifactsResponse.Artifacts, and is useful for accessing the field via an interface.
func (v *ArtifactsResponse) GetArtifacts() []ArtifactsArtifactsArtifact { return v.Artifacts }

// BuilderInputSpec specifies a builder for mutations.
type BuilderInputSpec struct {
	Uri string `json:"uri"`
}

// GetUri returns BuilderInputSpec.Uri, and is useful for accessing the field via an interface.
func (v *BuilderInputSpec) GetUri() string { return v.Uri }

// CVEInputSpec specifies a CVE vulnerability for mutations.
type CVEInputSpec struct {
	Year  int    `json:"year"`
	CveId string `json:"cveId"`
}

// GetYear returns CVEInputSpec.Year, and is useful for accessing the field via an interface.
func (v *CVEInputSpec) GetYear() int { return v.Year }

// GetCveId returns CVEInputSpec.CveId, and is useful for accessing the field via an interface.
func (v *CVEInputSpec) GetCveId() string { return v.CveId }

// CVESpec allows filtering the list of advisories to return in a query.
type CVESpec struct {
	Id    *string `json:"id"`
	Year  *int    `json:"year"`
	CveId *string `json:"cveId"`
}

// GetId returns CVESpec.Id, and is useful for accessing the field via an interface.
func (v *CVESpec) GetId() *string { return v.Id }

// GetYear returns CVESpec.Year, and is useful for accessing the field via an interface.
func (v *CVESpec) GetYear() *int { return v.Year }

// GetCveId returns CVESpec.CveId, and is useful for accessing the field via an interface.
func (v *CVESpec) GetCveId() *string { return v.CveId }

// CVEsCveCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type CVEsCveCVE struct {
	AllCveTree `json:"-"`
}

// GetId returns CVEsCveCVE.Id, and is useful for accessing the field via an interface.
func (v *CVEsCveCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns CVEsCveCVE.Year, and is useful for accessing the field via an interface.
func (v *CVEsCveCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns CVEsCveCVE.CveId, and is useful for accessing the field via an interface.
func (v *CVEsCveCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *CVEsCveCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CVEsCveCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.CVEsCveCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCVEsCveCVE struct {
	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *CVEsCveCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CVEsCveCVE) __premarshalJSON() (*__premarshalCVEsCveCVE, error) {
	var retval __premarshalCVEsCveCVE

	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// CVEsResponse is returned by CVEs on success.
type CVEsResponse struct {
	// Returns all CVEs matching a filter.
	Cve []CVEsCveCVE `json:"cve"`
}

// GetCve returns CVEsResponse.Cve, and is useful for accessing the field via an interface.
func (v *CVEsResponse) GetCve() []CVEsCveCVE { return v.Cve }

// CertifyBadArtifactIngestArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type CertifyBadArtifactIngestArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns CertifyBadArtifactIngestArtifact.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns CertifyBadArtifactIngestArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns CertifyBadArtifactIngestArtifact.Digest, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *CertifyBadArtifactIngestArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadArtifactIngestArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadArtifactIngestArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadArtifactIngestArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *CertifyBadArtifactIngestArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadArtifactIngestArtifact) __premarshalJSON() (*__premarshalCertifyBadArtifactIngestArtifact, error) {
	var retval __premarshalCertifyBadArtifactIngestArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// CertifyBadArtifactIngestCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyBadArtifactIngestCertifyBad struct {
	AllCertifyBad `json:"-"`
}

// GetId returns CertifyBadArtifactIngestCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns CertifyBadArtifactIngestCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestCertifyBad) GetJustification() string {
	return v.AllCertifyBad.Justification
}

// GetSubject returns CertifyBadArtifactIngestCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns CertifyBadArtifactIngestCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns CertifyBadArtifactIngestCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactIngestCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *CertifyBadArtifactIngestCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadArtifactIngestCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadArtifactIngestCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadArtifactIngestCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyBadArtifactIngestCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadArtifactIngestCertifyBad) __premarshalJSON() (*__premarshalCertifyBadArtifactIngestCertifyBad, error) {
	var retval __premarshalCertifyBadArtifactIngestCertifyBad

	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyBadArtifactIngestCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// CertifyBadArtifactResponse is returned by CertifyBadArtifact on success.
type CertifyBadArtifactResponse struct {
	// Ingests a new artifact and returns it.
	IngestArtifact CertifyBadArtifactIngestArtifact `json:"ingestArtifact"`
	// Adds a certification that a package, source or artifact is considered bad.
	IngestCertifyBad CertifyBadArtifactIngestCertifyBad `json:"ingestCertifyBad"`
}

// GetIngestArtifact returns CertifyBadArtifactResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactResponse) GetIngestArtifact() CertifyBadArtifactIngestArtifact {
	return v.IngestArtifact
}

// GetIngestCertifyBad returns CertifyBadArtifactResponse.IngestCertifyBad, and is useful for accessing the field via an interface.
func (v *CertifyBadArtifactResponse) GetIngestCertifyBad() CertifyBadArtifactIngestCertifyBad {
	return v.IngestCertifyBad
}

// CertifyBadInputSpec represents the mutation input to ingest a CertifyBad
// evidence.
type CertifyBadInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns CertifyBadInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns CertifyBadInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns CertifyBadInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadInputSpec) GetCollector() string { return v.Collector }

// CertifyBadPkgIngestCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyBadPkgIngestCertifyBad struct {
	AllCertifyBad `json:"-"`
}

// GetId returns CertifyBadPkgIngestCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns CertifyBadPkgIngestCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestCertifyBad) GetJustification() string {
	return v.AllCertifyBad.Justification
}

// GetSubject returns CertifyBadPkgIngestCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns CertifyBadPkgIngestCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns CertifyBadPkgIngestCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *CertifyBadPkgIngestCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadPkgIngestCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadPkgIngestCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadPkgIngestCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyBadPkgIngestCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadPkgIngestCertifyBad) __premarshalJSON() (*__premarshalCertifyBadPkgIngestCertifyBad, error) {
	var retval __premarshalCertifyBadPkgIngestCertifyBad

	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyBadPkgIngestCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// CertifyBadPkgIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type CertifyBadPkgIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns CertifyBadPkgIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns CertifyBadPkgIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns CertifyBadPkgIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *CertifyBadPkgIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadPkgIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadPkgIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadPkgIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *CertifyBadPkgIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadPkgIngestPackage) __premarshalJSON() (*__premarshalCertifyBadPkgIngestPackage, error) {
	var retval __premarshalCertifyBadPkgIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// CertifyBadPkgResponse is returned by CertifyBadPkg on success.
type CertifyBadPkgResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage CertifyBadPkgIngestPackage `json:"ingestPackage"`
	// Adds a certification that a package, source or artifact is considered bad.
	IngestCertifyBad CertifyBadPkgIngestCertifyBad `json:"ingestCertifyBad"`
}

// GetIngestPackage returns CertifyBadPkgResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgResponse) GetIngestPackage() CertifyBadPkgIngestPackage { return v.IngestPackage }

// GetIngestCertifyBad returns CertifyBadPkgResponse.IngestCertifyBad, and is useful for accessing the field via an interface.
func (v *CertifyBadPkgResponse) GetIngestCertifyBad() CertifyBadPkgIngestCertifyBad {
	return v.IngestCertifyBad
}

// CertifyBadSpec allows filtering the list of CertifyBad evidence to return in a
// query.
//
// If a package is specified in the subject filter, then it must be specified up
// to PackageName or PackageVersion. That is, user must specify package name, or
// name and one of version, qualifiers, or subpath.
//
// If a source is specified in the subject filter, then it must specify a name,
// and optionally a tag and a commit.
type CertifyBadSpec struct {
	Id            *string                      `json:"id"`
	Subject       *PackageSourceOrArtifactSpec `json:"subject"`
	Justification *string                      `json:"justification"`
	Origin        *string                      `json:"origin"`
	Collector     *string                      `json:"collector"`
}

// GetId returns CertifyBadSpec.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetId() *string { return v.Id }

// GetSubject returns CertifyBadSpec.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetSubject() *PackageSourceOrArtifactSpec { return v.Subject }

// GetJustification returns CertifyBadSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetJustification() *string { return v.Justification }

// GetOrigin returns CertifyBadSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetOrigin() *string { return v.Origin }

// GetCollector returns CertifyBadSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadSpec) GetCollector() *string { return v.Collector }

// CertifyBadSrcIngestCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyBadSrcIngestCertifyBad struct {
	AllCertifyBad `json:"-"`
}

// GetId returns CertifyBadSrcIngestCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns CertifyBadSrcIngestCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestCertifyBad) GetJustification() string {
	return v.AllCertifyBad.Justification
}

// GetSubject returns CertifyBadSrcIngestCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns CertifyBadSrcIngestCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns CertifyBadSrcIngestCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *CertifyBadSrcIngestCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadSrcIngestCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadSrcIngestCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadSrcIngestCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyBadSrcIngestCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadSrcIngestCertifyBad) __premarshalJSON() (*__premarshalCertifyBadSrcIngestCertifyBad, error) {
	var retval __premarshalCertifyBadSrcIngestCertifyBad

	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyBadSrcIngestCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// CertifyBadSrcIngestSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type CertifyBadSrcIngestSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns CertifyBadSrcIngestSource.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns CertifyBadSrcIngestSource.Type, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns CertifyBadSrcIngestSource.Namespaces, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcIngestSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *CertifyBadSrcIngestSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadSrcIngestSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadSrcIngestSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadSrcIngestSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *CertifyBadSrcIngestSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadSrcIngestSource) __premarshalJSON() (*__premarshalCertifyBadSrcIngestSource, error) {
	var retval __premarshalCertifyBadSrcIngestSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// CertifyBadSrcResponse is returned by CertifyBadSrc on success.
type CertifyBadSrcResponse struct {
	// Ingests a new source and returns the corresponding source trie path.
	IngestSource CertifyBadSrcIngestSource `json:"ingestSource"`
	// Adds a certification that a package, source or artifact is considered bad.
	IngestCertifyBad CertifyBadSrcIngestCertifyBad `json:"ingestCertifyBad"`
}

// GetIngestSource returns CertifyBadSrcResponse.IngestSource, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcResponse) GetIngestSource() CertifyBadSrcIngestSource { return v.IngestSource }

// GetIngestCertifyBad returns CertifyBadSrcResponse.IngestCertifyBad, and is useful for accessing the field via an interface.
func (v *CertifyBadSrcResponse) GetIngestCertifyBad() CertifyBadSrcIngestCertifyBad {
	return v.IngestCertifyBad
}

// CertifyBadsCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyBadsCertifyBad struct {
	AllCertifyBad `json:"-"`
}

// GetId returns CertifyBadsCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *CertifyBadsCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns CertifyBadsCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *CertifyBadsCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetSubject returns CertifyBadsCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *CertifyBadsCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns CertifyBadsCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *CertifyBadsCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns CertifyBadsCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *CertifyBadsCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *CertifyBadsCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyBadsCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyBadsCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyBadsCertifyBad struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyBadsCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyBadsCertifyBad) __premarshalJSON() (*__premarshalCertifyBadsCertifyBad, error) {
	var retval __premarshalCertifyBadsCertifyBad

	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyBadsCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// CertifyBadsResponse is returned by CertifyBads on success.
type CertifyBadsResponse struct {
	// Returns all CertifyBad attestations matching a filter.
	CertifyBad []CertifyBadsCertifyBad `json:"CertifyBad"`
}

// GetCertifyBad returns CertifyBadsResponse.CertifyBad, and is useful for accessing the field via an interface.
func (v *CertifyBadsResponse) GetCertifyBad() []CertifyBadsCertifyBad { return v.CertifyBad }

// CertifyCVEIngestCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type CertifyCVEIngestCVE struct {
	AllCveTree `json:"-"`
}

// GetId returns CertifyCVEIngestCVE.Id, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns CertifyCVEIngestCVE.Year, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns CertifyCVEIngestCVE.CveId, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *CertifyCVEIngestCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyCVEIngestCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyCVEIngestCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyCVEIngestCVE struct {
	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *CertifyCVEIngestCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyCVEIngestCVE) __premarshalJSON() (*__premarshalCertifyCVEIngestCVE, error) {
	var retval __premarshalCertifyCVEIngestCVE

	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// CertifyCVEIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type CertifyCVEIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns CertifyCVEIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns CertifyCVEIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns CertifyCVEIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *CertifyCVEIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyCVEIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyCVEIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyCVEIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *CertifyCVEIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyCVEIngestPackage) __premarshalJSON() (*__premarshalCertifyCVEIngestPackage, error) {
	var retval __premarshalCertifyCVEIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// CertifyCVEIngestVulnerabilityCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type CertifyCVEIngestVulnerabilityCertifyVuln struct {
	AllCertifyVuln `json:"-"`
}

// GetId returns CertifyCVEIngestVulnerabilityCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestVulnerabilityCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns CertifyCVEIngestVulnerabilityCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestVulnerabilityCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns CertifyCVEIngestVulnerabilityCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestVulnerabilityCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns CertifyCVEIngestVulnerabilityCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *CertifyCVEIngestVulnerabilityCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *CertifyCVEIngestVulnerabilityCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyCVEIngestVulnerabilityCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyCVEIngestVulnerabilityCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyCVEIngestVulnerabilityCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *CertifyCVEIngestVulnerabilityCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyCVEIngestVulnerabilityCertifyVuln) __premarshalJSON() (*__premarshalCertifyCVEIngestVulnerabilityCertifyVuln, error) {
	var retval __premarshalCertifyCVEIngestVulnerabilityCertifyVuln

	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyCVEIngestVulnerabilityCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// CertifyCVEResponse is returned by CertifyCVE on success.
type CertifyCVEResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage CertifyCVEIngestPackage `json:"ingestPackage"`
	// Ingests new CVE and returns it.
	IngestCVE CertifyCVEIngestCVE `json:"ingestCVE"`
	// Adds a certification that a package has been scanned for vulnerabilities.
	IngestVulnerability CertifyCVEIngestVulnerabilityCertifyVuln `json:"ingestVulnerability"`
}

// GetIngestPackage returns CertifyCVEResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *CertifyCVEResponse) GetIngestPackage() CertifyCVEIngestPackage { return v.IngestPackage }

// GetIngestCVE returns CertifyCVEResponse.IngestCVE, and is useful for accessing the field via an interface.
func (v *CertifyCVEResponse) GetIngestCVE() CertifyCVEIngestCVE { return v.IngestCVE }

// GetIngestVulnerability returns CertifyCVEResponse.IngestVulnerability, and is useful for accessing the field via an interface.
func (v *CertifyCVEResponse) GetIngestVulnerability() CertifyCVEIngestVulnerabilityCertifyVuln {
	return v.IngestVulnerability
}

// CertifyGHSAIngestGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type CertifyGHSAIngestGHSA struct {
	AllGHSATree `json:"-"`
}

// GetId returns CertifyGHSAIngestGHSA.Id, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns CertifyGHSAIngestGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *CertifyGHSAIngestGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGHSAIngestGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGHSAIngestGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGHSAIngestGHSA struct {
	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *CertifyGHSAIngestGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGHSAIngestGHSA) __premarshalJSON() (*__premarshalCertifyGHSAIngestGHSA, error) {
	var retval __premarshalCertifyGHSAIngestGHSA

	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// CertifyGHSAIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type CertifyGHSAIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns CertifyGHSAIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns CertifyGHSAIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns CertifyGHSAIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *CertifyGHSAIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGHSAIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGHSAIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGHSAIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *CertifyGHSAIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGHSAIngestPackage) __premarshalJSON() (*__premarshalCertifyGHSAIngestPackage, error) {
	var retval __premarshalCertifyGHSAIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// CertifyGHSAIngestVulnerabilityCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type CertifyGHSAIngestVulnerabilityCertifyVuln struct {
	AllCertifyVuln `json:"-"`
}

// GetId returns CertifyGHSAIngestVulnerabilityCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns CertifyGHSAIngestVulnerabilityCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns CertifyGHSAIngestVulnerabilityCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns CertifyGHSAIngestVulnerabilityCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGHSAIngestVulnerabilityCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGHSAIngestVulnerabilityCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGHSAIngestVulnerabilityCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGHSAIngestVulnerabilityCertifyVuln) __premarshalJSON() (*__premarshalCertifyGHSAIngestVulnerabilityCertifyVuln, error) {
	var retval __premarshalCertifyGHSAIngestVulnerabilityCertifyVuln

	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyGHSAIngestVulnerabilityCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// CertifyGHSAResponse is returned by CertifyGHSA on success.
type CertifyGHSAResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage CertifyGHSAIngestPackage `json:"ingestPackage"`
	// Ingests a new GitHub Security Advisory and returns it.
	IngestGHSA CertifyGHSAIngestGHSA `json:"ingestGHSA"`
	// Adds a certification that a package has been scanned for vulnerabilities.
	IngestVulnerability CertifyGHSAIngestVulnerabilityCertifyVuln `json:"ingestVulnerability"`
}

// GetIngestPackage returns CertifyGHSAResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *CertifyGHSAResponse) GetIngestPackage() CertifyGHSAIngestPackage { return v.IngestPackage }

// GetIngestGHSA returns CertifyGHSAResponse.IngestGHSA, and is useful for accessing the field via an interface.
func (v *CertifyGHSAResponse) GetIngestGHSA() CertifyGHSAIngestGHSA { return v.IngestGHSA }

// GetIngestVulnerability returns CertifyGHSAResponse.IngestVulnerability, and is useful for accessing the field via an interface.
func (v *CertifyGHSAResponse) GetIngestVulnerability() CertifyGHSAIngestVulnerabilityCertifyVuln {
	return v.IngestVulnerability
}

// CertifyGoodArtifactIngestArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type CertifyGoodArtifactIngestArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns CertifyGoodArtifactIngestArtifact.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns CertifyGoodArtifactIngestArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns CertifyGoodArtifactIngestArtifact.Digest, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *CertifyGoodArtifactIngestArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodArtifactIngestArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodArtifactIngestArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodArtifactIngestArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *CertifyGoodArtifactIngestArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodArtifactIngestArtifact) __premarshalJSON() (*__premarshalCertifyGoodArtifactIngestArtifact, error) {
	var retval __premarshalCertifyGoodArtifactIngestArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// CertifyGoodArtifactIngestCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyGoodArtifactIngestCertifyGood struct {
	allCertifyGood `json:"-"`
}

// GetId returns CertifyGoodArtifactIngestCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestCertifyGood) GetId() string { return v.allCertifyGood.Id }

// GetJustification returns CertifyGoodArtifactIngestCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestCertifyGood) GetJustification() string {
	return v.allCertifyGood.Justification
}

// GetSubject returns CertifyGoodArtifactIngestCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestCertifyGood) GetSubject() allCertifyGoodSubjectPackageSourceOrArtifact {
	return v.allCertifyGood.Subject
}

// GetOrigin returns CertifyGoodArtifactIngestCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestCertifyGood) GetOrigin() string { return v.allCertifyGood.Origin }

// GetCollector returns CertifyGoodArtifactIngestCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactIngestCertifyGood) GetCollector() string {
	return v.allCertifyGood.Collector
}

func (v *CertifyGoodArtifactIngestCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodArtifactIngestCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodArtifactIngestCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodArtifactIngestCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyGoodArtifactIngestCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodArtifactIngestCertifyGood) __premarshalJSON() (*__premarshalCertifyGoodArtifactIngestCertifyGood, error) {
	var retval __premarshalCertifyGoodArtifactIngestCertifyGood

	retval.Id = v.allCertifyGood.Id
	retval.Justification = v.allCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.allCertifyGood.Subject
		var err error
		*dst, err = __marshalallCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyGoodArtifactIngestCertifyGood.allCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.allCertifyGood.Origin
	retval.Collector = v.allCertifyGood.Collector
	return &retval, nil
}

// CertifyGoodArtifactResponse is returned by CertifyGoodArtifact on success.
type CertifyGoodArtifactResponse struct {
	// Ingests a new artifact and returns it.
	IngestArtifact CertifyGoodArtifactIngestArtifact `json:"ingestArtifact"`
	// Adds a certification that a package, source or artifact is considered good.
	IngestCertifyGood CertifyGoodArtifactIngestCertifyGood `json:"ingestCertifyGood"`
}

// GetIngestArtifact returns CertifyGoodArtifactResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactResponse) GetIngestArtifact() CertifyGoodArtifactIngestArtifact {
	return v.IngestArtifact
}

// GetIngestCertifyGood returns CertifyGoodArtifactResponse.IngestCertifyGood, and is useful for accessing the field via an interface.
func (v *CertifyGoodArtifactResponse) GetIngestCertifyGood() CertifyGoodArtifactIngestCertifyGood {
	return v.IngestCertifyGood
}

// CertifyGoodInputSpec represents the mutation input to ingest a CertifyGood evidence.
type CertifyGoodInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns CertifyGoodInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns CertifyGoodInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns CertifyGoodInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodInputSpec) GetCollector() string { return v.Collector }

// CertifyGoodPkgIngestCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyGoodPkgIngestCertifyGood struct {
	allCertifyGood `json:"-"`
}

// GetId returns CertifyGoodPkgIngestCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestCertifyGood) GetId() string { return v.allCertifyGood.Id }

// GetJustification returns CertifyGoodPkgIngestCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestCertifyGood) GetJustification() string {
	return v.allCertifyGood.Justification
}

// GetSubject returns CertifyGoodPkgIngestCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestCertifyGood) GetSubject() allCertifyGoodSubjectPackageSourceOrArtifact {
	return v.allCertifyGood.Subject
}

// GetOrigin returns CertifyGoodPkgIngestCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestCertifyGood) GetOrigin() string { return v.allCertifyGood.Origin }

// GetCollector returns CertifyGoodPkgIngestCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestCertifyGood) GetCollector() string { return v.allCertifyGood.Collector }

func (v *CertifyGoodPkgIngestCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodPkgIngestCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodPkgIngestCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodPkgIngestCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyGoodPkgIngestCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodPkgIngestCertifyGood) __premarshalJSON() (*__premarshalCertifyGoodPkgIngestCertifyGood, error) {
	var retval __premarshalCertifyGoodPkgIngestCertifyGood

	retval.Id = v.allCertifyGood.Id
	retval.Justification = v.allCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.allCertifyGood.Subject
		var err error
		*dst, err = __marshalallCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyGoodPkgIngestCertifyGood.allCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.allCertifyGood.Origin
	retval.Collector = v.allCertifyGood.Collector
	return &retval, nil
}

// CertifyGoodPkgIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type CertifyGoodPkgIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns CertifyGoodPkgIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns CertifyGoodPkgIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns CertifyGoodPkgIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *CertifyGoodPkgIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodPkgIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodPkgIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodPkgIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *CertifyGoodPkgIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodPkgIngestPackage) __premarshalJSON() (*__premarshalCertifyGoodPkgIngestPackage, error) {
	var retval __premarshalCertifyGoodPkgIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// CertifyGoodPkgResponse is returned by CertifyGoodPkg on success.
type CertifyGoodPkgResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage CertifyGoodPkgIngestPackage `json:"ingestPackage"`
	// Adds a certification that a package, source or artifact is considered good.
	IngestCertifyGood CertifyGoodPkgIngestCertifyGood `json:"ingestCertifyGood"`
}

// GetIngestPackage returns CertifyGoodPkgResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgResponse) GetIngestPackage() CertifyGoodPkgIngestPackage {
	return v.IngestPackage
}

// GetIngestCertifyGood returns CertifyGoodPkgResponse.IngestCertifyGood, and is useful for accessing the field via an interface.
func (v *CertifyGoodPkgResponse) GetIngestCertifyGood() CertifyGoodPkgIngestCertifyGood {
	return v.IngestCertifyGood
}

// CertifyGoodSrcIngestCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type CertifyGoodSrcIngestCertifyGood struct {
	allCertifyGood `json:"-"`
}

// GetId returns CertifyGoodSrcIngestCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestCertifyGood) GetId() string { return v.allCertifyGood.Id }

// GetJustification returns CertifyGoodSrcIngestCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestCertifyGood) GetJustification() string {
	return v.allCertifyGood.Justification
}

// GetSubject returns CertifyGoodSrcIngestCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestCertifyGood) GetSubject() allCertifyGoodSubjectPackageSourceOrArtifact {
	return v.allCertifyGood.Subject
}

// GetOrigin returns CertifyGoodSrcIngestCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestCertifyGood) GetOrigin() string { return v.allCertifyGood.Origin }

// GetCollector returns CertifyGoodSrcIngestCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestCertifyGood) GetCollector() string { return v.allCertifyGood.Collector }

func (v *CertifyGoodSrcIngestCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodSrcIngestCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodSrcIngestCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodSrcIngestCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *CertifyGoodSrcIngestCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodSrcIngestCertifyGood) __premarshalJSON() (*__premarshalCertifyGoodSrcIngestCertifyGood, error) {
	var retval __premarshalCertifyGoodSrcIngestCertifyGood

	retval.Id = v.allCertifyGood.Id
	retval.Justification = v.allCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.allCertifyGood.Subject
		var err error
		*dst, err = __marshalallCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyGoodSrcIngestCertifyGood.allCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.allCertifyGood.Origin
	retval.Collector = v.allCertifyGood.Collector
	return &retval, nil
}

// CertifyGoodSrcIngestSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type CertifyGoodSrcIngestSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns CertifyGoodSrcIngestSource.Id, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns CertifyGoodSrcIngestSource.Type, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns CertifyGoodSrcIngestSource.Namespaces, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcIngestSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *CertifyGoodSrcIngestSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyGoodSrcIngestSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyGoodSrcIngestSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyGoodSrcIngestSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *CertifyGoodSrcIngestSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyGoodSrcIngestSource) __premarshalJSON() (*__premarshalCertifyGoodSrcIngestSource, error) {
	var retval __premarshalCertifyGoodSrcIngestSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// CertifyGoodSrcResponse is returned by CertifyGoodSrc on success.
type CertifyGoodSrcResponse struct {
	// Ingests a new source and returns the corresponding source trie path.
	IngestSource CertifyGoodSrcIngestSource `json:"ingestSource"`
	// Adds a certification that a package, source or artifact is considered good.
	IngestCertifyGood CertifyGoodSrcIngestCertifyGood `json:"ingestCertifyGood"`
}

// GetIngestSource returns CertifyGoodSrcResponse.IngestSource, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcResponse) GetIngestSource() CertifyGoodSrcIngestSource { return v.IngestSource }

// GetIngestCertifyGood returns CertifyGoodSrcResponse.IngestCertifyGood, and is useful for accessing the field via an interface.
func (v *CertifyGoodSrcResponse) GetIngestCertifyGood() CertifyGoodSrcIngestCertifyGood {
	return v.IngestCertifyGood
}

// CertifyNoKnownVulnIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type CertifyNoKnownVulnIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns CertifyNoKnownVulnIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns CertifyNoKnownVulnIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns CertifyNoKnownVulnIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *CertifyNoKnownVulnIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyNoKnownVulnIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyNoKnownVulnIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyNoKnownVulnIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *CertifyNoKnownVulnIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyNoKnownVulnIngestPackage) __premarshalJSON() (*__premarshalCertifyNoKnownVulnIngestPackage, error) {
	var retval __premarshalCertifyNoKnownVulnIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// CertifyNoKnownVulnIngestVulnerabilityCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type CertifyNoKnownVulnIngestVulnerabilityCertifyVuln struct {
	AllCertifyVuln `json:"-"`
}

// GetId returns CertifyNoKnownVulnIngestVulnerabilityCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns CertifyNoKnownVulnIngestVulnerabilityCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns CertifyNoKnownVulnIngestVulnerabilityCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns CertifyNoKnownVulnIngestVulnerabilityCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyNoKnownVulnIngestVulnerabilityCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyNoKnownVulnIngestVulnerabilityCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyNoKnownVulnIngestVulnerabilityCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyNoKnownVulnIngestVulnerabilityCertifyVuln) __premarshalJSON() (*__premarshalCertifyNoKnownVulnIngestVulnerabilityCertifyVuln, error) {
	var retval __premarshalCertifyNoKnownVulnIngestVulnerabilityCertifyVuln

	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyNoKnownVulnIngestVulnerabilityCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// CertifyNoKnownVulnResponse is returned by CertifyNoKnownVuln on success.
type CertifyNoKnownVulnResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage CertifyNoKnownVulnIngestPackage `json:"ingestPackage"`
	// Adds a certification that a package has been scanned for vulnerabilities.
	IngestVulnerability CertifyNoKnownVulnIngestVulnerabilityCertifyVuln `json:"ingestVulnerability"`
}

// GetIngestPackage returns CertifyNoKnownVulnResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnResponse) GetIngestPackage() CertifyNoKnownVulnIngestPackage {
	return v.IngestPackage
}

// GetIngestVulnerability returns CertifyNoKnownVulnResponse.IngestVulnerability, and is useful for accessing the field via an interface.
func (v *CertifyNoKnownVulnResponse) GetIngestVulnerability() CertifyNoKnownVulnIngestVulnerabilityCertifyVuln {
	return v.IngestVulnerability
}

// CertifyOSVIngestOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type CertifyOSVIngestOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns CertifyOSVIngestOSV.Id, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns CertifyOSVIngestOSV.OsvId, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *CertifyOSVIngestOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyOSVIngestOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyOSVIngestOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyOSVIngestOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *CertifyOSVIngestOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyOSVIngestOSV) __premarshalJSON() (*__premarshalCertifyOSVIngestOSV, error) {
	var retval __premarshalCertifyOSVIngestOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// CertifyOSVIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type CertifyOSVIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns CertifyOSVIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns CertifyOSVIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns CertifyOSVIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *CertifyOSVIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyOSVIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyOSVIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyOSVIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *CertifyOSVIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyOSVIngestPackage) __premarshalJSON() (*__premarshalCertifyOSVIngestPackage, error) {
	var retval __premarshalCertifyOSVIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// CertifyOSVIngestVulnerabilityCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type CertifyOSVIngestVulnerabilityCertifyVuln struct {
	AllCertifyVuln `json:"-"`
}

// GetId returns CertifyOSVIngestVulnerabilityCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestVulnerabilityCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns CertifyOSVIngestVulnerabilityCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestVulnerabilityCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns CertifyOSVIngestVulnerabilityCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestVulnerabilityCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns CertifyOSVIngestVulnerabilityCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *CertifyOSVIngestVulnerabilityCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *CertifyOSVIngestVulnerabilityCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CertifyOSVIngestVulnerabilityCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.CertifyOSVIngestVulnerabilityCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCertifyOSVIngestVulnerabilityCertifyVuln struct {
	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *CertifyOSVIngestVulnerabilityCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CertifyOSVIngestVulnerabilityCertifyVuln) __premarshalJSON() (*__premarshalCertifyOSVIngestVulnerabilityCertifyVuln, error) {
	var retval __premarshalCertifyOSVIngestVulnerabilityCertifyVuln

	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CertifyOSVIngestVulnerabilityCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// CertifyOSVResponse is returned by CertifyOSV on success.
type CertifyOSVResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage CertifyOSVIngestPackage `json:"ingestPackage"`
	// Ingests a new OSV vulnerability and returns it.
	IngestOSV CertifyOSVIngestOSV `json:"ingestOSV"`
	// Adds a certification that a package has been scanned for vulnerabilities.
	IngestVulnerability CertifyOSVIngestVulnerabilityCertifyVuln `json:"ingestVulnerability"`
}

// GetIngestPackage returns CertifyOSVResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *CertifyOSVResponse) GetIngestPackage() CertifyOSVIngestPackage { return v.IngestPackage }

// GetIngestOSV returns CertifyOSVResponse.IngestOSV, and is useful for accessing the field via an interface.
func (v *CertifyOSVResponse) GetIngestOSV() CertifyOSVIngestOSV { return v.IngestOSV }

// GetIngestVulnerability returns CertifyOSVResponse.IngestVulnerability, and is useful for accessing the field via an interface.
func (v *CertifyOSVResponse) GetIngestVulnerability() CertifyOSVIngestVulnerabilityCertifyVuln {
	return v.IngestVulnerability
}

// DependencyType determines the type of the dependency.
type DependencyType string

const (
	// direct dependency
	DependencyTypeDirect DependencyType = "DIRECT"
	// indirect dependency
	DependencyTypeIndirect DependencyType = "INDIRECT"
	// type not known/not specified
	DependencyTypeUnknown DependencyType = "UNKNOWN"
)

// Edge allows filtering path/neighbors output to only contain a subset of all
// possible GUAC links.
//
// Each member of the enum is formed by merging two Node names with _. Each name
// is converted from CamelCase to CAPITALS_WITH_UNDERSCORES. Only valid edges
// (pairs from Node to Node) are included.
//
// The only exception to the above rule is for links out of HasSLSA. The names are
// HAS_SLSA_SUBJECT, HAS_SLSA_BUILT_BY, and HAS_SLSA_MATERIALS. This is because
// ARTIFACT_HAS_SLSA is only from subject Artifact to HasSLSA.
type Edge string

const (
	EdgeArtifactCertifyBad          Edge = "ARTIFACT_CERTIFY_BAD"
	EdgeArtifactCertifyGood         Edge = "ARTIFACT_CERTIFY_GOOD"
	EdgeArtifactCertifyVexStatement Edge = "ARTIFACT_CERTIFY_VEX_STATEMENT"
	EdgeArtifactHashEqual           Edge = "ARTIFACT_HASH_EQUAL"
	EdgeArtifactHasSbom             Edge = "ARTIFACT_HAS_SBOM"
	EdgeArtifactHasSlsa             Edge = "ARTIFACT_HAS_SLSA"
	EdgeArtifactIsOccurrence        Edge = "ARTIFACT_IS_OCCURRENCE"
	EdgeBuilderHasSlsa              Edge = "BUILDER_HAS_SLSA"
	EdgeCveCertifyVexStatement      Edge = "CVE_CERTIFY_VEX_STATEMENT"
	EdgeCveCertifyVuln              Edge = "CVE_CERTIFY_VULN"
	EdgeCveIsVulnerability          Edge = "CVE_IS_VULNERABILITY"
	EdgeGhsaCertifyVexStatement     Edge = "GHSA_CERTIFY_VEX_STATEMENT"
	EdgeGhsaCertifyVuln             Edge = "GHSA_CERTIFY_VULN"
	EdgeGhsaIsVulnerability         Edge = "GHSA_IS_VULNERABILITY"
	EdgeNoVulnCertifyVuln           Edge = "NO_VULN_CERTIFY_VULN"
	EdgeOsvCertifyVexStatement      Edge = "OSV_CERTIFY_VEX_STATEMENT"
	EdgeOsvCertifyVuln              Edge = "OSV_CERTIFY_VULN"
	EdgeOsvIsVulnerability          Edge = "OSV_IS_VULNERABILITY"
	EdgePackageCertifyBad           Edge = "PACKAGE_CERTIFY_BAD"
	EdgePackageCertifyGood          Edge = "PACKAGE_CERTIFY_GOOD"
	EdgePackageCertifyVexStatement  Edge = "PACKAGE_CERTIFY_VEX_STATEMENT"
	EdgePackageCertifyVuln          Edge = "PACKAGE_CERTIFY_VULN"
	EdgePackageHasSbom              Edge = "PACKAGE_HAS_SBOM"
	EdgePackageHasSourceAt          Edge = "PACKAGE_HAS_SOURCE_AT"
	EdgePackageIsDependency         Edge = "PACKAGE_IS_DEPENDENCY"
	EdgePackageIsOccurrence         Edge = "PACKAGE_IS_OCCURRENCE"
	EdgePackagePkgEqual             Edge = "PACKAGE_PKG_EQUAL"
	EdgeSourceCertifyBad            Edge = "SOURCE_CERTIFY_BAD"
	EdgeSourceCertifyGood           Edge = "SOURCE_CERTIFY_GOOD"
	EdgeSourceCertifyScorecard      Edge = "SOURCE_CERTIFY_SCORECARD"
	EdgeSourceHasSourceAt           Edge = "SOURCE_HAS_SOURCE_AT"
	EdgeSourceIsOccurrence          Edge = "SOURCE_IS_OCCURRENCE"
	EdgeCertifyBadArtifact          Edge = "CERTIFY_BAD_ARTIFACT"
	EdgeCertifyBadPackage           Edge = "CERTIFY_BAD_PACKAGE"
	EdgeCertifyBadSource            Edge = "CERTIFY_BAD_SOURCE"
	EdgeCertifyGoodArtifact         Edge = "CERTIFY_GOOD_ARTIFACT"
	EdgeCertifyGoodPackage          Edge = "CERTIFY_GOOD_PACKAGE"
	EdgeCertifyGoodSource           Edge = "CERTIFY_GOOD_SOURCE"
	EdgeCertifyScorecardSource      Edge = "CERTIFY_SCORECARD_SOURCE"
	EdgeCertifyVexStatementArtifact Edge = "CERTIFY_VEX_STATEMENT_ARTIFACT"
	EdgeCertifyVexStatementCve      Edge = "CERTIFY_VEX_STATEMENT_CVE"
	EdgeCertifyVexStatementGhsa     Edge = "CERTIFY_VEX_STATEMENT_GHSA"
	EdgeCertifyVexStatementOsv      Edge = "CERTIFY_VEX_STATEMENT_OSV"
	EdgeCertifyVexStatementPackage  Edge = "CERTIFY_VEX_STATEMENT_PACKAGE"
	EdgeCertifyVulnCve              Edge = "CERTIFY_VULN_CVE"
	EdgeCertifyVulnGhsa             Edge = "CERTIFY_VULN_GHSA"
	EdgeCertifyVulnNoVuln           Edge = "CERTIFY_VULN_NO_VULN"
	EdgeCertifyVulnOsv              Edge = "CERTIFY_VULN_OSV"
	EdgeCertifyVulnPackage          Edge = "CERTIFY_VULN_PACKAGE"
	EdgeHashEqualArtifact           Edge = "HASH_EQUAL_ARTIFACT"
	EdgeHasSbomArtifact             Edge = "HAS_SBOM_ARTIFACT"
	EdgeHasSbomPackage              Edge = "HAS_SBOM_PACKAGE"
	EdgeHasSlsaBuiltBy              Edge = "HAS_SLSA_BUILT_BY"
	EdgeHasSlsaMaterials            Edge = "HAS_SLSA_MATERIALS"
	EdgeHasSlsaSubject              Edge = "HAS_SLSA_SUBJECT"
	EdgeHasSourceAtPackage          Edge = "HAS_SOURCE_AT_PACKAGE"
	EdgeHasSourceAtSource           Edge = "HAS_SOURCE_AT_SOURCE"
	EdgeIsDependencyPackage         Edge = "IS_DEPENDENCY_PACKAGE"
	EdgeIsOccurrenceArtifact        Edge = "IS_OCCURRENCE_ARTIFACT"
	EdgeIsOccurrencePackage         Edge = "IS_OCCURRENCE_PACKAGE"
	EdgeIsOccurrenceSource          Edge = "IS_OCCURRENCE_SOURCE"
	EdgeIsVulnerabilityCve          Edge = "IS_VULNERABILITY_CVE"
	EdgeIsVulnerabilityGhsa         Edge = "IS_VULNERABILITY_GHSA"
	EdgeIsVulnerabilityOsv          Edge = "IS_VULNERABILITY_OSV"
	EdgePkgEqualPackage             Edge = "PKG_EQUAL_PACKAGE"
)

// GHSAInputSpec specifies a GitHub Security Advisory for mutations.
type GHSAInputSpec struct {
	GhsaId string `json:"ghsaId"`
}

// GetGhsaId returns GHSAInputSpec.GhsaId, and is useful for accessing the field via an interface.
func (v *GHSAInputSpec) GetGhsaId() string { return v.GhsaId }

// GHSASpec allows filtering the list of advisories to return in a query.
type GHSASpec struct {
	Id     *string `json:"id"`
	GhsaId *string `json:"ghsaId"`
}

// GetId returns GHSASpec.Id, and is useful for accessing the field via an interface.
func (v *GHSASpec) GetId() *string { return v.Id }

// GetGhsaId returns GHSASpec.GhsaId, and is useful for accessing the field via an interface.
func (v *GHSASpec) GetGhsaId() *string { return v.GhsaId }

// GHSAsGhsaGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type GHSAsGhsaGHSA struct {
	AllGHSATree `json:"-"`
}

// GetId returns GHSAsGhsaGHSA.Id, and is useful for accessing the field via an interface.
func (v *GHSAsGhsaGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns GHSAsGhsaGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *GHSAsGhsaGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *GHSAsGhsaGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GHSAsGhsaGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.GHSAsGhsaGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGHSAsGhsaGHSA struct {
	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *GHSAsGhsaGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GHSAsGhsaGHSA) __premarshalJSON() (*__premarshalGHSAsGhsaGHSA, error) {
	var retval __premarshalGHSAsGhsaGHSA

	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// GHSAsResponse is returned by GHSAs on success.
type GHSAsResponse struct {
	// Returns all GitHub Security Advisories matching a filter.
	Ghsa []GHSAsGhsaGHSA `json:"ghsa"`
}

// GetGhsa returns GHSAsResponse.Ghsa, and is useful for accessing the field via an interface.
func (v *GHSAsResponse) GetGhsa() []GHSAsGhsaGHSA { return v.Ghsa }

// HasSBOMArtifactIngestArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type HasSBOMArtifactIngestArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns HasSBOMArtifactIngestArtifact.Id, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns HasSBOMArtifactIngestArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns HasSBOMArtifactIngestArtifact.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *HasSBOMArtifactIngestArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSBOMArtifactIngestArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSBOMArtifactIngestArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSBOMArtifactIngestArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *HasSBOMArtifactIngestArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSBOMArtifactIngestArtifact) __premarshalJSON() (*__premarshalHasSBOMArtifactIngestArtifact, error) {
	var retval __premarshalHasSBOMArtifactIngestArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// HasSBOMArtifactIngestHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type HasSBOMArtifactIngestHasSBOM struct {
	allHasSBOMTree `json:"-"`
}

// GetId returns HasSBOMArtifactIngestHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetId() string { return v.allHasSBOMTree.Id }

// GetSubject returns HasSBOMArtifactIngestHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetSubject() allHasSBOMTreeSubjectPackageOrArtifact {
	return v.allHasSBOMTree.Subject
}

// GetUri returns HasSBOMArtifactIngestHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetUri() string { return v.allHasSBOMTree.Uri }

// GetAlgorithm returns HasSBOMArtifactIngestHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetAlgorithm() string { return v.allHasSBOMTree.Algorithm }

// GetDigest returns HasSBOMArtifactIngestHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetDigest() string { return v.allHasSBOMTree.Digest }

// GetDownloadLocation returns HasSBOMArtifactIngestHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetDownloadLocation() string {
	return v.allHasSBOMTree.DownloadLocation
}

// GetAnnotations returns HasSBOMArtifactIngestHasSBOM.Annotations, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetAnnotations() []allHasSBOMTreeAnnotationsAnnotation {
	return v.allHasSBOMTree.Annotations
}

// GetOrigin returns HasSBOMArtifactIngestHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetOrigin() string { return v.allHasSBOMTree.Origin }

// GetCollector returns HasSBOMArtifactIngestHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactIngestHasSBOM) GetCollector() string { return v.allHasSBOMTree.Collector }

func (v *HasSBOMArtifactIngestHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSBOMArtifactIngestHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSBOMArtifactIngestHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSBOMArtifactIngestHasSBOM struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Annotations []allHasSBOMTreeAnnotationsAnnotation `json:"annotations"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasSBOMArtifactIngestHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSBOMArtifactIngestHasSBOM) __premarshalJSON() (*__premarshalHasSBOMArtifactIngestHasSBOM, error) {
	var retval __premarshalHasSBOMArtifactIngestHasSBOM

	retval.Id = v.allHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.allHasSBOMTree.Subject
		var err error
		*dst, err = __marshalallHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal HasSBOMArtifactIngestHasSBOM.allHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.allHasSBOMTree.Uri
	retval.Algorithm = v.allHasSBOMTree.Algorithm
	retval.Digest = v.allHasSBOMTree.Digest
	retval.DownloadLocation = v.allHasSBOMTree.DownloadLocation
	retval.Annotations = v.allHasSBOMTree.Annotations
	retval.Origin = v.allHasSBOMTree.Origin
	retval.Collector = v.allHasSBOMTree.Collector
	return &retval, nil
}

// HasSBOMArtifactResponse is returned by HasSBOMArtifact on success.
type HasSBOMArtifactResponse struct {
	// Ingests a new artifact and returns it.
	IngestArtifact HasSBOMArtifactIngestArtifact `json:"ingestArtifact"`
	// Certifies that a package or artifact has an SBOM.
	IngestHasSBOM HasSBOMArtifactIngestHasSBOM `json:"ingestHasSBOM"`
}

// GetIngestArtifact returns HasSBOMArtifactResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactResponse) GetIngestArtifact() HasSBOMArtifactIngestArtifact {
	return v.IngestArtifact
}

// GetIngestHasSBOM returns HasSBOMArtifactResponse.IngestHasSBOM, and is useful for accessing the field via an interface.
func (v *HasSBOMArtifactResponse) GetIngestHasSBOM() HasSBOMArtifactIngestHasSBOM {
	return v.IngestHasSBOM
}

// HasSBOMInputSpec is the same as HasSBOM but for mutation input.
type HasSBOMInputSpec struct {
	Uri              string                `json:"uri"`
	Algorithm        string                `json:"algorithm"`
	Digest           string                `json:"digest"`
	DownloadLocation string                `json:"downloadLocation"`
	Annotations      []AnnotationInputSpec `json:"annotations"`
	Origin           string                `json:"origin"`
	Collector        string                `json:"collector"`
}

// GetUri returns HasSBOMInputSpec.Uri, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetUri() string { return v.Uri }

// GetAlgorithm returns HasSBOMInputSpec.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns HasSBOMInputSpec.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetDigest() string { return v.Digest }

// GetDownloadLocation returns HasSBOMInputSpec.DownloadLocation, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetDownloadLocation() string { return v.DownloadLocation }

// GetAnnotations returns HasSBOMInputSpec.Annotations, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetAnnotations() []AnnotationInputSpec { return v.Annotations }

// GetOrigin returns HasSBOMInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HasSBOMInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasSBOMInputSpec) GetCollector() string { return v.Collector }

// HasSBOMPkgIngestHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type HasSBOMPkgIngestHasSBOM struct {
	allHasSBOMTree `json:"-"`
}

// GetId returns HasSBOMPkgIngestHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetId() string { return v.allHasSBOMTree.Id }

// GetSubject returns HasSBOMPkgIngestHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetSubject() allHasSBOMTreeSubjectPackageOrArtifact {
	return v.allHasSBOMTree.Subject
}

// GetUri returns HasSBOMPkgIngestHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetUri() string { return v.allHasSBOMTree.Uri }

// GetAlgorithm returns HasSBOMPkgIngestHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetAlgorithm() string { return v.allHasSBOMTree.Algorithm }

// GetDigest returns HasSBOMPkgIngestHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetDigest() string { return v.allHasSBOMTree.Digest }

// GetDownloadLocation returns HasSBOMPkgIngestHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetDownloadLocation() string {
	return v.allHasSBOMTree.DownloadLocation
}

// GetAnnotations returns HasSBOMPkgIngestHasSBOM.Annotations, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetAnnotations() []allHasSBOMTreeAnnotationsAnnotation {
	return v.allHasSBOMTree.Annotations
}

// GetOrigin returns HasSBOMPkgIngestHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetOrigin() string { return v.allHasSBOMTree.Origin }

// GetCollector returns HasSBOMPkgIngestHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestHasSBOM) GetCollector() string { return v.allHasSBOMTree.Collector }

func (v *HasSBOMPkgIngestHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSBOMPkgIngestHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSBOMPkgIngestHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSBOMPkgIngestHasSBOM struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Annotations []allHasSBOMTreeAnnotationsAnnotation `json:"annotations"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasSBOMPkgIngestHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSBOMPkgIngestHasSBOM) __premarshalJSON() (*__premarshalHasSBOMPkgIngestHasSBOM, error) {
	var retval __premarshalHasSBOMPkgIngestHasSBOM

	retval.Id = v.allHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.allHasSBOMTree.Subject
		var err error
		*dst, err = __marshalallHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal HasSBOMPkgIngestHasSBOM.allHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.allHasSBOMTree.Uri
	retval.Algorithm = v.allHasSBOMTree.Algorithm
	retval.Digest = v.allHasSBOMTree.Digest
	retval.DownloadLocation = v.allHasSBOMTree.DownloadLocation
	retval.Annotations = v.allHasSBOMTree.Annotations
	retval.Origin = v.allHasSBOMTree.Origin
	retval.Collector = v.allHasSBOMTree.Collector
	return &retval, nil
}

// HasSBOMPkgIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type HasSBOMPkgIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns HasSBOMPkgIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns HasSBOMPkgIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns HasSBOMPkgIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *HasSBOMPkgIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSBOMPkgIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSBOMPkgIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSBOMPkgIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *HasSBOMPkgIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSBOMPkgIngestPackage) __premarshalJSON() (*__premarshalHasSBOMPkgIngestPackage, error) {
	var retval __premarshalHasSBOMPkgIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// HasSBOMPkgResponse is returned by HasSBOMPkg on success.
type HasSBOMPkgResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage HasSBOMPkgIngestPackage `json:"ingestPackage"`
	// Certifies that a package or artifact has an SBOM.
	IngestHasSBOM HasSBOMPkgIngestHasSBOM `json:"ingestHasSBOM"`
}

// GetIngestPackage returns HasSBOMPkgResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgResponse) GetIngestPackage() HasSBOMPkgIngestPackage { return v.IngestPackage }

// GetIngestHasSBOM returns HasSBOMPkgResponse.IngestHasSBOM, and is useful for accessing the field via an interface.
func (v *HasSBOMPkgResponse) GetIngestHasSBOM() HasSBOMPkgIngestHasSBOM { return v.IngestHasSBOM }

// HasSourceAtIngestHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type HasSourceAtIngestHasSourceAt struct {
	allHasSourceAt `json:"-"`
}

// GetId returns HasSourceAtIngestHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetId() string { return v.allHasSourceAt.Id }

// GetJustification returns HasSourceAtIngestHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetJustification() string {
	return v.allHasSourceAt.Justification
}

// GetKnownSince returns HasSourceAtIngestHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetKnownSince() time.Time { return v.allHasSourceAt.KnownSince }

// GetPackage returns HasSourceAtIngestHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetPackage() allHasSourceAtPackage {
	return v.allHasSourceAt.Package
}

// GetSource returns HasSourceAtIngestHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetSource() allHasSourceAtSource {
	return v.allHasSourceAt.Source
}

// GetOrigin returns HasSourceAtIngestHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetOrigin() string { return v.allHasSourceAt.Origin }

// GetCollector returns HasSourceAtIngestHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestHasSourceAt) GetCollector() string { return v.allHasSourceAt.Collector }

func (v *HasSourceAtIngestHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSourceAtIngestHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSourceAtIngestHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSourceAtIngestHasSourceAt struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package allHasSourceAtPackage `json:"package"`

	Source allHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HasSourceAtIngestHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSourceAtIngestHasSourceAt) __premarshalJSON() (*__premarshalHasSourceAtIngestHasSourceAt, error) {
	var retval __premarshalHasSourceAtIngestHasSourceAt

	retval.Id = v.allHasSourceAt.Id
	retval.Justification = v.allHasSourceAt.Justification
	retval.KnownSince = v.allHasSourceAt.KnownSince
	retval.Package = v.allHasSourceAt.Package
	retval.Source = v.allHasSourceAt.Source
	retval.Origin = v.allHasSourceAt.Origin
	retval.Collector = v.allHasSourceAt.Collector
	return &retval, nil
}

// HasSourceAtIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type HasSourceAtIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns HasSourceAtIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns HasSourceAtIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns HasSourceAtIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *HasSourceAtIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSourceAtIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSourceAtIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSourceAtIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *HasSourceAtIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSourceAtIngestPackage) __premarshalJSON() (*__premarshalHasSourceAtIngestPackage, error) {
	var retval __premarshalHasSourceAtIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// HasSourceAtIngestSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type HasSourceAtIngestSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns HasSourceAtIngestSource.Id, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns HasSourceAtIngestSource.Type, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns HasSourceAtIngestSource.Namespaces, and is useful for accessing the field via an interface.
func (v *HasSourceAtIngestSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *HasSourceAtIngestSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HasSourceAtIngestSource
		graphql.NoUnmarshalJSON
	}
	firstPass.HasSourceAtIngestSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHasSourceAtIngestSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *HasSourceAtIngestSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HasSourceAtIngestSource) __premarshalJSON() (*__premarshalHasSourceAtIngestSource, error) {
	var retval __premarshalHasSourceAtIngestSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// HasSourceAtInputSpec is the same as HasSourceAt but for mutation input.
type HasSourceAtInputSpec struct {
	KnownSince    time.Time `json:"knownSince"`
	Justification string    `json:"justification"`
	Origin        string    `json:"origin"`
	Collector     string    `json:"collector"`
}

// GetKnownSince returns HasSourceAtInputSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetKnownSince() time.Time { return v.KnownSince }

// GetJustification returns HasSourceAtInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns HasSourceAtInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HasSourceAtInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HasSourceAtInputSpec) GetCollector() string { return v.Collector }

// HasSourceAtResponse is returned by HasSourceAt on success.
type HasSourceAtResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage HasSourceAtIngestPackage `json:"ingestPackage"`
	// Ingests a new source and returns the corresponding source trie path.
	IngestSource HasSourceAtIngestSource `json:"ingestSource"`
	// Adds a certification that a package (PackageName or PackageVersion) is built from the source.
	IngestHasSourceAt HasSourceAtIngestHasSourceAt `json:"ingestHasSourceAt"`
}

// GetIngestPackage returns HasSourceAtResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *HasSourceAtResponse) GetIngestPackage() HasSourceAtIngestPackage { return v.IngestPackage }

// GetIngestSource returns HasSourceAtResponse.IngestSource, and is useful for accessing the field via an interface.
func (v *HasSourceAtResponse) GetIngestSource() HasSourceAtIngestSource { return v.IngestSource }

// GetIngestHasSourceAt returns HasSourceAtResponse.IngestHasSourceAt, and is useful for accessing the field via an interface.
func (v *HasSourceAtResponse) GetIngestHasSourceAt() HasSourceAtIngestHasSourceAt {
	return v.IngestHasSourceAt
}

// HashEqualArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type HashEqualArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns HashEqualArtifact.Id, and is useful for accessing the field via an interface.
func (v *HashEqualArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns HashEqualArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *HashEqualArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns HashEqualArtifact.Digest, and is useful for accessing the field via an interface.
func (v *HashEqualArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *HashEqualArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HashEqualArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.HashEqualArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHashEqualArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *HashEqualArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HashEqualArtifact) __premarshalJSON() (*__premarshalHashEqualArtifact, error) {
	var retval __premarshalHashEqualArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// HashEqualIngestHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type HashEqualIngestHashEqual struct {
	allHashEqualTree `json:"-"`
}

// GetId returns HashEqualIngestHashEqual.Id, and is useful for accessing the field via an interface.
func (v *HashEqualIngestHashEqual) GetId() string { return v.allHashEqualTree.Id }

// GetJustification returns HashEqualIngestHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *HashEqualIngestHashEqual) GetJustification() string { return v.allHashEqualTree.Justification }

// GetArtifacts returns HashEqualIngestHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *HashEqualIngestHashEqual) GetArtifacts() []allHashEqualTreeArtifactsArtifact {
	return v.allHashEqualTree.Artifacts
}

// GetOrigin returns HashEqualIngestHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *HashEqualIngestHashEqual) GetOrigin() string { return v.allHashEqualTree.Origin }

// GetCollector returns HashEqualIngestHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *HashEqualIngestHashEqual) GetCollector() string { return v.allHashEqualTree.Collector }

func (v *HashEqualIngestHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HashEqualIngestHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.HashEqualIngestHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHashEqualIngestHashEqual struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []allHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *HashEqualIngestHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HashEqualIngestHashEqual) __premarshalJSON() (*__premarshalHashEqualIngestHashEqual, error) {
	var retval __premarshalHashEqualIngestHashEqual

	retval.Id = v.allHashEqualTree.Id
	retval.Justification = v.allHashEqualTree.Justification
	retval.Artifacts = v.allHashEqualTree.Artifacts
	retval.Origin = v.allHashEqualTree.Origin
	retval.Collector = v.allHashEqualTree.Collector
	return &retval, nil
}

// HashEqualInputSpec represents the input to certify that packages are similar.
type HashEqualInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns HashEqualInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *HashEqualInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns HashEqualInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *HashEqualInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns HashEqualInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *HashEqualInputSpec) GetCollector() string { return v.Collector }

// HashEqualOtherArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type HashEqualOtherArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns HashEqualOtherArtifact.Id, and is useful for accessing the field via an interface.
func (v *HashEqualOtherArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns HashEqualOtherArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *HashEqualOtherArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns HashEqualOtherArtifact.Digest, and is useful for accessing the field via an interface.
func (v *HashEqualOtherArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *HashEqualOtherArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HashEqualOtherArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.HashEqualOtherArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHashEqualOtherArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *HashEqualOtherArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HashEqualOtherArtifact) __premarshalJSON() (*__premarshalHashEqualOtherArtifact, error) {
	var retval __premarshalHashEqualOtherArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// HashEqualResponse is returned by HashEqual on success.
type HashEqualResponse struct {
	// Ingests a new artifact and returns it.
	Artifact HashEqualArtifact `json:"artifact"`
	// Ingests a new artifact and returns it.
	OtherArtifact HashEqualOtherArtifact `json:"otherArtifact"`
	// Adds a certification that two artifacts are similar.
	IngestHashEqual HashEqualIngestHashEqual `json:"ingestHashEqual"`
}

// GetArtifact returns HashEqualResponse.Artifact, and is useful for accessing the field via an interface.
func (v *HashEqualResponse) GetArtifact() HashEqualArtifact { return v.Artifact }

// GetOtherArtifact returns HashEqualResponse.OtherArtifact, and is useful for accessing the field via an interface.
func (v *HashEqualResponse) GetOtherArtifact() HashEqualOtherArtifact { return v.OtherArtifact }

// GetIngestHashEqual returns HashEqualResponse.IngestHashEqual, and is useful for accessing the field via an interface.
func (v *HashEqualResponse) GetIngestHashEqual() HashEqualIngestHashEqual { return v.IngestHashEqual }

// IsDependencyDependentPkgPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type IsDependencyDependentPkgPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns IsDependencyDependentPkgPackage.Id, and is useful for accessing the field via an interface.
func (v *IsDependencyDependentPkgPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns IsDependencyDependentPkgPackage.Type, and is useful for accessing the field via an interface.
func (v *IsDependencyDependentPkgPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns IsDependencyDependentPkgPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *IsDependencyDependentPkgPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *IsDependencyDependentPkgPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsDependencyDependentPkgPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.IsDependencyDependentPkgPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsDependencyDependentPkgPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *IsDependencyDependentPkgPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsDependencyDependentPkgPackage) __premarshalJSON() (*__premarshalIsDependencyDependentPkgPackage, error) {
	var retval __premarshalIsDependencyDependentPkgPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// IsDependencyIngestDependencyIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type IsDependencyIngestDependencyIsDependency struct {
	allIsDependencyTree `json:"-"`
}

// GetId returns IsDependencyIngestDependencyIsDependency.Id, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetId() string { return v.allIsDependencyTree.Id }

// GetJustification returns IsDependencyIngestDependencyIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetJustification() string {
	return v.allIsDependencyTree.Justification
}

// GetPackage returns IsDependencyIngestDependencyIsDependency.Package, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetPackage() allIsDependencyTreePackage {
	return v.allIsDependencyTree.Package
}

// GetDependentPackage returns IsDependencyIngestDependencyIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetDependentPackage() allIsDependencyTreeDependentPackage {
	return v.allIsDependencyTree.DependentPackage
}

// GetDependencyType returns IsDependencyIngestDependencyIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetDependencyType() DependencyType {
	return v.allIsDependencyTree.DependencyType
}

// GetVersionRange returns IsDependencyIngestDependencyIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetVersionRange() string {
	return v.allIsDependencyTree.VersionRange
}

// GetOrigin returns IsDependencyIngestDependencyIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetOrigin() string {
	return v.allIsDependencyTree.Origin
}

// GetCollector returns IsDependencyIngestDependencyIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *IsDependencyIngestDependencyIsDependency) GetCollector() string {
	return v.allIsDependencyTree.Collector
}

func (v *IsDependencyIngestDependencyIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsDependencyIngestDependencyIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.IsDependencyIngestDependencyIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsDependencyIngestDependencyIsDependency struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Package allIsDependencyTreePackage `json:"package"`

	DependentPackage allIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsDependencyIngestDependencyIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsDependencyIngestDependencyIsDependency) __premarshalJSON() (*__premarshalIsDependencyIngestDependencyIsDependency, error) {
	var retval __premarshalIsDependencyIngestDependencyIsDependency

	retval.Id = v.allIsDependencyTree.Id
	retval.Justification = v.allIsDependencyTree.Justification
	retval.Package = v.allIsDependencyTree.Package
	retval.DependentPackage = v.allIsDependencyTree.DependentPackage
	retval.DependencyType = v.allIsDependencyTree.DependencyType
	retval.VersionRange = v.allIsDependencyTree.VersionRange
	retval.Origin = v.allIsDependencyTree.Origin
	retval.Collector = v.allIsDependencyTree.Collector
	return &retval, nil
}

// IsDependencyInputSpec is the input to record a new dependency.
type IsDependencyInputSpec struct {
	VersionRange   string         `json:"versionRange"`
	DependencyType DependencyType `json:"dependencyType"`
	Justification  string         `json:"justification"`
	Origin         string         `json:"origin"`
	Collector      string         `json:"collector"`
}

// GetVersionRange returns IsDependencyInputSpec.VersionRange, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetVersionRange() string { return v.VersionRange }

// GetDependencyType returns IsDependencyInputSpec.DependencyType, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetDependencyType() DependencyType { return v.DependencyType }

// GetJustification returns IsDependencyInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns IsDependencyInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns IsDependencyInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *IsDependencyInputSpec) GetCollector() string { return v.Collector }

// IsDependencyPkgPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type IsDependencyPkgPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns IsDependencyPkgPackage.Id, and is useful for accessing the field via an interface.
func (v *IsDependencyPkgPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns IsDependencyPkgPackage.Type, and is useful for accessing the field via an interface.
func (v *IsDependencyPkgPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns IsDependencyPkgPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *IsDependencyPkgPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *IsDependencyPkgPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsDependencyPkgPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.IsDependencyPkgPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsDependencyPkgPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *IsDependencyPkgPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsDependencyPkgPackage) __premarshalJSON() (*__premarshalIsDependencyPkgPackage, error) {
	var retval __premarshalIsDependencyPkgPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// IsDependencyResponse is returned by IsDependency on success.
type IsDependencyResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	Pkg IsDependencyPkgPackage `json:"pkg"`
	// Ingests a new package and returns the corresponding package trie path.
	DependentPkg IsDependencyDependentPkgPackage `json:"dependentPkg"`
	// Adds a dependency between two packages
	IngestDependency IsDependencyIngestDependencyIsDependency `json:"ingestDependency"`
}

// GetPkg returns IsDependencyResponse.Pkg, and is useful for accessing the field via an interface.
func (v *IsDependencyResponse) GetPkg() IsDependencyPkgPackage { return v.Pkg }

// GetDependentPkg returns IsDependencyResponse.DependentPkg, and is useful for accessing the field via an interface.
func (v *IsDependencyResponse) GetDependentPkg() IsDependencyDependentPkgPackage {
	return v.DependentPkg
}

// GetIngestDependency returns IsDependencyResponse.IngestDependency, and is useful for accessing the field via an interface.
func (v *IsDependencyResponse) GetIngestDependency() IsDependencyIngestDependencyIsDependency {
	return v.IngestDependency
}

// IsOccurrenceInputSpec represents the input to record an artifact's origin.
type IsOccurrenceInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns IsOccurrenceInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *IsOccurrenceInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns IsOccurrenceInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *IsOccurrenceInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns IsOccurrenceInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *IsOccurrenceInputSpec) GetCollector() string { return v.Collector }

// IsOccurrencePkgIngestArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type IsOccurrencePkgIngestArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns IsOccurrencePkgIngestArtifact.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns IsOccurrencePkgIngestArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns IsOccurrencePkgIngestArtifact.Digest, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *IsOccurrencePkgIngestArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsOccurrencePkgIngestArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.IsOccurrencePkgIngestArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsOccurrencePkgIngestArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *IsOccurrencePkgIngestArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsOccurrencePkgIngestArtifact) __premarshalJSON() (*__premarshalIsOccurrencePkgIngestArtifact, error) {
	var retval __premarshalIsOccurrencePkgIngestArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// IsOccurrencePkgIngestOccurrenceIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type IsOccurrencePkgIngestOccurrenceIsOccurrence struct {
	AllIsOccurrencesTree `json:"-"`
}

// GetId returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetId() string {
	return v.AllIsOccurrencesTree.Id
}

// GetSubject returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetOrigin() string {
	return v.AllIsOccurrencesTree.Origin
}

// GetCollector returns IsOccurrencePkgIngestOccurrenceIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsOccurrencePkgIngestOccurrenceIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.IsOccurrencePkgIngestOccurrenceIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsOccurrencePkgIngestOccurrenceIsOccurrence struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsOccurrencePkgIngestOccurrenceIsOccurrence) __premarshalJSON() (*__premarshalIsOccurrencePkgIngestOccurrenceIsOccurrence, error) {
	var retval __premarshalIsOccurrencePkgIngestOccurrenceIsOccurrence

	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal IsOccurrencePkgIngestOccurrenceIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// IsOccurrencePkgIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type IsOccurrencePkgIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns IsOccurrencePkgIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns IsOccurrencePkgIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns IsOccurrencePkgIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *IsOccurrencePkgIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsOccurrencePkgIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.IsOccurrencePkgIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsOccurrencePkgIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *IsOccurrencePkgIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsOccurrencePkgIngestPackage) __premarshalJSON() (*__premarshalIsOccurrencePkgIngestPackage, error) {
	var retval __premarshalIsOccurrencePkgIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// IsOccurrencePkgResponse is returned by IsOccurrencePkg on success.
type IsOccurrencePkgResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage IsOccurrencePkgIngestPackage `json:"ingestPackage"`
	// Ingests a new artifact and returns it.
	IngestArtifact IsOccurrencePkgIngestArtifact `json:"ingestArtifact"`
	// Ingest that an artifact is produced from a package or source.
	IngestOccurrence IsOccurrencePkgIngestOccurrenceIsOccurrence `json:"ingestOccurrence"`
}

// GetIngestPackage returns IsOccurrencePkgResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgResponse) GetIngestPackage() IsOccurrencePkgIngestPackage {
	return v.IngestPackage
}

// GetIngestArtifact returns IsOccurrencePkgResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgResponse) GetIngestArtifact() IsOccurrencePkgIngestArtifact {
	return v.IngestArtifact
}

// GetIngestOccurrence returns IsOccurrencePkgResponse.IngestOccurrence, and is useful for accessing the field via an interface.
func (v *IsOccurrencePkgResponse) GetIngestOccurrence() IsOccurrencePkgIngestOccurrenceIsOccurrence {
	return v.IngestOccurrence
}

// IsOccurrenceSrcIngestArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type IsOccurrenceSrcIngestArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns IsOccurrenceSrcIngestArtifact.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns IsOccurrenceSrcIngestArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns IsOccurrenceSrcIngestArtifact.Digest, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *IsOccurrenceSrcIngestArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsOccurrenceSrcIngestArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.IsOccurrenceSrcIngestArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsOccurrenceSrcIngestArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *IsOccurrenceSrcIngestArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsOccurrenceSrcIngestArtifact) __premarshalJSON() (*__premarshalIsOccurrenceSrcIngestArtifact, error) {
	var retval __premarshalIsOccurrenceSrcIngestArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// IsOccurrenceSrcIngestOccurrenceIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type IsOccurrenceSrcIngestOccurrenceIsOccurrence struct {
	AllIsOccurrencesTree `json:"-"`
}

// GetId returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetId() string {
	return v.AllIsOccurrencesTree.Id
}

// GetSubject returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetOrigin() string {
	return v.AllIsOccurrencesTree.Origin
}

// GetCollector returns IsOccurrenceSrcIngestOccurrenceIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsOccurrenceSrcIngestOccurrenceIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.IsOccurrenceSrcIngestOccurrenceIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsOccurrenceSrcIngestOccurrenceIsOccurrence struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsOccurrenceSrcIngestOccurrenceIsOccurrence) __premarshalJSON() (*__premarshalIsOccurrenceSrcIngestOccurrenceIsOccurrence, error) {
	var retval __premarshalIsOccurrenceSrcIngestOccurrenceIsOccurrence

	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal IsOccurrenceSrcIngestOccurrenceIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// IsOccurrenceSrcIngestSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type IsOccurrenceSrcIngestSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns IsOccurrenceSrcIngestSource.Id, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns IsOccurrenceSrcIngestSource.Type, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns IsOccurrenceSrcIngestSource.Namespaces, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcIngestSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *IsOccurrenceSrcIngestSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsOccurrenceSrcIngestSource
		graphql.NoUnmarshalJSON
	}
	firstPass.IsOccurrenceSrcIngestSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsOccurrenceSrcIngestSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *IsOccurrenceSrcIngestSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsOccurrenceSrcIngestSource) __premarshalJSON() (*__premarshalIsOccurrenceSrcIngestSource, error) {
	var retval __premarshalIsOccurrenceSrcIngestSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// IsOccurrenceSrcResponse is returned by IsOccurrenceSrc on success.
type IsOccurrenceSrcResponse struct {
	// Ingests a new source and returns the corresponding source trie path.
	IngestSource IsOccurrenceSrcIngestSource `json:"ingestSource"`
	// Ingests a new artifact and returns it.
	IngestArtifact IsOccurrenceSrcIngestArtifact `json:"ingestArtifact"`
	// Ingest that an artifact is produced from a package or source.
	IngestOccurrence IsOccurrenceSrcIngestOccurrenceIsOccurrence `json:"ingestOccurrence"`
}

// GetIngestSource returns IsOccurrenceSrcResponse.IngestSource, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcResponse) GetIngestSource() IsOccurrenceSrcIngestSource {
	return v.IngestSource
}

// GetIngestArtifact returns IsOccurrenceSrcResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcResponse) GetIngestArtifact() IsOccurrenceSrcIngestArtifact {
	return v.IngestArtifact
}

// GetIngestOccurrence returns IsOccurrenceSrcResponse.IngestOccurrence, and is useful for accessing the field via an interface.
func (v *IsOccurrenceSrcResponse) GetIngestOccurrence() IsOccurrenceSrcIngestOccurrenceIsOccurrence {
	return v.IngestOccurrence
}

// IsVulnerabilityCVEIngestCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type IsVulnerabilityCVEIngestCVE struct {
	AllCveTree `json:"-"`
}

// GetId returns IsVulnerabilityCVEIngestCVE.Id, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns IsVulnerabilityCVEIngestCVE.Year, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns IsVulnerabilityCVEIngestCVE.CveId, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *IsVulnerabilityCVEIngestCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsVulnerabilityCVEIngestCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.IsVulnerabilityCVEIngestCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsVulnerabilityCVEIngestCVE struct {
	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *IsVulnerabilityCVEIngestCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsVulnerabilityCVEIngestCVE) __premarshalJSON() (*__premarshalIsVulnerabilityCVEIngestCVE, error) {
	var retval __premarshalIsVulnerabilityCVEIngestCVE

	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// IsVulnerabilityCVEIngestIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type IsVulnerabilityCVEIngestIsVulnerability struct {
	allIsVulnerability `json:"-"`
}

// GetId returns IsVulnerabilityCVEIngestIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetId() string { return v.allIsVulnerability.Id }

// GetOsv returns IsVulnerabilityCVEIngestIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetOsv() allIsVulnerabilityOsvOSV {
	return v.allIsVulnerability.Osv
}

// GetVulnerability returns IsVulnerabilityCVEIngestIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetVulnerability() allIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.allIsVulnerability.Vulnerability
}

// GetJustification returns IsVulnerabilityCVEIngestIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetJustification() string {
	return v.allIsVulnerability.Justification
}

// GetOrigin returns IsVulnerabilityCVEIngestIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetOrigin() string {
	return v.allIsVulnerability.Origin
}

// GetCollector returns IsVulnerabilityCVEIngestIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestIsVulnerability) GetCollector() string {
	return v.allIsVulnerability.Collector
}

func (v *IsVulnerabilityCVEIngestIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsVulnerabilityCVEIngestIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.IsVulnerabilityCVEIngestIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsVulnerabilityCVEIngestIsVulnerability struct {
	Id string `json:"id"`

	Osv allIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsVulnerabilityCVEIngestIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsVulnerabilityCVEIngestIsVulnerability) __premarshalJSON() (*__premarshalIsVulnerabilityCVEIngestIsVulnerability, error) {
	var retval __premarshalIsVulnerabilityCVEIngestIsVulnerability

	retval.Id = v.allIsVulnerability.Id
	retval.Osv = v.allIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.allIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalallIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal IsVulnerabilityCVEIngestIsVulnerability.allIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.allIsVulnerability.Justification
	retval.Origin = v.allIsVulnerability.Origin
	retval.Collector = v.allIsVulnerability.Collector
	return &retval, nil
}

// IsVulnerabilityCVEIngestOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type IsVulnerabilityCVEIngestOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns IsVulnerabilityCVEIngestOSV.Id, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns IsVulnerabilityCVEIngestOSV.OsvId, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEIngestOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *IsVulnerabilityCVEIngestOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsVulnerabilityCVEIngestOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.IsVulnerabilityCVEIngestOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsVulnerabilityCVEIngestOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *IsVulnerabilityCVEIngestOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsVulnerabilityCVEIngestOSV) __premarshalJSON() (*__premarshalIsVulnerabilityCVEIngestOSV, error) {
	var retval __premarshalIsVulnerabilityCVEIngestOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// IsVulnerabilityCVEResponse is returned by IsVulnerabilityCVE on success.
type IsVulnerabilityCVEResponse struct {
	// Ingests a new OSV vulnerability and returns it.
	IngestOSV IsVulnerabilityCVEIngestOSV `json:"ingestOSV"`
	// Ingests new CVE and returns it.
	IngestCVE IsVulnerabilityCVEIngestCVE `json:"ingestCVE"`
	// Ingest a mapping between an OSV entry and a CVE/GHSA vulnerability.
	IngestIsVulnerability IsVulnerabilityCVEIngestIsVulnerability `json:"ingestIsVulnerability"`
}

// GetIngestOSV returns IsVulnerabilityCVEResponse.IngestOSV, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEResponse) GetIngestOSV() IsVulnerabilityCVEIngestOSV { return v.IngestOSV }

// GetIngestCVE returns IsVulnerabilityCVEResponse.IngestCVE, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEResponse) GetIngestCVE() IsVulnerabilityCVEIngestCVE { return v.IngestCVE }

// GetIngestIsVulnerability returns IsVulnerabilityCVEResponse.IngestIsVulnerability, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityCVEResponse) GetIngestIsVulnerability() IsVulnerabilityCVEIngestIsVulnerability {
	return v.IngestIsVulnerability
}

// IsVulnerabilityGHSAIngestGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type IsVulnerabilityGHSAIngestGHSA struct {
	AllGHSATree `json:"-"`
}

// GetId returns IsVulnerabilityGHSAIngestGHSA.Id, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns IsVulnerabilityGHSAIngestGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *IsVulnerabilityGHSAIngestGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsVulnerabilityGHSAIngestGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.IsVulnerabilityGHSAIngestGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsVulnerabilityGHSAIngestGHSA struct {
	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *IsVulnerabilityGHSAIngestGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsVulnerabilityGHSAIngestGHSA) __premarshalJSON() (*__premarshalIsVulnerabilityGHSAIngestGHSA, error) {
	var retval __premarshalIsVulnerabilityGHSAIngestGHSA

	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// IsVulnerabilityGHSAIngestIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type IsVulnerabilityGHSAIngestIsVulnerability struct {
	allIsVulnerability `json:"-"`
}

// GetId returns IsVulnerabilityGHSAIngestIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetId() string { return v.allIsVulnerability.Id }

// GetOsv returns IsVulnerabilityGHSAIngestIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetOsv() allIsVulnerabilityOsvOSV {
	return v.allIsVulnerability.Osv
}

// GetVulnerability returns IsVulnerabilityGHSAIngestIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetVulnerability() allIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.allIsVulnerability.Vulnerability
}

// GetJustification returns IsVulnerabilityGHSAIngestIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetJustification() string {
	return v.allIsVulnerability.Justification
}

// GetOrigin returns IsVulnerabilityGHSAIngestIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetOrigin() string {
	return v.allIsVulnerability.Origin
}

// GetCollector returns IsVulnerabilityGHSAIngestIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestIsVulnerability) GetCollector() string {
	return v.allIsVulnerability.Collector
}

func (v *IsVulnerabilityGHSAIngestIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsVulnerabilityGHSAIngestIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.IsVulnerabilityGHSAIngestIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsVulnerabilityGHSAIngestIsVulnerability struct {
	Id string `json:"id"`

	Osv allIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *IsVulnerabilityGHSAIngestIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsVulnerabilityGHSAIngestIsVulnerability) __premarshalJSON() (*__premarshalIsVulnerabilityGHSAIngestIsVulnerability, error) {
	var retval __premarshalIsVulnerabilityGHSAIngestIsVulnerability

	retval.Id = v.allIsVulnerability.Id
	retval.Osv = v.allIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.allIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalallIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal IsVulnerabilityGHSAIngestIsVulnerability.allIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.allIsVulnerability.Justification
	retval.Origin = v.allIsVulnerability.Origin
	retval.Collector = v.allIsVulnerability.Collector
	return &retval, nil
}

// IsVulnerabilityGHSAIngestOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type IsVulnerabilityGHSAIngestOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns IsVulnerabilityGHSAIngestOSV.Id, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns IsVulnerabilityGHSAIngestOSV.OsvId, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAIngestOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *IsVulnerabilityGHSAIngestOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsVulnerabilityGHSAIngestOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.IsVulnerabilityGHSAIngestOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIsVulnerabilityGHSAIngestOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *IsVulnerabilityGHSAIngestOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsVulnerabilityGHSAIngestOSV) __premarshalJSON() (*__premarshalIsVulnerabilityGHSAIngestOSV, error) {
	var retval __premarshalIsVulnerabilityGHSAIngestOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// IsVulnerabilityGHSAResponse is returned by IsVulnerabilityGHSA on success.
type IsVulnerabilityGHSAResponse struct {
	// Ingests a new OSV vulnerability and returns it.
	IngestOSV IsVulnerabilityGHSAIngestOSV `json:"ingestOSV"`
	// Ingests a new GitHub Security Advisory and returns it.
	IngestGHSA IsVulnerabilityGHSAIngestGHSA `json:"ingestGHSA"`
	// Ingest a mapping between an OSV entry and a CVE/GHSA vulnerability.
	IngestIsVulnerability IsVulnerabilityGHSAIngestIsVulnerability `json:"ingestIsVulnerability"`
}

// GetIngestOSV returns IsVulnerabilityGHSAResponse.IngestOSV, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAResponse) GetIngestOSV() IsVulnerabilityGHSAIngestOSV { return v.IngestOSV }

// GetIngestGHSA returns IsVulnerabilityGHSAResponse.IngestGHSA, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAResponse) GetIngestGHSA() IsVulnerabilityGHSAIngestGHSA {
	return v.IngestGHSA
}

// GetIngestIsVulnerability returns IsVulnerabilityGHSAResponse.IngestIsVulnerability, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityGHSAResponse) GetIngestIsVulnerability() IsVulnerabilityGHSAIngestIsVulnerability {
	return v.IngestIsVulnerability
}

// IsVulnerabilityInputSpec represents the input to link CVE/GHSA with OSV data.
type IsVulnerabilityInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns IsVulnerabilityInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns IsVulnerabilityInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns IsVulnerabilityInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *IsVulnerabilityInputSpec) GetCollector() string { return v.Collector }

// MatchFlags is used to input the PkgMatchType enum.
type MatchFlags struct {
	Pkg PkgMatchType `json:"pkg"`
}

// GetPkg returns MatchFlags.Pkg, and is useful for accessing the field via an interface.
func (v *MatchFlags) GetPkg() PkgMatchType { return v.Pkg }

// NeighborsNeighborsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type NeighborsNeighborsArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsArtifact.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsArtifact.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns NeighborsNeighborsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns NeighborsNeighborsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *NeighborsNeighborsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *NeighborsNeighborsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsArtifact) __premarshalJSON() (*__premarshalNeighborsNeighborsArtifact, error) {
	var retval __premarshalNeighborsNeighborsArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// NeighborsNeighborsBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type NeighborsNeighborsBuilder struct {
	Typename       *string `json:"__typename"`
	allBuilderTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsBuilder.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsBuilder) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsBuilder.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsBuilder) GetId() string { return v.allBuilderTree.Id }

// GetUri returns NeighborsNeighborsBuilder.Uri, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsBuilder) GetUri() string { return v.allBuilderTree.Uri }

func (v *NeighborsNeighborsBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *NeighborsNeighborsBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsBuilder) __premarshalJSON() (*__premarshalNeighborsNeighborsBuilder, error) {
	var retval __premarshalNeighborsNeighborsBuilder

	retval.Typename = v.Typename
	retval.Id = v.allBuilderTree.Id
	retval.Uri = v.allBuilderTree.Uri
	return &retval, nil
}

// NeighborsNeighborsCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type NeighborsNeighborsCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsCVE.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCVE) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCVE.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns NeighborsNeighborsCVE.Year, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns NeighborsNeighborsCVE.CveId, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *NeighborsNeighborsCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *NeighborsNeighborsCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCVE) __premarshalJSON() (*__premarshalNeighborsNeighborsCVE, error) {
	var retval __premarshalNeighborsNeighborsCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// NeighborsNeighborsCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NeighborsNeighborsCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns NeighborsNeighborsCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetJustification() string {
	return v.AllCertifyBad.Justification
}

// GetSubject returns NeighborsNeighborsCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns NeighborsNeighborsCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns NeighborsNeighborsCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *NeighborsNeighborsCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyBad) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyBad, error) {
	var retval __premarshalNeighborsNeighborsCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NeighborsNeighborsCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// NeighborsNeighborsCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NeighborsNeighborsCertifyGood struct {
	Typename       *string `json:"__typename"`
	allCertifyGood `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetId() string { return v.allCertifyGood.Id }

// GetJustification returns NeighborsNeighborsCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetJustification() string {
	return v.allCertifyGood.Justification
}

// GetSubject returns NeighborsNeighborsCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetSubject() allCertifyGoodSubjectPackageSourceOrArtifact {
	return v.allCertifyGood.Subject
}

// GetOrigin returns NeighborsNeighborsCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetOrigin() string { return v.allCertifyGood.Origin }

// GetCollector returns NeighborsNeighborsCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyGood) GetCollector() string { return v.allCertifyGood.Collector }

func (v *NeighborsNeighborsCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyGood) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyGood, error) {
	var retval __premarshalNeighborsNeighborsCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.allCertifyGood.Id
	retval.Justification = v.allCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.allCertifyGood.Subject
		var err error
		*dst, err = __marshalallCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NeighborsNeighborsCertifyGood.allCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.allCertifyGood.Origin
	retval.Collector = v.allCertifyGood.Collector
	return &retval, nil
}

// NeighborsNeighborsCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type NeighborsNeighborsCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns NeighborsNeighborsCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns NeighborsNeighborsCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *NeighborsNeighborsCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *NeighborsNeighborsCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyScorecard) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyScorecard, error) {
	var retval __premarshalNeighborsNeighborsCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// NeighborsNeighborsCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type NeighborsNeighborsCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	allCertifyVEXStatement `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetId() string { return v.allCertifyVEXStatement.Id }

// GetSubject returns NeighborsNeighborsCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.allCertifyVEXStatement.Subject
}

// GetVulnerability returns NeighborsNeighborsCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.allCertifyVEXStatement.Vulnerability
}

// GetStatus returns NeighborsNeighborsCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetStatus() VexStatus {
	return v.allCertifyVEXStatement.Status
}

// GetVexJustification returns NeighborsNeighborsCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.allCertifyVEXStatement.VexJustification
}

// GetStatement returns NeighborsNeighborsCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetStatement() string {
	return v.allCertifyVEXStatement.Statement
}

// GetStatusNotes returns NeighborsNeighborsCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetStatusNotes() string {
	return v.allCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns NeighborsNeighborsCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetKnownSince() time.Time {
	return v.allCertifyVEXStatement.KnownSince
}

// GetOrigin returns NeighborsNeighborsCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetOrigin() string {
	return v.allCertifyVEXStatement.Origin
}

// GetCollector returns NeighborsNeighborsCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVEXStatement) GetCollector() string {
	return v.allCertifyVEXStatement.Collector
}

func (v *NeighborsNeighborsCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyVEXStatement) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyVEXStatement, error) {
	var retval __premarshalNeighborsNeighborsCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.allCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.allCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NeighborsNeighborsCertifyVEXStatement.allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.allCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NeighborsNeighborsCertifyVEXStatement.allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.allCertifyVEXStatement.Status
	retval.VexJustification = v.allCertifyVEXStatement.VexJustification
	retval.Statement = v.allCertifyVEXStatement.Statement
	retval.StatusNotes = v.allCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.allCertifyVEXStatement.KnownSince
	retval.Origin = v.allCertifyVEXStatement.Origin
	retval.Collector = v.allCertifyVEXStatement.Collector
	return &retval, nil
}

// NeighborsNeighborsCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type NeighborsNeighborsCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns NeighborsNeighborsCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns NeighborsNeighborsCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetPackage() AllCertifyVulnPackage {
	return v.AllCertifyVuln.Package
}

// GetVulnerability returns NeighborsNeighborsCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns NeighborsNeighborsCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *NeighborsNeighborsCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *NeighborsNeighborsCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsCertifyVuln) __premarshalJSON() (*__premarshalNeighborsNeighborsCertifyVuln, error) {
	var retval __premarshalNeighborsNeighborsCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NeighborsNeighborsCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// NeighborsNeighborsGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type NeighborsNeighborsGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns NeighborsNeighborsGHSA.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsGHSA) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsGHSA.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns NeighborsNeighborsGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *NeighborsNeighborsGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *NeighborsNeighborsGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsGHSA) __premarshalJSON() (*__premarshalNeighborsNeighborsGHSA, error) {
	var retval __premarshalNeighborsNeighborsGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// NeighborsNeighborsHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type NeighborsNeighborsHasSBOM struct {
	Typename       *string `json:"__typename"`
	allHasSBOMTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetId() string { return v.allHasSBOMTree.Id }

// GetSubject returns NeighborsNeighborsHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetSubject() allHasSBOMTreeSubjectPackageOrArtifact {
	return v.allHasSBOMTree.Subject
}

// GetUri returns NeighborsNeighborsHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetUri() string { return v.allHasSBOMTree.Uri }

// GetAlgorithm returns NeighborsNeighborsHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetAlgorithm() string { return v.allHasSBOMTree.Algorithm }

// GetDigest returns NeighborsNeighborsHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetDigest() string { return v.allHasSBOMTree.Digest }

// GetDownloadLocation returns NeighborsNeighborsHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetDownloadLocation() string {
	return v.allHasSBOMTree.DownloadLocation
}

// GetAnnotations returns NeighborsNeighborsHasSBOM.Annotations, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetAnnotations() []allHasSBOMTreeAnnotationsAnnotation {
	return v.allHasSBOMTree.Annotations
}

// GetOrigin returns NeighborsNeighborsHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetOrigin() string { return v.allHasSBOMTree.Origin }

// GetCollector returns NeighborsNeighborsHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSBOM) GetCollector() string { return v.allHasSBOMTree.Collector }

func (v *NeighborsNeighborsHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Annotations []allHasSBOMTreeAnnotationsAnnotation `json:"annotations"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHasSBOM) __premarshalJSON() (*__premarshalNeighborsNeighborsHasSBOM, error) {
	var retval __premarshalNeighborsNeighborsHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.allHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.allHasSBOMTree.Subject
		var err error
		*dst, err = __marshalallHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NeighborsNeighborsHasSBOM.allHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.allHasSBOMTree.Uri
	retval.Algorithm = v.allHasSBOMTree.Algorithm
	retval.Digest = v.allHasSBOMTree.Digest
	retval.DownloadLocation = v.allHasSBOMTree.DownloadLocation
	retval.Annotations = v.allHasSBOMTree.Annotations
	retval.Origin = v.allHasSBOMTree.Origin
	retval.Collector = v.allHasSBOMTree.Collector
	return &retval, nil
}

// NeighborsNeighborsHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type NeighborsNeighborsHasSLSA struct {
	Typename    *string `json:"__typename"`
	allSLSATree `json:"-"`
}

// GetTypename returns NeighborsNeighborsHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetId() string { return v.allSLSATree.Id }

// GetSubject returns NeighborsNeighborsHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetSubject() allSLSATreeSubjectArtifact {
	return v.allSLSATree.Subject
}

// GetSlsa returns NeighborsNeighborsHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSLSA) GetSlsa() allSLSATreeSlsaSLSA { return v.allSLSATree.Slsa }

func (v *NeighborsNeighborsHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject allSLSATreeSubjectArtifact `json:"subject"`

	Slsa allSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *NeighborsNeighborsHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHasSLSA) __premarshalJSON() (*__premarshalNeighborsNeighborsHasSLSA, error) {
	var retval __premarshalNeighborsNeighborsHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.allSLSATree.Id
	retval.Subject = v.allSLSATree.Subject
	retval.Slsa = v.allSLSATree.Slsa
	return &retval, nil
}

// NeighborsNeighborsHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type NeighborsNeighborsHasSourceAt struct {
	Typename       *string `json:"__typename"`
	allHasSourceAt `json:"-"`
}

// GetTypename returns NeighborsNeighborsHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetId() string { return v.allHasSourceAt.Id }

// GetJustification returns NeighborsNeighborsHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetJustification() string {
	return v.allHasSourceAt.Justification
}

// GetKnownSince returns NeighborsNeighborsHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetKnownSince() time.Time { return v.allHasSourceAt.KnownSince }

// GetPackage returns NeighborsNeighborsHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetPackage() allHasSourceAtPackage {
	return v.allHasSourceAt.Package
}

// GetSource returns NeighborsNeighborsHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetSource() allHasSourceAtSource {
	return v.allHasSourceAt.Source
}

// GetOrigin returns NeighborsNeighborsHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetOrigin() string { return v.allHasSourceAt.Origin }

// GetCollector returns NeighborsNeighborsHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHasSourceAt) GetCollector() string { return v.allHasSourceAt.Collector }

func (v *NeighborsNeighborsHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package allHasSourceAtPackage `json:"package"`

	Source allHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHasSourceAt) __premarshalJSON() (*__premarshalNeighborsNeighborsHasSourceAt, error) {
	var retval __premarshalNeighborsNeighborsHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.allHasSourceAt.Id
	retval.Justification = v.allHasSourceAt.Justification
	retval.KnownSince = v.allHasSourceAt.KnownSince
	retval.Package = v.allHasSourceAt.Package
	retval.Source = v.allHasSourceAt.Source
	retval.Origin = v.allHasSourceAt.Origin
	retval.Collector = v.allHasSourceAt.Collector
	return &retval, nil
}

// NeighborsNeighborsHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type NeighborsNeighborsHashEqual struct {
	Typename         *string `json:"__typename"`
	allHashEqualTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsHashEqual.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetId() string { return v.allHashEqualTree.Id }

// GetJustification returns NeighborsNeighborsHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetJustification() string {
	return v.allHashEqualTree.Justification
}

// GetArtifacts returns NeighborsNeighborsHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetArtifacts() []allHashEqualTreeArtifactsArtifact {
	return v.allHashEqualTree.Artifacts
}

// GetOrigin returns NeighborsNeighborsHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetOrigin() string { return v.allHashEqualTree.Origin }

// GetCollector returns NeighborsNeighborsHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsHashEqual) GetCollector() string { return v.allHashEqualTree.Collector }

func (v *NeighborsNeighborsHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []allHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsHashEqual) __premarshalJSON() (*__premarshalNeighborsNeighborsHashEqual, error) {
	var retval __premarshalNeighborsNeighborsHashEqual

	retval.Typename = v.Typename
	retval.Id = v.allHashEqualTree.Id
	retval.Justification = v.allHashEqualTree.Justification
	retval.Artifacts = v.allHashEqualTree.Artifacts
	retval.Origin = v.allHashEqualTree.Origin
	retval.Collector = v.allHashEqualTree.Collector
	return &retval, nil
}

// NeighborsNeighborsIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type NeighborsNeighborsIsDependency struct {
	Typename            *string `json:"__typename"`
	allIsDependencyTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsIsDependency.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetId() string { return v.allIsDependencyTree.Id }

// GetJustification returns NeighborsNeighborsIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetJustification() string {
	return v.allIsDependencyTree.Justification
}

// GetPackage returns NeighborsNeighborsIsDependency.Package, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetPackage() allIsDependencyTreePackage {
	return v.allIsDependencyTree.Package
}

// GetDependentPackage returns NeighborsNeighborsIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetDependentPackage() allIsDependencyTreeDependentPackage {
	return v.allIsDependencyTree.DependentPackage
}

// GetDependencyType returns NeighborsNeighborsIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetDependencyType() DependencyType {
	return v.allIsDependencyTree.DependencyType
}

// GetVersionRange returns NeighborsNeighborsIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetVersionRange() string {
	return v.allIsDependencyTree.VersionRange
}

// GetOrigin returns NeighborsNeighborsIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetOrigin() string { return v.allIsDependencyTree.Origin }

// GetCollector returns NeighborsNeighborsIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsDependency) GetCollector() string {
	return v.allIsDependencyTree.Collector
}

func (v *NeighborsNeighborsIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package allIsDependencyTreePackage `json:"package"`

	DependentPackage allIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsIsDependency) __premarshalJSON() (*__premarshalNeighborsNeighborsIsDependency, error) {
	var retval __premarshalNeighborsNeighborsIsDependency

	retval.Typename = v.Typename
	retval.Id = v.allIsDependencyTree.Id
	retval.Justification = v.allIsDependencyTree.Justification
	retval.Package = v.allIsDependencyTree.Package
	retval.DependentPackage = v.allIsDependencyTree.DependentPackage
	retval.DependencyType = v.allIsDependencyTree.DependencyType
	retval.VersionRange = v.allIsDependencyTree.VersionRange
	retval.Origin = v.allIsDependencyTree.Origin
	retval.Collector = v.allIsDependencyTree.Collector
	return &retval, nil
}

// NeighborsNeighborsIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type NeighborsNeighborsIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns NeighborsNeighborsIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns NeighborsNeighborsIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns NeighborsNeighborsIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns NeighborsNeighborsIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns NeighborsNeighborsIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsOccurrence) GetCollector() string {
	return v.AllIsOccurrencesTree.Collector
}

func (v *NeighborsNeighborsIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsIsOccurrence) __premarshalJSON() (*__premarshalNeighborsNeighborsIsOccurrence, error) {
	var retval __premarshalNeighborsNeighborsIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NeighborsNeighborsIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// NeighborsNeighborsIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type NeighborsNeighborsIsVulnerability struct {
	Typename           *string `json:"__typename"`
	allIsVulnerability `json:"-"`
}

// GetTypename returns NeighborsNeighborsIsVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetId() string { return v.allIsVulnerability.Id }

// GetOsv returns NeighborsNeighborsIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetOsv() allIsVulnerabilityOsvOSV {
	return v.allIsVulnerability.Osv
}

// GetVulnerability returns NeighborsNeighborsIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetVulnerability() allIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.allIsVulnerability.Vulnerability
}

// GetJustification returns NeighborsNeighborsIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetJustification() string {
	return v.allIsVulnerability.Justification
}

// GetOrigin returns NeighborsNeighborsIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetOrigin() string { return v.allIsVulnerability.Origin }

// GetCollector returns NeighborsNeighborsIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsIsVulnerability) GetCollector() string {
	return v.allIsVulnerability.Collector
}

func (v *NeighborsNeighborsIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsIsVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Osv allIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsIsVulnerability) __premarshalJSON() (*__premarshalNeighborsNeighborsIsVulnerability, error) {
	var retval __premarshalNeighborsNeighborsIsVulnerability

	retval.Typename = v.Typename
	retval.Id = v.allIsVulnerability.Id
	retval.Osv = v.allIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.allIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalallIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NeighborsNeighborsIsVulnerability.allIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.allIsVulnerability.Justification
	retval.Origin = v.allIsVulnerability.Origin
	retval.Collector = v.allIsVulnerability.Collector
	return &retval, nil
}

// NeighborsNeighborsNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type NeighborsNeighborsNoVuln struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns NeighborsNeighborsNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsNoVuln) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsNoVuln.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsNoVuln) GetId() string { return v.Id }

// NeighborsNeighborsNode includes the requested fields of the GraphQL interface Node.
//
// NeighborsNeighborsNode is implemented by the following types:
// NeighborsNeighborsPackage
// NeighborsNeighborsSource
// NeighborsNeighborsArtifact
// NeighborsNeighborsBuilder
// NeighborsNeighborsOSV
// NeighborsNeighborsCVE
// NeighborsNeighborsGHSA
// NeighborsNeighborsNoVuln
// NeighborsNeighborsIsOccurrence
// NeighborsNeighborsIsDependency
// NeighborsNeighborsIsVulnerability
// NeighborsNeighborsCertifyVEXStatement
// NeighborsNeighborsHashEqual
// NeighborsNeighborsCertifyBad
// NeighborsNeighborsCertifyGood
// NeighborsNeighborsPkgEqual
// NeighborsNeighborsCertifyScorecard
// NeighborsNeighborsCertifyVuln
// NeighborsNeighborsHasSourceAt
// NeighborsNeighborsHasSBOM
// NeighborsNeighborsHasSLSA
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type NeighborsNeighborsNode interface {
	implementsGraphQLInterfaceNeighborsNeighborsNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *NeighborsNeighborsPackage) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsSource) implementsGraphQLInterfaceNeighborsNeighborsNode()              {}
func (v *NeighborsNeighborsArtifact) implementsGraphQLInterfaceNeighborsNeighborsNode()            {}
func (v *NeighborsNeighborsBuilder) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsOSV) implementsGraphQLInterfaceNeighborsNeighborsNode()                 {}
func (v *NeighborsNeighborsCVE) implementsGraphQLInterfaceNeighborsNeighborsNode()                 {}
func (v *NeighborsNeighborsGHSA) implementsGraphQLInterfaceNeighborsNeighborsNode()                {}
func (v *NeighborsNeighborsNoVuln) implementsGraphQLInterfaceNeighborsNeighborsNode()              {}
func (v *NeighborsNeighborsIsOccurrence) implementsGraphQLInterfaceNeighborsNeighborsNode()        {}
func (v *NeighborsNeighborsIsDependency) implementsGraphQLInterfaceNeighborsNeighborsNode()        {}
func (v *NeighborsNeighborsIsVulnerability) implementsGraphQLInterfaceNeighborsNeighborsNode()     {}
func (v *NeighborsNeighborsCertifyVEXStatement) implementsGraphQLInterfaceNeighborsNeighborsNode() {}
func (v *NeighborsNeighborsHashEqual) implementsGraphQLInterfaceNeighborsNeighborsNode()           {}
func (v *NeighborsNeighborsCertifyBad) implementsGraphQLInterfaceNeighborsNeighborsNode()          {}
func (v *NeighborsNeighborsCertifyGood) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsPkgEqual) implementsGraphQLInterfaceNeighborsNeighborsNode()            {}
func (v *NeighborsNeighborsCertifyScorecard) implementsGraphQLInterfaceNeighborsNeighborsNode()    {}
func (v *NeighborsNeighborsCertifyVuln) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsHasSourceAt) implementsGraphQLInterfaceNeighborsNeighborsNode()         {}
func (v *NeighborsNeighborsHasSBOM) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}
func (v *NeighborsNeighborsHasSLSA) implementsGraphQLInterfaceNeighborsNeighborsNode()             {}

func __unmarshalNeighborsNeighborsNode(b []byte, v *NeighborsNeighborsNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(NeighborsNeighborsPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(NeighborsNeighborsSource)
		return json.Unmarshal(b, *v)
	case "Artifact":
		*v = new(NeighborsNeighborsArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(NeighborsNeighborsBuilder)
		return json.Unmarshal(b, *v)
	case "OSV":
		*v = new(NeighborsNeighborsOSV)
		return json.Unmarshal(b, *v)
	case "CVE":
		*v = new(NeighborsNeighborsCVE)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(NeighborsNeighborsGHSA)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(NeighborsNeighborsNoVuln)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(NeighborsNeighborsIsOccurrence)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(NeighborsNeighborsIsDependency)
		return json.Unmarshal(b, *v)
	case "IsVulnerability":
		*v = new(NeighborsNeighborsIsVulnerability)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(NeighborsNeighborsCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(NeighborsNeighborsHashEqual)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(NeighborsNeighborsCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(NeighborsNeighborsCertifyGood)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(NeighborsNeighborsPkgEqual)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(NeighborsNeighborsCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(NeighborsNeighborsCertifyVuln)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(NeighborsNeighborsHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(NeighborsNeighborsHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(NeighborsNeighborsHasSLSA)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NeighborsNeighborsNode: "%v"`, tn.TypeName)
	}
}

func __marshalNeighborsNeighborsNode(v *NeighborsNeighborsNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NeighborsNeighborsPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*NeighborsNeighborsNoVuln
		}{typename, v}
		return json.Marshal(result)
	case *NeighborsNeighborsIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsIsVulnerability:
		typename = "IsVulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsIsVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsPkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsPkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NeighborsNeighborsHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNeighborsNeighborsHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NeighborsNeighborsNode: "%T"`, v)
	}
}

// NeighborsNeighborsOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type NeighborsNeighborsOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsOSV.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsOSV) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsOSV.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns NeighborsNeighborsOSV.OsvId, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *NeighborsNeighborsOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *NeighborsNeighborsOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsOSV) __premarshalJSON() (*__premarshalNeighborsNeighborsOSV, error) {
	var retval __premarshalNeighborsNeighborsOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// NeighborsNeighborsPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type NeighborsNeighborsPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsPackage.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsPackage.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns NeighborsNeighborsPackage.Type, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns NeighborsNeighborsPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *NeighborsNeighborsPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *NeighborsNeighborsPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsPackage) __premarshalJSON() (*__premarshalNeighborsNeighborsPackage, error) {
	var retval __premarshalNeighborsNeighborsPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// NeighborsNeighborsPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type NeighborsNeighborsPkgEqual struct {
	Typename    *string `json:"__typename"`
	allPkgEqual `json:"-"`
}

// GetTypename returns NeighborsNeighborsPkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetId() string { return v.allPkgEqual.Id }

// GetJustification returns NeighborsNeighborsPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetJustification() string { return v.allPkgEqual.Justification }

// GetPackages returns NeighborsNeighborsPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetPackages() []allPkgEqualPackagesPackage {
	return v.allPkgEqual.Packages
}

// GetOrigin returns NeighborsNeighborsPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetOrigin() string { return v.allPkgEqual.Origin }

// GetCollector returns NeighborsNeighborsPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsPkgEqual) GetCollector() string { return v.allPkgEqual.Collector }

func (v *NeighborsNeighborsPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsPkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []allPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NeighborsNeighborsPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsPkgEqual) __premarshalJSON() (*__premarshalNeighborsNeighborsPkgEqual, error) {
	var retval __premarshalNeighborsNeighborsPkgEqual

	retval.Typename = v.Typename
	retval.Id = v.allPkgEqual.Id
	retval.Justification = v.allPkgEqual.Justification
	retval.Packages = v.allPkgEqual.Packages
	retval.Origin = v.allPkgEqual.Origin
	retval.Collector = v.allPkgEqual.Collector
	return &retval, nil
}

// NeighborsNeighborsSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type NeighborsNeighborsSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns NeighborsNeighborsSource.Typename, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetTypename() *string { return v.Typename }

// GetId returns NeighborsNeighborsSource.Id, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns NeighborsNeighborsSource.Type, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns NeighborsNeighborsSource.Namespaces, and is useful for accessing the field via an interface.
func (v *NeighborsNeighborsSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *NeighborsNeighborsSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsNeighborsSource
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsNeighborsSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNeighborsNeighborsSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *NeighborsNeighborsSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsNeighborsSource) __premarshalJSON() (*__premarshalNeighborsNeighborsSource, error) {
	var retval __premarshalNeighborsNeighborsSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// NeighborsResponse is returned by Neighbors on success.
type NeighborsResponse struct {
	// neighbors returns all the direct neighbors of a node.
	//
	// Similarly, the input is only specified by its ID.
	//
	// Specifying any Edge value in `usingOnly` will make the neighbors list only
	// contain the corresponding GUAC evidence trees (GUAC verbs).
	Neighbors []NeighborsNeighborsNode `json:"-"`
}

// GetNeighbors returns NeighborsResponse.Neighbors, and is useful for accessing the field via an interface.
func (v *NeighborsResponse) GetNeighbors() []NeighborsNeighborsNode { return v.Neighbors }

func (v *NeighborsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NeighborsResponse
		Neighbors []json.RawMessage `json:"neighbors"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NeighborsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Neighbors
		src := firstPass.Neighbors
		*dst = make(
			[]NeighborsNeighborsNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalNeighborsNeighborsNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"Unable to unmarshal NeighborsResponse.Neighbors: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalNeighborsResponse struct {
	Neighbors []json.RawMessage `json:"neighbors"`
}

func (v *NeighborsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NeighborsResponse) __premarshalJSON() (*__premarshalNeighborsResponse, error) {
	var retval __premarshalNeighborsResponse

	{

		dst := &retval.Neighbors
		src := v.Neighbors
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalNeighborsNeighborsNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal NeighborsResponse.Neighbors: %w", err)
			}
		}
	}
	return &retval, nil
}

// NodeNode includes the requested fields of the GraphQL interface Node.
//
// NodeNode is implemented by the following types:
// NodeNodePackage
// NodeNodeSource
// NodeNodeArtifact
// NodeNodeBuilder
// NodeNodeOSV
// NodeNodeCVE
// NodeNodeGHSA
// NodeNodeNoVuln
// NodeNodeIsOccurrence
// NodeNodeIsDependency
// NodeNodeIsVulnerability
// NodeNodeCertifyVEXStatement
// NodeNodeHashEqual
// NodeNodeCertifyBad
// NodeNodeCertifyGood
// NodeNodePkgEqual
// NodeNodeCertifyScorecard
// NodeNodeCertifyVuln
// NodeNodeHasSourceAt
// NodeNodeHasSBOM
// NodeNodeHasSLSA
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type NodeNode interface {
	implementsGraphQLInterfaceNodeNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *NodeNodePackage) implementsGraphQLInterfaceNodeNode()             {}
func (v *NodeNodeSource) implementsGraphQLInterfaceNodeNode()              {}
func (v *NodeNodeArtifact) implementsGraphQLInterfaceNodeNode()            {}
func (v *NodeNodeBuilder) implementsGraphQLInterfaceNodeNode()             {}
func (v *NodeNodeOSV) implementsGraphQLInterfaceNodeNode()                 {}
func (v *NodeNodeCVE) implementsGraphQLInterfaceNodeNode()                 {}
func (v *NodeNodeGHSA) implementsGraphQLInterfaceNodeNode()                {}
func (v *NodeNodeNoVuln) implementsGraphQLInterfaceNodeNode()              {}
func (v *NodeNodeIsOccurrence) implementsGraphQLInterfaceNodeNode()        {}
func (v *NodeNodeIsDependency) implementsGraphQLInterfaceNodeNode()        {}
func (v *NodeNodeIsVulnerability) implementsGraphQLInterfaceNodeNode()     {}
func (v *NodeNodeCertifyVEXStatement) implementsGraphQLInterfaceNodeNode() {}
func (v *NodeNodeHashEqual) implementsGraphQLInterfaceNodeNode()           {}
func (v *NodeNodeCertifyBad) implementsGraphQLInterfaceNodeNode()          {}
func (v *NodeNodeCertifyGood) implementsGraphQLInterfaceNodeNode()         {}
func (v *NodeNodePkgEqual) implementsGraphQLInterfaceNodeNode()            {}
func (v *NodeNodeCertifyScorecard) implementsGraphQLInterfaceNodeNode()    {}
func (v *NodeNodeCertifyVuln) implementsGraphQLInterfaceNodeNode()         {}
func (v *NodeNodeHasSourceAt) implementsGraphQLInterfaceNodeNode()         {}
func (v *NodeNodeHasSBOM) implementsGraphQLInterfaceNodeNode()             {}
func (v *NodeNodeHasSLSA) implementsGraphQLInterfaceNodeNode()             {}

func __unmarshalNodeNode(b []byte, v *NodeNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(NodeNodePackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(NodeNodeSource)
		return json.Unmarshal(b, *v)
	case "Artifact":
		*v = new(NodeNodeArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(NodeNodeBuilder)
		return json.Unmarshal(b, *v)
	case "OSV":
		*v = new(NodeNodeOSV)
		return json.Unmarshal(b, *v)
	case "CVE":
		*v = new(NodeNodeCVE)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(NodeNodeGHSA)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(NodeNodeNoVuln)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(NodeNodeIsOccurrence)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(NodeNodeIsDependency)
		return json.Unmarshal(b, *v)
	case "IsVulnerability":
		*v = new(NodeNodeIsVulnerability)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(NodeNodeCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(NodeNodeHashEqual)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(NodeNodeCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(NodeNodeCertifyGood)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(NodeNodePkgEqual)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(NodeNodeCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(NodeNodeCertifyVuln)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(NodeNodeHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(NodeNodeHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(NodeNodeHasSLSA)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NodeNode: "%v"`, tn.TypeName)
	}
}

func __marshalNodeNode(v *NodeNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NodeNodePackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodePackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*NodeNodeNoVuln
		}{typename, v}
		return json.Marshal(result)
	case *NodeNodeIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeIsVulnerability:
		typename = "IsVulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeIsVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodePkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodePkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodeNodeHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodeNodeHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NodeNode: "%T"`, v)
	}
}

// NodeNodeArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type NodeNodeArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns NodeNodeArtifact.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeArtifact.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns NodeNodeArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns NodeNodeArtifact.Digest, and is useful for accessing the field via an interface.
func (v *NodeNodeArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *NodeNodeArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *NodeNodeArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeArtifact) __premarshalJSON() (*__premarshalNodeNodeArtifact, error) {
	var retval __premarshalNodeNodeArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// NodeNodeBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type NodeNodeBuilder struct {
	Typename       *string `json:"__typename"`
	allBuilderTree `json:"-"`
}

// GetTypename returns NodeNodeBuilder.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeBuilder) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeBuilder.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeBuilder) GetId() string { return v.allBuilderTree.Id }

// GetUri returns NodeNodeBuilder.Uri, and is useful for accessing the field via an interface.
func (v *NodeNodeBuilder) GetUri() string { return v.allBuilderTree.Uri }

func (v *NodeNodeBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *NodeNodeBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeBuilder) __premarshalJSON() (*__premarshalNodeNodeBuilder, error) {
	var retval __premarshalNodeNodeBuilder

	retval.Typename = v.Typename
	retval.Id = v.allBuilderTree.Id
	retval.Uri = v.allBuilderTree.Uri
	return &retval, nil
}

// NodeNodeCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type NodeNodeCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns NodeNodeCVE.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCVE) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCVE.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns NodeNodeCVE.Year, and is useful for accessing the field via an interface.
func (v *NodeNodeCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns NodeNodeCVE.CveId, and is useful for accessing the field via an interface.
func (v *NodeNodeCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *NodeNodeCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *NodeNodeCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCVE) __premarshalJSON() (*__premarshalNodeNodeCVE, error) {
	var retval __premarshalNodeNodeCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// NodeNodeCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodeNodeCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns NodeNodeCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns NodeNodeCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetSubject returns NodeNodeCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns NodeNodeCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns NodeNodeCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *NodeNodeCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyBad) __premarshalJSON() (*__premarshalNodeNodeCertifyBad, error) {
	var retval __premarshalNodeNodeCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodeNodeCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// NodeNodeCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodeNodeCertifyGood struct {
	Typename       *string `json:"__typename"`
	allCertifyGood `json:"-"`
}

// GetTypename returns NodeNodeCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetId() string { return v.allCertifyGood.Id }

// GetJustification returns NodeNodeCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetJustification() string { return v.allCertifyGood.Justification }

// GetSubject returns NodeNodeCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetSubject() allCertifyGoodSubjectPackageSourceOrArtifact {
	return v.allCertifyGood.Subject
}

// GetOrigin returns NodeNodeCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetOrigin() string { return v.allCertifyGood.Origin }

// GetCollector returns NodeNodeCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyGood) GetCollector() string { return v.allCertifyGood.Collector }

func (v *NodeNodeCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyGood) __premarshalJSON() (*__premarshalNodeNodeCertifyGood, error) {
	var retval __premarshalNodeNodeCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.allCertifyGood.Id
	retval.Justification = v.allCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.allCertifyGood.Subject
		var err error
		*dst, err = __marshalallCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodeNodeCertifyGood.allCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.allCertifyGood.Origin
	retval.Collector = v.allCertifyGood.Collector
	return &retval, nil
}

// NodeNodeCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type NodeNodeCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns NodeNodeCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns NodeNodeCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns NodeNodeCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *NodeNodeCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *NodeNodeCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyScorecard) __premarshalJSON() (*__premarshalNodeNodeCertifyScorecard, error) {
	var retval __premarshalNodeNodeCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// NodeNodeCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type NodeNodeCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	allCertifyVEXStatement `json:"-"`
}

// GetTypename returns NodeNodeCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetId() string { return v.allCertifyVEXStatement.Id }

// GetSubject returns NodeNodeCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.allCertifyVEXStatement.Subject
}

// GetVulnerability returns NodeNodeCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.allCertifyVEXStatement.Vulnerability
}

// GetStatus returns NodeNodeCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetStatus() VexStatus { return v.allCertifyVEXStatement.Status }

// GetVexJustification returns NodeNodeCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.allCertifyVEXStatement.VexJustification
}

// GetStatement returns NodeNodeCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetStatement() string {
	return v.allCertifyVEXStatement.Statement
}

// GetStatusNotes returns NodeNodeCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetStatusNotes() string {
	return v.allCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns NodeNodeCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetKnownSince() time.Time {
	return v.allCertifyVEXStatement.KnownSince
}

// GetOrigin returns NodeNodeCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetOrigin() string { return v.allCertifyVEXStatement.Origin }

// GetCollector returns NodeNodeCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVEXStatement) GetCollector() string {
	return v.allCertifyVEXStatement.Collector
}

func (v *NodeNodeCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyVEXStatement) __premarshalJSON() (*__premarshalNodeNodeCertifyVEXStatement, error) {
	var retval __premarshalNodeNodeCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.allCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.allCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodeNodeCertifyVEXStatement.allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.allCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodeNodeCertifyVEXStatement.allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.allCertifyVEXStatement.Status
	retval.VexJustification = v.allCertifyVEXStatement.VexJustification
	retval.Statement = v.allCertifyVEXStatement.Statement
	retval.StatusNotes = v.allCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.allCertifyVEXStatement.KnownSince
	retval.Origin = v.allCertifyVEXStatement.Origin
	retval.Collector = v.allCertifyVEXStatement.Collector
	return &retval, nil
}

// NodeNodeCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type NodeNodeCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns NodeNodeCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns NodeNodeCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.AllCertifyVuln.Package }

// GetVulnerability returns NodeNodeCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns NodeNodeCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *NodeNodeCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *NodeNodeCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *NodeNodeCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeCertifyVuln) __premarshalJSON() (*__premarshalNodeNodeCertifyVuln, error) {
	var retval __premarshalNodeNodeCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodeNodeCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// NodeNodeGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type NodeNodeGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns NodeNodeGHSA.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeGHSA) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeGHSA.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns NodeNodeGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *NodeNodeGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *NodeNodeGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *NodeNodeGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeGHSA) __premarshalJSON() (*__premarshalNodeNodeGHSA, error) {
	var retval __premarshalNodeNodeGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// NodeNodeHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type NodeNodeHasSBOM struct {
	Typename       *string `json:"__typename"`
	allHasSBOMTree `json:"-"`
}

// GetTypename returns NodeNodeHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetId() string { return v.allHasSBOMTree.Id }

// GetSubject returns NodeNodeHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetSubject() allHasSBOMTreeSubjectPackageOrArtifact {
	return v.allHasSBOMTree.Subject
}

// GetUri returns NodeNodeHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetUri() string { return v.allHasSBOMTree.Uri }

// GetAlgorithm returns NodeNodeHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetAlgorithm() string { return v.allHasSBOMTree.Algorithm }

// GetDigest returns NodeNodeHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetDigest() string { return v.allHasSBOMTree.Digest }

// GetDownloadLocation returns NodeNodeHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetDownloadLocation() string { return v.allHasSBOMTree.DownloadLocation }

// GetAnnotations returns NodeNodeHasSBOM.Annotations, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetAnnotations() []allHasSBOMTreeAnnotationsAnnotation {
	return v.allHasSBOMTree.Annotations
}

// GetOrigin returns NodeNodeHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetOrigin() string { return v.allHasSBOMTree.Origin }

// GetCollector returns NodeNodeHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSBOM) GetCollector() string { return v.allHasSBOMTree.Collector }

func (v *NodeNodeHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Annotations []allHasSBOMTreeAnnotationsAnnotation `json:"annotations"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHasSBOM) __premarshalJSON() (*__premarshalNodeNodeHasSBOM, error) {
	var retval __premarshalNodeNodeHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.allHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.allHasSBOMTree.Subject
		var err error
		*dst, err = __marshalallHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodeNodeHasSBOM.allHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.allHasSBOMTree.Uri
	retval.Algorithm = v.allHasSBOMTree.Algorithm
	retval.Digest = v.allHasSBOMTree.Digest
	retval.DownloadLocation = v.allHasSBOMTree.DownloadLocation
	retval.Annotations = v.allHasSBOMTree.Annotations
	retval.Origin = v.allHasSBOMTree.Origin
	retval.Collector = v.allHasSBOMTree.Collector
	return &retval, nil
}

// NodeNodeHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type NodeNodeHasSLSA struct {
	Typename    *string `json:"__typename"`
	allSLSATree `json:"-"`
}

// GetTypename returns NodeNodeHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetId() string { return v.allSLSATree.Id }

// GetSubject returns NodeNodeHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetSubject() allSLSATreeSubjectArtifact { return v.allSLSATree.Subject }

// GetSlsa returns NodeNodeHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSLSA) GetSlsa() allSLSATreeSlsaSLSA { return v.allSLSATree.Slsa }

func (v *NodeNodeHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject allSLSATreeSubjectArtifact `json:"subject"`

	Slsa allSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *NodeNodeHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHasSLSA) __premarshalJSON() (*__premarshalNodeNodeHasSLSA, error) {
	var retval __premarshalNodeNodeHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.allSLSATree.Id
	retval.Subject = v.allSLSATree.Subject
	retval.Slsa = v.allSLSATree.Slsa
	return &retval, nil
}

// NodeNodeHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type NodeNodeHasSourceAt struct {
	Typename       *string `json:"__typename"`
	allHasSourceAt `json:"-"`
}

// GetTypename returns NodeNodeHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetId() string { return v.allHasSourceAt.Id }

// GetJustification returns NodeNodeHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetJustification() string { return v.allHasSourceAt.Justification }

// GetKnownSince returns NodeNodeHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetKnownSince() time.Time { return v.allHasSourceAt.KnownSince }

// GetPackage returns NodeNodeHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetPackage() allHasSourceAtPackage { return v.allHasSourceAt.Package }

// GetSource returns NodeNodeHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetSource() allHasSourceAtSource { return v.allHasSourceAt.Source }

// GetOrigin returns NodeNodeHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetOrigin() string { return v.allHasSourceAt.Origin }

// GetCollector returns NodeNodeHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeHasSourceAt) GetCollector() string { return v.allHasSourceAt.Collector }

func (v *NodeNodeHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package allHasSourceAtPackage `json:"package"`

	Source allHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHasSourceAt) __premarshalJSON() (*__premarshalNodeNodeHasSourceAt, error) {
	var retval __premarshalNodeNodeHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.allHasSourceAt.Id
	retval.Justification = v.allHasSourceAt.Justification
	retval.KnownSince = v.allHasSourceAt.KnownSince
	retval.Package = v.allHasSourceAt.Package
	retval.Source = v.allHasSourceAt.Source
	retval.Origin = v.allHasSourceAt.Origin
	retval.Collector = v.allHasSourceAt.Collector
	return &retval, nil
}

// NodeNodeHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type NodeNodeHashEqual struct {
	Typename         *string `json:"__typename"`
	allHashEqualTree `json:"-"`
}

// GetTypename returns NodeNodeHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeHashEqual.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetId() string { return v.allHashEqualTree.Id }

// GetJustification returns NodeNodeHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetJustification() string { return v.allHashEqualTree.Justification }

// GetArtifacts returns NodeNodeHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetArtifacts() []allHashEqualTreeArtifactsArtifact {
	return v.allHashEqualTree.Artifacts
}

// GetOrigin returns NodeNodeHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetOrigin() string { return v.allHashEqualTree.Origin }

// GetCollector returns NodeNodeHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeHashEqual) GetCollector() string { return v.allHashEqualTree.Collector }

func (v *NodeNodeHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []allHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeHashEqual) __premarshalJSON() (*__premarshalNodeNodeHashEqual, error) {
	var retval __premarshalNodeNodeHashEqual

	retval.Typename = v.Typename
	retval.Id = v.allHashEqualTree.Id
	retval.Justification = v.allHashEqualTree.Justification
	retval.Artifacts = v.allHashEqualTree.Artifacts
	retval.Origin = v.allHashEqualTree.Origin
	retval.Collector = v.allHashEqualTree.Collector
	return &retval, nil
}

// NodeNodeIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type NodeNodeIsDependency struct {
	Typename            *string `json:"__typename"`
	allIsDependencyTree `json:"-"`
}

// GetTypename returns NodeNodeIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeIsDependency.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetId() string { return v.allIsDependencyTree.Id }

// GetJustification returns NodeNodeIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetJustification() string { return v.allIsDependencyTree.Justification }

// GetPackage returns NodeNodeIsDependency.Package, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetPackage() allIsDependencyTreePackage {
	return v.allIsDependencyTree.Package
}

// GetDependentPackage returns NodeNodeIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetDependentPackage() allIsDependencyTreeDependentPackage {
	return v.allIsDependencyTree.DependentPackage
}

// GetDependencyType returns NodeNodeIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetDependencyType() DependencyType {
	return v.allIsDependencyTree.DependencyType
}

// GetVersionRange returns NodeNodeIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetVersionRange() string { return v.allIsDependencyTree.VersionRange }

// GetOrigin returns NodeNodeIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetOrigin() string { return v.allIsDependencyTree.Origin }

// GetCollector returns NodeNodeIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeIsDependency) GetCollector() string { return v.allIsDependencyTree.Collector }

func (v *NodeNodeIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package allIsDependencyTreePackage `json:"package"`

	DependentPackage allIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeIsDependency) __premarshalJSON() (*__premarshalNodeNodeIsDependency, error) {
	var retval __premarshalNodeNodeIsDependency

	retval.Typename = v.Typename
	retval.Id = v.allIsDependencyTree.Id
	retval.Justification = v.allIsDependencyTree.Justification
	retval.Package = v.allIsDependencyTree.Package
	retval.DependentPackage = v.allIsDependencyTree.DependentPackage
	retval.DependencyType = v.allIsDependencyTree.DependencyType
	retval.VersionRange = v.allIsDependencyTree.VersionRange
	retval.Origin = v.allIsDependencyTree.Origin
	retval.Collector = v.allIsDependencyTree.Collector
	return &retval, nil
}

// NodeNodeIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type NodeNodeIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns NodeNodeIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns NodeNodeIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns NodeNodeIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns NodeNodeIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetJustification() string { return v.AllIsOccurrencesTree.Justification }

// GetOrigin returns NodeNodeIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns NodeNodeIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeIsOccurrence) GetCollector() string { return v.AllIsOccurrencesTree.Collector }

func (v *NodeNodeIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeIsOccurrence) __premarshalJSON() (*__premarshalNodeNodeIsOccurrence, error) {
	var retval __premarshalNodeNodeIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodeNodeIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// NodeNodeIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type NodeNodeIsVulnerability struct {
	Typename           *string `json:"__typename"`
	allIsVulnerability `json:"-"`
}

// GetTypename returns NodeNodeIsVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetId() string { return v.allIsVulnerability.Id }

// GetOsv returns NodeNodeIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetOsv() allIsVulnerabilityOsvOSV { return v.allIsVulnerability.Osv }

// GetVulnerability returns NodeNodeIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetVulnerability() allIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.allIsVulnerability.Vulnerability
}

// GetJustification returns NodeNodeIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetJustification() string {
	return v.allIsVulnerability.Justification
}

// GetOrigin returns NodeNodeIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetOrigin() string { return v.allIsVulnerability.Origin }

// GetCollector returns NodeNodeIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodeIsVulnerability) GetCollector() string { return v.allIsVulnerability.Collector }

func (v *NodeNodeIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeIsVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Osv allIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodeIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeIsVulnerability) __premarshalJSON() (*__premarshalNodeNodeIsVulnerability, error) {
	var retval __premarshalNodeNodeIsVulnerability

	retval.Typename = v.Typename
	retval.Id = v.allIsVulnerability.Id
	retval.Osv = v.allIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.allIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalallIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodeNodeIsVulnerability.allIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.allIsVulnerability.Justification
	retval.Origin = v.allIsVulnerability.Origin
	retval.Collector = v.allIsVulnerability.Collector
	return &retval, nil
}

// NodeNodeNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type NodeNodeNoVuln struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns NodeNodeNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeNoVuln) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeNoVuln.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeNoVuln) GetId() string { return v.Id }

// NodeNodeOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type NodeNodeOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns NodeNodeOSV.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeOSV) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeOSV.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns NodeNodeOSV.OsvId, and is useful for accessing the field via an interface.
func (v *NodeNodeOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *NodeNodeOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *NodeNodeOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeOSV) __premarshalJSON() (*__premarshalNodeNodeOSV, error) {
	var retval __premarshalNodeNodeOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// NodeNodePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type NodeNodePackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns NodeNodePackage.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetTypename() *string { return v.Typename }

// GetId returns NodeNodePackage.Id, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns NodeNodePackage.Type, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns NodeNodePackage.Namespaces, and is useful for accessing the field via an interface.
func (v *NodeNodePackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *NodeNodePackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodePackage
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodePackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodePackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *NodeNodePackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodePackage) __premarshalJSON() (*__premarshalNodeNodePackage, error) {
	var retval __premarshalNodeNodePackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// NodeNodePkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type NodeNodePkgEqual struct {
	Typename    *string `json:"__typename"`
	allPkgEqual `json:"-"`
}

// GetTypename returns NodeNodePkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetTypename() *string { return v.Typename }

// GetId returns NodeNodePkgEqual.Id, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetId() string { return v.allPkgEqual.Id }

// GetJustification returns NodeNodePkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetJustification() string { return v.allPkgEqual.Justification }

// GetPackages returns NodeNodePkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetPackages() []allPkgEqualPackagesPackage { return v.allPkgEqual.Packages }

// GetOrigin returns NodeNodePkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetOrigin() string { return v.allPkgEqual.Origin }

// GetCollector returns NodeNodePkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodeNodePkgEqual) GetCollector() string { return v.allPkgEqual.Collector }

func (v *NodeNodePkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodePkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodePkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodePkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []allPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodeNodePkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodePkgEqual) __premarshalJSON() (*__premarshalNodeNodePkgEqual, error) {
	var retval __premarshalNodeNodePkgEqual

	retval.Typename = v.Typename
	retval.Id = v.allPkgEqual.Id
	retval.Justification = v.allPkgEqual.Justification
	retval.Packages = v.allPkgEqual.Packages
	retval.Origin = v.allPkgEqual.Origin
	retval.Collector = v.allPkgEqual.Collector
	return &retval, nil
}

// NodeNodeSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type NodeNodeSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns NodeNodeSource.Typename, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetTypename() *string { return v.Typename }

// GetId returns NodeNodeSource.Id, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns NodeNodeSource.Type, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns NodeNodeSource.Namespaces, and is useful for accessing the field via an interface.
func (v *NodeNodeSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *NodeNodeSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeNodeSource
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeNodeSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodeNodeSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *NodeNodeSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeNodeSource) __premarshalJSON() (*__premarshalNodeNodeSource, error) {
	var retval __premarshalNodeNodeSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// NodeResponse is returned by Node on success.
type NodeResponse struct {
	// node returns a single node, regardless of type.
	//
	// The input is only specified by its ID.
	Node NodeNode `json:"-"`
}

// GetNode returns NodeResponse.Node, and is useful for accessing the field via an interface.
func (v *NodeResponse) GetNode() NodeNode { return v.Node }

func (v *NodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodeResponse
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalNodeNode(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal NodeResponse.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalNodeResponse struct {
	Node json.RawMessage `json:"node"`
}

func (v *NodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodeResponse) __premarshalJSON() (*__premarshalNodeResponse, error) {
	var retval __premarshalNodeResponse

	{

		dst := &retval.Node
		src := v.Node
		var err error
		*dst, err = __marshalNodeNode(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodeResponse.Node: %w", err)
		}
	}
	return &retval, nil
}

// NodesNodesArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type NodesNodesArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns NodesNodesArtifact.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesArtifact.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns NodesNodesArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns NodesNodesArtifact.Digest, and is useful for accessing the field via an interface.
func (v *NodesNodesArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *NodesNodesArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *NodesNodesArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesArtifact) __premarshalJSON() (*__premarshalNodesNodesArtifact, error) {
	var retval __premarshalNodesNodesArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// NodesNodesBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type NodesNodesBuilder struct {
	Typename       *string `json:"__typename"`
	allBuilderTree `json:"-"`
}

// GetTypename returns NodesNodesBuilder.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesBuilder) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesBuilder.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesBuilder) GetId() string { return v.allBuilderTree.Id }

// GetUri returns NodesNodesBuilder.Uri, and is useful for accessing the field via an interface.
func (v *NodesNodesBuilder) GetUri() string { return v.allBuilderTree.Uri }

func (v *NodesNodesBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *NodesNodesBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesBuilder) __premarshalJSON() (*__premarshalNodesNodesBuilder, error) {
	var retval __premarshalNodesNodesBuilder

	retval.Typename = v.Typename
	retval.Id = v.allBuilderTree.Id
	retval.Uri = v.allBuilderTree.Uri
	return &retval, nil
}

// NodesNodesCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type NodesNodesCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns NodesNodesCVE.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCVE) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCVE.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns NodesNodesCVE.Year, and is useful for accessing the field via an interface.
func (v *NodesNodesCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns NodesNodesCVE.CveId, and is useful for accessing the field via an interface.
func (v *NodesNodesCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *NodesNodesCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *NodesNodesCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCVE) __premarshalJSON() (*__premarshalNodesNodesCVE, error) {
	var retval __premarshalNodesNodesCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// NodesNodesCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodesNodesCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns NodesNodesCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns NodesNodesCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetSubject returns NodesNodesCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns NodesNodesCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns NodesNodesCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *NodesNodesCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyBad) __premarshalJSON() (*__premarshalNodesNodesCertifyBad, error) {
	var retval __premarshalNodesNodesCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodesNodesCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// NodesNodesCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type NodesNodesCertifyGood struct {
	Typename       *string `json:"__typename"`
	allCertifyGood `json:"-"`
}

// GetTypename returns NodesNodesCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetId() string { return v.allCertifyGood.Id }

// GetJustification returns NodesNodesCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetJustification() string { return v.allCertifyGood.Justification }

// GetSubject returns NodesNodesCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetSubject() allCertifyGoodSubjectPackageSourceOrArtifact {
	return v.allCertifyGood.Subject
}

// GetOrigin returns NodesNodesCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetOrigin() string { return v.allCertifyGood.Origin }

// GetCollector returns NodesNodesCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyGood) GetCollector() string { return v.allCertifyGood.Collector }

func (v *NodesNodesCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyGood) __premarshalJSON() (*__premarshalNodesNodesCertifyGood, error) {
	var retval __premarshalNodesNodesCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.allCertifyGood.Id
	retval.Justification = v.allCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.allCertifyGood.Subject
		var err error
		*dst, err = __marshalallCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodesNodesCertifyGood.allCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.allCertifyGood.Origin
	retval.Collector = v.allCertifyGood.Collector
	return &retval, nil
}

// NodesNodesCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type NodesNodesCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns NodesNodesCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns NodesNodesCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns NodesNodesCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *NodesNodesCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *NodesNodesCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyScorecard) __premarshalJSON() (*__premarshalNodesNodesCertifyScorecard, error) {
	var retval __premarshalNodesNodesCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// NodesNodesCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type NodesNodesCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	allCertifyVEXStatement `json:"-"`
}

// GetTypename returns NodesNodesCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetId() string { return v.allCertifyVEXStatement.Id }

// GetSubject returns NodesNodesCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.allCertifyVEXStatement.Subject
}

// GetVulnerability returns NodesNodesCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.allCertifyVEXStatement.Vulnerability
}

// GetStatus returns NodesNodesCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetStatus() VexStatus { return v.allCertifyVEXStatement.Status }

// GetVexJustification returns NodesNodesCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.allCertifyVEXStatement.VexJustification
}

// GetStatement returns NodesNodesCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetStatement() string {
	return v.allCertifyVEXStatement.Statement
}

// GetStatusNotes returns NodesNodesCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetStatusNotes() string {
	return v.allCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns NodesNodesCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetKnownSince() time.Time {
	return v.allCertifyVEXStatement.KnownSince
}

// GetOrigin returns NodesNodesCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetOrigin() string { return v.allCertifyVEXStatement.Origin }

// GetCollector returns NodesNodesCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVEXStatement) GetCollector() string {
	return v.allCertifyVEXStatement.Collector
}

func (v *NodesNodesCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyVEXStatement) __premarshalJSON() (*__premarshalNodesNodesCertifyVEXStatement, error) {
	var retval __premarshalNodesNodesCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.allCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.allCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodesNodesCertifyVEXStatement.allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.allCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodesNodesCertifyVEXStatement.allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.allCertifyVEXStatement.Status
	retval.VexJustification = v.allCertifyVEXStatement.VexJustification
	retval.Statement = v.allCertifyVEXStatement.Statement
	retval.StatusNotes = v.allCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.allCertifyVEXStatement.KnownSince
	retval.Origin = v.allCertifyVEXStatement.Origin
	retval.Collector = v.allCertifyVEXStatement.Collector
	return &retval, nil
}

// NodesNodesCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type NodesNodesCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns NodesNodesCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns NodesNodesCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.AllCertifyVuln.Package }

// GetVulnerability returns NodesNodesCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns NodesNodesCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *NodesNodesCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *NodesNodesCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *NodesNodesCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesCertifyVuln) __premarshalJSON() (*__premarshalNodesNodesCertifyVuln, error) {
	var retval __premarshalNodesNodesCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodesNodesCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// NodesNodesGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type NodesNodesGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns NodesNodesGHSA.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesGHSA) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesGHSA.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns NodesNodesGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *NodesNodesGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *NodesNodesGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *NodesNodesGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesGHSA) __premarshalJSON() (*__premarshalNodesNodesGHSA, error) {
	var retval __premarshalNodesNodesGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// NodesNodesHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type NodesNodesHasSBOM struct {
	Typename       *string `json:"__typename"`
	allHasSBOMTree `json:"-"`
}

// GetTypename returns NodesNodesHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetId() string { return v.allHasSBOMTree.Id }

// GetSubject returns NodesNodesHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetSubject() allHasSBOMTreeSubjectPackageOrArtifact {
	return v.allHasSBOMTree.Subject
}

// GetUri returns NodesNodesHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetUri() string { return v.allHasSBOMTree.Uri }

// GetAlgorithm returns NodesNodesHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetAlgorithm() string { return v.allHasSBOMTree.Algorithm }

// GetDigest returns NodesNodesHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetDigest() string { return v.allHasSBOMTree.Digest }

// GetDownloadLocation returns NodesNodesHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetDownloadLocation() string { return v.allHasSBOMTree.DownloadLocation }

// GetAnnotations returns NodesNodesHasSBOM.Annotations, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetAnnotations() []allHasSBOMTreeAnnotationsAnnotation {
	return v.allHasSBOMTree.Annotations
}

// GetOrigin returns NodesNodesHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetOrigin() string { return v.allHasSBOMTree.Origin }

// GetCollector returns NodesNodesHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSBOM) GetCollector() string { return v.allHasSBOMTree.Collector }

func (v *NodesNodesHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Annotations []allHasSBOMTreeAnnotationsAnnotation `json:"annotations"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHasSBOM) __premarshalJSON() (*__premarshalNodesNodesHasSBOM, error) {
	var retval __premarshalNodesNodesHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.allHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.allHasSBOMTree.Subject
		var err error
		*dst, err = __marshalallHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodesNodesHasSBOM.allHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.allHasSBOMTree.Uri
	retval.Algorithm = v.allHasSBOMTree.Algorithm
	retval.Digest = v.allHasSBOMTree.Digest
	retval.DownloadLocation = v.allHasSBOMTree.DownloadLocation
	retval.Annotations = v.allHasSBOMTree.Annotations
	retval.Origin = v.allHasSBOMTree.Origin
	retval.Collector = v.allHasSBOMTree.Collector
	return &retval, nil
}

// NodesNodesHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type NodesNodesHasSLSA struct {
	Typename    *string `json:"__typename"`
	allSLSATree `json:"-"`
}

// GetTypename returns NodesNodesHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetId() string { return v.allSLSATree.Id }

// GetSubject returns NodesNodesHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetSubject() allSLSATreeSubjectArtifact { return v.allSLSATree.Subject }

// GetSlsa returns NodesNodesHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSLSA) GetSlsa() allSLSATreeSlsaSLSA { return v.allSLSATree.Slsa }

func (v *NodesNodesHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject allSLSATreeSubjectArtifact `json:"subject"`

	Slsa allSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *NodesNodesHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHasSLSA) __premarshalJSON() (*__premarshalNodesNodesHasSLSA, error) {
	var retval __premarshalNodesNodesHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.allSLSATree.Id
	retval.Subject = v.allSLSATree.Subject
	retval.Slsa = v.allSLSATree.Slsa
	return &retval, nil
}

// NodesNodesHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type NodesNodesHasSourceAt struct {
	Typename       *string `json:"__typename"`
	allHasSourceAt `json:"-"`
}

// GetTypename returns NodesNodesHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetId() string { return v.allHasSourceAt.Id }

// GetJustification returns NodesNodesHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetJustification() string { return v.allHasSourceAt.Justification }

// GetKnownSince returns NodesNodesHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetKnownSince() time.Time { return v.allHasSourceAt.KnownSince }

// GetPackage returns NodesNodesHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetPackage() allHasSourceAtPackage { return v.allHasSourceAt.Package }

// GetSource returns NodesNodesHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetSource() allHasSourceAtSource { return v.allHasSourceAt.Source }

// GetOrigin returns NodesNodesHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetOrigin() string { return v.allHasSourceAt.Origin }

// GetCollector returns NodesNodesHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesHasSourceAt) GetCollector() string { return v.allHasSourceAt.Collector }

func (v *NodesNodesHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package allHasSourceAtPackage `json:"package"`

	Source allHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHasSourceAt) __premarshalJSON() (*__premarshalNodesNodesHasSourceAt, error) {
	var retval __premarshalNodesNodesHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.allHasSourceAt.Id
	retval.Justification = v.allHasSourceAt.Justification
	retval.KnownSince = v.allHasSourceAt.KnownSince
	retval.Package = v.allHasSourceAt.Package
	retval.Source = v.allHasSourceAt.Source
	retval.Origin = v.allHasSourceAt.Origin
	retval.Collector = v.allHasSourceAt.Collector
	return &retval, nil
}

// NodesNodesHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type NodesNodesHashEqual struct {
	Typename         *string `json:"__typename"`
	allHashEqualTree `json:"-"`
}

// GetTypename returns NodesNodesHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesHashEqual.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetId() string { return v.allHashEqualTree.Id }

// GetJustification returns NodesNodesHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetJustification() string { return v.allHashEqualTree.Justification }

// GetArtifacts returns NodesNodesHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetArtifacts() []allHashEqualTreeArtifactsArtifact {
	return v.allHashEqualTree.Artifacts
}

// GetOrigin returns NodesNodesHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetOrigin() string { return v.allHashEqualTree.Origin }

// GetCollector returns NodesNodesHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesHashEqual) GetCollector() string { return v.allHashEqualTree.Collector }

func (v *NodesNodesHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []allHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesHashEqual) __premarshalJSON() (*__premarshalNodesNodesHashEqual, error) {
	var retval __premarshalNodesNodesHashEqual

	retval.Typename = v.Typename
	retval.Id = v.allHashEqualTree.Id
	retval.Justification = v.allHashEqualTree.Justification
	retval.Artifacts = v.allHashEqualTree.Artifacts
	retval.Origin = v.allHashEqualTree.Origin
	retval.Collector = v.allHashEqualTree.Collector
	return &retval, nil
}

// NodesNodesIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type NodesNodesIsDependency struct {
	Typename            *string `json:"__typename"`
	allIsDependencyTree `json:"-"`
}

// GetTypename returns NodesNodesIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesIsDependency.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetId() string { return v.allIsDependencyTree.Id }

// GetJustification returns NodesNodesIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetJustification() string {
	return v.allIsDependencyTree.Justification
}

// GetPackage returns NodesNodesIsDependency.Package, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetPackage() allIsDependencyTreePackage {
	return v.allIsDependencyTree.Package
}

// GetDependentPackage returns NodesNodesIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetDependentPackage() allIsDependencyTreeDependentPackage {
	return v.allIsDependencyTree.DependentPackage
}

// GetDependencyType returns NodesNodesIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetDependencyType() DependencyType {
	return v.allIsDependencyTree.DependencyType
}

// GetVersionRange returns NodesNodesIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetVersionRange() string { return v.allIsDependencyTree.VersionRange }

// GetOrigin returns NodesNodesIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetOrigin() string { return v.allIsDependencyTree.Origin }

// GetCollector returns NodesNodesIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesIsDependency) GetCollector() string { return v.allIsDependencyTree.Collector }

func (v *NodesNodesIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package allIsDependencyTreePackage `json:"package"`

	DependentPackage allIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesIsDependency) __premarshalJSON() (*__premarshalNodesNodesIsDependency, error) {
	var retval __premarshalNodesNodesIsDependency

	retval.Typename = v.Typename
	retval.Id = v.allIsDependencyTree.Id
	retval.Justification = v.allIsDependencyTree.Justification
	retval.Package = v.allIsDependencyTree.Package
	retval.DependentPackage = v.allIsDependencyTree.DependentPackage
	retval.DependencyType = v.allIsDependencyTree.DependencyType
	retval.VersionRange = v.allIsDependencyTree.VersionRange
	retval.Origin = v.allIsDependencyTree.Origin
	retval.Collector = v.allIsDependencyTree.Collector
	return &retval, nil
}

// NodesNodesIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type NodesNodesIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns NodesNodesIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns NodesNodesIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns NodesNodesIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns NodesNodesIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetJustification() string {
	return v.AllIsOccurrencesTree.Justification
}

// GetOrigin returns NodesNodesIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns NodesNodesIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesIsOccurrence) GetCollector() string { return v.AllIsOccurrencesTree.Collector }

func (v *NodesNodesIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesIsOccurrence) __premarshalJSON() (*__premarshalNodesNodesIsOccurrence, error) {
	var retval __premarshalNodesNodesIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodesNodesIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// NodesNodesIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type NodesNodesIsVulnerability struct {
	Typename           *string `json:"__typename"`
	allIsVulnerability `json:"-"`
}

// GetTypename returns NodesNodesIsVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetId() string { return v.allIsVulnerability.Id }

// GetOsv returns NodesNodesIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetOsv() allIsVulnerabilityOsvOSV {
	return v.allIsVulnerability.Osv
}

// GetVulnerability returns NodesNodesIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetVulnerability() allIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.allIsVulnerability.Vulnerability
}

// GetJustification returns NodesNodesIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetJustification() string {
	return v.allIsVulnerability.Justification
}

// GetOrigin returns NodesNodesIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetOrigin() string { return v.allIsVulnerability.Origin }

// GetCollector returns NodesNodesIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesIsVulnerability) GetCollector() string { return v.allIsVulnerability.Collector }

func (v *NodesNodesIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesIsVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Osv allIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesIsVulnerability) __premarshalJSON() (*__premarshalNodesNodesIsVulnerability, error) {
	var retval __premarshalNodesNodesIsVulnerability

	retval.Typename = v.Typename
	retval.Id = v.allIsVulnerability.Id
	retval.Osv = v.allIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.allIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalallIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal NodesNodesIsVulnerability.allIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.allIsVulnerability.Justification
	retval.Origin = v.allIsVulnerability.Origin
	retval.Collector = v.allIsVulnerability.Collector
	return &retval, nil
}

// NodesNodesNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type NodesNodesNoVuln struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns NodesNodesNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesNoVuln) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesNoVuln.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesNoVuln) GetId() string { return v.Id }

// NodesNodesNode includes the requested fields of the GraphQL interface Node.
//
// NodesNodesNode is implemented by the following types:
// NodesNodesPackage
// NodesNodesSource
// NodesNodesArtifact
// NodesNodesBuilder
// NodesNodesOSV
// NodesNodesCVE
// NodesNodesGHSA
// NodesNodesNoVuln
// NodesNodesIsOccurrence
// NodesNodesIsDependency
// NodesNodesIsVulnerability
// NodesNodesCertifyVEXStatement
// NodesNodesHashEqual
// NodesNodesCertifyBad
// NodesNodesCertifyGood
// NodesNodesPkgEqual
// NodesNodesCertifyScorecard
// NodesNodesCertifyVuln
// NodesNodesHasSourceAt
// NodesNodesHasSBOM
// NodesNodesHasSLSA
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type NodesNodesNode interface {
	implementsGraphQLInterfaceNodesNodesNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *NodesNodesPackage) implementsGraphQLInterfaceNodesNodesNode()             {}
func (v *NodesNodesSource) implementsGraphQLInterfaceNodesNodesNode()              {}
func (v *NodesNodesArtifact) implementsGraphQLInterfaceNodesNodesNode()            {}
func (v *NodesNodesBuilder) implementsGraphQLInterfaceNodesNodesNode()             {}
func (v *NodesNodesOSV) implementsGraphQLInterfaceNodesNodesNode()                 {}
func (v *NodesNodesCVE) implementsGraphQLInterfaceNodesNodesNode()                 {}
func (v *NodesNodesGHSA) implementsGraphQLInterfaceNodesNodesNode()                {}
func (v *NodesNodesNoVuln) implementsGraphQLInterfaceNodesNodesNode()              {}
func (v *NodesNodesIsOccurrence) implementsGraphQLInterfaceNodesNodesNode()        {}
func (v *NodesNodesIsDependency) implementsGraphQLInterfaceNodesNodesNode()        {}
func (v *NodesNodesIsVulnerability) implementsGraphQLInterfaceNodesNodesNode()     {}
func (v *NodesNodesCertifyVEXStatement) implementsGraphQLInterfaceNodesNodesNode() {}
func (v *NodesNodesHashEqual) implementsGraphQLInterfaceNodesNodesNode()           {}
func (v *NodesNodesCertifyBad) implementsGraphQLInterfaceNodesNodesNode()          {}
func (v *NodesNodesCertifyGood) implementsGraphQLInterfaceNodesNodesNode()         {}
func (v *NodesNodesPkgEqual) implementsGraphQLInterfaceNodesNodesNode()            {}
func (v *NodesNodesCertifyScorecard) implementsGraphQLInterfaceNodesNodesNode()    {}
func (v *NodesNodesCertifyVuln) implementsGraphQLInterfaceNodesNodesNode()         {}
func (v *NodesNodesHasSourceAt) implementsGraphQLInterfaceNodesNodesNode()         {}
func (v *NodesNodesHasSBOM) implementsGraphQLInterfaceNodesNodesNode()             {}
func (v *NodesNodesHasSLSA) implementsGraphQLInterfaceNodesNodesNode()             {}

func __unmarshalNodesNodesNode(b []byte, v *NodesNodesNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(NodesNodesPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(NodesNodesSource)
		return json.Unmarshal(b, *v)
	case "Artifact":
		*v = new(NodesNodesArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(NodesNodesBuilder)
		return json.Unmarshal(b, *v)
	case "OSV":
		*v = new(NodesNodesOSV)
		return json.Unmarshal(b, *v)
	case "CVE":
		*v = new(NodesNodesCVE)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(NodesNodesGHSA)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(NodesNodesNoVuln)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(NodesNodesIsOccurrence)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(NodesNodesIsDependency)
		return json.Unmarshal(b, *v)
	case "IsVulnerability":
		*v = new(NodesNodesIsVulnerability)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(NodesNodesCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(NodesNodesHashEqual)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(NodesNodesCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(NodesNodesCertifyGood)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(NodesNodesPkgEqual)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(NodesNodesCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(NodesNodesCertifyVuln)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(NodesNodesHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(NodesNodesHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(NodesNodesHasSLSA)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NodesNodesNode: "%v"`, tn.TypeName)
	}
}

func __marshalNodesNodesNode(v *NodesNodesNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NodesNodesPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*NodesNodesNoVuln
		}{typename, v}
		return json.Marshal(result)
	case *NodesNodesIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesIsVulnerability:
		typename = "IsVulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesIsVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesPkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesPkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *NodesNodesHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalNodesNodesHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NodesNodesNode: "%T"`, v)
	}
}

// NodesNodesOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type NodesNodesOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns NodesNodesOSV.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesOSV) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesOSV.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns NodesNodesOSV.OsvId, and is useful for accessing the field via an interface.
func (v *NodesNodesOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *NodesNodesOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *NodesNodesOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesOSV) __premarshalJSON() (*__premarshalNodesNodesOSV, error) {
	var retval __premarshalNodesNodesOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// NodesNodesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type NodesNodesPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns NodesNodesPackage.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesPackage.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns NodesNodesPackage.Type, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns NodesNodesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *NodesNodesPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *NodesNodesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *NodesNodesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesPackage) __premarshalJSON() (*__premarshalNodesNodesPackage, error) {
	var retval __premarshalNodesNodesPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// NodesNodesPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type NodesNodesPkgEqual struct {
	Typename    *string `json:"__typename"`
	allPkgEqual `json:"-"`
}

// GetTypename returns NodesNodesPkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetId() string { return v.allPkgEqual.Id }

// GetJustification returns NodesNodesPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetJustification() string { return v.allPkgEqual.Justification }

// GetPackages returns NodesNodesPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetPackages() []allPkgEqualPackagesPackage {
	return v.allPkgEqual.Packages
}

// GetOrigin returns NodesNodesPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetOrigin() string { return v.allPkgEqual.Origin }

// GetCollector returns NodesNodesPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *NodesNodesPkgEqual) GetCollector() string { return v.allPkgEqual.Collector }

func (v *NodesNodesPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesPkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []allPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *NodesNodesPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesPkgEqual) __premarshalJSON() (*__premarshalNodesNodesPkgEqual, error) {
	var retval __premarshalNodesNodesPkgEqual

	retval.Typename = v.Typename
	retval.Id = v.allPkgEqual.Id
	retval.Justification = v.allPkgEqual.Justification
	retval.Packages = v.allPkgEqual.Packages
	retval.Origin = v.allPkgEqual.Origin
	retval.Collector = v.allPkgEqual.Collector
	return &retval, nil
}

// NodesNodesSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type NodesNodesSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns NodesNodesSource.Typename, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetTypename() *string { return v.Typename }

// GetId returns NodesNodesSource.Id, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns NodesNodesSource.Type, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns NodesNodesSource.Namespaces, and is useful for accessing the field via an interface.
func (v *NodesNodesSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *NodesNodesSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesNodesSource
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesNodesSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNodesNodesSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *NodesNodesSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesNodesSource) __premarshalJSON() (*__premarshalNodesNodesSource, error) {
	var retval __premarshalNodesNodesSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// NodesResponse is returned by Nodes on success.
type NodesResponse struct {
	// nodes returns an array of nodes, regardless of type.
	//
	// The input is an array of IDs to retrieve.
	Nodes []NodesNodesNode `json:"-"`
}

// GetNodes returns NodesResponse.Nodes, and is useful for accessing the field via an interface.
func (v *NodesResponse) GetNodes() []NodesNodesNode { return v.Nodes }

func (v *NodesResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NodesResponse
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NodesResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]NodesNodesNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalNodesNodesNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"Unable to unmarshal NodesResponse.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalNodesResponse struct {
	Nodes []json.RawMessage `json:"nodes"`
}

func (v *NodesResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NodesResponse) __premarshalJSON() (*__premarshalNodesResponse, error) {
	var retval __premarshalNodesResponse

	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalNodesNodesNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal NodesResponse.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// OSVInputSpec specifies a OSV vulnerability for mutations.
type OSVInputSpec struct {
	OsvId string `json:"osvId"`
}

// GetOsvId returns OSVInputSpec.OsvId, and is useful for accessing the field via an interface.
func (v *OSVInputSpec) GetOsvId() string { return v.OsvId }

// OSVSpec allows filtering the list of advisories to return in a query.
type OSVSpec struct {
	Id    *string `json:"id"`
	OsvId *string `json:"osvId"`
}

// GetId returns OSVSpec.Id, and is useful for accessing the field via an interface.
func (v *OSVSpec) GetId() *string { return v.Id }

// GetOsvId returns OSVSpec.OsvId, and is useful for accessing the field via an interface.
func (v *OSVSpec) GetOsvId() *string { return v.OsvId }

// OSVsOsvOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type OSVsOsvOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns OSVsOsvOSV.Id, and is useful for accessing the field via an interface.
func (v *OSVsOsvOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns OSVsOsvOSV.OsvId, and is useful for accessing the field via an interface.
func (v *OSVsOsvOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *OSVsOsvOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*OSVsOsvOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.OSVsOsvOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalOSVsOsvOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *OSVsOsvOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *OSVsOsvOSV) __premarshalJSON() (*__premarshalOSVsOsvOSV, error) {
	var retval __premarshalOSVsOsvOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// OSVsResponse is returned by OSVs on success.
type OSVsResponse struct {
	// Returns all OSV vulnerabilities matching a filter.
	Osv []OSVsOsvOSV `json:"osv"`
}

// GetOsv returns OSVsResponse.Osv, and is useful for accessing the field via an interface.
func (v *OSVsResponse) GetOsv() []OSVsOsvOSV { return v.Osv }

// PackageQualifierInputSpec allows specifying package qualifiers in mutations.
type PackageQualifierInputSpec struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns PackageQualifierInputSpec.Key, and is useful for accessing the field via an interface.
func (v *PackageQualifierInputSpec) GetKey() string { return v.Key }

// GetValue returns PackageQualifierInputSpec.Value, and is useful for accessing the field via an interface.
func (v *PackageQualifierInputSpec) GetValue() string { return v.Value }

// PackageQualifierSpec allows filtering package qualifiers in a query.
//
// Keys are mandatory, but values could also be null if we want to match all
// values for a specific key.
//
// NOTE: Before the schema becomes stable, we might change the nulability
// requirements of these fields.
type PackageQualifierSpec struct {
	Key   string  `json:"key"`
	Value *string `json:"value"`
}

// GetKey returns PackageQualifierSpec.Key, and is useful for accessing the field via an interface.
func (v *PackageQualifierSpec) GetKey() string { return v.Key }

// GetValue returns PackageQualifierSpec.Value, and is useful for accessing the field via an interface.
func (v *PackageQualifierSpec) GetValue() *string { return v.Value }

// PackageSourceOrArtifactSpec allows using PackageSourceOrArtifact union as
// input type to be used in read queries.
//
// Exactly one of the value must be set to non-nil.
type PackageSourceOrArtifactSpec struct {
	Package  *PkgSpec      `json:"package"`
	Source   *SourceSpec   `json:"source"`
	Artifact *ArtifactSpec `json:"artifact"`
}

// GetPackage returns PackageSourceOrArtifactSpec.Package, and is useful for accessing the field via an interface.
func (v *PackageSourceOrArtifactSpec) GetPackage() *PkgSpec { return v.Package }

// GetSource returns PackageSourceOrArtifactSpec.Source, and is useful for accessing the field via an interface.
func (v *PackageSourceOrArtifactSpec) GetSource() *SourceSpec { return v.Source }

// GetArtifact returns PackageSourceOrArtifactSpec.Artifact, and is useful for accessing the field via an interface.
func (v *PackageSourceOrArtifactSpec) GetArtifact() *ArtifactSpec { return v.Artifact }

// PackagesPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PackagesPackagesPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns PackagesPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *PackagesPackagesPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns PackagesPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *PackagesPackagesPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns PackagesPackagesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PackagesPackagesPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PackagesPackagesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PackagesPackagesPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PackagesPackagesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPackagesPackagesPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PackagesPackagesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PackagesPackagesPackage) __premarshalJSON() (*__premarshalPackagesPackagesPackage, error) {
	var retval __premarshalPackagesPackagesPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PackagesResponse is returned by Packages on success.
type PackagesResponse struct {
	// Returns all packages matching a filter.
	Packages []PackagesPackagesPackage `json:"packages"`
}

// GetPackages returns PackagesResponse.Packages, and is useful for accessing the field via an interface.
func (v *PackagesResponse) GetPackages() []PackagesPackagesPackage { return v.Packages }

// PathPathArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type PathPathArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns PathPathArtifact.Typename, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetTypename() *string { return v.Typename }

// GetId returns PathPathArtifact.Id, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns PathPathArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns PathPathArtifact.Digest, and is useful for accessing the field via an interface.
func (v *PathPathArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *PathPathArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *PathPathArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathArtifact) __premarshalJSON() (*__premarshalPathPathArtifact, error) {
	var retval __premarshalPathPathArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// PathPathBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type PathPathBuilder struct {
	Typename       *string `json:"__typename"`
	allBuilderTree `json:"-"`
}

// GetTypename returns PathPathBuilder.Typename, and is useful for accessing the field via an interface.
func (v *PathPathBuilder) GetTypename() *string { return v.Typename }

// GetId returns PathPathBuilder.Id, and is useful for accessing the field via an interface.
func (v *PathPathBuilder) GetId() string { return v.allBuilderTree.Id }

// GetUri returns PathPathBuilder.Uri, and is useful for accessing the field via an interface.
func (v *PathPathBuilder) GetUri() string { return v.allBuilderTree.Uri }

func (v *PathPathBuilder) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathBuilder
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathBuilder = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allBuilderTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathBuilder struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Uri string `json:"uri"`
}

func (v *PathPathBuilder) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathBuilder) __premarshalJSON() (*__premarshalPathPathBuilder, error) {
	var retval __premarshalPathPathBuilder

	retval.Typename = v.Typename
	retval.Id = v.allBuilderTree.Id
	retval.Uri = v.allBuilderTree.Uri
	return &retval, nil
}

// PathPathCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type PathPathCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns PathPathCVE.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCVE) GetTypename() *string { return v.Typename }

// GetId returns PathPathCVE.Id, and is useful for accessing the field via an interface.
func (v *PathPathCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns PathPathCVE.Year, and is useful for accessing the field via an interface.
func (v *PathPathCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns PathPathCVE.CveId, and is useful for accessing the field via an interface.
func (v *PathPathCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *PathPathCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *PathPathCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCVE) __premarshalJSON() (*__premarshalPathPathCVE, error) {
	var retval __premarshalPathPathCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// PathPathCertifyBad includes the requested fields of the GraphQL type CertifyBad.
// The GraphQL type's documentation follows.
//
// CertifyBad is an attestation that a package, source, or artifact is considered
// bad.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type PathPathCertifyBad struct {
	Typename      *string `json:"__typename"`
	AllCertifyBad `json:"-"`
}

// GetTypename returns PathPathCertifyBad.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyBad.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetId() string { return v.AllCertifyBad.Id }

// GetJustification returns PathPathCertifyBad.Justification, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetJustification() string { return v.AllCertifyBad.Justification }

// GetSubject returns PathPathCertifyBad.Subject, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetSubject() AllCertifyBadSubjectPackageSourceOrArtifact {
	return v.AllCertifyBad.Subject
}

// GetOrigin returns PathPathCertifyBad.Origin, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetOrigin() string { return v.AllCertifyBad.Origin }

// GetCollector returns PathPathCertifyBad.Collector, and is useful for accessing the field via an interface.
func (v *PathPathCertifyBad) GetCollector() string { return v.AllCertifyBad.Collector }

func (v *PathPathCertifyBad) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyBad
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyBad = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyBad)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyBad struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathCertifyBad) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyBad) __premarshalJSON() (*__premarshalPathPathCertifyBad, error) {
	var retval __premarshalPathPathCertifyBad

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyBad.Id
	retval.Justification = v.AllCertifyBad.Justification
	{

		dst := &retval.Subject
		src := v.AllCertifyBad.Subject
		var err error
		*dst, err = __marshalAllCertifyBadSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PathPathCertifyBad.AllCertifyBad.Subject: %w", err)
		}
	}
	retval.Origin = v.AllCertifyBad.Origin
	retval.Collector = v.AllCertifyBad.Collector
	return &retval, nil
}

// PathPathCertifyGood includes the requested fields of the GraphQL type CertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type PathPathCertifyGood struct {
	Typename       *string `json:"__typename"`
	allCertifyGood `json:"-"`
}

// GetTypename returns PathPathCertifyGood.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetId() string { return v.allCertifyGood.Id }

// GetJustification returns PathPathCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetJustification() string { return v.allCertifyGood.Justification }

// GetSubject returns PathPathCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetSubject() allCertifyGoodSubjectPackageSourceOrArtifact {
	return v.allCertifyGood.Subject
}

// GetOrigin returns PathPathCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetOrigin() string { return v.allCertifyGood.Origin }

// GetCollector returns PathPathCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *PathPathCertifyGood) GetCollector() string { return v.allCertifyGood.Collector }

func (v *PathPathCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyGood
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyGood)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyGood struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyGood) __premarshalJSON() (*__premarshalPathPathCertifyGood, error) {
	var retval __premarshalPathPathCertifyGood

	retval.Typename = v.Typename
	retval.Id = v.allCertifyGood.Id
	retval.Justification = v.allCertifyGood.Justification
	{

		dst := &retval.Subject
		src := v.allCertifyGood.Subject
		var err error
		*dst, err = __marshalallCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PathPathCertifyGood.allCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.allCertifyGood.Origin
	retval.Collector = v.allCertifyGood.Collector
	return &retval, nil
}

// PathPathCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type PathPathCertifyScorecard struct {
	Typename            *string `json:"__typename"`
	AllCertifyScorecard `json:"-"`
}

// GetTypename returns PathPathCertifyScorecard.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns PathPathCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns PathPathCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *PathPathCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *PathPathCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyScorecard struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *PathPathCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyScorecard) __premarshalJSON() (*__premarshalPathPathCertifyScorecard, error) {
	var retval __premarshalPathPathCertifyScorecard

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// PathPathCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type PathPathCertifyVEXStatement struct {
	Typename               *string `json:"__typename"`
	allCertifyVEXStatement `json:"-"`
}

// GetTypename returns PathPathCertifyVEXStatement.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetId() string { return v.allCertifyVEXStatement.Id }

// GetSubject returns PathPathCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.allCertifyVEXStatement.Subject
}

// GetVulnerability returns PathPathCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.allCertifyVEXStatement.Vulnerability
}

// GetStatus returns PathPathCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetStatus() VexStatus { return v.allCertifyVEXStatement.Status }

// GetVexJustification returns PathPathCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.allCertifyVEXStatement.VexJustification
}

// GetStatement returns PathPathCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetStatement() string {
	return v.allCertifyVEXStatement.Statement
}

// GetStatusNotes returns PathPathCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetStatusNotes() string {
	return v.allCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns PathPathCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetKnownSince() time.Time {
	return v.allCertifyVEXStatement.KnownSince
}

// GetOrigin returns PathPathCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetOrigin() string { return v.allCertifyVEXStatement.Origin }

// GetCollector returns PathPathCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVEXStatement) GetCollector() string {
	return v.allCertifyVEXStatement.Collector
}

func (v *PathPathCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyVEXStatement struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyVEXStatement) __premarshalJSON() (*__premarshalPathPathCertifyVEXStatement, error) {
	var retval __premarshalPathPathCertifyVEXStatement

	retval.Typename = v.Typename
	retval.Id = v.allCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.allCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PathPathCertifyVEXStatement.allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.allCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PathPathCertifyVEXStatement.allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.allCertifyVEXStatement.Status
	retval.VexJustification = v.allCertifyVEXStatement.VexJustification
	retval.Statement = v.allCertifyVEXStatement.Statement
	retval.StatusNotes = v.allCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.allCertifyVEXStatement.KnownSince
	retval.Origin = v.allCertifyVEXStatement.Origin
	retval.Collector = v.allCertifyVEXStatement.Collector
	return &retval, nil
}

// PathPathCertifyVuln includes the requested fields of the GraphQL type CertifyVuln.
// The GraphQL type's documentation follows.
//
// CertifyVuln is an attestation to attach vulnerability information to a package.
//
// This information is obtained via a scanner. If there is no vulnerability
// detected (no OSV, CVE, or GHSA), we attach the special NoVuln node.
type PathPathCertifyVuln struct {
	Typename       *string `json:"__typename"`
	AllCertifyVuln `json:"-"`
}

// GetTypename returns PathPathCertifyVuln.Typename, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetTypename() *string { return v.Typename }

// GetId returns PathPathCertifyVuln.Id, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetId() string { return v.AllCertifyVuln.Id }

// GetPackage returns PathPathCertifyVuln.Package, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetPackage() AllCertifyVulnPackage { return v.AllCertifyVuln.Package }

// GetVulnerability returns PathPathCertifyVuln.Vulnerability, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetVulnerability() AllCertifyVulnVulnerability {
	return v.AllCertifyVuln.Vulnerability
}

// GetMetadata returns PathPathCertifyVuln.Metadata, and is useful for accessing the field via an interface.
func (v *PathPathCertifyVuln) GetMetadata() AllCertifyVulnMetadataVulnerabilityMetaData {
	return v.AllCertifyVuln.Metadata
}

func (v *PathPathCertifyVuln) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathCertifyVuln
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathCertifyVuln = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyVuln)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathCertifyVuln struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Package AllCertifyVulnPackage `json:"package"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Metadata AllCertifyVulnMetadataVulnerabilityMetaData `json:"metadata"`
}

func (v *PathPathCertifyVuln) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathCertifyVuln) __premarshalJSON() (*__premarshalPathPathCertifyVuln, error) {
	var retval __premarshalPathPathCertifyVuln

	retval.Typename = v.Typename
	retval.Id = v.AllCertifyVuln.Id
	retval.Package = v.AllCertifyVuln.Package
	{

		dst := &retval.Vulnerability
		src := v.AllCertifyVuln.Vulnerability
		var err error
		*dst, err = __marshalAllCertifyVulnVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PathPathCertifyVuln.AllCertifyVuln.Vulnerability: %w", err)
		}
	}
	retval.Metadata = v.AllCertifyVuln.Metadata
	return &retval, nil
}

// PathPathGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type PathPathGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns PathPathGHSA.Typename, and is useful for accessing the field via an interface.
func (v *PathPathGHSA) GetTypename() *string { return v.Typename }

// GetId returns PathPathGHSA.Id, and is useful for accessing the field via an interface.
func (v *PathPathGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns PathPathGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *PathPathGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *PathPathGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *PathPathGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathGHSA) __premarshalJSON() (*__premarshalPathPathGHSA, error) {
	var retval __premarshalPathPathGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// PathPathHasSBOM includes the requested fields of the GraphQL type HasSBOM.
type PathPathHasSBOM struct {
	Typename       *string `json:"__typename"`
	allHasSBOMTree `json:"-"`
}

// GetTypename returns PathPathHasSBOM.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetTypename() *string { return v.Typename }

// GetId returns PathPathHasSBOM.Id, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetId() string { return v.allHasSBOMTree.Id }

// GetSubject returns PathPathHasSBOM.Subject, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetSubject() allHasSBOMTreeSubjectPackageOrArtifact {
	return v.allHasSBOMTree.Subject
}

// GetUri returns PathPathHasSBOM.Uri, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetUri() string { return v.allHasSBOMTree.Uri }

// GetAlgorithm returns PathPathHasSBOM.Algorithm, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetAlgorithm() string { return v.allHasSBOMTree.Algorithm }

// GetDigest returns PathPathHasSBOM.Digest, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetDigest() string { return v.allHasSBOMTree.Digest }

// GetDownloadLocation returns PathPathHasSBOM.DownloadLocation, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetDownloadLocation() string { return v.allHasSBOMTree.DownloadLocation }

// GetAnnotations returns PathPathHasSBOM.Annotations, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetAnnotations() []allHasSBOMTreeAnnotationsAnnotation {
	return v.allHasSBOMTree.Annotations
}

// GetOrigin returns PathPathHasSBOM.Origin, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetOrigin() string { return v.allHasSBOMTree.Origin }

// GetCollector returns PathPathHasSBOM.Collector, and is useful for accessing the field via an interface.
func (v *PathPathHasSBOM) GetCollector() string { return v.allHasSBOMTree.Collector }

func (v *PathPathHasSBOM) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHasSBOM
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHasSBOM = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSBOMTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHasSBOM struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Annotations []allHasSBOMTreeAnnotationsAnnotation `json:"annotations"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathHasSBOM) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHasSBOM) __premarshalJSON() (*__premarshalPathPathHasSBOM, error) {
	var retval __premarshalPathPathHasSBOM

	retval.Typename = v.Typename
	retval.Id = v.allHasSBOMTree.Id
	{

		dst := &retval.Subject
		src := v.allHasSBOMTree.Subject
		var err error
		*dst, err = __marshalallHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PathPathHasSBOM.allHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.allHasSBOMTree.Uri
	retval.Algorithm = v.allHasSBOMTree.Algorithm
	retval.Digest = v.allHasSBOMTree.Digest
	retval.DownloadLocation = v.allHasSBOMTree.DownloadLocation
	retval.Annotations = v.allHasSBOMTree.Annotations
	retval.Origin = v.allHasSBOMTree.Origin
	retval.Collector = v.allHasSBOMTree.Collector
	return &retval, nil
}

// PathPathHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type PathPathHasSLSA struct {
	Typename    *string `json:"__typename"`
	allSLSATree `json:"-"`
}

// GetTypename returns PathPathHasSLSA.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetTypename() *string { return v.Typename }

// GetId returns PathPathHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetId() string { return v.allSLSATree.Id }

// GetSubject returns PathPathHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetSubject() allSLSATreeSubjectArtifact { return v.allSLSATree.Subject }

// GetSlsa returns PathPathHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *PathPathHasSLSA) GetSlsa() allSLSATreeSlsaSLSA { return v.allSLSATree.Slsa }

func (v *PathPathHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHasSLSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject allSLSATreeSubjectArtifact `json:"subject"`

	Slsa allSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *PathPathHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHasSLSA) __premarshalJSON() (*__premarshalPathPathHasSLSA, error) {
	var retval __premarshalPathPathHasSLSA

	retval.Typename = v.Typename
	retval.Id = v.allSLSATree.Id
	retval.Subject = v.allSLSATree.Subject
	retval.Slsa = v.allSLSATree.Slsa
	return &retval, nil
}

// PathPathHasSourceAt includes the requested fields of the GraphQL type HasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type PathPathHasSourceAt struct {
	Typename       *string `json:"__typename"`
	allHasSourceAt `json:"-"`
}

// GetTypename returns PathPathHasSourceAt.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetTypename() *string { return v.Typename }

// GetId returns PathPathHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetId() string { return v.allHasSourceAt.Id }

// GetJustification returns PathPathHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetJustification() string { return v.allHasSourceAt.Justification }

// GetKnownSince returns PathPathHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetKnownSince() time.Time { return v.allHasSourceAt.KnownSince }

// GetPackage returns PathPathHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetPackage() allHasSourceAtPackage { return v.allHasSourceAt.Package }

// GetSource returns PathPathHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetSource() allHasSourceAtSource { return v.allHasSourceAt.Source }

// GetOrigin returns PathPathHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetOrigin() string { return v.allHasSourceAt.Origin }

// GetCollector returns PathPathHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *PathPathHasSourceAt) GetCollector() string { return v.allHasSourceAt.Collector }

func (v *PathPathHasSourceAt) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHasSourceAt
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHasSourceAt = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHasSourceAt)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHasSourceAt struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	KnownSince time.Time `json:"knownSince"`

	Package allHasSourceAtPackage `json:"package"`

	Source allHasSourceAtSource `json:"source"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathHasSourceAt) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHasSourceAt) __premarshalJSON() (*__premarshalPathPathHasSourceAt, error) {
	var retval __premarshalPathPathHasSourceAt

	retval.Typename = v.Typename
	retval.Id = v.allHasSourceAt.Id
	retval.Justification = v.allHasSourceAt.Justification
	retval.KnownSince = v.allHasSourceAt.KnownSince
	retval.Package = v.allHasSourceAt.Package
	retval.Source = v.allHasSourceAt.Source
	retval.Origin = v.allHasSourceAt.Origin
	retval.Collector = v.allHasSourceAt.Collector
	return &retval, nil
}

// PathPathHashEqual includes the requested fields of the GraphQL type HashEqual.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type PathPathHashEqual struct {
	Typename         *string `json:"__typename"`
	allHashEqualTree `json:"-"`
}

// GetTypename returns PathPathHashEqual.Typename, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetTypename() *string { return v.Typename }

// GetId returns PathPathHashEqual.Id, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetId() string { return v.allHashEqualTree.Id }

// GetJustification returns PathPathHashEqual.Justification, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetJustification() string { return v.allHashEqualTree.Justification }

// GetArtifacts returns PathPathHashEqual.Artifacts, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetArtifacts() []allHashEqualTreeArtifactsArtifact {
	return v.allHashEqualTree.Artifacts
}

// GetOrigin returns PathPathHashEqual.Origin, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetOrigin() string { return v.allHashEqualTree.Origin }

// GetCollector returns PathPathHashEqual.Collector, and is useful for accessing the field via an interface.
func (v *PathPathHashEqual) GetCollector() string { return v.allHashEqualTree.Collector }

func (v *PathPathHashEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathHashEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathHashEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allHashEqualTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathHashEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Artifacts []allHashEqualTreeArtifactsArtifact `json:"artifacts"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathHashEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathHashEqual) __premarshalJSON() (*__premarshalPathPathHashEqual, error) {
	var retval __premarshalPathPathHashEqual

	retval.Typename = v.Typename
	retval.Id = v.allHashEqualTree.Id
	retval.Justification = v.allHashEqualTree.Justification
	retval.Artifacts = v.allHashEqualTree.Artifacts
	retval.Origin = v.allHashEqualTree.Origin
	retval.Collector = v.allHashEqualTree.Collector
	return &retval, nil
}

// PathPathIsDependency includes the requested fields of the GraphQL type IsDependency.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type PathPathIsDependency struct {
	Typename            *string `json:"__typename"`
	allIsDependencyTree `json:"-"`
}

// GetTypename returns PathPathIsDependency.Typename, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetTypename() *string { return v.Typename }

// GetId returns PathPathIsDependency.Id, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetId() string { return v.allIsDependencyTree.Id }

// GetJustification returns PathPathIsDependency.Justification, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetJustification() string { return v.allIsDependencyTree.Justification }

// GetPackage returns PathPathIsDependency.Package, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetPackage() allIsDependencyTreePackage {
	return v.allIsDependencyTree.Package
}

// GetDependentPackage returns PathPathIsDependency.DependentPackage, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetDependentPackage() allIsDependencyTreeDependentPackage {
	return v.allIsDependencyTree.DependentPackage
}

// GetDependencyType returns PathPathIsDependency.DependencyType, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetDependencyType() DependencyType {
	return v.allIsDependencyTree.DependencyType
}

// GetVersionRange returns PathPathIsDependency.VersionRange, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetVersionRange() string { return v.allIsDependencyTree.VersionRange }

// GetOrigin returns PathPathIsDependency.Origin, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetOrigin() string { return v.allIsDependencyTree.Origin }

// GetCollector returns PathPathIsDependency.Collector, and is useful for accessing the field via an interface.
func (v *PathPathIsDependency) GetCollector() string { return v.allIsDependencyTree.Collector }

func (v *PathPathIsDependency) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathIsDependency
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathIsDependency = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsDependencyTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathIsDependency struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Package allIsDependencyTreePackage `json:"package"`

	DependentPackage allIsDependencyTreeDependentPackage `json:"dependentPackage"`

	DependencyType DependencyType `json:"dependencyType"`

	VersionRange string `json:"versionRange"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathIsDependency) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathIsDependency) __premarshalJSON() (*__premarshalPathPathIsDependency, error) {
	var retval __premarshalPathPathIsDependency

	retval.Typename = v.Typename
	retval.Id = v.allIsDependencyTree.Id
	retval.Justification = v.allIsDependencyTree.Justification
	retval.Package = v.allIsDependencyTree.Package
	retval.DependentPackage = v.allIsDependencyTree.DependentPackage
	retval.DependencyType = v.allIsDependencyTree.DependencyType
	retval.VersionRange = v.allIsDependencyTree.VersionRange
	retval.Origin = v.allIsDependencyTree.Origin
	retval.Collector = v.allIsDependencyTree.Collector
	return &retval, nil
}

// PathPathIsOccurrence includes the requested fields of the GraphQL type IsOccurrence.
// The GraphQL type's documentation follows.
//
// IsOccurrence is an attestation to link an artifact to a package or source.
//
// Attestation must occur at the PackageVersion or at the SourceName.
type PathPathIsOccurrence struct {
	Typename             *string `json:"__typename"`
	AllIsOccurrencesTree `json:"-"`
}

// GetTypename returns PathPathIsOccurrence.Typename, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetTypename() *string { return v.Typename }

// GetId returns PathPathIsOccurrence.Id, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetId() string { return v.AllIsOccurrencesTree.Id }

// GetSubject returns PathPathIsOccurrence.Subject, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetSubject() AllIsOccurrencesTreeSubjectPackageOrSource {
	return v.AllIsOccurrencesTree.Subject
}

// GetArtifact returns PathPathIsOccurrence.Artifact, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetArtifact() AllIsOccurrencesTreeArtifact {
	return v.AllIsOccurrencesTree.Artifact
}

// GetJustification returns PathPathIsOccurrence.Justification, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetJustification() string { return v.AllIsOccurrencesTree.Justification }

// GetOrigin returns PathPathIsOccurrence.Origin, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetOrigin() string { return v.AllIsOccurrencesTree.Origin }

// GetCollector returns PathPathIsOccurrence.Collector, and is useful for accessing the field via an interface.
func (v *PathPathIsOccurrence) GetCollector() string { return v.AllIsOccurrencesTree.Collector }

func (v *PathPathIsOccurrence) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathIsOccurrence
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathIsOccurrence = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllIsOccurrencesTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathIsOccurrence struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Artifact AllIsOccurrencesTreeArtifact `json:"artifact"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathIsOccurrence) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathIsOccurrence) __premarshalJSON() (*__premarshalPathPathIsOccurrence, error) {
	var retval __premarshalPathPathIsOccurrence

	retval.Typename = v.Typename
	retval.Id = v.AllIsOccurrencesTree.Id
	{

		dst := &retval.Subject
		src := v.AllIsOccurrencesTree.Subject
		var err error
		*dst, err = __marshalAllIsOccurrencesTreeSubjectPackageOrSource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PathPathIsOccurrence.AllIsOccurrencesTree.Subject: %w", err)
		}
	}
	retval.Artifact = v.AllIsOccurrencesTree.Artifact
	retval.Justification = v.AllIsOccurrencesTree.Justification
	retval.Origin = v.AllIsOccurrencesTree.Origin
	retval.Collector = v.AllIsOccurrencesTree.Collector
	return &retval, nil
}

// PathPathIsVulnerability includes the requested fields of the GraphQL type IsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type PathPathIsVulnerability struct {
	Typename           *string `json:"__typename"`
	allIsVulnerability `json:"-"`
}

// GetTypename returns PathPathIsVulnerability.Typename, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetTypename() *string { return v.Typename }

// GetId returns PathPathIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetId() string { return v.allIsVulnerability.Id }

// GetOsv returns PathPathIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetOsv() allIsVulnerabilityOsvOSV { return v.allIsVulnerability.Osv }

// GetVulnerability returns PathPathIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetVulnerability() allIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.allIsVulnerability.Vulnerability
}

// GetJustification returns PathPathIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetJustification() string {
	return v.allIsVulnerability.Justification
}

// GetOrigin returns PathPathIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetOrigin() string { return v.allIsVulnerability.Origin }

// GetCollector returns PathPathIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *PathPathIsVulnerability) GetCollector() string { return v.allIsVulnerability.Collector }

func (v *PathPathIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathIsVulnerability
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allIsVulnerability)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathIsVulnerability struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Osv allIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathIsVulnerability) __premarshalJSON() (*__premarshalPathPathIsVulnerability, error) {
	var retval __premarshalPathPathIsVulnerability

	retval.Typename = v.Typename
	retval.Id = v.allIsVulnerability.Id
	retval.Osv = v.allIsVulnerability.Osv
	{

		dst := &retval.Vulnerability
		src := v.allIsVulnerability.Vulnerability
		var err error
		*dst, err = __marshalallIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PathPathIsVulnerability.allIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.allIsVulnerability.Justification
	retval.Origin = v.allIsVulnerability.Origin
	retval.Collector = v.allIsVulnerability.Collector
	return &retval, nil
}

// PathPathNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type PathPathNoVuln struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
}

// GetTypename returns PathPathNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *PathPathNoVuln) GetTypename() *string { return v.Typename }

// GetId returns PathPathNoVuln.Id, and is useful for accessing the field via an interface.
func (v *PathPathNoVuln) GetId() string { return v.Id }

// PathPathNode includes the requested fields of the GraphQL interface Node.
//
// PathPathNode is implemented by the following types:
// PathPathPackage
// PathPathSource
// PathPathArtifact
// PathPathBuilder
// PathPathOSV
// PathPathCVE
// PathPathGHSA
// PathPathNoVuln
// PathPathIsOccurrence
// PathPathIsDependency
// PathPathIsVulnerability
// PathPathCertifyVEXStatement
// PathPathHashEqual
// PathPathCertifyBad
// PathPathCertifyGood
// PathPathPkgEqual
// PathPathCertifyScorecard
// PathPathCertifyVuln
// PathPathHasSourceAt
// PathPathHasSBOM
// PathPathHasSLSA
// The GraphQL type's documentation follows.
//
// Node is a union type of all the possible nodes.
//
// It encapsulates the software tree nodes along with the evidence nodes. In a
// path query, all connecting evidence nodes along with their intermediate subject
// nodes need to be returned in order to create a complete graph.
type PathPathNode interface {
	implementsGraphQLInterfacePathPathNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *PathPathPackage) implementsGraphQLInterfacePathPathNode()             {}
func (v *PathPathSource) implementsGraphQLInterfacePathPathNode()              {}
func (v *PathPathArtifact) implementsGraphQLInterfacePathPathNode()            {}
func (v *PathPathBuilder) implementsGraphQLInterfacePathPathNode()             {}
func (v *PathPathOSV) implementsGraphQLInterfacePathPathNode()                 {}
func (v *PathPathCVE) implementsGraphQLInterfacePathPathNode()                 {}
func (v *PathPathGHSA) implementsGraphQLInterfacePathPathNode()                {}
func (v *PathPathNoVuln) implementsGraphQLInterfacePathPathNode()              {}
func (v *PathPathIsOccurrence) implementsGraphQLInterfacePathPathNode()        {}
func (v *PathPathIsDependency) implementsGraphQLInterfacePathPathNode()        {}
func (v *PathPathIsVulnerability) implementsGraphQLInterfacePathPathNode()     {}
func (v *PathPathCertifyVEXStatement) implementsGraphQLInterfacePathPathNode() {}
func (v *PathPathHashEqual) implementsGraphQLInterfacePathPathNode()           {}
func (v *PathPathCertifyBad) implementsGraphQLInterfacePathPathNode()          {}
func (v *PathPathCertifyGood) implementsGraphQLInterfacePathPathNode()         {}
func (v *PathPathPkgEqual) implementsGraphQLInterfacePathPathNode()            {}
func (v *PathPathCertifyScorecard) implementsGraphQLInterfacePathPathNode()    {}
func (v *PathPathCertifyVuln) implementsGraphQLInterfacePathPathNode()         {}
func (v *PathPathHasSourceAt) implementsGraphQLInterfacePathPathNode()         {}
func (v *PathPathHasSBOM) implementsGraphQLInterfacePathPathNode()             {}
func (v *PathPathHasSLSA) implementsGraphQLInterfacePathPathNode()             {}

func __unmarshalPathPathNode(b []byte, v *PathPathNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(PathPathPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(PathPathSource)
		return json.Unmarshal(b, *v)
	case "Artifact":
		*v = new(PathPathArtifact)
		return json.Unmarshal(b, *v)
	case "Builder":
		*v = new(PathPathBuilder)
		return json.Unmarshal(b, *v)
	case "OSV":
		*v = new(PathPathOSV)
		return json.Unmarshal(b, *v)
	case "CVE":
		*v = new(PathPathCVE)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(PathPathGHSA)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(PathPathNoVuln)
		return json.Unmarshal(b, *v)
	case "IsOccurrence":
		*v = new(PathPathIsOccurrence)
		return json.Unmarshal(b, *v)
	case "IsDependency":
		*v = new(PathPathIsDependency)
		return json.Unmarshal(b, *v)
	case "IsVulnerability":
		*v = new(PathPathIsVulnerability)
		return json.Unmarshal(b, *v)
	case "CertifyVEXStatement":
		*v = new(PathPathCertifyVEXStatement)
		return json.Unmarshal(b, *v)
	case "HashEqual":
		*v = new(PathPathHashEqual)
		return json.Unmarshal(b, *v)
	case "CertifyBad":
		*v = new(PathPathCertifyBad)
		return json.Unmarshal(b, *v)
	case "CertifyGood":
		*v = new(PathPathCertifyGood)
		return json.Unmarshal(b, *v)
	case "PkgEqual":
		*v = new(PathPathPkgEqual)
		return json.Unmarshal(b, *v)
	case "CertifyScorecard":
		*v = new(PathPathCertifyScorecard)
		return json.Unmarshal(b, *v)
	case "CertifyVuln":
		*v = new(PathPathCertifyVuln)
		return json.Unmarshal(b, *v)
	case "HasSourceAt":
		*v = new(PathPathHasSourceAt)
		return json.Unmarshal(b, *v)
	case "HasSBOM":
		*v = new(PathPathHasSBOM)
		return json.Unmarshal(b, *v)
	case "HasSLSA":
		*v = new(PathPathHasSLSA)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for PathPathNode: "%v"`, tn.TypeName)
	}
}

func __marshalPathPathNode(v *PathPathNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *PathPathPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathBuilder:
		typename = "Builder"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathBuilder
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*PathPathNoVuln
		}{typename, v}
		return json.Marshal(result)
	case *PathPathIsOccurrence:
		typename = "IsOccurrence"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathIsOccurrence
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathIsDependency:
		typename = "IsDependency"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathIsDependency
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathIsVulnerability:
		typename = "IsVulnerability"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathIsVulnerability
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyVEXStatement:
		typename = "CertifyVEXStatement"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyVEXStatement
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHashEqual:
		typename = "HashEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHashEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyBad:
		typename = "CertifyBad"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyBad
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyGood:
		typename = "CertifyGood"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyGood
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathPkgEqual:
		typename = "PkgEqual"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathPkgEqual
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyScorecard:
		typename = "CertifyScorecard"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyScorecard
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathCertifyVuln:
		typename = "CertifyVuln"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathCertifyVuln
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHasSourceAt:
		typename = "HasSourceAt"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHasSourceAt
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHasSBOM:
		typename = "HasSBOM"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHasSBOM
		}{typename, premarshaled}
		return json.Marshal(result)
	case *PathPathHasSLSA:
		typename = "HasSLSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalPathPathHasSLSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for PathPathNode: "%T"`, v)
	}
}

// PathPathOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type PathPathOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns PathPathOSV.Typename, and is useful for accessing the field via an interface.
func (v *PathPathOSV) GetTypename() *string { return v.Typename }

// GetId returns PathPathOSV.Id, and is useful for accessing the field via an interface.
func (v *PathPathOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns PathPathOSV.OsvId, and is useful for accessing the field via an interface.
func (v *PathPathOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *PathPathOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *PathPathOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathOSV) __premarshalJSON() (*__premarshalPathPathOSV, error) {
	var retval __premarshalPathPathOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// PathPathPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PathPathPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns PathPathPackage.Typename, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetTypename() *string { return v.Typename }

// GetId returns PathPathPackage.Id, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns PathPathPackage.Type, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns PathPathPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PathPathPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PathPathPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PathPathPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathPackage) __premarshalJSON() (*__premarshalPathPathPackage, error) {
	var retval __premarshalPathPathPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PathPathPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type PathPathPkgEqual struct {
	Typename    *string `json:"__typename"`
	allPkgEqual `json:"-"`
}

// GetTypename returns PathPathPkgEqual.Typename, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetTypename() *string { return v.Typename }

// GetId returns PathPathPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetId() string { return v.allPkgEqual.Id }

// GetJustification returns PathPathPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetJustification() string { return v.allPkgEqual.Justification }

// GetPackages returns PathPathPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetPackages() []allPkgEqualPackagesPackage { return v.allPkgEqual.Packages }

// GetOrigin returns PathPathPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetOrigin() string { return v.allPkgEqual.Origin }

// GetCollector returns PathPathPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *PathPathPkgEqual) GetCollector() string { return v.allPkgEqual.Collector }

func (v *PathPathPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathPkgEqual struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []allPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PathPathPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathPkgEqual) __premarshalJSON() (*__premarshalPathPathPkgEqual, error) {
	var retval __premarshalPathPathPkgEqual

	retval.Typename = v.Typename
	retval.Id = v.allPkgEqual.Id
	retval.Justification = v.allPkgEqual.Justification
	retval.Packages = v.allPkgEqual.Packages
	retval.Origin = v.allPkgEqual.Origin
	retval.Collector = v.allPkgEqual.Collector
	return &retval, nil
}

// PathPathSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type PathPathSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns PathPathSource.Typename, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetTypename() *string { return v.Typename }

// GetId returns PathPathSource.Id, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns PathPathSource.Type, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns PathPathSource.Namespaces, and is useful for accessing the field via an interface.
func (v *PathPathSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *PathPathSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathPathSource
		graphql.NoUnmarshalJSON
	}
	firstPass.PathPathSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPathPathSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *PathPathSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathPathSource) __premarshalJSON() (*__premarshalPathPathSource, error) {
	var retval __premarshalPathPathSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// PathResponse is returned by Path on success.
type PathResponse struct {
	// path query returns a path between subject and target, of a maximum length.
	//
	// Since we want to uniquely identify endpoints, nodes must be specified by
	// valid IDs only (instead of using filters/input spec structs).
	//
	// Specifying any Edge value in `usingOnly` will make the path only contain the
	// corresponding GUAC evidence trees (GUAC verbs).
	Path []PathPathNode `json:"-"`
}

// GetPath returns PathResponse.Path, and is useful for accessing the field via an interface.
func (v *PathResponse) GetPath() []PathPathNode { return v.Path }

func (v *PathResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PathResponse
		Path []json.RawMessage `json:"path"`
		graphql.NoUnmarshalJSON
	}
	firstPass.PathResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Path
		src := firstPass.Path
		*dst = make(
			[]PathPathNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalPathPathNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"Unable to unmarshal PathResponse.Path: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalPathResponse struct {
	Path []json.RawMessage `json:"path"`
}

func (v *PathResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PathResponse) __premarshalJSON() (*__premarshalPathResponse, error) {
	var retval __premarshalPathResponse

	{

		dst := &retval.Path
		src := v.Path
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalPathPathNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal PathResponse.Path: %w", err)
			}
		}
	}
	return &retval, nil
}

// PkgEqualIngestPkgEqual includes the requested fields of the GraphQL type PkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type PkgEqualIngestPkgEqual struct {
	allPkgEqual `json:"-"`
}

// GetId returns PkgEqualIngestPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *PkgEqualIngestPkgEqual) GetId() string { return v.allPkgEqual.Id }

// GetJustification returns PkgEqualIngestPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *PkgEqualIngestPkgEqual) GetJustification() string { return v.allPkgEqual.Justification }

// GetPackages returns PkgEqualIngestPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *PkgEqualIngestPkgEqual) GetPackages() []allPkgEqualPackagesPackage {
	return v.allPkgEqual.Packages
}

// GetOrigin returns PkgEqualIngestPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *PkgEqualIngestPkgEqual) GetOrigin() string { return v.allPkgEqual.Origin }

// GetCollector returns PkgEqualIngestPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *PkgEqualIngestPkgEqual) GetCollector() string { return v.allPkgEqual.Collector }

func (v *PkgEqualIngestPkgEqual) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PkgEqualIngestPkgEqual
		graphql.NoUnmarshalJSON
	}
	firstPass.PkgEqualIngestPkgEqual = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allPkgEqual)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPkgEqualIngestPkgEqual struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Packages []allPkgEqualPackagesPackage `json:"packages"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *PkgEqualIngestPkgEqual) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PkgEqualIngestPkgEqual) __premarshalJSON() (*__premarshalPkgEqualIngestPkgEqual, error) {
	var retval __premarshalPkgEqualIngestPkgEqual

	retval.Id = v.allPkgEqual.Id
	retval.Justification = v.allPkgEqual.Justification
	retval.Packages = v.allPkgEqual.Packages
	retval.Origin = v.allPkgEqual.Origin
	retval.Collector = v.allPkgEqual.Collector
	return &retval, nil
}

// PkgEqualInputSpec represents the input to certify that packages are similar.
type PkgEqualInputSpec struct {
	Justification string `json:"justification"`
	Origin        string `json:"origin"`
	Collector     string `json:"collector"`
}

// GetJustification returns PkgEqualInputSpec.Justification, and is useful for accessing the field via an interface.
func (v *PkgEqualInputSpec) GetJustification() string { return v.Justification }

// GetOrigin returns PkgEqualInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *PkgEqualInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns PkgEqualInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *PkgEqualInputSpec) GetCollector() string { return v.Collector }

// PkgEqualOtherPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PkgEqualOtherPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns PkgEqualOtherPackage.Id, and is useful for accessing the field via an interface.
func (v *PkgEqualOtherPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns PkgEqualOtherPackage.Type, and is useful for accessing the field via an interface.
func (v *PkgEqualOtherPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns PkgEqualOtherPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PkgEqualOtherPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PkgEqualOtherPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PkgEqualOtherPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PkgEqualOtherPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPkgEqualOtherPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PkgEqualOtherPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PkgEqualOtherPackage) __premarshalJSON() (*__premarshalPkgEqualOtherPackage, error) {
	var retval __premarshalPkgEqualOtherPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PkgEqualPkgPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type PkgEqualPkgPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns PkgEqualPkgPackage.Id, and is useful for accessing the field via an interface.
func (v *PkgEqualPkgPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns PkgEqualPkgPackage.Type, and is useful for accessing the field via an interface.
func (v *PkgEqualPkgPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns PkgEqualPkgPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *PkgEqualPkgPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *PkgEqualPkgPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PkgEqualPkgPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.PkgEqualPkgPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPkgEqualPkgPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *PkgEqualPkgPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PkgEqualPkgPackage) __premarshalJSON() (*__premarshalPkgEqualPkgPackage, error) {
	var retval __premarshalPkgEqualPkgPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// PkgEqualResponse is returned by PkgEqual on success.
type PkgEqualResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	Pkg PkgEqualPkgPackage `json:"pkg"`
	// Ingests a new package and returns the corresponding package trie path.
	OtherPackage PkgEqualOtherPackage `json:"otherPackage"`
	// Adds a certification that two packages are similar.
	IngestPkgEqual PkgEqualIngestPkgEqual `json:"ingestPkgEqual"`
}

// GetPkg returns PkgEqualResponse.Pkg, and is useful for accessing the field via an interface.
func (v *PkgEqualResponse) GetPkg() PkgEqualPkgPackage { return v.Pkg }

// GetOtherPackage returns PkgEqualResponse.OtherPackage, and is useful for accessing the field via an interface.
func (v *PkgEqualResponse) GetOtherPackage() PkgEqualOtherPackage { return v.OtherPackage }

// GetIngestPkgEqual returns PkgEqualResponse.IngestPkgEqual, and is useful for accessing the field via an interface.
func (v *PkgEqualResponse) GetIngestPkgEqual() PkgEqualIngestPkgEqual { return v.IngestPkgEqual }

// PkgInputSpec specifies a package for mutations.
//
// This is different than PkgSpec because we want to encode mandatory fields:
// type and name. All optional fields are given empty default values.
type PkgInputSpec struct {
	Type       string                      `json:"type"`
	Namespace  *string                     `json:"namespace"`
	Name       string                      `json:"name"`
	Version    *string                     `json:"version"`
	Qualifiers []PackageQualifierInputSpec `json:"qualifiers"`
	Subpath    *string                     `json:"subpath"`
}

// GetType returns PkgInputSpec.Type, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetType() string { return v.Type }

// GetNamespace returns PkgInputSpec.Namespace, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetNamespace() *string { return v.Namespace }

// GetName returns PkgInputSpec.Name, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetName() string { return v.Name }

// GetVersion returns PkgInputSpec.Version, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetVersion() *string { return v.Version }

// GetQualifiers returns PkgInputSpec.Qualifiers, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetQualifiers() []PackageQualifierInputSpec { return v.Qualifiers }

// GetSubpath returns PkgInputSpec.Subpath, and is useful for accessing the field via an interface.
func (v *PkgInputSpec) GetSubpath() *string { return v.Subpath }

// PkgMatchType is an enum to determine if the attestation should be done at the
// specific version or package name.
type PkgMatchType string

const (
	PkgMatchTypeAllVersions     PkgMatchType = "ALL_VERSIONS"
	PkgMatchTypeSpecificVersion PkgMatchType = "SPECIFIC_VERSION"
)

// PkgSpec allows filtering the list of sources to return in a query.
//
// Each field matches a qualifier from pURL. Use null to match on all values at
// that level. For example, to get all packages in GUAC backend, use a PkgSpec
// where every field is null.
//
// Empty string at a field means matching with the empty string. If passing in
// qualifiers, all of the values in the list must match. Since we want to return
// nodes with any number of qualifiers if no qualifiers are passed in the input,
// we must also return the same set of nodes it the qualifiers list is empty. To
// match on nodes that don't contain any qualifier, set matchOnlyEmptyQualifiers
// to true. If this field is true, then the qualifiers argument is ignored.
type PkgSpec struct {
	Id                       *string                `json:"id"`
	Type                     *string                `json:"type"`
	Namespace                *string                `json:"namespace"`
	Name                     *string                `json:"name"`
	Version                  *string                `json:"version"`
	Qualifiers               []PackageQualifierSpec `json:"qualifiers"`
	MatchOnlyEmptyQualifiers *bool                  `json:"matchOnlyEmptyQualifiers"`
	Subpath                  *string                `json:"subpath"`
}

// GetId returns PkgSpec.Id, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetId() *string { return v.Id }

// GetType returns PkgSpec.Type, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetType() *string { return v.Type }

// GetNamespace returns PkgSpec.Namespace, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetNamespace() *string { return v.Namespace }

// GetName returns PkgSpec.Name, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetName() *string { return v.Name }

// GetVersion returns PkgSpec.Version, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetVersion() *string { return v.Version }

// GetQualifiers returns PkgSpec.Qualifiers, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetQualifiers() []PackageQualifierSpec { return v.Qualifiers }

// GetMatchOnlyEmptyQualifiers returns PkgSpec.MatchOnlyEmptyQualifiers, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetMatchOnlyEmptyQualifiers() *bool { return v.MatchOnlyEmptyQualifiers }

// GetSubpath returns PkgSpec.Subpath, and is useful for accessing the field via an interface.
func (v *PkgSpec) GetSubpath() *string { return v.Subpath }

// SLSAForArtifactIngestArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type SLSAForArtifactIngestArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns SLSAForArtifactIngestArtifact.Id, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns SLSAForArtifactIngestArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns SLSAForArtifactIngestArtifact.Digest, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *SLSAForArtifactIngestArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SLSAForArtifactIngestArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.SLSAForArtifactIngestArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSLSAForArtifactIngestArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *SLSAForArtifactIngestArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SLSAForArtifactIngestArtifact) __premarshalJSON() (*__premarshalSLSAForArtifactIngestArtifact, error) {
	var retval __premarshalSLSAForArtifactIngestArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// SLSAForArtifactIngestBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type SLSAForArtifactIngestBuilder struct {
	Uri string `json:"uri"`
}

// GetUri returns SLSAForArtifactIngestBuilder.Uri, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestBuilder) GetUri() string { return v.Uri }

// SLSAForArtifactIngestMaterialsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type SLSAForArtifactIngestMaterialsArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns SLSAForArtifactIngestMaterialsArtifact.Id, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestMaterialsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns SLSAForArtifactIngestMaterialsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestMaterialsArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns SLSAForArtifactIngestMaterialsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestMaterialsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *SLSAForArtifactIngestMaterialsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SLSAForArtifactIngestMaterialsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.SLSAForArtifactIngestMaterialsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSLSAForArtifactIngestMaterialsArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *SLSAForArtifactIngestMaterialsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SLSAForArtifactIngestMaterialsArtifact) __premarshalJSON() (*__premarshalSLSAForArtifactIngestMaterialsArtifact, error) {
	var retval __premarshalSLSAForArtifactIngestMaterialsArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// SLSAForArtifactIngestSLSAHasSLSA includes the requested fields of the GraphQL type HasSLSA.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type SLSAForArtifactIngestSLSAHasSLSA struct {
	allSLSATree `json:"-"`
}

// GetId returns SLSAForArtifactIngestSLSAHasSLSA.Id, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestSLSAHasSLSA) GetId() string { return v.allSLSATree.Id }

// GetSubject returns SLSAForArtifactIngestSLSAHasSLSA.Subject, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestSLSAHasSLSA) GetSubject() allSLSATreeSubjectArtifact {
	return v.allSLSATree.Subject
}

// GetSlsa returns SLSAForArtifactIngestSLSAHasSLSA.Slsa, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactIngestSLSAHasSLSA) GetSlsa() allSLSATreeSlsaSLSA { return v.allSLSATree.Slsa }

func (v *SLSAForArtifactIngestSLSAHasSLSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SLSAForArtifactIngestSLSAHasSLSA
		graphql.NoUnmarshalJSON
	}
	firstPass.SLSAForArtifactIngestSLSAHasSLSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allSLSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSLSAForArtifactIngestSLSAHasSLSA struct {
	Id string `json:"id"`

	Subject allSLSATreeSubjectArtifact `json:"subject"`

	Slsa allSLSATreeSlsaSLSA `json:"slsa"`
}

func (v *SLSAForArtifactIngestSLSAHasSLSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SLSAForArtifactIngestSLSAHasSLSA) __premarshalJSON() (*__premarshalSLSAForArtifactIngestSLSAHasSLSA, error) {
	var retval __premarshalSLSAForArtifactIngestSLSAHasSLSA

	retval.Id = v.allSLSATree.Id
	retval.Subject = v.allSLSATree.Subject
	retval.Slsa = v.allSLSATree.Slsa
	return &retval, nil
}

// SLSAForArtifactResponse is returned by SLSAForArtifact on success.
type SLSAForArtifactResponse struct {
	// Ingests a new artifact and returns it.
	IngestArtifact SLSAForArtifactIngestArtifact `json:"ingestArtifact"`
	// Helper mutation to ingest multiple artifacts as materials for SLSA.
	IngestMaterials []SLSAForArtifactIngestMaterialsArtifact `json:"ingestMaterials"`
	// Ingests a new builder and returns it.
	IngestBuilder SLSAForArtifactIngestBuilder `json:"ingestBuilder"`
	// Ingests a SLSA attestation.
	IngestSLSA SLSAForArtifactIngestSLSAHasSLSA `json:"ingestSLSA"`
}

// GetIngestArtifact returns SLSAForArtifactResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactResponse) GetIngestArtifact() SLSAForArtifactIngestArtifact {
	return v.IngestArtifact
}

// GetIngestMaterials returns SLSAForArtifactResponse.IngestMaterials, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactResponse) GetIngestMaterials() []SLSAForArtifactIngestMaterialsArtifact {
	return v.IngestMaterials
}

// GetIngestBuilder returns SLSAForArtifactResponse.IngestBuilder, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactResponse) GetIngestBuilder() SLSAForArtifactIngestBuilder {
	return v.IngestBuilder
}

// GetIngestSLSA returns SLSAForArtifactResponse.IngestSLSA, and is useful for accessing the field via an interface.
func (v *SLSAForArtifactResponse) GetIngestSLSA() SLSAForArtifactIngestSLSAHasSLSA {
	return v.IngestSLSA
}

// SLSAInputSpec is the same as SLSA but for mutation input.
type SLSAInputSpec struct {
	BuildType     string                   `json:"buildType"`
	SlsaPredicate []SLSAPredicateInputSpec `json:"slsaPredicate"`
	SlsaVersion   string                   `json:"slsaVersion"`
	StartedOn     time.Time                `json:"startedOn"`
	FinishedOn    time.Time                `json:"finishedOn"`
	Origin        string                   `json:"origin"`
	Collector     string                   `json:"collector"`
}

// GetBuildType returns SLSAInputSpec.BuildType, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetBuildType() string { return v.BuildType }

// GetSlsaPredicate returns SLSAInputSpec.SlsaPredicate, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetSlsaPredicate() []SLSAPredicateInputSpec { return v.SlsaPredicate }

// GetSlsaVersion returns SLSAInputSpec.SlsaVersion, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetSlsaVersion() string { return v.SlsaVersion }

// GetStartedOn returns SLSAInputSpec.StartedOn, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetStartedOn() time.Time { return v.StartedOn }

// GetFinishedOn returns SLSAInputSpec.FinishedOn, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetFinishedOn() time.Time { return v.FinishedOn }

// GetOrigin returns SLSAInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns SLSAInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *SLSAInputSpec) GetCollector() string { return v.Collector }

// SLSAPredicateInputSpec allows ingesting SLSAPredicateSpec.
type SLSAPredicateInputSpec struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns SLSAPredicateInputSpec.Key, and is useful for accessing the field via an interface.
func (v *SLSAPredicateInputSpec) GetKey() string { return v.Key }

// GetValue returns SLSAPredicateInputSpec.Value, and is useful for accessing the field via an interface.
func (v *SLSAPredicateInputSpec) GetValue() string { return v.Value }

// ScorecardCertifyScorecard includes the requested fields of the GraphQL type CertifyScorecard.
// The GraphQL type's documentation follows.
//
// CertifyScorecard is an attestation to attach a Scorecard analysis to a
// particular source repository.
type ScorecardCertifyScorecard struct {
	AllCertifyScorecard `json:"-"`
}

// GetId returns ScorecardCertifyScorecard.Id, and is useful for accessing the field via an interface.
func (v *ScorecardCertifyScorecard) GetId() string { return v.AllCertifyScorecard.Id }

// GetSource returns ScorecardCertifyScorecard.Source, and is useful for accessing the field via an interface.
func (v *ScorecardCertifyScorecard) GetSource() AllCertifyScorecardSource {
	return v.AllCertifyScorecard.Source
}

// GetScorecard returns ScorecardCertifyScorecard.Scorecard, and is useful for accessing the field via an interface.
func (v *ScorecardCertifyScorecard) GetScorecard() AllCertifyScorecardScorecard {
	return v.AllCertifyScorecard.Scorecard
}

func (v *ScorecardCertifyScorecard) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ScorecardCertifyScorecard
		graphql.NoUnmarshalJSON
	}
	firstPass.ScorecardCertifyScorecard = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCertifyScorecard)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalScorecardCertifyScorecard struct {
	Id string `json:"id"`

	Source AllCertifyScorecardSource `json:"source"`

	Scorecard AllCertifyScorecardScorecard `json:"scorecard"`
}

func (v *ScorecardCertifyScorecard) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ScorecardCertifyScorecard) __premarshalJSON() (*__premarshalScorecardCertifyScorecard, error) {
	var retval __premarshalScorecardCertifyScorecard

	retval.Id = v.AllCertifyScorecard.Id
	retval.Source = v.AllCertifyScorecard.Source
	retval.Scorecard = v.AllCertifyScorecard.Scorecard
	return &retval, nil
}

// ScorecardCheckInputSpec represents the mutation input for a Scorecard check.
type ScorecardCheckInputSpec struct {
	Check string `json:"check"`
	Score int    `json:"score"`
}

// GetCheck returns ScorecardCheckInputSpec.Check, and is useful for accessing the field via an interface.
func (v *ScorecardCheckInputSpec) GetCheck() string { return v.Check }

// GetScore returns ScorecardCheckInputSpec.Score, and is useful for accessing the field via an interface.
func (v *ScorecardCheckInputSpec) GetScore() int { return v.Score }

// ScorecardIngestSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type ScorecardIngestSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns ScorecardIngestSource.Id, and is useful for accessing the field via an interface.
func (v *ScorecardIngestSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns ScorecardIngestSource.Type, and is useful for accessing the field via an interface.
func (v *ScorecardIngestSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns ScorecardIngestSource.Namespaces, and is useful for accessing the field via an interface.
func (v *ScorecardIngestSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *ScorecardIngestSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ScorecardIngestSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ScorecardIngestSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalScorecardIngestSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *ScorecardIngestSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ScorecardIngestSource) __premarshalJSON() (*__premarshalScorecardIngestSource, error) {
	var retval __premarshalScorecardIngestSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// ScorecardInputSpec represents the mutation input to ingest a Scorecard.
type ScorecardInputSpec struct {
	Checks           []ScorecardCheckInputSpec `json:"checks"`
	AggregateScore   float64                   `json:"aggregateScore"`
	TimeScanned      time.Time                 `json:"timeScanned"`
	ScorecardVersion string                    `json:"scorecardVersion"`
	ScorecardCommit  string                    `json:"scorecardCommit"`
	Origin           string                    `json:"origin"`
	Collector        string                    `json:"collector"`
}

// GetChecks returns ScorecardInputSpec.Checks, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetChecks() []ScorecardCheckInputSpec { return v.Checks }

// GetAggregateScore returns ScorecardInputSpec.AggregateScore, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetAggregateScore() float64 { return v.AggregateScore }

// GetTimeScanned returns ScorecardInputSpec.TimeScanned, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetTimeScanned() time.Time { return v.TimeScanned }

// GetScorecardVersion returns ScorecardInputSpec.ScorecardVersion, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetScorecardVersion() string { return v.ScorecardVersion }

// GetScorecardCommit returns ScorecardInputSpec.ScorecardCommit, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetScorecardCommit() string { return v.ScorecardCommit }

// GetOrigin returns ScorecardInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns ScorecardInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *ScorecardInputSpec) GetCollector() string { return v.Collector }

// ScorecardResponse is returned by Scorecard on success.
type ScorecardResponse struct {
	// Ingests a new source and returns the corresponding source trie path.
	IngestSource ScorecardIngestSource `json:"ingestSource"`
	// Adds a certification that a source repository has a Scorecard.
	CertifyScorecard ScorecardCertifyScorecard `json:"certifyScorecard"`
}

// GetIngestSource returns ScorecardResponse.IngestSource, and is useful for accessing the field via an interface.
func (v *ScorecardResponse) GetIngestSource() ScorecardIngestSource { return v.IngestSource }

// GetCertifyScorecard returns ScorecardResponse.CertifyScorecard, and is useful for accessing the field via an interface.
func (v *ScorecardResponse) GetCertifyScorecard() ScorecardCertifyScorecard {
	return v.CertifyScorecard
}

// SourceInputSpec specifies a source for mutations.
//
// This is different than SourceSpec because we want to encode that all fields
// except tag and commit are mandatory fields. All optional fields are given empty
// default values.
//
// It is an error to set both tag and commit fields to values different than the
// default.
type SourceInputSpec struct {
	Type      string  `json:"type"`
	Namespace string  `json:"namespace"`
	Name      string  `json:"name"`
	Tag       *string `json:"tag"`
	Commit    *string `json:"commit"`
}

// GetType returns SourceInputSpec.Type, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetType() string { return v.Type }

// GetNamespace returns SourceInputSpec.Namespace, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetNamespace() string { return v.Namespace }

// GetName returns SourceInputSpec.Name, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetName() string { return v.Name }

// GetTag returns SourceInputSpec.Tag, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetTag() *string { return v.Tag }

// GetCommit returns SourceInputSpec.Commit, and is useful for accessing the field via an interface.
func (v *SourceInputSpec) GetCommit() *string { return v.Commit }

// SourceSpec allows filtering the list of sources to return in a query.
//
// Empty string at a field means matching with the empty string. Missing field
// means retrieving all possible matches.
//
// It is an error to specify both tag and commit fields, except it both are set as
// empty string (in which case the returned sources are only those for which there
// is no tag/commit information).
type SourceSpec struct {
	Id        *string `json:"id"`
	Type      *string `json:"type"`
	Namespace *string `json:"namespace"`
	Name      *string `json:"name"`
	Tag       *string `json:"tag"`
	Commit    *string `json:"commit"`
}

// GetId returns SourceSpec.Id, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetId() *string { return v.Id }

// GetType returns SourceSpec.Type, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetType() *string { return v.Type }

// GetNamespace returns SourceSpec.Namespace, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetNamespace() *string { return v.Namespace }

// GetName returns SourceSpec.Name, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetName() *string { return v.Name }

// GetTag returns SourceSpec.Tag, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetTag() *string { return v.Tag }

// GetCommit returns SourceSpec.Commit, and is useful for accessing the field via an interface.
func (v *SourceSpec) GetCommit() *string { return v.Commit }

// SourcesResponse is returned by Sources on success.
type SourcesResponse struct {
	// Returns all sources matching a filter.
	Sources []SourcesSourcesSource `json:"sources"`
}

// GetSources returns SourcesResponse.Sources, and is useful for accessing the field via an interface.
func (v *SourcesResponse) GetSources() []SourcesSourcesSource { return v.Sources }

// SourcesSourcesSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type SourcesSourcesSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns SourcesSourcesSource.Id, and is useful for accessing the field via an interface.
func (v *SourcesSourcesSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns SourcesSourcesSource.Type, and is useful for accessing the field via an interface.
func (v *SourcesSourcesSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns SourcesSourcesSource.Namespaces, and is useful for accessing the field via an interface.
func (v *SourcesSourcesSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *SourcesSourcesSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SourcesSourcesSource
		graphql.NoUnmarshalJSON
	}
	firstPass.SourcesSourcesSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSourcesSourcesSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *SourcesSourcesSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SourcesSourcesSource) __premarshalJSON() (*__premarshalSourcesSourcesSource, error) {
	var retval __premarshalSourcesSourcesSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// VEXPackageAndGhsaIngestGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type VEXPackageAndGhsaIngestGHSA struct {
	AllGHSATree `json:"-"`
}

// GetId returns VEXPackageAndGhsaIngestGHSA.Id, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns VEXPackageAndGhsaIngestGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *VEXPackageAndGhsaIngestGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VEXPackageAndGhsaIngestGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.VEXPackageAndGhsaIngestGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVEXPackageAndGhsaIngestGHSA struct {
	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *VEXPackageAndGhsaIngestGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VEXPackageAndGhsaIngestGHSA) __premarshalJSON() (*__premarshalVEXPackageAndGhsaIngestGHSA, error) {
	var retval __premarshalVEXPackageAndGhsaIngestGHSA

	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// VEXPackageAndGhsaIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type VEXPackageAndGhsaIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns VEXPackageAndGhsaIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns VEXPackageAndGhsaIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns VEXPackageAndGhsaIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *VEXPackageAndGhsaIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VEXPackageAndGhsaIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.VEXPackageAndGhsaIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVEXPackageAndGhsaIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *VEXPackageAndGhsaIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VEXPackageAndGhsaIngestPackage) __premarshalJSON() (*__premarshalVEXPackageAndGhsaIngestPackage, error) {
	var retval __premarshalVEXPackageAndGhsaIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement struct {
	allCertifyVEXStatement `json:"-"`
}

// GetId returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.allCertifyVEXStatement.Id
}

// GetSubject returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.allCertifyVEXStatement.Subject
}

// GetVulnerability returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.allCertifyVEXStatement.Vulnerability
}

// GetStatus returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.allCertifyVEXStatement.Status
}

// GetVexJustification returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.allCertifyVEXStatement.VexJustification
}

// GetStatement returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.allCertifyVEXStatement.Statement
}

// GetStatusNotes returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.allCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.allCertifyVEXStatement.KnownSince
}

// GetOrigin returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.allCertifyVEXStatement.Origin
}

// GetCollector returns VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.allCertifyVEXStatement.Collector
}

func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement

	retval.Id = v.allCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.allCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.allCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.allCertifyVEXStatement.Status
	retval.VexJustification = v.allCertifyVEXStatement.VexJustification
	retval.Statement = v.allCertifyVEXStatement.Statement
	retval.StatusNotes = v.allCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.allCertifyVEXStatement.KnownSince
	retval.Origin = v.allCertifyVEXStatement.Origin
	retval.Collector = v.allCertifyVEXStatement.Collector
	return &retval, nil
}

// VEXPackageAndGhsaResponse is returned by VEXPackageAndGhsa on success.
type VEXPackageAndGhsaResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage VEXPackageAndGhsaIngestPackage `json:"ingestPackage"`
	// Ingests a new GitHub Security Advisory and returns it.
	IngestGHSA VEXPackageAndGhsaIngestGHSA `json:"ingestGHSA"`
	// Adds a VEX certification for a package.
	IngestVEXStatement VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestPackage returns VEXPackageAndGhsaResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaResponse) GetIngestPackage() VEXPackageAndGhsaIngestPackage {
	return v.IngestPackage
}

// GetIngestGHSA returns VEXPackageAndGhsaResponse.IngestGHSA, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaResponse) GetIngestGHSA() VEXPackageAndGhsaIngestGHSA { return v.IngestGHSA }

// GetIngestVEXStatement returns VEXPackageAndGhsaResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VEXPackageAndGhsaResponse) GetIngestVEXStatement() VEXPackageAndGhsaIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// VexArtifactAndCveIngestArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type VexArtifactAndCveIngestArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns VexArtifactAndCveIngestArtifact.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns VexArtifactAndCveIngestArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns VexArtifactAndCveIngestArtifact.Digest, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *VexArtifactAndCveIngestArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndCveIngestArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndCveIngestArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndCveIngestArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *VexArtifactAndCveIngestArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndCveIngestArtifact) __premarshalJSON() (*__premarshalVexArtifactAndCveIngestArtifact, error) {
	var retval __premarshalVexArtifactAndCveIngestArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// VexArtifactAndCveIngestCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type VexArtifactAndCveIngestCVE struct {
	AllCveTree `json:"-"`
}

// GetId returns VexArtifactAndCveIngestCVE.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns VexArtifactAndCveIngestCVE.Year, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns VexArtifactAndCveIngestCVE.CveId, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *VexArtifactAndCveIngestCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndCveIngestCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndCveIngestCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndCveIngestCVE struct {
	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *VexArtifactAndCveIngestCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndCveIngestCVE) __premarshalJSON() (*__premarshalVexArtifactAndCveIngestCVE, error) {
	var retval __premarshalVexArtifactAndCveIngestCVE

	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// VexArtifactAndCveIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VexArtifactAndCveIngestVEXStatementCertifyVEXStatement struct {
	allCertifyVEXStatement `json:"-"`
}

// GetId returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.allCertifyVEXStatement.Id
}

// GetSubject returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.allCertifyVEXStatement.Subject
}

// GetVulnerability returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.allCertifyVEXStatement.Vulnerability
}

// GetStatus returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.allCertifyVEXStatement.Status
}

// GetVexJustification returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.allCertifyVEXStatement.VexJustification
}

// GetStatement returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.allCertifyVEXStatement.Statement
}

// GetStatusNotes returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.allCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.allCertifyVEXStatement.KnownSince
}

// GetOrigin returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.allCertifyVEXStatement.Origin
}

// GetCollector returns VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.allCertifyVEXStatement.Collector
}

func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndCveIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndCveIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndCveIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndCveIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVexArtifactAndCveIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVexArtifactAndCveIngestVEXStatementCertifyVEXStatement

	retval.Id = v.allCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.allCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.allCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VexArtifactAndCveIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.allCertifyVEXStatement.Status
	retval.VexJustification = v.allCertifyVEXStatement.VexJustification
	retval.Statement = v.allCertifyVEXStatement.Statement
	retval.StatusNotes = v.allCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.allCertifyVEXStatement.KnownSince
	retval.Origin = v.allCertifyVEXStatement.Origin
	retval.Collector = v.allCertifyVEXStatement.Collector
	return &retval, nil
}

// VexArtifactAndCveResponse is returned by VexArtifactAndCve on success.
type VexArtifactAndCveResponse struct {
	// Ingests a new artifact and returns it.
	IngestArtifact VexArtifactAndCveIngestArtifact `json:"ingestArtifact"`
	// Ingests new CVE and returns it.
	IngestCVE VexArtifactAndCveIngestCVE `json:"ingestCVE"`
	// Adds a VEX certification for a package.
	IngestVEXStatement VexArtifactAndCveIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestArtifact returns VexArtifactAndCveResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveResponse) GetIngestArtifact() VexArtifactAndCveIngestArtifact {
	return v.IngestArtifact
}

// GetIngestCVE returns VexArtifactAndCveResponse.IngestCVE, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveResponse) GetIngestCVE() VexArtifactAndCveIngestCVE { return v.IngestCVE }

// GetIngestVEXStatement returns VexArtifactAndCveResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndCveResponse) GetIngestVEXStatement() VexArtifactAndCveIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// VexArtifactAndGhsaIngestArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type VexArtifactAndGhsaIngestArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns VexArtifactAndGhsaIngestArtifact.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns VexArtifactAndGhsaIngestArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns VexArtifactAndGhsaIngestArtifact.Digest, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *VexArtifactAndGhsaIngestArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndGhsaIngestArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndGhsaIngestArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndGhsaIngestArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *VexArtifactAndGhsaIngestArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndGhsaIngestArtifact) __premarshalJSON() (*__premarshalVexArtifactAndGhsaIngestArtifact, error) {
	var retval __premarshalVexArtifactAndGhsaIngestArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// VexArtifactAndGhsaIngestGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type VexArtifactAndGhsaIngestGHSA struct {
	AllGHSATree `json:"-"`
}

// GetId returns VexArtifactAndGhsaIngestGHSA.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns VexArtifactAndGhsaIngestGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *VexArtifactAndGhsaIngestGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndGhsaIngestGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndGhsaIngestGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndGhsaIngestGHSA struct {
	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *VexArtifactAndGhsaIngestGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndGhsaIngestGHSA) __premarshalJSON() (*__premarshalVexArtifactAndGhsaIngestGHSA, error) {
	var retval __premarshalVexArtifactAndGhsaIngestGHSA

	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement struct {
	allCertifyVEXStatement `json:"-"`
}

// GetId returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.allCertifyVEXStatement.Id
}

// GetSubject returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.allCertifyVEXStatement.Subject
}

// GetVulnerability returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.allCertifyVEXStatement.Vulnerability
}

// GetStatus returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.allCertifyVEXStatement.Status
}

// GetVexJustification returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.allCertifyVEXStatement.VexJustification
}

// GetStatement returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.allCertifyVEXStatement.Statement
}

// GetStatusNotes returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.allCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.allCertifyVEXStatement.KnownSince
}

// GetOrigin returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.allCertifyVEXStatement.Origin
}

// GetCollector returns VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.allCertifyVEXStatement.Collector
}

func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement

	retval.Id = v.allCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.allCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.allCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.allCertifyVEXStatement.Status
	retval.VexJustification = v.allCertifyVEXStatement.VexJustification
	retval.Statement = v.allCertifyVEXStatement.Statement
	retval.StatusNotes = v.allCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.allCertifyVEXStatement.KnownSince
	retval.Origin = v.allCertifyVEXStatement.Origin
	retval.Collector = v.allCertifyVEXStatement.Collector
	return &retval, nil
}

// VexArtifactAndGhsaResponse is returned by VexArtifactAndGhsa on success.
type VexArtifactAndGhsaResponse struct {
	// Ingests a new artifact and returns it.
	IngestArtifact VexArtifactAndGhsaIngestArtifact `json:"ingestArtifact"`
	// Ingests a new GitHub Security Advisory and returns it.
	IngestGHSA VexArtifactAndGhsaIngestGHSA `json:"ingestGHSA"`
	// Adds a VEX certification for a package.
	IngestVEXStatement VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestArtifact returns VexArtifactAndGhsaResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaResponse) GetIngestArtifact() VexArtifactAndGhsaIngestArtifact {
	return v.IngestArtifact
}

// GetIngestGHSA returns VexArtifactAndGhsaResponse.IngestGHSA, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaResponse) GetIngestGHSA() VexArtifactAndGhsaIngestGHSA {
	return v.IngestGHSA
}

// GetIngestVEXStatement returns VexArtifactAndGhsaResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndGhsaResponse) GetIngestVEXStatement() VexArtifactAndGhsaIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// VexArtifactAndOsvIngestArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type VexArtifactAndOsvIngestArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns VexArtifactAndOsvIngestArtifact.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns VexArtifactAndOsvIngestArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns VexArtifactAndOsvIngestArtifact.Digest, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *VexArtifactAndOsvIngestArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndOsvIngestArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndOsvIngestArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndOsvIngestArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *VexArtifactAndOsvIngestArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndOsvIngestArtifact) __premarshalJSON() (*__premarshalVexArtifactAndOsvIngestArtifact, error) {
	var retval __premarshalVexArtifactAndOsvIngestArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// VexArtifactAndOsvIngestOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type VexArtifactAndOsvIngestOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns VexArtifactAndOsvIngestOSV.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns VexArtifactAndOsvIngestOSV.OsvId, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *VexArtifactAndOsvIngestOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndOsvIngestOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndOsvIngestOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndOsvIngestOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *VexArtifactAndOsvIngestOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndOsvIngestOSV) __premarshalJSON() (*__premarshalVexArtifactAndOsvIngestOSV, error) {
	var retval __premarshalVexArtifactAndOsvIngestOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement struct {
	allCertifyVEXStatement `json:"-"`
}

// GetId returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.allCertifyVEXStatement.Id
}

// GetSubject returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.allCertifyVEXStatement.Subject
}

// GetVulnerability returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.allCertifyVEXStatement.Vulnerability
}

// GetStatus returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.allCertifyVEXStatement.Status
}

// GetVexJustification returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.allCertifyVEXStatement.VexJustification
}

// GetStatement returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.allCertifyVEXStatement.Statement
}

// GetStatusNotes returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.allCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.allCertifyVEXStatement.KnownSince
}

// GetOrigin returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.allCertifyVEXStatement.Origin
}

// GetCollector returns VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.allCertifyVEXStatement.Collector
}

func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexArtifactAndOsvIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVexArtifactAndOsvIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVexArtifactAndOsvIngestVEXStatementCertifyVEXStatement

	retval.Id = v.allCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.allCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.allCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.allCertifyVEXStatement.Status
	retval.VexJustification = v.allCertifyVEXStatement.VexJustification
	retval.Statement = v.allCertifyVEXStatement.Statement
	retval.StatusNotes = v.allCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.allCertifyVEXStatement.KnownSince
	retval.Origin = v.allCertifyVEXStatement.Origin
	retval.Collector = v.allCertifyVEXStatement.Collector
	return &retval, nil
}

// VexArtifactAndOsvResponse is returned by VexArtifactAndOsv on success.
type VexArtifactAndOsvResponse struct {
	// Ingests a new artifact and returns it.
	IngestArtifact VexArtifactAndOsvIngestArtifact `json:"ingestArtifact"`
	// Ingests a new OSV vulnerability and returns it.
	IngestOSV VexArtifactAndOsvIngestOSV `json:"ingestOSV"`
	// Adds a VEX certification for a package.
	IngestVEXStatement VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestArtifact returns VexArtifactAndOsvResponse.IngestArtifact, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvResponse) GetIngestArtifact() VexArtifactAndOsvIngestArtifact {
	return v.IngestArtifact
}

// GetIngestOSV returns VexArtifactAndOsvResponse.IngestOSV, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvResponse) GetIngestOSV() VexArtifactAndOsvIngestOSV { return v.IngestOSV }

// GetIngestVEXStatement returns VexArtifactAndOsvResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VexArtifactAndOsvResponse) GetIngestVEXStatement() VexArtifactAndOsvIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// Records the justification included in the VEX statement.
type VexJustification string

const (
	VexJustificationComponentNotPresent                         VexJustification = "COMPONENT_NOT_PRESENT"
	VexJustificationVulnerableCodeNotPresent                    VexJustification = "VULNERABLE_CODE_NOT_PRESENT"
	VexJustificationVulnerableCodeNotInExecutePath              VexJustification = "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH"
	VexJustificationVulnerableCodeCannotBeControlledByAdversary VexJustification = "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY"
	VexJustificationInlineMitigationsAlreadyExist               VexJustification = "INLINE_MITIGATIONS_ALREADY_EXIST"
	VexJustificationNotProvided                                 VexJustification = "NOT_PROVIDED"
)

// VexPackageAndCveIngestCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type VexPackageAndCveIngestCVE struct {
	AllCveTree `json:"-"`
}

// GetId returns VexPackageAndCveIngestCVE.Id, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns VexPackageAndCveIngestCVE.Year, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns VexPackageAndCveIngestCVE.CveId, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *VexPackageAndCveIngestCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexPackageAndCveIngestCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.VexPackageAndCveIngestCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexPackageAndCveIngestCVE struct {
	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *VexPackageAndCveIngestCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexPackageAndCveIngestCVE) __premarshalJSON() (*__premarshalVexPackageAndCveIngestCVE, error) {
	var retval __premarshalVexPackageAndCveIngestCVE

	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// VexPackageAndCveIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type VexPackageAndCveIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns VexPackageAndCveIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns VexPackageAndCveIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns VexPackageAndCveIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *VexPackageAndCveIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexPackageAndCveIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.VexPackageAndCveIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexPackageAndCveIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *VexPackageAndCveIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexPackageAndCveIngestPackage) __premarshalJSON() (*__premarshalVexPackageAndCveIngestPackage, error) {
	var retval __premarshalVexPackageAndCveIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// VexPackageAndCveIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VexPackageAndCveIngestVEXStatementCertifyVEXStatement struct {
	allCertifyVEXStatement `json:"-"`
}

// GetId returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.allCertifyVEXStatement.Id
}

// GetSubject returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.allCertifyVEXStatement.Subject
}

// GetVulnerability returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.allCertifyVEXStatement.Vulnerability
}

// GetStatus returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.allCertifyVEXStatement.Status
}

// GetVexJustification returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.allCertifyVEXStatement.VexJustification
}

// GetStatement returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.allCertifyVEXStatement.Statement
}

// GetStatusNotes returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.allCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.allCertifyVEXStatement.KnownSince
}

// GetOrigin returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.allCertifyVEXStatement.Origin
}

// GetCollector returns VexPackageAndCveIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.allCertifyVEXStatement.Collector
}

func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexPackageAndCveIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VexPackageAndCveIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexPackageAndCveIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexPackageAndCveIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVexPackageAndCveIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVexPackageAndCveIngestVEXStatementCertifyVEXStatement

	retval.Id = v.allCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.allCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VexPackageAndCveIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.allCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VexPackageAndCveIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.allCertifyVEXStatement.Status
	retval.VexJustification = v.allCertifyVEXStatement.VexJustification
	retval.Statement = v.allCertifyVEXStatement.Statement
	retval.StatusNotes = v.allCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.allCertifyVEXStatement.KnownSince
	retval.Origin = v.allCertifyVEXStatement.Origin
	retval.Collector = v.allCertifyVEXStatement.Collector
	return &retval, nil
}

// VexPackageAndCveResponse is returned by VexPackageAndCve on success.
type VexPackageAndCveResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage VexPackageAndCveIngestPackage `json:"ingestPackage"`
	// Ingests new CVE and returns it.
	IngestCVE VexPackageAndCveIngestCVE `json:"ingestCVE"`
	// Adds a VEX certification for a package.
	IngestVEXStatement VexPackageAndCveIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestPackage returns VexPackageAndCveResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveResponse) GetIngestPackage() VexPackageAndCveIngestPackage {
	return v.IngestPackage
}

// GetIngestCVE returns VexPackageAndCveResponse.IngestCVE, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveResponse) GetIngestCVE() VexPackageAndCveIngestCVE { return v.IngestCVE }

// GetIngestVEXStatement returns VexPackageAndCveResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VexPackageAndCveResponse) GetIngestVEXStatement() VexPackageAndCveIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// VexPackageAndOsvIngestOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type VexPackageAndOsvIngestOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns VexPackageAndOsvIngestOSV.Id, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns VexPackageAndOsvIngestOSV.OsvId, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *VexPackageAndOsvIngestOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexPackageAndOsvIngestOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.VexPackageAndOsvIngestOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexPackageAndOsvIngestOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *VexPackageAndOsvIngestOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexPackageAndOsvIngestOSV) __premarshalJSON() (*__premarshalVexPackageAndOsvIngestOSV, error) {
	var retval __premarshalVexPackageAndOsvIngestOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// VexPackageAndOsvIngestPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type VexPackageAndOsvIngestPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns VexPackageAndOsvIngestPackage.Id, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns VexPackageAndOsvIngestPackage.Type, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns VexPackageAndOsvIngestPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *VexPackageAndOsvIngestPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexPackageAndOsvIngestPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.VexPackageAndOsvIngestPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexPackageAndOsvIngestPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *VexPackageAndOsvIngestPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexPackageAndOsvIngestPackage) __premarshalJSON() (*__premarshalVexPackageAndOsvIngestPackage, error) {
	var retval __premarshalVexPackageAndOsvIngestPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// VexPackageAndOsvIngestVEXStatementCertifyVEXStatement includes the requested fields of the GraphQL type CertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type VexPackageAndOsvIngestVEXStatementCertifyVEXStatement struct {
	allCertifyVEXStatement `json:"-"`
}

// GetId returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetId() string {
	return v.allCertifyVEXStatement.Id
}

// GetSubject returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.allCertifyVEXStatement.Subject
}

// GetVulnerability returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.allCertifyVEXStatement.Vulnerability
}

// GetStatus returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetStatus() VexStatus {
	return v.allCertifyVEXStatement.Status
}

// GetVexJustification returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetVexJustification() VexJustification {
	return v.allCertifyVEXStatement.VexJustification
}

// GetStatement returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetStatement() string {
	return v.allCertifyVEXStatement.Statement
}

// GetStatusNotes returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetStatusNotes() string {
	return v.allCertifyVEXStatement.StatusNotes
}

// GetKnownSince returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetKnownSince() time.Time {
	return v.allCertifyVEXStatement.KnownSince
}

// GetOrigin returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetOrigin() string {
	return v.allCertifyVEXStatement.Origin
}

// GetCollector returns VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) GetCollector() string {
	return v.allCertifyVEXStatement.Collector
}

func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VexPackageAndOsvIngestVEXStatementCertifyVEXStatement
		graphql.NoUnmarshalJSON
	}
	firstPass.VexPackageAndOsvIngestVEXStatementCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allCertifyVEXStatement)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVexPackageAndOsvIngestVEXStatementCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VexPackageAndOsvIngestVEXStatementCertifyVEXStatement) __premarshalJSON() (*__premarshalVexPackageAndOsvIngestVEXStatementCertifyVEXStatement, error) {
	var retval __premarshalVexPackageAndOsvIngestVEXStatementCertifyVEXStatement

	retval.Id = v.allCertifyVEXStatement.Id
	{

		dst := &retval.Subject
		src := v.allCertifyVEXStatement.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.allCertifyVEXStatement.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal VexPackageAndOsvIngestVEXStatementCertifyVEXStatement.allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.allCertifyVEXStatement.Status
	retval.VexJustification = v.allCertifyVEXStatement.VexJustification
	retval.Statement = v.allCertifyVEXStatement.Statement
	retval.StatusNotes = v.allCertifyVEXStatement.StatusNotes
	retval.KnownSince = v.allCertifyVEXStatement.KnownSince
	retval.Origin = v.allCertifyVEXStatement.Origin
	retval.Collector = v.allCertifyVEXStatement.Collector
	return &retval, nil
}

// VexPackageAndOsvResponse is returned by VexPackageAndOsv on success.
type VexPackageAndOsvResponse struct {
	// Ingests a new package and returns the corresponding package trie path.
	IngestPackage VexPackageAndOsvIngestPackage `json:"ingestPackage"`
	// Ingests a new OSV vulnerability and returns it.
	IngestOSV VexPackageAndOsvIngestOSV `json:"ingestOSV"`
	// Adds a VEX certification for a package.
	IngestVEXStatement VexPackageAndOsvIngestVEXStatementCertifyVEXStatement `json:"ingestVEXStatement"`
}

// GetIngestPackage returns VexPackageAndOsvResponse.IngestPackage, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvResponse) GetIngestPackage() VexPackageAndOsvIngestPackage {
	return v.IngestPackage
}

// GetIngestOSV returns VexPackageAndOsvResponse.IngestOSV, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvResponse) GetIngestOSV() VexPackageAndOsvIngestOSV { return v.IngestOSV }

// GetIngestVEXStatement returns VexPackageAndOsvResponse.IngestVEXStatement, and is useful for accessing the field via an interface.
func (v *VexPackageAndOsvResponse) GetIngestVEXStatement() VexPackageAndOsvIngestVEXStatementCertifyVEXStatement {
	return v.IngestVEXStatement
}

// VexStatementInputSpec represents the input to ingest VEX statements.
type VexStatementInputSpec struct {
	Status           VexStatus        `json:"status"`
	VexJustification VexJustification `json:"vexJustification"`
	Statement        string           `json:"statement"`
	StatusNotes      string           `json:"statusNotes"`
	KnownSince       time.Time        `json:"knownSince"`
	Origin           string           `json:"origin"`
	Collector        string           `json:"collector"`
}

// GetStatus returns VexStatementInputSpec.Status, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetStatus() VexStatus { return v.Status }

// GetVexJustification returns VexStatementInputSpec.VexJustification, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetVexJustification() VexJustification { return v.VexJustification }

// GetStatement returns VexStatementInputSpec.Statement, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetStatement() string { return v.Statement }

// GetStatusNotes returns VexStatementInputSpec.StatusNotes, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetStatusNotes() string { return v.StatusNotes }

// GetKnownSince returns VexStatementInputSpec.KnownSince, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetKnownSince() time.Time { return v.KnownSince }

// GetOrigin returns VexStatementInputSpec.Origin, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetOrigin() string { return v.Origin }

// GetCollector returns VexStatementInputSpec.Collector, and is useful for accessing the field via an interface.
func (v *VexStatementInputSpec) GetCollector() string { return v.Collector }

// Records the status of a VEX statement subject.
type VexStatus string

const (
	VexStatusNotAffected        VexStatus = "NOT_AFFECTED"
	VexStatusAffected           VexStatus = "AFFECTED"
	VexStatusFixed              VexStatus = "FIXED"
	VexStatusUnderInvestigation VexStatus = "UNDER_INVESTIGATION"
)

// VulnerabilityMetaDataInput represents the input for certifying vulnerability
// scans in mutations.
type VulnerabilityMetaDataInput struct {
	TimeScanned    time.Time `json:"timeScanned"`
	DbUri          string    `json:"dbUri"`
	DbVersion      string    `json:"dbVersion"`
	ScannerUri     string    `json:"scannerUri"`
	ScannerVersion string    `json:"scannerVersion"`
	Origin         string    `json:"origin"`
	Collector      string    `json:"collector"`
}

// GetTimeScanned returns VulnerabilityMetaDataInput.TimeScanned, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetTimeScanned() time.Time { return v.TimeScanned }

// GetDbUri returns VulnerabilityMetaDataInput.DbUri, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetDbUri() string { return v.DbUri }

// GetDbVersion returns VulnerabilityMetaDataInput.DbVersion, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetDbVersion() string { return v.DbVersion }

// GetScannerUri returns VulnerabilityMetaDataInput.ScannerUri, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetScannerUri() string { return v.ScannerUri }

// GetScannerVersion returns VulnerabilityMetaDataInput.ScannerVersion, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetScannerVersion() string { return v.ScannerVersion }

// GetOrigin returns VulnerabilityMetaDataInput.Origin, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetOrigin() string { return v.Origin }

// GetCollector returns VulnerabilityMetaDataInput.Collector, and is useful for accessing the field via an interface.
func (v *VulnerabilityMetaDataInput) GetCollector() string { return v.Collector }

// __ArtifactsInput is used internally by genqlient
type __ArtifactsInput struct {
	Filter *ArtifactSpec `json:"filter"`
}

// GetFilter returns __ArtifactsInput.Filter, and is useful for accessing the field via an interface.
func (v *__ArtifactsInput) GetFilter() *ArtifactSpec { return v.Filter }

// __CVEsInput is used internally by genqlient
type __CVEsInput struct {
	Filter *CVESpec `json:"filter"`
}

// GetFilter returns __CVEsInput.Filter, and is useful for accessing the field via an interface.
func (v *__CVEsInput) GetFilter() *CVESpec { return v.Filter }

// __CertifyBadArtifactInput is used internally by genqlient
type __CertifyBadArtifactInput struct {
	Artifact   ArtifactInputSpec   `json:"artifact"`
	CertifyBad CertifyBadInputSpec `json:"certifyBad"`
}

// GetArtifact returns __CertifyBadArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__CertifyBadArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetCertifyBad returns __CertifyBadArtifactInput.CertifyBad, and is useful for accessing the field via an interface.
func (v *__CertifyBadArtifactInput) GetCertifyBad() CertifyBadInputSpec { return v.CertifyBad }

// __CertifyBadPkgInput is used internally by genqlient
type __CertifyBadPkgInput struct {
	Pkg          PkgInputSpec        `json:"pkg"`
	PkgMatchType *MatchFlags         `json:"pkgMatchType"`
	CertifyBad   CertifyBadInputSpec `json:"certifyBad"`
}

// GetPkg returns __CertifyBadPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyBadPkgInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetPkgMatchType returns __CertifyBadPkgInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__CertifyBadPkgInput) GetPkgMatchType() *MatchFlags { return v.PkgMatchType }

// GetCertifyBad returns __CertifyBadPkgInput.CertifyBad, and is useful for accessing the field via an interface.
func (v *__CertifyBadPkgInput) GetCertifyBad() CertifyBadInputSpec { return v.CertifyBad }

// __CertifyBadSrcInput is used internally by genqlient
type __CertifyBadSrcInput struct {
	Source     SourceInputSpec     `json:"source"`
	CertifyBad CertifyBadInputSpec `json:"certifyBad"`
}

// GetSource returns __CertifyBadSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__CertifyBadSrcInput) GetSource() SourceInputSpec { return v.Source }

// GetCertifyBad returns __CertifyBadSrcInput.CertifyBad, and is useful for accessing the field via an interface.
func (v *__CertifyBadSrcInput) GetCertifyBad() CertifyBadInputSpec { return v.CertifyBad }

// __CertifyBadsInput is used internally by genqlient
type __CertifyBadsInput struct {
	Filter *CertifyBadSpec `json:"filter"`
}

// GetFilter returns __CertifyBadsInput.Filter, and is useful for accessing the field via an interface.
func (v *__CertifyBadsInput) GetFilter() *CertifyBadSpec { return v.Filter }

// __CertifyCVEInput is used internally by genqlient
type __CertifyCVEInput struct {
	Pkg         PkgInputSpec               `json:"pkg"`
	Cve         CVEInputSpec               `json:"cve"`
	CertifyVuln VulnerabilityMetaDataInput `json:"certifyVuln"`
}

// GetPkg returns __CertifyCVEInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyCVEInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetCve returns __CertifyCVEInput.Cve, and is useful for accessing the field via an interface.
func (v *__CertifyCVEInput) GetCve() CVEInputSpec { return v.Cve }

// GetCertifyVuln returns __CertifyCVEInput.CertifyVuln, and is useful for accessing the field via an interface.
func (v *__CertifyCVEInput) GetCertifyVuln() VulnerabilityMetaDataInput { return v.CertifyVuln }

// __CertifyGHSAInput is used internally by genqlient
type __CertifyGHSAInput struct {
	Pkg         PkgInputSpec               `json:"pkg"`
	Ghsa        GHSAInputSpec              `json:"ghsa"`
	CertifyVuln VulnerabilityMetaDataInput `json:"certifyVuln"`
}

// GetPkg returns __CertifyGHSAInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyGHSAInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetGhsa returns __CertifyGHSAInput.Ghsa, and is useful for accessing the field via an interface.
func (v *__CertifyGHSAInput) GetGhsa() GHSAInputSpec { return v.Ghsa }

// GetCertifyVuln returns __CertifyGHSAInput.CertifyVuln, and is useful for accessing the field via an interface.
func (v *__CertifyGHSAInput) GetCertifyVuln() VulnerabilityMetaDataInput { return v.CertifyVuln }

// __CertifyGoodArtifactInput is used internally by genqlient
type __CertifyGoodArtifactInput struct {
	Artifact    ArtifactInputSpec    `json:"artifact"`
	CertifyGood CertifyGoodInputSpec `json:"certifyGood"`
}

// GetArtifact returns __CertifyGoodArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__CertifyGoodArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetCertifyGood returns __CertifyGoodArtifactInput.CertifyGood, and is useful for accessing the field via an interface.
func (v *__CertifyGoodArtifactInput) GetCertifyGood() CertifyGoodInputSpec { return v.CertifyGood }

// __CertifyGoodPkgInput is used internally by genqlient
type __CertifyGoodPkgInput struct {
	Pkg          PkgInputSpec         `json:"pkg"`
	PkgMatchType *MatchFlags          `json:"pkgMatchType"`
	CertifyGood  CertifyGoodInputSpec `json:"certifyGood"`
}

// GetPkg returns __CertifyGoodPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyGoodPkgInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetPkgMatchType returns __CertifyGoodPkgInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__CertifyGoodPkgInput) GetPkgMatchType() *MatchFlags { return v.PkgMatchType }

// GetCertifyGood returns __CertifyGoodPkgInput.CertifyGood, and is useful for accessing the field via an interface.
func (v *__CertifyGoodPkgInput) GetCertifyGood() CertifyGoodInputSpec { return v.CertifyGood }

// __CertifyGoodSrcInput is used internally by genqlient
type __CertifyGoodSrcInput struct {
	Source      SourceInputSpec      `json:"source"`
	CertifyGood CertifyGoodInputSpec `json:"certifyGood"`
}

// GetSource returns __CertifyGoodSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__CertifyGoodSrcInput) GetSource() SourceInputSpec { return v.Source }

// GetCertifyGood returns __CertifyGoodSrcInput.CertifyGood, and is useful for accessing the field via an interface.
func (v *__CertifyGoodSrcInput) GetCertifyGood() CertifyGoodInputSpec { return v.CertifyGood }

// __CertifyNoKnownVulnInput is used internally by genqlient
type __CertifyNoKnownVulnInput struct {
	Pkg         PkgInputSpec               `json:"pkg"`
	CertifyVuln VulnerabilityMetaDataInput `json:"certifyVuln"`
}

// GetPkg returns __CertifyNoKnownVulnInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyNoKnownVulnInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetCertifyVuln returns __CertifyNoKnownVulnInput.CertifyVuln, and is useful for accessing the field via an interface.
func (v *__CertifyNoKnownVulnInput) GetCertifyVuln() VulnerabilityMetaDataInput { return v.CertifyVuln }

// __CertifyOSVInput is used internally by genqlient
type __CertifyOSVInput struct {
	Pkg         PkgInputSpec               `json:"pkg"`
	Osv         OSVInputSpec               `json:"osv"`
	CertifyVuln VulnerabilityMetaDataInput `json:"certifyVuln"`
}

// GetPkg returns __CertifyOSVInput.Pkg, and is useful for accessing the field via an interface.
func (v *__CertifyOSVInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetOsv returns __CertifyOSVInput.Osv, and is useful for accessing the field via an interface.
func (v *__CertifyOSVInput) GetOsv() OSVInputSpec { return v.Osv }

// GetCertifyVuln returns __CertifyOSVInput.CertifyVuln, and is useful for accessing the field via an interface.
func (v *__CertifyOSVInput) GetCertifyVuln() VulnerabilityMetaDataInput { return v.CertifyVuln }

// __GHSAsInput is used internally by genqlient
type __GHSAsInput struct {
	Filter *GHSASpec `json:"filter"`
}

// GetFilter returns __GHSAsInput.Filter, and is useful for accessing the field via an interface.
func (v *__GHSAsInput) GetFilter() *GHSASpec { return v.Filter }

// __HasSBOMArtifactInput is used internally by genqlient
type __HasSBOMArtifactInput struct {
	Artifact ArtifactInputSpec `json:"artifact"`
	HasSBOM  HasSBOMInputSpec  `json:"hasSBOM"`
}

// GetArtifact returns __HasSBOMArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__HasSBOMArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetHasSBOM returns __HasSBOMArtifactInput.HasSBOM, and is useful for accessing the field via an interface.
func (v *__HasSBOMArtifactInput) GetHasSBOM() HasSBOMInputSpec { return v.HasSBOM }

// __HasSBOMPkgInput is used internally by genqlient
type __HasSBOMPkgInput struct {
	Pkg     PkgInputSpec     `json:"pkg"`
	HasSBOM HasSBOMInputSpec `json:"hasSBOM"`
}

// GetPkg returns __HasSBOMPkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__HasSBOMPkgInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetHasSBOM returns __HasSBOMPkgInput.HasSBOM, and is useful for accessing the field via an interface.
func (v *__HasSBOMPkgInput) GetHasSBOM() HasSBOMInputSpec { return v.HasSBOM }

// __HasSourceAtInput is used internally by genqlient
type __HasSourceAtInput struct {
	Pkg          PkgInputSpec         `json:"pkg"`
	PkgMatchType MatchFlags           `json:"pkgMatchType"`
	Source       SourceInputSpec      `json:"source"`
	HasSourceAt  HasSourceAtInputSpec `json:"hasSourceAt"`
}

// GetPkg returns __HasSourceAtInput.Pkg, and is useful for accessing the field via an interface.
func (v *__HasSourceAtInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetPkgMatchType returns __HasSourceAtInput.PkgMatchType, and is useful for accessing the field via an interface.
func (v *__HasSourceAtInput) GetPkgMatchType() MatchFlags { return v.PkgMatchType }

// GetSource returns __HasSourceAtInput.Source, and is useful for accessing the field via an interface.
func (v *__HasSourceAtInput) GetSource() SourceInputSpec { return v.Source }

// GetHasSourceAt returns __HasSourceAtInput.HasSourceAt, and is useful for accessing the field via an interface.
func (v *__HasSourceAtInput) GetHasSourceAt() HasSourceAtInputSpec { return v.HasSourceAt }

// __HashEqualInput is used internally by genqlient
type __HashEqualInput struct {
	Artifact      ArtifactInputSpec  `json:"artifact"`
	OtherArtifact ArtifactInputSpec  `json:"otherArtifact"`
	HashEqual     HashEqualInputSpec `json:"hashEqual"`
}

// GetArtifact returns __HashEqualInput.Artifact, and is useful for accessing the field via an interface.
func (v *__HashEqualInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetOtherArtifact returns __HashEqualInput.OtherArtifact, and is useful for accessing the field via an interface.
func (v *__HashEqualInput) GetOtherArtifact() ArtifactInputSpec { return v.OtherArtifact }

// GetHashEqual returns __HashEqualInput.HashEqual, and is useful for accessing the field via an interface.
func (v *__HashEqualInput) GetHashEqual() HashEqualInputSpec { return v.HashEqual }

// __IsDependencyInput is used internally by genqlient
type __IsDependencyInput struct {
	Pkg        PkgInputSpec          `json:"pkg"`
	DepPkg     PkgInputSpec          `json:"depPkg"`
	Dependency IsDependencyInputSpec `json:"dependency"`
}

// GetPkg returns __IsDependencyInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IsDependencyInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetDepPkg returns __IsDependencyInput.DepPkg, and is useful for accessing the field via an interface.
func (v *__IsDependencyInput) GetDepPkg() PkgInputSpec { return v.DepPkg }

// GetDependency returns __IsDependencyInput.Dependency, and is useful for accessing the field via an interface.
func (v *__IsDependencyInput) GetDependency() IsDependencyInputSpec { return v.Dependency }

// __IsOccurrencePkgInput is used internally by genqlient
type __IsOccurrencePkgInput struct {
	Pkg        PkgInputSpec          `json:"pkg"`
	Artifact   ArtifactInputSpec     `json:"artifact"`
	Occurrence IsOccurrenceInputSpec `json:"occurrence"`
}

// GetPkg returns __IsOccurrencePkgInput.Pkg, and is useful for accessing the field via an interface.
func (v *__IsOccurrencePkgInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetArtifact returns __IsOccurrencePkgInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IsOccurrencePkgInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetOccurrence returns __IsOccurrencePkgInput.Occurrence, and is useful for accessing the field via an interface.
func (v *__IsOccurrencePkgInput) GetOccurrence() IsOccurrenceInputSpec { return v.Occurrence }

// __IsOccurrenceSrcInput is used internally by genqlient
type __IsOccurrenceSrcInput struct {
	Source     SourceInputSpec       `json:"source"`
	Artifact   ArtifactInputSpec     `json:"artifact"`
	Occurrence IsOccurrenceInputSpec `json:"occurrence"`
}

// GetSource returns __IsOccurrenceSrcInput.Source, and is useful for accessing the field via an interface.
func (v *__IsOccurrenceSrcInput) GetSource() SourceInputSpec { return v.Source }

// GetArtifact returns __IsOccurrenceSrcInput.Artifact, and is useful for accessing the field via an interface.
func (v *__IsOccurrenceSrcInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetOccurrence returns __IsOccurrenceSrcInput.Occurrence, and is useful for accessing the field via an interface.
func (v *__IsOccurrenceSrcInput) GetOccurrence() IsOccurrenceInputSpec { return v.Occurrence }

// __IsVulnerabilityCVEInput is used internally by genqlient
type __IsVulnerabilityCVEInput struct {
	Osv             OSVInputSpec             `json:"osv"`
	Cve             CVEInputSpec             `json:"cve"`
	IsVulnerability IsVulnerabilityInputSpec `json:"isVulnerability"`
}

// GetOsv returns __IsVulnerabilityCVEInput.Osv, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityCVEInput) GetOsv() OSVInputSpec { return v.Osv }

// GetCve returns __IsVulnerabilityCVEInput.Cve, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityCVEInput) GetCve() CVEInputSpec { return v.Cve }

// GetIsVulnerability returns __IsVulnerabilityCVEInput.IsVulnerability, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityCVEInput) GetIsVulnerability() IsVulnerabilityInputSpec {
	return v.IsVulnerability
}

// __IsVulnerabilityGHSAInput is used internally by genqlient
type __IsVulnerabilityGHSAInput struct {
	Osv             OSVInputSpec             `json:"osv"`
	Ghsa            GHSAInputSpec            `json:"ghsa"`
	IsVulnerability IsVulnerabilityInputSpec `json:"isVulnerability"`
}

// GetOsv returns __IsVulnerabilityGHSAInput.Osv, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityGHSAInput) GetOsv() OSVInputSpec { return v.Osv }

// GetGhsa returns __IsVulnerabilityGHSAInput.Ghsa, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityGHSAInput) GetGhsa() GHSAInputSpec { return v.Ghsa }

// GetIsVulnerability returns __IsVulnerabilityGHSAInput.IsVulnerability, and is useful for accessing the field via an interface.
func (v *__IsVulnerabilityGHSAInput) GetIsVulnerability() IsVulnerabilityInputSpec {
	return v.IsVulnerability
}

// __NeighborsInput is used internally by genqlient
type __NeighborsInput struct {
	Node      string `json:"node"`
	UsingOnly []Edge `json:"usingOnly"`
}

// GetNode returns __NeighborsInput.Node, and is useful for accessing the field via an interface.
func (v *__NeighborsInput) GetNode() string { return v.Node }

// GetUsingOnly returns __NeighborsInput.UsingOnly, and is useful for accessing the field via an interface.
func (v *__NeighborsInput) GetUsingOnly() []Edge { return v.UsingOnly }

// __NodeInput is used internally by genqlient
type __NodeInput struct {
	Node string `json:"node"`
}

// GetNode returns __NodeInput.Node, and is useful for accessing the field via an interface.
func (v *__NodeInput) GetNode() string { return v.Node }

// __NodesInput is used internally by genqlient
type __NodesInput struct {
	Nodes []string `json:"nodes"`
}

// GetNodes returns __NodesInput.Nodes, and is useful for accessing the field via an interface.
func (v *__NodesInput) GetNodes() []string { return v.Nodes }

// __OSVsInput is used internally by genqlient
type __OSVsInput struct {
	Filter *OSVSpec `json:"filter"`
}

// GetFilter returns __OSVsInput.Filter, and is useful for accessing the field via an interface.
func (v *__OSVsInput) GetFilter() *OSVSpec { return v.Filter }

// __PackagesInput is used internally by genqlient
type __PackagesInput struct {
	Filter *PkgSpec `json:"filter"`
}

// GetFilter returns __PackagesInput.Filter, and is useful for accessing the field via an interface.
func (v *__PackagesInput) GetFilter() *PkgSpec { return v.Filter }

// __PathInput is used internally by genqlient
type __PathInput struct {
	Subject       string `json:"subject"`
	Target        string `json:"target"`
	MaxPathLength int    `json:"maxPathLength"`
	UsingOnly     []Edge `json:"usingOnly"`
}

// GetSubject returns __PathInput.Subject, and is useful for accessing the field via an interface.
func (v *__PathInput) GetSubject() string { return v.Subject }

// GetTarget returns __PathInput.Target, and is useful for accessing the field via an interface.
func (v *__PathInput) GetTarget() string { return v.Target }

// GetMaxPathLength returns __PathInput.MaxPathLength, and is useful for accessing the field via an interface.
func (v *__PathInput) GetMaxPathLength() int { return v.MaxPathLength }

// GetUsingOnly returns __PathInput.UsingOnly, and is useful for accessing the field via an interface.
func (v *__PathInput) GetUsingOnly() []Edge { return v.UsingOnly }

// __PkgEqualInput is used internally by genqlient
type __PkgEqualInput struct {
	Pkg          PkgInputSpec      `json:"pkg"`
	OtherPackage PkgInputSpec      `json:"otherPackage"`
	PkgEqual     PkgEqualInputSpec `json:"pkgEqual"`
}

// GetPkg returns __PkgEqualInput.Pkg, and is useful for accessing the field via an interface.
func (v *__PkgEqualInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetOtherPackage returns __PkgEqualInput.OtherPackage, and is useful for accessing the field via an interface.
func (v *__PkgEqualInput) GetOtherPackage() PkgInputSpec { return v.OtherPackage }

// GetPkgEqual returns __PkgEqualInput.PkgEqual, and is useful for accessing the field via an interface.
func (v *__PkgEqualInput) GetPkgEqual() PkgEqualInputSpec { return v.PkgEqual }

// __SLSAForArtifactInput is used internally by genqlient
type __SLSAForArtifactInput struct {
	Artifact  ArtifactInputSpec   `json:"artifact"`
	Materials []ArtifactInputSpec `json:"materials"`
	Builder   BuilderInputSpec    `json:"builder"`
	Slsa      SLSAInputSpec       `json:"slsa"`
}

// GetArtifact returns __SLSAForArtifactInput.Artifact, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetMaterials returns __SLSAForArtifactInput.Materials, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactInput) GetMaterials() []ArtifactInputSpec { return v.Materials }

// GetBuilder returns __SLSAForArtifactInput.Builder, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactInput) GetBuilder() BuilderInputSpec { return v.Builder }

// GetSlsa returns __SLSAForArtifactInput.Slsa, and is useful for accessing the field via an interface.
func (v *__SLSAForArtifactInput) GetSlsa() SLSAInputSpec { return v.Slsa }

// __ScorecardInput is used internally by genqlient
type __ScorecardInput struct {
	Source    SourceInputSpec    `json:"source"`
	Scorecard ScorecardInputSpec `json:"scorecard"`
}

// GetSource returns __ScorecardInput.Source, and is useful for accessing the field via an interface.
func (v *__ScorecardInput) GetSource() SourceInputSpec { return v.Source }

// GetScorecard returns __ScorecardInput.Scorecard, and is useful for accessing the field via an interface.
func (v *__ScorecardInput) GetScorecard() ScorecardInputSpec { return v.Scorecard }

// __SourcesInput is used internally by genqlient
type __SourcesInput struct {
	Filter *SourceSpec `json:"filter"`
}

// GetFilter returns __SourcesInput.Filter, and is useful for accessing the field via an interface.
func (v *__SourcesInput) GetFilter() *SourceSpec { return v.Filter }

// __VEXPackageAndGhsaInput is used internally by genqlient
type __VEXPackageAndGhsaInput struct {
	Pkg          PkgInputSpec          `json:"pkg"`
	Ghsa         GHSAInputSpec         `json:"ghsa"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetPkg returns __VEXPackageAndGhsaInput.Pkg, and is useful for accessing the field via an interface.
func (v *__VEXPackageAndGhsaInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetGhsa returns __VEXPackageAndGhsaInput.Ghsa, and is useful for accessing the field via an interface.
func (v *__VEXPackageAndGhsaInput) GetGhsa() GHSAInputSpec { return v.Ghsa }

// GetVexStatement returns __VEXPackageAndGhsaInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VEXPackageAndGhsaInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __VexArtifactAndCveInput is used internally by genqlient
type __VexArtifactAndCveInput struct {
	Artifact     ArtifactInputSpec     `json:"artifact"`
	Cve          CVEInputSpec          `json:"cve"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetArtifact returns __VexArtifactAndCveInput.Artifact, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndCveInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetCve returns __VexArtifactAndCveInput.Cve, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndCveInput) GetCve() CVEInputSpec { return v.Cve }

// GetVexStatement returns __VexArtifactAndCveInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndCveInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __VexArtifactAndGhsaInput is used internally by genqlient
type __VexArtifactAndGhsaInput struct {
	Artifact     ArtifactInputSpec     `json:"artifact"`
	Ghsa         GHSAInputSpec         `json:"ghsa"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetArtifact returns __VexArtifactAndGhsaInput.Artifact, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndGhsaInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetGhsa returns __VexArtifactAndGhsaInput.Ghsa, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndGhsaInput) GetGhsa() GHSAInputSpec { return v.Ghsa }

// GetVexStatement returns __VexArtifactAndGhsaInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndGhsaInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __VexArtifactAndOsvInput is used internally by genqlient
type __VexArtifactAndOsvInput struct {
	Artifact     ArtifactInputSpec     `json:"artifact"`
	Osv          OSVInputSpec          `json:"osv"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetArtifact returns __VexArtifactAndOsvInput.Artifact, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndOsvInput) GetArtifact() ArtifactInputSpec { return v.Artifact }

// GetOsv returns __VexArtifactAndOsvInput.Osv, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndOsvInput) GetOsv() OSVInputSpec { return v.Osv }

// GetVexStatement returns __VexArtifactAndOsvInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VexArtifactAndOsvInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __VexPackageAndCveInput is used internally by genqlient
type __VexPackageAndCveInput struct {
	Pkg          PkgInputSpec          `json:"pkg"`
	Cve          CVEInputSpec          `json:"cve"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetPkg returns __VexPackageAndCveInput.Pkg, and is useful for accessing the field via an interface.
func (v *__VexPackageAndCveInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetCve returns __VexPackageAndCveInput.Cve, and is useful for accessing the field via an interface.
func (v *__VexPackageAndCveInput) GetCve() CVEInputSpec { return v.Cve }

// GetVexStatement returns __VexPackageAndCveInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VexPackageAndCveInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// __VexPackageAndOsvInput is used internally by genqlient
type __VexPackageAndOsvInput struct {
	Pkg          PkgInputSpec          `json:"pkg"`
	Osv          OSVInputSpec          `json:"osv"`
	VexStatement VexStatementInputSpec `json:"vexStatement"`
}

// GetPkg returns __VexPackageAndOsvInput.Pkg, and is useful for accessing the field via an interface.
func (v *__VexPackageAndOsvInput) GetPkg() PkgInputSpec { return v.Pkg }

// GetOsv returns __VexPackageAndOsvInput.Osv, and is useful for accessing the field via an interface.
func (v *__VexPackageAndOsvInput) GetOsv() OSVInputSpec { return v.Osv }

// GetVexStatement returns __VexPackageAndOsvInput.VexStatement, and is useful for accessing the field via an interface.
func (v *__VexPackageAndOsvInput) GetVexStatement() VexStatementInputSpec { return v.VexStatement }

// allBuilderTree includes the GraphQL fields of Builder requested by the fragment allBuilderTree.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type allBuilderTree struct {
	Id  string `json:"id"`
	Uri string `json:"uri"`
}

// GetId returns allBuilderTree.Id, and is useful for accessing the field via an interface.
func (v *allBuilderTree) GetId() string { return v.Id }

// GetUri returns allBuilderTree.Uri, and is useful for accessing the field via an interface.
func (v *allBuilderTree) GetUri() string { return v.Uri }

// allCertifyGood includes the GraphQL fields of CertifyGood requested by the fragment allCertifyGood.
// The GraphQL type's documentation follows.
//
// CertifyGood is an attestation that a package, source, or artifact is considered
// good.
//
// All evidence trees record a justification for the property they represent as
// well as the document that contains the attestation (origin) and the collector
// that collected the document (collector).
//
// The certification applies to a subject which is a package, source, or artifact.
// If the attestation targets a package, it must target a PackageName or a
// PackageVersion. If the attestation targets a source, it must target a
// SourceName.
type allCertifyGood struct {
	Id            string                                       `json:"id"`
	Justification string                                       `json:"justification"`
	Subject       allCertifyGoodSubjectPackageSourceOrArtifact `json:"-"`
	Origin        string                                       `json:"origin"`
	Collector     string                                       `json:"collector"`
}

// GetId returns allCertifyGood.Id, and is useful for accessing the field via an interface.
func (v *allCertifyGood) GetId() string { return v.Id }

// GetJustification returns allCertifyGood.Justification, and is useful for accessing the field via an interface.
func (v *allCertifyGood) GetJustification() string { return v.Justification }

// GetSubject returns allCertifyGood.Subject, and is useful for accessing the field via an interface.
func (v *allCertifyGood) GetSubject() allCertifyGoodSubjectPackageSourceOrArtifact { return v.Subject }

// GetOrigin returns allCertifyGood.Origin, and is useful for accessing the field via an interface.
func (v *allCertifyGood) GetOrigin() string { return v.Origin }

// GetCollector returns allCertifyGood.Collector, and is useful for accessing the field via an interface.
func (v *allCertifyGood) GetCollector() string { return v.Collector }

func (v *allCertifyGood) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allCertifyGood
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.allCertifyGood = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalallCertifyGoodSubjectPackageSourceOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal allCertifyGood.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalallCertifyGood struct {
	Id string `json:"id"`

	Justification string `json:"justification"`

	Subject json.RawMessage `json:"subject"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *allCertifyGood) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allCertifyGood) __premarshalJSON() (*__premarshalallCertifyGood, error) {
	var retval __premarshalallCertifyGood

	retval.Id = v.Id
	retval.Justification = v.Justification
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalallCertifyGoodSubjectPackageSourceOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal allCertifyGood.Subject: %w", err)
		}
	}
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// allCertifyGoodSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type allCertifyGoodSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns allCertifyGoodSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns allCertifyGoodSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns allCertifyGoodSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns allCertifyGoodSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *allCertifyGoodSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allCertifyGoodSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.allCertifyGoodSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallCertifyGoodSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *allCertifyGoodSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allCertifyGoodSubjectArtifact) __premarshalJSON() (*__premarshalallCertifyGoodSubjectArtifact, error) {
	var retval __premarshalallCertifyGoodSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// allCertifyGoodSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type allCertifyGoodSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns allCertifyGoodSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns allCertifyGoodSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns allCertifyGoodSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns allCertifyGoodSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *allCertifyGoodSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allCertifyGoodSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.allCertifyGoodSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallCertifyGoodSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *allCertifyGoodSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allCertifyGoodSubjectPackage) __premarshalJSON() (*__premarshalallCertifyGoodSubjectPackage, error) {
	var retval __premarshalallCertifyGoodSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// allCertifyGoodSubjectPackageSourceOrArtifact includes the requested fields of the GraphQL interface PackageSourceOrArtifact.
//
// allCertifyGoodSubjectPackageSourceOrArtifact is implemented by the following types:
// allCertifyGoodSubjectPackage
// allCertifyGoodSubjectSource
// allCertifyGoodSubjectArtifact
// The GraphQL type's documentation follows.
//
// PackageSourceOrArtifact is a union of Package, Source, and Artifact.
type allCertifyGoodSubjectPackageSourceOrArtifact interface {
	implementsGraphQLInterfaceallCertifyGoodSubjectPackageSourceOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *allCertifyGoodSubjectPackage) implementsGraphQLInterfaceallCertifyGoodSubjectPackageSourceOrArtifact() {
}
func (v *allCertifyGoodSubjectSource) implementsGraphQLInterfaceallCertifyGoodSubjectPackageSourceOrArtifact() {
}
func (v *allCertifyGoodSubjectArtifact) implementsGraphQLInterfaceallCertifyGoodSubjectPackageSourceOrArtifact() {
}

func __unmarshalallCertifyGoodSubjectPackageSourceOrArtifact(b []byte, v *allCertifyGoodSubjectPackageSourceOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(allCertifyGoodSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Source":
		*v = new(allCertifyGoodSubjectSource)
		return json.Unmarshal(b, *v)
	case "Artifact":
		*v = new(allCertifyGoodSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageSourceOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for allCertifyGoodSubjectPackageSourceOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalallCertifyGoodSubjectPackageSourceOrArtifact(v *allCertifyGoodSubjectPackageSourceOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *allCertifyGoodSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallCertifyGoodSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *allCertifyGoodSubjectSource:
		typename = "Source"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallCertifyGoodSubjectSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *allCertifyGoodSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallCertifyGoodSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for allCertifyGoodSubjectPackageSourceOrArtifact: "%T"`, v)
	}
}

// allCertifyGoodSubjectSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type allCertifyGoodSubjectSource struct {
	Typename      *string `json:"__typename"`
	AllSourceTree `json:"-"`
}

// GetTypename returns allCertifyGoodSubjectSource.Typename, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectSource) GetTypename() *string { return v.Typename }

// GetId returns allCertifyGoodSubjectSource.Id, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns allCertifyGoodSubjectSource.Type, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns allCertifyGoodSubjectSource.Namespaces, and is useful for accessing the field via an interface.
func (v *allCertifyGoodSubjectSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *allCertifyGoodSubjectSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allCertifyGoodSubjectSource
		graphql.NoUnmarshalJSON
	}
	firstPass.allCertifyGoodSubjectSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallCertifyGoodSubjectSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *allCertifyGoodSubjectSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allCertifyGoodSubjectSource) __premarshalJSON() (*__premarshalallCertifyGoodSubjectSource, error) {
	var retval __premarshalallCertifyGoodSubjectSource

	retval.Typename = v.Typename
	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// allCertifyVEXStatement includes the GraphQL fields of CertifyVEXStatement requested by the fragment allCertifyVEXStatement.
// The GraphQL type's documentation follows.
//
// CertifyVEXStatement is an attestation to attach VEX statements to a package or
// artifact to clarify the impact of a specific vulnerability (CVE, GHSA or OSV).
type allCertifyVEXStatement struct {
	Id string `json:"id"`
	// Subject of attestation
	Subject allCertifyVEXStatementSubjectPackageOrArtifact `json:"-"`
	// Attested vulnerability
	Vulnerability allCertifyVEXStatementVulnerability `json:"-"`
	// Status of the vulnerabilities with respect to the subject
	Status VexStatus `json:"status"`
	// Justification from VEX statement
	VexJustification VexJustification `json:"vexJustification"`
	// VEX statement: impact_statement or action_statement depending on status
	Statement string `json:"statement"`
	// statusNotes may convey information about how status was determined
	StatusNotes string `json:"statusNotes"`
	// Timestamp (exact time in RFC 3339 format) for the VEX statement
	KnownSince time.Time `json:"knownSince"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns allCertifyVEXStatement.Id, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatement) GetId() string { return v.Id }

// GetSubject returns allCertifyVEXStatement.Subject, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatement) GetSubject() allCertifyVEXStatementSubjectPackageOrArtifact {
	return v.Subject
}

// GetVulnerability returns allCertifyVEXStatement.Vulnerability, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatement) GetVulnerability() allCertifyVEXStatementVulnerability {
	return v.Vulnerability
}

// GetStatus returns allCertifyVEXStatement.Status, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatement) GetStatus() VexStatus { return v.Status }

// GetVexJustification returns allCertifyVEXStatement.VexJustification, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatement) GetVexJustification() VexJustification { return v.VexJustification }

// GetStatement returns allCertifyVEXStatement.Statement, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatement) GetStatement() string { return v.Statement }

// GetStatusNotes returns allCertifyVEXStatement.StatusNotes, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatement) GetStatusNotes() string { return v.StatusNotes }

// GetKnownSince returns allCertifyVEXStatement.KnownSince, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatement) GetKnownSince() time.Time { return v.KnownSince }

// GetOrigin returns allCertifyVEXStatement.Origin, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatement) GetOrigin() string { return v.Origin }

// GetCollector returns allCertifyVEXStatement.Collector, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatement) GetCollector() string { return v.Collector }

func (v *allCertifyVEXStatement) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allCertifyVEXStatement
		Subject       json.RawMessage `json:"subject"`
		Vulnerability json.RawMessage `json:"vulnerability"`
		graphql.NoUnmarshalJSON
	}
	firstPass.allCertifyVEXStatement = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalallCertifyVEXStatementSubjectPackageOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal allCertifyVEXStatement.Subject: %w", err)
			}
		}
	}

	{
		dst := &v.Vulnerability
		src := firstPass.Vulnerability
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalallCertifyVEXStatementVulnerability(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal allCertifyVEXStatement.Vulnerability: %w", err)
			}
		}
	}
	return nil
}

type __premarshalallCertifyVEXStatement struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Status VexStatus `json:"status"`

	VexJustification VexJustification `json:"vexJustification"`

	Statement string `json:"statement"`

	StatusNotes string `json:"statusNotes"`

	KnownSince time.Time `json:"knownSince"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *allCertifyVEXStatement) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allCertifyVEXStatement) __premarshalJSON() (*__premarshalallCertifyVEXStatement, error) {
	var retval __premarshalallCertifyVEXStatement

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalallCertifyVEXStatementSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal allCertifyVEXStatement.Subject: %w", err)
		}
	}
	{

		dst := &retval.Vulnerability
		src := v.Vulnerability
		var err error
		*dst, err = __marshalallCertifyVEXStatementVulnerability(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal allCertifyVEXStatement.Vulnerability: %w", err)
		}
	}
	retval.Status = v.Status
	retval.VexJustification = v.VexJustification
	retval.Statement = v.Statement
	retval.StatusNotes = v.StatusNotes
	retval.KnownSince = v.KnownSince
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// allCertifyVEXStatementSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type allCertifyVEXStatementSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns allCertifyVEXStatementSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns allCertifyVEXStatementSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns allCertifyVEXStatementSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementSubjectArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns allCertifyVEXStatementSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *allCertifyVEXStatementSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allCertifyVEXStatementSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.allCertifyVEXStatementSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallCertifyVEXStatementSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *allCertifyVEXStatementSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allCertifyVEXStatementSubjectArtifact) __premarshalJSON() (*__premarshalallCertifyVEXStatementSubjectArtifact, error) {
	var retval __premarshalallCertifyVEXStatementSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// allCertifyVEXStatementSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type allCertifyVEXStatementSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns allCertifyVEXStatementSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns allCertifyVEXStatementSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns allCertifyVEXStatementSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns allCertifyVEXStatementSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *allCertifyVEXStatementSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allCertifyVEXStatementSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.allCertifyVEXStatementSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallCertifyVEXStatementSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *allCertifyVEXStatementSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allCertifyVEXStatementSubjectPackage) __premarshalJSON() (*__premarshalallCertifyVEXStatementSubjectPackage, error) {
	var retval __premarshalallCertifyVEXStatementSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// allCertifyVEXStatementSubjectPackageOrArtifact includes the requested fields of the GraphQL interface PackageOrArtifact.
//
// allCertifyVEXStatementSubjectPackageOrArtifact is implemented by the following types:
// allCertifyVEXStatementSubjectPackage
// allCertifyVEXStatementSubjectArtifact
// The GraphQL type's documentation follows.
//
// PackageOrArtifact is a union of Package and Artifact.
type allCertifyVEXStatementSubjectPackageOrArtifact interface {
	implementsGraphQLInterfaceallCertifyVEXStatementSubjectPackageOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *allCertifyVEXStatementSubjectPackage) implementsGraphQLInterfaceallCertifyVEXStatementSubjectPackageOrArtifact() {
}
func (v *allCertifyVEXStatementSubjectArtifact) implementsGraphQLInterfaceallCertifyVEXStatementSubjectPackageOrArtifact() {
}

func __unmarshalallCertifyVEXStatementSubjectPackageOrArtifact(b []byte, v *allCertifyVEXStatementSubjectPackageOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(allCertifyVEXStatementSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Artifact":
		*v = new(allCertifyVEXStatementSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for allCertifyVEXStatementSubjectPackageOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalallCertifyVEXStatementSubjectPackageOrArtifact(v *allCertifyVEXStatementSubjectPackageOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *allCertifyVEXStatementSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallCertifyVEXStatementSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *allCertifyVEXStatementSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallCertifyVEXStatementSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for allCertifyVEXStatementSubjectPackageOrArtifact: "%T"`, v)
	}
}

// allCertifyVEXStatementVulnerability includes the requested fields of the GraphQL interface Vulnerability.
//
// allCertifyVEXStatementVulnerability is implemented by the following types:
// allCertifyVEXStatementVulnerabilityOSV
// allCertifyVEXStatementVulnerabilityCVE
// allCertifyVEXStatementVulnerabilityGHSA
// allCertifyVEXStatementVulnerabilityNoVuln
// The GraphQL type's documentation follows.
//
// Vulnerability is a union of OSV, CVE, GHSA or the NoVuln node.
type allCertifyVEXStatementVulnerability interface {
	implementsGraphQLInterfaceallCertifyVEXStatementVulnerability()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *allCertifyVEXStatementVulnerabilityOSV) implementsGraphQLInterfaceallCertifyVEXStatementVulnerability() {
}
func (v *allCertifyVEXStatementVulnerabilityCVE) implementsGraphQLInterfaceallCertifyVEXStatementVulnerability() {
}
func (v *allCertifyVEXStatementVulnerabilityGHSA) implementsGraphQLInterfaceallCertifyVEXStatementVulnerability() {
}
func (v *allCertifyVEXStatementVulnerabilityNoVuln) implementsGraphQLInterfaceallCertifyVEXStatementVulnerability() {
}

func __unmarshalallCertifyVEXStatementVulnerability(b []byte, v *allCertifyVEXStatementVulnerability) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "OSV":
		*v = new(allCertifyVEXStatementVulnerabilityOSV)
		return json.Unmarshal(b, *v)
	case "CVE":
		*v = new(allCertifyVEXStatementVulnerabilityCVE)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(allCertifyVEXStatementVulnerabilityGHSA)
		return json.Unmarshal(b, *v)
	case "NoVuln":
		*v = new(allCertifyVEXStatementVulnerabilityNoVuln)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Vulnerability.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for allCertifyVEXStatementVulnerability: "%v"`, tn.TypeName)
	}
}

func __marshalallCertifyVEXStatementVulnerability(v *allCertifyVEXStatementVulnerability) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *allCertifyVEXStatementVulnerabilityOSV:
		typename = "OSV"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallCertifyVEXStatementVulnerabilityOSV
		}{typename, premarshaled}
		return json.Marshal(result)
	case *allCertifyVEXStatementVulnerabilityCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallCertifyVEXStatementVulnerabilityCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *allCertifyVEXStatementVulnerabilityGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallCertifyVEXStatementVulnerabilityGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case *allCertifyVEXStatementVulnerabilityNoVuln:
		typename = "NoVuln"

		result := struct {
			TypeName string `json:"__typename"`
			*allCertifyVEXStatementVulnerabilityNoVuln
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for allCertifyVEXStatementVulnerability: "%T"`, v)
	}
}

// allCertifyVEXStatementVulnerabilityCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type allCertifyVEXStatementVulnerabilityCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns allCertifyVEXStatementVulnerabilityCVE.Typename, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityCVE) GetTypename() *string { return v.Typename }

// GetId returns allCertifyVEXStatementVulnerabilityCVE.Id, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns allCertifyVEXStatementVulnerabilityCVE.Year, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns allCertifyVEXStatementVulnerabilityCVE.CveId, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *allCertifyVEXStatementVulnerabilityCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allCertifyVEXStatementVulnerabilityCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.allCertifyVEXStatementVulnerabilityCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallCertifyVEXStatementVulnerabilityCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *allCertifyVEXStatementVulnerabilityCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allCertifyVEXStatementVulnerabilityCVE) __premarshalJSON() (*__premarshalallCertifyVEXStatementVulnerabilityCVE, error) {
	var retval __premarshalallCertifyVEXStatementVulnerabilityCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// allCertifyVEXStatementVulnerabilityGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type allCertifyVEXStatementVulnerabilityGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns allCertifyVEXStatementVulnerabilityGHSA.Typename, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityGHSA) GetTypename() *string { return v.Typename }

// GetId returns allCertifyVEXStatementVulnerabilityGHSA.Id, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns allCertifyVEXStatementVulnerabilityGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *allCertifyVEXStatementVulnerabilityGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allCertifyVEXStatementVulnerabilityGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.allCertifyVEXStatementVulnerabilityGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallCertifyVEXStatementVulnerabilityGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *allCertifyVEXStatementVulnerabilityGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allCertifyVEXStatementVulnerabilityGHSA) __premarshalJSON() (*__premarshalallCertifyVEXStatementVulnerabilityGHSA, error) {
	var retval __premarshalallCertifyVEXStatementVulnerabilityGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// allCertifyVEXStatementVulnerabilityNoVuln includes the requested fields of the GraphQL type NoVuln.
// The GraphQL type's documentation follows.
//
// NoVuln is a special vulnerability node to attest that no vulnerability has been
// found during a vulnerability scan.
//
// Backends guarantee that this is a singleton node.
type allCertifyVEXStatementVulnerabilityNoVuln struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns allCertifyVEXStatementVulnerabilityNoVuln.Typename, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityNoVuln) GetTypename() *string { return v.Typename }

// allCertifyVEXStatementVulnerabilityOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type allCertifyVEXStatementVulnerabilityOSV struct {
	Typename   *string `json:"__typename"`
	AllOSVTree `json:"-"`
}

// GetTypename returns allCertifyVEXStatementVulnerabilityOSV.Typename, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityOSV) GetTypename() *string { return v.Typename }

// GetId returns allCertifyVEXStatementVulnerabilityOSV.Id, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns allCertifyVEXStatementVulnerabilityOSV.OsvId, and is useful for accessing the field via an interface.
func (v *allCertifyVEXStatementVulnerabilityOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *allCertifyVEXStatementVulnerabilityOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allCertifyVEXStatementVulnerabilityOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.allCertifyVEXStatementVulnerabilityOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallCertifyVEXStatementVulnerabilityOSV struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *allCertifyVEXStatementVulnerabilityOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allCertifyVEXStatementVulnerabilityOSV) __premarshalJSON() (*__premarshalallCertifyVEXStatementVulnerabilityOSV, error) {
	var retval __premarshalallCertifyVEXStatementVulnerabilityOSV

	retval.Typename = v.Typename
	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// allHasSBOMTree includes the GraphQL fields of HasSBOM requested by the fragment allHasSBOMTree.
type allHasSBOMTree struct {
	Id string `json:"id"`
	// SBOM subject
	Subject allHasSBOMTreeSubjectPackageOrArtifact `json:"-"`
	// Identifier for the SBOM document
	Uri string `json:"uri"`
	// Algorithm by which SBOMs digest was computed
	Algorithm string `json:"algorithm"`
	// Digest of SBOM
	Digest string `json:"digest"`
	// Location from which the SBOM can be downloaded
	DownloadLocation string `json:"downloadLocation"`
	// SBOM annotations (e.g., SBOM Scorecard information)
	Annotations []allHasSBOMTreeAnnotationsAnnotation `json:"annotations"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns allHasSBOMTree.Id, and is useful for accessing the field via an interface.
func (v *allHasSBOMTree) GetId() string { return v.Id }

// GetSubject returns allHasSBOMTree.Subject, and is useful for accessing the field via an interface.
func (v *allHasSBOMTree) GetSubject() allHasSBOMTreeSubjectPackageOrArtifact { return v.Subject }

// GetUri returns allHasSBOMTree.Uri, and is useful for accessing the field via an interface.
func (v *allHasSBOMTree) GetUri() string { return v.Uri }

// GetAlgorithm returns allHasSBOMTree.Algorithm, and is useful for accessing the field via an interface.
func (v *allHasSBOMTree) GetAlgorithm() string { return v.Algorithm }

// GetDigest returns allHasSBOMTree.Digest, and is useful for accessing the field via an interface.
func (v *allHasSBOMTree) GetDigest() string { return v.Digest }

// GetDownloadLocation returns allHasSBOMTree.DownloadLocation, and is useful for accessing the field via an interface.
func (v *allHasSBOMTree) GetDownloadLocation() string { return v.DownloadLocation }

// GetAnnotations returns allHasSBOMTree.Annotations, and is useful for accessing the field via an interface.
func (v *allHasSBOMTree) GetAnnotations() []allHasSBOMTreeAnnotationsAnnotation { return v.Annotations }

// GetOrigin returns allHasSBOMTree.Origin, and is useful for accessing the field via an interface.
func (v *allHasSBOMTree) GetOrigin() string { return v.Origin }

// GetCollector returns allHasSBOMTree.Collector, and is useful for accessing the field via an interface.
func (v *allHasSBOMTree) GetCollector() string { return v.Collector }

func (v *allHasSBOMTree) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allHasSBOMTree
		Subject json.RawMessage `json:"subject"`
		graphql.NoUnmarshalJSON
	}
	firstPass.allHasSBOMTree = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subject
		src := firstPass.Subject
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalallHasSBOMTreeSubjectPackageOrArtifact(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal allHasSBOMTree.Subject: %w", err)
			}
		}
	}
	return nil
}

type __premarshalallHasSBOMTree struct {
	Id string `json:"id"`

	Subject json.RawMessage `json:"subject"`

	Uri string `json:"uri"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`

	DownloadLocation string `json:"downloadLocation"`

	Annotations []allHasSBOMTreeAnnotationsAnnotation `json:"annotations"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *allHasSBOMTree) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allHasSBOMTree) __premarshalJSON() (*__premarshalallHasSBOMTree, error) {
	var retval __premarshalallHasSBOMTree

	retval.Id = v.Id
	{

		dst := &retval.Subject
		src := v.Subject
		var err error
		*dst, err = __marshalallHasSBOMTreeSubjectPackageOrArtifact(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal allHasSBOMTree.Subject: %w", err)
		}
	}
	retval.Uri = v.Uri
	retval.Algorithm = v.Algorithm
	retval.Digest = v.Digest
	retval.DownloadLocation = v.DownloadLocation
	retval.Annotations = v.Annotations
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// allHasSBOMTreeAnnotationsAnnotation includes the requested fields of the GraphQL type Annotation.
// The GraphQL type's documentation follows.
//
// Annotation is a key-value pair to provide additional information or metadata
// about an SBOM.
type allHasSBOMTreeAnnotationsAnnotation struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns allHasSBOMTreeAnnotationsAnnotation.Key, and is useful for accessing the field via an interface.
func (v *allHasSBOMTreeAnnotationsAnnotation) GetKey() string { return v.Key }

// GetValue returns allHasSBOMTreeAnnotationsAnnotation.Value, and is useful for accessing the field via an interface.
func (v *allHasSBOMTreeAnnotationsAnnotation) GetValue() string { return v.Value }

// allHasSBOMTreeSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type allHasSBOMTreeSubjectArtifact struct {
	Typename        *string `json:"__typename"`
	AllArtifactTree `json:"-"`
}

// GetTypename returns allHasSBOMTreeSubjectArtifact.Typename, and is useful for accessing the field via an interface.
func (v *allHasSBOMTreeSubjectArtifact) GetTypename() *string { return v.Typename }

// GetId returns allHasSBOMTreeSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *allHasSBOMTreeSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns allHasSBOMTreeSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *allHasSBOMTreeSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns allHasSBOMTreeSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *allHasSBOMTreeSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *allHasSBOMTreeSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allHasSBOMTreeSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.allHasSBOMTreeSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallHasSBOMTreeSubjectArtifact struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *allHasSBOMTreeSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allHasSBOMTreeSubjectArtifact) __premarshalJSON() (*__premarshalallHasSBOMTreeSubjectArtifact, error) {
	var retval __premarshalallHasSBOMTreeSubjectArtifact

	retval.Typename = v.Typename
	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// allHasSBOMTreeSubjectPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type allHasSBOMTreeSubjectPackage struct {
	Typename   *string `json:"__typename"`
	AllPkgTree `json:"-"`
}

// GetTypename returns allHasSBOMTreeSubjectPackage.Typename, and is useful for accessing the field via an interface.
func (v *allHasSBOMTreeSubjectPackage) GetTypename() *string { return v.Typename }

// GetId returns allHasSBOMTreeSubjectPackage.Id, and is useful for accessing the field via an interface.
func (v *allHasSBOMTreeSubjectPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns allHasSBOMTreeSubjectPackage.Type, and is useful for accessing the field via an interface.
func (v *allHasSBOMTreeSubjectPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns allHasSBOMTreeSubjectPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *allHasSBOMTreeSubjectPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *allHasSBOMTreeSubjectPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allHasSBOMTreeSubjectPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.allHasSBOMTreeSubjectPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallHasSBOMTreeSubjectPackage struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *allHasSBOMTreeSubjectPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allHasSBOMTreeSubjectPackage) __premarshalJSON() (*__premarshalallHasSBOMTreeSubjectPackage, error) {
	var retval __premarshalallHasSBOMTreeSubjectPackage

	retval.Typename = v.Typename
	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// allHasSBOMTreeSubjectPackageOrArtifact includes the requested fields of the GraphQL interface PackageOrArtifact.
//
// allHasSBOMTreeSubjectPackageOrArtifact is implemented by the following types:
// allHasSBOMTreeSubjectPackage
// allHasSBOMTreeSubjectArtifact
// The GraphQL type's documentation follows.
//
// PackageOrArtifact is a union of Package and Artifact.
type allHasSBOMTreeSubjectPackageOrArtifact interface {
	implementsGraphQLInterfaceallHasSBOMTreeSubjectPackageOrArtifact()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *allHasSBOMTreeSubjectPackage) implementsGraphQLInterfaceallHasSBOMTreeSubjectPackageOrArtifact() {
}
func (v *allHasSBOMTreeSubjectArtifact) implementsGraphQLInterfaceallHasSBOMTreeSubjectPackageOrArtifact() {
}

func __unmarshalallHasSBOMTreeSubjectPackageOrArtifact(b []byte, v *allHasSBOMTreeSubjectPackageOrArtifact) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Package":
		*v = new(allHasSBOMTreeSubjectPackage)
		return json.Unmarshal(b, *v)
	case "Artifact":
		*v = new(allHasSBOMTreeSubjectArtifact)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOrArtifact.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for allHasSBOMTreeSubjectPackageOrArtifact: "%v"`, tn.TypeName)
	}
}

func __marshalallHasSBOMTreeSubjectPackageOrArtifact(v *allHasSBOMTreeSubjectPackageOrArtifact) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *allHasSBOMTreeSubjectPackage:
		typename = "Package"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallHasSBOMTreeSubjectPackage
		}{typename, premarshaled}
		return json.Marshal(result)
	case *allHasSBOMTreeSubjectArtifact:
		typename = "Artifact"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallHasSBOMTreeSubjectArtifact
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for allHasSBOMTreeSubjectPackageOrArtifact: "%T"`, v)
	}
}

// allHasSourceAt includes the GraphQL fields of HasSourceAt requested by the fragment allHasSourceAt.
// The GraphQL type's documentation follows.
//
// HasSourceAt records that a package's repository is a given source.
type allHasSourceAt struct {
	Id string `json:"id"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Timestamp since this link between package and source was certified
	KnownSince time.Time `json:"knownSince"`
	// The subject of the attestation: can be a PackageName or a PackageVersion
	Package allHasSourceAtPackage `json:"package"`
	// Source repository from which the package is built
	Source allHasSourceAtSource `json:"source"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns allHasSourceAt.Id, and is useful for accessing the field via an interface.
func (v *allHasSourceAt) GetId() string { return v.Id }

// GetJustification returns allHasSourceAt.Justification, and is useful for accessing the field via an interface.
func (v *allHasSourceAt) GetJustification() string { return v.Justification }

// GetKnownSince returns allHasSourceAt.KnownSince, and is useful for accessing the field via an interface.
func (v *allHasSourceAt) GetKnownSince() time.Time { return v.KnownSince }

// GetPackage returns allHasSourceAt.Package, and is useful for accessing the field via an interface.
func (v *allHasSourceAt) GetPackage() allHasSourceAtPackage { return v.Package }

// GetSource returns allHasSourceAt.Source, and is useful for accessing the field via an interface.
func (v *allHasSourceAt) GetSource() allHasSourceAtSource { return v.Source }

// GetOrigin returns allHasSourceAt.Origin, and is useful for accessing the field via an interface.
func (v *allHasSourceAt) GetOrigin() string { return v.Origin }

// GetCollector returns allHasSourceAt.Collector, and is useful for accessing the field via an interface.
func (v *allHasSourceAt) GetCollector() string { return v.Collector }

// allHasSourceAtPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type allHasSourceAtPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns allHasSourceAtPackage.Id, and is useful for accessing the field via an interface.
func (v *allHasSourceAtPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns allHasSourceAtPackage.Type, and is useful for accessing the field via an interface.
func (v *allHasSourceAtPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns allHasSourceAtPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *allHasSourceAtPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *allHasSourceAtPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allHasSourceAtPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.allHasSourceAtPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallHasSourceAtPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *allHasSourceAtPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allHasSourceAtPackage) __premarshalJSON() (*__premarshalallHasSourceAtPackage, error) {
	var retval __premarshalallHasSourceAtPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// allHasSourceAtSource includes the requested fields of the GraphQL type Source.
// The GraphQL type's documentation follows.
//
// Source represents the root of the source trie/tree.
//
// We map source information to a trie, as a derivative of the pURL specification:
// each path in the trie represents a type, namespace, name and an optional
// qualifier that stands for tag/commit information.
//
// This node represents the type part of the trie path. It is used to represent
// the version control system that is being used.
//
// Since this node is at the root of the source trie, it is named Source, not
// SourceType.
type allHasSourceAtSource struct {
	AllSourceTree `json:"-"`
}

// GetId returns allHasSourceAtSource.Id, and is useful for accessing the field via an interface.
func (v *allHasSourceAtSource) GetId() string { return v.AllSourceTree.Id }

// GetType returns allHasSourceAtSource.Type, and is useful for accessing the field via an interface.
func (v *allHasSourceAtSource) GetType() string { return v.AllSourceTree.Type }

// GetNamespaces returns allHasSourceAtSource.Namespaces, and is useful for accessing the field via an interface.
func (v *allHasSourceAtSource) GetNamespaces() []AllSourceTreeNamespacesSourceNamespace {
	return v.AllSourceTree.Namespaces
}

func (v *allHasSourceAtSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allHasSourceAtSource
		graphql.NoUnmarshalJSON
	}
	firstPass.allHasSourceAtSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllSourceTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallHasSourceAtSource struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllSourceTreeNamespacesSourceNamespace `json:"namespaces"`
}

func (v *allHasSourceAtSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allHasSourceAtSource) __premarshalJSON() (*__premarshalallHasSourceAtSource, error) {
	var retval __premarshalallHasSourceAtSource

	retval.Id = v.AllSourceTree.Id
	retval.Type = v.AllSourceTree.Type
	retval.Namespaces = v.AllSourceTree.Namespaces
	return &retval, nil
}

// allHashEqualTree includes the GraphQL fields of HashEqual requested by the fragment allHashEqualTree.
// The GraphQL type's documentation follows.
//
// HashEqual is an attestation that a set of artifacts are identical.
type allHashEqualTree struct {
	Id string `json:"id"`
	// Justification for the claim that the artifacts are similar
	Justification string `json:"justification"`
	// Collection of artifacts that are similar
	Artifacts []allHashEqualTreeArtifactsArtifact `json:"artifacts"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns allHashEqualTree.Id, and is useful for accessing the field via an interface.
func (v *allHashEqualTree) GetId() string { return v.Id }

// GetJustification returns allHashEqualTree.Justification, and is useful for accessing the field via an interface.
func (v *allHashEqualTree) GetJustification() string { return v.Justification }

// GetArtifacts returns allHashEqualTree.Artifacts, and is useful for accessing the field via an interface.
func (v *allHashEqualTree) GetArtifacts() []allHashEqualTreeArtifactsArtifact { return v.Artifacts }

// GetOrigin returns allHashEqualTree.Origin, and is useful for accessing the field via an interface.
func (v *allHashEqualTree) GetOrigin() string { return v.Origin }

// GetCollector returns allHashEqualTree.Collector, and is useful for accessing the field via an interface.
func (v *allHashEqualTree) GetCollector() string { return v.Collector }

// allHashEqualTreeArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type allHashEqualTreeArtifactsArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns allHashEqualTreeArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *allHashEqualTreeArtifactsArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns allHashEqualTreeArtifactsArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *allHashEqualTreeArtifactsArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns allHashEqualTreeArtifactsArtifact.Digest, and is useful for accessing the field via an interface.
func (v *allHashEqualTreeArtifactsArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *allHashEqualTreeArtifactsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allHashEqualTreeArtifactsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.allHashEqualTreeArtifactsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallHashEqualTreeArtifactsArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *allHashEqualTreeArtifactsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allHashEqualTreeArtifactsArtifact) __premarshalJSON() (*__premarshalallHashEqualTreeArtifactsArtifact, error) {
	var retval __premarshalallHashEqualTreeArtifactsArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// allIsDependencyTree includes the GraphQL fields of IsDependency requested by the fragment allIsDependencyTree.
// The GraphQL type's documentation follows.
//
// IsDependency is an attestation to record that a package depends on another.
type allIsDependencyTree struct {
	Id string `json:"id"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Package that has the dependency
	Package allIsDependencyTreePackage `json:"package"`
	// Package for the dependency; MUST BE PackageName, not PackageVersion
	DependentPackage allIsDependencyTreeDependentPackage `json:"dependentPackage"`
	// Type of dependency
	DependencyType DependencyType `json:"dependencyType"`
	// Version range for the dependency link
	VersionRange string `json:"versionRange"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns allIsDependencyTree.Id, and is useful for accessing the field via an interface.
func (v *allIsDependencyTree) GetId() string { return v.Id }

// GetJustification returns allIsDependencyTree.Justification, and is useful for accessing the field via an interface.
func (v *allIsDependencyTree) GetJustification() string { return v.Justification }

// GetPackage returns allIsDependencyTree.Package, and is useful for accessing the field via an interface.
func (v *allIsDependencyTree) GetPackage() allIsDependencyTreePackage { return v.Package }

// GetDependentPackage returns allIsDependencyTree.DependentPackage, and is useful for accessing the field via an interface.
func (v *allIsDependencyTree) GetDependentPackage() allIsDependencyTreeDependentPackage {
	return v.DependentPackage
}

// GetDependencyType returns allIsDependencyTree.DependencyType, and is useful for accessing the field via an interface.
func (v *allIsDependencyTree) GetDependencyType() DependencyType { return v.DependencyType }

// GetVersionRange returns allIsDependencyTree.VersionRange, and is useful for accessing the field via an interface.
func (v *allIsDependencyTree) GetVersionRange() string { return v.VersionRange }

// GetOrigin returns allIsDependencyTree.Origin, and is useful for accessing the field via an interface.
func (v *allIsDependencyTree) GetOrigin() string { return v.Origin }

// GetCollector returns allIsDependencyTree.Collector, and is useful for accessing the field via an interface.
func (v *allIsDependencyTree) GetCollector() string { return v.Collector }

// allIsDependencyTreeDependentPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type allIsDependencyTreeDependentPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns allIsDependencyTreeDependentPackage.Id, and is useful for accessing the field via an interface.
func (v *allIsDependencyTreeDependentPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns allIsDependencyTreeDependentPackage.Type, and is useful for accessing the field via an interface.
func (v *allIsDependencyTreeDependentPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns allIsDependencyTreeDependentPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *allIsDependencyTreeDependentPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *allIsDependencyTreeDependentPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allIsDependencyTreeDependentPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.allIsDependencyTreeDependentPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallIsDependencyTreeDependentPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *allIsDependencyTreeDependentPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allIsDependencyTreeDependentPackage) __premarshalJSON() (*__premarshalallIsDependencyTreeDependentPackage, error) {
	var retval __premarshalallIsDependencyTreeDependentPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// allIsDependencyTreePackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type allIsDependencyTreePackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns allIsDependencyTreePackage.Id, and is useful for accessing the field via an interface.
func (v *allIsDependencyTreePackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns allIsDependencyTreePackage.Type, and is useful for accessing the field via an interface.
func (v *allIsDependencyTreePackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns allIsDependencyTreePackage.Namespaces, and is useful for accessing the field via an interface.
func (v *allIsDependencyTreePackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *allIsDependencyTreePackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allIsDependencyTreePackage
		graphql.NoUnmarshalJSON
	}
	firstPass.allIsDependencyTreePackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallIsDependencyTreePackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *allIsDependencyTreePackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allIsDependencyTreePackage) __premarshalJSON() (*__premarshalallIsDependencyTreePackage, error) {
	var retval __premarshalallIsDependencyTreePackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// allIsVulnerability includes the GraphQL fields of IsVulnerability requested by the fragment allIsVulnerability.
// The GraphQL type's documentation follows.
//
// IsVulnerability is an attestation to link CVE/GHSA with data in OSV.
type allIsVulnerability struct {
	Id string `json:"id"`
	// The OSV that encapsulates the vulnerability
	Osv allIsVulnerabilityOsvOSV `json:"osv"`
	// The upstream vulnerability information
	Vulnerability allIsVulnerabilityVulnerabilityCveOrGhsa `json:"-"`
	// Justification for the attested relationship
	Justification string `json:"justification"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns allIsVulnerability.Id, and is useful for accessing the field via an interface.
func (v *allIsVulnerability) GetId() string { return v.Id }

// GetOsv returns allIsVulnerability.Osv, and is useful for accessing the field via an interface.
func (v *allIsVulnerability) GetOsv() allIsVulnerabilityOsvOSV { return v.Osv }

// GetVulnerability returns allIsVulnerability.Vulnerability, and is useful for accessing the field via an interface.
func (v *allIsVulnerability) GetVulnerability() allIsVulnerabilityVulnerabilityCveOrGhsa {
	return v.Vulnerability
}

// GetJustification returns allIsVulnerability.Justification, and is useful for accessing the field via an interface.
func (v *allIsVulnerability) GetJustification() string { return v.Justification }

// GetOrigin returns allIsVulnerability.Origin, and is useful for accessing the field via an interface.
func (v *allIsVulnerability) GetOrigin() string { return v.Origin }

// GetCollector returns allIsVulnerability.Collector, and is useful for accessing the field via an interface.
func (v *allIsVulnerability) GetCollector() string { return v.Collector }

func (v *allIsVulnerability) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allIsVulnerability
		Vulnerability json.RawMessage `json:"vulnerability"`
		graphql.NoUnmarshalJSON
	}
	firstPass.allIsVulnerability = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Vulnerability
		src := firstPass.Vulnerability
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalallIsVulnerabilityVulnerabilityCveOrGhsa(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal allIsVulnerability.Vulnerability: %w", err)
			}
		}
	}
	return nil
}

type __premarshalallIsVulnerability struct {
	Id string `json:"id"`

	Osv allIsVulnerabilityOsvOSV `json:"osv"`

	Vulnerability json.RawMessage `json:"vulnerability"`

	Justification string `json:"justification"`

	Origin string `json:"origin"`

	Collector string `json:"collector"`
}

func (v *allIsVulnerability) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allIsVulnerability) __premarshalJSON() (*__premarshalallIsVulnerability, error) {
	var retval __premarshalallIsVulnerability

	retval.Id = v.Id
	retval.Osv = v.Osv
	{

		dst := &retval.Vulnerability
		src := v.Vulnerability
		var err error
		*dst, err = __marshalallIsVulnerabilityVulnerabilityCveOrGhsa(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal allIsVulnerability.Vulnerability: %w", err)
		}
	}
	retval.Justification = v.Justification
	retval.Origin = v.Origin
	retval.Collector = v.Collector
	return &retval, nil
}

// allIsVulnerabilityOsvOSV includes the requested fields of the GraphQL type OSV.
// The GraphQL type's documentation follows.
//
// OSV represents an Open Source Vulnerability.
//
// The osvId field is mandatory and canonicalized to be lowercase.
//
// This maps to a vulnerability ID specific to the environment (e.g., GHSA ID or
// CVE ID).
//
// This node can be referred to by other parts of GUAC.
type allIsVulnerabilityOsvOSV struct {
	AllOSVTree `json:"-"`
}

// GetId returns allIsVulnerabilityOsvOSV.Id, and is useful for accessing the field via an interface.
func (v *allIsVulnerabilityOsvOSV) GetId() string { return v.AllOSVTree.Id }

// GetOsvId returns allIsVulnerabilityOsvOSV.OsvId, and is useful for accessing the field via an interface.
func (v *allIsVulnerabilityOsvOSV) GetOsvId() string { return v.AllOSVTree.OsvId }

func (v *allIsVulnerabilityOsvOSV) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allIsVulnerabilityOsvOSV
		graphql.NoUnmarshalJSON
	}
	firstPass.allIsVulnerabilityOsvOSV = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllOSVTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallIsVulnerabilityOsvOSV struct {
	Id string `json:"id"`

	OsvId string `json:"osvId"`
}

func (v *allIsVulnerabilityOsvOSV) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allIsVulnerabilityOsvOSV) __premarshalJSON() (*__premarshalallIsVulnerabilityOsvOSV, error) {
	var retval __premarshalallIsVulnerabilityOsvOSV

	retval.Id = v.AllOSVTree.Id
	retval.OsvId = v.AllOSVTree.OsvId
	return &retval, nil
}

// allIsVulnerabilityVulnerabilityCVE includes the requested fields of the GraphQL type CVE.
// The GraphQL type's documentation follows.
//
// CVE represents a vulnerability in the Common Vulnerabilities and Exposures
// schema.
//
// The vulnerability identifier contains a year field, so we are extracting that
// to allow matching for vulnerabilities found in a given year.
//
// The vulnerability identifier field is mandatory and canonicalized to be
// lowercase.
//
// This node can be referred to by other parts of GUAC.
type allIsVulnerabilityVulnerabilityCVE struct {
	Typename   *string `json:"__typename"`
	AllCveTree `json:"-"`
}

// GetTypename returns allIsVulnerabilityVulnerabilityCVE.Typename, and is useful for accessing the field via an interface.
func (v *allIsVulnerabilityVulnerabilityCVE) GetTypename() *string { return v.Typename }

// GetId returns allIsVulnerabilityVulnerabilityCVE.Id, and is useful for accessing the field via an interface.
func (v *allIsVulnerabilityVulnerabilityCVE) GetId() string { return v.AllCveTree.Id }

// GetYear returns allIsVulnerabilityVulnerabilityCVE.Year, and is useful for accessing the field via an interface.
func (v *allIsVulnerabilityVulnerabilityCVE) GetYear() int { return v.AllCveTree.Year }

// GetCveId returns allIsVulnerabilityVulnerabilityCVE.CveId, and is useful for accessing the field via an interface.
func (v *allIsVulnerabilityVulnerabilityCVE) GetCveId() string { return v.AllCveTree.CveId }

func (v *allIsVulnerabilityVulnerabilityCVE) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allIsVulnerabilityVulnerabilityCVE
		graphql.NoUnmarshalJSON
	}
	firstPass.allIsVulnerabilityVulnerabilityCVE = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllCveTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallIsVulnerabilityVulnerabilityCVE struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Year int `json:"year"`

	CveId string `json:"cveId"`
}

func (v *allIsVulnerabilityVulnerabilityCVE) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allIsVulnerabilityVulnerabilityCVE) __premarshalJSON() (*__premarshalallIsVulnerabilityVulnerabilityCVE, error) {
	var retval __premarshalallIsVulnerabilityVulnerabilityCVE

	retval.Typename = v.Typename
	retval.Id = v.AllCveTree.Id
	retval.Year = v.AllCveTree.Year
	retval.CveId = v.AllCveTree.CveId
	return &retval, nil
}

// allIsVulnerabilityVulnerabilityCveOrGhsa includes the requested fields of the GraphQL interface CveOrGhsa.
//
// allIsVulnerabilityVulnerabilityCveOrGhsa is implemented by the following types:
// allIsVulnerabilityVulnerabilityCVE
// allIsVulnerabilityVulnerabilityGHSA
// The GraphQL type's documentation follows.
//
// CveOrGhsa is a union of CVE and GHSA.
type allIsVulnerabilityVulnerabilityCveOrGhsa interface {
	implementsGraphQLInterfaceallIsVulnerabilityVulnerabilityCveOrGhsa()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *allIsVulnerabilityVulnerabilityCVE) implementsGraphQLInterfaceallIsVulnerabilityVulnerabilityCveOrGhsa() {
}
func (v *allIsVulnerabilityVulnerabilityGHSA) implementsGraphQLInterfaceallIsVulnerabilityVulnerabilityCveOrGhsa() {
}

func __unmarshalallIsVulnerabilityVulnerabilityCveOrGhsa(b []byte, v *allIsVulnerabilityVulnerabilityCveOrGhsa) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CVE":
		*v = new(allIsVulnerabilityVulnerabilityCVE)
		return json.Unmarshal(b, *v)
	case "GHSA":
		*v = new(allIsVulnerabilityVulnerabilityGHSA)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CveOrGhsa.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for allIsVulnerabilityVulnerabilityCveOrGhsa: "%v"`, tn.TypeName)
	}
}

func __marshalallIsVulnerabilityVulnerabilityCveOrGhsa(v *allIsVulnerabilityVulnerabilityCveOrGhsa) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *allIsVulnerabilityVulnerabilityCVE:
		typename = "CVE"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallIsVulnerabilityVulnerabilityCVE
		}{typename, premarshaled}
		return json.Marshal(result)
	case *allIsVulnerabilityVulnerabilityGHSA:
		typename = "GHSA"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalallIsVulnerabilityVulnerabilityGHSA
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for allIsVulnerabilityVulnerabilityCveOrGhsa: "%T"`, v)
	}
}

// allIsVulnerabilityVulnerabilityGHSA includes the requested fields of the GraphQL type GHSA.
// The GraphQL type's documentation follows.
//
// GHSA represents GitHub security advisories.
//
// The advisory id field is mandatory and canonicalized to be lowercase.
//
// This node can be referred to by other parts of GUAC.
type allIsVulnerabilityVulnerabilityGHSA struct {
	Typename    *string `json:"__typename"`
	AllGHSATree `json:"-"`
}

// GetTypename returns allIsVulnerabilityVulnerabilityGHSA.Typename, and is useful for accessing the field via an interface.
func (v *allIsVulnerabilityVulnerabilityGHSA) GetTypename() *string { return v.Typename }

// GetId returns allIsVulnerabilityVulnerabilityGHSA.Id, and is useful for accessing the field via an interface.
func (v *allIsVulnerabilityVulnerabilityGHSA) GetId() string { return v.AllGHSATree.Id }

// GetGhsaId returns allIsVulnerabilityVulnerabilityGHSA.GhsaId, and is useful for accessing the field via an interface.
func (v *allIsVulnerabilityVulnerabilityGHSA) GetGhsaId() string { return v.AllGHSATree.GhsaId }

func (v *allIsVulnerabilityVulnerabilityGHSA) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allIsVulnerabilityVulnerabilityGHSA
		graphql.NoUnmarshalJSON
	}
	firstPass.allIsVulnerabilityVulnerabilityGHSA = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllGHSATree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallIsVulnerabilityVulnerabilityGHSA struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	GhsaId string `json:"ghsaId"`
}

func (v *allIsVulnerabilityVulnerabilityGHSA) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allIsVulnerabilityVulnerabilityGHSA) __premarshalJSON() (*__premarshalallIsVulnerabilityVulnerabilityGHSA, error) {
	var retval __premarshalallIsVulnerabilityVulnerabilityGHSA

	retval.Typename = v.Typename
	retval.Id = v.AllGHSATree.Id
	retval.GhsaId = v.AllGHSATree.GhsaId
	return &retval, nil
}

// allPkgEqual includes the GraphQL fields of PkgEqual requested by the fragment allPkgEqual.
// The GraphQL type's documentation follows.
//
// PkgEqual is an attestation that a set of packages are similar.
type allPkgEqual struct {
	Id string `json:"id"`
	// Justification for the claim that the packages are similar
	Justification string `json:"justification"`
	// Collection of packages that are similar
	Packages []allPkgEqualPackagesPackage `json:"packages"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetId returns allPkgEqual.Id, and is useful for accessing the field via an interface.
func (v *allPkgEqual) GetId() string { return v.Id }

// GetJustification returns allPkgEqual.Justification, and is useful for accessing the field via an interface.
func (v *allPkgEqual) GetJustification() string { return v.Justification }

// GetPackages returns allPkgEqual.Packages, and is useful for accessing the field via an interface.
func (v *allPkgEqual) GetPackages() []allPkgEqualPackagesPackage { return v.Packages }

// GetOrigin returns allPkgEqual.Origin, and is useful for accessing the field via an interface.
func (v *allPkgEqual) GetOrigin() string { return v.Origin }

// GetCollector returns allPkgEqual.Collector, and is useful for accessing the field via an interface.
func (v *allPkgEqual) GetCollector() string { return v.Collector }

// allPkgEqualPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// Package represents the root of the package trie/tree.
//
// We map package information to a trie, closely matching the pURL specification
// (https://github.com/package-url/purl-spec/blob/0dd92f26f8bb11956ffdf5e8acfcee71e8560407/README.rst),
// but deviating from it where GUAC heuristics allow for better representation of
// package information. Each path in the trie fully represents a package; we split
// the trie based on the pURL components.
//
// This node matches a pkg:<type> partial pURL. The type field matches the
// pURL types but we might also use "guac" for the cases where the pURL
// representation is not complete or when we have custom rules.
//
// Since this node is at the root of the package trie, it is named Package, not
// PackageType.
type allPkgEqualPackagesPackage struct {
	AllPkgTree `json:"-"`
}

// GetId returns allPkgEqualPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *allPkgEqualPackagesPackage) GetId() string { return v.AllPkgTree.Id }

// GetType returns allPkgEqualPackagesPackage.Type, and is useful for accessing the field via an interface.
func (v *allPkgEqualPackagesPackage) GetType() string { return v.AllPkgTree.Type }

// GetNamespaces returns allPkgEqualPackagesPackage.Namespaces, and is useful for accessing the field via an interface.
func (v *allPkgEqualPackagesPackage) GetNamespaces() []AllPkgTreeNamespacesPackageNamespace {
	return v.AllPkgTree.Namespaces
}

func (v *allPkgEqualPackagesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allPkgEqualPackagesPackage
		graphql.NoUnmarshalJSON
	}
	firstPass.allPkgEqualPackagesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllPkgTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallPkgEqualPackagesPackage struct {
	Id string `json:"id"`

	Type string `json:"type"`

	Namespaces []AllPkgTreeNamespacesPackageNamespace `json:"namespaces"`
}

func (v *allPkgEqualPackagesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allPkgEqualPackagesPackage) __premarshalJSON() (*__premarshalallPkgEqualPackagesPackage, error) {
	var retval __premarshalallPkgEqualPackagesPackage

	retval.Id = v.AllPkgTree.Id
	retval.Type = v.AllPkgTree.Type
	retval.Namespaces = v.AllPkgTree.Namespaces
	return &retval, nil
}

// allSLSATree includes the GraphQL fields of HasSLSA requested by the fragment allSLSATree.
// The GraphQL type's documentation follows.
//
// HasSLSA records that a subject node has a SLSA attestation.
type allSLSATree struct {
	Id string `json:"id"`
	// The subject of SLSA attestation
	Subject allSLSATreeSubjectArtifact `json:"subject"`
	// The SLSA attestation
	Slsa allSLSATreeSlsaSLSA `json:"slsa"`
}

// GetId returns allSLSATree.Id, and is useful for accessing the field via an interface.
func (v *allSLSATree) GetId() string { return v.Id }

// GetSubject returns allSLSATree.Subject, and is useful for accessing the field via an interface.
func (v *allSLSATree) GetSubject() allSLSATreeSubjectArtifact { return v.Subject }

// GetSlsa returns allSLSATree.Slsa, and is useful for accessing the field via an interface.
func (v *allSLSATree) GetSlsa() allSLSATreeSlsaSLSA { return v.Slsa }

// allSLSATreeSlsaSLSA includes the requested fields of the GraphQL type SLSA.
// The GraphQL type's documentation follows.
//
// SLSA contains all of the fields present in a SLSA attestation.
//
// The materials and builders are objects of the HasSLSA predicate, everything
// else are properties extracted from the attestation.
//
// We also include fields to specify under what conditions the check was performed
// (time of scan, version of scanners, etc.) as well as how this information got
// included into GUAC (origin document and the collector for that document).
type allSLSATreeSlsaSLSA struct {
	// Materials of the build resulting in subject
	BuiltFrom []allSLSATreeSlsaSLSABuiltFromArtifact `json:"builtFrom"`
	// Builder performing the build
	BuiltBy allSLSATreeSlsaSLSABuiltByBuilder `json:"builtBy"`
	// Type of the builder
	BuildType string `json:"buildType"`
	// Individual predicates found in the attestation
	SlsaPredicate []allSLSATreeSlsaSLSASlsaPredicateSLSAPredicate `json:"slsaPredicate"`
	// Version of the SLSA predicate
	SlsaVersion string `json:"slsaVersion"`
	// Timestamp (RFC3339Nano format) of build start time
	StartedOn time.Time `json:"startedOn"`
	// Timestamp (RFC3339Nano format) of build end time
	FinishedOn time.Time `json:"finishedOn"`
	// Document from which this attestation is generated from
	Origin string `json:"origin"`
	// GUAC collector for the document
	Collector string `json:"collector"`
}

// GetBuiltFrom returns allSLSATreeSlsaSLSA.BuiltFrom, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSA) GetBuiltFrom() []allSLSATreeSlsaSLSABuiltFromArtifact {
	return v.BuiltFrom
}

// GetBuiltBy returns allSLSATreeSlsaSLSA.BuiltBy, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSA) GetBuiltBy() allSLSATreeSlsaSLSABuiltByBuilder { return v.BuiltBy }

// GetBuildType returns allSLSATreeSlsaSLSA.BuildType, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSA) GetBuildType() string { return v.BuildType }

// GetSlsaPredicate returns allSLSATreeSlsaSLSA.SlsaPredicate, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSA) GetSlsaPredicate() []allSLSATreeSlsaSLSASlsaPredicateSLSAPredicate {
	return v.SlsaPredicate
}

// GetSlsaVersion returns allSLSATreeSlsaSLSA.SlsaVersion, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSA) GetSlsaVersion() string { return v.SlsaVersion }

// GetStartedOn returns allSLSATreeSlsaSLSA.StartedOn, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSA) GetStartedOn() time.Time { return v.StartedOn }

// GetFinishedOn returns allSLSATreeSlsaSLSA.FinishedOn, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSA) GetFinishedOn() time.Time { return v.FinishedOn }

// GetOrigin returns allSLSATreeSlsaSLSA.Origin, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSA) GetOrigin() string { return v.Origin }

// GetCollector returns allSLSATreeSlsaSLSA.Collector, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSA) GetCollector() string { return v.Collector }

// allSLSATreeSlsaSLSABuiltByBuilder includes the requested fields of the GraphQL type Builder.
// The GraphQL type's documentation follows.
//
// Builder represents the builder (e.g., FRSCA or GitHub Actions).
//
// Currently builders are identified by the uri field.
type allSLSATreeSlsaSLSABuiltByBuilder struct {
	Id  string `json:"id"`
	Uri string `json:"uri"`
}

// GetId returns allSLSATreeSlsaSLSABuiltByBuilder.Id, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSABuiltByBuilder) GetId() string { return v.Id }

// GetUri returns allSLSATreeSlsaSLSABuiltByBuilder.Uri, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSABuiltByBuilder) GetUri() string { return v.Uri }

// allSLSATreeSlsaSLSABuiltFromArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type allSLSATreeSlsaSLSABuiltFromArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns allSLSATreeSlsaSLSABuiltFromArtifact.Id, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSABuiltFromArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns allSLSATreeSlsaSLSABuiltFromArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSABuiltFromArtifact) GetAlgorithm() string {
	return v.AllArtifactTree.Algorithm
}

// GetDigest returns allSLSATreeSlsaSLSABuiltFromArtifact.Digest, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSABuiltFromArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *allSLSATreeSlsaSLSABuiltFromArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allSLSATreeSlsaSLSABuiltFromArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.allSLSATreeSlsaSLSABuiltFromArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallSLSATreeSlsaSLSABuiltFromArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *allSLSATreeSlsaSLSABuiltFromArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allSLSATreeSlsaSLSABuiltFromArtifact) __premarshalJSON() (*__premarshalallSLSATreeSlsaSLSABuiltFromArtifact, error) {
	var retval __premarshalallSLSATreeSlsaSLSABuiltFromArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

// allSLSATreeSlsaSLSASlsaPredicateSLSAPredicate includes the requested fields of the GraphQL type SLSAPredicate.
// The GraphQL type's documentation follows.
//
// SLSAPredicate are the values from the SLSA predicate in key-value pair form.
//
// # For example, given the following predicate
//
// ```
// "predicate": {
// "buildDefinition": {
// "externalParameters": {
// "repository": "https://github.com/octocat/hello-world",
// ...
// },
// ...
// },
// ...
// }
// ```
//
// we have
//
// ```
// key   = "buildDefinition.externalParameters.repository"
// value = "https://github.com/octocat/hello-world"
// ```
//
// This node cannot be directly referred by other parts of GUAC.
type allSLSATreeSlsaSLSASlsaPredicateSLSAPredicate struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns allSLSATreeSlsaSLSASlsaPredicateSLSAPredicate.Key, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSASlsaPredicateSLSAPredicate) GetKey() string { return v.Key }

// GetValue returns allSLSATreeSlsaSLSASlsaPredicateSLSAPredicate.Value, and is useful for accessing the field via an interface.
func (v *allSLSATreeSlsaSLSASlsaPredicateSLSAPredicate) GetValue() string { return v.Value }

// allSLSATreeSubjectArtifact includes the requested fields of the GraphQL type Artifact.
// The GraphQL type's documentation follows.
//
// Artifact represents an artifact identified by a checksum hash.
//
// The checksum is split into the digest value and the algorithm used to generate
// it. Both fields are mandatory and canonicalized to be lowercase.
//
// If having a checksum Go object, algorithm can be
// strings.ToLower(string(checksum.Algorithm)) and digest can be checksum.Value.
type allSLSATreeSubjectArtifact struct {
	AllArtifactTree `json:"-"`
}

// GetId returns allSLSATreeSubjectArtifact.Id, and is useful for accessing the field via an interface.
func (v *allSLSATreeSubjectArtifact) GetId() string { return v.AllArtifactTree.Id }

// GetAlgorithm returns allSLSATreeSubjectArtifact.Algorithm, and is useful for accessing the field via an interface.
func (v *allSLSATreeSubjectArtifact) GetAlgorithm() string { return v.AllArtifactTree.Algorithm }

// GetDigest returns allSLSATreeSubjectArtifact.Digest, and is useful for accessing the field via an interface.
func (v *allSLSATreeSubjectArtifact) GetDigest() string { return v.AllArtifactTree.Digest }

func (v *allSLSATreeSubjectArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allSLSATreeSubjectArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.allSLSATreeSubjectArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllArtifactTree)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallSLSATreeSubjectArtifact struct {
	Id string `json:"id"`

	Algorithm string `json:"algorithm"`

	Digest string `json:"digest"`
}

func (v *allSLSATreeSubjectArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allSLSATreeSubjectArtifact) __premarshalJSON() (*__premarshalallSLSATreeSubjectArtifact, error) {
	var retval __premarshalallSLSATreeSubjectArtifact

	retval.Id = v.AllArtifactTree.Id
	retval.Algorithm = v.AllArtifactTree.Algorithm
	retval.Digest = v.AllArtifactTree.Digest
	return &retval, nil
}

func Artifacts(
	ctx context.Context,
	client graphql.Client,
	filter *ArtifactSpec,
) (*ArtifactsResponse, error) {
	req := &graphql.Request{
		OpName: "Artifacts",
		Query: `
query Artifacts ($filter: ArtifactSpec) {
	artifacts(artifactSpec: $filter) {
		... AllArtifactTree
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`,
		Variables: &__ArtifactsInput{
			Filter: filter,
		},
	}
	var err error

	var data ArtifactsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CVEs(
	ctx context.Context,
	client graphql.Client,
	filter *CVESpec,
) (*CVEsResponse, error) {
	req := &graphql.Request{
		OpName: "CVEs",
		Query: `
query CVEs ($filter: CVESpec) {
	cve(cveSpec: $filter) {
		... AllCveTree
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
`,
		Variables: &__CVEsInput{
			Filter: filter,
		},
	}
	var err error

	var data CVEsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyBadArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	certifyBad CertifyBadInputSpec,
) (*CertifyBadArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyBadArtifact",
		Query: `
mutation CertifyBadArtifact ($artifact: ArtifactInputSpec!, $certifyBad: CertifyBadInputSpec!) {
	ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
	ingestCertifyBad(subject: {artifact:$artifact}, certifyBad: $certifyBad) {
		... AllCertifyBad
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`,
		Variables: &__CertifyBadArtifactInput{
			Artifact:   artifact,
			CertifyBad: certifyBad,
		},
	}
	var err error

	var data CertifyBadArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyBadPkg(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	pkgMatchType *MatchFlags,
	certifyBad CertifyBadInputSpec,
) (*CertifyBadPkgResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyBadPkg",
		Query: `
mutation CertifyBadPkg ($pkg: PkgInputSpec!, $pkgMatchType: MatchFlags, $certifyBad: CertifyBadInputSpec!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestCertifyBad(subject: {package:$pkg}, pkgMatchType: $pkgMatchType, certifyBad: $certifyBad) {
		... AllCertifyBad
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`,
		Variables: &__CertifyBadPkgInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			CertifyBad:   certifyBad,
		},
	}
	var err error

	var data CertifyBadPkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyBadSrc(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
	certifyBad CertifyBadInputSpec,
) (*CertifyBadSrcResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyBadSrc",
		Query: `
mutation CertifyBadSrc ($source: SourceInputSpec!, $certifyBad: CertifyBadInputSpec!) {
	ingestSource(source: $source) {
		... AllSourceTree
	}
	ingestCertifyBad(subject: {source:$source}, certifyBad: $certifyBad) {
		... AllCertifyBad
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`,
		Variables: &__CertifyBadSrcInput{
			Source:     source,
			CertifyBad: certifyBad,
		},
	}
	var err error

	var data CertifyBadSrcResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyBads(
	ctx context.Context,
	client graphql.Client,
	filter *CertifyBadSpec,
) (*CertifyBadsResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyBads",
		Query: `
query CertifyBads ($filter: CertifyBadSpec) {
	CertifyBad(certifyBadSpec: $filter) {
		... AllCertifyBad
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`,
		Variables: &__CertifyBadsInput{
			Filter: filter,
		},
	}
	var err error

	var data CertifyBadsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyCVE(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	cve CVEInputSpec,
	certifyVuln VulnerabilityMetaDataInput,
) (*CertifyCVEResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyCVE",
		Query: `
mutation CertifyCVE ($pkg: PkgInputSpec!, $cve: CVEInputSpec!, $certifyVuln: VulnerabilityMetaDataInput!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestCVE(cve: $cve) {
		... AllCveTree
	}
	ingestVulnerability(pkg: $pkg, vulnerability: {cve:$cve}, certifyVuln: $certifyVuln) {
		... AllCertifyVuln
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`,
		Variables: &__CertifyCVEInput{
			Pkg:         pkg,
			Cve:         cve,
			CertifyVuln: certifyVuln,
		},
	}
	var err error

	var data CertifyCVEResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyGHSA(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	ghsa GHSAInputSpec,
	certifyVuln VulnerabilityMetaDataInput,
) (*CertifyGHSAResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyGHSA",
		Query: `
mutation CertifyGHSA ($pkg: PkgInputSpec!, $ghsa: GHSAInputSpec!, $certifyVuln: VulnerabilityMetaDataInput!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestGHSA(ghsa: $ghsa) {
		... AllGHSATree
	}
	ingestVulnerability(pkg: $pkg, vulnerability: {ghsa:$ghsa}, certifyVuln: $certifyVuln) {
		... AllCertifyVuln
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`,
		Variables: &__CertifyGHSAInput{
			Pkg:         pkg,
			Ghsa:        ghsa,
			CertifyVuln: certifyVuln,
		},
	}
	var err error

	var data CertifyGHSAResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyGoodArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	certifyGood CertifyGoodInputSpec,
) (*CertifyGoodArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyGoodArtifact",
		Query: `
mutation CertifyGoodArtifact ($artifact: ArtifactInputSpec!, $certifyGood: CertifyGoodInputSpec!) {
	ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
	ingestCertifyGood(subject: {artifact:$artifact}, certifyGood: $certifyGood) {
		... allCertifyGood
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment allCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`,
		Variables: &__CertifyGoodArtifactInput{
			Artifact:    artifact,
			CertifyGood: certifyGood,
		},
	}
	var err error

	var data CertifyGoodArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyGoodPkg(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	pkgMatchType *MatchFlags,
	certifyGood CertifyGoodInputSpec,
) (*CertifyGoodPkgResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyGoodPkg",
		Query: `
mutation CertifyGoodPkg ($pkg: PkgInputSpec!, $pkgMatchType: MatchFlags, $certifyGood: CertifyGoodInputSpec!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestCertifyGood(subject: {package:$pkg}, pkgMatchType: $pkgMatchType, certifyGood: $certifyGood) {
		... allCertifyGood
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment allCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`,
		Variables: &__CertifyGoodPkgInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			CertifyGood:  certifyGood,
		},
	}
	var err error

	var data CertifyGoodPkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyGoodSrc(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
	certifyGood CertifyGoodInputSpec,
) (*CertifyGoodSrcResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyGoodSrc",
		Query: `
mutation CertifyGoodSrc ($source: SourceInputSpec!, $certifyGood: CertifyGoodInputSpec!) {
	ingestSource(source: $source) {
		... AllSourceTree
	}
	ingestCertifyGood(subject: {source:$source}, certifyGood: $certifyGood) {
		... allCertifyGood
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment allCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`,
		Variables: &__CertifyGoodSrcInput{
			Source:      source,
			CertifyGood: certifyGood,
		},
	}
	var err error

	var data CertifyGoodSrcResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyNoKnownVuln(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	certifyVuln VulnerabilityMetaDataInput,
) (*CertifyNoKnownVulnResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyNoKnownVuln",
		Query: `
mutation CertifyNoKnownVuln ($pkg: PkgInputSpec!, $certifyVuln: VulnerabilityMetaDataInput!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestVulnerability(pkg: $pkg, vulnerability: {noVuln:true}, certifyVuln: $certifyVuln) {
		... AllCertifyVuln
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`,
		Variables: &__CertifyNoKnownVulnInput{
			Pkg:         pkg,
			CertifyVuln: certifyVuln,
		},
	}
	var err error

	var data CertifyNoKnownVulnResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CertifyOSV(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	osv OSVInputSpec,
	certifyVuln VulnerabilityMetaDataInput,
) (*CertifyOSVResponse, error) {
	req := &graphql.Request{
		OpName: "CertifyOSV",
		Query: `
mutation CertifyOSV ($pkg: PkgInputSpec!, $osv: OSVInputSpec!, $certifyVuln: VulnerabilityMetaDataInput!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestOSV(osv: $osv) {
		... AllOSVTree
	}
	ingestVulnerability(pkg: $pkg, vulnerability: {osv:$osv}, certifyVuln: $certifyVuln) {
		... AllCertifyVuln
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`,
		Variables: &__CertifyOSVInput{
			Pkg:         pkg,
			Osv:         osv,
			CertifyVuln: certifyVuln,
		},
	}
	var err error

	var data CertifyOSVResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GHSAs(
	ctx context.Context,
	client graphql.Client,
	filter *GHSASpec,
) (*GHSAsResponse, error) {
	req := &graphql.Request{
		OpName: "GHSAs",
		Query: `
query GHSAs ($filter: GHSASpec) {
	ghsa(ghsaSpec: $filter) {
		... AllGHSATree
	}
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`,
		Variables: &__GHSAsInput{
			Filter: filter,
		},
	}
	var err error

	var data GHSAsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func HasSBOMArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	hasSBOM HasSBOMInputSpec,
) (*HasSBOMArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "HasSBOMArtifact",
		Query: `
mutation HasSBOMArtifact ($artifact: ArtifactInputSpec!, $hasSBOM: HasSBOMInputSpec!) {
	ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
	ingestHasSBOM(subject: {artifact:$artifact}, hasSBOM: $hasSBOM) {
		... allHasSBOMTree
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment allHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	annotations {
		key
		value
	}
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`,
		Variables: &__HasSBOMArtifactInput{
			Artifact: artifact,
			HasSBOM:  hasSBOM,
		},
	}
	var err error

	var data HasSBOMArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func HasSBOMPkg(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	hasSBOM HasSBOMInputSpec,
) (*HasSBOMPkgResponse, error) {
	req := &graphql.Request{
		OpName: "HasSBOMPkg",
		Query: `
mutation HasSBOMPkg ($pkg: PkgInputSpec!, $hasSBOM: HasSBOMInputSpec!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestHasSBOM(subject: {package:$pkg}, hasSBOM: $hasSBOM) {
		... allHasSBOMTree
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment allHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	annotations {
		key
		value
	}
	origin
	collector
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
`,
		Variables: &__HasSBOMPkgInput{
			Pkg:     pkg,
			HasSBOM: hasSBOM,
		},
	}
	var err error

	var data HasSBOMPkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func HasSourceAt(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	pkgMatchType MatchFlags,
	source SourceInputSpec,
	hasSourceAt HasSourceAtInputSpec,
) (*HasSourceAtResponse, error) {
	req := &graphql.Request{
		OpName: "HasSourceAt",
		Query: `
mutation HasSourceAt ($pkg: PkgInputSpec!, $pkgMatchType: MatchFlags!, $source: SourceInputSpec!, $hasSourceAt: HasSourceAtInputSpec!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestSource(source: $source) {
		... AllSourceTree
	}
	ingestHasSourceAt(pkg: $pkg, pkgMatchType: $pkgMatchType, source: $source, hasSourceAt: $hasSourceAt) {
		... allHasSourceAt
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment allHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
`,
		Variables: &__HasSourceAtInput{
			Pkg:          pkg,
			PkgMatchType: pkgMatchType,
			Source:       source,
			HasSourceAt:  hasSourceAt,
		},
	}
	var err error

	var data HasSourceAtResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func HashEqual(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	otherArtifact ArtifactInputSpec,
	hashEqual HashEqualInputSpec,
) (*HashEqualResponse, error) {
	req := &graphql.Request{
		OpName: "HashEqual",
		Query: `
mutation HashEqual ($artifact: ArtifactInputSpec!, $otherArtifact: ArtifactInputSpec!, $hashEqual: HashEqualInputSpec!) {
	artifact: ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
	otherArtifact: ingestArtifact(artifact: $otherArtifact) {
		... AllArtifactTree
	}
	ingestHashEqual(artifact: $artifact, otherArtifact: $otherArtifact, hashEqual: $hashEqual) {
		... allHashEqualTree
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment allHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
`,
		Variables: &__HashEqualInput{
			Artifact:      artifact,
			OtherArtifact: otherArtifact,
			HashEqual:     hashEqual,
		},
	}
	var err error

	var data HashEqualResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func IsDependency(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	depPkg PkgInputSpec,
	dependency IsDependencyInputSpec,
) (*IsDependencyResponse, error) {
	req := &graphql.Request{
		OpName: "IsDependency",
		Query: `
mutation IsDependency ($pkg: PkgInputSpec!, $depPkg: PkgInputSpec!, $dependency: IsDependencyInputSpec!) {
	pkg: ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	dependentPkg: ingestPackage(pkg: $depPkg) {
		... AllPkgTree
	}
	ingestDependency(pkg: $pkg, depPkg: $depPkg, dependency: $dependency) {
		... allIsDependencyTree
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment allIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
`,
		Variables: &__IsDependencyInput{
			Pkg:        pkg,
			DepPkg:     depPkg,
			Dependency: dependency,
		},
	}
	var err error

	var data IsDependencyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func IsOccurrencePkg(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	artifact ArtifactInputSpec,
	occurrence IsOccurrenceInputSpec,
) (*IsOccurrencePkgResponse, error) {
	req := &graphql.Request{
		OpName: "IsOccurrencePkg",
		Query: `
mutation IsOccurrencePkg ($pkg: PkgInputSpec!, $artifact: ArtifactInputSpec!, $occurrence: IsOccurrenceInputSpec!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
	ingestOccurrence(subject: {package:$pkg}, artifact: $artifact, occurrence: $occurrence) {
		... AllIsOccurrencesTree
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`,
		Variables: &__IsOccurrencePkgInput{
			Pkg:        pkg,
			Artifact:   artifact,
			Occurrence: occurrence,
		},
	}
	var err error

	var data IsOccurrencePkgResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func IsOccurrenceSrc(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
	artifact ArtifactInputSpec,
	occurrence IsOccurrenceInputSpec,
) (*IsOccurrenceSrcResponse, error) {
	req := &graphql.Request{
		OpName: "IsOccurrenceSrc",
		Query: `
mutation IsOccurrenceSrc ($source: SourceInputSpec!, $artifact: ArtifactInputSpec!, $occurrence: IsOccurrenceInputSpec!) {
	ingestSource(source: $source) {
		... AllSourceTree
	}
	ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
	ingestOccurrence(subject: {source:$source}, artifact: $artifact, occurrence: $occurrence) {
		... AllIsOccurrencesTree
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`,
		Variables: &__IsOccurrenceSrcInput{
			Source:     source,
			Artifact:   artifact,
			Occurrence: occurrence,
		},
	}
	var err error

	var data IsOccurrenceSrcResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func IsVulnerabilityCVE(
	ctx context.Context,
	client graphql.Client,
	osv OSVInputSpec,
	cve CVEInputSpec,
	isVulnerability IsVulnerabilityInputSpec,
) (*IsVulnerabilityCVEResponse, error) {
	req := &graphql.Request{
		OpName: "IsVulnerabilityCVE",
		Query: `
mutation IsVulnerabilityCVE ($osv: OSVInputSpec!, $cve: CVEInputSpec!, $isVulnerability: IsVulnerabilityInputSpec!) {
	ingestOSV(osv: $osv) {
		... AllOSVTree
	}
	ingestCVE(cve: $cve) {
		... AllCveTree
	}
	ingestIsVulnerability(osv: $osv, vulnerability: {cve:$cve}, isVulnerability: $isVulnerability) {
		... allIsVulnerability
	}
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment allIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`,
		Variables: &__IsVulnerabilityCVEInput{
			Osv:             osv,
			Cve:             cve,
			IsVulnerability: isVulnerability,
		},
	}
	var err error

	var data IsVulnerabilityCVEResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func IsVulnerabilityGHSA(
	ctx context.Context,
	client graphql.Client,
	osv OSVInputSpec,
	ghsa GHSAInputSpec,
	isVulnerability IsVulnerabilityInputSpec,
) (*IsVulnerabilityGHSAResponse, error) {
	req := &graphql.Request{
		OpName: "IsVulnerabilityGHSA",
		Query: `
mutation IsVulnerabilityGHSA ($osv: OSVInputSpec!, $ghsa: GHSAInputSpec!, $isVulnerability: IsVulnerabilityInputSpec!) {
	ingestOSV(osv: $osv) {
		... AllOSVTree
	}
	ingestGHSA(ghsa: $ghsa) {
		... AllGHSATree
	}
	ingestIsVulnerability(osv: $osv, vulnerability: {ghsa:$ghsa}, isVulnerability: $isVulnerability) {
		... allIsVulnerability
	}
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment allIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
`,
		Variables: &__IsVulnerabilityGHSAInput{
			Osv:             osv,
			Ghsa:            ghsa,
			IsVulnerability: isVulnerability,
		},
	}
	var err error

	var data IsVulnerabilityGHSAResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Neighbors(
	ctx context.Context,
	client graphql.Client,
	node string,
	usingOnly []Edge,
) (*NeighborsResponse, error) {
	req := &graphql.Request{
		OpName: "Neighbors",
		Query: `
query Neighbors ($node: ID!, $usingOnly: [Edge!]!) {
	neighbors(node: $node, usingOnly: $usingOnly) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... allBuilderTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... allPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... allIsDependencyTree
		}
		... on HasSLSA {
			... allSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... allCertifyGood
		}
		... on HashEqual {
			... allHashEqualTree
		}
		... on HasSBOM {
			... allHasSBOMTree
		}
		... on HasSourceAt {
			... allHasSourceAt
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on IsVulnerability {
			... allIsVulnerability
		}
		... on CertifyVEXStatement {
			... allCertifyVEXStatement
		}
		... on Builder {
			... allBuilderTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment allBuilderTree on Builder {
	id
	uri
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment allPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment allIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment allSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment allCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment allHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment allHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	annotations {
		key
		value
	}
	origin
	collector
}
fragment allHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment allIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment allCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
`,
		Variables: &__NeighborsInput{
			Node:      node,
			UsingOnly: usingOnly,
		},
	}
	var err error

	var data NeighborsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Node(
	ctx context.Context,
	client graphql.Client,
	node string,
) (*NodeResponse, error) {
	req := &graphql.Request{
		OpName: "Node",
		Query: `
query Node ($node: ID!) {
	node(node: $node) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... allBuilderTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... allPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... allIsDependencyTree
		}
		... on HasSLSA {
			... allSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... allCertifyGood
		}
		... on HashEqual {
			... allHashEqualTree
		}
		... on HasSBOM {
			... allHasSBOMTree
		}
		... on HasSourceAt {
			... allHasSourceAt
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on IsVulnerability {
			... allIsVulnerability
		}
		... on CertifyVEXStatement {
			... allCertifyVEXStatement
		}
		... on Builder {
			... allBuilderTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment allBuilderTree on Builder {
	id
	uri
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment allPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment allIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment allSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment allCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment allHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment allHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	annotations {
		key
		value
	}
	origin
	collector
}
fragment allHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment allIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment allCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
`,
		Variables: &__NodeInput{
			Node: node,
		},
	}
	var err error

	var data NodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Nodes(
	ctx context.Context,
	client graphql.Client,
	nodes []string,
) (*NodesResponse, error) {
	req := &graphql.Request{
		OpName: "Nodes",
		Query: `
query Nodes ($nodes: [ID!]!) {
	nodes(nodes: $nodes) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... allBuilderTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... allPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... allIsDependencyTree
		}
		... on HasSLSA {
			... allSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... allCertifyGood
		}
		... on HashEqual {
			... allHashEqualTree
		}
		... on HasSBOM {
			... allHasSBOMTree
		}
		... on HasSourceAt {
			... allHasSourceAt
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on IsVulnerability {
			... allIsVulnerability
		}
		... on CertifyVEXStatement {
			... allCertifyVEXStatement
		}
		... on Builder {
			... allBuilderTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment allBuilderTree on Builder {
	id
	uri
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment allPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment allIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment allSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment allCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment allHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment allHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	annotations {
		key
		value
	}
	origin
	collector
}
fragment allHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment allIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment allCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
`,
		Variables: &__NodesInput{
			Nodes: nodes,
		},
	}
	var err error

	var data NodesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func OSVs(
	ctx context.Context,
	client graphql.Client,
	filter *OSVSpec,
) (*OSVsResponse, error) {
	req := &graphql.Request{
		OpName: "OSVs",
		Query: `
query OSVs ($filter: OSVSpec) {
	osv(osvSpec: $filter) {
		... AllOSVTree
	}
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`,
		Variables: &__OSVsInput{
			Filter: filter,
		},
	}
	var err error

	var data OSVsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Packages(
	ctx context.Context,
	client graphql.Client,
	filter *PkgSpec,
) (*PackagesResponse, error) {
	req := &graphql.Request{
		OpName: "Packages",
		Query: `
query Packages ($filter: PkgSpec) {
	packages(pkgSpec: $filter) {
		... AllPkgTree
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
`,
		Variables: &__PackagesInput{
			Filter: filter,
		},
	}
	var err error

	var data PackagesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Path(
	ctx context.Context,
	client graphql.Client,
	subject string,
	target string,
	maxPathLength int,
	usingOnly []Edge,
) (*PathResponse, error) {
	req := &graphql.Request{
		OpName: "Path",
		Query: `
query Path ($subject: ID!, $target: ID!, $maxPathLength: Int!, $usingOnly: [Edge!]!) {
	path(subject: $subject, target: $target, maxPathLength: $maxPathLength, usingOnly: $usingOnly) {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
		... on Builder {
			... allBuilderTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
		... on CertifyScorecard {
			... AllCertifyScorecard
		}
		... on PkgEqual {
			... allPkgEqual
		}
		... on IsOccurrence {
			... AllIsOccurrencesTree
		}
		... on IsDependency {
			... allIsDependencyTree
		}
		... on HasSLSA {
			... allSLSATree
		}
		... on CertifyBad {
			... AllCertifyBad
		}
		... on CertifyGood {
			... allCertifyGood
		}
		... on HashEqual {
			... allHashEqualTree
		}
		... on HasSBOM {
			... allHasSBOMTree
		}
		... on HasSourceAt {
			... allHasSourceAt
		}
		... on CertifyVuln {
			... AllCertifyVuln
		}
		... on IsVulnerability {
			... allIsVulnerability
		}
		... on CertifyVEXStatement {
			... allCertifyVEXStatement
		}
		... on Builder {
			... allBuilderTree
		}
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment allBuilderTree on Builder {
	id
	uri
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
fragment allPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
fragment AllIsOccurrencesTree on IsOccurrence {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
	}
	artifact {
		... AllArtifactTree
	}
	justification
	origin
	collector
}
fragment allIsDependencyTree on IsDependency {
	id
	justification
	package {
		... AllPkgTree
	}
	dependentPackage {
		... AllPkgTree
	}
	dependencyType
	versionRange
	origin
	collector
}
fragment allSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
fragment AllCertifyBad on CertifyBad {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment allCertifyGood on CertifyGood {
	id
	justification
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Source {
			... AllSourceTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	origin
	collector
}
fragment allHashEqualTree on HashEqual {
	id
	justification
	artifacts {
		... AllArtifactTree
	}
	origin
	collector
}
fragment allHasSBOMTree on HasSBOM {
	id
	subject {
		__typename
		... on Artifact {
			... AllArtifactTree
		}
		... on Package {
			... AllPkgTree
		}
	}
	uri
	algorithm
	digest
	downloadLocation
	annotations {
		key
		value
	}
	origin
	collector
}
fragment allHasSourceAt on HasSourceAt {
	id
	justification
	knownSince
	package {
		... AllPkgTree
	}
	source {
		... AllSourceTree
	}
	origin
	collector
}
fragment AllCertifyVuln on CertifyVuln {
	id
	package {
		... AllPkgTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on OSV {
			... AllOSVTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on NoVuln {
			id
		}
	}
	metadata {
		dbUri
		dbVersion
		scannerUri
		scannerVersion
		timeScanned
		origin
		collector
	}
}
fragment allIsVulnerability on IsVulnerability {
	id
	osv {
		... AllOSVTree
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
	}
	justification
	origin
	collector
}
fragment allCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
`,
		Variables: &__PathInput{
			Subject:       subject,
			Target:        target,
			MaxPathLength: maxPathLength,
			UsingOnly:     usingOnly,
		},
	}
	var err error

	var data PathResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func PkgEqual(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	otherPackage PkgInputSpec,
	pkgEqual PkgEqualInputSpec,
) (*PkgEqualResponse, error) {
	req := &graphql.Request{
		OpName: "PkgEqual",
		Query: `
mutation PkgEqual ($pkg: PkgInputSpec!, $otherPackage: PkgInputSpec!, $pkgEqual: PkgEqualInputSpec!) {
	pkg: ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	otherPackage: ingestPackage(pkg: $otherPackage) {
		... AllPkgTree
	}
	ingestPkgEqual(pkg: $pkg, otherPackage: $otherPackage, pkgEqual: $pkgEqual) {
		... allPkgEqual
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment allPkgEqual on PkgEqual {
	id
	justification
	packages {
		... AllPkgTree
	}
	origin
	collector
}
`,
		Variables: &__PkgEqualInput{
			Pkg:          pkg,
			OtherPackage: otherPackage,
			PkgEqual:     pkgEqual,
		},
	}
	var err error

	var data PkgEqualResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func SLSAForArtifact(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	materials []ArtifactInputSpec,
	builder BuilderInputSpec,
	slsa SLSAInputSpec,
) (*SLSAForArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "SLSAForArtifact",
		Query: `
mutation SLSAForArtifact ($artifact: ArtifactInputSpec!, $materials: [ArtifactInputSpec!]!, $builder: BuilderInputSpec!, $slsa: SLSAInputSpec!) {
	ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
	ingestMaterials(materials: $materials) {
		... AllArtifactTree
	}
	ingestBuilder(builder: $builder) {
		uri
	}
	ingestSLSA(subject: $artifact, builtFrom: $materials, builtBy: $builder, slsa: $slsa) {
		... allSLSATree
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment allSLSATree on HasSLSA {
	id
	subject {
		... AllArtifactTree
	}
	slsa {
		builtFrom {
			... AllArtifactTree
		}
		builtBy {
			id
			uri
		}
		buildType
		slsaPredicate {
			key
			value
		}
		slsaVersion
		startedOn
		finishedOn
		origin
		collector
	}
}
`,
		Variables: &__SLSAForArtifactInput{
			Artifact:  artifact,
			Materials: materials,
			Builder:   builder,
			Slsa:      slsa,
		},
	}
	var err error

	var data SLSAForArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Scorecard(
	ctx context.Context,
	client graphql.Client,
	source SourceInputSpec,
	scorecard ScorecardInputSpec,
) (*ScorecardResponse, error) {
	req := &graphql.Request{
		OpName: "Scorecard",
		Query: `
mutation Scorecard ($source: SourceInputSpec!, $scorecard: ScorecardInputSpec!) {
	ingestSource(source: $source) {
		... AllSourceTree
	}
	certifyScorecard(source: $source, scorecard: $scorecard) {
		... AllCertifyScorecard
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
fragment AllCertifyScorecard on CertifyScorecard {
	id
	source {
		... AllSourceTree
	}
	scorecard {
		timeScanned
		aggregateScore
		checks {
			check
			score
		}
		scorecardVersion
		scorecardCommit
		origin
		collector
	}
}
`,
		Variables: &__ScorecardInput{
			Source:    source,
			Scorecard: scorecard,
		},
	}
	var err error

	var data ScorecardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Sources(
	ctx context.Context,
	client graphql.Client,
	filter *SourceSpec,
) (*SourcesResponse, error) {
	req := &graphql.Request{
		OpName: "Sources",
		Query: `
query Sources ($filter: SourceSpec) {
	sources(sourceSpec: $filter) {
		... AllSourceTree
	}
}
fragment AllSourceTree on Source {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			tag
			commit
		}
	}
}
`,
		Variables: &__SourcesInput{
			Filter: filter,
		},
	}
	var err error

	var data SourcesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func VEXPackageAndGhsa(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	ghsa GHSAInputSpec,
	vexStatement VexStatementInputSpec,
) (*VEXPackageAndGhsaResponse, error) {
	req := &graphql.Request{
		OpName: "VEXPackageAndGhsa",
		Query: `
mutation VEXPackageAndGhsa ($pkg: PkgInputSpec!, $ghsa: GHSAInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestGHSA(ghsa: $ghsa) {
		... AllGHSATree
	}
	ingestVEXStatement(subject: {package:$pkg}, vulnerability: {ghsa:$ghsa}, vexStatement: $vexStatement) {
		... allCertifyVEXStatement
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment allCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`,
		Variables: &__VEXPackageAndGhsaInput{
			Pkg:          pkg,
			Ghsa:         ghsa,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VEXPackageAndGhsaResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func VexArtifactAndCve(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	cve CVEInputSpec,
	vexStatement VexStatementInputSpec,
) (*VexArtifactAndCveResponse, error) {
	req := &graphql.Request{
		OpName: "VexArtifactAndCve",
		Query: `
mutation VexArtifactAndCve ($artifact: ArtifactInputSpec!, $cve: CVEInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
	ingestCVE(cve: $cve) {
		... AllCveTree
	}
	ingestVEXStatement(subject: {artifact:$artifact}, vulnerability: {cve:$cve}, vexStatement: $vexStatement) {
		... allCertifyVEXStatement
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment allCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`,
		Variables: &__VexArtifactAndCveInput{
			Artifact:     artifact,
			Cve:          cve,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VexArtifactAndCveResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func VexArtifactAndGhsa(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	ghsa GHSAInputSpec,
	vexStatement VexStatementInputSpec,
) (*VexArtifactAndGhsaResponse, error) {
	req := &graphql.Request{
		OpName: "VexArtifactAndGhsa",
		Query: `
mutation VexArtifactAndGhsa ($artifact: ArtifactInputSpec!, $ghsa: GHSAInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
	ingestGHSA(ghsa: $ghsa) {
		... AllGHSATree
	}
	ingestVEXStatement(subject: {artifact:$artifact}, vulnerability: {ghsa:$ghsa}, vexStatement: $vexStatement) {
		... allCertifyVEXStatement
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment allCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`,
		Variables: &__VexArtifactAndGhsaInput{
			Artifact:     artifact,
			Ghsa:         ghsa,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VexArtifactAndGhsaResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func VexArtifactAndOsv(
	ctx context.Context,
	client graphql.Client,
	artifact ArtifactInputSpec,
	osv OSVInputSpec,
	vexStatement VexStatementInputSpec,
) (*VexArtifactAndOsvResponse, error) {
	req := &graphql.Request{
		OpName: "VexArtifactAndOsv",
		Query: `
mutation VexArtifactAndOsv ($artifact: ArtifactInputSpec!, $osv: OSVInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestArtifact(artifact: $artifact) {
		... AllArtifactTree
	}
	ingestOSV(osv: $osv) {
		... AllOSVTree
	}
	ingestVEXStatement(subject: {artifact:$artifact}, vulnerability: {osv:$osv}, vexStatement: $vexStatement) {
		... allCertifyVEXStatement
	}
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment allCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`,
		Variables: &__VexArtifactAndOsvInput{
			Artifact:     artifact,
			Osv:          osv,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VexArtifactAndOsvResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func VexPackageAndCve(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	cve CVEInputSpec,
	vexStatement VexStatementInputSpec,
) (*VexPackageAndCveResponse, error) {
	req := &graphql.Request{
		OpName: "VexPackageAndCve",
		Query: `
mutation VexPackageAndCve ($pkg: PkgInputSpec!, $cve: CVEInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestCVE(cve: $cve) {
		... AllCveTree
	}
	ingestVEXStatement(subject: {package:$pkg}, vulnerability: {cve:$cve}, vexStatement: $vexStatement) {
		... allCertifyVEXStatement
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment allCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
fragment AllOSVTree on OSV {
	id
	osvId
}
`,
		Variables: &__VexPackageAndCveInput{
			Pkg:          pkg,
			Cve:          cve,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VexPackageAndCveResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func VexPackageAndOsv(
	ctx context.Context,
	client graphql.Client,
	pkg PkgInputSpec,
	osv OSVInputSpec,
	vexStatement VexStatementInputSpec,
) (*VexPackageAndOsvResponse, error) {
	req := &graphql.Request{
		OpName: "VexPackageAndOsv",
		Query: `
mutation VexPackageAndOsv ($pkg: PkgInputSpec!, $osv: OSVInputSpec!, $vexStatement: VexStatementInputSpec!) {
	ingestPackage(pkg: $pkg) {
		... AllPkgTree
	}
	ingestOSV(osv: $osv) {
		... AllOSVTree
	}
	ingestVEXStatement(subject: {package:$pkg}, vulnerability: {osv:$osv}, vexStatement: $vexStatement) {
		... allCertifyVEXStatement
	}
}
fragment AllPkgTree on Package {
	id
	type
	namespaces {
		id
		namespace
		names {
			id
			name
			versions {
				id
				version
				qualifiers {
					key
					value
				}
				subpath
			}
		}
	}
}
fragment AllOSVTree on OSV {
	id
	osvId
}
fragment allCertifyVEXStatement on CertifyVEXStatement {
	id
	subject {
		__typename
		... on Package {
			... AllPkgTree
		}
		... on Artifact {
			... AllArtifactTree
		}
	}
	vulnerability {
		__typename
		... on CVE {
			... AllCveTree
		}
		... on GHSA {
			... AllGHSATree
		}
		... on OSV {
			... AllOSVTree
		}
	}
	status
	vexJustification
	statement
	statusNotes
	knownSince
	origin
	collector
}
fragment AllArtifactTree on Artifact {
	id
	algorithm
	digest
}
fragment AllCveTree on CVE {
	id
	year
	cveId
}
fragment AllGHSATree on GHSA {
	id
	ghsaId
}
`,
		Variables: &__VexPackageAndOsvInput{
			Pkg:          pkg,
			Osv:          osv,
			VexStatement: vexStatement,
		},
	}
	var err error

	var data VexPackageAndOsvResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

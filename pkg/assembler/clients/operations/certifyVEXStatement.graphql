#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines the GraphQL operations to ingest VEX statements into GUAC

mutation IngestCertifyVexPkg(
  $pkg: IDorPkgInput!
  $vulnerability: IDorVulnerabilityInput!
  $vexStatement: VexStatementInputSpec!
) {
  ingestVEXStatement(
    subject: { package: $pkg }
    vulnerability: $vulnerability
    vexStatement: $vexStatement
  )
}

mutation IngestCertifyVexArtifact(
  $artifact: IDorArtifactInput!
  $vulnerability: IDorVulnerabilityInput!
  $vexStatement: VexStatementInputSpec!
) {
  ingestVEXStatement(
    subject: { artifact: $artifact }
    vulnerability: $vulnerability
    vexStatement: $vexStatement
  )
}


# Defines the GraphQL operations to bulk ingest VEX statements into GUAC

mutation IngestCertifyVexPkgs(
  $pkgs: [IDorPkgInput!]!, 
  $vulnerabilities: [IDorVulnerabilityInput!]!, 
  $vexStatements: [VexStatementInputSpec!]!
) {
  ingestVEXStatements(
    subjects: {
      packages: $pkgs}, 
      vulnerabilities: 
      $vulnerabilities, 
      vexStatements: $vexStatements)
}

mutation IngestCertifyVexArtifacts(
  $artifacts: [IDorArtifactInput!]!, 
  $vulnerabilities: [IDorVulnerabilityInput!]!, 
  $vexStatements: [VexStatementInputSpec!]!
  ) {
  ingestVEXStatements(
    subjects: {artifacts: $artifacts}, 
    vulnerabilities: $vulnerabilities, 
    vexStatements: $vexStatements)
}

# Exposes GraphQL queries to retrieve GUAC VEX

query VEXStatements($filter: CertifyVEXStatementSpec!) {
  CertifyVEXStatement(certifyVEXStatementSpec: $filter) {
    ...AllCertifyVEXStatement
  }
}

query VEXStatementList($filter: CertifyVEXStatementSpec!, $after: ID, $first: Int) {
  CertifyVEXStatementList(certifyVEXStatementSpec: $filter, after: $after, first: $first) {
    totalCount
    edges {
      cursor
      node {
        ...AllCertifyVEXStatement
      }
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
    }
  }
}

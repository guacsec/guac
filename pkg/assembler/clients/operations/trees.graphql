#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines GraphQL fragments used in the operations

# TODO(mihaimaruseac): Clean this up: do we want all of these to be returned?

fragment AllPkgTree on Package {
  id
  type
  namespaces {
    id
    namespace
    names {
      id
      name
      versions {
        id
        version
        qualifiers {
          key
          value
        }
        subpath
      }
    }
  }
}

fragment AllSourceTree on Source {
  id
  type
  namespaces {
    id
    namespace
    names {
      id
      name
      tag
      commit
    }
  }
}

fragment AllArtifactTree on Artifact {
  id
  algorithm
  digest
}

fragment allBuilderTree on Builder {
  id
  uri
}

fragment AllCveTree on CVE {
  id
  year
  cveId
}

fragment AllGHSATree on GHSA {
  id
  ghsaId
}

fragment AllOSVTree on OSV {
  id
  osvId
}

fragment AllCertifyScorecard on CertifyScorecard {
  id
  source {
    ...AllSourceTree
  }
  scorecard {
    timeScanned
    aggregateScore
    checks {
      check
      score
    }
    scorecardVersion
    scorecardCommit
    origin
    collector
  }
}

fragment AllIsOccurrencesTree on IsOccurrence {
  id
  subject {
    __typename
    ...on Package {
      ...AllPkgTree
    }
   ...on Source {
      ...AllSourceTree
    }
  }
  artifact {
    ...AllArtifactTree
  }
  justification
  origin
  collector
}

fragment allIsDependencyTree on IsDependency {
  id
  justification
  package {
    ...AllPkgTree
  }
  dependentPackage {
    ...AllPkgTree
  }
  dependencyType
  versionRange
  origin
  collector
}

fragment allSLSATree on HasSLSA {
  id
  subject {
    ...AllArtifactTree
  }
  slsa {
    builtFrom {
      ...AllArtifactTree
    }
    builtBy {
      id
      uri
    }
    buildType
    slsaPredicate {
      key
      value
    }
    slsaVersion
    startedOn
    finishedOn
    origin
    collector
  }
}

fragment AllCertifyBad on CertifyBad {
  id
  justification
  subject {
    __typename
    ... on Package {
      ...AllPkgTree
    }
    ... on Source {
      ...AllSourceTree
    }
    ... on Artifact {
      ...AllArtifactTree
    }
  }
  origin
  collector
}

fragment allCertifyGood on CertifyGood {
  id
  justification
  subject {
    __typename
    ... on Package {
      ...AllPkgTree
    }
    ... on Source {
      ...AllSourceTree
    }
    ... on Artifact {
      ...AllArtifactTree
    }
  }
  origin
  collector
}

fragment allHashEqualTree on HashEqual {
  id
  justification
  artifacts {
    ...AllArtifactTree
  }
  origin
  collector
}

fragment allHasSBOMTree on HasSBOM {
  id
  subject {
    __typename
    ... on Artifact {
      ...AllArtifactTree
    }
    ... on Package {
      ...AllPkgTree
    }
  }
  uri
  algorithm
  digest
  downloadLocation
  annotations {
      key
      value
  }
  origin
  collector
}

fragment allHasSourceAt on HasSourceAt {
  id
  justification
  knownSince
  package {
    ...AllPkgTree
  }
  source {
    ...AllSourceTree
  }
  origin
  collector
}

fragment AllCertifyVuln on CertifyVuln {
  id
  package {
    ...AllPkgTree
  }
  vulnerability {
    __typename
    ... on CVE {
      ...AllCveTree
    }
    ... on OSV {
      ...AllOSVTree
    }
    ... on GHSA {
      ...AllGHSATree
    }
    ... on NoVuln {
      id
    }
  }
  metadata {
    dbUri
    dbVersion
    scannerUri
    scannerVersion
    timeScanned
    origin
    collector
  }
}

fragment allPkgEqual on PkgEqual {
  id
  justification
  packages {
    ...AllPkgTree
  }
  origin
  collector
}

fragment allIsVulnerability on IsVulnerability {
  id
  osv {
    ...AllOSVTree
  }
  vulnerability {
    __typename
    ... on CVE {
      ...AllCveTree
    }
    ... on GHSA {
      ...AllGHSATree
    }
  }
  justification
  origin
  collector
}

fragment allCertifyVEXStatement on CertifyVEXStatement {
  id
  subject {
    __typename
    ... on Package {
      ...AllPkgTree
    }
    ... on Artifact {
      ...AllArtifactTree
    }
  }
  vulnerability {
    __typename
    ... on CVE {
      ...AllCveTree
    }
    ... on GHSA {
      ...AllGHSATree
    }
    ... on OSV {
      ...AllOSVTree
    }
  }
  status
  vexJustification
  statement
  statusNotes
  knownSince
  origin
  collector
}

#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines the GraphQL operations to ingest SLSA attestations into GUAC

mutation SLSAForPackage($pkg: PkgInputSpec!, $materials: [PackageSourceOrArtifactInput!]!, $builder: BuilderInputSpec!, $slsa: SLSAInputSpec!) {
  ingestPackage(pkg: $pkg) {
    ...allPkgTree
  }
  ingestMaterials(materials: $materials) {
    __typename
    ... on Package {
      ...allPkgTree
    }
    ... on Source {
      ...allSourceTree
    }
    ... on Artifact {
      ...allArtifactTree
    }
  }
  ingestBuilder(builder: $builder) {
    uri
  }
  ingestSLSA(subject: {package: $pkg}, builtFrom: $materials, builtBy: $builder, slsa: $slsa) {
    ...allSLSATree
  }
}

mutation SLSAForSource($source: SourceInputSpec!, $materials: [PackageSourceOrArtifactInput!]!, $builder: BuilderInputSpec!, $slsa: SLSAInputSpec!) {
  ingestSource(source: $source) {
    ...allSourceTree
  }
  ingestMaterials(materials: $materials) {
    __typename
    ... on Package {
      ...allPkgTree
    }
    ... on Source {
      ...allSourceTree
    }
    ... on Artifact {
      ...allArtifactTree
    }
  }
  ingestBuilder(builder: $builder) {
    uri
  }
  ingestSLSA(subject: {source: $source}, builtFrom: $materials, builtBy: $builder, slsa: $slsa) {
    ...allSLSATree
  }
}

mutation SLSAForArtifact($artifact: ArtifactInputSpec!, $materials: [PackageSourceOrArtifactInput!]!, $builder: BuilderInputSpec!, $slsa: SLSAInputSpec!) {
  ingestArtifact(artifact: $artifact) {
    ...allArtifactTree
  }
  ingestMaterials(materials: $materials) {
    __typename
    ... on Package {
      ...allPkgTree
    }
    ... on Source {
      ...allSourceTree
    }
    ... on Artifact {
      ...allArtifactTree
    }
  }
  ingestBuilder(builder: $builder) {
    uri
  }
  ingestSLSA(subject: {artifact: $artifact}, builtFrom: $materials, builtBy: $builder, slsa: $slsa) {
    ...allSLSATree
  }
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: pkg/collectsub/collectsub/collectsub.proto

package collectsub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectSubscriberServiceClient is the client API for CollectSubscriberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectSubscriberServiceClient interface {
	AddCollectEntries(ctx context.Context, in *AddCollectEntriesRequest, opts ...grpc.CallOption) (*AddCollectEntriesResponse, error)
	GetCollectEntries(ctx context.Context, in *GetCollectEntriesRequest, opts ...grpc.CallOption) (CollectSubscriberService_GetCollectEntriesClient, error)
}

type collectSubscriberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectSubscriberServiceClient(cc grpc.ClientConnInterface) CollectSubscriberServiceClient {
	return &collectSubscriberServiceClient{cc}
}

func (c *collectSubscriberServiceClient) AddCollectEntries(ctx context.Context, in *AddCollectEntriesRequest, opts ...grpc.CallOption) (*AddCollectEntriesResponse, error) {
	out := new(AddCollectEntriesResponse)
	err := c.cc.Invoke(ctx, "/guacsec.guac.collect_subscriber.schema.CollectSubscriberService/AddCollectEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectSubscriberServiceClient) GetCollectEntries(ctx context.Context, in *GetCollectEntriesRequest, opts ...grpc.CallOption) (CollectSubscriberService_GetCollectEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CollectSubscriberService_ServiceDesc.Streams[0], "/guacsec.guac.collect_subscriber.schema.CollectSubscriberService/GetCollectEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectSubscriberServiceGetCollectEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CollectSubscriberService_GetCollectEntriesClient interface {
	Recv() (*GetCollectEntriesResponse, error)
	grpc.ClientStream
}

type collectSubscriberServiceGetCollectEntriesClient struct {
	grpc.ClientStream
}

func (x *collectSubscriberServiceGetCollectEntriesClient) Recv() (*GetCollectEntriesResponse, error) {
	m := new(GetCollectEntriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectSubscriberServiceServer is the server API for CollectSubscriberService service.
// All implementations must embed UnimplementedCollectSubscriberServiceServer
// for forward compatibility
type CollectSubscriberServiceServer interface {
	AddCollectEntries(context.Context, *AddCollectEntriesRequest) (*AddCollectEntriesResponse, error)
	GetCollectEntries(*GetCollectEntriesRequest, CollectSubscriberService_GetCollectEntriesServer) error
	mustEmbedUnimplementedCollectSubscriberServiceServer()
}

// UnimplementedCollectSubscriberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectSubscriberServiceServer struct {
}

func (UnimplementedCollectSubscriberServiceServer) AddCollectEntries(context.Context, *AddCollectEntriesRequest) (*AddCollectEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectEntries not implemented")
}
func (UnimplementedCollectSubscriberServiceServer) GetCollectEntries(*GetCollectEntriesRequest, CollectSubscriberService_GetCollectEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCollectEntries not implemented")
}
func (UnimplementedCollectSubscriberServiceServer) mustEmbedUnimplementedCollectSubscriberServiceServer() {
}

// UnsafeCollectSubscriberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectSubscriberServiceServer will
// result in compilation errors.
type UnsafeCollectSubscriberServiceServer interface {
	mustEmbedUnimplementedCollectSubscriberServiceServer()
}

func RegisterCollectSubscriberServiceServer(s grpc.ServiceRegistrar, srv CollectSubscriberServiceServer) {
	s.RegisterService(&CollectSubscriberService_ServiceDesc, srv)
}

func _CollectSubscriberService_AddCollectEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectSubscriberServiceServer).AddCollectEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guacsec.guac.collect_subscriber.schema.CollectSubscriberService/AddCollectEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectSubscriberServiceServer).AddCollectEntries(ctx, req.(*AddCollectEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectSubscriberService_GetCollectEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCollectEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectSubscriberServiceServer).GetCollectEntries(m, &collectSubscriberServiceGetCollectEntriesServer{stream})
}

type CollectSubscriberService_GetCollectEntriesServer interface {
	Send(*GetCollectEntriesResponse) error
	grpc.ServerStream
}

type collectSubscriberServiceGetCollectEntriesServer struct {
	grpc.ServerStream
}

func (x *collectSubscriberServiceGetCollectEntriesServer) Send(m *GetCollectEntriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CollectSubscriberService_ServiceDesc is the grpc.ServiceDesc for CollectSubscriberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectSubscriberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guacsec.guac.collect_subscriber.schema.CollectSubscriberService",
	HandlerType: (*CollectSubscriberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCollectEntries",
			Handler:    _CollectSubscriberService_AddCollectEntries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCollectEntries",
			Handler:       _CollectSubscriberService_GetCollectEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/collectsub/collectsub/collectsub.proto",
}

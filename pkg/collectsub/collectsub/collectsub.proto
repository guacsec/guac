//
// Copyright 2023 The GUAC Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option go_package = "github.com/guacsec/guac/pkg/collectsub";

package gaucsec.guac.collect_subscriber.schema;

enum CollectDataType {
    DATATYPE_GIT = 0;
    DATATYPE_OCI = 1;
    DATATYPE_UNKNOWN = 999;
}

// Generic types
message CollectEntry {
    CollectDataType type = 1;
    string value = 2;
    optional CollectStatus status = 3;
}

// rpc AddCollectEntry 
message AddCollectEntriesRequest {
    repeated CollectEntry entries = 1;
}

message AddCollectEntriesResponse {
    bool success = 1;
}


// rpc GetCollectEntries
message CollectEntryFilter {
    CollectDataType type = 1;
    string glob = 2;
}

message GetCollectEntriesRequest {
    repeated CollectEntryFilter filters = 1;
    // since_time in unix epoch
    int64 since_time = 2;
}

message GetCollectEntriesResponse {
    repeated CollectEntry entries = 1;
}

// rpc GetCollectRequestStatus
enum CollectStatus {
    COLLECTSTATUS_UNSEEN = 0;
    COLLECTSTATUS_NOTED = 1;
    COLLECTSTATUS_COLLECTED = 2;
}


message GetCollectStatusRequest {
    repeated CollectEntryFilter filters = 1;
}

message GetCollectStatusResponse {
    repeated CollectEntry entries = 1;
}


service ColectSubscriberService {
  rpc AddCollectEntry(stream AddCollectEntriesRequest) returns (AddCollectEntriesResponse);
  //rpc GetCollectEntries (d Datatype, t time.Time)
  rpc GetCollectEntries (GetCollectEntriesRequest) returns (stream GetCollectEntriesResponse);

  // rpc GetCollectRequestStatus (reqs []CollectRequest) [](Collector, CollectRequestStatus)
  rpc GetCollectStatus (GetCollectStatusRequest) returns (GetCollectStatusResponse);

  // UpdateCollectRequestStatus (req CollectRequest, c Collector, s CollectRequestStatus)

}
// 
// type CollectRequestStatus struct {
//     // Status is one of Unseen, Noted, Collected, Written
//     Status string
//     // Timestamp is the time of which status is updated.
//     Timestamp time.Time
// }
// 
// 
// type CollectRequestDBState struct {
//     Req CloudRequest // Indexed Key
//     Col Collector // Indexed key
//     Status CollectRequestStatus
// }
// 
// 
// Type CollectRequestAPI interface {
//     // AddCollectRequest will take a CollectRequest and insert it into the configured CollectRequest DB
//     AddCollectRequest (req CollectRequest) error
// 
// 
//     // GetCollectRequestStatus (reqs []CollectRequest)
//     GetCollectRequestStatus (reqs []CollectRequest) [](Collector, CollectRequestStatus)
// 
// 
// 
//     // USED ONLY BY COLLECTORS
// 
// 
// 
//     // RegisterCollector registers a collector the the CollectRequest API to tell it that the collector is serving CollectRequests and listening on only data types d, as well as the type of feedback it is providing (for example, some collectors by default may not update “COLLECTED” information)
//     RegisterCollector (c Collector, d DataType, s StatusInformation)
// }
// 

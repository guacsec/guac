// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Identify the most important dependencies
	// (GET /analysis/dependencies)
	AnalyzeDependencies(w http.ResponseWriter, r *http.Request, params AnalyzeDependenciesParams)
	// Health check the server
	// (GET /healthz)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Get dependencies for an artifact, identified by a digest
	// (GET /v0/artifact/{digest}/dependencies)
	GetArtifactDeps(w http.ResponseWriter, r *http.Request, digest string)
	// Get vulnerabilities for an artifact, identified by a digest
	// (GET /v0/artifact/{digest}/vulns)
	GetArtifactVulns(w http.ResponseWriter, r *http.Request, digest string)
	// Get all purls related to the given purl
	// (GET /v0/package/{purl})
	GetPackagePurls(w http.ResponseWriter, r *http.Request, purl string)
	// Get dependencies for a specific Package URL (purl)
	// (GET /v0/package/{purl}/dependencies)
	GetPackageDeps(w http.ResponseWriter, r *http.Request, purl string)
	// Get vulnerabilities for a Package URL (purl)
	// (GET /v0/package/{purl}/vulns)
	GetPackageVulns(w http.ResponseWriter, r *http.Request, purl string, params GetPackageVulnsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Identify the most important dependencies
// (GET /analysis/dependencies)
func (_ Unimplemented) AnalyzeDependencies(w http.ResponseWriter, r *http.Request, params AnalyzeDependenciesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check the server
// (GET /healthz)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get dependencies for an artifact, identified by a digest
// (GET /v0/artifact/{digest}/dependencies)
func (_ Unimplemented) GetArtifactDeps(w http.ResponseWriter, r *http.Request, digest string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get vulnerabilities for an artifact, identified by a digest
// (GET /v0/artifact/{digest}/vulns)
func (_ Unimplemented) GetArtifactVulns(w http.ResponseWriter, r *http.Request, digest string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all purls related to the given purl
// (GET /v0/package/{purl})
func (_ Unimplemented) GetPackagePurls(w http.ResponseWriter, r *http.Request, purl string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get dependencies for a specific Package URL (purl)
// (GET /v0/package/{purl}/dependencies)
func (_ Unimplemented) GetPackageDeps(w http.ResponseWriter, r *http.Request, purl string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get vulnerabilities for a Package URL (purl)
// (GET /v0/package/{purl}/vulns)
func (_ Unimplemented) GetPackageVulns(w http.ResponseWriter, r *http.Request, purl string, params GetPackageVulnsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AnalyzeDependencies operation middleware
func (siw *ServerInterfaceWrapper) AnalyzeDependencies(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AnalyzeDependenciesParams

	// ------------- Optional query parameter "paginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "paginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "paginationSpec", Err: err})
		return
	}

	// ------------- Required query parameter "sort" -------------

	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sort"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AnalyzeDependencies(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetArtifactDeps operation middleware
func (siw *ServerInterfaceWrapper) GetArtifactDeps(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameterWithOptions("simple", "digest", chi.URLParam(r, "digest"), &digest, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "digest", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArtifactDeps(w, r, digest)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetArtifactVulns operation middleware
func (siw *ServerInterfaceWrapper) GetArtifactVulns(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameterWithOptions("simple", "digest", chi.URLParam(r, "digest"), &digest, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "digest", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArtifactVulns(w, r, digest)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPackagePurls operation middleware
func (siw *ServerInterfaceWrapper) GetPackagePurls(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "purl" -------------
	var purl string

	err = runtime.BindStyledParameterWithOptions("simple", "purl", chi.URLParam(r, "purl"), &purl, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purl", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPackagePurls(w, r, purl)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPackageDeps operation middleware
func (siw *ServerInterfaceWrapper) GetPackageDeps(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "purl" -------------
	var purl string

	err = runtime.BindStyledParameterWithOptions("simple", "purl", chi.URLParam(r, "purl"), &purl, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purl", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPackageDeps(w, r, purl)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPackageVulns operation middleware
func (siw *ServerInterfaceWrapper) GetPackageVulns(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "purl" -------------
	var purl string

	err = runtime.BindStyledParameterWithOptions("simple", "purl", chi.URLParam(r, "purl"), &purl, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purl", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackageVulnsParams

	// ------------- Optional query parameter "includeDependencies" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDependencies", r.URL.Query(), &params.IncludeDependencies)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDependencies", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPackageVulns(w, r, purl, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/analysis/dependencies", wrapper.AnalyzeDependencies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/healthz", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v0/artifact/{digest}/dependencies", wrapper.GetArtifactDeps)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v0/artifact/{digest}/vulns", wrapper.GetArtifactVulns)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v0/package/{purl}", wrapper.GetPackagePurls)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v0/package/{purl}/dependencies", wrapper.GetPackageDeps)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v0/package/{purl}/vulns", wrapper.GetPackageVulns)
	})

	return r
}

type BadGatewayJSONResponse Error

type BadRequestJSONResponse Error

type InternalServerErrorJSONResponse Error

type PackageNameListJSONResponse []PackageName

type PurlListJSONResponse struct {
	// PaginationInfo Contains the cursor to retrieve more pages. If there are no more,  NextCursor will be nil.
	PaginationInfo PaginationInfo `json:"PaginationInfo"`
	PurlList       []Purl         `json:"PurlList"`
}

type VulnerabilityListJSONResponse []Vulnerability

type AnalyzeDependenciesRequestObject struct {
	Params AnalyzeDependenciesParams
}

type AnalyzeDependenciesResponseObject interface {
	VisitAnalyzeDependenciesResponse(w http.ResponseWriter) error
}

type AnalyzeDependencies200JSONResponse struct{ PackageNameListJSONResponse }

func (response AnalyzeDependencies200JSONResponse) VisitAnalyzeDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AnalyzeDependencies400JSONResponse struct{ BadRequestJSONResponse }

func (response AnalyzeDependencies400JSONResponse) VisitAnalyzeDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AnalyzeDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AnalyzeDependencies500JSONResponse) VisitAnalyzeDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AnalyzeDependencies502JSONResponse struct{ BadGatewayJSONResponse }

func (response AnalyzeDependencies502JSONResponse) VisitAnalyzeDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200JSONResponse string

func (response HealthCheck200JSONResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactDepsRequestObject struct {
	Digest string `json:"digest"`
}

type GetArtifactDepsResponseObject interface {
	VisitGetArtifactDepsResponse(w http.ResponseWriter) error
}

type GetArtifactDeps200JSONResponse struct{ PurlListJSONResponse }

func (response GetArtifactDeps200JSONResponse) VisitGetArtifactDepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactDeps400JSONResponse struct{ BadRequestJSONResponse }

func (response GetArtifactDeps400JSONResponse) VisitGetArtifactDepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactDeps500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetArtifactDeps500JSONResponse) VisitGetArtifactDepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactDeps502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetArtifactDeps502JSONResponse) VisitGetArtifactDepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactVulnsRequestObject struct {
	Digest string `json:"digest"`
}

type GetArtifactVulnsResponseObject interface {
	VisitGetArtifactVulnsResponse(w http.ResponseWriter) error
}

type GetArtifactVulns200JSONResponse struct{ VulnerabilityListJSONResponse }

func (response GetArtifactVulns200JSONResponse) VisitGetArtifactVulnsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactVulns400JSONResponse struct{ BadRequestJSONResponse }

func (response GetArtifactVulns400JSONResponse) VisitGetArtifactVulnsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactVulns500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetArtifactVulns500JSONResponse) VisitGetArtifactVulnsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactVulns502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetArtifactVulns502JSONResponse) VisitGetArtifactVulnsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetPackagePurlsRequestObject struct {
	Purl string `json:"purl"`
}

type GetPackagePurlsResponseObject interface {
	VisitGetPackagePurlsResponse(w http.ResponseWriter) error
}

type GetPackagePurls200JSONResponse struct{ PurlListJSONResponse }

func (response GetPackagePurls200JSONResponse) VisitGetPackagePurlsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPackagePurls400JSONResponse struct{ BadRequestJSONResponse }

func (response GetPackagePurls400JSONResponse) VisitGetPackagePurlsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPackagePurls500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPackagePurls500JSONResponse) VisitGetPackagePurlsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPackagePurls502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetPackagePurls502JSONResponse) VisitGetPackagePurlsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageDepsRequestObject struct {
	Purl string `json:"purl"`
}

type GetPackageDepsResponseObject interface {
	VisitGetPackageDepsResponse(w http.ResponseWriter) error
}

type GetPackageDeps200JSONResponse struct{ PurlListJSONResponse }

func (response GetPackageDeps200JSONResponse) VisitGetPackageDepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageDeps400JSONResponse struct{ BadRequestJSONResponse }

func (response GetPackageDeps400JSONResponse) VisitGetPackageDepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageDeps500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPackageDeps500JSONResponse) VisitGetPackageDepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageDeps502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetPackageDeps502JSONResponse) VisitGetPackageDepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageVulnsRequestObject struct {
	Purl   string `json:"purl"`
	Params GetPackageVulnsParams
}

type GetPackageVulnsResponseObject interface {
	VisitGetPackageVulnsResponse(w http.ResponseWriter) error
}

type GetPackageVulns200JSONResponse struct{ VulnerabilityListJSONResponse }

func (response GetPackageVulns200JSONResponse) VisitGetPackageVulnsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageVulns400JSONResponse struct{ BadRequestJSONResponse }

func (response GetPackageVulns400JSONResponse) VisitGetPackageVulnsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageVulns500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPackageVulns500JSONResponse) VisitGetPackageVulnsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageVulns502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetPackageVulns502JSONResponse) VisitGetPackageVulnsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Identify the most important dependencies
	// (GET /analysis/dependencies)
	AnalyzeDependencies(ctx context.Context, request AnalyzeDependenciesRequestObject) (AnalyzeDependenciesResponseObject, error)
	// Health check the server
	// (GET /healthz)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// Get dependencies for an artifact, identified by a digest
	// (GET /v0/artifact/{digest}/dependencies)
	GetArtifactDeps(ctx context.Context, request GetArtifactDepsRequestObject) (GetArtifactDepsResponseObject, error)
	// Get vulnerabilities for an artifact, identified by a digest
	// (GET /v0/artifact/{digest}/vulns)
	GetArtifactVulns(ctx context.Context, request GetArtifactVulnsRequestObject) (GetArtifactVulnsResponseObject, error)
	// Get all purls related to the given purl
	// (GET /v0/package/{purl})
	GetPackagePurls(ctx context.Context, request GetPackagePurlsRequestObject) (GetPackagePurlsResponseObject, error)
	// Get dependencies for a specific Package URL (purl)
	// (GET /v0/package/{purl}/dependencies)
	GetPackageDeps(ctx context.Context, request GetPackageDepsRequestObject) (GetPackageDepsResponseObject, error)
	// Get vulnerabilities for a Package URL (purl)
	// (GET /v0/package/{purl}/vulns)
	GetPackageVulns(ctx context.Context, request GetPackageVulnsRequestObject) (GetPackageVulnsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// AnalyzeDependencies operation middleware
func (sh *strictHandler) AnalyzeDependencies(w http.ResponseWriter, r *http.Request, params AnalyzeDependenciesParams) {
	var request AnalyzeDependenciesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AnalyzeDependencies(ctx, request.(AnalyzeDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AnalyzeDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AnalyzeDependenciesResponseObject); ok {
		if err := validResponse.VisitAnalyzeDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx, request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArtifactDeps operation middleware
func (sh *strictHandler) GetArtifactDeps(w http.ResponseWriter, r *http.Request, digest string) {
	var request GetArtifactDepsRequestObject

	request.Digest = digest

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtifactDeps(ctx, request.(GetArtifactDepsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtifactDeps")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArtifactDepsResponseObject); ok {
		if err := validResponse.VisitGetArtifactDepsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArtifactVulns operation middleware
func (sh *strictHandler) GetArtifactVulns(w http.ResponseWriter, r *http.Request, digest string) {
	var request GetArtifactVulnsRequestObject

	request.Digest = digest

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtifactVulns(ctx, request.(GetArtifactVulnsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtifactVulns")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArtifactVulnsResponseObject); ok {
		if err := validResponse.VisitGetArtifactVulnsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPackagePurls operation middleware
func (sh *strictHandler) GetPackagePurls(w http.ResponseWriter, r *http.Request, purl string) {
	var request GetPackagePurlsRequestObject

	request.Purl = purl

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPackagePurls(ctx, request.(GetPackagePurlsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPackagePurls")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPackagePurlsResponseObject); ok {
		if err := validResponse.VisitGetPackagePurlsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPackageDeps operation middleware
func (sh *strictHandler) GetPackageDeps(w http.ResponseWriter, r *http.Request, purl string) {
	var request GetPackageDepsRequestObject

	request.Purl = purl

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPackageDeps(ctx, request.(GetPackageDepsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPackageDeps")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPackageDepsResponseObject); ok {
		if err := validResponse.VisitGetPackageDepsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPackageVulns operation middleware
func (sh *strictHandler) GetPackageVulns(w http.ResponseWriter, r *http.Request, purl string, params GetPackageVulnsParams) {
	var request GetPackageVulnsRequestObject

	request.Purl = purl
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPackageVulns(ctx, request.(GetPackageVulnsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPackageVulns")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPackageVulnsResponseObject); ok {
		if err := validResponse.VisitGetPackageVulnsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

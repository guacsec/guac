// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

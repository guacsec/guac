// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RUTU/kOBD9K6XalZBWWdJidy+5LfsxgzTSjIAbcDBOdceQlE3ZAWVQ/vuonO5Mg7pH",
	"zYHT3Jy4Pl6998rPaH0XPBOniNUzCsXgOVL+ODX1B5PoyQz6ZT0n4qRHE0LrrEnOc3kXPeu/aBvqjJ5+",
	"FVpihb+U30uX020s/xPxguM4FlhTtOKCFsEKLxuCSPJIAsTW95xIqAbDQJoC1jOTTY5XkDykhqA2ycCt",
	"sffENY6Foj2nh55ien+0p6YGmZoVEHvbgImwFN+B40fTuhq8QOdiVLzBiOkokUSFeaaTsWkv8rBTh3fH",
	"u2kKU1dYBxb4pZf2k3sjZS5Rlw2ShkBYYUzieKXl1j+MiBl24fgbWhcT+CWEXtqIGrEGr/VmNoL4QJLc",
	"5MOOYjQr2tFxLFBlcEI1Vldz4M2MxN/ekU0TFMdLjxX3bVugD8QmOKzwj+PF8QILDCY1uVtp2LRDdLGs",
	"KRDXxHaNY0WZHIWWqTmrdaR19L/bwVpuFr26et5ldi8JvNQkSocaOhh7b1YUrxngNzhaZoOxHY7gd7jc",
	"uocnl5qc0bhVQzEB993tVGcDOW2qROuFrJF6f5XWP2mRz4H44uJ/mDOm0zWjUocVPvQkAxbIpssaeEm4",
	"zX+SnootmxD3naoyD4J6uy6+pdEs5k3x8v05WSz2OX6OK2cHjwX+eUjC1jsxFvjXISm7djbnnhzUbvOI",
	"Zrf3XWdk0J1UmdxyyBp0PiZwXfCSDCd44TxNKxsybWq+7rXhx3z/T0P2HnfTePB6v5Zlx2tSazbFDH39",
	"arsIE8bXc07IwCq0rYRprOypwxbtnJI4eqS3LFpeq17azYrN67FZgz3e1pwfevvntu5Gihecqh7Ks5m5",
	"Hcdx/BYAAP//9QfnlmEIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

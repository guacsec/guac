// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWS2/jNhD+KwO2QIBCjYNte/GtSV8L9BGsc9vdw4QaS9xIJDMkkzqB/nsxlGXLWnnj",
	"HnLam0jO45vHN6NnpV3rnSUbg1o+K4+MLUXifLrGyliMxtmVJy03JQXNxsuVWqqbmsDvZEA7uzZV4v60",
	"dgyxJrhPxJvzDxbgOzi7xopW5onOIHjSZm0oZCGb2lticGtgCqmJAZhiYkvlVvEqcXB8Bmb/Arcb8EwP",
	"xqUAGpsmANpyZPixxij4CKLban2wqlBGsGdYqlAWW1LLaaiFCrqmFnNO2HniaCjnpAciX3HjRTNENrZS",
	"XaGG4EaPxkaqiFXXFcOVu/1EOqpOrpiCdzb0li+x/B0jPeJGTtrZSDbKJ3rfGJ3BLT4FyfzzCN63TGu1",
	"VN8s9pVc9K9h8Suz497V55ULxA/EQFa7ZCMxlYAWSFSklJZ0NLaS3EmFSowIt6jvyJYS7CWW7+g+UYiv",
	"j/YSS+DeWQEh6RowwJpdC8Y+YGNKcAytCUHwjlq4K9Rbicxis8rB9h5eHe/gFHqvsBUs1HXi5k/zP1N2",
	"2H/7Rn1r1+4liBPpCQQTqQ0vmkjcqH37IjNuVN+898kwlWr5fopq5ObjbOMf5utnaEyIwn6fuAnZ+ta9",
	"oNtV7TATf1EIWNEMFSfgBsHPoRQz6Tx08jf9G79A+RsXsbkS/hwh/RjHyNYsFEn0TDCdTCzBZlPTFMp5",
	"suiNWqofzi/OL1ShPMY6g12gxWYTTFiU5MmWZPU2jIoyQImsD7aUtIv0E/0yli0OVsD7+dbYiywmc7Mr",
	"5nZEcBzBcdlP+Ji3hr7DisJ2uq8zu63enMH3cDN6h0cT66xRm6qmEEebYogxDlaCdkwauTxupXGPYuQf",
	"T3a1+g12Gv3X0e0gAahxMSMnGu8IsqmVEu8CyRtka3xU7V1RP06G/5uLi2NE3MktdqTqCvXjKQqjId0V",
	"6qdTVOYGZtZ9c5K7YYNlCqe2Rd7IQJQymfUm16B1IYJpveOINsJBq4raoiZsYv10tG//yO9XNek7NZ/G",
	"k2frDNemo7wU7e1vynZlmgA9xmmcPTLQAm2k0IeVe+o0Zr6jyIYeXpmamYiJm4GUO0INxDnCBtH5Ihu+",
	"7mYfineQU6mg5Bl3ue26rvsvAAD//+Xarxx/CwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXT4/bthP9KgP+foDbQrUXaXvZW3aTNAvkzyJeoIckBy45tpilSO2QtKsE/u7FUJIt",
	"OXKyKbCH3iRxhvPmzfAN9UUoX9XeoYtBnH8RtSRZYUTKb9dybZyMxrtljYq/aAyKTM2fxLm4KRHqvQ0o",
	"71Zmnah9W3mCWCLcJ6Rm/sEB/AKza7nGpfmMMwg1KrMyGLKRS9UtEvgVEIZkYwDCmMih7hwvEwVPMzCH",
	"FbhtoCbcGJ8CKGltAOn0YONtKSPjQ4i+8/rgRCEMY8+wRCGcrFCci3qcaiGCKrGSmRPyNVI0mDlpgfBT",
	"bGr2DJGMW4tdIfrkBovGRVwjid2u6D/520+ootjxJ8JQexfanS+k/lNG3MqG35R3EV3kR1nX1qgMbvEp",
	"MPNfBvD+T7gS5+J/i0MlF+1qWDwn8tSG+rpyAWmDBOiUTy4ioQbpANmFS+lQRePWzB1XSMso4VaqO3Sa",
	"k72Q+h3eJwzx8dFeSA3UBisgJFWCDLAiX4FxG2mNBk9QmRAY76CFd4W44syctMucbBvh0fH2QaGNCp0h",
	"d4i6k2t8Iyt8ZX6QOROxCt+DNAggDi0niWQzBfQpWBMiH7u6dQQ+DgG2JpZcdUOgsUan0UXIbZJJvU5k",
	"fxj/+BgdpOXKrfz30xpZH0F4GDOJ7AQlfAbvkyHU4vz9MapBmI+T5/ckm4lsyLt34RndvvnGTLzGEOQa",
	"JxTlCFxv+DWUUWN9HeFZX8JLruCUOhWi9/w2hGxVHG84Dei4vmOuLr2L0rhW/VXW1E6lyeAGofKUZwuG",
	"OVyt2IoQJCE4n9cKgDf4d2zVGLbGWrhFcMbOs8SPCThYTur2jY/SnuRmN5UdN9MEWzseLpyuS9YWwtfo",
	"ZG3EufhtfjY/Y1wylhnSQjppm2DCoj9gqgO7xgyD8bf8aW4ttv6Mz4a2xWhav59u/4PJ4mia74qpcR48",
	"RfCk22Ec84DPrRW6QbzKQuxUM4Nf4WawvhcNKM26xBAHQ30vIv0uQXlCJUmf3sX6LW/ytka3XL6AvUf7",
	"dHKQcwJi2LWREg7HObpUcS/vE8nDvtt80Mv7on48mtNPzs5Oic3ebnGs9LtC/P4Qv8FY3RXij4e4TI24",
	"7PvkQeH6O0dWq1RVkhoeYVwts2pyKSofIpiq9hSlizDqWHZblChtLD+fbN+Xef2yRHUnptl88BiZOHLH",
	"w1ezd3ex7C45JkCL8TjPFhkohjZwaNPKrXXqgI6jvjBOZ/9I0gUTzQZHPPWnybg6xXlu+ZcyLC/evs6X",
	"Vn5+tXzK99kePYtdCnwpazPZ79YAoc30hNLU2Z3Xr8JbpRIROoX5I1zfrZ/fJ2knd40eVoxZeRcMH3c+",
	"MBtpedL3h7HV0nEp33UK/bhS9FeJLPlgjbsLcItxi+jA+eQCVClEFvtKauR/AG3WLBSewGSOGwAl3d7i",
	"UzZv8s0GfjJznOfx/PMclvlPoYEZL82YEWmt30LK90iuDTMvI2jvZhFq8hujsS1GF7Mtakh5MrRl1biS",
	"yUZuOZi1drM53HgIKEmV+a8lkS36sH06/X+Lnp/UNmbj0jttMktTotbG6z0mxGxS9BlPn8vhvtd1wfzU",
	"HxPPwOIbJ3My1Ji4Bwfb53U63L+T6f5+91/T5/4YntIbVsbdPwEAAP//dlaozd4PAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

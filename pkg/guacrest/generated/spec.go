// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RVS2/jNhD+KwO2QIBCjYNte/GtSV8L9BGsc9vdw4QaS9xIJDMkkzqB/nsxlCXLXnnj",
	"HnLam2XO45v55pt5Vtq13lmyMajls/LI2FIkzl/XWBmL0Ti78qTln5KCZuPlL7VUNzWBH21AO7s2VeL+",
	"a+0YYk1wn4g35x8swHdwdo0VrcwTnUHwpM3aUJmNbGpvicGtgSmkJgZgioktlVvHq8TB8RmY3QvcbsAz",
	"PRiXAmhsmgBoyzFwgMcao+AjiG7r9cGqQhnBnmGpQllsSS0PSy1U0DW1mHvCzhNHQ7knPRD5FTdePENk",
	"YyvVFWoobvJobKSKWHVdoZjuk2Eq1fL9zvRjMZi620+ko+p60+CdDX3GSyx/x0iPuJEv7WwkG+Unet8Y",
	"nUEvPgVh5HkC+1umtVqqbxY7hhf9a1j8yuy4T/U5o4H4gRjIapdsJKYS0AKJi1BsSUdjK+mpMFdiRLhF",
	"fUe2lCZcYvmO7hOF+PpoL7EE7pMVEJKuAQOs2bVg7AM2pgTH0JoQBO9ktLtCvZXKLDarXGyf4dXxDkmh",
	"zwpbw0JdJ27+NP+zZftzuRvgt3btXoJ4YH0AwURqw4shEjfiuB1fZMbN3JxP80zSzA/+fr9+hsaEKFvB",
	"J25Cjr5NL+hG1vY78ReFgBXNSPQA3GD4OZRipp37Sf6mf+MXVsGNi9hciX5OWAaTWLNQpNEzxXSyyQSb",
	"TU1TKOfJojdqqX44vzi/UIXyGOsMdoEWm00wYVGSJ1uS1dsyKsoApbK+2FLaLtZP9MvUttg7De/nR2Nn",
	"sjjYp10xdzuC4wiOy37zx3xN9B1WFLZbf53VbfXmDL6Hm8k7PJpYZ4/aVDWFOLkgQ41xiBK0Y9LI5fEo",
	"jXuUIP94sqvVbzB69L+OXg0pQE3JjJxoejvIplYoHgvJl2UbfML2SOrHg+X/5uLimBBHu8Uoqq5QP57i",
	"MFnSXaF+OsVlbmFm3zcnpRsuWJZwalvkjSxEocmsN5mD1oUIpvWOI9oIe6MqbouasIn109G5/SO/X9Wk",
	"79R8G0/erTNaO1zlpXhTyNC3J9ME6DEe1tkjAy3QJg59WXmmTlPmO4ps6OGVpZmFmLgZRDkKahDOETWI",
	"zxfV8HUP+0DeXk+FQekzjr3tuq77LwAA//+xB1CVlwsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

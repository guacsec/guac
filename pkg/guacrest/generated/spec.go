// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW32/bthP/Vw78fgFvg2YH3fbityZt1wLtGtQF9tD24UKeLTYSqRxJG2rg/304ylLk",
	"RN7SAXnYm0Te8T7363N3q7SvG+/IxaCWt6pBxpoicf67xI11GK13q4a0nBgKmm0jR2qpPpYEzSAD2ru1",
	"3STu/taeIZYEN4m4nX92AD/B7BI3tLLfaAahIW3XlkIWcqm+Iga/BqaQqhiAKSZ2ZA6KF4mD5xnYuxu4",
	"aqFh2lqfAmisqgDozOjhXYlR8BFEf9D67FShrGDPsFShHNaklqo5drVQQZdUY44J+4Y4Wsox6YDIV2wb",
	"0QyRrduofaF650aX1kXaEKv9vuiP/NVX0lHt5YgpNN6F7uVzNL9jpB228qe9i+SifGLTVFZncIuvQSJ/",
	"O4L3f6a1Wqr/Le4yuehuw+Ils+fO1MPMBeItMZDTPrlITAbQAYmKpNKRjtZtJHaSIYMR4Qr1NTkjzp6j",
	"+UA3iUJ8erTnaIA7YwWEpEvAAGv2NVi3xcoa8Ay1DUHwjkp4X6g34pnDapWd7Sw8Od7eKHRW4SAoFaKv",
	"cUN/YE1v7XdGzkaqwz9BGhlQdyWHzNhOAX0OlQ1R2q7pFEHaIcDOxlKybhkMNeQMuQi5THJQLxNXT4Q/",
	"cfWdwBNXIffX4Q0xMeT5uHffUQi4oYnmzb14kyyTUctPg+CXB117lMOHFl700bqQYE0RQaF6zYcQHtqS",
	"cEyI7oXE1l4tXaqqQvmGHDZWLdUv87P5mSpUg7HMgBbosGqDDYs+kfoAdUMZn6DPKXtjJK4i/Y1ejGWL",
	"o6nwaTqBdyKLe1NjX0yNjeA5gmfTkX7MgyTHNRwIf50b3ul2Bj/Dx9H9UJxQ2k1JIY6Gx1Cs/StBeyaN",
	"bE6/UvmdPPK+IbdavYJBo/s6OTDEATWumsiJxmODXKqllgZH8lA5PD6qrCGpX+7Ng2dnZ6faZZBb3GeU",
	"faF+fYzeiL73hfrtMSpTVJp1nz3KXD/bcqumukZuhSolW3bd5lTUPkSwdeM5ootwVLGitigJq1h+O1m+",
	"r/P9RUn6Wk1H89F0NdFy90neiPZhgTkMUxugw3jfzw4ZaIE2UujcyqV1qkGPrb6yzmT9yOiCjXZLR3Hq",
	"u8m6JsV5LvnXGFbn79/l5Ui+366ey97Uo0cmSEGGf+fJ8FoLTFUOTyhtk9Xl/k14r3ViJqcpH8Ll9ebl",
	"TcJq8tXoYS2YtXfBSrtLw2yxkonSN+M8d9lxKj9QZEvbJ6aiP0uKJTFU1l0HuKK4I3LgfHIB6hQiXBHU",
	"aEh2TWM3QhSeweYYtwAa3SDxNYu3eYLCD3ZO8zybfpzDKm+kLczkaiYRwaryO0h5X5HcSOQxgvFuFqFh",
	"v7WGumQcbHZJDSlPhi6thtaYqiglB7NObjaHjx4CIesyb8eJq6I327vT78dmfpLbJBoX3hmbozRFap29",
	"XmOCzCZJX/D0vtztFYcqmJ/azGUGFn/TmZOmjgP3aGODX6fN/Tua7jem/xo/9214im+EGfd/BQAA//8c",
	"3LvlRg4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

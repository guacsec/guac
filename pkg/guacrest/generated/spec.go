// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWX2/bNhD/KgdugLdBs4Nue/Fbk7ZrgXYN6gJ7aPtwIc8WG4lUjqQDtfB3H46yFNmR",
	"u3RAHvYmkXe8393v/n1V2teNd+RiUMuvqkHGmiJx/rvEjXUYrXerhrScGAqabSNHaqnelwTNIAPau7Xd",
	"JO7+1p4hlgQ3ibidf3QAv8DsEje0sl9oBqEhbdeWQhZyqb4iBr8GppCqGIApJnZk9ooXiYPnGdi7G7hq",
	"oWHaWp8CaKyqAOjM6OHbEqPgI4h+r/XRqUJZwZ5hqUI5rEktVXPoaqGCLqnGHBP2DXG0lGPSAZGv2Dai",
	"GSJbt1G7QvXOjS6ti7QhVrtd0R/5q8+ko9rJEVNovAvdy+do/sRIt9jKn/YukovyiU1TWZ3BLT4HifzX",
	"EbwfmdZqqX5Y3DG56G7D4jmz587UfeYC8ZYYyGmfXCQmA+iAREWodKSjdRuJnTBkMCJcob4mZ8TZczTv",
	"6CZRiI+P9hwNcGesgJB0CRhgzb4G67ZYWQOeobYhCN5RCu8K9Uo8c1itsrOdhUfH2xuFzirsBSVD9DVu",
	"6C+s6bX9zsjZSHX4N0gjA+ou5ZAZ2ymgT6GyIUrZNZ0iSDkEuLWxFNYtg6GGnCEXIadJDupl4uqR8Ceu",
	"vhN44irk+tq/ISYGng9r9w2FgBuaKN5cizfJMhm1/DAIfrpXtQcc3rfwrI/WhQRrqhEUqtf8NoQsVRw/",
	"OAlIYjbx3k463dqrpUtVVSjfkMPGqqX6bX42P1OFajCWGfUCHVZtsGHRs633/mwoOyEuZl5fGQm+SH+h",
	"Z2PZ4mB0fJhm+U5kcTRadsXUbAmeI3g23WSIedrk4If9VFjnruB0O4Nf4f3ofshgKO2mpBBHE2bI6P6V",
	"oD2TRjanX6n8rTzytiG3Wr2AQaP7OjlVxAE15jVyovFsIZdqYXtwJE+e/eMjtgdSPx0NjSdnZ6dqapBb",
	"HLedXaF+f4jeqMfvCvXHQ1Sm+m3WffIgc/0AzPWc6hq5lX4qbNl1m6mofYhg68ZzRBfhIGNFbVESVrH8",
	"cjJ9X+b7i5L0tZqO5oN72kTJHU8CI9r7LWc/cW2ADuOxnx0y0AJtpNC5lVPrVIEeWn1hncn6kdEFG+2W",
	"DuLUV5N1TYrznPIvMazO377JG5R8v149leWqR49MkIJsCJ0nw2stMFU5PKG0TVaX+1fhrdaJmZymfAiX",
	"15vnNwmryVejh7Vg1t4FK+UuBbPFSsZOX4zzXGWHVL6jyJa2j9yK/i4plsRQWXcd4IriLZED55MLUKcQ",
	"4YqgRkOykBq7kUbhGWyOcQug0Q0Sn7N4m8cs/GTnNM8D7Oc5rPLa2sJMrmYSEawqfwspLzXCjUQeIxjv",
	"ZhEa9ltrqCNjb7MjNaQ8GTpaDa0xVVFSDmad3GwO7z0EQtZlXqETV0VvtnenX6LN/GRvk2hceGdsjtJU",
	"U+vs9RoTzWyy6Que3pe75WOfBfNT67vMwOIblTlp6jBwDzY2+HXa3H9r0/1a9X/rz30Znuo30hl3/wQA",
	"AP//GVXeDWsOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.1-0.20240823215434-d232e9efa9f5 DO NOT EDIT.
package client

import (
	"encoding/json"
	"fmt"
)

// Defines values for AnalyzeDependenciesParamsSort.
const (
	Frequency AnalyzeDependenciesParamsSort = "frequency"
	Scorecard AnalyzeDependenciesParamsSort = "scorecard"
)

// Defines values for RetrieveDependenciesParamsLinkCondition.
const (
	Digest RetrieveDependenciesParamsLinkCondition = "digest"
	Name   RetrieveDependenciesParamsLinkCondition = "name"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"Message"`
}

// PackageInfo defines model for PackageInfo.
type PackageInfo struct {
	Name       *string            `json:"name,omitempty"`
	Namespace  *string            `json:"namespace,omitempty"`
	Purl       *string            `json:"purl,omitempty"`
	Qualifiers *map[string]string `json:"qualifiers,omitempty"`
	Subpath    *string            `json:"subpath,omitempty"`
	Type       *string            `json:"type,omitempty"`
	Version    *string            `json:"version,omitempty"`
}

// PackageName defines model for PackageName.
type PackageName struct {
	DependentCount int  `json:"DependentCount"`
	Name           Purl `json:"Name"`
}

// PaginationInfo Contains the cursor to retrieve more pages. If there are no more,  NextCursor will be nil.
type PaginationInfo struct {
	NextCursor *string `json:"NextCursor,omitempty"`
	TotalCount *int    `json:"TotalCount,omitempty"`
}

// Purl defines model for Purl.
type Purl = string

// Vulnerability defines model for Vulnerability.
type Vulnerability struct {
	Cvss        *float32  `json:"cvss,omitempty"`
	Description *string   `json:"description,omitempty"`
	FixedIn     *[]string `json:"fixedIn,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
}

// PaginationSpec defines model for PaginationSpec.
type PaginationSpec struct {
	Cursor   *string `json:"Cursor,omitempty"`
	PageSize *int    `json:"PageSize,omitempty"`
}

// BadGateway defines model for BadGateway.
type BadGateway = Error

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// PackageInfoResponse defines model for PackageInfoResponse.
type PackageInfoResponse struct {
	Packages             *[]PackageInfo         `json:"packages,omitempty"`
	Vulnerabilities      *[]Vulnerability       `json:"vulnerabilities,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PackageNameList defines model for PackageNameList.
type PackageNameList = []PackageName

// PurlList defines model for PurlList.
type PurlList struct {
	// PaginationInfo Contains the cursor to retrieve more pages. If there are no more,  NextCursor will be nil.
	PaginationInfo PaginationInfo `json:"PaginationInfo"`
	PurlList       []Purl         `json:"PurlList"`
}

// AnalyzeDependenciesParams defines parameters for AnalyzeDependencies.
type AnalyzeDependenciesParams struct {
	// PaginationSpec The pagination configuration for the query.
	//   * 'PageSize' specifies the number of results returned
	//   * 'Cursor' is returned by previous calls and specifies what page to return
	PaginationSpec *PaginationSpec `form:"paginationSpec,omitempty" json:"paginationSpec,omitempty"`

	// Sort The sort order of the packages
	//   * 'frequency' - The packages with the highest number of dependents
	//   * 'scorecard' - The packages with the lowest OpenSSF scorecard score
	Sort AnalyzeDependenciesParamsSort `form:"sort" json:"sort"`
}

// AnalyzeDependenciesParamsSort defines parameters for AnalyzeDependencies.
type AnalyzeDependenciesParamsSort string

// RetrieveDependenciesParams defines parameters for RetrieveDependencies.
type RetrieveDependenciesParams struct {
	// PaginationSpec The pagination configuration for the query.
	//   * 'PageSize' specifies the number of results returned
	//   * 'Cursor' is returned by previous calls and specifies what page to return
	PaginationSpec *PaginationSpec `form:"paginationSpec,omitempty" json:"paginationSpec,omitempty"`

	// LinkCondition Whether links between nouns must be made by digest or if they  can be made just by name (i.e. purl). Specify 'name' to allow using SBOMs that don't provide the digest of the subject. The default is  'digest'. To search by purl, 'name' must be specified.
	LinkCondition *RetrieveDependenciesParamsLinkCondition `form:"linkCondition,omitempty" json:"linkCondition,omitempty"`

	// Purl The purl of the dependent package.
	Purl *string `form:"purl,omitempty" json:"purl,omitempty"`

	// Digest The digest of the dependent package.
	Digest *string `form:"digest,omitempty" json:"digest,omitempty"`
}

// RetrieveDependenciesParamsLinkCondition defines parameters for RetrieveDependencies.
type RetrieveDependenciesParamsLinkCondition string

// GetPackageInfoParams defines parameters for GetPackageInfo.
type GetPackageInfoParams struct {
	Vulns *bool `form:"vulns,omitempty" json:"vulns,omitempty"`
}

// Getter for additional properties for PackageInfoResponse. Returns the specified
// element and whether it was found
func (a PackageInfoResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PackageInfoResponse
func (a *PackageInfoResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PackageInfoResponse to handle AdditionalProperties
func (a *PackageInfoResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["packages"]; found {
		err = json.Unmarshal(raw, &a.Packages)
		if err != nil {
			return fmt.Errorf("error reading 'packages': %w", err)
		}
		delete(object, "packages")
	}

	if raw, found := object["vulnerabilities"]; found {
		err = json.Unmarshal(raw, &a.Vulnerabilities)
		if err != nil {
			return fmt.Errorf("error reading 'vulnerabilities': %w", err)
		}
		delete(object, "vulnerabilities")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PackageInfoResponse to handle AdditionalProperties
func (a PackageInfoResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Packages != nil {
		object["packages"], err = json.Marshal(a.Packages)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packages': %w", err)
		}
	}

	if a.Vulnerabilities != nil {
		object["vulnerabilities"], err = json.Marshal(a.Vulnerabilities)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vulnerabilities': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

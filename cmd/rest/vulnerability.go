//
// Copyright 2023 The GUAC Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/guacsec/guac/pkg/assembler/helpers"

	"github.com/Khan/genqlient/graphql"
	"github.com/gin-gonic/gin"
	model "github.com/guacsec/guac/pkg/assembler/clients/generated"
	"github.com/guacsec/guac/pkg/misc/depversion"
)

func vulnerabilityHandler(ctx context.Context) func(c *gin.Context) {
	return func(c *gin.Context) {
		vulnID, searchDepth, pathsToReturn, err := parseQueryParameters(c)
		if err != nil {
			c.String(400, err.Error())
			return
		}

		gqlclient := createGraphQLClient()

		purl := strings.TrimLeft(c.Param("purl"), "/") // Retrieve and trim the purl from the URL parameter

		// Convert package URL to package input
		pkgInput, err := helpers.PurlToPkg(purl)
		if err != nil {
			c.String(400, "invalid purl")
			return
		}

		pkgFilter := createPackageFilter(pkgInput)

		// Query for the package
		pkgResponse, err := model.Packages(ctx, gqlclient, *pkgFilter)
		if err != nil {
			c.String(500, "error querying package: %v", err)
			return
		}

		if len(pkgResponse.Packages) != 1 {
			c.String(404, "no package found for the given hash")
			return
		}

		if vulnID != "" {
			handleVulnerabilityIDQuery(ctx, c, gqlclient, vulnID, pkgResponse, searchDepth, pathsToReturn)
		} else {
			handleNoVulnerabilityIDQuery(ctx, c, gqlclient, pkgResponse, searchDepth)
		}
	}
}

func parseQueryParameters(c *gin.Context) (string, int, int, error) {
	vulnID := c.Query("vuln_id")

	searchDepthString := c.Query("search_depth")
	if searchDepthString == "" {
		return "", 0, 0, errors.New("empty search depth")
	}
	searchDepth, err := strconv.Atoi(searchDepthString)
	if err != nil && searchDepthString != "" {
		return "", 0, 0, errors.New("invalid search depth")
	}

	pathsToReturnString := c.Query("num_path")
	if vulnID != "" && pathsToReturnString == "" {
		return "", 0, 0, errors.New("empty number of paths even though vuln_id is given")
	}
	pathsToReturn, err := strconv.Atoi(pathsToReturnString)
	if err != nil && pathsToReturnString != "" {
		return "", 0, 0, errors.New("invalid number of paths")
	}

	return vulnID, searchDepth, pathsToReturn, nil
}

func createGraphQLClient() graphql.Client {
	httpClient := &http.Client{Timeout: httpTimeout}
	return graphql.NewClient(gqlServerURL, httpClient)
}

func handleVulnerabilityIDQuery(ctx context.Context, c *gin.Context, gqlclient graphql.Client, vulnID string, pkgResponse *model.PackagesResponse, searchDepth, pathsToReturn int) {
	vulnResponse, err := model.Vulnerabilities(ctx, gqlclient, model.VulnerabilitySpec{VulnerabilityID: &vulnID})
	if err != nil {
		c.String(500, "error querying for vulnerabilities: %v", err)
		return
	}

	var path []string

	if len(vulnResponse.Vulnerabilities) > 0 {
		path, err = QueryVulnsViaVulnNodeNeighbors(ctx, gqlclient, pkgResponse, vulnResponse.Vulnerabilities, model.EdgeVulnerabilityCertifyVuln, searchDepth, pathsToReturn)

		if err != nil {
			c.String(500, "error querying vulnerabilities via node neighbors: %v", err)
			return
		}
	}

	if len(path) > 0 {
		c.IndentedJSON(200, vulnResponse.Vulnerabilities)
	} else {
		c.String(404, "no path to vulnerability ID found")
		return
	}
}

func handleNoVulnerabilityIDQuery(ctx context.Context, c *gin.Context, gqlclient graphql.Client, pkgResponse *model.PackagesResponse, searchDepth int) {
	path, res := []string{}, []*Neighbors{}

	if pkgResponse.Packages[0].Type != guacType {
		vulnPath, neighbors, err := queryVulnsViaPackageNeighbors(ctx, gqlclient, pkgResponse.Packages[0].Namespaces[0].Names[0].Versions[0].Id, []model.Edge{model.EdgePackageCertifyVuln, model.EdgePackageCertifyVexStatement})
		if err != nil {
			c.String(500, "error querying package neighbors: %v", err)
			return
		}

		path = append(path, vulnPath...)
		res = append(res, neighbors...)
	}

	depVulnPath, depVulnNeighbors, err := searchDependencyPackages(ctx, gqlclient, pkgResponse.Packages[0].Namespaces[0].Names[0].Versions[0].Id, searchDepth)
	if err != nil {
		c.String(500, "error searching dependency packages: %v", err)
	}
	path = append(path, depVulnPath...)
	res = append(res, depVulnNeighbors...)

	if len(path) > 0 {
		c.IndentedJSON(200, res)
	} else {
		c.String(404, "no path to vulnerabilities found")
	}
}

func QueryVulnsViaVulnNodeNeighbors(ctx context.Context, gqlclient graphql.Client, topPkgResponse *model.PackagesResponse, vulnerabilitiesResponses []model.VulnerabilitiesVulnerabilitiesVulnerability, edgeType model.Edge, depth, pathsToReturn int) ([]string, error) {
	type vulnNeighbor struct {
		node model.NeighborsNeighborsNode
		id   string
	}

	var path []string
	vulnNodeNeighborResponses := []vulnNeighbor{}

	for _, vulnerabilitiesResponse := range vulnerabilitiesResponses {
		for _, vulnerabilityNodeID := range vulnerabilitiesResponse.VulnerabilityIDs {
			vulnNodeNeighborResponse, err := model.Neighbors(ctx, gqlclient, vulnerabilityNodeID.Id, []model.Edge{edgeType})

			if err != nil {
				return nil, fmt.Errorf("error querying neighbor for vulnerability: %w", err)
			}

			for _, neighbor := range vulnNodeNeighborResponse.Neighbors {
				vulnNodeNeighborResponses = append(vulnNodeNeighborResponses, vulnNeighbor{neighbor, vulnerabilityNodeID.Id})
			}
		}
	}

	certifyVulnFound := false
	numberOfPaths := 0
	for _, neighbor := range vulnNodeNeighborResponses {
		n := neighbor.node
		if certifyVuln, ok := n.(*model.NeighborsNeighborsCertifyVuln); ok {
			certifyVulnFound = true
			pkgPath, err := searchDependencyPackagesReverse(ctx, gqlclient, topPkgResponse.Packages[0].Namespaces[0].Names[0].Versions[0].Id, certifyVuln.Package.Namespaces[0].Names[0].Versions[0].Id, depth)
			if err != nil {
				return nil, fmt.Errorf("error searching dependency packages match: %w", err)
			}
			if len(pkgPath) > 0 {
				fullVulnPath := append([]string{neighbor.id, certifyVuln.Id,
					certifyVuln.Package.Namespaces[0].Names[0].Versions[0].Id,
					certifyVuln.Package.Namespaces[0].Names[0].Id, certifyVuln.Package.Namespaces[0].Id,
					certifyVuln.Package.Id}, pkgPath...)
				path = append(path, fullVulnPath...)
				numberOfPaths += 1
			}
			if pathsToReturn != 0 && numberOfPaths == pathsToReturn {
				return path, nil
			}
		}
	}
	if !certifyVulnFound {
		return nil, fmt.Errorf("error certify vulnerability node not found, incomplete data. Please ensure certifier has run")
	}
	return path, nil
}

func queryVulnsViaPackageNeighbors(ctx context.Context, gqlclient graphql.Client, pkgVersionID string, edgeTypes []model.Edge) ([]string, []*Neighbors, error) {
	var path []string
	var res []*Neighbors
	pkgVersionNeighborResponse, err := model.Neighbors(ctx, gqlclient, pkgVersionID, edgeTypes)
	if err != nil {
		return nil, nil, fmt.Errorf("error querying neighbor for vulnerability: %w", err)
	}
	certifyVulnFound := false
	for _, neighbor := range pkgVersionNeighborResponse.Neighbors {
		if certifyVuln, ok := neighbor.(*model.NeighborsNeighborsCertifyVuln); ok {
			certifyVulnFound = true
			if certifyVuln.Vulnerability.Type != noVulnType {
				res = append(res, &Neighbors{CertifyVulns: []*model.NeighborsNeighborsCertifyVuln{certifyVuln}})
				for _, vuln := range certifyVuln.Vulnerability.VulnerabilityIDs {
					path = append(path, []string{vuln.Id, certifyVuln.Id,
						certifyVuln.Package.Namespaces[0].Names[0].Versions[0].Id,
						certifyVuln.Package.Namespaces[0].Names[0].Id, certifyVuln.Package.Namespaces[0].Id,
						certifyVuln.Package.Id}...)
				}
			}
		}

		if certifyVex, ok := neighbor.(*model.NeighborsNeighborsCertifyVEXStatement); ok {
			res = append(res, &Neighbors{VexLinks: []*model.NeighborsNeighborsCertifyVEXStatement{certifyVex}})
			for _, vuln := range certifyVex.Vulnerability.VulnerabilityIDs {
				path = append(path, certifyVex.Id, vuln.Id)
			}
			path = append(path, vexSubjectIds(certifyVex.Subject)...)
		}

	}
	if !certifyVulnFound {
		return nil, nil, fmt.Errorf("error certify vulnerability node not found, incomplete data. Please ensure certifier has run")
	}
	return path, res, nil
}

func vexSubjectIds(s model.AllCertifyVEXStatementSubjectPackageOrArtifact) []string {
	switch v := s.(type) {
	case *model.AllCertifyVEXStatementSubjectArtifact:
		return []string{v.Id}
	case *model.AllCertifyVEXStatementSubjectPackage:
		return []string{
			v.Id,
			v.Namespaces[0].Id,
			v.Namespaces[0].Names[0].Id,
			v.Namespaces[0].Names[0].Versions[0].Id}
	default:
		return []string{}
	}
}

func searchDependencyPackages(ctx context.Context, gqlclient graphql.Client, topPkgID string, maxLength int) ([]string, []*Neighbors, error) {
	var path []string
	var res []*Neighbors
	queue := make([]string, 0) // the queue of nodes in bfs
	type dfsNode struct {
		expanded bool // true once all node neighbors are added to queue
		parent   string
		depth    int
	}
	nodeMap := map[string]dfsNode{}

	nodeMap[topPkgID] = dfsNode{}
	queue = append(queue, topPkgID)

	for len(queue) > 0 {
		now := queue[0]
		queue = queue[1:]
		nowNode := nodeMap[now]

		if maxLength != 0 && nowNode.depth >= maxLength {
			break
		}

		isDependencyNeighborResponses, err := model.Neighbors(ctx, gqlclient, now, []model.Edge{model.EdgePackageIsDependency})
		if err != nil {
			return nil, nil, fmt.Errorf("failed getting package parent:%w", err)
		}
		for _, neighbor := range isDependencyNeighborResponses.Neighbors {
			if isDependency, ok := neighbor.(*model.NeighborsNeighborsIsDependency); ok {
				if isDependency.DependencyPackage.Type == guacType {
					continue
				}

				depPkgFilter := &model.PkgSpec{
					Type:      &isDependency.DependencyPackage.Type,
					Namespace: &isDependency.DependencyPackage.Namespaces[0].Namespace,
					Name:      &isDependency.DependencyPackage.Namespaces[0].Names[0].Name,
				}

				depPkgResponse, err := model.Packages(ctx, gqlclient, *depPkgFilter)
				if err != nil {
					return nil, nil, fmt.Errorf("error querying for dependent package: %w", err)
				}

				depPkgVersionsMap := map[string]string{}
				depPkgVersions := []string{}
				for _, depPkgVersion := range depPkgResponse.Packages[0].Namespaces[0].Names[0].Versions {
					depPkgVersions = append(depPkgVersions, depPkgVersion.Version)
					depPkgVersionsMap[depPkgVersion.Version] = depPkgVersion.Id
				}

				matchingDepPkgVersions, err := depversion.WhichVersionMatches(depPkgVersions, isDependency.VersionRange)
				if err != nil {
					// TODO(jeffmendoza): depversion is not handling all/new possible
					// version ranges from deps.dev. Continue here to report possible
					// vulns even if some paths cannot be followed.
					matchingDepPkgVersions = nil
					//return nil, nil, fmt.Errorf("error determining dependent version matches: %w", err)
				}

				for matchingDepPkgVersion := range matchingDepPkgVersions {
					matchingDepPkgVersionID := depPkgVersionsMap[matchingDepPkgVersion]
					vulnPath, foundVulnTableRow, err := queryVulnsViaPackageNeighbors(ctx, gqlclient, matchingDepPkgVersionID, []model.Edge{model.EdgePackageCertifyVuln, model.EdgePackageCertifyVexStatement})
					if err != nil {
						return nil, nil, fmt.Errorf("error querying neighbor: %w", err)
					}
					if len(vulnPath) > 0 {
						path = append(path, isDependency.Id, matchingDepPkgVersionID,
							depPkgResponse.Packages[0].Namespaces[0].Names[0].Id, depPkgResponse.Packages[0].Namespaces[0].Id,
							depPkgResponse.Packages[0].Id)
						path = append(path, vulnPath...)
						res = append(res, foundVulnTableRow...)
					}

					dfsN, seen := nodeMap[matchingDepPkgVersionID]
					if !seen {
						dfsN = dfsNode{
							parent: now,
							depth:  nowNode.depth + 1,
						}
						nodeMap[matchingDepPkgVersionID] = dfsN
					}
					if !dfsN.expanded {
						queue = append(queue, matchingDepPkgVersionID)
					}
				}
			}
		}

		nowNode.expanded = true
		nodeMap[now] = nowNode
	}

	return path, res, nil
}

func searchDependencyPackagesReverse(ctx context.Context, gqlclient graphql.Client, topPkgID string, searchPkgID string, maxLength int) ([]string, error) {
	var path []string
	var collectedIDs []string
	queue := make([]string, 0) // the queue of nodes in bfs
	type dfsNode struct {
		expanded     bool // true once all node neighbors are added to queue
		parent       string
		isDependency *model.NeighborsNeighborsIsDependency
		depth        int
	}
	nodeMap := map[string]dfsNode{}

	nodeMap[searchPkgID] = dfsNode{}
	queue = append(queue, searchPkgID)
	collectedIDs = append(collectedIDs, searchPkgID)

	found := false
	for len(queue) > 0 {
		now := queue[0]
		queue = queue[1:]
		nowNode := nodeMap[now]

		if topPkgID != "" {
			if now == topPkgID {
				found = true
				break
			}
		}

		if maxLength != 0 && nowNode.depth >= maxLength {
			break
		}

		pkgNameNeighborResponses, err := model.Neighbors(ctx, gqlclient, now, []model.Edge{})
		if err != nil {
			return nil, fmt.Errorf("failed getting package parent:%v", err)
		}

		for _, neighbor := range pkgNameNeighborResponses.Neighbors {
			if pkgName, ok := neighbor.(*model.NeighborsNeighborsPackage); ok {
				if len(pkgName.Namespaces) == 0 {
					continue
				}
				isDependencyNeighborResponses, err := model.Neighbors(ctx, gqlclient, pkgName.Namespaces[0].Names[0].Id, []model.Edge{model.EdgePackageIsDependency})
				if err != nil {
					return nil, fmt.Errorf("failed getting package parent:%v", err)
				}
				for _, neighbor := range isDependencyNeighborResponses.Neighbors {
					if isDependency, ok := neighbor.(*model.NeighborsNeighborsIsDependency); ok && now != isDependency.Package.Namespaces[0].Names[0].Versions[0].Id {
						dfsN, seen := nodeMap[isDependency.Package.Namespaces[0].Names[0].Versions[0].Id]
						if !seen {
							dfsN = dfsNode{
								parent:       now,
								isDependency: isDependency,
								depth:        nowNode.depth + 1,
							}
							nodeMap[isDependency.Package.Namespaces[0].Names[0].Versions[0].Id] = dfsN
						}
						if !dfsN.expanded {
							queue = append(queue, isDependency.Package.Namespaces[0].Names[0].Versions[0].Id)
							collectedIDs = append(collectedIDs, isDependency.Package.Namespaces[0].Names[0].Versions[0].Id)
						}
					}
				}
			}
			if isDependency, ok := neighbor.(*model.NeighborsNeighborsIsDependency); ok && now != isDependency.Package.Namespaces[0].Names[0].Versions[0].Id {
				dfsN, seen := nodeMap[isDependency.Package.Namespaces[0].Names[0].Versions[0].Id]
				if !seen {
					dfsN = dfsNode{
						parent:       now,
						isDependency: isDependency,
						depth:        nowNode.depth + 1,
					}
					nodeMap[isDependency.Package.Namespaces[0].Names[0].Versions[0].Id] = dfsN
				}
				if !dfsN.expanded {
					queue = append(queue, isDependency.Package.Namespaces[0].Names[0].Versions[0].Id)
					collectedIDs = append(collectedIDs, isDependency.Package.Namespaces[0].Names[0].Versions[0].Id)
				}
			}

		}

		nowNode.expanded = true
		nodeMap[now] = nowNode
	}

	if topPkgID != "" && !found {
		return nil, fmt.Errorf("no path found up to specified length")
	}

	var now string
	if topPkgID != "" {
		now = topPkgID
		for now != searchPkgID {
			path = append(path, nodeMap[now].isDependency.Id, nodeMap[now].isDependency.DependencyPackage.Namespaces[0].Names[0].Id,
				nodeMap[now].isDependency.DependencyPackage.Namespaces[0].Id, nodeMap[now].isDependency.DependencyPackage.Id,
				nodeMap[now].isDependency.Package.Namespaces[0].Names[0].Versions[0].Id,
				nodeMap[now].isDependency.Package.Namespaces[0].Names[0].Id, nodeMap[now].isDependency.Package.Namespaces[0].Id,
				nodeMap[now].isDependency.Package.Id)
			now = nodeMap[now].parent
		}
		return path, nil
	} else {
		for i := len(collectedIDs) - 1; i >= 0; i-- {
			if nodeMap[collectedIDs[i]].isDependency != nil {
				path = append(path, nodeMap[collectedIDs[i]].isDependency.Id, nodeMap[collectedIDs[i]].isDependency.DependencyPackage.Namespaces[0].Names[0].Id,
					nodeMap[collectedIDs[i]].isDependency.DependencyPackage.Namespaces[0].Id, nodeMap[collectedIDs[i]].isDependency.DependencyPackage.Id,
					nodeMap[collectedIDs[i]].isDependency.Package.Namespaces[0].Names[0].Versions[0].Id,
					nodeMap[collectedIDs[i]].isDependency.Package.Namespaces[0].Names[0].Id, nodeMap[collectedIDs[i]].isDependency.Package.Namespaces[0].Id,
					nodeMap[collectedIDs[i]].isDependency.Package.Id)
			}
		}
		return path, nil
	}
}

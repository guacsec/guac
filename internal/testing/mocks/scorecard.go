// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../pkg/certifier/scorecard/types.go
//
// Generated by this command:
//
//	mockgen -source=../../../pkg/certifier/scorecard/types.go -destination=../../../internal/testing/mocks/scorecard.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockScorecard is a mock of Scorecard interface.
type MockScorecard struct {
	ctrl     *gomock.Controller
	recorder *MockScorecardMockRecorder
}

// MockScorecardMockRecorder is the mock recorder for MockScorecard.
type MockScorecardMockRecorder struct {
	mock *MockScorecard
}

// NewMockScorecard creates a new mock instance.
func NewMockScorecard(ctrl *gomock.Controller) *MockScorecard {
	mock := &MockScorecard{ctrl: ctrl}
	mock.recorder = &MockScorecardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScorecard) EXPECT() *MockScorecardMockRecorder {
	return m.recorder
}

// GetScore mocks base method.
func (m *MockScorecard) GetScore(repoName, commitSHA, tag string, useScorecardAPI bool) (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScore", repoName, commitSHA, tag, useScorecardAPI)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScore indicates an expected call of GetScore.
func (mr *MockScorecardMockRecorder) GetScore(repoName, commitSHA, tag, useScorecardAPI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScore", reflect.TypeOf((*MockScorecard)(nil).GetScore), repoName, commitSHA, tag, useScorecardAPI)
}

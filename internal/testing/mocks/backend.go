// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../pkg/assembler/backends/backends.go
//
// Generated by this command:
//
//	mockgen -source=../../../pkg/assembler/backends/backends.go -destination=../../../internal/testing/mocks/backend.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/guacsec/guac/pkg/assembler/graphql/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Artifacts mocks base method.
func (m *MockBackend) Artifacts(ctx context.Context, artifactSpec *model.ArtifactSpec) ([]*model.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Artifacts", ctx, artifactSpec)
	ret0, _ := ret[0].([]*model.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Artifacts indicates an expected call of Artifacts.
func (mr *MockBackendMockRecorder) Artifacts(ctx, artifactSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Artifacts", reflect.TypeOf((*MockBackend)(nil).Artifacts), ctx, artifactSpec)
}

// ArtifactsList mocks base method.
func (m *MockBackend) ArtifactsList(ctx context.Context, artifactSpec model.ArtifactSpec, after *string, first *int) (*model.ArtifactConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArtifactsList", ctx, artifactSpec, after, first)
	ret0, _ := ret[0].(*model.ArtifactConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArtifactsList indicates an expected call of ArtifactsList.
func (mr *MockBackendMockRecorder) ArtifactsList(ctx, artifactSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArtifactsList", reflect.TypeOf((*MockBackend)(nil).ArtifactsList), ctx, artifactSpec, after, first)
}

// Builders mocks base method.
func (m *MockBackend) Builders(ctx context.Context, builderSpec *model.BuilderSpec) ([]*model.Builder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Builders", ctx, builderSpec)
	ret0, _ := ret[0].([]*model.Builder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Builders indicates an expected call of Builders.
func (mr *MockBackendMockRecorder) Builders(ctx, builderSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Builders", reflect.TypeOf((*MockBackend)(nil).Builders), ctx, builderSpec)
}

// BuildersList mocks base method.
func (m *MockBackend) BuildersList(ctx context.Context, builderSpec model.BuilderSpec, after *string, first *int) (*model.BuilderConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildersList", ctx, builderSpec, after, first)
	ret0, _ := ret[0].(*model.BuilderConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildersList indicates an expected call of BuildersList.
func (mr *MockBackendMockRecorder) BuildersList(ctx, builderSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildersList", reflect.TypeOf((*MockBackend)(nil).BuildersList), ctx, builderSpec, after, first)
}

// CertifyBad mocks base method.
func (m *MockBackend) CertifyBad(ctx context.Context, certifyBadSpec *model.CertifyBadSpec) ([]*model.CertifyBad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyBad", ctx, certifyBadSpec)
	ret0, _ := ret[0].([]*model.CertifyBad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyBad indicates an expected call of CertifyBad.
func (mr *MockBackendMockRecorder) CertifyBad(ctx, certifyBadSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyBad", reflect.TypeOf((*MockBackend)(nil).CertifyBad), ctx, certifyBadSpec)
}

// CertifyBadList mocks base method.
func (m *MockBackend) CertifyBadList(ctx context.Context, certifyBadSpec model.CertifyBadSpec, after *string, first *int) (*model.CertifyBadConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyBadList", ctx, certifyBadSpec, after, first)
	ret0, _ := ret[0].(*model.CertifyBadConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyBadList indicates an expected call of CertifyBadList.
func (mr *MockBackendMockRecorder) CertifyBadList(ctx, certifyBadSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyBadList", reflect.TypeOf((*MockBackend)(nil).CertifyBadList), ctx, certifyBadSpec, after, first)
}

// CertifyGood mocks base method.
func (m *MockBackend) CertifyGood(ctx context.Context, certifyGoodSpec *model.CertifyGoodSpec) ([]*model.CertifyGood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyGood", ctx, certifyGoodSpec)
	ret0, _ := ret[0].([]*model.CertifyGood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyGood indicates an expected call of CertifyGood.
func (mr *MockBackendMockRecorder) CertifyGood(ctx, certifyGoodSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyGood", reflect.TypeOf((*MockBackend)(nil).CertifyGood), ctx, certifyGoodSpec)
}

// CertifyGoodList mocks base method.
func (m *MockBackend) CertifyGoodList(ctx context.Context, certifyGoodSpec model.CertifyGoodSpec, after *string, first *int) (*model.CertifyGoodConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyGoodList", ctx, certifyGoodSpec, after, first)
	ret0, _ := ret[0].(*model.CertifyGoodConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyGoodList indicates an expected call of CertifyGoodList.
func (mr *MockBackendMockRecorder) CertifyGoodList(ctx, certifyGoodSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyGoodList", reflect.TypeOf((*MockBackend)(nil).CertifyGoodList), ctx, certifyGoodSpec, after, first)
}

// CertifyLegal mocks base method.
func (m *MockBackend) CertifyLegal(ctx context.Context, certifyLegalSpec *model.CertifyLegalSpec) ([]*model.CertifyLegal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyLegal", ctx, certifyLegalSpec)
	ret0, _ := ret[0].([]*model.CertifyLegal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyLegal indicates an expected call of CertifyLegal.
func (mr *MockBackendMockRecorder) CertifyLegal(ctx, certifyLegalSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyLegal", reflect.TypeOf((*MockBackend)(nil).CertifyLegal), ctx, certifyLegalSpec)
}

// CertifyLegalList mocks base method.
func (m *MockBackend) CertifyLegalList(ctx context.Context, certifyLegalSpec model.CertifyLegalSpec, after *string, first *int) (*model.CertifyLegalConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyLegalList", ctx, certifyLegalSpec, after, first)
	ret0, _ := ret[0].(*model.CertifyLegalConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyLegalList indicates an expected call of CertifyLegalList.
func (mr *MockBackendMockRecorder) CertifyLegalList(ctx, certifyLegalSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyLegalList", reflect.TypeOf((*MockBackend)(nil).CertifyLegalList), ctx, certifyLegalSpec, after, first)
}

// CertifyVEXStatement mocks base method.
func (m *MockBackend) CertifyVEXStatement(ctx context.Context, certifyVEXStatementSpec *model.CertifyVEXStatementSpec) ([]*model.CertifyVEXStatement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyVEXStatement", ctx, certifyVEXStatementSpec)
	ret0, _ := ret[0].([]*model.CertifyVEXStatement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyVEXStatement indicates an expected call of CertifyVEXStatement.
func (mr *MockBackendMockRecorder) CertifyVEXStatement(ctx, certifyVEXStatementSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyVEXStatement", reflect.TypeOf((*MockBackend)(nil).CertifyVEXStatement), ctx, certifyVEXStatementSpec)
}

// CertifyVEXStatementList mocks base method.
func (m *MockBackend) CertifyVEXStatementList(ctx context.Context, certifyVEXStatementSpec model.CertifyVEXStatementSpec, after *string, first *int) (*model.VEXConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyVEXStatementList", ctx, certifyVEXStatementSpec, after, first)
	ret0, _ := ret[0].(*model.VEXConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyVEXStatementList indicates an expected call of CertifyVEXStatementList.
func (mr *MockBackendMockRecorder) CertifyVEXStatementList(ctx, certifyVEXStatementSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyVEXStatementList", reflect.TypeOf((*MockBackend)(nil).CertifyVEXStatementList), ctx, certifyVEXStatementSpec, after, first)
}

// CertifyVuln mocks base method.
func (m *MockBackend) CertifyVuln(ctx context.Context, certifyVulnSpec *model.CertifyVulnSpec) ([]*model.CertifyVuln, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyVuln", ctx, certifyVulnSpec)
	ret0, _ := ret[0].([]*model.CertifyVuln)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyVuln indicates an expected call of CertifyVuln.
func (mr *MockBackendMockRecorder) CertifyVuln(ctx, certifyVulnSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyVuln", reflect.TypeOf((*MockBackend)(nil).CertifyVuln), ctx, certifyVulnSpec)
}

// CertifyVulnList mocks base method.
func (m *MockBackend) CertifyVulnList(ctx context.Context, certifyVulnSpec model.CertifyVulnSpec, after *string, first *int) (*model.CertifyVulnConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyVulnList", ctx, certifyVulnSpec, after, first)
	ret0, _ := ret[0].(*model.CertifyVulnConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifyVulnList indicates an expected call of CertifyVulnList.
func (mr *MockBackendMockRecorder) CertifyVulnList(ctx, certifyVulnSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyVulnList", reflect.TypeOf((*MockBackend)(nil).CertifyVulnList), ctx, certifyVulnSpec, after, first)
}

// Delete mocks base method.
func (m *MockBackend) Delete(ctx context.Context, node string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, node)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBackendMockRecorder) Delete(ctx, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBackend)(nil).Delete), ctx, node)
}

// FindPackagesThatNeedScanning mocks base method.
func (m *MockBackend) FindPackagesThatNeedScanning(ctx context.Context, queryType model.QueryType, lastScan *int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPackagesThatNeedScanning", ctx, queryType, lastScan)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPackagesThatNeedScanning indicates an expected call of FindPackagesThatNeedScanning.
func (mr *MockBackendMockRecorder) FindPackagesThatNeedScanning(ctx, queryType, lastScan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPackagesThatNeedScanning", reflect.TypeOf((*MockBackend)(nil).FindPackagesThatNeedScanning), ctx, queryType, lastScan)
}

// FindSoftware mocks base method.
func (m *MockBackend) FindSoftware(ctx context.Context, searchText string) ([]model.PackageSourceOrArtifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSoftware", ctx, searchText)
	ret0, _ := ret[0].([]model.PackageSourceOrArtifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSoftware indicates an expected call of FindSoftware.
func (mr *MockBackendMockRecorder) FindSoftware(ctx, searchText any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSoftware", reflect.TypeOf((*MockBackend)(nil).FindSoftware), ctx, searchText)
}

// FindSoftwareList mocks base method.
func (m *MockBackend) FindSoftwareList(ctx context.Context, searchText string, after *string, first *int) (*model.FindSoftwareConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSoftwareList", ctx, searchText, after, first)
	ret0, _ := ret[0].(*model.FindSoftwareConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSoftwareList indicates an expected call of FindSoftwareList.
func (mr *MockBackendMockRecorder) FindSoftwareList(ctx, searchText, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSoftwareList", reflect.TypeOf((*MockBackend)(nil).FindSoftwareList), ctx, searchText, after, first)
}

// HasMetadata mocks base method.
func (m *MockBackend) HasMetadata(ctx context.Context, hasMetadataSpec *model.HasMetadataSpec) ([]*model.HasMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMetadata", ctx, hasMetadataSpec)
	ret0, _ := ret[0].([]*model.HasMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMetadata indicates an expected call of HasMetadata.
func (mr *MockBackendMockRecorder) HasMetadata(ctx, hasMetadataSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMetadata", reflect.TypeOf((*MockBackend)(nil).HasMetadata), ctx, hasMetadataSpec)
}

// HasMetadataList mocks base method.
func (m *MockBackend) HasMetadataList(ctx context.Context, hasMetadataSpec model.HasMetadataSpec, after *string, first *int) (*model.HasMetadataConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMetadataList", ctx, hasMetadataSpec, after, first)
	ret0, _ := ret[0].(*model.HasMetadataConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMetadataList indicates an expected call of HasMetadataList.
func (mr *MockBackendMockRecorder) HasMetadataList(ctx, hasMetadataSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMetadataList", reflect.TypeOf((*MockBackend)(nil).HasMetadataList), ctx, hasMetadataSpec, after, first)
}

// HasSBOM mocks base method.
func (m *MockBackend) HasSBOM(ctx context.Context, hasSBOMSpec *model.HasSBOMSpec) ([]*model.HasSbom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSBOM", ctx, hasSBOMSpec)
	ret0, _ := ret[0].([]*model.HasSbom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSBOM indicates an expected call of HasSBOM.
func (mr *MockBackendMockRecorder) HasSBOM(ctx, hasSBOMSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSBOM", reflect.TypeOf((*MockBackend)(nil).HasSBOM), ctx, hasSBOMSpec)
}

// HasSBOMList mocks base method.
func (m *MockBackend) HasSBOMList(ctx context.Context, hasSBOMSpec model.HasSBOMSpec, after *string, first *int) (*model.HasSBOMConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSBOMList", ctx, hasSBOMSpec, after, first)
	ret0, _ := ret[0].(*model.HasSBOMConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSBOMList indicates an expected call of HasSBOMList.
func (mr *MockBackendMockRecorder) HasSBOMList(ctx, hasSBOMSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSBOMList", reflect.TypeOf((*MockBackend)(nil).HasSBOMList), ctx, hasSBOMSpec, after, first)
}

// HasSLSAList mocks base method.
func (m *MockBackend) HasSLSAList(ctx context.Context, hasSLSASpec model.HasSLSASpec, after *string, first *int) (*model.HasSLSAConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSLSAList", ctx, hasSLSASpec, after, first)
	ret0, _ := ret[0].(*model.HasSLSAConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSLSAList indicates an expected call of HasSLSAList.
func (mr *MockBackendMockRecorder) HasSLSAList(ctx, hasSLSASpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSLSAList", reflect.TypeOf((*MockBackend)(nil).HasSLSAList), ctx, hasSLSASpec, after, first)
}

// HasSlsa mocks base method.
func (m *MockBackend) HasSlsa(ctx context.Context, hasSLSASpec *model.HasSLSASpec) ([]*model.HasSlsa, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSlsa", ctx, hasSLSASpec)
	ret0, _ := ret[0].([]*model.HasSlsa)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSlsa indicates an expected call of HasSlsa.
func (mr *MockBackendMockRecorder) HasSlsa(ctx, hasSLSASpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSlsa", reflect.TypeOf((*MockBackend)(nil).HasSlsa), ctx, hasSLSASpec)
}

// HasSourceAt mocks base method.
func (m *MockBackend) HasSourceAt(ctx context.Context, hasSourceAtSpec *model.HasSourceAtSpec) ([]*model.HasSourceAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSourceAt", ctx, hasSourceAtSpec)
	ret0, _ := ret[0].([]*model.HasSourceAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSourceAt indicates an expected call of HasSourceAt.
func (mr *MockBackendMockRecorder) HasSourceAt(ctx, hasSourceAtSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSourceAt", reflect.TypeOf((*MockBackend)(nil).HasSourceAt), ctx, hasSourceAtSpec)
}

// HasSourceAtList mocks base method.
func (m *MockBackend) HasSourceAtList(ctx context.Context, hasSourceAtSpec model.HasSourceAtSpec, after *string, first *int) (*model.HasSourceAtConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSourceAtList", ctx, hasSourceAtSpec, after, first)
	ret0, _ := ret[0].(*model.HasSourceAtConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSourceAtList indicates an expected call of HasSourceAtList.
func (mr *MockBackendMockRecorder) HasSourceAtList(ctx, hasSourceAtSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSourceAtList", reflect.TypeOf((*MockBackend)(nil).HasSourceAtList), ctx, hasSourceAtSpec, after, first)
}

// HashEqual mocks base method.
func (m *MockBackend) HashEqual(ctx context.Context, hashEqualSpec *model.HashEqualSpec) ([]*model.HashEqual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashEqual", ctx, hashEqualSpec)
	ret0, _ := ret[0].([]*model.HashEqual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashEqual indicates an expected call of HashEqual.
func (mr *MockBackendMockRecorder) HashEqual(ctx, hashEqualSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashEqual", reflect.TypeOf((*MockBackend)(nil).HashEqual), ctx, hashEqualSpec)
}

// HashEqualList mocks base method.
func (m *MockBackend) HashEqualList(ctx context.Context, hashEqualSpec model.HashEqualSpec, after *string, first *int) (*model.HashEqualConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashEqualList", ctx, hashEqualSpec, after, first)
	ret0, _ := ret[0].(*model.HashEqualConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashEqualList indicates an expected call of HashEqualList.
func (mr *MockBackendMockRecorder) HashEqualList(ctx, hashEqualSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashEqualList", reflect.TypeOf((*MockBackend)(nil).HashEqualList), ctx, hashEqualSpec, after, first)
}

// IngestArtifact mocks base method.
func (m *MockBackend) IngestArtifact(ctx context.Context, artifact *model.IDorArtifactInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestArtifact", ctx, artifact)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestArtifact indicates an expected call of IngestArtifact.
func (mr *MockBackendMockRecorder) IngestArtifact(ctx, artifact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestArtifact", reflect.TypeOf((*MockBackend)(nil).IngestArtifact), ctx, artifact)
}

// IngestArtifacts mocks base method.
func (m *MockBackend) IngestArtifacts(ctx context.Context, artifacts []*model.IDorArtifactInput) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestArtifacts", ctx, artifacts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestArtifacts indicates an expected call of IngestArtifacts.
func (mr *MockBackendMockRecorder) IngestArtifacts(ctx, artifacts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestArtifacts", reflect.TypeOf((*MockBackend)(nil).IngestArtifacts), ctx, artifacts)
}

// IngestBuilder mocks base method.
func (m *MockBackend) IngestBuilder(ctx context.Context, builder *model.IDorBuilderInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestBuilder", ctx, builder)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestBuilder indicates an expected call of IngestBuilder.
func (mr *MockBackendMockRecorder) IngestBuilder(ctx, builder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestBuilder", reflect.TypeOf((*MockBackend)(nil).IngestBuilder), ctx, builder)
}

// IngestBuilders mocks base method.
func (m *MockBackend) IngestBuilders(ctx context.Context, builders []*model.IDorBuilderInput) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestBuilders", ctx, builders)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestBuilders indicates an expected call of IngestBuilders.
func (mr *MockBackendMockRecorder) IngestBuilders(ctx, builders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestBuilders", reflect.TypeOf((*MockBackend)(nil).IngestBuilders), ctx, builders)
}

// IngestBulkHasMetadata mocks base method.
func (m *MockBackend) IngestBulkHasMetadata(ctx context.Context, subjects model.PackageSourceOrArtifactInputs, pkgMatchType *model.MatchFlags, hasMetadataList []*model.HasMetadataInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestBulkHasMetadata", ctx, subjects, pkgMatchType, hasMetadataList)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestBulkHasMetadata indicates an expected call of IngestBulkHasMetadata.
func (mr *MockBackendMockRecorder) IngestBulkHasMetadata(ctx, subjects, pkgMatchType, hasMetadataList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestBulkHasMetadata", reflect.TypeOf((*MockBackend)(nil).IngestBulkHasMetadata), ctx, subjects, pkgMatchType, hasMetadataList)
}

// IngestBulkVulnerabilityMetadata mocks base method.
func (m *MockBackend) IngestBulkVulnerabilityMetadata(ctx context.Context, vulnerabilities []*model.IDorVulnerabilityInput, vulnerabilityMetadataList []*model.VulnerabilityMetadataInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestBulkVulnerabilityMetadata", ctx, vulnerabilities, vulnerabilityMetadataList)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestBulkVulnerabilityMetadata indicates an expected call of IngestBulkVulnerabilityMetadata.
func (mr *MockBackendMockRecorder) IngestBulkVulnerabilityMetadata(ctx, vulnerabilities, vulnerabilityMetadataList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestBulkVulnerabilityMetadata", reflect.TypeOf((*MockBackend)(nil).IngestBulkVulnerabilityMetadata), ctx, vulnerabilities, vulnerabilityMetadataList)
}

// IngestCertifyBad mocks base method.
func (m *MockBackend) IngestCertifyBad(ctx context.Context, subject model.PackageSourceOrArtifactInput, pkgMatchType *model.MatchFlags, certifyBad model.CertifyBadInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestCertifyBad", ctx, subject, pkgMatchType, certifyBad)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestCertifyBad indicates an expected call of IngestCertifyBad.
func (mr *MockBackendMockRecorder) IngestCertifyBad(ctx, subject, pkgMatchType, certifyBad any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestCertifyBad", reflect.TypeOf((*MockBackend)(nil).IngestCertifyBad), ctx, subject, pkgMatchType, certifyBad)
}

// IngestCertifyBads mocks base method.
func (m *MockBackend) IngestCertifyBads(ctx context.Context, subjects model.PackageSourceOrArtifactInputs, pkgMatchType *model.MatchFlags, certifyBads []*model.CertifyBadInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestCertifyBads", ctx, subjects, pkgMatchType, certifyBads)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestCertifyBads indicates an expected call of IngestCertifyBads.
func (mr *MockBackendMockRecorder) IngestCertifyBads(ctx, subjects, pkgMatchType, certifyBads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestCertifyBads", reflect.TypeOf((*MockBackend)(nil).IngestCertifyBads), ctx, subjects, pkgMatchType, certifyBads)
}

// IngestCertifyGood mocks base method.
func (m *MockBackend) IngestCertifyGood(ctx context.Context, subject model.PackageSourceOrArtifactInput, pkgMatchType *model.MatchFlags, certifyGood model.CertifyGoodInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestCertifyGood", ctx, subject, pkgMatchType, certifyGood)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestCertifyGood indicates an expected call of IngestCertifyGood.
func (mr *MockBackendMockRecorder) IngestCertifyGood(ctx, subject, pkgMatchType, certifyGood any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestCertifyGood", reflect.TypeOf((*MockBackend)(nil).IngestCertifyGood), ctx, subject, pkgMatchType, certifyGood)
}

// IngestCertifyGoods mocks base method.
func (m *MockBackend) IngestCertifyGoods(ctx context.Context, subjects model.PackageSourceOrArtifactInputs, pkgMatchType *model.MatchFlags, certifyGoods []*model.CertifyGoodInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestCertifyGoods", ctx, subjects, pkgMatchType, certifyGoods)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestCertifyGoods indicates an expected call of IngestCertifyGoods.
func (mr *MockBackendMockRecorder) IngestCertifyGoods(ctx, subjects, pkgMatchType, certifyGoods any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestCertifyGoods", reflect.TypeOf((*MockBackend)(nil).IngestCertifyGoods), ctx, subjects, pkgMatchType, certifyGoods)
}

// IngestCertifyLegal mocks base method.
func (m *MockBackend) IngestCertifyLegal(ctx context.Context, subject model.PackageOrSourceInput, declaredLicenses, discoveredLicenses []*model.IDorLicenseInput, certifyLegal *model.CertifyLegalInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestCertifyLegal", ctx, subject, declaredLicenses, discoveredLicenses, certifyLegal)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestCertifyLegal indicates an expected call of IngestCertifyLegal.
func (mr *MockBackendMockRecorder) IngestCertifyLegal(ctx, subject, declaredLicenses, discoveredLicenses, certifyLegal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestCertifyLegal", reflect.TypeOf((*MockBackend)(nil).IngestCertifyLegal), ctx, subject, declaredLicenses, discoveredLicenses, certifyLegal)
}

// IngestCertifyLegals mocks base method.
func (m *MockBackend) IngestCertifyLegals(ctx context.Context, subjects model.PackageOrSourceInputs, declaredLicensesList, discoveredLicensesList [][]*model.IDorLicenseInput, certifyLegals []*model.CertifyLegalInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestCertifyLegals", ctx, subjects, declaredLicensesList, discoveredLicensesList, certifyLegals)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestCertifyLegals indicates an expected call of IngestCertifyLegals.
func (mr *MockBackendMockRecorder) IngestCertifyLegals(ctx, subjects, declaredLicensesList, discoveredLicensesList, certifyLegals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestCertifyLegals", reflect.TypeOf((*MockBackend)(nil).IngestCertifyLegals), ctx, subjects, declaredLicensesList, discoveredLicensesList, certifyLegals)
}

// IngestCertifyVuln mocks base method.
func (m *MockBackend) IngestCertifyVuln(ctx context.Context, pkg model.IDorPkgInput, vulnerability model.IDorVulnerabilityInput, certifyVuln model.ScanMetadataInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestCertifyVuln", ctx, pkg, vulnerability, certifyVuln)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestCertifyVuln indicates an expected call of IngestCertifyVuln.
func (mr *MockBackendMockRecorder) IngestCertifyVuln(ctx, pkg, vulnerability, certifyVuln any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestCertifyVuln", reflect.TypeOf((*MockBackend)(nil).IngestCertifyVuln), ctx, pkg, vulnerability, certifyVuln)
}

// IngestCertifyVulns mocks base method.
func (m *MockBackend) IngestCertifyVulns(ctx context.Context, pkgs []*model.IDorPkgInput, vulnerabilities []*model.IDorVulnerabilityInput, certifyVulns []*model.ScanMetadataInput) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestCertifyVulns", ctx, pkgs, vulnerabilities, certifyVulns)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestCertifyVulns indicates an expected call of IngestCertifyVulns.
func (mr *MockBackendMockRecorder) IngestCertifyVulns(ctx, pkgs, vulnerabilities, certifyVulns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestCertifyVulns", reflect.TypeOf((*MockBackend)(nil).IngestCertifyVulns), ctx, pkgs, vulnerabilities, certifyVulns)
}

// IngestDependencies mocks base method.
func (m *MockBackend) IngestDependencies(ctx context.Context, pkgs, depPkgs []*model.IDorPkgInput, dependencies []*model.IsDependencyInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestDependencies", ctx, pkgs, depPkgs, dependencies)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestDependencies indicates an expected call of IngestDependencies.
func (mr *MockBackendMockRecorder) IngestDependencies(ctx, pkgs, depPkgs, dependencies any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestDependencies", reflect.TypeOf((*MockBackend)(nil).IngestDependencies), ctx, pkgs, depPkgs, dependencies)
}

// IngestDependency mocks base method.
func (m *MockBackend) IngestDependency(ctx context.Context, pkg, depPkg model.IDorPkgInput, dependency model.IsDependencyInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestDependency", ctx, pkg, depPkg, dependency)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestDependency indicates an expected call of IngestDependency.
func (mr *MockBackendMockRecorder) IngestDependency(ctx, pkg, depPkg, dependency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestDependency", reflect.TypeOf((*MockBackend)(nil).IngestDependency), ctx, pkg, depPkg, dependency)
}

// IngestHasMetadata mocks base method.
func (m *MockBackend) IngestHasMetadata(ctx context.Context, subject model.PackageSourceOrArtifactInput, pkgMatchType *model.MatchFlags, hasMetadata model.HasMetadataInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestHasMetadata", ctx, subject, pkgMatchType, hasMetadata)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestHasMetadata indicates an expected call of IngestHasMetadata.
func (mr *MockBackendMockRecorder) IngestHasMetadata(ctx, subject, pkgMatchType, hasMetadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestHasMetadata", reflect.TypeOf((*MockBackend)(nil).IngestHasMetadata), ctx, subject, pkgMatchType, hasMetadata)
}

// IngestHasSBOMs mocks base method.
func (m *MockBackend) IngestHasSBOMs(ctx context.Context, subjects model.PackageOrArtifactInputs, hasSBOMs []*model.HasSBOMInputSpec, includes []*model.HasSBOMIncludesInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestHasSBOMs", ctx, subjects, hasSBOMs, includes)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestHasSBOMs indicates an expected call of IngestHasSBOMs.
func (mr *MockBackendMockRecorder) IngestHasSBOMs(ctx, subjects, hasSBOMs, includes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestHasSBOMs", reflect.TypeOf((*MockBackend)(nil).IngestHasSBOMs), ctx, subjects, hasSBOMs, includes)
}

// IngestHasSbom mocks base method.
func (m *MockBackend) IngestHasSbom(ctx context.Context, subject model.PackageOrArtifactInput, hasSbom model.HasSBOMInputSpec, includes model.HasSBOMIncludesInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestHasSbom", ctx, subject, hasSbom, includes)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestHasSbom indicates an expected call of IngestHasSbom.
func (mr *MockBackendMockRecorder) IngestHasSbom(ctx, subject, hasSbom, includes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestHasSbom", reflect.TypeOf((*MockBackend)(nil).IngestHasSbom), ctx, subject, hasSbom, includes)
}

// IngestHasSourceAt mocks base method.
func (m *MockBackend) IngestHasSourceAt(ctx context.Context, pkg model.IDorPkgInput, pkgMatchType model.MatchFlags, source model.IDorSourceInput, hasSourceAt model.HasSourceAtInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestHasSourceAt", ctx, pkg, pkgMatchType, source, hasSourceAt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestHasSourceAt indicates an expected call of IngestHasSourceAt.
func (mr *MockBackendMockRecorder) IngestHasSourceAt(ctx, pkg, pkgMatchType, source, hasSourceAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestHasSourceAt", reflect.TypeOf((*MockBackend)(nil).IngestHasSourceAt), ctx, pkg, pkgMatchType, source, hasSourceAt)
}

// IngestHasSourceAts mocks base method.
func (m *MockBackend) IngestHasSourceAts(ctx context.Context, pkgs []*model.IDorPkgInput, pkgMatchType *model.MatchFlags, sources []*model.IDorSourceInput, hasSourceAts []*model.HasSourceAtInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestHasSourceAts", ctx, pkgs, pkgMatchType, sources, hasSourceAts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestHasSourceAts indicates an expected call of IngestHasSourceAts.
func (mr *MockBackendMockRecorder) IngestHasSourceAts(ctx, pkgs, pkgMatchType, sources, hasSourceAts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestHasSourceAts", reflect.TypeOf((*MockBackend)(nil).IngestHasSourceAts), ctx, pkgs, pkgMatchType, sources, hasSourceAts)
}

// IngestHashEqual mocks base method.
func (m *MockBackend) IngestHashEqual(ctx context.Context, artifact, equalArtifact model.IDorArtifactInput, hashEqual model.HashEqualInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestHashEqual", ctx, artifact, equalArtifact, hashEqual)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestHashEqual indicates an expected call of IngestHashEqual.
func (mr *MockBackendMockRecorder) IngestHashEqual(ctx, artifact, equalArtifact, hashEqual any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestHashEqual", reflect.TypeOf((*MockBackend)(nil).IngestHashEqual), ctx, artifact, equalArtifact, hashEqual)
}

// IngestHashEquals mocks base method.
func (m *MockBackend) IngestHashEquals(ctx context.Context, artifacts, otherArtifacts []*model.IDorArtifactInput, hashEquals []*model.HashEqualInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestHashEquals", ctx, artifacts, otherArtifacts, hashEquals)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestHashEquals indicates an expected call of IngestHashEquals.
func (mr *MockBackendMockRecorder) IngestHashEquals(ctx, artifacts, otherArtifacts, hashEquals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestHashEquals", reflect.TypeOf((*MockBackend)(nil).IngestHashEquals), ctx, artifacts, otherArtifacts, hashEquals)
}

// IngestLicense mocks base method.
func (m *MockBackend) IngestLicense(ctx context.Context, license *model.IDorLicenseInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestLicense", ctx, license)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestLicense indicates an expected call of IngestLicense.
func (mr *MockBackendMockRecorder) IngestLicense(ctx, license any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestLicense", reflect.TypeOf((*MockBackend)(nil).IngestLicense), ctx, license)
}

// IngestLicenses mocks base method.
func (m *MockBackend) IngestLicenses(ctx context.Context, licenses []*model.IDorLicenseInput) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestLicenses", ctx, licenses)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestLicenses indicates an expected call of IngestLicenses.
func (mr *MockBackendMockRecorder) IngestLicenses(ctx, licenses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestLicenses", reflect.TypeOf((*MockBackend)(nil).IngestLicenses), ctx, licenses)
}

// IngestOccurrence mocks base method.
func (m *MockBackend) IngestOccurrence(ctx context.Context, subject model.PackageOrSourceInput, artifact model.IDorArtifactInput, occurrence model.IsOccurrenceInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestOccurrence", ctx, subject, artifact, occurrence)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestOccurrence indicates an expected call of IngestOccurrence.
func (mr *MockBackendMockRecorder) IngestOccurrence(ctx, subject, artifact, occurrence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestOccurrence", reflect.TypeOf((*MockBackend)(nil).IngestOccurrence), ctx, subject, artifact, occurrence)
}

// IngestOccurrences mocks base method.
func (m *MockBackend) IngestOccurrences(ctx context.Context, subjects model.PackageOrSourceInputs, artifacts []*model.IDorArtifactInput, occurrences []*model.IsOccurrenceInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestOccurrences", ctx, subjects, artifacts, occurrences)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestOccurrences indicates an expected call of IngestOccurrences.
func (mr *MockBackendMockRecorder) IngestOccurrences(ctx, subjects, artifacts, occurrences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestOccurrences", reflect.TypeOf((*MockBackend)(nil).IngestOccurrences), ctx, subjects, artifacts, occurrences)
}

// IngestPackage mocks base method.
func (m *MockBackend) IngestPackage(ctx context.Context, pkg model.IDorPkgInput) (*model.PackageIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestPackage", ctx, pkg)
	ret0, _ := ret[0].(*model.PackageIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestPackage indicates an expected call of IngestPackage.
func (mr *MockBackendMockRecorder) IngestPackage(ctx, pkg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestPackage", reflect.TypeOf((*MockBackend)(nil).IngestPackage), ctx, pkg)
}

// IngestPackages mocks base method.
func (m *MockBackend) IngestPackages(ctx context.Context, pkgs []*model.IDorPkgInput) ([]*model.PackageIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestPackages", ctx, pkgs)
	ret0, _ := ret[0].([]*model.PackageIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestPackages indicates an expected call of IngestPackages.
func (mr *MockBackendMockRecorder) IngestPackages(ctx, pkgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestPackages", reflect.TypeOf((*MockBackend)(nil).IngestPackages), ctx, pkgs)
}

// IngestPkgEqual mocks base method.
func (m *MockBackend) IngestPkgEqual(ctx context.Context, pkg, depPkg model.IDorPkgInput, pkgEqual model.PkgEqualInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestPkgEqual", ctx, pkg, depPkg, pkgEqual)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestPkgEqual indicates an expected call of IngestPkgEqual.
func (mr *MockBackendMockRecorder) IngestPkgEqual(ctx, pkg, depPkg, pkgEqual any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestPkgEqual", reflect.TypeOf((*MockBackend)(nil).IngestPkgEqual), ctx, pkg, depPkg, pkgEqual)
}

// IngestPkgEquals mocks base method.
func (m *MockBackend) IngestPkgEquals(ctx context.Context, pkgs, otherPackages []*model.IDorPkgInput, pkgEquals []*model.PkgEqualInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestPkgEquals", ctx, pkgs, otherPackages, pkgEquals)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestPkgEquals indicates an expected call of IngestPkgEquals.
func (mr *MockBackendMockRecorder) IngestPkgEquals(ctx, pkgs, otherPackages, pkgEquals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestPkgEquals", reflect.TypeOf((*MockBackend)(nil).IngestPkgEquals), ctx, pkgs, otherPackages, pkgEquals)
}

// IngestPointOfContact mocks base method.
func (m *MockBackend) IngestPointOfContact(ctx context.Context, subject model.PackageSourceOrArtifactInput, pkgMatchType *model.MatchFlags, pointOfContact model.PointOfContactInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestPointOfContact", ctx, subject, pkgMatchType, pointOfContact)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestPointOfContact indicates an expected call of IngestPointOfContact.
func (mr *MockBackendMockRecorder) IngestPointOfContact(ctx, subject, pkgMatchType, pointOfContact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestPointOfContact", reflect.TypeOf((*MockBackend)(nil).IngestPointOfContact), ctx, subject, pkgMatchType, pointOfContact)
}

// IngestPointOfContacts mocks base method.
func (m *MockBackend) IngestPointOfContacts(ctx context.Context, subjects model.PackageSourceOrArtifactInputs, pkgMatchType *model.MatchFlags, pointOfContacts []*model.PointOfContactInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestPointOfContacts", ctx, subjects, pkgMatchType, pointOfContacts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestPointOfContacts indicates an expected call of IngestPointOfContacts.
func (mr *MockBackendMockRecorder) IngestPointOfContacts(ctx, subjects, pkgMatchType, pointOfContacts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestPointOfContacts", reflect.TypeOf((*MockBackend)(nil).IngestPointOfContacts), ctx, subjects, pkgMatchType, pointOfContacts)
}

// IngestSLSA mocks base method.
func (m *MockBackend) IngestSLSA(ctx context.Context, subject model.IDorArtifactInput, builtFrom []*model.IDorArtifactInput, builtBy model.IDorBuilderInput, slsa model.SLSAInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestSLSA", ctx, subject, builtFrom, builtBy, slsa)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestSLSA indicates an expected call of IngestSLSA.
func (mr *MockBackendMockRecorder) IngestSLSA(ctx, subject, builtFrom, builtBy, slsa any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestSLSA", reflect.TypeOf((*MockBackend)(nil).IngestSLSA), ctx, subject, builtFrom, builtBy, slsa)
}

// IngestSLSAs mocks base method.
func (m *MockBackend) IngestSLSAs(ctx context.Context, subjects []*model.IDorArtifactInput, builtFromList [][]*model.IDorArtifactInput, builtByList []*model.IDorBuilderInput, slsaList []*model.SLSAInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestSLSAs", ctx, subjects, builtFromList, builtByList, slsaList)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestSLSAs indicates an expected call of IngestSLSAs.
func (mr *MockBackendMockRecorder) IngestSLSAs(ctx, subjects, builtFromList, builtByList, slsaList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestSLSAs", reflect.TypeOf((*MockBackend)(nil).IngestSLSAs), ctx, subjects, builtFromList, builtByList, slsaList)
}

// IngestScorecard mocks base method.
func (m *MockBackend) IngestScorecard(ctx context.Context, source model.IDorSourceInput, scorecard model.ScorecardInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestScorecard", ctx, source, scorecard)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestScorecard indicates an expected call of IngestScorecard.
func (mr *MockBackendMockRecorder) IngestScorecard(ctx, source, scorecard any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestScorecard", reflect.TypeOf((*MockBackend)(nil).IngestScorecard), ctx, source, scorecard)
}

// IngestScorecards mocks base method.
func (m *MockBackend) IngestScorecards(ctx context.Context, sources []*model.IDorSourceInput, scorecards []*model.ScorecardInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestScorecards", ctx, sources, scorecards)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestScorecards indicates an expected call of IngestScorecards.
func (mr *MockBackendMockRecorder) IngestScorecards(ctx, sources, scorecards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestScorecards", reflect.TypeOf((*MockBackend)(nil).IngestScorecards), ctx, sources, scorecards)
}

// IngestSource mocks base method.
func (m *MockBackend) IngestSource(ctx context.Context, source model.IDorSourceInput) (*model.SourceIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestSource", ctx, source)
	ret0, _ := ret[0].(*model.SourceIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestSource indicates an expected call of IngestSource.
func (mr *MockBackendMockRecorder) IngestSource(ctx, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestSource", reflect.TypeOf((*MockBackend)(nil).IngestSource), ctx, source)
}

// IngestSources mocks base method.
func (m *MockBackend) IngestSources(ctx context.Context, sources []*model.IDorSourceInput) ([]*model.SourceIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestSources", ctx, sources)
	ret0, _ := ret[0].([]*model.SourceIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestSources indicates an expected call of IngestSources.
func (mr *MockBackendMockRecorder) IngestSources(ctx, sources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestSources", reflect.TypeOf((*MockBackend)(nil).IngestSources), ctx, sources)
}

// IngestVEXStatement mocks base method.
func (m *MockBackend) IngestVEXStatement(ctx context.Context, subject model.PackageOrArtifactInput, vulnerability model.IDorVulnerabilityInput, vexStatement model.VexStatementInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestVEXStatement", ctx, subject, vulnerability, vexStatement)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestVEXStatement indicates an expected call of IngestVEXStatement.
func (mr *MockBackendMockRecorder) IngestVEXStatement(ctx, subject, vulnerability, vexStatement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestVEXStatement", reflect.TypeOf((*MockBackend)(nil).IngestVEXStatement), ctx, subject, vulnerability, vexStatement)
}

// IngestVEXStatements mocks base method.
func (m *MockBackend) IngestVEXStatements(ctx context.Context, subjects model.PackageOrArtifactInputs, vulnerabilities []*model.IDorVulnerabilityInput, vexStatements []*model.VexStatementInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestVEXStatements", ctx, subjects, vulnerabilities, vexStatements)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestVEXStatements indicates an expected call of IngestVEXStatements.
func (mr *MockBackendMockRecorder) IngestVEXStatements(ctx, subjects, vulnerabilities, vexStatements any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestVEXStatements", reflect.TypeOf((*MockBackend)(nil).IngestVEXStatements), ctx, subjects, vulnerabilities, vexStatements)
}

// IngestVulnEqual mocks base method.
func (m *MockBackend) IngestVulnEqual(ctx context.Context, vulnerability, otherVulnerability model.IDorVulnerabilityInput, vulnEqual model.VulnEqualInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestVulnEqual", ctx, vulnerability, otherVulnerability, vulnEqual)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestVulnEqual indicates an expected call of IngestVulnEqual.
func (mr *MockBackendMockRecorder) IngestVulnEqual(ctx, vulnerability, otherVulnerability, vulnEqual any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestVulnEqual", reflect.TypeOf((*MockBackend)(nil).IngestVulnEqual), ctx, vulnerability, otherVulnerability, vulnEqual)
}

// IngestVulnEquals mocks base method.
func (m *MockBackend) IngestVulnEquals(ctx context.Context, vulnerabilities, otherVulnerabilities []*model.IDorVulnerabilityInput, vulnEquals []*model.VulnEqualInputSpec) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestVulnEquals", ctx, vulnerabilities, otherVulnerabilities, vulnEquals)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestVulnEquals indicates an expected call of IngestVulnEquals.
func (mr *MockBackendMockRecorder) IngestVulnEquals(ctx, vulnerabilities, otherVulnerabilities, vulnEquals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestVulnEquals", reflect.TypeOf((*MockBackend)(nil).IngestVulnEquals), ctx, vulnerabilities, otherVulnerabilities, vulnEquals)
}

// IngestVulnerabilities mocks base method.
func (m *MockBackend) IngestVulnerabilities(ctx context.Context, vulns []*model.IDorVulnerabilityInput) ([]*model.VulnerabilityIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestVulnerabilities", ctx, vulns)
	ret0, _ := ret[0].([]*model.VulnerabilityIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestVulnerabilities indicates an expected call of IngestVulnerabilities.
func (mr *MockBackendMockRecorder) IngestVulnerabilities(ctx, vulns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestVulnerabilities", reflect.TypeOf((*MockBackend)(nil).IngestVulnerabilities), ctx, vulns)
}

// IngestVulnerability mocks base method.
func (m *MockBackend) IngestVulnerability(ctx context.Context, vuln model.IDorVulnerabilityInput) (*model.VulnerabilityIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestVulnerability", ctx, vuln)
	ret0, _ := ret[0].(*model.VulnerabilityIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestVulnerability indicates an expected call of IngestVulnerability.
func (mr *MockBackendMockRecorder) IngestVulnerability(ctx, vuln any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestVulnerability", reflect.TypeOf((*MockBackend)(nil).IngestVulnerability), ctx, vuln)
}

// IngestVulnerabilityMetadata mocks base method.
func (m *MockBackend) IngestVulnerabilityMetadata(ctx context.Context, vulnerability model.IDorVulnerabilityInput, vulnerabilityMetadata model.VulnerabilityMetadataInputSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestVulnerabilityMetadata", ctx, vulnerability, vulnerabilityMetadata)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestVulnerabilityMetadata indicates an expected call of IngestVulnerabilityMetadata.
func (mr *MockBackendMockRecorder) IngestVulnerabilityMetadata(ctx, vulnerability, vulnerabilityMetadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestVulnerabilityMetadata", reflect.TypeOf((*MockBackend)(nil).IngestVulnerabilityMetadata), ctx, vulnerability, vulnerabilityMetadata)
}

// IsDependency mocks base method.
func (m *MockBackend) IsDependency(ctx context.Context, isDependencySpec *model.IsDependencySpec) ([]*model.IsDependency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDependency", ctx, isDependencySpec)
	ret0, _ := ret[0].([]*model.IsDependency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDependency indicates an expected call of IsDependency.
func (mr *MockBackendMockRecorder) IsDependency(ctx, isDependencySpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDependency", reflect.TypeOf((*MockBackend)(nil).IsDependency), ctx, isDependencySpec)
}

// IsDependencyList mocks base method.
func (m *MockBackend) IsDependencyList(ctx context.Context, isDependencySpec model.IsDependencySpec, after *string, first *int) (*model.IsDependencyConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDependencyList", ctx, isDependencySpec, after, first)
	ret0, _ := ret[0].(*model.IsDependencyConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDependencyList indicates an expected call of IsDependencyList.
func (mr *MockBackendMockRecorder) IsDependencyList(ctx, isDependencySpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDependencyList", reflect.TypeOf((*MockBackend)(nil).IsDependencyList), ctx, isDependencySpec, after, first)
}

// IsOccurrence mocks base method.
func (m *MockBackend) IsOccurrence(ctx context.Context, isOccurrenceSpec *model.IsOccurrenceSpec) ([]*model.IsOccurrence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOccurrence", ctx, isOccurrenceSpec)
	ret0, _ := ret[0].([]*model.IsOccurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOccurrence indicates an expected call of IsOccurrence.
func (mr *MockBackendMockRecorder) IsOccurrence(ctx, isOccurrenceSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOccurrence", reflect.TypeOf((*MockBackend)(nil).IsOccurrence), ctx, isOccurrenceSpec)
}

// IsOccurrenceList mocks base method.
func (m *MockBackend) IsOccurrenceList(ctx context.Context, isOccurrenceSpec model.IsOccurrenceSpec, after *string, first *int) (*model.IsOccurrenceConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOccurrenceList", ctx, isOccurrenceSpec, after, first)
	ret0, _ := ret[0].(*model.IsOccurrenceConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOccurrenceList indicates an expected call of IsOccurrenceList.
func (mr *MockBackendMockRecorder) IsOccurrenceList(ctx, isOccurrenceSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOccurrenceList", reflect.TypeOf((*MockBackend)(nil).IsOccurrenceList), ctx, isOccurrenceSpec, after, first)
}

// LicenseList mocks base method.
func (m *MockBackend) LicenseList(ctx context.Context, licenseSpec model.LicenseSpec, after *string, first *int) (*model.LicenseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LicenseList", ctx, licenseSpec, after, first)
	ret0, _ := ret[0].(*model.LicenseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LicenseList indicates an expected call of LicenseList.
func (mr *MockBackendMockRecorder) LicenseList(ctx, licenseSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LicenseList", reflect.TypeOf((*MockBackend)(nil).LicenseList), ctx, licenseSpec, after, first)
}

// Licenses mocks base method.
func (m *MockBackend) Licenses(ctx context.Context, licenseSpec *model.LicenseSpec) ([]*model.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Licenses", ctx, licenseSpec)
	ret0, _ := ret[0].([]*model.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Licenses indicates an expected call of Licenses.
func (mr *MockBackendMockRecorder) Licenses(ctx, licenseSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Licenses", reflect.TypeOf((*MockBackend)(nil).Licenses), ctx, licenseSpec)
}

// Neighbors mocks base method.
func (m *MockBackend) Neighbors(ctx context.Context, node string, usingOnly []model.Edge) ([]model.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Neighbors", ctx, node, usingOnly)
	ret0, _ := ret[0].([]model.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Neighbors indicates an expected call of Neighbors.
func (mr *MockBackendMockRecorder) Neighbors(ctx, node, usingOnly any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Neighbors", reflect.TypeOf((*MockBackend)(nil).Neighbors), ctx, node, usingOnly)
}

// NeighborsList mocks base method.
func (m *MockBackend) NeighborsList(ctx context.Context, node string, usingOnly []model.Edge, after *string, first *int) (*model.NeighborConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeighborsList", ctx, node, usingOnly, after, first)
	ret0, _ := ret[0].(*model.NeighborConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeighborsList indicates an expected call of NeighborsList.
func (mr *MockBackendMockRecorder) NeighborsList(ctx, node, usingOnly, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeighborsList", reflect.TypeOf((*MockBackend)(nil).NeighborsList), ctx, node, usingOnly, after, first)
}

// Node mocks base method.
func (m *MockBackend) Node(ctx context.Context, node string) (model.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", ctx, node)
	ret0, _ := ret[0].(model.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Node indicates an expected call of Node.
func (mr *MockBackendMockRecorder) Node(ctx, node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockBackend)(nil).Node), ctx, node)
}

// Nodes mocks base method.
func (m *MockBackend) Nodes(ctx context.Context, nodes []string) ([]model.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes", ctx, nodes)
	ret0, _ := ret[0].([]model.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Nodes indicates an expected call of Nodes.
func (mr *MockBackendMockRecorder) Nodes(ctx, nodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockBackend)(nil).Nodes), ctx, nodes)
}

// Packages mocks base method.
func (m *MockBackend) Packages(ctx context.Context, pkgSpec *model.PkgSpec) ([]*model.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packages", ctx, pkgSpec)
	ret0, _ := ret[0].([]*model.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Packages indicates an expected call of Packages.
func (mr *MockBackendMockRecorder) Packages(ctx, pkgSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packages", reflect.TypeOf((*MockBackend)(nil).Packages), ctx, pkgSpec)
}

// PackagesList mocks base method.
func (m *MockBackend) PackagesList(ctx context.Context, pkgSpec model.PkgSpec, after *string, first *int) (*model.PackageConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackagesList", ctx, pkgSpec, after, first)
	ret0, _ := ret[0].(*model.PackageConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackagesList indicates an expected call of PackagesList.
func (mr *MockBackendMockRecorder) PackagesList(ctx, pkgSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackagesList", reflect.TypeOf((*MockBackend)(nil).PackagesList), ctx, pkgSpec, after, first)
}

// Path mocks base method.
func (m *MockBackend) Path(ctx context.Context, subject, target string, maxPathLength int, usingOnly []model.Edge) ([]model.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path", ctx, subject, target, maxPathLength, usingOnly)
	ret0, _ := ret[0].([]model.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Path indicates an expected call of Path.
func (mr *MockBackendMockRecorder) Path(ctx, subject, target, maxPathLength, usingOnly any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockBackend)(nil).Path), ctx, subject, target, maxPathLength, usingOnly)
}

// PkgEqual mocks base method.
func (m *MockBackend) PkgEqual(ctx context.Context, pkgEqualSpec *model.PkgEqualSpec) ([]*model.PkgEqual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PkgEqual", ctx, pkgEqualSpec)
	ret0, _ := ret[0].([]*model.PkgEqual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PkgEqual indicates an expected call of PkgEqual.
func (mr *MockBackendMockRecorder) PkgEqual(ctx, pkgEqualSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PkgEqual", reflect.TypeOf((*MockBackend)(nil).PkgEqual), ctx, pkgEqualSpec)
}

// PkgEqualList mocks base method.
func (m *MockBackend) PkgEqualList(ctx context.Context, pkgEqualSpec model.PkgEqualSpec, after *string, first *int) (*model.PkgEqualConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PkgEqualList", ctx, pkgEqualSpec, after, first)
	ret0, _ := ret[0].(*model.PkgEqualConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PkgEqualList indicates an expected call of PkgEqualList.
func (mr *MockBackendMockRecorder) PkgEqualList(ctx, pkgEqualSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PkgEqualList", reflect.TypeOf((*MockBackend)(nil).PkgEqualList), ctx, pkgEqualSpec, after, first)
}

// PointOfContact mocks base method.
func (m *MockBackend) PointOfContact(ctx context.Context, pointOfContactSpec *model.PointOfContactSpec) ([]*model.PointOfContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PointOfContact", ctx, pointOfContactSpec)
	ret0, _ := ret[0].([]*model.PointOfContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PointOfContact indicates an expected call of PointOfContact.
func (mr *MockBackendMockRecorder) PointOfContact(ctx, pointOfContactSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PointOfContact", reflect.TypeOf((*MockBackend)(nil).PointOfContact), ctx, pointOfContactSpec)
}

// PointOfContactList mocks base method.
func (m *MockBackend) PointOfContactList(ctx context.Context, pointOfContactSpec model.PointOfContactSpec, after *string, first *int) (*model.PointOfContactConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PointOfContactList", ctx, pointOfContactSpec, after, first)
	ret0, _ := ret[0].(*model.PointOfContactConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PointOfContactList indicates an expected call of PointOfContactList.
func (mr *MockBackendMockRecorder) PointOfContactList(ctx, pointOfContactSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PointOfContactList", reflect.TypeOf((*MockBackend)(nil).PointOfContactList), ctx, pointOfContactSpec, after, first)
}

// QueryPackagesListForScan mocks base method.
func (m *MockBackend) QueryPackagesListForScan(ctx context.Context, pkgIDs []string, after *string, first *int) (*model.PackageConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPackagesListForScan", ctx, pkgIDs, after, first)
	ret0, _ := ret[0].(*model.PackageConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPackagesListForScan indicates an expected call of QueryPackagesListForScan.
func (mr *MockBackendMockRecorder) QueryPackagesListForScan(ctx, pkgIDs, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPackagesListForScan", reflect.TypeOf((*MockBackend)(nil).QueryPackagesListForScan), ctx, pkgIDs, after, first)
}

// Scorecards mocks base method.
func (m *MockBackend) Scorecards(ctx context.Context, certifyScorecardSpec *model.CertifyScorecardSpec) ([]*model.CertifyScorecard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scorecards", ctx, certifyScorecardSpec)
	ret0, _ := ret[0].([]*model.CertifyScorecard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scorecards indicates an expected call of Scorecards.
func (mr *MockBackendMockRecorder) Scorecards(ctx, certifyScorecardSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scorecards", reflect.TypeOf((*MockBackend)(nil).Scorecards), ctx, certifyScorecardSpec)
}

// ScorecardsList mocks base method.
func (m *MockBackend) ScorecardsList(ctx context.Context, scorecardSpec model.CertifyScorecardSpec, after *string, first *int) (*model.CertifyScorecardConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScorecardsList", ctx, scorecardSpec, after, first)
	ret0, _ := ret[0].(*model.CertifyScorecardConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScorecardsList indicates an expected call of ScorecardsList.
func (mr *MockBackendMockRecorder) ScorecardsList(ctx, scorecardSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScorecardsList", reflect.TypeOf((*MockBackend)(nil).ScorecardsList), ctx, scorecardSpec, after, first)
}

// Sources mocks base method.
func (m *MockBackend) Sources(ctx context.Context, sourceSpec *model.SourceSpec) ([]*model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sources", ctx, sourceSpec)
	ret0, _ := ret[0].([]*model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sources indicates an expected call of Sources.
func (mr *MockBackendMockRecorder) Sources(ctx, sourceSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sources", reflect.TypeOf((*MockBackend)(nil).Sources), ctx, sourceSpec)
}

// SourcesList mocks base method.
func (m *MockBackend) SourcesList(ctx context.Context, sourceSpec model.SourceSpec, after *string, first *int) (*model.SourceConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourcesList", ctx, sourceSpec, after, first)
	ret0, _ := ret[0].(*model.SourceConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SourcesList indicates an expected call of SourcesList.
func (mr *MockBackendMockRecorder) SourcesList(ctx, sourceSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourcesList", reflect.TypeOf((*MockBackend)(nil).SourcesList), ctx, sourceSpec, after, first)
}

// VulnEqual mocks base method.
func (m *MockBackend) VulnEqual(ctx context.Context, vulnEqualSpec *model.VulnEqualSpec) ([]*model.VulnEqual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VulnEqual", ctx, vulnEqualSpec)
	ret0, _ := ret[0].([]*model.VulnEqual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VulnEqual indicates an expected call of VulnEqual.
func (mr *MockBackendMockRecorder) VulnEqual(ctx, vulnEqualSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VulnEqual", reflect.TypeOf((*MockBackend)(nil).VulnEqual), ctx, vulnEqualSpec)
}

// VulnEqualList mocks base method.
func (m *MockBackend) VulnEqualList(ctx context.Context, vulnEqualSpec model.VulnEqualSpec, after *string, first *int) (*model.VulnEqualConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VulnEqualList", ctx, vulnEqualSpec, after, first)
	ret0, _ := ret[0].(*model.VulnEqualConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VulnEqualList indicates an expected call of VulnEqualList.
func (mr *MockBackendMockRecorder) VulnEqualList(ctx, vulnEqualSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VulnEqualList", reflect.TypeOf((*MockBackend)(nil).VulnEqualList), ctx, vulnEqualSpec, after, first)
}

// Vulnerabilities mocks base method.
func (m *MockBackend) Vulnerabilities(ctx context.Context, vulnSpec *model.VulnerabilitySpec) ([]*model.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vulnerabilities", ctx, vulnSpec)
	ret0, _ := ret[0].([]*model.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vulnerabilities indicates an expected call of Vulnerabilities.
func (mr *MockBackendMockRecorder) Vulnerabilities(ctx, vulnSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vulnerabilities", reflect.TypeOf((*MockBackend)(nil).Vulnerabilities), ctx, vulnSpec)
}

// VulnerabilityList mocks base method.
func (m *MockBackend) VulnerabilityList(ctx context.Context, vulnSpec model.VulnerabilitySpec, after *string, first *int) (*model.VulnerabilityConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VulnerabilityList", ctx, vulnSpec, after, first)
	ret0, _ := ret[0].(*model.VulnerabilityConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VulnerabilityList indicates an expected call of VulnerabilityList.
func (mr *MockBackendMockRecorder) VulnerabilityList(ctx, vulnSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VulnerabilityList", reflect.TypeOf((*MockBackend)(nil).VulnerabilityList), ctx, vulnSpec, after, first)
}

// VulnerabilityMetadata mocks base method.
func (m *MockBackend) VulnerabilityMetadata(ctx context.Context, vulnerabilityMetadataSpec *model.VulnerabilityMetadataSpec) ([]*model.VulnerabilityMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VulnerabilityMetadata", ctx, vulnerabilityMetadataSpec)
	ret0, _ := ret[0].([]*model.VulnerabilityMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VulnerabilityMetadata indicates an expected call of VulnerabilityMetadata.
func (mr *MockBackendMockRecorder) VulnerabilityMetadata(ctx, vulnerabilityMetadataSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VulnerabilityMetadata", reflect.TypeOf((*MockBackend)(nil).VulnerabilityMetadata), ctx, vulnerabilityMetadataSpec)
}

// VulnerabilityMetadataList mocks base method.
func (m *MockBackend) VulnerabilityMetadataList(ctx context.Context, vulnerabilityMetadataSpec model.VulnerabilityMetadataSpec, after *string, first *int) (*model.VulnerabilityMetadataConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VulnerabilityMetadataList", ctx, vulnerabilityMetadataSpec, after, first)
	ret0, _ := ret[0].(*model.VulnerabilityMetadataConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VulnerabilityMetadataList indicates an expected call of VulnerabilityMetadataList.
func (mr *MockBackendMockRecorder) VulnerabilityMetadataList(ctx, vulnerabilityMetadataSpec, after, first any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VulnerabilityMetadataList", reflect.TypeOf((*MockBackend)(nil).VulnerabilityMetadataList), ctx, vulnerabilityMetadataSpec, after, first)
}

// MockBackendArgs is a mock of BackendArgs interface.
type MockBackendArgs struct {
	ctrl     *gomock.Controller
	recorder *MockBackendArgsMockRecorder
}

// MockBackendArgsMockRecorder is the mock recorder for MockBackendArgs.
type MockBackendArgsMockRecorder struct {
	mock *MockBackendArgs
}

// NewMockBackendArgs creates a new mock instance.
func NewMockBackendArgs(ctrl *gomock.Controller) *MockBackendArgs {
	mock := &MockBackendArgs{ctrl: ctrl}
	mock.recorder = &MockBackendArgsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendArgs) EXPECT() *MockBackendArgsMockRecorder {
	return m.recorder
}
